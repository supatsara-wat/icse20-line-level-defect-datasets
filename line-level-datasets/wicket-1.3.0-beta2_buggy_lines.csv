File,LineNumber,src
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,101,"  setImageResourceReference(resourceReference,resourceParameters);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,157,  this.localizedImageResource.setResource(imageResource);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,166,  this.localizedImageResource.setResourceReference(resourceReference);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,172,  * @param parameters
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,173,  *      Set the resource parameters for the resource.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,175," public void setImageResourceReference(final ResourceReference resourceReference, final ValueMap parameters)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,177,"  this.localizedImageResource.setResourceReference(resourceReference,parameters);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,234,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/Image.java,236,"  * @see org.apache.wicket.Component#onComponentTagBody(MarkupStream, ComponentTag)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,158,"  String path = Strings.replaceAll(getPath(), ""%3A"", "":"").toString();"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,221,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,223,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,434,"  return ""[method = "" + httpServletRequest.getMethod() + "", protocol = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,435,"    + httpServletRequest.getProtocol() + "", requestURL = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,436,"    + httpServletRequest.getRequestURL() + "", contentType = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,437,"    + httpServletRequest.getContentType() + "", contentLength = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,438,"    + httpServletRequest.getContentLength() + "", contextPath = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,439,"    + httpServletRequest.getContextPath() + "", pathInfo = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,440,"    + httpServletRequest.getPathInfo() + "", requestURI = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,441,"    + httpServletRequest.getRequestURI() + "", servletPath = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,442,"    + httpServletRequest.getServletPath() + "", pathTranslated = """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,443,"    + httpServletRequest.getPathTranslated() + ""]"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,457,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,460,   this.previousUrlDepth = getRequestParameters().getUrlDepth();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java,461,
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,121,  response.write(getComponentMarkupId());
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,154,  String widgetId = getComponentMarkupId();
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,350,  * Gets the DOM id that the calendar widget will get attached to.
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,352,  * @return The DOM id of the calendar widget - same as the component's
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,353,  *         markup id + 'Dp'}
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,397,"  return component.getMarkupId() + ""Icon"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategy.java,188,"    params.put(parameterNames[i], pathParts[i]);"
jdk-1.4/wicket/src/test/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategyTest.java,216,"  ValueMap parameterMap = npucs.decodeParameters(""/1/2/3"", urlMap);"
jdk-1.4/wicket/src/test/java/org/apache/wicket/request/target/coding/MixedParamUrlCodingStrategyTest.java,218,"  assertContains(parameterMap, ""a"", ""1"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,1147,  * Gets the locale for the session holding this component.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,1149,  * @return The locale for the session holding this component
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,1150,  * @see Component#getSession()
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,1154,  return getSession().getLocale();
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,1558,  * will return null.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,1564,  return null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,168,  this.body.setVisible(false);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,184,  this.transparentResolver = enable;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,194,  return this.transparentResolver;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,241,  this.body.render(markupStream);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,254,  this.originalMarkupStream = getMarkupStream();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,258,  if (this.body.isVisible() == false)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,260,   this.originalMarkupStream.skipToMatchingCloseTag(openTag);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,273,  this.renderHeadFromAssociatedMarkupFile(container);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,307,    this.wasOpenCloseTag = true;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,320,   if (this.wasOpenCloseTag == false)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,327,"   super.onComponentTagBody(Border.this.originalMarkupStream, Border.this.openTag);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,330,   Border.this.originalMarkupStream = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,345,   if (!id.equals(Border.this.BODY_ID))
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,158,     markupSettings.setCompressWhitespace(true);
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,159,     markupSettings.setStripComments(true);
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,160,     markupSettings.setStripWicketTags(true);
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,161,     markupSettings.setStripXmlDeclarationFromOutput(true);
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,162,
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,352, public final MarkupStream getAssociatedMarkupStream(final boolean throwException)
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,572,    final Object removedChildren = MarkupContainer.this.children;
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,582,     MarkupContainer.this.children = removedChildren;
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,606,   this.children = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,944,  if (this.children == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,946,   this.children = child;
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,1059,    this.children = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,1075,     this.children = c[1];
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,1079,     this.children = c[0];
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,1097,    this.children = newChildren;
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,1231,    final List componentResolvers = this.getApplication().getPageSettings()
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,1556, final boolean hasAssociatedMarkup()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,23,import org.apache.wicket.markup.html.WebMarkupContainer;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,41, *             &lt;span wicket:id=&quot;myPanel&quot;&gt;Example input (will be removed)&lt;/span&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,42, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,43, *             &lt;wicket:fragment wicket:id=&quot;frag1&quot;&gt;panel 1&lt;/wicket:fragment&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,44, *             &lt;wicket:fragment wicket:id=&quot;frag2&quot;&gt;panel 2&lt;/wicket:fragment&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,47," *             add(new Fragment(&quot;myPanel1&quot;, &quot;frag1&quot;);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,52,public class Fragment extends WebMarkupContainer
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,213,  if (this.markupProvider == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,220,   stream = this.markupProvider.getAssociatedMarkupStream(false);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,249,"   throw new MarkupException(""Markup of component class `"""
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,250,     + providerMarkupStream.getContainerClass().getName()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,251,"     + ""` does not contain a fragment with wicket:id `"" + markupId + ""`. Context: """
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,252,     + toString());
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,90,  tester.getApplication().getPageSettings().addComponentResolver(new FragmentResolver());
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,99,  tester.getApplication().getPageSettings().addComponentResolver(new FragmentResolver());
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,108,  tester.getApplication().getPageSettings().addComponentResolver(new FragmentResolver());
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,126,  tester.getApplication().getPageSettings().addComponentResolver(new FragmentResolver());
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,134,// public void testInlinePanel_6() throws Exception
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,135,// {
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,136,//  tester.getPageSettings().addComponentResolver(new FragmentResolver());
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,137,"//  executeTest(InlinePanelPage_6.class, ""InlinePanelPageExpectedResult_6.html"");"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,138,// }
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/panel/PanelTest.java,139,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,348,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,349,   // no longer needed.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,350,   originalMarkupStream = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,351,   Border.this.openTag = null;
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/ComponentBorderTest.java,36,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/ComponentBorderTest.java,42,"  executeTest(MarkupComponentBorderTestPage.class, ""MarkupComponentBorderTestPage_ExpectedResult.html"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,227,"    fullParams.put(""input"", FormComponent.this.getInput());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,233,"    fullParams.put(""name"", FormComponent.this.getId());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,310,   return FormComponent.this.getConvertedInput();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,479,  * Checks if the form component's 'required' requirement is met
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,483, //TODO 1.4 why is this public?
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,486,  if (isRequired())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,487,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,488,   final String input = getInput();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,490,"   // when null, check whether this is natural for that component, or"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,491,   // whether - as is the case with text fields - this can only happen
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,492,   // when the component was disabled
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,493,   if (input == null && !isInputNullable())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,494,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,495,    // this value must have come from a disabled field
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,496,    // do not perform validation
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,497,    return true;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,498,   }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,499,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,500,   // peform validation by looking whether the value is null or empty
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,501,   if (Strings.isEmpty(input))
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,502,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,503,    return false;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,504,   }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,506,  return true;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,981,  this.typeName = type == null ? null : type.getName();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1049,  if (this.validators == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1051,   this.validators = validator;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1085,  if (this.validators == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1089,  if (this.validators instanceof IValidator[])
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1102,  if (this.validators == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1106,  if (this.validators instanceof IValidator[])
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1376,  * Checks if the raw input value is not null if this component is required
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1380,  if (!checkRequired())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1427,"     validator.getClass().getName() + "" on component "" + this.getPath(), e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,471,    this.formValidators = newValidators;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,904,   this.defaultButton = button;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1093,  if (this.formValidators == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1095,   this.formValidators = validator;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1115,   this.formValidators = validators;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1129,  if (this.formValidators == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1133,  if (this.formValidators instanceof IFormValidator[])
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1147,  if (this.formValidators == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1151,  if (this.formValidators instanceof IFormValidator[])
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1313,"  * the id=""xxx"" attribute."
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1325,  * Gets the method used to submit the form. Defaults to 'post'. Override
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1326,  * this if you have a requirement to alter this behavior.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1332,  return METHOD_POST;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1488,"   tag.put(""method"", getMethod());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1489,"   tag.put(""action"", Strings.replaceAll(urlFor(IFormSubmitListener.INTERFACE), ""&"","
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1490,"     ""&amp;""));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1536,"     .append(""\"" id=\"""").append(nameAndId).append(""\"" /></div>"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1673,  return last == this.findPage();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1738,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1740,"  visitChildren(Form.class, new IVisitor() {"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1743,    final Form form = (Form) component;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1749,
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,148,
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,149, /**
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,150,  * @see org.apache.wicket.markup.html.form.FormComponentPanel#checkRequired()
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,151,  */
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,152, public boolean checkRequired()
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,153, {
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,154,  return dateField.checkRequired();
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,155, }
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,53, private static final IConverter MINUTES_CONVERTER = new ZeroPaddingIntegerConverter(2);
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,54,
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,357,
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,358, /**
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,359,  * @see org.apache.wicket.markup.html.form.FormComponentPanel#checkRequired()
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,360,  */
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,361, public boolean checkRequired()
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,362, {
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,363,  return dateField.checkRequired();
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,364, }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,950, public final FormComponent setRequired(final boolean required)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,43, * <p>
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,44, * FormComponentPanel implementations have to provide meaningful implementations
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,45," * for the {@link #checkRequired() required check}. Typically, this means"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,46," * executing the check on nested components. For instance, a panel that embeds a"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,47," * date text field and a date picker, would simply check it's text field:"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,48, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,49, * <pre>
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,50, * private TextField dateField;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,51, * ...
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,52, * public boolean checkRequired()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,53, * {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,54, *  return dateField.checkRequired();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,55, * }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,56, * </pre>
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,57, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,58, * </p>
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,87, *  public boolean checkRequired()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,88, *  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,89, *   return left.checkRequired() &amp;&amp; right.checkRequired();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,90, *  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,91, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,167, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,168,  * Subclasses need to pass this check to the appropriate nested
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,169,"  * component(s). For instance, a panel that embeds a date text field and a"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,170,"  * date picker, would simply check it's text field:"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,171,  *
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,172,  * <pre>
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,173,  * private TextField dateField;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,174,  * ...
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,175,  * public boolean checkRequired()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,176,  * {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,177,  *  return dateField.checkRequired();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,178,  * }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,179,  * </pre>
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,180,  *
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,181,  * @see org.apache.wicket.markup.html.form.FormComponent#checkRequired()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,182,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,183, public abstract boolean checkRequired();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponentPanel.java,184,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,359, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,360,  * @see org.apache.wicket.markup.html.form.FormComponentPanel#checkRequired()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,361,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,362, public boolean checkRequired()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,363, {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,364,  return true;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,365, }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/upload/MultiFileUploadField.java,366,
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,72, /**
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,73,  * @see org.apache.wicket.markup.html.form.FormComponentPanel#checkRequired()
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,74,  */
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,75, @Override
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,76, public boolean checkRequired()
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,77, {
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,78,  return left.checkRequired() && right.checkRequired();
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,79, }
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/Multiply.java,80,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,486,  final String input = getInput();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,487,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,488,"  // when null, check whether this is natural for that component, or"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,489,  // whether - as is the case with text fields - this can only happen
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,490,  // when the component was disabled
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,491,  if (input == null && !isInputNullable())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,493,   // this value must have come from a disabled field
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,494,   // do not perform validation
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,495,   return true;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,496,  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,498,  // peform validation by looking whether the value is null or empty
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,499,  return !Strings.isEmpty(input);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1373,  if (isRequired() && !checkRequired())
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupFragmentFinder.java,112,"      ""Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: """
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupFragmentFinder.java,113,        + component.toString());
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,224,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,19,import org.apache.wicket.Component;
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,39, protected Component component;
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,40,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,70,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,71,"  response.renderOnLoadJavascript(""attachChoiceHandlers('"" + component.getMarkupId()+ ""', function() {"" + getEventHandler()+ ""});"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,72,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,28,import org.apache.wicket.model.IModel;
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,29,import org.apache.wicket.model.Model;
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,34, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,54,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,59,"  asb.append(""   if (choiceElement.childNodes[x] && choiceElement.childNodes[x].tagName) {\n"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,63,"  asb.append(""     }\n"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,67,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,70,"  response.renderOnLoadJavascript(""attachChoiceHandlers('"" + getComponent().getMarkupId()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,71,"    + ""', function() {"" + getEventHandler() + ""});"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,74,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,82,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,87,  * The RuntimeException will be null if it was just a validation or conversion
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,88,  * error of the FormComponent
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,95,  if(e != null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,113,    !(getComponent() instanceof RadioGroup) &&
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,114,    !(getComponent() instanceof CheckGroup))
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,116,"   throw new WicketRuntimeException(""Behavior "" + getClass().getName()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,117,"     + "" can only be added to an instance of a RadioChoice/CheckboxChoice/RadioGroup/CheckGroup"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,123,   IModel model = getComponent().getModel();
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,124,   if (model == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,125,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,126,    getComponent().setModel(new Model(null));
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,127,   }
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,147,"    ""', wicketSerializeForm(document.getElementById('"" + getComponent().getMarkupId()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,148,"      + ""',false))""));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java,166,
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,182,  if (component.findParent(Page.class) == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,187,"         + ""This can sometimes lead to an invalid localized resource returned. """
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,192,  // Check the cache first
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,193,"  String cacheKey = getCacheKey(key, component);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,197,  if (cache.containsKey(cacheKey))
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,218,"   putIntoCache(cacheKey, string);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,263,  if (cacheKey != null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,264,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,265,"   cache.put(cacheKey, string);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,266,  }
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,93,  add(dateField = newDateTextField(dateFieldModel));
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,126, protected DateTextField newDateTextField(PropertyModel dateFieldModel)
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java,128,"  return DateTextField.forShortStyle(""date"", dateFieldModel);"
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,224,  add(dateField = newDateTextField(dateFieldModel));
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,313, protected DateTextField newDateTextField(PropertyModel dateFieldModel)
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java,315,"  return DateTextField.forShortStyle(""date"", dateFieldModel);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Localizer.java,182,  boolean addedToPage = (component != null && null != component.findParent(Page.class));
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java,117,  * @return javascript that will run when the ajax call finishes
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java,118,  *            successfully
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java,135,  * @return an optional javacript expression that determines whether the request
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractDefaultAjaxBehavior.java,136,  *            will actually execute (in form of return XXX;);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,316,  * Return the length of the content. This is always -1 except if there has
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,317,  * been added uploaded files. Then the length will be the length of the
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,318,  * generated request.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,320,  * @return -1 if no uploaded files has been added. Else the length of the
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,325,  if (uploadedFiles != null && uploadedFiles.size() > 0)
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,335,  * If there has been added uploaded files return the correct content-type.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,337,  * @return The correct multipart content-type if there has been added
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,338,  *         uploaded files. Else null.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/MockHttpServletRequest.java,342,  if (uploadedFiles != null && uploadedFiles.size() > 0)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,46,import org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,49,import org.apache.wicket.util.upload.FileUploadException;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,562,   if (servletRequest.hasUploadedFiles())
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,563,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,564,"    requestCycle.setRequest(new MultipartServletWebRequest(servletRequest, workingForm"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,565,      .getMaxSize()));
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,566,   }
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,567,
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,570,  catch (FileUploadException e)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,571,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,572,   throw new WicketRuntimeException(e);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java,573,  }
jdk-1.4/wicket/src/test/java/org/apache/wicket/util/tester/FormTesterTest.java,110, public void bugTestSubmitWithoutUploadFile()
jdk-1.4/wicket/src/test/java/org/apache/wicket/util/tester/MockFormFileUploadPage.java,41, public static class MockDomainObjectFileUpload
jdk-1.4/wicket/src/test/java/org/apache/wicket/util/tester/MockFormPage.java,39, public class MockDomainObject
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,56, public void testInternalDetach() throws Exception
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,26,import org.apache.wicket.RequestCycle;
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,29,import org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest;
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,31,import org.apache.wicket.util.lang.Bytes;
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,50,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,51, public void testDummy() {
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,52,  // FIXME WICKET-728 broke this
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,53, }
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,60, public void bugTestInternalDetach() throws Exception
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,63,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,64,"  FileUploadField field = new FileUploadField(""upload"");"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,65,  page.getForm().add(field);
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,77,  // Setup the request. It should be a IMultipartWebRequest
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,78,  RequestCycle requestCycle = tester.createRequestCycle();
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,79,  MockHttpServletRequest servletRequest = tester.getServletRequest();
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,80,"  servletRequest.setMethod(""POST"");"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,81,"  servletRequest.setParameter(""form2:hf:fs"", """");"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,82,"  servletRequest.setParameter(""wicketState"", """");"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,83,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,103,"   servletRequest.addFile(""upload"", tmp, ""text/plain"");"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,104,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,105,"   requestCycle.setRequest(new MultipartServletWebRequest(servletRequest, Bytes.MAX));"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,106,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,107,   // attach manually for the test
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,108,   field.attach();
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,111,   FileUpload fileUpload = field.getFileUpload();
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,121,   field.detach();
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/FileUploadFieldTest.java,127,    fail();
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/MockPageWithFormAndUploadField.java,32,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/upload/MockPageWithFormAndUploadField.java,38,"  form = new Form(""form"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,484,      urlPattern = parser.getInputFromPositionMarker(elem.getPos()).toString();
jdk-1.4/wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java,33, public void bugTestFilterPath2() {
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,480,        .toString();
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,3306,"  * Called just before a component is rendered. If you override this, you"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,3307,  * *must* call super.onBeforeRender() within your implementation.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,116,  super.onBeforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,117,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,118,  // Remove any previous loop contents
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,119,  removeAll();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,120,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,121,  // Get number of iterations
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,122,  final int iterations = getIterations();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,123,  if (iterations > 0)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,125,   // Create LoopItems for each iteration
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,126,   for (int iteration = 0; iteration < iterations; iteration++)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,127,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,128,    // Create item for loop iteration
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,129,    LoopItem item = newItem(iteration);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,131,    // Add and populate item
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,132,    add(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,133,    populateItem(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,94,  super.onBeforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,95,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,117,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,246,"      return ""ItemsReuseStrategyChange[component: "" + getPath() + "", reuse: """
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,247,"        + old + ""]"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Session.java,1300,"      ""Cannot set the attribute: no RequestCycle available"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,64,  if (!stopped)
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,78,"  return ""setTimeout(\"""" + getCallbackScript() + ""\"", """
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,79,"    + updateInterval.getMilliseconds() + "");"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,84,"  return generateCallbackScript(""wicketAjaxGet('"""
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,85,"    + getCallbackUrl(onlyTargetActivePage()) + ""'"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,87,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,94,  if ( !(getComponent() instanceof Page) )
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,97,"   precondition = ""var c = Wicket.$('"" + componentId + ""'); return typeof(c) != 'undefined' && c != null"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,101,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,102, protected boolean onlyTargetActivePage() {
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,105,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,113,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,61,  * The name of the context parameter that specifies application factory
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,62,  * class
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,67,  * The name of the root path parameter that specifies the root dir of the
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,68,  * app.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,76,  * The servlet path holder when the WicketSerlvet is used. So that the
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,77,  * filter path will be computed with the first request. Note: This variable
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,78,  * is by purpose package protected. See WicketServlet
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,86,  * This is the filter path that can be specified in the filter config. Or it
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,87,  * is the servlet path if the wicket servlet it used. both are without any /
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,88,  * (start or end)
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,102,  if (this.webApplication != null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,104,   this.webApplication.internalDestroy();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,105,   this.webApplication = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,169,  if (relativePath.length() == 0
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,170,"    && !Strings.stripJSessionId(servletRequest.getRequestURI()).endsWith(""/""))"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,173,   servletResponse.sendRedirect(redirectUrl);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,226,"      bufferedResponse = webApplication.popBufferedResponse(sessionId, queryString);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,230,"      bufferedResponse = webApplication.popBufferedResponse(sessionId, relativePath);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,298,  * Returns a relative path from an HttpServletRequest Use this to resolve a
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,299,  * Wicket request.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,302,"  * @return Path requested, minus query string, context path, and filterPath."
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,303,"  *         Relative, no leading '/'."
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,384,"        .info(""Couldn't read web.xml to automatically pick up servlet/filter path: """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,385,          + e.getMessage());
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,389,"      log.info(""Unable to parse filter mapping web.xml for """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,390,"        + filterConfig.getFilterName() + "". """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,391,"        + ""Configure with init-param "" + FILTER_MAPPING_PARAM"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,392,"        + "" if it is not \""/*\""."");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,400,   this.webApplication = factory.createApplication(this);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,403,   this.webApplication.setWicketFilter(this);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,408,"   filterConfig.getServletContext().setAttribute(contextKey, this.webApplication);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,414,   this.webApplication.internalInit();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,417,   this.webApplication.init();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,423,   this.webApplication.initializeComponents();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,426,   this.webApplication.logStarted();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,484,      urlPattern = parser.getInputFromPositionMarker(elem.getPos()).toString().trim();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,505,"    throw new IllegalArgumentException(""Error initializing Wicket"" + prefixUppered"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,506,"      + "" - you have no <"" + mapping + ""> element with a url-pattern that uses """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,507,"      + prefix + "": "" + filterName);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,514,"    throw new IllegalArgumentException(""<"" + mapping + ""> for Wicket"" + prefixUppered"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,515,"      + "" \"""" + filterName + ""\"" must start with '/' and end with '*'."");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,523,"   throw new ServletException(""Error finding <"" + prefix + ""> "" + filterName"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,524,"     + "" in web.xml"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,528,"   throw new ServletException(""Error finding <"" + prefix + ""> "" + filterName"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,529,"     + "" in web.xml"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,533,"   throw new ServletException(""Error finding <"" + prefix + ""> "" + filterName"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,534,"     + "" in web.xml"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,568,  * If the response has not already a 'lastModified' header set and if
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,569,  * 'lastModified' >= 0 than set the response header accordingly.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,589,  * If no APP_FACT_PARAM is specified in web.xml
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,590,  * ContextParamWebApplicationFactory will be used by default.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,618,"    throw new WicketRuntimeException(""Application factory class "" + appFactoryClassName"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,619,"      + "" must implement IWebApplicationFactory"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,664,"     ""\nThe filterPath init-param for WicketFilter has been removed.\n"""
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,665,"       + ""Please use a param called """
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,666,       + FILTER_MAPPING_PARAM
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,667,"       + "" with a value that exactly\n"""
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,668,"       + ""matches that in the <url-pattern> element of your <filter-mapping> (e.g. \""/app/*\"")."");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,678,"   throw new WicketRuntimeException(""Your "" + FILTER_MAPPING_PARAM"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,679,"     + "" must start with \""/\"" and end with \""/*\"". It is: "" + result);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,683,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,686,  * @param result
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,687,  * @return
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,689, private String stripWildcard(String result) {
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,31, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,32,"  * @see org.apache.wicket.util.convert.converters.DateConverter#convertToObject(java.lang.String,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,33,  *      java.util.Locale)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,34,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,37,"  return new Time(((Date)super.convertToObject(value, locale)).getTime());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,40, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,41,  * @see org.apache.wicket.util.convert.converters.DateConverter#getTargetType()
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,42,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimeConverter.java,47,
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,28,public class SqlTimestampConverter extends DateConverter
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,32, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,33,"  * @see org.apache.wicket.util.convert.converters.DateConverter#convertToObject(java.lang.String,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,34,  *      java.util.Locale)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,35,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,38,"  return new Timestamp(((Date)super.convertToObject(value, locale)).getTime());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,41, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,42,  * @see org.apache.wicket.util.convert.converters.DateConverter#getTargetType()
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/SqlTimestampConverter.java,43,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/DefaultButtonImageResource.java,27, * Automatically generates a basic button image. The model for the component
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/DefaultButtonImageResource.java,28, * determines the label displayed on the button.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/DefaultButtonImageResource.java,52," private static final Map DEFAULT_FONT = new Font(""Helvetica"", Font.BOLD, 16).getAttributes();"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/DefaultButtonImageResource.java,192,  this.backgroundColorRgb = backgroundColor.getRGB();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/DefaultButtonImageResource.java,202,  this.colorRgb = color.getRGB();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/DefaultButtonImageResource.java,212,  this.fontAttributes = font.getAttributes();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/DefaultButtonImageResource.java,222,  this.textColorRgb = textColor.getRGB();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,34, * A ListView is a repeater that makes it easy to display/work with {@link List}s.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,35," * However, there are situations where it is necessary to work with other"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,36," * collection types, for repeaters that might work better with non-list or"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,37, * database-driven collections see the org.apache.wicket.markup.repeater
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,38, * package.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,40, * Also notice that in a list the item's uniqueness/primary key/id is identified
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,41, * as its index in the list. If this is not the case you should either override
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,42," * {@link #getListItemModel(IModel, int)} to return a model that will work with"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,43," * the item's true primary key, or use a different repeater that does not rely"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,44, * on the list index.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,47," * A ListView holds ListItem children. Items can be re-ordered and deleted,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,48, * either one at a time or many at a time.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,60," * Though this example is about a HTML table, ListView is not at all limited to"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,61, * HTML tables. Any kind of list can be rendered using ListView.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,79, * When you want to change the default generated markup it is important to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,80," * realise that the ListView instance itself does not correspond to any markup,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,81," * however, the generated ListItems do.<br/>"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,84, * {@link #add(org.apache.wicket.behavior.IBehavior)} should be invoked on the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,85, * {@link ListItem} that is given in {@link #populateItem(ListItem)} method.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,89," * <strong>WARNING:</strong> though you can nest ListViews within Forms, you"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,90, * HAVE to set the setReuseItems property to true in order to have validation
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,91," * work properly. By default, setReuseItems is false, which has the effect that"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,92, * ListView replaces all child components by new instances. The idea behind this
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,93," * is that you always render the fresh data, and as people usually use ListViews"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,94," * for displaying read-only lists (at least, that's what we think), this is good"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,96," * However, as the components are replaced before the rendering starts, the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,97, * search for specific messages for these components fails as they are replaced
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,98, * with other instances. Another problem is that 'wrong' user input is kept as
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,99, * (temporary) instance data of the components. As these components are replaced
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,100," * by new ones, your user will never see the wrong data when setReuseItems is"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,101, * false.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,115,"  * If true, re-rendering the list view is more efficient if the window"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,116,  * doesn't get changed at all or if it gets scrolled (compared to paging).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,117,"  * But if you modify the listView model object, than you must manually call"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,118,  * listView.removeAll() in order to rebuild the ListItems. If you nest a
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,119,"  * ListView in a Form, ALWAYS set this property to true, as otherwise"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,120,  * validation will not work properly.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,166,  * Gets the list of items in the listView. This method is final because it
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,167,"  * is not designed to be overridden. If it were allowed to be overridden,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,168,  * the values returned by getModelObject() and getList() might not coincide.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,183,  * If true re-rendering the list view is more efficient if the windows
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,184,  * doesn't get changed at all or if it gets scrolled (compared to paging).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,185,"  * But if you modify the listView model object, than you must manually call"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,186,  * listView.removeAll() in order to rebuild the ListItems. If you nest a
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,187,"  * ListView in a Form, ALLWAYS set this property to true, as otherwise"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,188,  * validation will not work properly.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,208,"  * Based on the model object's list size, firstIndex and view size,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,209,  * determine what the view size really will be. E.g. default for viewSize is
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,210,"  * Integer.MAX_VALUE, if not set via setViewSize(). If the underlying list"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,211,"  * has 10 elements, the value returned by getViewSize() will be 10 if"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,249,"  * Returns a link that will move the given item ""down"" (towards the end) in"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,250,  * the listView.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,306,"  * Returns a link that will move the given item ""up"" (towards the beginning)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,307,  * in the listView.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,364,  * Returns a link that will remove this ListItem from the ListView that
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,365,  * holds it.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,409,"  * Sets the model as the provided list and removes all children, so that the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,410,  * next render will be using the contents of the model.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,413,  *            The list for the new model. The list must implement
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,414,  *            {@link Serializable}.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,423,"  * Sets the model and removes all current children, so that the next render"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,424,  * will be using the contents of the model.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,438,  * If true re-rendering the list view is more efficient if the windows
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,439,  * doesn't get changed at all or if it gets scrolled (compared to paging).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,440,"  * But if you modify the listView model object, than you must manually call"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,441,  * listView.removeAll() in order to rebuild the ListItems. If you nest a
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,442,"  * ListView in a Form, ALLWAYS set this property to true, as otherwise"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,443,  * validation will not work properly.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,498,  * Subclasses may provide their own ListItemModel with extended
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,499,  * functionality. The default ListItemModel works fine with mostly static
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,500,  * lists where index remains valid. In cases where the underlying list
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,501,"  * changes a lot (many users using the application), it may not longer be"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,502,  * appropriate. In that case your own ListItemModel implementation should
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,503,  * use an id (e.g. the database' record id) to identify and load the list
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,504,  * item model object.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,529,  * @see org.apache.wicket.MarkupContainer#onBeforeRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,531, protected void onBeforeRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,533,  if (isVisibleInHierarchy())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,535,   // Get number of items to be displayed
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,536,   final int size = getViewSize();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,537,   if (size > 0)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,539,    if (getReuseItems())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,541,     // Remove all ListItems no longer required
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,542,     final int maxIndex = firstIndex + size;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,543,     for (final Iterator iterator = iterator(); iterator.hasNext();)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,545,      // Get next child component
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,546,      final ListItem child = (ListItem)iterator.next();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,547,      if (child != null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,549,       final int index = child.getIndex();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,550,       if (index < firstIndex || index >= maxIndex)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,551,       {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,552,        iterator.remove();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,553,       }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,557,    else
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,558,    {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,559,     // Automatically rebuild all ListItems before rendering the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,560,     // list view
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,561,     removeAll();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,562,    }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,563,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,564,    // Loop through the markup in this container for each item
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,565,    for (int i = 0; i < size; i++)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,566,    {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,567,     // Get index
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,568,     final int index = firstIndex + i;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,569,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,570,"     // If this component does not already exist, populate it"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,571,     ListItem item = (ListItem)get(Integer.toString(index));
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,572,     if (item == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,573,     {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,574,      // Create item for index
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,575,      item = newItem(index);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,576,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,577,      // Add list item
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,578,      add(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,579,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,580,      // Populate the list item
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,581,      onBeginPopulateItem(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,582,      populateItem(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,583,     }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,584,    }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,592,  super.onBeforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,596,  * Comes handy for ready made ListView based components which must implement
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,597,  * populateItem() but you don't want to lose compile time error checking
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/ListView.java,598,  * reminding the user to implement abstract populateItem().
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,29, * A very simple loop component whose model is an Integer defining the number of
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,30," * iterations the loop should render. During rendering, Loop iterates from 0 to"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,31," * getIterations() - 1, creating a new MarkupContainer for each iteration. The"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,32, * MarkupContainer is populated by the Loop subclass by implementing the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,33, * abstract method populate(LoopItem). The populate() method is called just
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,34, * before the LoopItem container is rendered.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,114, protected void onBeforeRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,116,  if (isVisibleInHierarchy())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,117,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,118,   // Remove any previous loop contents
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,119,   removeAll();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,121,   // Get number of iterations
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,122,   final int iterations = getIterations();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,123,   if (iterations > 0)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,125,    // Create LoopItems for each iteration
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,126,    for (int iteration = 0; iteration < iterations; iteration++)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,127,    {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,128,     // Create item for loop iteration
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,129,     LoopItem item = newItem(iteration);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,130,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,131,     // Add and populate item
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,132,     add(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,133,     populateItem(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,134,    }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,138,  super.onBeforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/list/Loop.java,139,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,24, * A navigation for a PageableListView that holds links to other pages of the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,25, * PageableListView.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,27, * For each row (one page of the list of pages) a {@link PagingNavigationLink}will
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,28, * be added that contains a {@link Label} with the page number of that link
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,29, * (1..n).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,49, * Override method populateItem to customize the rendering of the navigation.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,50, * For instance:
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,53, *  protected void populateItem(LoopItem loopItem) {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,54, *   final int page = loopItem.getIteration();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,55," *  final PagingNavigationLink link = new PagingNavigationLink(&quot;pageLink&quot;, pageableListView, page);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,56, *  if (page &gt; 0) {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,57," *   loopItem.add(new Label(&quot;separator&quot;, &quot;|&quot;));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,58, *  } else {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,59," *   loopItem.add(new Label(&quot;separator&quot;, &quot;&quot;));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,60, *  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,61," *  link.add(new Label(&quot;pageNumber&quot;, String.valueOf(page + 1)));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,62," *  link.add(new Label(&quot;pageLabel&quot;, &quot;page&quot;));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,63, *  loopItem.add(link);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,64, * }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,70, * &lt;span wicket:id=&quot;navigation&quot;&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,71, *  &lt;span wicket:id=&quot;separator&quot;&gt;&lt;/span&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,72, *  &lt;a wicket:id=&quot;pageLink&quot; href=&quot;#&quot;&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,73, *   &lt;span wicket:id=&quot;pageLabel&quot;&gt;&lt;/span&gt;&lt;span wicket:id=&quot;pageNumber&quot;&gt;&lt;/span&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,74, *  &lt;/a&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,75, * &lt;/span&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,81, * page1 | page2 | page3 | page4 | page5 | page6 | page7 | page8 | page9
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,85, * Assuming a PageableListView with 1000 entries and not more than 10 lines
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,86," * shall be printed per page, the navigation bar would have 100 entries. Because"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,87, * this is not feasible PagingNavigation's navigation bar is pageable as well.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,89, * The page links displayed are automatically adjusted based on the number of
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,90, * page links to be displayed and a margin. The margin makes sure that the page
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,91, * link pointing to the current page is not at the left or right end of the page
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,92, * links currently printed and thus providing a better user experience.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,94, * Use setMargin() and setViewSize() to adjust the navigation's bar view size
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,95, * and margin.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,99, * @see PagingNavigator for a ready made component which already includes links
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,100," *      to the first, previous, next and last page."
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,111,  * Undo change for navigation start index. Makes certain that back button
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,112,  * works with paging in the navigator.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,158,  * Number of links on the left and/or right to keep the current page link
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,159,  * somewhere near the middle.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,193,  *            The label provider for the text that the links should be
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,194,  *            displaying.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,206,"  * Gets the margin, default value is half the view size, unless explicitly"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,207,  * set.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,247,  this.viewSize = size;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,273,  * @see org.apache.wicket.Component#onBeforeRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,275, protected void onBeforeRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,277,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,283,  this.setStartIndex();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,284,  super.onBeforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,288,  * Allow subclasses replacing populateItem to calculate the current page
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,289,  * number
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,295,  return this.startIndex;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,299,  * Populate the current cell with a page link (PagingNavigationLink)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,300,  * enclosing the page number the link is pointing to. Subclasses may provide
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,301,  * there own implementation adding more sophisticated page links.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,362,  * Get the first page link to render. Adjust the first page link based on
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,363,  * the current PageableListView page displayed.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,368,  int firstListItem = this.startIndex;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,401,  if ((viewSize != getIterations()) || (this.startIndex != firstListItem))
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,403,   this.modelChanging();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,406,   addStateChange(new StartIndexChange(this.startIndex));
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,407,   this.startIndex = firstListItem;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,409,"   this.setIterations(Math.min(viewSize, pageable.getPageCount()));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java,411,   this.modelChanged();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,29, * Base class for repeaters. This container renders each of its children using
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,30, * its own markup.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,32, * The children are collected using {@link #renderIterator()} method. This class
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,33, * will take care of properly positioning and rewinding its markup stream so
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,34, * before each child renders it points to the beginning of this component. Each
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,35, * child is rendered by a call to {@link #renderChild(Component)}. A typical
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,36, * implementation simply does <code>child.render(getMarkupStream());</code>.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,68,  * Returns an iterator for the collection of child components to be
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,69,  * rendered. Users can override this to change order of rendered children.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,107,  * Render a single child. This method can be overridden to modify how a
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/AbstractRepeater.java,108,  * single child component is rendered.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,27, * An abstract repeater view that provides refreshing functionality to its
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,28," * subclasses. The view is refreshed every request, making it well suited for"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,29, * displaying dynamic data.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,31, * The view is populated by implementing {@link RefreshingView#getItemModels() }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,32, * and {@link RefreshingView#populateItem(Item) } methods. RefreshingView builds
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,33, * the items that will be rendered by looping over the models retrieved from
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,34, * {@link RefreshingView#getItemModels() } and calling the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,35," * {@link RefreshingView#newItem(String, int, IModel) } to generate the child"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,36, * item container followed by a call to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,37, * {@link RefreshingView#populateItem(Item) } to let the user populate the newly
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,38, * created item container with custom components.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,42, * {@link RefreshingView#getItemModels() } easier if you have an iterator over
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,43, * item objects.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,57,  * The item reuse strategy that will be used to recycle items when the page
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,58,  * is changed or the view is redrawn.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,89,  * Refresh the items in the view. Delegates the creation of items to the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,90,  * selected item reuse strategy
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,92, protected void onBeforeRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,94,  if (isVisibleInHierarchy())
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,97,   IItemFactory itemFactory = new IItemFactory()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,100,"    public Item newItem(int index, IModel model)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,101,    {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,102,     String id = RefreshingView.this.newChildId();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,103,"     Item item = RefreshingView.this.newItem(id, index, model);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,104,     RefreshingView.this.populateItem(item);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,105,     return item;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,106,    }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,107,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,108,   };
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,109,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,110,   Iterator models = getItemModels();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,111,"   Iterator items = getItemReuseStrategy().getItems(itemFactory, models, getItems());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,112,   removeAll();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,113,   addItems(items);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,114,  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,115,  super.onBeforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,128,  * <b>be carefull</b> to add any components to the item and not the view
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,129,"  * itself. So, don't do:"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,149,  * Factory method for Item container. Item containers are simple
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,150,  * MarkupContainer used to aggregate the user added components for a row
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,151,  * inside the view.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,177,  * Add items to the view. Prior to this all items were removed so every
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,178,  * request this function starts from a clean slate.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,196,  * @return currently set item reuse strategy. Defaults to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,197,  *         <code>DefaultItemReuseStrategy</code> if none was set.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,211,  * Sets the item reuse strategy. This strategy controls the creation of
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RefreshingView.java,212,  * {@link Item}s.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,27," * A repeater view that renders all of its children, using its body markup, in"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,28, * the order they were added.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,58," * To expand a bit: the repeater itself produces no markup, instead every direct"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,59, * child inherits the entire markup of the repeater. In the example above
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,60, * reeaters's markup is:
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,66, * and so this is the markup that is available to the direct children - the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,67, * Label components. So as each label renders it produces a line of the output
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,68, * that has the <code>li</code>tag.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,97,  * Generates a unique id string. This makes it easy to add items to be
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,98,  * rendered w/out having to worry about generating unique id strings in your
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/repeater/RepeatingView.java,99,  * code.
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/SelectOptions.java,85, protected void onBeforeRender()
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/SelectOptions.java,87,  super.onBeforeRender();
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/SelectOptions.java,88,
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/breadcrumb/BreadCrumbBar.java,164,  protected void onBeforeRender()
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/breadcrumb/BreadCrumbBar.java,166,   super.onBeforeRender();
jdk-1.5/wicket-jmx/src/main/java/org/apache/wicket/jmx/ResourceSettings.java,24,
jdk-1.5/wicket-jmx/src/main/java/org/apache/wicket/jmx/ResourceSettings.java,102,   return (String[])loaders.toArray(new String[loaders.size()]);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,31," * Holds an immutable String value and optionally a Locale, with methods to"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,32, * convert to various types. Also provides some handy parsing methods and a
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,33, * variety of static factory methods.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,35, * Objects can be constructed directly from Strings or by using the valueOf()
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,36, * static factory methods. The repeat() static factory methods provide a way of
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,37, * generating a String value that repeats a given char or String a number of
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,38, * times.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,40, * Conversions to a wide variety of types can be found in the to*() methods. A
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,41, * generic conversion can be achieved with to(Class).
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,43," * The beforeFirst(), afterFirst(), beforeLast() and afterLast() methods are"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,44, * handy for parsing things like paths and filenames.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,54,
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,117,  * @return String value formatted with the given number of places after
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,118,  *         decimal
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,221,  this.locale = Locale.getDefault();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,295," public final CharSequence replaceAll(final CharSequence searchFor, final CharSequence replaceWith)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,350,"  throw new StringValueConversionException(""Cannot convert '"" + toString() + ""'to type """
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,351,    + type);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,380,  * Convert this text to a boolean and convert unchecked
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,381,  * NumberFormatExceptions to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,416,  * Convert this text to a Character and convert unchecked
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,417,  * NumberFormatExceptions to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,428,  * Convert this text to a double and convert unchecked
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,429,  * NumberFormatExceptions to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,438,   return NumberFormat.getNumberInstance(this.locale).parse(text).doubleValue();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,442,"   throw new StringValueConversionException(""Unable to convert '"" + text"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,443,"     + ""' to a double value"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,461,  * Convert this text to a Double and convert unchecked
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,462,  * NumberFormatExceptions to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,473,  * Convert this text to a Duration instance and convert unchecked
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,474,  * NumberFormatExceptions to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,481,"  return Duration.valueOf(text, this.locale);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,499,  * Convert this text to an int and convert unchecked NumberFormatExceptions
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,500,  * to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,513,"   throw new StringValueConversionException(""Unable to convert '"" + text"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,514,"     + ""' to an int value"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,532,  * Convert this text to an Integer and convert unchecked
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,533,  * NumberFormatExceptions to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,546,"   throw new StringValueConversionException(""Unable to convert '"" + text"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,547,"     + ""' to an Integer value"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,552,  * Convert this text to a long and convert unchecked NumberFormatExceptions
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,553,  * to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,566,"   throw new StringValueConversionException(""Unable to convert '"" + text"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,567,"     + ""' to a long value"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,585,  * Convert this text to a Long and convert unchecked NumberFormatExceptions
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,586,  * to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,599,"   throw new StringValueConversionException(""Unable to convert '"" + text"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,600,"     + ""' to a Long value"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,712,  * Convert this text to a time instance and convert unchecked
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,713,  * NumberFormatExceptions to checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,726,"   throw new StringValueConversionException(""Unable to convert '"" + text"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/StringValue.java,727,"     + ""' to a Time value"", e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,31, * Implementation of an <a
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,32," * href=""http://www.w3.org/TR/REC-html40/present/frames.html#h-16.5"">inline"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,33, * frame</a> component. Must be used with an iframe (&lt;iframe src...)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,34, * element. The src attribute will be generated.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,47,  * The pagemap name where the page that will be created by this inline frame
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,48,  * will be created in.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,53,  * Constructs an inline frame that instantiates the given Page class when
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,54,  * the content of the inline frame is requested. The instantiated Page is
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,55,  * used to render a response to the user.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,68,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,70,  * Constructs an inline frame that instantiates the given Page class when
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,71,  * the content of the inline frame is requested. The instantiated Page is
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,72,  * used to render a response to the user.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,83," public InlineFrame(final String id, final IPageMap pageMap, final Class c, final PageParameters params)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,116,  * This constructor is ideal if a Page object was passed in from a previous
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,117,  * Page. Construct an inline frame containing the given Page.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,126,"  this(id, null, new IPageLink()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,146,  * Constructs an inline frame which invokes the getPage() method of the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,147,  * IPageLink interface when the content of the inline frame is requested.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,148,  * Whatever Page objects is returned by this method will be rendered back to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,149,  * the user.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,156,  *            An implementation of IPageLink which will create the page to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,157,  *            be contained in the inline frame if and when the content is
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,158,  *            requested
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,164,  this.pageMapName = pageMap.getName();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,227,  return PageMap.forName(this.pageMapName);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,119,   long lastModified = getLastModified(httpServletRequest);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,209,   final WebRequest request = webApplication.newWebRequest(servletRequest);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,247,   final WebResponse response = webApplication.newWebResponse(servletResponse);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,255,"    RequestCycle cycle = webApplication.newRequestCycle(request, response);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,695,  * @param request
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,698, long getLastModified(final HttpServletRequest request)
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,700,  final String pathInfo = getRelativePath(request);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,718,     final WebRequest webRequest = webApplication.newWebRequest(request);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,719,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,721,     resource.setParameters(webRequest.getParameterMap());
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,36, * Servlet class for all wicket applications. The specific application class to
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,37, * instantiate should be specified to the application server via an init-params
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,38," * argument named ""applicationClassName"" in the servlet declaration, which is"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,39, * typically in a <i>web.xml </i> file. The servlet declaration may vary from
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,40," * one application server to another, but should look something like this:"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,54, * Note that the applicationClassName parameter you specify must be the fully
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,55, * qualified name of a class that extends WebApplication. If your class cannot
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,56," * be found, does not extend WebApplication or cannot be instantiated, a runtime"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,57, * exception of type WicketRuntimeException will be thrown.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,59," * As an alternative, you can configure an application factory instead. This"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,60, * looks like:
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,69, * and it has to satisfy interface
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,70, * {@link org.apache.wicket.protocol.http.IWebApplicationFactory}.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,73," * When GET/POST requests are made via HTTP, a WebRequestCycle object is"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,74," * created from the request, response and session objects (after wrapping them"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,75, * in the appropriate wicket wrappers). The RequestCycle's render() method is
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,76, * then called to produce a response to the HTTP request.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,78," * If you want to use servlet specific configuration, e.g. using init parameters"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,79," * from the {@link javax.servlet.ServletConfig}object, you should override the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,80, * init() method of {@link javax.servlet.GenericServlet}. For example:
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,91," * In order to support frameworks like Spring, the class is non-final and the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,92, * variable webApplication is protected instead of private. Thus subclasses may
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,93, * provide their own means of providing the application object.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,194,  * @return The wicket filter
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java,215,  return wicketFilter.getLastModified(servletRequest);
jdk-1.4/wicket/src/main/java/org/apache/wicket/RequestCycle.java,886,  * Clean up the request cycle.
jdk-1.4/wicket/src/main/java/org/apache/wicket/RequestCycle.java,888, private void detach()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,49, * This class encapsulates the logic for displaying and (partial) updating the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,50, * tree. Actual presentation is out of scope of this class. User should derive
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,51, * they own tree (if needed) from {@link DefaultAbstractTree} or {@link Tree}
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,52, * (recommended).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,74,  * This class represents one row in rendered tree (TreeNode). Only TreeNodes
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,75,  * that are visible (all their parent are expanded) have TreeItem created
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,76,  * for them.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,81,   * whether this tree item should also render it's children to response.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,82,   * this is set if we need the whole subtree rendered as one component in
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,83,"   * ajax response, so that we can replace it in one step (replacing"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,84,"   * individual rows is very slow in javascript, therefore we replace the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,85,   * whole subtree)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,92,   * tree item children - we need this to traverse items in correct order
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,93,   * when rendering
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,180,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,215,      }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,221,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,225,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,258,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,262,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,284,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,296,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,297,"   //children are rendered, clear the flag"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,300,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,303,   AbstractTree.this.onBeforeRenderInternal();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,305,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,313,      item.beforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,318,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,337,"  * Components that holds tree items. This is similiar to ListView, but it"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,338,  * renders tree items in the right order.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,370,"   * renders the tree items, making sure that items are rendered in the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,371,   * order they should be
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,453,  * whether the whole tree is dirty (so the whole tree needs to be
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,454,  * refreshed).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,459,"  * list of dirty items. if children property of these items is null, the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,460,  * chilren will be rebuild.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,465,  * list of dirty items which need the DOM structure to be created for them
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,466,  * (added items)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,477,"  * map that maps TreeNode to TreeItem. TreeItems only exists for TreeNodes,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,478,  * that are visibled (their parents are not collapsed).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,483,"  * we need to track previous model. if the model changes, we unregister the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,484,  * tree from listeners of old model and register the tree as litener of new
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,485,  * model.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,555,  * This method is called before the onAttach is called. Code here gets
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,556,  * executed before the items have been populated.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,564, private void onBeforeRenderInternal()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,607,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,609,"  * Called at the beginning of the request (not ajax request, unless we are"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,610,  * rendering the entire component)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,628,  * Call to refresh the whole tree. This should only be called when the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,629,  * roodNode has been replaced or the entiry tree model changed.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,634,  this.dirtyAll = true;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,688,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,690,  * Determines whether the TreeNode needs to be rebuilt if it is selected
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,691,  * or deselected
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,694, protected boolean isForceRebuildOnSelectionChange()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,754,"  * Marks the last but one visible child node of the given item as dirty, if"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,755,  * give child is the last item of parent.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,757,  * We need this to refresh the previous visible item in case the inserted /
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,758,  * deleteditem was last. The reason is that the line shape of previous item
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,759,  * chages from L to |- .
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,870,  * Updates the changed portions of the tree using given AjaxRequestTarget.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,871,  * Call this method if you modified the tree model during an ajax request
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,872,  * target and you want to partially update the component on page. Make sure
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,873,  * that the tree model has fired the proper listener functions.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,944,"      target.prependJavascript(""Wicket.Tree.createElement(\"""""
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,945,"        + item.getMarkupId() + ""\"","" + ""\"""" + previous.getMarkupId()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,946,"        + ""\"")"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1003,"  * Creates the TreeState, which is an object where the current state of tree"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1004,"  * (which nodes are expanded / collapsed, selected, ...) is stored."
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1014,  * Called after the rendering of tree is complete. Here we clear the dirty
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1015,  * flags.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1025,  * This method is called after creating every TreeItem. This is the place
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1026,"  * for adding components on item (junction links, labels, icons...)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1029,  *            newly created tree item. The node can be obtained as
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1030,  *            item.getModelObject()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1038,  * Builds the children for given TreeItem. It recursively traverses children
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1039,  * of it's TreeNode and creates TreeItem for every visible TreeNode.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1096,"  * Checks whether the model has been chaned, and if so unregister and"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1097,  * register listeners.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1208,"  * Invalidates single node (without children). On the next render, this node"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1209,"  * will be updated. Node will not be rebuilt, unless forceRebuild is true."
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1272,"  * Invalidates node and it's children. On the next render, the node and"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1273,  * children will be updated. Node children will be rebuilt.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1307,"  * Returns whether the given node is visibled, e.g. all it's parents are"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1308,  * expanded.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1370,  * Rebuilds children of every item in dirtyItems that needs it. This method
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1371,  * is called for non-partial update.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1388,"  * Removes the item, appends it's id to deleteIds. This is called when a"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1389,  * items parent is being deleted or rebuilt.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1424,  this.dirtyAll = false;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1425,  this.dirtyItems.clear();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1426,  this.dirtyItemsCreateDOM.clear();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1431,  * Call the callback#visitItem method for the given item and all it's
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1432,  * chilren.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1466,"  * Returns the component associated with given node, or null, if node is not"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1467,  * visible. This is useful in situations when you want to touch the node
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1468,  * element in html.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1472,"  * @return Component associated with given node, or null if node is not"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1473,  *         visible.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,24,import org.apache.wicket.Response;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,43," * This page uses a form post right after the page has loaded in the browser,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,44, * using JavaScript or alternative means to detect and pass on settings to the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,45, * embedded form. The form submit method updates this session's
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,46, * {@link org.apache.wicket.request.ClientInfo} object and then redirects to the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,47, * original location as was passed in as a URL argument in the constructor.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,50, * This page is being used by the default implementation of
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,51," * {@link WebRequestCycle#newClientInfo}, which in turn uses"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,52, * {@link IRequestCycleSettings#getGatherExtendedBrowserInfo() a setting} to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,53, * determine whether this page should be redirected to (it does when it is
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,54, * true).
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,70,  * Bookmarkable constructor. This is not for normal framework client use. It
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,71,"  * will be called whenever Javascript is not supported, and the browser info"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,72,"  * page's meta refresh fires to this page. Prior to this, the other"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,73,  * constructor should already have been called.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,109,  * Constructor. The page will redirect to the given url after waiting for
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,110,  * the given number of seconds.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,168,  RequestCycle requestCycle = getRequestCycle();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,169,"  // Since we are explicitly redirecting to a page already, we do not"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,170,  // want a second redirect to occur automatically
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,171,  requestCycle.setRedirect(false);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,172,  // Redirect there
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,173,  Response response = requestCycle.getResponse();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,174,  response.reset();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,175,  response.redirect(requestCycle.getRequest().getRelativePathPrefixToWicketHandler()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,176,    + continueTo);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,178,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,180,"  * Log a warning that for in order to use this page, you should really be"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,181,  * using {@link WebClientInfo}.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,188,"  log.warn(""using "" + getClass().getName() + "" makes no sense if you are not using """
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,189,"    + WebClientInfo.class.getName() + "" (you are using """
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/pages/BrowserInfoPage.java,190,"    + clientInfo.getClass().getName() + "" instead)"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,25,import org.apache.wicket.RestartResponseAtInterceptPageException;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,38," * RequestCycle implementation for HTTP protocol. Holds the application,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,39," * session, request and response objects for a given HTTP request. Contains"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,40, * methods (urlFor*) which yield a URL for bookmarkable pages as well as
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,41, * non-bookmarkable component interfaces. The protected handleRender method is
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,42, * the internal entrypoint which takes care of the details of rendering a
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,43, * response to an HTTP request.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,62,  * Constructor which simply passes arguments to superclass for storage
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,63,  * there. This instance will be set as the current one for this thread.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,79,  * By default returns the WebApplication's default request cycle processor.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,80,"  * Typically, you don't override this method but instead override"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,81,  * {@link WebApplication#getRequestCycleProcessor()}.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,83,  * <strong>if you decide to override this method to provide a custom
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,84,"  * processor per request cycle, any mounts done via WebApplication will not"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,85,"  * work and and {@link #onRuntimeException(Page, RuntimeException)} is not"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,86,  * called unless you deliberately put effort in it to make it work.</strong>
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,121,"  * Redirects browser to the given page. NOTE: Usually, you should never call"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,122,"  * this method directly, but work with setResponsePage instead. This method"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,123,  * is part of Wicket's internal behavior and should only be used when you
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,124,  * want to circumvent the normal framework behavior and issue the redirect
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,125,  * directly.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,136,  if ((settings.getRenderStrategy() == IRequestCycleSettings.REDIRECT_TO_BUFFER)
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,137,    && (application instanceof WebApplication))
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,147,"     ((ServletWebRequest)getWebRequest()).setWicketRedirectUrl(Strings.replaceAll(page.urlFor(IRedirectListener.INTERFACE).toString(),""../"","""").toString());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,195,      ((ServletWebRequest)getWebRequest()).setWicketRedirectUrl(null);
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,197,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,199,"     String stripped = Strings.replaceAll(redirectUrl,""../"","""").toString();"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,201,"     String sessionId = getApplication().getSessionStore().getSessionId(request, true);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,202,"     ((WebApplication)application).addBufferedResponse(sessionId, stripped.substring(index + 1), servletResponse);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,261,    throw new RestartResponseAtInterceptPageException(new BrowserInfoPage(getRequest().getRelativePathPrefixToContextRoot() + getRequest().getURL()));
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,34,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,37, * This filter can be used to make the Wicket
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,38, * {@link org.apache.wicket.protocol.http.WebSession} instances available to
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,39, * non-wicket servlets.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,42, * The following example displays how you can make the Wicket session object of
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,43," * application SessionApplication, mapped on <code>/sessiontest/*</code>"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,44," * available for servlet WicketSessionServlet, mapped under"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,45, * <code>/servlet/sessiontest</code>:
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,48, *    &lt;filter&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,49, *      &lt;filter-name&gt;WicketSessionFilter&lt;/filter-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,50, *      &lt;filter-class&gt;org.apache.wicket.protocol.http.servlet.WicketSessionFilter&lt;/filter-class&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,51, *      &lt;init-param&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,52, *        &lt;param-name&gt;servletPath&lt;/param-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,53, *        &lt;param-value&gt;sessiontest&lt;/param-value&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,54, *      &lt;/init-param&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,55, *    &lt;/filter&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,56, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,57, *    &lt;filter-mapping&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,58, *      &lt;filter-name&gt;WicketSessionFilter&lt;/filter-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,59, *      &lt;url-pattern&gt;/servlet/sessiontest&lt;/url-pattern&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,60, *    &lt;/filter-mapping&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,61, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,62, *    &lt;servlet&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,63, *      &lt;servlet-name&gt;SessionApplication&lt;/servlet-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,64, *      &lt;servlet-class&gt;org.apache.wicket.protocol.http.WicketServlet&lt;/servlet-class&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,65, *      &lt;init-param&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,66, *        &lt;param-name&gt;applicationClassName&lt;/param-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,67, *        &lt;param-value&gt;session.SessionApplication&lt;/param-value&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,68, *      &lt;/init-param&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,69, *      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,70, *    &lt;/servlet&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,71, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,72, *    &lt;servlet&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,73, *      &lt;servlet-name&gt;WicketSessionServlet&lt;/servlet-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,74, *      &lt;servlet-class&gt;session.WicketSessionServlet&lt;/servlet-class&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,75, *      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,76, *    &lt;/servlet&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,77, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,78, *    &lt;servlet-mapping&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,79, *      &lt;servlet-name&gt;SessionApplication&lt;/servlet-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,80, *      &lt;url-pattern&gt;/sessiontest/*&lt;/url-pattern&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,81, *    &lt;/servlet-mapping&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,82, *
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,83, *    &lt;servlet-mapping&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,84, *      &lt;servlet-name&gt;WicketSessionServlet&lt;/servlet-name&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,85, *      &lt;url-pattern&gt;/servlet/sessiontest&lt;/url-pattern&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,86, *    &lt;/servlet-mapping&gt;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,92, * org.apache.wicket.Session wicketSession = org.apache.wicket.Session.get();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,106, /** the servlet path. */
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,107, private String servletPath;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,126,"  servletPath = filterConfig.getInitParameter(""servletPath"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,128,  if (servletPath == null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,131,"     ""you must provide init parameter servlet-path if you want to use "" +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,135,  if (servletPath.charAt(0) != '/')
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,136,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,137,   servletPath = '/' + servletPath;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,138,  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,139,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,142,"   log.debug(""servlet path set to "" + servletPath);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,145,"  sessionKey = ""wicket:"" + servletPath + "":"" + Session.SESSION_ATTRIBUTE_NAME;"
jdk-1.5/wicket-auth-roles/src/main/java/org/apache/wicket/authentication/panel/SignInPanel.java,195,  password.setPersistent(enable);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/AbstractChoice.java,391,"  CharSequence escaped = Strings.escapeMarkup(display, false, true);"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/parser/RelativePathPrefixHandlerTest.java,54,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/parser/RelativePathPrefixHandlerTest.java,62,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,47, * This is a Wicket MarkupParser specifically for (X)HTML. It makes use of a
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,48, * streaming XML parser to read the markup and IMarkupFilters to remove
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,49," * comments, identify Wicket relevant tags, apply html specific treatments etc.."
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,51," * The result will be an Markup object, which is basically a list, containing"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,52, * Wicket relevant tags and RawMarkup.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,125,"  * In case you want to analyze markup which BY DEFAULT does not use ""wicket"""
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,126,  * to find relevant tags.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,136,  * Applications which subclass initFilterChain() might also wish to access
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,137,  * the markup resource stream.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,147,  * Create a new markup filter chain and initialize with all default filters
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,148,  * required.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,188,  * By default don't do anything. Subclasses may append additional markup
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,189,  * filters if required.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,211,  * Append a new filter to the list of already pre-configured markup filters.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,212,"  * Add the new filter before the ""beforeFilter"" which is identified by its"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,213,  * class.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,218,  *            The filter will be added before the beforeFilter. If
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,219,  *            beforeFilter == null or beforeFilter not found than append to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,220,  *            the end
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,461,  * Remove all comment sections (&lt;!-- .. --&gt;) from the raw markup. For
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,462,"  * reasons I don't understand, the following regex"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,463,"  * <code>""<!--(.|\n|\r)*?-->""<code>"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,472,  while (pos1 >= 0)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,477,   if ((pos2 >= 0) && (pos1 > 0))
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,483,     if (rawMarkup.length() >= pos2 + 4)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/MarkupParser.java,485,      buf.append(rawMarkup.substring(pos2 + 4));
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,331,  if (stream == null && getParent() != null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/Fragment.java,337,  if (stream == null && throwException)
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,28,
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,95,  * Test to ensure MarkupException is thrown when Markup and Object hierarchy
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/border/BoxBorderTest.java,96,  * does not match with a Border involved.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,850,  if (e.getTreePath().getPathCount() == 1 && node.equals(rootItem.getModelObject()))
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,795, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,796,  * Called for every component when the page is getting to be rendered. it will call
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,797,  * onBeforeRender for this component and all the child components
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,798,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,799, public final void beforeRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,2023,    beforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java,2024,    markRendering();
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,211,  component.beforeRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java,212,  component.markRendering();
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,31,import org.apache.wicket.feedback.IFeedback;
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,52," * Abstract base class for pages. As a MarkupContainer subclass, a Page can"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,53, * contain a component hierarchy and markup in some markup language such as
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,54, * HTML. Users of the framework should not attempt to subclass Page directly.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,55, * Instead they should subclass a subclass of Page that is appropriate to the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,56," * markup type they are using, such as WebPage (for HTML markup)."
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,58," * <li><b>Construction </b>- When a page is constructed, it is automatically"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,59, * added to the current PageMap in the Session. When a Page is added to the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,60," * Session's PageMap, the PageMap assigns the Page an id. A PageMap is roughly"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,61, * equivalent to a browser window and encapsulates a set of pages accessible
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,62," * through that window. When a popup window is created, a new PageMap is created"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,63, * for the popup.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,65, * <li><b>Identity </b>- The Session that a Page is contained in can be
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,66, * retrieved by calling Page.getSession(). Page identifiers start at 0 for each
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,67, * PageMap in the Session and increment as new pages are added to the map. The
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,68, * PageMap-(and Session)-unique identifier assigned to a given Page can be
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,69," * retrieved by calling getId(). So, the first Page added to a new user Session"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,70," * will always be named ""0""."
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,72, * <li><b>LifeCycle </b>- Subclasses of Page which are interested in lifecycle
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,73," * events can override onBeginRequest, onEndRequest() and onModelChanged(). The"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,74, * onBeginRequest() method is inherited from Component. A call to
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,75, * onBeginRequest() is made for every Component on a Page before page rendering
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,76," * begins. At the end of a request (when rendering has completed) to a Page, the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,79, * <li><b>Nested Component Hierarchy </b>- The Page class is a subclass of
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,80," * MarkupContainer. All MarkupContainers can have ""associated markup"", which"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,81, * resides alongside the Java code by default. All MarkupContainers are also
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,82," * Component containers. Through nesting, of containers, a Page can contain any"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,83," * arbitrary tree of Components. For more details on MarkupContainers, see"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,86, * <li><b>Bookmarkable Pages </b>- Pages can be constructed with any
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,87," * constructor when they are being used in a Wicket session, but if you wish to"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,88," * link to a Page using a URL that is ""bookmarkable"" (which implies that the URL"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,89," * will not have any session information encoded in it, and that you can call"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,90, * this page directly without having a session first directly from your
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,91," * browser), you need to implement your Page with a no-arg constructor or with a"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,92, * constructor that accepts a PageParameters argument (which wraps any query
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,93," * string parameters for a request). In case the page has both constructors, the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,94, * constructor with PageParameters will be used.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,96," * <li><b>Models </b>- Pages, like other Components, can have models (see"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,97, * {@link IModel}). A Page can be assigned a model by passing one to the Page's
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,98," * constructor, by overriding initModel() or with an explicit invocation of"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,99, * setModel(). If the model is a
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,100," * {@link org.apache.wicket.model.CompoundPropertyModel}, Components on the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,101, * Page can use the Page's model implicitly via container inheritance. If a
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,102," * Component is not assigned a model, the initModel() override in Component will"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,103," * cause that Component to use the nearest CompoundModel in the parent chain, in"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,104," * this case, the Page's model. For basic CompoundModels, the name of the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,105, * Component determines which property of the implicit page model the component
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,106, * is bound to. If more control is desired over the binding of Components to the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,107," * page model (for example, if you want to specify some property expression"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,108," * other than the component's name for retrieving the model object),"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,109, * BoundCompoundPropertyModel can be used.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,111, * <li><b>Back Button </b>- Pages can support the back button by enabling
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,112, * versioning with a call to setVersioned(boolean). If a Page is versioned and
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,113," * changes occur to it which need to be tracked, a verison manager will be"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,114, * installed using the overridable factory method newVersionManager(). The
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,115, * default version manager returned by the base implementation of this method is
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,116," * an instance of UndoPageVersionManager, which manages versions of a page by"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,117, * keeping change records that can be reversed at a later time.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,138,  * You can set implementation of the interface in the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,139,  * {@link Page#serializer} then that implementation will handle the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,140,  * serialization of this page. The serializePage method is called from the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,141,  * writeObject method then the implementation override the default
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,142,  * serialization.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,178,  * When passed to {@link Page#getVersion(int)} the latest page version is
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,179,  * returned.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,184,  * This is a thread local that is used for serializing page references in
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,185,  * this page.It stores a {@link IPageSerializer} which can be set by the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,186,  * outside world to do the serialization of this page.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,228,"  * Boolean if the page is stateless, so it doesn't have to be in the page"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,229,"  * map, will be set in urlFor"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,307,  * Called right after a component's listener method (the provided method
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,308,"  * argument) was called. This method may be used to clean up dependencies,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,309,"  * do logging, etc. NOTE: this method will also be called when"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,310,"  * {@link WebPage#beforeCallComponent(Component, RequestListenerInterface)}"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,328,  * Called just before a component's listener method (the provided method
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,329,"  * argument) is called. This method may be used to set up dependencies,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,330,"  * enforce authorization, etc. NOTE: if this method fails, the method will"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,331,  * not be excuted. Method
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,332,"  * {@link WebPage#afterCallComponent(Component, RequestListenerInterface)}"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,333,  * will always be called.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,415,  * This method is called when a component was rendered standalone. If it is
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,416,  * a markupcontainer then the rendering for that container is checked.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,465,  * @return The current version number of this page. If the page has been
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,466,"  *         changed once, the return value will be 1. If the page has not yet"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,467,"  *         been revised, the version returned will be 0, indicating that the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,468,  *         page is still in its original state.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,514,"  * @return Get a page map entry for this page. By default, this is the page"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,515,  *         itself. But if you know of some way to compress the state for the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,516,"  *         page, you can return a custom implementation that produces the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,517,  *         page on-the-fly.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,542,"  * Returns whether the page should try to be stateless. To be stateless,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,543,  * getStatelessHint() of every component on page (and it's behavior) must
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,544,  * return true and the page must be bookmarkable.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,554,  * Override this method to implement a custom way of producing a version of
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,555,  * a Page when it cannot be found in the Session.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,559,  * @return A Page object with the component/model hierarchy that was
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,560,  *         attached to this page at the time represented by the requested
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,561,  *         version.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,653,  * Call this method when the current (ajax) request shouldn't merge the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,654,  * changes that are happening to the page with the previous version.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,656,  * This is for example needed when you want to redirect to this page in an
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,657,  * ajax request and then you do want to version normally..
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,659,  * This method doesn't do anything if the getRequest().mergeVersion doesn't
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,660,  * return true.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,717,  * Override this method and return true if your page is used to display
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,718,  * Wicket errors. This can help the framework prevent infinite failure
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,719,  * loops.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,721,  * @return True if this page is intended to display an error to the end
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,722,  *         user.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,730,  * Gets whether the page is stateless. Components on stateless page must not
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,731,"  * render any statefull urls, and components on statefull page must not"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,732,"  * render any stateless urls. Statefull urls are urls, which refer to a"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,733,  * certain (current) page instance.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,794,  * Convenience method. Search for children of type fromClass and invoke
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,795,  * their respective removePersistedFormData() methods.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,802,"  *            if true, disable persistence for all FormComponents on that"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,803,"  *            page. If false, it will remain unchanged."
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,861,"  // First, give priority to IFeedback instances, as they have to"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,862,  // collect their messages before components like ListViews
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,863,  // remove any child components
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,864,"  visitChildren(IFeedback.class, new IVisitor()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,865,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,866,   public Object component(Component component)
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,867,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,868,    ((IFeedback)component).updateFeedback();
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,869,    return IVisitor.CONTINUE_TRAVERSAL;
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,870,   }
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,871,  });
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,872,
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,873,  if (this instanceof IFeedback)
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,874,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,875,   ((IFeedback)this).updateFeedback();
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,876,  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,877,
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,956,  * This returns a page instance that is rollbacked the number of versions
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,957,  * that is specified compared to the current page.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,975,  * Set the id for this Page. This method is called by PageMap when a Page is
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,976,"  * added because the id, which is assigned by PageMap, is not known until"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,977,  * this time.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,988,"  * Sets whether the page should try to be stateless. To be stateless,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,989,  * getStatelessHint() of every component on page (and it's behavior) must
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,990,  * return true and the page must be bookmarkable.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1043,  *            The page itself if it was a full page render or the container
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1044,  *            that was rendered standalone
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1128,  * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL OR
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1129,  * OVERRIDE.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1309,"  * Set-up response with appropriate content type, locale and encoding. The"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1310,  * locale is set equal to the session's locale. The content type header
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1311,  * contains information about the markup type (@see #getMarkupType()) and
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1312,  * the encoding. The response (and request) encoding is determined by an
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1313,  * application setting (@see
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1314,"  * ApplicationSettings#getResponseRequestEncoding()). In addition, if the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1315,  * page's markup contains a xml declaration like &lt?xml ... ?&gt; an xml
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1316,  * declaration with proper encoding information is written to the output as
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1317,"  * well, provided it is not disabled by an applicaton setting (@see"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1320,  * Note: Prior to Wicket 1.1 the output encoding was determined by the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1321,  * page's markup encoding. Because this caused uncertainties about the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1322,"  * /request/ encoding, it has been changed in favour of the new, much safer,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1323,  * approach. Please see the Wiki for more details.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1353,  * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL OR
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1354,  * OVERRIDE.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1375,  * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL OR
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1376,  * OVERRIDE.
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1510,  *            Sets this page into the page map with the given name. If the
jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java,1511,"  *            page map does not yet exist, it is automatically created."
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,587,  // TODO do we need these special pre-attach feedback traversals all over
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,588,  // the place?
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,589,  it = markupIdToComponent.values().iterator();
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,590,  while (it.hasNext())
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,591,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,592,   final Component component = (Component)it.next();
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,593,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,594,   if (component instanceof MarkupContainer)
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,595,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,596,    MarkupContainer container = (MarkupContainer)component;
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,597,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,598,    // collect feedback
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,599,"    container.visitChildren(IFeedback.class, new IVisitor()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,600,    {
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,601,     public Object component(Component component)
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,602,     {
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,603,      ((IFeedback)component).updateFeedback();
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,604,      return IVisitor.CONTINUE_TRAVERSAL;
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,605,     }
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,606,    });
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,607,   }
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,608,
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,609,   if (component instanceof IFeedback)
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,610,   {
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,611,    ((IFeedback)component).updateFeedback();
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,612,   }
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,613,  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java,614,
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,52,  *            The component where the page will be get from for which
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,53,  *            messages will be displayed usually the same page as the one
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,54,  *            feedbackpanel is attached to
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,65,  * Constructor. Creates a model for all feedback messags accepted by the
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,66,  * given filter.
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,71,  *            Page for which messages will be displayed - usually the same
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,72,  *            page as the one feedbackpanel is attached to
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,155,  *            List of sorted and filtered FeedbackMessages for further
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/FeedbackMessagesModel.java,156,  *            processing
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,20," * Interface for components that present some kind of feedback to the user,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,21, * normally based on the feedback messages attached to various components on a
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,22, * given page.
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,29, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,30,  * This method is called on any component implementing IFeedback when it is
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,31,  * time for the component to update its feedback display
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,32,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/feedback/IFeedback.java,33, void updateFeedback();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,39, * A panel that displays {@link org.apache.wicket.feedback.FeedbackMessage}s in
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,40, * a list view. The maximum number of messages to show can be set with
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,41, * setMaxMessages().
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,78,"     * Returns feedbackPanel + the message level, eg"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,79,     * 'feedbackPanelERROR'. This is used as the class of the li /
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,80,     * span elements.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,127,"  this.messageListView = new MessageListView(""messages"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,139,"  * Search messages that this panel will render, and see if there is any"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,140,  * message of level ERROR or up. This is a convenience method; same as
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,141,  * calling 'anyMessage(FeedbackMessage.ERROR)'.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,151,"  * Search messages that this panel will render, and see if there is any"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,152,  * message.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,162,"  * Search messages that this panel will render, and see if there is any"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,163,  * message of the given level.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,198,  * @return Model for feedback messages on which you can install filters and
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,199,  *         other properties
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,256,  *            The maximum number of feedback messages that this feedback
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,257,  *            panel should show at one time
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,261,  this.messageListView.setViewSize(maxMessages);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,281,  messageListView.getModelObject();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,289,"  * @return the css class; by default, this returns feedbackPanel + the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,290,"  *         message level, eg 'feedbackPanelERROR', but you can override this"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,291,  *         method to provide your own
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,320,  * Generates a component that is used to display the message inside the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,321,  * feedback panel. This component must handle being attached to
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,322,  * <code>span</code> tags.
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,20,import org.apache.wicket.MarkupContainer;
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,23,import org.apache.wicket.Component.IVisitor;
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,24,import org.apache.wicket.feedback.IFeedback;
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,27, * Default implementation of {@link org.apache.wicket.request.target.component.IComponentRequestTarget}.
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,28, * Target that denotes a single component instance.
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,76,    // collect feedback
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,77,    if (component instanceof MarkupContainer)
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,78,    {
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,79,     MarkupContainer container = (MarkupContainer)component;
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,80,
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,81,"     container.visitChildren(IFeedback.class, new IVisitor()"
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,82,     {
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,83,      public Object component(Component component)
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,84,      {
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,85,       ((IFeedback)component).updateFeedback();
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,86,       return IVisitor.CONTINUE_TRAVERSAL;
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,87,      }
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,88,     });
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,89,    }
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,90,
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,91,    if (component instanceof IFeedback)
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,92,    {
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,93,     ((IFeedback)component).updateFeedback();
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,94,    }
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/ComponentRequestTarget.java,95,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,273, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,274,  * @see org.apache.wicket.feedback.IFeedback#updateFeedback()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,275,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,276, public void updateFeedback()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,277, {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,278,  // Force model to load
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,279,  // getFeedbackMessagesModel().preloadMessages();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,280, }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,281,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebRequestCycle.java,134,    (application instanceof WebApplication))
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupCloseLink.java,23, * Closes a popup window and cleans up any related session page map for the
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupCloseLink.java,24, * popup.
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/link/PopupCloseLink.java,70,  setResponsePage(new ClosePopupPage());
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java,1214,"  buffer.append(""<input type=\""submit\"" onclick=\"" var b=Wicket.$('"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/JavascriptStripper.java,154,    if (c == '\'' && prev != '\\')
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/JavascriptStripper.java,164,"    if (c == '""' && prev != '\\')"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/string/JavascriptStripper.java,174,    if (c == '/' && prev != '\\')
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/EnclosureResolver.java,27, * This is a tag resolver which automatically adds a Enclosure container for
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/EnclosureResolver.java,28," * each &lt;wicket:enclosure&gt; tag. As this is no default resolver, it must be"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/EnclosureResolver.java,29, * added manually:
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,36, * Implements responses over the HTTP protocol by holding an underlying
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,37, * HttpServletResponse object and providing convenience methods for using that
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,38," * object. Convenience methods include methods which: add a cookie, close the"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,39," * stream, encode a URL, redirect a request to another resource, determine if a"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,40," * redirect has been issued, set the content type, set the locale and, most"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,64,  this.httpServletResponse = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,128,   return httpServletResponse.encodeURL(url.toString());
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,171,  * Redirects to the given url. Implementations should encode the URL to make
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,172,  * sure cookie-less operation is supported in case clients forgot.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,190,"      log.error(""Unable to redirect to: "" + url"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,191,"        + "", HTTP Response has already been committed."");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,202,"       * By reaching this point, make sure the HTTP response"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,203,"       * status code is set to 200, otherwise wicket-ajax.js"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,204,       * will not process the Ajax-Location header
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,270,  * Output stream encoding. If the deployment descriptor contains a
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,271,"  * locale-encoding-mapping-list element, and that element provides a mapping"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,272,"  * for the given locale, that mapping is used. Otherwise, the mapping from"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,273,  * locale to character encoding is container dependent. Default is
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,376,  * Convenience method for setting the content-disposition:attachment header.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,377,  * This header is used if the response should prompt the user to download it
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,378,  * as a file instead of opening in a browser.
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,385,"  setHeader(""Content-Disposition"", ""attachment"""
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,386,"    + ((!Strings.isEmpty(filename)) ? (""; filename=\"""" + filename + ""\"""") : """"));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/LocalizedImageResource.java,325,"  tag.put(""src"", RequestCycle.get().getOriginalResponse().encodeURL(url));"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/request/WebRequestCodingStrategy.java,833,"      buffer.append(""&amp;"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1289, /**
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1290,  * @see org.apache.wicket.Component#onAfterRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1291,  */
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1292, protected void onAfterRender()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1293, {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1294,  super.onAfterRender();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1295,  rawInput = NO_RAW_INPUT;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1296, }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java,1297,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/validation/FormComponentFeedbackBorder.java,88, public void updateFeedback()
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/validation/FormComponentFeedbackIndicator.java,74, public void updateFeedback()
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkableListenerInterfaceRequestTarget.java,116,"   throw new WicketRuntimeException(""unable to find component with path "" +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkableListenerInterfaceRequestTarget.java,117,"     pageRelativeComponentPath + "" on page "" + page);"
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,55,
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,412,
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,413, /**
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,414,"  * @return if true, the base path for all YUI components will be set to"
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,415,  *         /resources/org.apache.wicket.extensions.yui.YuiLib/. True by default.
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,416,  */
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,417, protected boolean getConfigureYUIBasePath()
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,418, {
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,419,  return true;
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,420, }
jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DatePicker.java,421,
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,110,   PropertyResolverConverter converter)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,115,"     "" on object: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,120,"     "" with expression: "" + expression);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,127,"     "" for setting value: "" + value + "" on: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,130,"    .getConverterLocator(), Session.get().getLocale()) : converter);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,144,"     "" for getting the target classs of: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,161,"     "" for getting the target classs of: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,178,"     "" for getting the target classs of: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,195,"     "" for getting the target classs of: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,201,"   final Object object, int tryToCreateNull)"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,204,    .toString();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,205,  int index = expressionBracketsSeperated.indexOf('.');
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,223,"    index = expressionBracketsSeperated.indexOf('.', index + 1);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,227,"       .substring(lastIndex, index);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,268,"   index = expressionBracketsSeperated.indexOf('.', lastIndex);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,328,"         method, clz), null);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,340,"          ""The expression '"" +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,341,            exp +
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,342,"            ""' is neither an index nor is it a method or field for the list "" +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,343,            clz);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,368,"         "" as an index for an array lookup"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,393,           propertyName.substring(1);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,401,"           ""no get method defined for class: "" + clz +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,402,"             "" expression: "" + propertyName);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,412,"          ""No get method defined for class: "" + clz +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,413,"            "" expression: "" + exp);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,419,"         method, clz), field);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,432,      field);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,611,   * @return
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,629,    PropertyResolverConverter converter);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,816,"      "" for array holding elements of class "" + clzComponentType, e);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,910,"      getMethod + "" on object: "" + object, ex.getCause());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,915,"      getMethod + "" on object: "" + object, ex);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,936,"       getMethod.getReturnType() + "" for setting it on "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,945,"       setMethod + "" on object: "" + object, ex.getCause());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,950,"       setMethod + "" on object: "" + object, ex);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,956,"      "" on object: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1026,"      "" on object: "" + object, ex.getCause());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1031,"      "" on object: "" + object, ex);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1042,    PropertyResolverConverter converter)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1052,"        "" to class: "" + getMethod.getReturnType() + "" for setting it on "" +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1053,        object);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1058,"        ""Can't convert null value to a primitive class: "" +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1059,"          getMethod.getReturnType() + "" for setting it on "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1069,"       "" on object: "" + object, ex.getCause());"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1074,"       "" on object: "" + object, ex);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1080,"      "" on object: "" + object);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1201,"      "" from object "" + object, ex);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/lang/PropertyResolver.java,1238,"      "" on object "" + object + "", value "" + value, ex);"
jdk-1.4/wicket/src/test/java/org/apache/wicket/util/lang/PropertyResolverTest.java,45,"   new ConverterLocator(), Locale.US);"
jdk-1.4/wicket/src/test/java/org/apache/wicket/util/lang/PropertyResolverTest.java,154,"     ""name can't be set on a country that doesn't have default constructor"");"
jdk-1.4/wicket/src/test/java/org/apache/wicket/util/lang/PropertyResolverTest.java,235,    CONVERTER);
jdk-1.4/wicket/src/test/java/org/apache/wicket/util/lang/PropertyResolverTest.java,251,    CONVERTER);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,21,import java.util.Collections;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,194,"      ""<div style=\""display:none\"" id=\"""" + getMarkupId() + ""\""></div>"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,930,         previous.getChildren().size() - 1);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,939,"        item.getMarkupId() + ""\"","" + ""\"""" + previous.getMarkupId() + ""\"")"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1044,     item.getLevel() + 1);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1049,   items = Collections.EMPTY_LIST;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java,1178,"   AbstractTree.class, ""res/tree.js"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,102,  if (!stopped && request.isAjax() == false)
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,117,"    "");"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,123,"    ""'"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java,136,"     ""'); return typeof(c) != 'undefined' && c != null"";"
jdk-1.4/wicket/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java,66,  page.add(new WebComponent(MockPageWithLinkAndComponent.COMPONENT_ID)
jdk-1.4/wicket/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java,67,    .setOutputMarkupId(true));
jdk-1.4/wicket/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java,77,      MockPageWithLinkAndComponent.COMPONENT_ID);
jdk-1.4/wicket/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java,140,"  String bodyOnLoadUpdateScript = ""Wicket.Event.add(window, \""load\"", function() { "" +"
jdk-1.4/wicket/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java,141,"    updateScript + "";});"";"
jdk-1.4/wicket/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java,183,"    ""but "" + count + "" were found"", 1, count);"
jdk-1.4/wicket/src/test/java/org/apache/wicket/ajax/AjaxTimerBehaviorTest.java,228,   this.duration = updateInterval;
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java,90, private List tabs;
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java,142,    final int selected = getSelectedTab();
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java,299,"     getPath() + ""] ITab index ["" + index + ""]"");"
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java,306,"     ""ITab.getPanel() returned a panel with invalid id ["" +"
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java,307,       panel.getId() +
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java,308,"       ""]. You must always return a panel with id equal to the provided panelId parameter. TabbedPanel ["" +"
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java,309,"       getPath() + ""] ITab index ["" + index + ""]"");"
jdk-1.4/wicket/src/main/java/org/apache/wicket/RequestCycle.java,1226,   // get the processor
jdk-1.4/wicket/src/main/java/org/apache/wicket/RequestCycle.java,1227,   IRequestCycleProcessor processor = safeGetRequestProcessor();
jdk-1.4/wicket/src/main/java/org/apache/wicket/RequestCycle.java,1228,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Button.java,194,  String name = tag.getName();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Button.java,195,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/LocalizedImageResource.java,262,"   (!Objects.equal(locale, component.getLocale()) || !Objects.equal(style,"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/LocalizedImageResource.java,263,    component.getStyle())))
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/LocalizedImageResource.java,266,   locale = component.getLocale();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/image/resource/LocalizedImageResource.java,267,   style = component.getStyle();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigationIncrementLink.java,124,  int currentPage = pageable.getCurrentPage();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigationIncrementLink.java,125,  if (((increment < 0) && isFirst()) || ((increment > 0) && isLast()))
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigationIncrementLink.java,126,  {
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigationIncrementLink.java,127,   return true;
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigationIncrementLink.java,128,  }
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigationIncrementLink.java,129,
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigationIncrementLink.java,130,  return false;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/SimpleSynchronousFilePageStore.java,188,    long t1 = System.currentTimeMillis();
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/AbstractRequestCycleProcessor.java,397,   Component component = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/request/AbstractRequestCycleProcessor.java,480,  String resourceKey = requestParameters.getResourceKey();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,69,"   String header = """";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,84,     header += line + LINE_ENDING;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,88,    licenseHeader = header.trim();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,106,    ;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,117,    ;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,128,    ;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,137,"  String header = """";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,147,    header += lineNumberReader.readLine() + LINE_ENDING;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,169,  return header.trim();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/XmlLicenseHeaderHandler.java,65,"    header = """";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/XmlLicenseHeaderHandler.java,68,     if (header.length() > 0)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/XmlLicenseHeaderHandler.java,70,      header += LINE_ENDING;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/XmlLicenseHeaderHandler.java,72,     header += headers[i];
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/mounted/Page5.java,47,"   p1 = """";"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/mounted/Page5.java,51,    p1 += array[i];
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/mounted/Page5.java,54,"     p1 += "", "";"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/mounted/Page5.java,61,"   p2 = """";"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/mounted/Page5.java,65,    p2 += array[i];
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/niceurl/mounted/Page5.java,68,"     p2 += "", "";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,136,  FileReader fileReader = null;
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,140,   fileReader = new FileReader(file);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,141,   LineNumberReader lineNumberReader = new LineNumberReader(fileReader);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,155,   if (fileReader != null)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/AbstractLicenseHeaderHandler.java,159,     fileReader.close();
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/palette/component/AbstractOptions.java,92,"     buffer.append("" "" + next.toString() + ""=\"""" +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/filter/WicketLinkTagHandler.java,138,      autolinkStatus.push(new Boolean(autolinking));
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java,204,    url = httpServletResponse.encodeRedirectURL(url).toString();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/CharacterConverter.java,44,  final String stringValue = value.toString();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/CharacterConverter.java,45,  int length = stringValue.length();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/convert/converters/CharacterConverter.java,52,   return new Character(value.toString().charAt(0));
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/io/SerializableChecker.java,342,   throw new WicketNotSerializableException(toPrettyPrintedStack(obj.getClass().getName())
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/io/SerializableChecker.java,343,"     .toString(), exception);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1119,"  failMessage = ""No AjaxEventBehavior found on component: "" + component.getId() +"
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1120,"   "" which matches the event: "" + event.toString();"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SelectPage.java,108,"  public String site = new String(""sd"");"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.java,68,  // Get our custom application subclass
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.java,69,  final ImagesApplication application = (ImagesApplication)getApplication();
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/images/Home.java,70,
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/library/BookDetails.java,57,  Model bookModel = new Model(book);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/library/BookDetails.java,58,
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/stockquote/StockQuote.java,149,  out.write(message.toString().getBytes());
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/RatingsPage.java,112,   return new Integer(nrOfVotes);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/RatingsPage.java,135,   return new Double(rating);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/RatingsPage.java,183,"  add(new RatingPanel(""rating2"", new PropertyModel(rating2, ""rating""), new Model(new Integer("
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/RatingsPage.java,184,"    5)), new PropertyModel(rating2, ""nrOfVotes""), new PropertyModel(this, ""hasVoted""),"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/RatingsPage.java,185,    true)
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/DropDownChoicePage.java,43," private static final List INTEGERS = Arrays.asList(new Integer[] { new Integer(1),"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/DropDownChoicePage.java,44,"   new Integer(2), new Integer(3) });"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/DropDownChoicePage.java,101,    int value = ((Integer)object).intValue();
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/TextFieldPage.java,113,  public Integer integer = new Integer(12);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/LiveSessionsPage.java,83,   };
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/LiveSessionsPage.java,84,
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/LiveSessionsPage.java,93,    return new Integer(getRequestLogger().getTotalCreatedSessions());
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/LiveSessionsPage.java,102,    return new Integer(getRequestLogger().getPeakSessions());
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/LiveSessionsPage.java,111,    return new Integer(getRequestLogger().getPeakSessions());
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/LiveSessionsPage.java,148,"    item.add(new Label(""requestCount"", new Model(new Long(sd.getNumberOfRequests()))));"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/LiveSessionsPage.java,149,"    item.add(new Label(""requestsTime"", new Model(new Long(sd.getTotalTimeTaken()))));"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/RequestsPage.java,76,     new Model(new Long(sessionData.getNumberOfRequests()))));
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/debug/RequestsPage.java,77,"   add(new Label(""totalTimeTaken"", new Model(new Long(sessionData.getTotalTimeTaken()))));"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInputModel.java,84, private Double doubleProperty = new Double(20.5);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInputModel.java,85, private Integer integerInRangeProperty = new Integer(50);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInputModel.java,86, private Integer integerProperty = new Integer(100);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/forminput/FormInputModel.java,88, private Integer multiply = new Integer(0);
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/library/Book.java,115,"   idToBook.put(new Long(book.id), book);"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/library/Book.java,126,  return (Book)idToBook.get(new Long(id));
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/library/EditBook.java,158,"   parameters.put(""id"", new Long(book.getId()));"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ContactsDatabase.java,63,  Contact c = (Contact)map.get(new Long(id));
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ContactsDatabase.java,73,"  map.put(new Long(contact.getId()), contact);"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/ContactsDatabase.java,148,  Contact c = (Contact)map.remove(new Long(contact.getId()));
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/repeater/DetachableContactModel.java,61,  return new Long(id).hashCode();
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/spring/common/ContactDaoImpl.java,70,  Contact c = (Contact)map.get(new Long(id));
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/spring/common/ContactDaoImpl.java,78,"  map.put(new Long(contact.getId()), contact);"
jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/spring/common/ContactDaoImpl.java,152,  map.remove(new Long(contact.getId()));
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/XmlTag.java,480,  for (final Iterator iterator = map.keySet().iterator(); iterator.hasNext();)
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/XmlTag.java,482,   final String key = (String)iterator.next();
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/XmlTag.java,483,   Object value = map.get(key);
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/XmlTag.java,484,"   put(key, (value != null) ? value.toString() : null);"
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/XmlTag.java,490,  *
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/documentvalidation/HtmlDocumentValidator.java,410,     for (Iterator it = expectedAttributes.keySet().iterator(); it.hasNext();)
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/documentvalidation/HtmlDocumentValidator.java,412,      String name = (String)it.next();
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/documentvalidation/HtmlDocumentValidator.java,413,      String pattern = (String)expectedAttributes.get(name);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java,264,   for (Iterator iter = files.keySet().iterator(); iter.hasNext();)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java,266,    ILicenseHeaderHandler licenseHeaderHandler = (ILicenseHeaderHandler)iter.next();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java,271,    failString.append(((List)files.get(licenseHeaderHandler)).size());
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/license/ApacheLicenseHeaderTestCase.java,274,    List/* <File> */fileList = (List)files.get(licenseHeaderHandler);
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/TagTester.java,385,       for (Iterator iter = attributeMap.keySet().iterator(); iter.hasNext();)
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/TagTester.java,387,        String attr = (String)iter.next();
jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/TagTester.java,389,        if (attr.equals(attribute) && value.equals(attributeMap.get(attr)))
jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/border/Border.java,129," private final String BODY_ID = ""_body"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,102," private final String PORTLET_ONLY_FILTER = ""portletOnlyFilter"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,108," private final String DETECT_PORTLET_CONTEXT = ""detectPortletContext"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,118," private final String DETECT_PORTLET_CONTEXT_FULL_NAME = ""org.apache.wicket.detectPortletContext"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,123," private final String WICKET_PORTLET_PROPERTIES = ""org/apache/wicket/protocol/http/portlet/WicketPortlet.properties"";"
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/portlet/PortletServletRequestWrapper.java,29, private ServletContext context;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/portlet/PortletServletRequestWrapper.java,53,  this.context = context;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,107, private FilterConfig filterConfig;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,108,
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,127,  this.filterConfig = filterConfig;
jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/servlet/WicketSessionFilter.java,128,
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.java,68,"   ""progressbar.js"");"
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.java,71,"   ""UploadProgressBar.css"");"
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.java,105,   log
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.java,106,"     .warn(""UploadProgressBar will not work without an UploadWebRequest. See the javadoc for details."");"
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.java,120,"      statusDiv.getMarkupId() + ""', '"" + barDiv.getMarkupId() + ""', '"" +"
jdk-1.4/wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/form/upload/UploadProgressBar.java,121,"      getPage().urlFor(ref) + ""'); Wicket.WUPB.start(def); return false;"";"
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/submitlink/TestHomePage.java,20,import org.apache.wicket.protocol.http.MockHttpServletResponse;
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/submitlink/TestHomePage.java,25, public void bugTestSubmitLinkByClickingLink()
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/submitlink/TestHomePage.java,30,  System.out.println(((MockHttpServletResponse)tester.getWicketResponse()
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/submitlink/TestHomePage.java,31,    .getHttpServletResponse()).getDocument());
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/submitlink/TestHomePage.java,33,  // FIXME clickLink should submit the form
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/submitlink/TestHomePage.java,54, public void bugTestSubmitLinkByUsingFormTester()
jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/form/submitlink/TestHomePage.java,61,  // FIXME submit(String) should allow for SubmitLink
wicket/src/main/java/org/apache/wicket/util/string/JavascriptStripper.java,79,  StringBuffer result = new StringBuffer(original.length() / 2);
wicket/src/main/java/org/apache/wicket/util/string/JavascriptStripper.java,116,     int idx = i - 1;
wicket/src/main/java/org/apache/wicket/util/string/JavascriptStripper.java,119,      char tmp = original.charAt(idx);
wicket/src/main/java/org/apache/wicket/util/string/JavascriptStripper.java,125,      if (tmp == '=' || tmp == '(')
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,30,  String s = JavascriptStripper
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,31,"    .stripCommentsAndWhitespace(""    // Handle the common XPath // expression\n    if ( !t.indexOf(\""//\"") ) {"");"
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,37,  String s = JavascriptStripper
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,38,"    .stripCommentsAndWhitespace(""    // Handle the common XPath // expression\r\n    if ( !t.indexOf(\""//\"") ) {"");"
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,44,  String s = JavascriptStripper
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,45,"    .stripCommentsAndWhitespace(""    // Handle the common XPath // expression\r    if ( !t.indexOf(\""//\"") ) {"");"
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,51,  String s = JavascriptStripper
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,52,"    .stripCommentsAndWhitespace(""    t = jQuery.trim(t).replace( /^\\/\\//i, \""\"" );"");"
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,58,  String s = JavascriptStripper
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,59,"    .stripCommentsAndWhitespace(""foo.replace(/\""//*strip me*/, \""\""); // strip me\rdoFoo();"");"
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,65,  String s = JavascriptStripper
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,66,"    .stripCommentsAndWhitespace(""parseFloat( elem.filter.match(/alpha\\(opacity=(.*)\\)/)[1] ) / 100 : 1;\r//foo"");"
wicket/src/test/java/org/apache/wicket/util/string/JavascriptStripperTest.java,68,    s);
wicket/src/main/java/org/apache/wicket/request/target/basic/RedirectRequestTarget.java,84,    response.redirect(RequestCycle.get()
wicket/src/main/java/org/apache/wicket/request/target/basic/RedirectRequestTarget.java,85,     .getRequest()
wicket/src/main/java/org/apache/wicket/request/target/basic/RedirectRequestTarget.java,86,     .getRelativePathPrefixToContextRoot() +
wicket/src/main/java/org/apache/wicket/request/target/basic/RedirectRequestTarget.java,87,     redirectUrl.substring(1));
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,32, *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,52,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,54,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,65,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,67,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,81,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,83,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,86,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,97,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,100,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,262,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,265,  *
wicket/src/main/java/org/apache/wicket/request/target/component/BookmarkablePageRequestTarget.java,295,  *
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1151,  // initialize the request only if needed to allow the user to pass
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1152,"  // request parameters, see"
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1153,  // WICKET-254
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1154,  WebRequestCycle requestCycle;
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1155,  if (RequestCycle.get() == null)
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1156,  {
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1157,   requestCycle = setupRequestAndResponse(true);
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1158,  }
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1159,  else
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1160,  {
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1161,   requestCycle = (WebRequestCycle)RequestCycle.get();
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1162,  }
wicket/src/test/java/org/apache/wicket/util/tester/MockPageWithFormAndCheckGroup.java,49,"  Form<?> form = new Form(""form"");"
wicket/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,23,import org.apache.wicket.Component;
wicket/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,24,import org.apache.wicket.MockPageWithLink;
wicket/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,25,import org.apache.wicket.MockPageWithOneComponent;
wicket/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,26,import org.apache.wicket.Page;
wicket/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,27,import org.apache.wicket.Session;
wicket/src/main/java/org/apache/wicket/validation/validator/AbstractValidator.java,39, *
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,38,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,39, /**
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,40,  *
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,41,  */
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,69,"  return new RangeValidator(minimum, maximum);"
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,94,  return new MinimumValidator(minimum);
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,118,  return new MaximumValidator(maximum);
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,128,"  private RangeValidator(Date minimum, Date maximum)"
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,132,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,139,"   map.put(""minimum"", minimum);"
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,140,"   map.put(""maximum"", maximum);"
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,161,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,163,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,171,  private MinimumValidator(Date minimum)
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,180,"   map.put(""minimum"", minimum);"
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,190,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,199,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,201,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,209,  private MaximumValidator(Date maximum)
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,218,"   map.put(""maximum"", maximum);"
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,228,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,237,
wicket/src/main/java/org/apache/wicket/validation/validator/DateValidator.java,239,
wicket/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,527,"   Result.fail(""Component not found: "" + path);"
wicket/src/main/java/org/apache/wicket/MetaDataKey.java,21, * A key to a piece of metadata associated with a Component at runtime. The key contains type
wicket/src/main/java/org/apache/wicket/MetaDataKey.java,22, * information that can be used to check the type of any metadata value for the key when the value
wicket/src/main/java/org/apache/wicket/MetaDataKey.java,23, * is set on the given Component. MetaDataKey is abstract in order to force the creation of a
wicket/src/main/java/org/apache/wicket/MetaDataKey.java,24, * subtype. That subtype is used to test for identity when looking for the metadata because actual
wicket/src/main/java/org/apache/wicket/MetaDataKey.java,25," * object identity would suffer from problems under serialization. So, the correct way to declare a"
wicket/src/main/java/org/apache/wicket/MetaDataKey.java,26, * MetaDataKey is like this: public static MetaDataKey ROLE = new MetaDataKey(Role.class) { }
wicket/src/main/java/org/apache/wicket/MetaDataKey.java,50,  return obj != null && getClass().isInstance(obj);
wicket/src/main/java/org/apache/wicket/markup/repeater/data/DataViewBase.java,106,"   items = dataProvider.iterator(offset, count);"
wicket/src/main/java/org/apache/wicket/markup/repeater/data/DataViewBase.java,124,   return items.hasNext() && (index < max);
wicket-util/src/main/java/org/apache/wicket/util/resource/AbstractStringResourceStream.java,35, /**
wicket-util/src/main/java/org/apache/wicket/util/resource/AbstractStringResourceStream.java,36,  *
wicket-util/src/main/java/org/apache/wicket/util/resource/AbstractStringResourceStream.java,37,  */
wicket-util/src/main/java/org/apache/wicket/util/resource/AbstractStringResourceStream.java,51,"  this(""text"");"
wicket/src/main/java/org/apache/wicket/util/template/TextTemplateSharedResourceFactory.java,122,// return new AbstractStringResourceStream()
wicket-core/src/main/java/org/apache/wicket/request/resource/UrlResourceReference.java,48,   return url.toString(StringMode.FULL);
wicket-core/src/main/java/org/apache/wicket/request/resource/UrlResourceReference.java,135,"    ""url="" + url.toString(Url.StringMode.FULL) +"
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,366,  if (url.isAbsolute())
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,297,  else
wicket-core/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,581,   applicationFactory.destroy(this);
wicket-core/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java,784,  * @return
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,372,  transferRequestCookies();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,373,
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,481,      boolean newlyCreated = true;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,482,      for (Cookie oldCookie : lastRequestCookies)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,486,        newlyCreated = false;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,487,        break;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,490,      if (newlyCreated)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,491,      {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,492,       lastRequestCookies.add(cookie);
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,493,      }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1056,"  assertEquals(cookieValue, tester.getRequest().getCookie(cookieName).getValue());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1344,"    1, tester.getRequest().getCookies().length);"
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,137, *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1379,  * There are some expectations about wicket tester cookie handling which should match as
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1380,  * best as it can be with a real client server request response cycle:
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1381,  * - all valid cookies set before a request is made should appear in the wicket request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1382,  * - all cookies set in the response should appear in the tester response after the request is made
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1383,  * - all cookies set in the response should appear even after a redirect response is made until the final response is written to the client
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1384,  * - all valid cookies from the last response should be added or should overwrite the next request cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1385,  *
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,62,  return c1.getName().equals(c2.getName()) &&
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,63,"    Objects.isEqual(c1.getPath(), c2.getPath()) &&"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,64,"    Objects.isEqual(c1.getDomain(), c2.getDomain());"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,164, private final List<Cookie> cookies = new ArrayList<Cookie>();
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,220,  cookies.add(cookie);
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,481,  if (cookies.size() == 0)
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,485,  Cookie[] result = new Cookie[cookies.size()];
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,486,  for (int i = 0; i < cookies.size(); i++)
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,487,  {
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,488,   result[i] = Cookies.copyOf(cookies.get(i));
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,489,  }
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java,490,  return result;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,379,  if (lastResponse != null && lastResponse.isRedirect())
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,382,   for (Cookie cookie : lastResponseCookies)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,384,    if (cookie.getMaxAge() != 0)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,386,     // max-age==0 are already handled in #transferRequestCookies() above
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,435, /**
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,436,  * Simulates browser behavior by preserving all non-removed cookies from
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,437,  * the previous request.
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,438,  * A cookie is removed if the response contains a cookie with the same
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,439,"  * name, path and domain and max-age=0"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,440,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,441, private void transferRequestCookies()
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,442, {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,443,  List<Cookie> lastRequestCookies = new ArrayList<Cookie>();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,444,
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,445,  // copy all cookies from the previous request
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,446,  if (lastRequest != null && lastRequest.getCookies() != null)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,447,  {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,448,   for (Cookie lastRequestCookie : lastRequest.getCookies())
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,449,   {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,450,    lastRequestCookies.add(lastRequestCookie);
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,451,   }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,452,  }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,453,
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,454,  // filter out all removed cookies
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,455,  if (lastResponse != null)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,456,  {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,457,   List<Cookie> cookies = lastResponse.getCookies();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,458,   if (cookies != null)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,459,   {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,460,    for (Cookie cookie : cookies)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,461,    {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,462,     // maxAge == -1 -> means session cookie
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,463,     // maxAge == 0 -> delete the cookie
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,464,     // maxAge > 0 -> the cookie will expire after this age
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,465,     if (cookie.getMaxAge() == 0)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,466,     {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,467,      Iterator<Cookie> cookieIterator = lastRequestCookies.iterator();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,468,      while (cookieIterator.hasNext())
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,469,      {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,470,       Cookie lastRequestCookie = cookieIterator.next();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,471,"       if (Cookies.isEqual(lastRequestCookie, cookie))"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,472,       {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,473,        cookieIterator.remove();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,474,       }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,475,      }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,476,     }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,477,     else
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,478,     {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,479,      Iterator<Cookie> cookieIterator = lastRequestCookies.iterator();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,480,      while (cookieIterator.hasNext())
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,481,      {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,482,       Cookie oldCookie = cookieIterator.next();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,483,"       if (Cookies.isEqual(cookie, oldCookie))"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,484,       {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,485,        cookieIterator.remove();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,486,       }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,487,      }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,488,      lastRequestCookies.add(cookie);
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,489,     }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,490,    }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,491,   }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,492,  }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,493,
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,494,  // transfer only the non-removed ones
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,495,  request.addCookies(lastRequestCookies);
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,496, }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,497,
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,684,   transferRequestCookies();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,685,
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,156, * - all valid cookies (maxAge!=0) from the last response should be added or should overwrite
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,157, *   the next request cookies (not visible in tester.getRequest().getCookies())
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1062,"  assertEquals(cookieValue, tester.getLastRequest().getCookie(cookieName).getValue());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1350,"    1, tester.getLastRequest().getCookies().length);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1392,"  Cookie cookieA = newCookie(""a"",""1"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1393,  tester.getRequest().addCookie(cookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1395,"  requestOnPageShouldHaveTheseCookies(collectingPage, cookieA);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1401,"  requestOnPageShouldHaveTheseCookies(collectingPage, cookieA);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1406,"  Cookie newCookieA = newCookie(""a"",""newValue"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1407,  setCookieInResponse(newCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1408,  lastResponseShouldHaveTheseCookies(newCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1412,"  requestOnPageShouldHaveTheseCookies(collectingPage, newCookieA);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1416,"  Cookie removeCookieA = newCookie(""a"",""removeMe"",0);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1417,  setCookieInResponse(removeCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1418,  lastResponseShouldHaveTheseCookies(removeCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1436,"  Cookie newCookieA = newCookie(""a"",""newValue"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1437,  setCookieInResponseAndRedirect(newCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1438,  lastResponseShouldHaveTheseCookies(newCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1442,"  requestOnPageShouldHaveTheseCookies(collectingPage,newCookieA);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1447,"  Cookie cookieA = newCookie(""a"",""1"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1448,"  newCookieA = newCookie(""a"",""newValue"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1449,  tester.getRequest().addCookie(cookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1450,  setCookieInResponseAndRedirect(newCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1451,  lastResponseShouldHaveTheseCookies(newCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1455,"  requestOnPageShouldHaveTheseCookies(collectingPage,newCookieA);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1460,"  cookieA = newCookie(""a"",""1"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1461,"  newCookieA = newCookie(""a"",""newValue"",0);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1462,  tester.getRequest().addCookie(cookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1463,  setCookieInResponseAndRedirect(newCookieA);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1464,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,153, *   after the request is made
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,20,import java.util.ArrayList;
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,21,import java.util.Collection;
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,22,import java.util.List;
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,26,import org.apache.wicket.protocol.http.mock.Cookies.Key;
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,28,import org.apache.wicket.util.lang.Objects;
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,39, {}
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,43,  *
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,45,  *          The cookie to copy
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,50,  return cookie != null ? (Cookie) cookie.clone() : null;
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,55,  * @param cookie cookie
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,62,
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,64,  * Checks whether two cookies are equal.
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,65,"  * See http://www.ietf.org/rfc/rfc2109.txt, p.4.3.3"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,66,  *
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,68,  *      the first cookie
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,70,  *      the second cookie
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,78,//  return c1.getName().equals(c2.getName()) &&
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,79,"//    Objects.isEqual(c1.getPath(), c2.getPath()) &&"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,80,"//    Objects.isEqual(c1.getDomain(), c2.getDomain());"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,83,
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,93,
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,94, public static class Key implements Serializable {
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,95,
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,100,  protected Key(Cookie cookie) {
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,101,   this.name=cookie.getName();
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,102,   this.path=cookie.getPath();
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,103,   this.domain=cookie.getDomain();
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,150,
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,154,"   return name+"";""+domain+""/""+path;"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,156,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,19,import java.util.ArrayList;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,20,import java.util.Arrays;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,21,import java.util.Collection;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,22,import java.util.LinkedHashMap;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,25,import java.util.Map;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,27,import javax.servlet.http.Cookie;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,58,import org.apache.wicket.protocol.http.mock.Cookies;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,81,import org.apache.wicket.util.tester.cookies.CollectAllRequestCookiesPage;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,82,import org.apache.wicket.util.tester.cookies.EndPage;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,83,import org.apache.wicket.util.tester.cookies.SetCookiePage;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,84,import org.junit.Assert;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,88,import sun.security.provider.certpath.OCSPResponse.ResponseStatus;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,89,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,91, *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,916, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,917,  *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,918,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,919, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,920, public void cookieIsFoundWhenAddedToRequest()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,921, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,922,"  tester.getRequest().addCookie(new Cookie(""name"", ""value""));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,923,"  assertEquals(""value"", tester.getRequest().getCookie(""name"").getValue());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,924, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,925,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,926, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,927,  *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,928,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,929, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,930, public void cookieIsFoundWhenAddedToResponse()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,931, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,932,  tester.startPage(CreateBook.class);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,933,"  tester.getLastResponse().addCookie(new Cookie(""name"", ""value""));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,934,  Collection<Cookie> cookies = tester.getLastResponse().getCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,935,"  assertEquals(cookies.iterator().next().getValue(), ""value"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,936, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,937,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1038, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1039,  * Tests that setting a cookie with age > 0 before creating the page will survive after the
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1040,  * rendering of the page and it will be used for the next request cycle.
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1041,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1042, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1043, public void transferCookies()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1044, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1045,"  String cookieName = ""wicket4289Name"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1046,"  String cookieValue = ""wicket4289Value"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1047,  int cookieAge = 1; // age > 0 => the cookie will be preserved for the the next request cycle
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1048,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1049,"  Cookie cookie = new Cookie(cookieName, cookieValue);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1050,  cookie.setMaxAge(cookieAge);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1051,  tester.getRequest().addCookie(cookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1052,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1053,"  CookiePage page = new CookiePage(cookieName, cookieValue);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1054,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1055,  tester.startPage(page);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1056,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1057,  // assert that the cookie was in the response
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1058,  List<Cookie> cookies = tester.getLastResponse().getCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1059,"  assertEquals(1, cookies.size());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1060,  Cookie cookie2 = cookies.get(0);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1061,"  assertEquals(cookieName, cookie2.getName());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1062,"  assertEquals(cookieValue, cookie2.getValue());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1063,"  assertEquals(cookieAge, cookie2.getMaxAge());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1064,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1065,  // assert that the cookie will be preserved for the next request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1066,"  assertEquals(cookieValue, tester.getRequest().getCookie(cookieName).getValue());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1067, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1068,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1069, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1070,  * Tests that setting a cookie with age == 0 will not be stored after the request cycle.
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1071,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1072, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1073, public void dontTransferCookiesWithNegativeAge()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1074, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1075,"  String cookieName = ""wicket4289Name"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1076,"  String cookieValue = ""wicket4289Value"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1077,  int cookieAge = 0; // age = 0 => do not store it
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1078,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1079,"  Cookie cookie = new Cookie(cookieName, cookieValue);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1080,  cookie.setMaxAge(cookieAge);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1081,  tester.getRequest().addCookie(cookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1082,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1083,"  CookiePage page = new CookiePage(cookieName, cookieValue);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1084,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1085,  tester.startPage(page);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1086,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1087,  // assert that the cookie is not preserved for the next request cycle
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1088,  assertNull(tester.getRequest().getCookies());
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1089, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1090,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1091, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1092,  * Tests that setting a cookie with age < 0 will not be stored after the request cycle.
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1093,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1094, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1095, public void dontTransferCookiesWithZeroAge()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1096, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1097,"  String cookieName = ""wicket4289Name"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1098,"  String cookieValue = ""wicket4289Value"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1099,  int cookieAge = 0; // age == 0 => delete the cookie
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1100,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1101,"  Cookie cookie = new Cookie(cookieName, cookieValue);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1102,  cookie.setMaxAge(cookieAge);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1103,  tester.getRequest().addCookie(cookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1104,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1105,"  CookiePage page = new CookiePage(cookieName, cookieValue);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1106,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1107,  tester.startPage(page);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1108,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1109,  // assert that the cookie is not preserved for the next request cycle
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1110,  assertNull(tester.getRequest().getCookies());
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1111, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1112,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1330,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1331, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1332,  * A cookie set in the request headers should not be
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1333,  * expected in the response headers unless the page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1334,  * sets it explicitly.
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1335,  *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1336,  * https://issues.apache.org/jira/browse/WICKET-4989
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1337,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1338, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1339, public void cookieSetInRequestShouldNotBeInResponse()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1340, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1341,  //start and render the test page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1342,"  tester.getRequest().addCookie(new Cookie(""dummy"", ""sample""));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1343,  tester.startPage(tester.getApplication().getHomePage());
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1344,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1345,  //assert rendered page class
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1346,  tester.assertRenderedPage(tester.getApplication().getHomePage());
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1347,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1348,"  Assert.assertEquals(""The cookie should not be in the response unless explicitly set"","
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1349,"    0, tester.getLastResponse().getCookies().size());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1350,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1351,  // The cookie should be in each following request unless the server code
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1352,  // schedules it for removal it with cookie.setMaxAge(0)
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1353,"  Assert.assertEquals(""The cookie should be in each following request"","
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1354,"    1, tester.getRequest().getCookies().length);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1355, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1356,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1357, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1358,  * The response cookie should not be the same instance as the request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1359,  * cookie.
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1360,  *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1361,  * https://issues.apache.org/jira/browse/WICKET-4989
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1362,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1363, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1364, public void doNotReuseTheSameInstanceOfTheCookieForRequestAndResponse()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1365, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1366,  //start and render the test page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1367,"  String cookieName = ""cookieName"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1368,"  String cookieValue = ""cookieValue"";"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1369,"  Cookie requestCookie = new Cookie(cookieName, cookieValue);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1370,  tester.getRequest().addCookie(requestCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1371,"  tester.startPage(new CookiePage(cookieName, cookieValue));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1372,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1373,  //assert rendered page class
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1374,  tester.assertRenderedPage(CookiePage.class);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1375,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1376,  Cookie responseCookie = tester.getLastResponse().getCookies().get(0);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1377,"  requestCookie.setValue(""valueChanged"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1378,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1379,"  Assert.assertEquals(cookieValue, responseCookie.getValue());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1380, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1381,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1382, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1383,  * @see WicketTester
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1384,  *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1385,"  * TODO add a cookie to request, which should override cookie from last response and last request"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1386,  * https://issues.apache.org/jira/browse/WICKET-5147
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1387,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1388, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1389, public void wicketTesterCookieHandlingWithoutRedirect() {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1390,  // no cookies set
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1391,  CollectAllRequestCookiesPage collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1392,"  Assert.assertTrue(""no cookie in first request"",collectingPage.getCookies().isEmpty());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1393,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1394,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1395,  requestDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1396,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1397,  // set cookie on request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1398,"  Cookie firstCookie = newCookie(""a"",""firstValue"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1399,  tester.getRequest().addCookie(firstCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1400,  collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1401,"  requestOnPageShouldHaveTheseCookies(collectingPage, firstCookie);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1402,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1403,  requestShouldHaveTheseCookies(firstCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1404,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1405,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1406,  // cookies from last request should appear on following requests
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1407,  collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1408,"  requestOnPageShouldHaveTheseCookies(collectingPage, firstCookie);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1409,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1410,  requestShouldHaveTheseCookies(firstCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1411,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1412,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1413,  // cookie will be overwritten if response will do so
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1414,"  Cookie cookieSetInResponse = newCookie(""a"",""overwriteWithNewValue"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1415,  setCookieInResponse(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1416,  lastResponseShouldHaveTheseCookies(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1417,  requestShouldHaveTheseCookies(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1418,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1419,  // cookies from last response then should appear on following requests
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1420,  collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1421,"  requestOnPageShouldHaveTheseCookies(collectingPage, cookieSetInResponse);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1422,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1423,  requestShouldHaveTheseCookies(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1424,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1425,  // cookies from requests will be deleted if the response will do so
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1426,"  Cookie expiredCookieSetInResponse = newCookie(""a"",""removeMe"",0);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1427,  setCookieInResponse(expiredCookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1428,  lastResponseShouldHaveTheseCookies(expiredCookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1429,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1430,  requestDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1431,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1432,  // no cookies in next request while last cookie was deleted
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1433,  collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1434,  requestOnPageShouldHaveTheseCookies(collectingPage);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1435,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1436,  requestDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1437,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1438, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1439,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1440, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1441,  * @see WicketTesterTest#wicketTesterCookieHandlingWithoutRedirect()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1442,  *
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1443,  * https://issues.apache.org/jira/browse/WICKET-5147
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1444,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1445, @Test
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1446, public void wicketTesterCookieHandlingWithRedirect() {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1447,  // set cookie in response then redirect to other page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1448,"  Cookie firstCookie = newCookie(""a"",""firstValue"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1449,  setCookieInResponseAndRedirect(firstCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1450,  lastResponseShouldHaveTheseCookies(firstCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1451,  requestShouldHaveTheseCookies(firstCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1452,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1453,  // cookie in response after redirect should appear in next request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1454,  CollectAllRequestCookiesPage collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1455,"  requestOnPageShouldHaveTheseCookies(collectingPage,firstCookie);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1456,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1457,  requestShouldHaveTheseCookies(firstCookie);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1458,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1459,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1460,  // set cookie on request and overwrite in response then redirect to other page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1461,"  Cookie cookieSetInRequest = newCookie(""a"",""valueFromRequest"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1462,"  Cookie cookieSetInResponse = newCookie(""a"",""overwriteInResponse"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1463,  tester.getRequest().addCookie(cookieSetInRequest);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1464,  setCookieInResponseAndRedirect(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1465,  lastResponseShouldHaveTheseCookies(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1466,  requestShouldHaveTheseCookies(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1467,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1468,  // cookie in response after redirect should appear in next request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1469,  collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1470,"  requestOnPageShouldHaveTheseCookies(collectingPage,cookieSetInResponse);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1471,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1472,  requestShouldHaveTheseCookies(cookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1473,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1474,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1475,  // set cookie on request and remove it in response then redirect to other page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1476,"  Cookie nextCookieSetInRequest = newCookie(""a"",""nextValueFromRequest"",1);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1477,"  Cookie nextCookieSetInResponse = newCookie(""a"",""newValue"",0);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1478,  tester.getRequest().addCookie(nextCookieSetInRequest);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1479,  setCookieInResponseAndRedirect(nextCookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1480,  lastResponseShouldHaveTheseCookies(nextCookieSetInResponse);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1481,  requestDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1482,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1483,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1484,  // no cookies left
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1485,  collectingPage = collectAllRequestCookiesOnThisPage();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1486,  requestOnPageShouldHaveTheseCookies(collectingPage);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1487,  lastResponseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1488,  requestDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1489,  responseDoesNotHaveAnyCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1490, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1491,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1492, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1493,  * creates a new cookie with maxAge set
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1494,  * @param name name
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1495,  * @param value value
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1496,  * @param maxAge maxAge
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1497,  * @return a cookie
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1498,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1499," private static Cookie newCookie(String name,String value, int maxAge) {"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1500,"  Cookie cookie = new Cookie(name,value);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1501,  cookie.setMaxAge(maxAge);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1502,  return cookie;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1503, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1504,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1505, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1506,  * start a page which collects all cookies from request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1507,  * @return the page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1508,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1509, private CollectAllRequestCookiesPage collectAllRequestCookiesOnThisPage()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1510, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1511,  return tester.startPage(CollectAllRequestCookiesPage.class);
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1512, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1513,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1514, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1515,  * start a page which set a cookie in response
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1516,  * @param cookie cookie
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1517,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1518, private void setCookieInResponse(Cookie cookie)
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1519, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1520,  tester.startPage(new SetCookiePage(cookie));
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1521, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1522,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1523, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1524,  * start a page which set a cookie in response and then redirect to different page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1525,  * @param cookie cookie
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1526,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1527, private void setCookieInResponseAndRedirect(Cookie cookie)
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1528, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1529,"  tester.startPage(new SetCookiePage(cookie,EndPage.class));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1530, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1531,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1532, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1533,  * check cookies collected by page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1534,  * @param page page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1535,  * @param cookies cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1536,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1537," private void requestOnPageShouldHaveTheseCookies(CollectAllRequestCookiesPage page, Cookie...cookies) {"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1538,"  listShouldMatchAll(page.getCookies(), cookies);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1539, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1540,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1541, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1542,  * check cookies in current request
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1543,  * @param page page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1544,  * @param cookies cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1545,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1546, private void requestShouldHaveTheseCookies(Cookie...cookies) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1547,  Cookie[] cookieFromRequest = tester.getRequest().getCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1548,"  listShouldMatchAll(cookieFromRequest!=null ? Arrays.asList(cookieFromRequest) : new ArrayList<Cookie>(), cookies);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1549, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1550,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1551, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1552,  * check if every cookie is found in the list and no cookie is left
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1553,  * @param cookieList cookie list
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1554,  * @param cookies cookies to check
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1555,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1556," private void listShouldMatchAll(List<Cookie> cookieList, Cookie... cookies)"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1557, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1558,"  Map<String, Cookie> cookieMap = cookiesFromList(cookieList);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1559,  for (Cookie cookie : cookies) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1560,   Cookie removed = cookieMap.remove(cookie.getName());
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1561,"   Assert.assertNotNull(""Cookie ""+cookie.getName(),removed);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1562,"   Assert.assertTrue(""Cookie ""+cookie.getName()+"" matches"",Cookies.isEqual(cookie, removed));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1563,  }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1564,"  Assert.assertTrue(""no cookies left ""+asString(cookieMap),cookieMap.isEmpty());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1565, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1566,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1567, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1568,  * make cookie map more readable
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1569,  * @param cookieMap cookie map
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1570,  * @return string
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1571,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1572," private static String asString(Map<String, Cookie> cookieMap)"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1573, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1574,  StringBuilder sb=new StringBuilder();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1575,"  sb.append(""{"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1576,"  for (Map.Entry<String, Cookie> e : cookieMap.entrySet()) {"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1577,"   sb.append(e.getKey()).append(""="").append(asString(e.getValue()));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1578,"   sb.append("","");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1579,  }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1580,"  sb.append(""}"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1581,  return sb.toString();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1582, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1583,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1584, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1585,  * make cookie more readable
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1586,  * @param c cookie
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1587,  * @return string
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1588,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1589, private static String asString(Cookie c)
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1590, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1591,  StringBuilder sb=new StringBuilder();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1592,"  sb.append(""["");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1593,"  sb.append(""name="").append(c.getName()).append("","");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1594,"  sb.append(""value="").append(c.getValue()).append("","");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1595,"  sb.append(""maxAge="").append(c.getMaxAge());"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1596,"  sb.append(""]"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1597,  return sb.toString();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1598, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1599,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1600, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1601,  * check last response cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1602,  * @param cookies cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1603,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1604, private void lastResponseShouldHaveTheseCookies(Cookie...cookies) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1605,"  listShouldMatchAll(tester.getLastResponse().getCookies(), cookies);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1606, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1607,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1608, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1609,  * response should not have any cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1610,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1611, private void lastResponseDoesNotHaveAnyCookies()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1612, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1613,  listShouldMatchAll(tester.getLastResponse().getCookies());
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1614, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1615,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1616, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1617,  * response should not have any cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1618,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1619, private void responseDoesNotHaveAnyCookies()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1620, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1621,  listShouldMatchAll(tester.getResponse().getCookies());
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1622, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1623,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1624, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1625,  * request should not have any cookies
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1626,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1627, private void requestDoesNotHaveAnyCookies()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1628, {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1629,  requestShouldHaveTheseCookies();
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1630, }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1631,
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1632, /**
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1633,  * create a cookie map based on cookie name
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1634,  * @param cookies cookie list
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1635,  * @return as map
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1636,  * @throws RuntimeException if more than one cookie with the same name
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1637,  */
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1638," private static Map<String,Cookie> cookiesFromList(List<Cookie> cookies) {"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1639,"  Map<String, Cookie> ret = new LinkedHashMap<String, Cookie>();"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1640,  for (Cookie cookie : cookies) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1641,"   Cookie oldValue = ret.put(cookie.getName(), cookie);"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1642,   if (oldValue!=null) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1643,"    throw new RuntimeException(""Cookie with name ""+cookie.getName()+""(""+asString(oldValue)+"") allready in map ""+asString(ret));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1644,   }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1645,  }
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1646,  return ret;
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterTest.java,1647, }
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,62,"  * Checks whether two cookies are equal. See http://www.ietf.org/rfc/rfc2109.txt, p.4.3.3"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,35," Map<Cookies.Key, Cookie> cookies = new LinkedHashMap<Cookies.Key, Cookie>();"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,36," Map<Cookies.Key, Cookie> expiredCookies = new LinkedHashMap<Cookies.Key, Cookie>();"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,48,  if (isExpired(cookie))
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,115, /**
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,116,  * detect if this cookie is expired
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,117,  *
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,118,  * @param cookie
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,119,"  * @return true, if expired"
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,120,  */
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,121, public static boolean isExpired(Cookie cookie)
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,122, {
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,123,  return cookie.getMaxAge() == 0;
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,124, }
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,125,
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/CookieCollection.java,126,
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java,46,  return cookie != null ? (Cookie)cookie.clone() : null;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,32,import java.util.Iterator;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,102,import org.apache.wicket.protocol.http.mock.Cookies;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,385,    CookieCollection responseCookies=new CookieCollection();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,397,    if (lastRequest!=null) {
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,410,    CookieCollection cookies=new CookieCollection();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,411,    if (lastRequest!=null) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,251,  * @see WicketTesterTest#wicketTesterCookieHandlingWithoutRedirect()
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,353,  * @param page page
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,385,"  sb.append(""{"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,387,"   sb.append(e.getKey()).append(""="").append(asString(e.getValue()));"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,390,"  sb.append(""}"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,402,"  sb.append(""["");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,403,"  sb.append(""name="").append(c.getName()).append("","");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,404,"  sb.append(""value="").append(c.getValue()).append("","");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,406,"  sb.append(""]"");"
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,450,  for (Cookie cookie : cookies) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,452,   if (oldValue!=null) {
wicket-core/src/test/java/org/apache/wicket/util/tester/WicketTesterCookieTest.java,453,"    throw new RuntimeException(""Cookie with name ""+cookie.getName()+""(""+asString(oldValue)+"") allready in map ""+asString(ret));"
wicket-core/src/test/java/org/apache/wicket/util/tester/cookies/SetCookiePage.java,50,  if (redirectToPageClass!=null) {
wicket-auth-roles/src/main/java/org/apache/wicket/authroles/authorization/strategies/role/Roles.java,31,public final class Roles extends HashSet<String> implements IClusterable
wicket-core/src/main/java/org/apache/wicket/protocol/http/request/UserAgent.java,29," MOZILLA(""Opera,AppleWebKit,Konqueror"", Arrays.asList(""Mozilla"", ""Gecko"")),"
wicket-core/src/main/java/org/apache/wicket/protocol/http/request/UserAgent.java,31," FIREFOX(""Opera,AppleWebKit,Konqueror"", Arrays.asList(""Mozilla"", ""Gecko"", ""Firefox"")),"
wicket-core/src/main/java/org/apache/wicket/protocol/http/request/UserAgent.java,33," INTERNET_EXPLORER(""Opera"", Arrays.asList(""Mozilla"", ""MSIE"", ""Windows""), Arrays.asList("
wicket-core/src/main/java/org/apache/wicket/protocol/http/request/UserAgent.java,34,"  ""Mozilla"", ""MSIE"", ""Trident""), Arrays.asList(""Mozilla"", ""MSIE"", ""Mac_PowerPC"")),"
wicket-core/src/main/java/org/apache/wicket/protocol/http/request/UserAgent.java,121,}
wicket-core/src/main/java/org/apache/wicket/protocol/http/request/WebClientInfo.java,289,"   setMajorMinorVersionByPattern(""msie (\\d+)\\.(\\d+)"");"
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,17,package org.apache.wicket.resource.aggregator.bundlepriority;
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,18,
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,19,import org.apache.wicket.request.resource.JavaScriptResourceReference;
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,22, *
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,24,public class ReferenceB extends JavaScriptResourceReference
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,26, public ReferenceB()
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,27, {
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,28,"  super(ReferenceB.class, ""b.js"");"
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/bundlepriority/ReferenceB.java,29, }
wicket-core/src/main/java/org/apache/wicket/markup/head/PriorityHeaderItem.java,31,public class PriorityHeaderItem extends HeaderItem implements IWrappedHeaderItem
wicket-core/src/main/java/org/apache/wicket/markup/head/PriorityHeaderItem.java,73,   ret.add(new PriorityHeaderItem(curDependency));
wicket-core/src/main/java/org/apache/wicket/markup/head/ResourceAggregator.java,403,  return bundle == null ? item : bundle;
wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java,23,import org.apache.wicket.markup.head.IWrappedHeaderItem;
wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java,35,public class FilteredHeaderItem extends HeaderItem implements IWrappedHeaderItem
wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java,90,"   ret.add(new FilteredHeaderItem(curDependency, getFilterName()));"
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/ResourceAggregatorTest.java,198,"  * bundle {a, b->a} and {c->a, d->c->a}, render [priority(b), d], should render [ab, cd]"
wicket-core/src/test/java/org/apache/wicket/resource/aggregator/ResourceAggregatorTest.java,213,"  assertItems(bundleAB, bundleCD);"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java,25,import org.apache.wicket.markup.head.IWrappedHeaderItem;
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java,48, private static final class WrappedHeaderItem extends HeaderItem implements IWrappedHeaderItem
wicket-core/src/main/java/org/apache/wicket/markup/head/IWrappedHeaderItem.java,20, * An interface for all HeaderItems which delegate to another HeaderItem
wicket-core/src/main/java/org/apache/wicket/markup/head/IWrappedHeaderItem.java,21, *
wicket-core/src/main/java/org/apache/wicket/markup/head/PriorityHeaderItem.java,31,public class PriorityHeaderItem extends HeaderItem implements IHeaderItemWrapper
wicket-core/src/main/java/org/apache/wicket/markup/head/ResourceAggregator.java,411,  if (item instanceof IHeaderItemWrapper)
wicket-core/src/main/java/org/apache/wicket/markup/head/ResourceAggregator.java,413,   bundle = ((IHeaderItemWrapper)item).wrap(bundle);
wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java,23,import org.apache.wicket.markup.head.IHeaderItemWrapper;
wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java,30, * {@link FilteringHeaderResponse#DEFAULT_HEADER_FILTER_NAME DEFAULT_HEADER_FILTER_NAME} to
wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java,31, * render items in the header.
wicket-core/src/main/java/org/apache/wicket/markup/head/filter/FilteredHeaderItem.java,35,public class FilteredHeaderItem extends HeaderItem implements IHeaderItemWrapper
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java,24,import org.apache.wicket.markup.head.IHeaderItemWrapper;
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java,48, private static final class WrappedHeaderItem extends HeaderItem implements IHeaderItemWrapper
wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxResponse.java,126,  Response response = page.getResponse();
wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxResponse.java,595, protected static final class AjaxResponse extends Response
wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxResponse.java,601,  private final Response originalResponse;
wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxResponse.java,609,  private AjaxResponse(Response originalResponse)
wicket-experimental/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/WebSocketResponse.java,35,public class WebSocketResponse extends Response
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/AtmosphereBehavior.java,151,  if (log.isInfoEnabled())
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/AtmosphereBehavior.java,157,"   log.info(String.format(""Suspending the %s response from ip %s:%s"", transport == null"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/AtmosphereBehavior.java,165,  if (log.isInfoEnabled())
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/AtmosphereBehavior.java,169,"   log.info(String.format(""Resuming the %s response from ip %s:%s"", transport == null"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/AtmosphereBehavior.java,177,  if (log.isInfoEnabled())
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/AtmosphereBehavior.java,181,"   log.info(String.format(""%s connection dropped from ip %s:%s"", transport == null"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,216,"  log.info(""registered page {} for session {}"","
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,217,"   new Object[] { pageKey.getPageId(), pageKey.getSessionId() });"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,228,  if (log.isInfoEnabled())
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,230,   log.info(
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,231,"    ""registering {} for page {} for session {}: {}{}"","
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,232,    new Object[] {
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,233,"      subscription.getBehaviorIndex() == null ? ""component"" : ""behavior"","
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,234,"      page.getPageId(),"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,235,"      Session.get().getId(),"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,236,"      subscription.getComponentPath(),"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,237,"      subscription.getBehaviorIndex() == null ? """" : "":"" +"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,238,       subscription.getBehaviorIndex() });
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,258,   if (log.isInfoEnabled())
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,260,"    log.info(""unregistering page {} for session {}"", new Object[] {"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,261,"      pageKey.getPageId(), pageKey.getSessionId() });"
wicket-experimental/wicket-atmosphere/src/main/java/org/apache/wicket/atmosphere/EventBus.java,375,"  log.info(""Session unbound {}"", sessionId);"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,575,"  Url baseUrl = new Url(Arrays.asList("""", ""SomePage;jsessionid=1234""), Arrays.<Url.QueryParameter>asList());"
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,141,  final String path;
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,144,   path = url.canonical().toString();
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,150,   path = base.toString();
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,177,"  return Strings.join(""/"", render.toString(), path);"
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,284,"  String renderedUrl = new Url(newSegments, url.getQueryParameters()).toString();"
wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java,273,"    httpServletResponse.setHeader(""Ajax-Location"", url);"
wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java,283,
wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java,284,"    setContentType(""text/xml;charset="" +"
wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java,285,     webRequest.getContainerRequest().getCharacterEncoding());
wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java,286,    disableCaching();
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,19,import org.apache.wicket.core.util.string.CssUtils;
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,23,import org.apache.wicket.util.string.Strings;
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,38," public static final String SORT_ASCENDING_CSS_CLASS_KEY = CssUtils.key(OrderByLink.class,"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,39,"   ""ascending"");"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,41," public static final String SORT_DESCENDING_CSS_CLASS_KEY = CssUtils.key(OrderByLink.class,"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,42,"   ""descending"");"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,44," public static final String SORT_NONE_CSS_CLASS_KEY = CssUtils.key(OrderByLink.class, ""none"");"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,142,
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,143,  final ISortState<S> sortState = stateLocator.getSortState();
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,144,
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,145,  SortOrder dir = sortState.getPropertySortOrder(property);
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,146,  String cssClass;
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,147,  if (dir == SortOrder.ASCENDING)
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,148,  {
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,149,   cssClass = getString(SORT_ASCENDING_CSS_CLASS_KEY);
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,150,  }
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,151,  else if (dir == SortOrder.DESCENDING)
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,152,  {
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,153,   cssClass = getString(SORT_DESCENDING_CSS_CLASS_KEY);
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,154,  }
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,155,  else
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,156,  {
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,157,   cssClass = getString(SORT_NONE_CSS_CLASS_KEY);
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,158,  }
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,159,
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,160,  if (!Strings.isEmpty(cssClass))
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,161,  {
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,162,"   tag.append(""class"", cssClass, "" "");"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,163,  }
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,164,
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/sort/OrderByLink.java,166,}
wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/navigation/paging/AjaxPagingNavigator.java,23,import org.apache.wicket.markup.html.link.Link;
wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/navigation/paging/AjaxPagingNavigator.java,132,  * implementation is a default implementation that tries to find a parent markup container and
wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/navigation/paging/AjaxPagingNavigator.java,133,  * update that container. This is necessary as ListViews can't be updated themselves.
wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/navigation/paging/AjaxPagingNavigator.java,146,  // no need for a nullcheck as there is bound to be a non-repeater
wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/navigation/paging/AjaxPagingNavigator.java,147,  // somewhere higher in the hierarchy
wicket-core/src/main/java/org/apache/wicket/ajax/markup/html/navigation/paging/AjaxPagingNavigator.java,148,  while (container instanceof AbstractRepeater)
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,179,   callbacks[CGLIB_CALLBACK_NO_OVERRIDE] = new SerializableNoOpCallback();
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,187,   e.setCallbackFilter(new NoOpForProtectedMethodsCGLibCallbackFilter());
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,393,  @Override
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,394,  public int hashCode() {
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,395,   return getClass().hashCode();
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,396,  }
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,397,
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,398,  @Override
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,399,  public boolean equals(Object obj) {
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,400,   return obj instanceof SerializableNoOpCallback;
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,401,  }
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,431,
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,432,  @Override
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,433,  public int hashCode() {
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,434,   return getClass().hashCode();
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,435,  }
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,436,
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,437,  @Override
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,438,  public boolean equals(Object obj) {
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,439,   return obj instanceof NoOpForProtectedMethodsCGLibCallbackFilter;
wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java,440,  }
wicket-core/src/main/java/org/apache/wicket/Component.java,1839,  * @return Size of this Component in bytes
wicket-core/src/main/java/org/apache/wicket/Component.java,1845,  long size = -1;
wicket-util/src/main/java/org/apache/wicket/util/lang/Bytes.java,111,"   throw new IllegalArgumentException(""'bytes' cannot be negative."");"
wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessages.java,257,  * Retrieves the first message matching the specified {@code level}
wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessages.java,260,  *            The level of the message
wicket-core/src/main/java/org/apache/wicket/feedback/FeedbackMessages.java,261,  * @return matching message or {@code null} if none
wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.java,23,import org.apache.commons.lang.StringUtils;
wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.java,59,"  add(new PropertyListView<Comment>(""comments"", commentList)"
wicket-examples/src/main/java/org/apache/wicket/examples/guestbook/GuestBook.java,107,"   if (StringUtils.isNotBlank((String)values.get(""comment"")))"
wicket-velocity/src/main/java/org/apache/wicket/velocity/VelocityContributor.java,45," private final IModel<? extends Map<?, ?>> model;"
wicket-velocity/src/main/java/org/apache/wicket/velocity/VelocityContributor.java,59," public VelocityContributor(final String templateName, final IModel<? extends Map<?, ?>> model)"
wicket-velocity/src/main/java/org/apache/wicket/velocity/VelocityJavaScriptContributor.java,48,"  final IModel<? extends Map<?, ?>> model, final String id)"
wicket-velocity/src/main/java/org/apache/wicket/velocity/VelocityJavaScriptContributor.java,63,"  final IModel<? extends Map<?, ?>> model, final String id)"
wicket-velocity/src/test/java/org/apache/wicket/contrib/velocity/VelocityJavaScriptPage.java,21,import org.apache.wicket.model.Model;
wicket-velocity/src/test/java/org/apache/wicket/contrib/velocity/VelocityJavaScriptPage.java,46,"  IModel<MiniMap<String, String>> model = new Model<MiniMap<String, String>>()"
wicket-velocity/src/test/java/org/apache/wicket/contrib/velocity/VelocityJavaScriptPage.java,51,"   public MiniMap<String, String> getObject()"
wicket-velocity/src/test/java/org/apache/wicket/contrib/velocity/VelocityJavaScriptPage.java,53,"    MiniMap<String, String> map = new MiniMap<>(2);"
wicket-core/src/main/java/org/apache/wicket/resource/JQueryResourceReference.java,48," public static final String VERSION_3 = ""jquery/jquery-3.3.1.js"";"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/export/ExportToolbar.java,105,  this.messageModel = messageModel;
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/export/ExportToolbar.java,106,  this.fileNameModel = fileNameModel;
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/export/ExportToolbar.java,118,"  this.messageModel = Args.notNull(messageModel, ""messageModel"");"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/export/ExportToolbar.java,131,"  this.fileNameModel = Args.notNull(fileNameModel, ""fileNameModel"");"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/export/ExportToolbar.java,209,"  }.setFileName(fileNameModel.getObject() + ""."" + dataExporter.getFileNameExtension());"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/BeanValidationConfiguration.java,64,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/BeanValidationConfiguration.java,134,  *          A violation translator that will convert {@link javax.validation.ConstraintViolation}s
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/BeanValidationConfiguration.java,135,  *          into Wicket's {@link org.apache.wicket.validation.ValidationError}s
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,3,import java.lang.annotation.Annotation;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,4,import java.util.ArrayList;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,6,import java.util.Collections;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,9,import java.util.List;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,14,import javax.validation.constraints.NotNull;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,25,import org.apache.wicket.validation.IValidator;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,60,public class PropertyValidator<T> extends Behavior implements IValidator<T>
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,63, private static final List<Class<? extends Annotation>> NOT_NULL_ANNOTATIONS;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,64, static
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,65, {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,66,  List<Class<? extends Annotation>> tmp = new ArrayList<>();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,67,  tmp.add(NotNull.class);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,68,  try
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,69,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,70,"   tmp.add(Class.forName(""javax.validation.constraints.NotBlank"")"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,71,    .asSubclass(Annotation.class));
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,72,"   tmp.add(Class.forName(""javax.validation.constraints.NotEmpty"")"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,73,    .asSubclass(Annotation.class));
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,74,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,75,  catch (ClassNotFoundException e)
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,76,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,77,"   // ignore exception, we are using bean validation 1.1"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,78,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,79,  NOT_NULL_ANNOTATIONS = Collections.unmodifiableList(tmp);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,80, }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,119, private String createUnresolvablePropertyMessage(FormComponent<T> component) {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,121,"    + "". (Hints:) Possible causes are a typo in the PropertyExpression, a null reference or a model that does not work in combination with a """
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,122,"    + IPropertyResolver.class.getSimpleName() + ""."";"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,123,        IModel<?> model = ValidationModelResolver.resolvePropertyModelFrom(component);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,124,  if (model != null) {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,160,"    ""This validator has already been added to component: """
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,161,     + this.component
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,167,   throw new IllegalStateException(getClass().getSimpleName()
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,168,"    + "" can only be added to FormComponents"");"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,207, private List<ConstraintDescriptor<?>> findNotNullConstraints(List<Class<? extends Annotation>> notNullAnnotationTypes)
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,210,  Validator validator = config.getValidator();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,211,  Property property = getProperty();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,212,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,213,  List<ConstraintDescriptor<?>> constraints = new ArrayList<>();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,215,"  Iterator<ConstraintDescriptor<?>> it = new ConstraintIterator(validator, property);"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,219,   ConstraintDescriptor<?> desc = it.next();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,220,   Annotation annotation = desc.getAnnotation();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,221,   Class<? extends Annotation> annotationType = annotation.annotationType();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,222,   if (notNullAnnotationTypes.contains(annotationType))
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,223,   {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,224,    constraints.add(desc);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,225,   }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,226,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,227,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,228,  return constraints;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,229, }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,230,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,231, boolean isRequired()
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,232, {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,233,  List<ConstraintDescriptor<?>> constraints = findNotNullConstraints(NOT_NULL_ANNOTATIONS);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,234,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,235,  if (constraints.isEmpty())
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,236,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,237,   return false;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,238,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,239,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,240,  Set<Class<?>> validatorGroups = new HashSet<>();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,241,  validatorGroups.addAll(Arrays.asList(getGroups()));
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,242,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,243,  for (ConstraintDescriptor<?> constraint : constraints)
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,244,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,245,   if (canApplyToDefaultGroup(constraint) && validatorGroups.isEmpty())
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,246,   {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,247,    return true;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,248,   }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,249,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,250,   for (Class<?> constraintGroup : constraint.getGroups())
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,252,    if (validatorGroups.contains(constraintGroup))
wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/constraint/ValidPasswordValidator.java,41,  if (!CONTENT.matcher(value).matches())
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1571,"  checkComponentTag(tag, ""form"");"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1572,
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1627,"   tag.setName(""div"");"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1628,"   if (""form"".equals(tag.getName()))"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/BeanValidationConfiguration.java,64,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/BeanValidationConfiguration.java,134,  *          A violation translator that will convert {@link javax.validation.ConstraintViolation}s
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/BeanValidationConfiguration.java,135,  *          into Wicket's {@link org.apache.wicket.validation.ValidationError}s
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,3,import java.lang.annotation.Annotation;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,4,import java.util.ArrayList;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,6,import java.util.Collections;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,9,import java.util.List;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,14,import javax.validation.constraints.NotNull;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,25,import org.apache.wicket.validation.IValidator;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,60,public class PropertyValidator<T> extends Behavior implements IValidator<T>
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,63, private static final List<Class<? extends Annotation>> NOT_NULL_ANNOTATIONS;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,64, static
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,65, {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,66,  List<Class<? extends Annotation>> tmp = new ArrayList<>();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,67,  tmp.add(NotNull.class);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,68,  try
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,69,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,70,"   tmp.add(Class.forName(""javax.validation.constraints.NotBlank"")"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,71,    .asSubclass(Annotation.class));
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,72,"   tmp.add(Class.forName(""javax.validation.constraints.NotEmpty"")"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,73,    .asSubclass(Annotation.class));
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,74,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,75,  catch (ClassNotFoundException e)
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,76,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,77,"   // ignore exception, we are using bean validation 1.1"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,78,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,79,  NOT_NULL_ANNOTATIONS = Collections.unmodifiableList(tmp);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,80, }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,119, private String createUnresolvablePropertyMessage(FormComponent<T> component) {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,121,"    + "". (Hints:) Possible causes are a typo in the PropertyExpression, a null reference or a model that does not work in combination with a """
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,122,"    + IPropertyResolver.class.getSimpleName() + ""."";"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,123,        IModel<?> model = ValidationModelResolver.resolvePropertyModelFrom(component);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,124,  if (model != null) {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,160,"    ""This validator has already been added to component: """
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,161,     + this.component
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,167,   throw new IllegalStateException(getClass().getSimpleName()
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,168,"    + "" can only be added to FormComponents"");"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,207, private List<ConstraintDescriptor<?>> findNotNullConstraints(List<Class<? extends Annotation>> notNullAnnotationTypes)
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,210,  Validator validator = config.getValidator();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,211,  Property property = getProperty();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,212,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,213,  List<ConstraintDescriptor<?>> constraints = new ArrayList<>();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,215,"  Iterator<ConstraintDescriptor<?>> it = new ConstraintIterator(validator, property);"
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,219,   ConstraintDescriptor<?> desc = it.next();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,220,   Annotation annotation = desc.getAnnotation();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,221,   Class<? extends Annotation> annotationType = annotation.annotationType();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,222,   if (notNullAnnotationTypes.contains(annotationType))
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,223,   {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,224,    constraints.add(desc);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,225,   }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,226,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,227,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,228,  return constraints;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,229, }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,230,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,231, boolean isRequired()
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,232, {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,233,  List<ConstraintDescriptor<?>> constraints = findNotNullConstraints(NOT_NULL_ANNOTATIONS);
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,234,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,235,  if (constraints.isEmpty())
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,236,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,237,   return false;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,238,  }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,239,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,240,  Set<Class<?>> validatorGroups = new HashSet<>();
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,241,  validatorGroups.addAll(Arrays.asList(getGroups()));
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,242,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,243,  for (ConstraintDescriptor<?> constraint : constraints)
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,244,  {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,245,   if (canApplyToDefaultGroup(constraint) && validatorGroups.isEmpty())
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,246,   {
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,247,    return true;
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,248,   }
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,249,
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,250,   for (Class<?> constraintGroup : constraint.getGroups())
wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java,252,    if (validatorGroups.contains(constraintGroup))
wicket-examples/src/main/java/org/apache/wicket/examples/bean/validation/constraint/ValidPasswordValidator.java,41,  if (!CONTENT.matcher(value).matches())
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1571,"  checkComponentTag(tag, ""form"");"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1572,
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1627,"   tag.setName(""div"");"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1628,"   if (""form"".equals(tag.getName()))"
wicket-util/src/main/java/org/apache/wicket/util/lang/Args.java,173,"  msg = msg.replaceAll(""\\{\\}"", ""%s"");"
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,29,public class ArgsTest
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,31,
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,32,
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,37, public void notNullCollection()
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,42,
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,49, public void notEmptyCollection()
wicket-util/src/main/java/org/apache/wicket/util/lang/Args.java,173,"  msg = msg.replaceAll(""\\{\\}"", ""%s"");"
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,29,public class ArgsTest
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,31,
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,32,
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,37, public void notNullCollection()
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,42,
wicket-util/src/test/java/org/apache/wicket/util/lang/ArgsTest.java,49, public void notEmptyCollection()
wicket-examples/src/test/java/org/apache/wicket/examples/forminput/FormInputTest.java,26,public class FormInputTest extends WicketTestCase
wicket-examples/src/test/java/org/apache/wicket/examples/forminput/FormInputTest.java,32, public void test_1()

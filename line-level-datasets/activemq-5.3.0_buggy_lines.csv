File,LineNumber,src
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,393,                answer = new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,401,        return new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,568,    /*
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,46,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,65,                connection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,218,            cleanupTicket = getScheduledThreadPoolExecutor().scheduleAtFixedRate(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,866,        do {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,867,            pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,922,            pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,982,            pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1173,         // Perhaps we should page always into the pagedInPendingDispatch list is
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1352,            if (isLazyDispatch()&& !force) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1356,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1357,            if ((force || !consumers.isEmpty()) && toPageIn > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1408,                // and now see if we can dispatch the new stuff.. and append to
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1409,                // the pending
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1426,            wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1498,    private void pageInMessages() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1499,        pageInMessages(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1500,    }
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,28,import javax.management.MBeanServerInvocationHandler;
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,47,        broker.setPersistent(false);
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,50,"        factory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,56,        consumer.close();
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,64,        createProducerAndSendMessages();
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,83,    private void createProducerAndSendMessages() throws Exception {
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,87,        for (int i = 0; i < 10000; i++) {
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,88,"            TextMessage message = session.createTextMessage(""message "" + i);"
activemq-core/src/test/java/org/apache/activemq/broker/region/QueuePurgeTest.java,98,        for (int i = 0; i < 100; ++i) {
activemq-core/src/test/java/org/apache/activemq/ProducerFlowControlSendFailTest.java,21,import java.util.concurrent.atomic.AtomicLong;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,33,import org.apache.commons.httpclient.HttpMethodRetryHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,35,import org.apache.commons.httpclient.NoHttpResponseException;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,41,import org.apache.commons.httpclient.params.HttpMethodParams;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,202,     httpMethod.abort();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisorySupport.java,43,"    public static final String FAST_PRODUCER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + ""FastPorducer."";"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,91,        // to allocate the file contigously.
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,94,                rc.setLength(preferedSize);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,28,import org.apache.activemq.command.ActiveMQMessage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,57,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,58,import java.util.AbstractList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,59,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,60,import java.util.Collection;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,61,import java.util.Collections;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,62,import java.util.Comparator;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,63,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,64,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,65,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,66,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,67,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,68,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,69,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,70,import java.util.concurrent.CountDownLatch;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,71,import java.util.concurrent.ExecutorService;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,72,import java.util.concurrent.Executors;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,73,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,74,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,75,import javax.jms.InvalidSelectorException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,76,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,201,                        if (broker.isExpired(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,202,"                            messageExpired(createConnectionContext(), createMessageReference(message));"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,203,                            // drop message will decrement so counter balance here
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,204,                            destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,588,"        doBrowse(true, browsedMessages, this.getMaxExpirePageSize());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,752,"        doBrowse(false, l, getMaxBrowsePageSize());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,756,"    public void doBrowse(boolean forcePageIn, List<Message> l, int max) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,759,            pageInMessages(forcePageIn);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,773,"                    addAll(pagedInMessages.values(), l, max, toExpire);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,790,                                MessageReference node = messages.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,791,                                messages.rollback(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,792,                                if (node != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,796,                                    } else if (l.contains(node.getMessage()) == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,809,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1281,        if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1374,                            if (!broker.isExpired(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1377,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1378,"                                messageExpired(createConnectionContext(), ref);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1379,                            }
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveSingleUrlTest.java,36,"        master.setBrokerName(""shared"");"
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveSingleUrlTest.java,46,"                    broker.setBrokerName(""shared"");"
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryNetworkReconnectTest.java,101,            allowing (managementContext).stop();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,285,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,30,import java.util.concurrent.CountDownLatch;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,31,import java.util.concurrent.TimeUnit;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,32,import javax.jms.Connection;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,33,import javax.jms.Message;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,34,import javax.jms.MessageConsumer;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,35,import javax.jms.MessageListener;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,36,import javax.jms.MessageProducer;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,37,import javax.jms.Session;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,38,import javax.management.ObjectName;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,39,import junit.framework.Test;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,726,       }
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,23,import org.apache.activemq.broker.region.policy.PolicyMap;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,438,                        System.exit(systemExitOnShutdownExitCode);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,435,            if (systemExitOnShutdown) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,436,                addShutdownHook(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,437,                    public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,438,                     Runtime.getRuntime().halt(systemExitOnShutdownExitCode);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,439,                    }
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,440,                });
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,441,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,117,"    private TaskRunnerFactory sessionTaskRunner = new TaskRunnerFactory(""ActiveMQ Session Task"", ThreadPriorities.INBOUND_CLIENT_SESSION, false, 1000);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,647,                    sessionTaskRunner.shutdown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,110,    private int sendTimeout =0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,113, private ExceptionListener exceptionListener;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,114, private int auditDepth = ActiveMQMessageAudit.DEFAULT_WINDOW_SIZE;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,115, private int auditMaximumProducerNumber = ActiveMQMessageAudit.MAXIMUM_PRODUCER_COUNT;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,145,                messageQueue.stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,146,                TaskRunner taskRunner = this.taskRunner;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,147,                if (taskRunner != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,148,                    this.taskRunner = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,149,                    taskRunner.shutdown();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,936,"                    true, 1000);"
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,902,"            new Thread(""ActiveMQ Transport Stopper: "" + transport.getRemoteAddress()) {"
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,903,                @Override
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,904,                public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,905,                    serviceLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,906,                    try {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,907,                        doStop();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,908,                    } catch (Throwable e) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,909,"                        LOG.debug(""Error occured while shutting down a connection to '"" + transport.getRemoteAddress()"
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,910,"                                + ""': "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,911,                    } finally {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,912,                        stopped.countDown();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,913,                        serviceLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,915,                }
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,916,            }.start();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,34,import java.util.concurrent.Executors;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,35,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,68,import org.apache.activemq.thread.DeterministicTaskRunner;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,89,    protected TaskRunnerFactory taskFactory;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,113,            wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,167,        if( messages instanceof VMPendingMessageCursor ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,172,        if (isOptimizedDispatch()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,173,"            this.taskRunner = taskFactory.createTaskRunner(this, ""TempQueue:  "" + destination.getPhysicalName());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,174,        }else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,175,            final Queue queue = this;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,176,            this.executor =  Executors.newSingleThreadExecutor(new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,177,                public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,178,"                    Thread thread = new QueueThread(runnable, ""QueueThread:""+destination, queue);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,179,                    thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,180,                    thread.setPriority(Thread.NORM_PRIORITY);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,181,                    return thread;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,182,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,183,            });
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,184,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,185,"            this.taskRunner = new DeterministicTaskRunner(this.executor,this);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,186,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1193,         }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1194,         return !messagesWaitingForSpace.isEmpty();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1300,        asyncWakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1343,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1344,    public void asyncWakeup() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1346,            this.taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1435,                        doWakeUp  = true;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,118,"                                                      true, 1000);"
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapterFactory.java,116,"                                                      true, 1000);"
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,46,"    public TaskRunnerFactory(String name, int priority, boolean daemon, int maxIterationsPerRun) {"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,336,            runner.interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,46,"    private static final TaskRunnerFactory TASK_RUNNER_FACTORY = new TaskRunnerFactory(""VMTransport"", Thread.NORM_PRIORITY, true, 1000);"
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,58,    public int count;
activemq-core/src/test/java/org/apache/activemq/broker/region/QueueDuplicatesFromStoreTest.java,50,import org.apache.activemq.store.amq.AMQPersistenceAdapter;
activemq-core/src/test/java/org/apache/activemq/broker/region/QueueDuplicatesFromStoreTest.java,108,"                queueMessageStore, destinationStatistics, null);"
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,45,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,60,public class DurableConsumerTest extends TestCase {
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,74,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,75,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,179,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,180,"                    SimpleTopicSubscriber sub = new SimpleTopicSubscriber(CONNECTION_URL, System.currentTimeMillis()+""-""+id, TOPIC_NAME);"
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,195,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,250,        ExecutorService executor = Executors.newCachedThreadPool();
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,365,        super.tearDown();
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,366,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,398,        return new ActiveMQConnectionFactory(bindAddress);
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,401,
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,35,
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,89,        catch ( JMSException expected ) {
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,110,        } catch ( JMSException expected ) {
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,113,"            assertTrue(""took at least initialReconnectDelay time: "" + duration, duration >= initialReconnectDelay);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,361,"                    LOG.warn(""Database "" + kind + "" driver override not found for : ["" + dirverName"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,100,                    matched.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,118,                            LinkedList list = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,144,    private void destroyDiskList() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,152,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,321,    public synchronized boolean isFull() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,322,        // we always have space - as we can persist to disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,323,        return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,324,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,726,       }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,727,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,728,       // Clear out the memory usage for the old queue.
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,729,       // We'll reset it to the DLQ below:
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,730,       message.setMemoryUsage(null);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,145,        Message result = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,148,            result.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,61,    private MessageReference last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,62,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,38,    private MessageReference last;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,39,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,141,"        queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,143,        long newQueuesize = queue.getQueueSize();
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,167,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,531,        //answer.setEnableStatistics(true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,834,"                ackLater(md, MessageAck.DELIVERED_ACK_TYPE);"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,162,"        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(""tcp://localhost:61616"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,225,                return 1000 == view.getDispatchCount();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,243,                return 0 == view.getInFlightCount();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,249,"        assertEquals(""prefetch gets back to 0 "", 0, view.getInFlightCount());"
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,25,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,66,    private AtomicBoolean receivingMessage = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,67,
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,356,        receivingMessage.set(true);
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,370,            receivingMessage.set(false);
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,373,            receivingMessage.set(false);
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,598,
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,599,    public boolean inReceive() {
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,600,     return receivingMessage.get();
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,601,    }
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,156,        if (inReceive.get() || wireFormat.inReceive()) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,205, public boolean inReceive() {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,206,  //TODO implement the inactivity monitor
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,207,  return false;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,208, }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,209,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,210,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,211,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpBufferedInputStream.java,46,    private void fill() throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,507,"        TcpBufferedInputStream buffIn = new TcpBufferedInputStream(socket.getInputStream(), ioBufferSize);"
activemq-core/src/main/java/org/apache/activemq/transport/udp/CommandDatagramSocket.java,73,                DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(datagram.getData()));
activemq-core/src/main/java/org/apache/activemq/transport/udp/CommandDatagramSocket.java,74,
activemq-core/src/main/java/org/apache/activemq/wireformat/ObjectStreamWireFormat.java,78, public boolean inReceive() {
activemq-core/src/main/java/org/apache/activemq/wireformat/ObjectStreamWireFormat.java,79,  // TODO implement the inactivity monitor
activemq-core/src/main/java/org/apache/activemq/wireformat/ObjectStreamWireFormat.java,80,  return false;
activemq-core/src/main/java/org/apache/activemq/wireformat/ObjectStreamWireFormat.java,81, }
activemq-core/src/main/java/org/apache/activemq/wireformat/ObjectStreamWireFormat.java,82,
activemq-core/src/main/java/org/apache/activemq/wireformat/ObjectStreamWireFormat.java,83,
activemq-core/src/main/java/org/apache/activemq/wireformat/ObjectStreamWireFormat.java,84,
activemq-core/src/main/java/org/apache/activemq/wireformat/WireFormat.java,64,    /**
activemq-core/src/main/java/org/apache/activemq/wireformat/WireFormat.java,65,     * @return true if message is being received
activemq-core/src/main/java/org/apache/activemq/wireformat/WireFormat.java,66,     */
activemq-core/src/main/java/org/apache/activemq/wireformat/WireFormat.java,67,    boolean inReceive();
activemq-core/src/main/java/org/apache/activemq/wireformat/WireFormat.java,68,
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransport.java,50,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,28,import org.apache.activemq.store.MessageRecoveryListener;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,29,import org.apache.activemq.store.MessageStore;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,31,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,62,"            throw IOExceptionSupport.create(""Failed to broker message: "" + message.getMessageId() + "" in container: "" + e, e);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,68,"            adapter.doAddMessage(c, message.getMessageId(), destination, data, message.getExpiration());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,71,"            throw IOExceptionSupport.create(""Failed to broker message: "" + message.getMessageId() + "" in container: "" + e, e);"
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,45,    @Override
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,46,    public void testStoreCanHandleDupMessages() throws Exception {
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,47,        try {
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,48,            super.testStoreCanHandleDupMessages();
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,49,"            fail(""We expect this test to fail as it would be too expensive to add additional "" +"
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,50,"                 ""unique constraints in the JDBC implementation to detect the duplicate messages."");"
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,51,        } catch (AssertionFailedError expected) {
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,52,        }
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,53,    }
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,54,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1911,            slaveStartSignal.await();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2108,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2135,}
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,703,    stampAsExpired(message);
activemq-core/src/test/java/org/apache/activemq/broker/ft/MasterSlaveSlaveDieTest.java,56,"        master.addConnector(""tcp://localhost:0"");"
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,29,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,30,
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,35,public class DuplexNetworkMBeanTest extends TestCase {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,23,import javax.jms.MessageConsumer;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,32,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,33,
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,42,public class NetworkBrokerDetachTest extends TestCase {
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,84,        Thread.sleep(2000);
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,113,        Thread.sleep(1000);
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,117,            assertNotNull(consumer1.receive(500));
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,118,            assertNotNull(consumer2.receive(500));
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,121,        assertNull(consumer1.receive(500));
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,122,        assertNull(consumer2.receive(500));
activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportWaitForTest.java,60,"                        fail(""unexpected exception:"" + e);"
activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportWaitForTest.java,73,"        assertTrue(""has got connection"", gotConnection.await(200, TimeUnit.MILLISECONDS));"
activemq-core/src/test/java/org/apache/activemq/usecases/MultiBrokersMultiClientsTest.java,69,"         assertConsumersConnect(""Broker"" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 30000);"
activemq-core/src/test/java/org/apache/activemq/usecases/MultiBrokersMultiClientsTest.java,120,"         assertConsumersConnect(""Broker"" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 30000);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,51,"    protected Map<ProducerId, Long> addedMessages = new HashMap<ProducerId, Long>();"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,53,"    public JDBCMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQDestination destination) {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,63,        Long lastAddedMessage = addedMessages.get(messageId.getProducerId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,64,        if (lastAddedMessage != null && lastAddedMessage >= messageId.getProducerSequenceId()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,66,"                LOG.debug(""Message "" + message + "" already added to the database. Skipping."");"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,84,"            addedMessages.put(messageId.getProducerId(), messageId.getProducerSequenceId());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,124,"        MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,132,"        TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,43,"    public JDBCTopicMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQTopic topic) {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,44,"        super(persistenceAdapter, adapter, wireFormat, topic);"
activemq-core/src/test/java/org/apache/activemq/store/PersistenceAdapterTestSupport.java,35,    private PersistenceAdapter pa;
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,23,import org.apache.activemq.broker.ConnectionContext;
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,24,import org.apache.activemq.command.ActiveMQQueue;
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,25,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,26,import org.apache.activemq.command.MessageId;
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,27,import org.apache.activemq.store.MessageStore;
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,32,/**
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,33, *
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,34," * @author <a href=""http://hiramchirino.com"">Hiram Chirino</a>"
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapterTest.java,35, */
activemq-core/src/test/java/org/apache/activemq/usecases/BrowseOverNetworkTest.java,72,        System.out.println(browsedMessage);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,32,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,139,        for (Iterator iter = connectionState.getTransactionStates().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,140,            TransactionState transactionState = (TransactionState)iter.next();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,144,            for (Iterator iterator = transactionState.getCommands().iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,145,                Command command = (Command)iterator.next();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,353,                ConnectionId connectionId = send.getProducerId().getParentId().getParentId();
activemq-core/src/main/java/org/apache/activemq/state/SessionState.java,53,        return producers.remove(id);
activemq-core/src/main/java/org/apache/activemq/state/SessionState.java,55,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,498,"                            LOG.debug(""Send oneway attempt: "" + i + "" failed for command:"" + command);"
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,646,"        LOG.debug(""Setting up new connection: "" + getRemoteAddress());"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,88,            if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,89,"                LOG.debug(regionDestination.getActiveMQDestination().getPhysicalName() + "" cursor got duplicate: "" + message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,90,            }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,21,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,22,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,31,import org.apache.activemq.command.ProducerId;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,34,import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,40,import org.junit.Before;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,51, @Before
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,72,     broker.setDeleteAllMessagesOnStartup(true);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,76, @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,78,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,106,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,107,        broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,144,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,159,        startBroker(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,161,"        assertNotNull(""we got the message"", consumer.receive(20000));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,163,        session.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,169,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,191,"     // withough tracking producers, message will not be replayed on recovery"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,192,"     assertNull(""we got the message"", consumer.receive(2000));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,199,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,149,    public String getFindAllMessageIds() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,152,        if (findAllMessagesStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,153,"            findAllMessagesStatement = ""SELECT ID, MSGID_PROD, MSGID_SEQ FROM "" + getFullMessageTableName()"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,156,        return findAllMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,335,            s = c.getConnection().prepareStatement(this.statements.getFindAllMessageIds());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,85,"    void doMessageIdScan(TransactionContext c, ActiveMQDestination destination, long limit, JDBCMessageIdScanListener listener) throws SQLException, IOException;"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageIdScanListener.java,22,    boolean messageId(MessageId id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,56,        initAudit();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,57,    }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,58,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,59,    /*
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,60,     * revisit: This can be destination agnostic and back in the jdbc persistence adapter start
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,61,     */
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,62,    public void initAudit() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,63,        if (audit != null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,64,            try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,65,                TransactionContext c = persistenceAdapter.getTransactionContext(null);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,66,"                adapter.doMessageIdScan(c, destination, 100, new JDBCMessageIdScanListener() {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,67,                    public boolean messageId(MessageId id) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,68,                        audit.isDuplicate(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,69,                        return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,70,                    }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,71,                });
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,72,            } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,73,"                LOG.error(""Failed to reload store message audit for queue store "" + destination);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,74,            }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,75,        }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,129,    protected ActiveMQMessageAudit createMessageAudit() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,130,     if (enableAudit && audit == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,131,"      audit = new ActiveMQMessageAudit(maxAuditDepth,maxProducersToAudit);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,133,     return audit;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,137,"        MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination, createMessageAudit());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,145,"        TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination, createMessageAudit());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,628,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,155,"                                       + "" WHERE CONTAINER=? ORDER BY ID DESC"";"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,330,"    public void doMessageIdScan(TransactionContext c, ActiveMQDestination destination, long limit,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,336,"            s.setString(1, destination.getQualifiedName());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,337,            // limit the query. just need the the last few messages that could be replayed
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,338,            // on recovery. send or commit reply lost so it gets replayed.
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,341,"                if (!listener.messageId(new MessageId(rs.getString(2), rs.getLong(3)))) {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,342,                    break;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,343,                }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,522,"        LOG.debug(s, e);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,339,"                listener.messageId(new MessageId(rs.getString(2), rs.getLong(3)));"
activemq-core/src/test/java/org/apache/activemq/broker/policy/DeadLetterTest.java,36,    private int rollbackCount;
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java,32,    final int testTime = 10 * 60 * 1000;
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompLoadTest.java,33,"    final String bindAddress = ""stomp://0.0.0.0:61613"";"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1070,                if (clearDispatchList) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1071,                    // we are reconnecting so lets flush the in progress
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1072,                    // messages
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1073,                    clearDispatchList = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1074,                    List<MessageDispatch> list = unconsumedMessages.removeAll();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1075,                    if (!this.info.isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1076,                        for (MessageDispatch old : list) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1077,                            // ensure we don't filter this as a duplicate
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1078,"                            session.connection.rollbackDuplicate(this, old.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1079,                        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1080,                    }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1081,                    if (!session.isTransacted()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1082,"                        // clean, so we don't have duplicates with optimizeAcknowledge"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1083,                        synchronized (deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1084,                            deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1085,                        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1086,                    }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1087,                    pendingAck = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1088,                }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1121,                        // in a transaction ack delivery of duplicates to ensure prefetch extension kicks in.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1122,                        // the normal ack will happen in the transaction.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1123,                        if (session.isTransacted()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1124,"                            ackLater(md, MessageAck.DELIVERED_ACK_TYPE);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1125,                        } else {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1126,                            acknowledge(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1127,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,440,"            throw new JMSException(""Unmatched acknowledege: "" + ack"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,444,"            throw new JMSException(""Unmatched acknowledege: "" + ack"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,448,"            throw new JMSException(""Unmatched acknowledege: "" + ack"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,666,"                    LOG.trace(info.getDestination().getPhysicalName() + "" dispatched: "" + message.getMessageId()"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,667,"                            + "", dispatched: "" + node.getRegionDestination().getDestinationStatistics().getDispatched().getCount()"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,668,"                            + "", inflight: "" + node.getRegionDestination().getDestinationStatistics().getInflight().getCount());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,339,            // jdbc scrollable cursor requires jdbc ver > 1.0 andis  often implemented locally so avoid
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,54," private static final String QUEUE_NAME = ""test.FailoverTransactionTest"";"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,82, //@Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,92,  MessageProducer producer = session.createProducer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,93,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,94,"  TextMessage message = session.createTextMessage(""Test message"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,95,  producer.send(message);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,96,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,97,"  // close producer before commit, emulate jmstemplate"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,98,  producer.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,160,        MessageProducer producer = session.createProducer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,161,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,162,"        TextMessage message = session.createTextMessage(""Test message"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,163,        producer.send(message);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,246,     MessageProducer producer = session.createProducer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,247,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,248,"     TextMessage message = session.createTextMessage(""Test message"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,249,     producer.send(message);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,250,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,251,"     // close producer before commit, emulate jmstemplate"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,252,     producer.close();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,120,            // Don't accept any more slections
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,33,import org.apache.activemq.transport.nio.NIOBufferedInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,81,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,84,"            DataInputStream in = new DataInputStream(new NIOBufferedInputStream(channel, 8 * 1024));"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,85,            while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,86,                Object command = wireFormat.unmarshal(in);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,87,                doConsume((Command)command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,88,            }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,89,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,202,"            LOG.trace(""ack:"" + ack);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,259,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,260,"                                prefetchExtension = Math.max(0,"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,261,                                        prefetchExtension - index);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,322,                // Acknowledge all dispatched messages up till the message id of
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,323,                // the ack.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,352,                // Acknowledge all dispatched messages up till the message id of
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,353,                // the
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,354,                // acknowledgment.
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,205,                boolean reconnectOk = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,210,                }
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,211,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,216,                if(reconnectOk) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,220,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,221,            if (transportListener != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,222,                transportListener.transportInterupted();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,223,            }
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,415,                    if(command instanceof RemoveInfo) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,416,                        // Simulate response to RemoveInfo command
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,435,"                            LOG.trace(""Waiting for transport to reconnect."");"
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,701,                                        restoreTransport(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,859,        }catch(Exception e) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,82,        try {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,83,"            // no more connections on worker, close it"
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,84,            worker.close();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,85,        } catch (IOException e) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,86,        }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,67,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,24,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,75,                lockBarrier();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,119,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,20,import java.io.DataInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,35,import org.apache.activemq.transport.nio.NIOInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,134,            selection.close();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,135,            onException(e);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,148,        selection.disable();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,202,"            LOG.info(""ack:"" + ack);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,244,                                                node.getRegionDestination().getDestinationStatistics().getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,365,                                .getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,366,
activemq-core/src/test/java/org/apache/activemq/broker/policy/DeadLetterTestSupport.java,173,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,470,                    // but with failover and unordered connection reinit it can get the second
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,471,                    // message which will have a problem for the ack
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,506,        // consumer2 should get other message
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,509,"        assertNotNull(""got message on consumer2"", msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,535,"        LOG.info(""Received: "" + msg);"
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,21,/**
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,22, * @version $Revision: 1.1.1.1 $
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,23, */
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,24,public class ConsumeQueuePrefetchTest extends ConsumeTopicPrefetchTest {
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,25,
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,26,    /**
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,27,     * TODO disabled failing test cases until we fix queue dispatching
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,28,     */
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,29,    public void testSendDoublePrefetchSize() throws JMSException {
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,30,    }
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,31,
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,32,    /**
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,33,     * TODO disabled failing test cases until we fix queue dispatching
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,34,     */
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,35,    public void testSendPrefetchSizePlusOne() throws JMSException {
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeQueuePrefetchTest.java,36,    }
activemq-core/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,75,    protected void consumeMessge(int i) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,739,            unconsumedMessages.close();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,740,            this.session.removeConsumer(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1163,            return pendingWakeups.decrementAndGet() > 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1336,                        + pagedInMessages.size());
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2102Test.java,66,        private int numToProcessPerIteration;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2102Test.java,214,            } while ((numToProcess == CONSUME_ALL || --numToProcess > 0) && isRunning());
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2102Test.java,363,                            messageCount.notify();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2102Test.java,444,        setMaxTestTime(10 * 60 * 1000);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,255,                        if (ack.getLastMessageId().equals(messageId)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,256,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,257,                            if (context.isInTransaction()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,258,                                // extend prefetch window only if not a pulling
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,259,                                // consumer
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,260,                                if (getPrefetchSize() != 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,261,                                    prefetchExtension = Math.max(
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,262,"                                            prefetchExtension, index );"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,263,                                }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,264,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,265,                                // contract prefetch if dispatch required a pull
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,266,                                if (getPrefetchSize() == 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,267,"                                    prefetchExtension = Math.max(0, prefetchExtension - index);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,268,                                }
activemq-core/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java,160,"        bindAddress = ""tcp://localhost:61616"";"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,106,    private final MessageDispatchChannel unconsumedMessages = new MessageDispatchChannel();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,643,        // we are called from inside the transport reconnection logic
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,644,        // which involves us clearing all the connections' consumers
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,645,        // dispatch lists and clearing them
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,646,        // so rather than trying to grab a mutex (which could be already
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,647,        // owned by the message listener calling the send) we will just set
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,648,        // a flag so that the list can be cleared as soon as the
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,649,        // dispatch thread is ready to flush the dispatch list
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,758,        synchronized (unconsumedMessages.getMutex()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,759,            clearDispatchListOnReconnect();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,760,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,940,        synchronized (unconsumedMessages.getMutex()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,941,            clearDispatchListOnReconnect();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,942,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1076,                clearDispatchListOnReconnect();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1122,    // called holding unconsumedMessages.getMutex()
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1123,    private void clearDispatchListOnReconnect() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1125,            // we are reconnecting so lets flush the in progress
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1126,            // messages
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1127,            clearDispatchList = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1128,            List<MessageDispatch> list = unconsumedMessages.removeAll();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1129,            if (!this.info.isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1130,                for (MessageDispatch old : list) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1131,                    // ensure we don't filter this as a duplicate
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1132,"                    session.connection.rollbackDuplicate(this, old.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1133,                }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1134,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1135,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1136,"            // clean, so we don't have duplicates with optimizeAcknowledge"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1138,                deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1140,            pendingAck = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,21,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,33,import javax.jms.*;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,34,import javax.jms.IllegalStateException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,35,import javax.jms.Message;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,36,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,37,import java.io.InputStream;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,38,import java.io.Serializable;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,39,import java.net.URL;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,40,import java.util.Collections;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,41,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,42,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,43,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,44,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,45,import org.apache.activemq.blob.BlobDownloader;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,46,
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,594,        executor.clearMessagesInProgress();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,595,        for (Iterator<ActiveMQMessageConsumer> iter = consumers.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,596,            ActiveMQMessageConsumer consumer = iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,597,            consumer.clearMessagesInProgress();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,393,        for (int i=0; i<4; i++) {
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,38,
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,43,        FTPClient ftp = new FTPClient();
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,45,"         ftp.connect(connectUrl, port);"
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,47,"         throw new JMSException(""Problem connecting the FTP-server"");"
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,49,
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,51,         ftp.quit();
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,58,
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,61,        InputStream input = ftp.retrieveFileStream(file);
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,62,        ftp.quit();
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,63,        ftp.disconnect();
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,64,
activemq-core/src/main/java/org/apache/activemq/blob/FTPBlobDownloadStrategy.java,67,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,30,import org.apache.commons.net.ftp.FTPClient;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,40,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,45, Mockery context = null;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,46, int ftpPort;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,47, String ftpUrl;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,48,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,49, protected void setUp() throws Exception {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,50,"     final File ftpHomeDirFile = new File(""target/FTPBlobTest/ftptest"");"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,51,  ftpHomeDirFile.mkdirs();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,52,  ftpHomeDirFile.getParentFile().deleteOnExit();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,54,  FtpServerFactory serverFactory = new FtpServerFactory();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,55,  ListenerFactory factory = new ListenerFactory();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,57,  PropertiesUserManagerFactory userManagerFactory = new PropertiesUserManagerFactory();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,58,  UserManager userManager = userManagerFactory.createUserManager();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,60,  BaseUser user = new BaseUser();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,64,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,67,  serverFactory.setUserManager(userManager);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,68,  factory.setPort(0);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,69,"  serverFactory.addListener(ftpServerListenerName, factory"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,70,    .createListener());
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,71,  server = serverFactory.createServer();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,72,  server.start();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,73,  ftpPort = serverFactory.getListener(ftpServerListenerName)
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,74,    .getPort();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,76,"  ftpUrl = ""ftp://"" + userNamePass + "":"" + userNamePass + ""@localhost:"""
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,77,"    + ftpPort + ""/ftptest/"";"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,79,"     File uploadFile = new File(ftpHomeDirFile, ""test.txt"");"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,80,     FileWriter wrt = new FileWriter(uploadFile);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,81,"     wrt.write(""hello world"");"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,82,     wrt.close();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,85,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,86, public void testDownload() {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,87,  ActiveMQBlobMessage message = new ActiveMQBlobMessage();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,88,  BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,89,  InputStream stream;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,90,  try {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,91,"   message.setURL(new URL(ftpUrl + ""test.txt""));"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,92,   stream = strategy.getInputStream(message);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,93,   int i = stream.read();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,94,   StringBuilder sb = new StringBuilder(10);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,95,   while(i != -1) {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,96,    sb.append((char)i);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,97,    i = stream.read();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,98,   }
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,99,"   Assert.assertEquals(""hello world"", sb.toString());"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,100,  } catch (Exception e) {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,101,   e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,102,   Assert.assertTrue(false);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,103,  }
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,104, }
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,105,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,106, public void testWrongAuthentification() {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,107,  ActiveMQBlobMessage message = new ActiveMQBlobMessage();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,108,  BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,109,  try {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,110,"   message.setURL(new URL(""ftp://"" + userNamePass + ""_wrong:"" + userNamePass + ""@localhost:"" + ftpPort + ""/ftptest/""));"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,111,   strategy.getInputStream(message);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,112,  } catch(JMSException e) {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,113,"   Assert.assertEquals(""Wrong Exception"", ""Cant Authentificate to FTP-Server"", e.getMessage());"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,114,   return;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,115,  } catch(Exception e) {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,116,   System.out.println(e);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,117,"   Assert.assertTrue(""Wrong Exception ""+ e, false);"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,118,   return;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,119,  }
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,120,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,121,"  Assert.assertTrue(""Expect Exception"", false);"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,122, }
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,123,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,124, public void testWrongFTPPort() {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,125,  ActiveMQBlobMessage message = new ActiveMQBlobMessage();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,126,  BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,127,  try {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,128,"   message.setURL(new URL(""ftp://"" + userNamePass + "":"" + userNamePass + ""@localhost:"" + 422 + ""/ftptest/""));"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,129,   strategy.getInputStream(message);
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,130,  } catch(JMSException e) {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,131,"   Assert.assertEquals(""Wrong Exception"", ""Problem connecting the FTP-server"", e.getMessage());"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,132,   return;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,133,  } catch(Exception e) {
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,134,   e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,135,"   Assert.assertTrue(""Wrong Exception ""+ e, false);"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,136,   return;
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,137,  }
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,138,
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,139,"  Assert.assertTrue(""Expect Exception"", false);"
activemq-core/src/test/java/org/apache/activemq/blob/FTPBlobDownloadStrategyTest.java,140, }
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,24,
activemq-core/src/test/java/org/apache/activemq/usecases/ThreeBrokerQueueNetworkTest.java,26,
activemq-core/src/test/java/org/apache/activemq/usecases/ThreeBrokerQueueNetworkTest.java,29,
activemq-core/src/test/java/org/apache/activemq/usecases/ThreeBrokerQueueNetworkTest.java,370,    public void testMigrateConsumerStuckMessages() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,509,"        if (!started.compareAndSet(true, false)) {"
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,198,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,200,        if( transport!=null ) {
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2183Test.java,32,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2183Test.java,33,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2183Test.java,82,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2183Test.java,114,        Connection connection = connectionFactory.createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2183Test.java,115,        connection.start();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,148,            size = text.length() * 2;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,881,"                sd.locationIndex.remove(tx, keys.location);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,149,     * @param maximumPendingMessageCount TODO
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,643,        // deal with delivered messages async to avoid lock contention with in pogress acks
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1109,                        // ignore duplicate
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1110,                        if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1111,"                            LOG.debug(getConsumerId() + "" ignoring(auto acking) duplicate: "" + md.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1113,                        acknowledge(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1129,            synchronized (deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1130,                if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1131,"                    LOG.debug(getConsumerId() + "" async clearing delivered list ("" + deliveredMessages.size() + "") on transport interrupt"");"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1132,                }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1134,                    deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1135,                    pendingAck = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,519,        return (acknowledgementMode == Session.SESSION_TRANSACTED) || (transactionContext.isInXATransaction());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1787,        return this.acknowledgementMode == Session.SESSION_TRANSACTED;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,238,        beforeEnd();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,273,        beforeEnd();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,471,                    // message which could create a problem for a pending ack
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,479,                    consumerSession1.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,497,        // getting 2 is indicative of a problem - proven with dangling message found after restart
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,503,"        assertNull(""should be nothing left for consumer1"", msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,506,        // consumer2 should get other message provided consumer1 did not get 2
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,509,        if (receivedMessages.size() == 1) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,510,"            assertNotNull(""got second message on consumer2"", msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,511,        }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,394,        for (int i=0; i<3; i++) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,396,                doTestFailoverConsumerAckLost();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,403,    public void doTestFailoverConsumerAckLost() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,459,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,468,                    TimeUnit.SECONDS.sleep(7);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,471,                    // but with failover and unordered connection restore it can get the second
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,472,                    // message which could create a problem for a pending ack and also invalidate
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,473,                    // the transaction in which the first was consumed and acked
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,484,"                        LOG.info(""got rollback ex on commit"", expectedSometimes);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,485,                        if (expectedSometimes instanceof TransactionRolledBackException && receivedMessages.size() == 2) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,509,        // getting 2 is indicative of orderiing issue. a problem if dangling message found after restart
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,513,        Message msg = consumer1.receive(2000);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,515,        if (receivedMessages.size() == 1) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,516,"            assertNull(""should be nothing left for consumer as recieve should have committed"", msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,517,        } else {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,522,        // consumer2 should get other message
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,523,        msg = consumer2.receive(5000);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,524,"        LOG.info(""post: from consumer2 received: "" + msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,525,"        assertNotNull(""got second message on consumer2"", msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,526,        consumerSession2.commit();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,89,"            LOG.error(regionDestination.getActiveMQDestination().getPhysicalName() + "" cursor got duplicate: "" + message);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,234,                        listener.recoverMessage(msg);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,235,                        lastMessageId.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,348,"                                        + "" WHERE CONTAINER=? AND ID > ? ORDER BY ID"";"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,745,        long id = 0;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,746,        List<Long> cleanupIds = new ArrayList<Long>();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,747,        int index = 0;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,757,                    id = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,758,                    if (this.lastRecoveredMessagesIds.contains(id)) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,759,                        // this message was already recovered
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,760,                        cleanupIds.add(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,761,                        continue;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,762,                    }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,765,                        this.lastRecoveredMessagesIds.add(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,773,                    id = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,774,                    if (this.lastRecoveredMessagesIds.contains(id)) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,775,                        // this message was already recovered
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,776,                        cleanupIds.add(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,777,                        continue;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,778,                    }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,781,                        this.lastRecoveredMessagesIds.add(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,788,            // not cleanup the list of recovered messages
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,789,            index = 0;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,790,            Iterator<Long> it = cleanupIds.iterator();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,791,            while (it.hasNext() && index < count) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,792,                this.lastRecoveredMessagesIds.remove(it.next());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,793,            }
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/NegativeQueueTest.java,158,            TextMessage msg = session.createTextMessage(formatter.format(new Date()));
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,61,"    private String xmlObject = ""<pojo>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,63,"            + ""  <city>Belgrade</city>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,66,"    private String xmlMap = ""<map>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,68,"        + ""    <string>name</string>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,70,"        + ""  </entry>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,71,"        + ""  <entry>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,73,"        + ""    <string>Belgrade</string>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,74,"        + ""  </entry>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,77,"    private String jsonObject = ""{\""pojo\"":{"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,79,"        + ""\""city\"":\""Belgrade\"""""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,82,"    private String jsonMap = ""{\""map\"":{"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,85,"        + ""{\""string\"":[\""city\"",\""Belgrade\""]}"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,86,"        + ""]"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,93,"            xmlMap = ""<map>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,94,"                + ""  <entry>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,96,"                + ""    <string>Belgrade</string>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,97,"                + ""  </entry>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,99,"                + ""    <string>name</string>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,101,"                + ""  </entry>\n"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,103,"            jsonMap = ""{\""map\"":{"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,105,"                + ""{\""string\"":[\""city\"",\""Belgrade\""]},"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,107,"                + ""]"""
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,136,     try {
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,137,         connection.close();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,138,         stompDisconnect();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,139,     } catch(Exception e) {
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,140,      // Some tests explicitly disconnect from stomp so can ignore
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,141,     } finally {
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,142,         broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,143,     }
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,473,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,475,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,557,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,563,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,564,"        assertTrue(f.startsWith(""ERROR""));"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,566,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,568,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,570,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,575,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,576,"        assertTrue(f.startsWith(""ERROR""));"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,577,        assertClients(1);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,578,    }
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,579,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,593,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,595,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,610,    }
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,611,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,627,"        assertEquals(""Hello World"", message.getText());"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,629,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,646,"        assertEquals(""Hello World"", message.getText());"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,648,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,657,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,666,    }
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,667,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,676,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,686,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,688,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,692,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,701,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,709,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,714,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,723,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,727,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,729,        stompConnection.sendFrame(frame);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,731,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,733,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,737,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,746,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,750,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,753,    }
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,754,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,869,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,878,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,882,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,884,        stompConnection.sendFrame(frame);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,886,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,888,     // get broker JMX view
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,889,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,892,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,893,"     BrokerViewMBean view = (BrokerViewMBean)broker.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,894,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,895,     // connect
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,902,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,908,         Thread.sleep(400);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,910,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,916,         Thread.sleep(400);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,918,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,921,     // connect
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,923,        stompConnection.sendFrame(frame);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,926,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,931,        stompConnection.sendFrame(frame);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,933,         Thread.sleep(400);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,937,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,938,    public void testMessageIdHeader() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,940,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,944,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,947,"        assertNull(stompMessage.getHeaders().get(""transaction""));"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,949,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,952,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,963,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,964,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,968,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,974,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,976,         StompFrame frame2 = stompConnection.receive(500);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,977,         if (frame2 != null) {
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,978,"          fail(""Should not have received the second message"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,979,         }
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,981,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,985,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,987,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,991,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,995,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,999,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1001,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1007,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1009,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1011,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1014,"     stompConnection.connect(""system"", ""manager"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1015,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1019,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1020,"     stompConnection.subscribe(""/queue/test1"", ""client"", headers);"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1021,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1022,"     stompConnection.begin(""ID:tx1"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1023,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1024,     headers.clear();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1025,"     headers.put(""receipt"", ""ID:msg1"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1026,"     stompConnection.send(""/queue/test2"", ""test message"", ""ID:tx1"", headers);"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1027,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1028,"     stompConnection.commit(""ID:tx1"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1029,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1030,     // make sure connection is active after commit
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1031,     Thread.sleep(1000);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1032,"     stompConnection.send(""/queue/test1"", ""another message"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1033,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1034,     StompFrame frame = stompConnection.receive(500);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1035,     System.out.println(frame);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1036,     assertNotNull(frame);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1037,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1038,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1039,     stompConnection.disconnect();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1041,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1049,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1059,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1074,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1075,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,33,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,35,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,36,     // Test mutual authentication on both stomp and standard ssl transports
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,37,"     bindAddress = ""stomp+ssl://localhost:61612"";"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,40,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,46,"        System.setProperty(""javax.net.ssl.keyStoreType"", ""jks"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,55,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,59,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,62,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,65,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompSslAuthTest.java,68,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1118,        TextMessage message = (TextMessage)consumer.receive(1000);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1138,        StompFrame message = stompConnection.receive(1000);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2247,"            while (!closed.get() && !transportFailed.get() && !transportInterruptionProcessingComplete.await(15, TimeUnit.SECONDS)) {"
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2271,"                        LOG.debug(""transportInterruptionProcessingComplete for: "" + this.getConnectionInfo().getConnectionId());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,231,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,986,                    // allow outstanding messages to get delivered again
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,987,                    removeFromDeliveredMessages(entry.getKey());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,993,            clearPreviouslyDelivered();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1005,    /*
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1006,     * called with deliveredMessages locked
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1007,     */
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1008,    private void removeFromDeliveredMessages(MessageId key) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1009,        ListIterator<MessageDispatch> iterator = deliveredMessages.listIterator(deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1010,        while (iterator.hasPrevious()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1011,            MessageDispatch candidate = iterator.previous();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1012,            if (key.equals(candidate.getMessage().getMessageId())) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1013,"                session.connection.rollbackDuplicate(this, candidate.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1014,                iterator.remove();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1015,                break;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1016,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1017,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1018,    }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1019,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1052,                clearPreviouslyDelivered();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1173,"                                LOG.debug(getConsumerId() + "" ignoring(auto acking) duplicate: "" + md.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1186,"                            ackLater(md, MessageAck.DELIVERED_ACK_TYPE);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1200,    // async (on next call) clear delivered as they will be auto-acked as duplicates if they arrive again
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1208,"                                LOG.debug(getConsumerId() + "" tracking delivered list ("" + deliveredMessages.size() + "") on transport interrupt"");"
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,296,            syncSendPacketWithInterruptionHandling(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,297,            if (localTransactionEventListener != null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,298,                localTransactionEventListener.commitEvent();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,300,            afterCommit();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,144,        Vector<Command> toIgnore = new Vector<Command>();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,150,            // ignore any empty (ack) transaction
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,151,            if (transactionState.getCommands().size() == 2) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,152,                Command lastCommand = transactionState.getCommands().get(1);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,157,"                            LOG.debug(""not replaying empty (ack) tx: "" + transactionState.getId());"
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,159,                        toIgnore.add(lastCommand);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,188,        for (Command command: toIgnore) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,190,            Response response = new Response();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,224,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,229,                stateTracker.transportInterrupted();
activemq-core/src/test/java/org/apache/activemq/broker/scheduler/JmsSchedulerTest.java,87,        long time = System.currentTimeMillis() + 1000;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,129,"        final Queue destination = producerSession.createQueue(QUEUE_NAME + ""?jms.consumer.prefetch="" + prefetch);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,169, @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,170, public void testFailoverConsumerOutstandingSendTx() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,203,"                + ""?jms.consumer.prefetch="" + prefetch);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,208,        final CountDownLatch messagesReceived = new CountDownLatch(2);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,209,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,214,"                LOG.info(""consume one and commit"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,215,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,221,                    e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,236,"        assertTrue(""consumer added through failover"", commitDoneLatch.await(20, TimeUnit.SECONDS));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,237,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,248,"        ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(""failover:("" + url + "")"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,303,"            TextMessage message = producerSession.createTextMessage(""Test message "" + i);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,19,import static org.junit.Assert.assertEquals;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,170,                    commitDoneLatch.countDown();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,171,"                    LOG.info(""done async commit"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,172,                } catch (Exception e) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,173,                    e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,288, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,289,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,290, @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,291, public void testFailoverConsumerCommitLost() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,292,     final int adapter = 0;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,293,     broker = createBroker(true);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,294,     setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,295,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,296,     broker.setPlugins(new BrokerPlugin[] {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,297,             new BrokerPluginSupport() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,298,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,299,                 @Override
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,300,"                 public void commitTransaction(ConnectionContext context,"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,301,"                         TransactionId xid, boolean onePhase) throws Exception {"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,302,"                     super.commitTransaction(context, xid, onePhase);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,303,                     // so commit will hang as if reply is lost
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,304,                     context.setDontSendReponse(true);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,305,                     Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,306,                         public void run() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,307,"                             LOG.info(""Stopping broker post commit..."");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,308,                             try {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,309,                                 broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,310,                             } catch (Exception e) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,311,                                 e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,312,                             }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,313,                         }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,314,                     });
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,315,                 }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,316,             }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,317,     });
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,318,     broker.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,319,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,320,"     ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(""failover:("" + url + "")"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,321,     Connection connection = cf.createConnection();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,322,     connection.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,323,"     final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,324,"     final Session consumerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,325,     Queue destination = producerSession.createQueue(QUEUE_NAME);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,326,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,327,     final MessageConsumer consumer = consumerSession.createConsumer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,328,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,329,"     produceMessage(producerSession, destination);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,330,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,331,     final Vector<Message> receivedMessages = new Vector<Message>();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,332,     final CountDownLatch commitDoneLatch = new CountDownLatch(1);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,333,     Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,334,         public void run() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,335,"             LOG.info(""doing async commit after consume..."");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,336,             try {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,337,                 Message msg = consumer.receive(20000);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,338,"                 LOG.info(""Got message: "" + msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,339,                 receivedMessages.add(msg);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,340,                 consumerSession.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,341,                 commitDoneLatch.countDown();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,342,"                 LOG.info(""done async commit"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,343,             } catch (Exception e) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,344,                 e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,345,             }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,346,         }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,347,     });
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,348,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,349,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,350,     // will be stopped by the plugin
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,351,     broker.waitUntilStopped();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,352,     broker = createBroker(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,353,     setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,354,     broker.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,355,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,356,"     assertTrue(""tx committed trough failover"", commitDoneLatch.await(30, TimeUnit.SECONDS));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,357,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,358,"     assertEquals(""we got a message"", 1, receivedMessages.size());"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,359,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,360,     // new transaction
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,361,     Message msg = consumer.receive(20000);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,362,"     LOG.info(""Received: "" + msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,363,"     assertNull(""we did not get a duplicate message"", msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,364,     consumerSession.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,365,     consumer.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,366,     connection.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,367,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,368,     // ensure no dangling messages with fresh broker etc
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,369,     broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,370,     broker.waitUntilStopped();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,371,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,372,"     LOG.info(""Checking for remaining/hung messages.."");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,373,     broker = createBroker(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,374,     setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,375,     broker.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,376,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,377,"     // after restart, ensure no dangling messages"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,378,"     cf = new ActiveMQConnectionFactory(""failover:("" + url + "")"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,379,     connection = cf.createConnection();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,380,     connection.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,381,"     Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,382,     MessageConsumer consumer2 = session2.createConsumer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,383,     msg = consumer2.receive(1000);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,384,     if (msg == null) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,385,         msg = consumer2.receive(5000);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,386,     }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,387,"     LOG.info(""Received: "" + msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,388,"     assertNull(""no messges left dangling but got: "" + msg, msg);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,389,     connection.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,391,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,89,            if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,90,"                LOG.debug(regionDestination.getActiveMQDestination().getPhysicalName() + "" cursor got duplicate: "" + message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,91,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,165,            if (lastCachedId != null && node.getMessageId().getBrokerSequenceId() < lastCachedId.getBrokerSequenceId()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,166,                lastCachedId = node.getMessageId();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,167,                setBatch(lastCachedId);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,168,            }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,234,                        if (listener.recoverMessage(msg)) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,235,                            lastMessageId.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,236,                        }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,348,"                                        + "" WHERE CONTAINER=? AND ID >= ? ORDER BY ID"";"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,178,                if ((seqNum % 500) == 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,43,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,44,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,45,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,46,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,47,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,48,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,49,import java.util.ListIterator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,50,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,51,import java.util.Map.Entry;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,52,import java.util.concurrent.ExecutorService;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,53,import java.util.concurrent.Executors;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,54,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,55,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,56,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,57,import javax.jms.IllegalStateException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,58,import javax.jms.InvalidDestinationException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,59,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,60,import javax.jms.Message;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,61,import javax.jms.MessageConsumer;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,62,import javax.jms.MessageListener;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,63,import javax.jms.TransactionRolledBackException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,116,"    private HashMap<MessageId, Boolean> previouslyDeliveredMessages;"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,146,    private boolean rollbackInitiated;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,561,                md = dequeue(-1); // We let the broker let us know when we
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,562,                // timeout.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,995,"                    LOG.info(""waiting for redelivery of "" + numberNotReplayed + "" to consumer :"" + this.getConsumerId());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1011,            if (rollbackInitiated) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1012,"                // second call from rollback, nothing more to do"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1013,                // REVISIT - should beforeEnd be called again by transaction context?
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1014,                rollbackInitiated = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1015,                return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1016,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1024,"                        LOG.debug(""previously delivered message has not been replayed in transaction, id: "" + entry.getKey());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1028,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1030,"                String message = ""rolling back transaction post failover recovery. "" + numberNotReplayed"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1033,                rollbackInitiated = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1034,                throw new TransactionRolledBackException(message);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1037,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1160,            rollbackInitiated = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1169,        ListIterator<MessageDispatch> iterator = deliveredMessages.listIterator(deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1170,        while (iterator.hasPrevious()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1171,            MessageDispatch candidate = iterator.previous();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1237,"                                    // existing transaction gone but still a duplicate!, lets mark as poison ftm,"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1238,                                    // possibly could allow redelivery..
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1243,"                                LOG.warn(""acking as poison, duplicate transacted delivery but no recovering transaction for: "" + md);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1274,"                                previouslyDeliveredMessages = new HashMap<MessageId, Boolean>();"
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,177,            for (int i = 0; i < size; i++) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,178,                synchronizations.get(i).beforeEnd();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,291,        // restart with out standing delivered message
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,294,"        // as failure depends on hash order, do a few times"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,295,        for (int i=0; i<4; i++) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,485,        // use empty jdbc store so that default wait for redeliveries will timeout after failover
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,491,        } catch (JMSException expectedRolledback) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,492,            assertTrue(expectedRolledback instanceof TransactionRolledBackException);
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,21,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,601,        public boolean checkQueueSize(String queueName) {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,91,    private final Journal journal;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,92,    private final PersistenceAdapter longTermPersistence;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,121,
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,122,        checkpointTask = taskRunnerFactory.createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,123,            public boolean iterate() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,124,                return doCheckpoint();
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,125,            }
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,126,"        }, ""ActiveMQ Journal Checkpoint Worker"");"
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,127,
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,130,
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,29,import org.springframework.beans.factory.DisposableBean;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,30,import org.springframework.beans.factory.InitializingBean;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,72,            addShutdownHook(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,73,                public void run() {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,74,                    if (applicationContext instanceof ConfigurableApplicationContext) {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,75,                     ((ConfigurableApplicationContext) applicationContext).close();
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,76,                    }
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,77,                    if (applicationContext instanceof OsgiBundleXmlApplicationContext){
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,78,                        try {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,79,                            ((OsgiBundleXmlApplicationContext)applicationContext).getBundle().stop();
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,80,                        } catch (BundleException e) {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,81,"                            LOG.info(""Error stopping OSGi bundle "" + e, e);"
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,82,                        }
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,83,                    }
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,84,
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,85,                }
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,86,            });
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,110,    public boolean isStart() {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,111,        return start;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,112,    }
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,124,     * Sets whether the broker should shutdown the ApplicationContext when the broker is stopped.
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,71,                host = data.getPath();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,221,"        name = ""set"" + name.substring(0, 1).toUpperCase() + name.substring(1);"
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,122,
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,134,        return new ActiveMQConfiguration();
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,151,            return new SingleConnectionFactory(answer);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,154,            return createPooledConnectionFactory(answer);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,811,        List<Message> l = new ArrayList<Message>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,812,"        doBrowse(l, getMaxBrowsePageSize());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,813,        return l.toArray(new Message[l.size()]);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,816,"    public void doBrowse(List<Message> l, int max) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,823,"                    addAll(pagedInPendingDispatch, l, max, toExpire);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,833,"                    addAll(pagedInMessages.values(), l, max, toExpire);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,845,                if (l.size() < getMaxBrowsePageSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,849,                            while (messages.hasNext() && l.size() < max) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,858,                                    if (l.contains(node.getMessage()) == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,859,                                        l.add(node.getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1447,                            node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1660,                            node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,387,                        MessageReference message = (MessageReference) matched
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,388,                                .next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,285,            message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PendingMessageCursor.java,111,     * @return the next pending message
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,410,"        executor = new ThreadPoolExecutor(10, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {"
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,29,    public static void track(String name) {
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,32,            t = trackers.get(name);
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,35,"                trackers.put(name, t);"
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,59,    public final int size;
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,62,        size = this.getStackTrace().length;
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,67,"class Tracker extends HashMap<Integer, Trace> {"
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,71,            Trace exist = get(current.size);
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,75,"                put(current.size, current);"
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/StoreBasedCursorTest.java,27,import javax.jms.ConnectionFactory;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/StoreBasedCursorTest.java,40,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/StoreBasedCursorTest.java,41,
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/StoreBasedCursorTest.java,45,    ConnectionFactory factory;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/StoreBasedCursorTest.java,50,    int memoryLimit = 5 * messageSize;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,127,        final DestinationStatistics view = this.getDestinationStatistics(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,168,        final DestinationStatistics dlqView = getDestinationStatistics(dlqDestination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,180,"        assertEquals(""memory usage is back to duck egg"", 0, this.getDestination(destination).getMemoryUsage().getPercentUsage());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,181,"        assertTrue(""memory usage is increased "", 0 < this.getDestination(dlqDestination).getMemoryUsage().getPercentUsage());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,246,        DestinationStatistics view = getDestinationStatistics(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,266,                DestinationStatistics view = getDestinationStatistics(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,278,        view = getDestinationStatistics(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,308,    private DestinationStatistics getDestinationStatistics(ActiveMQDestination destination) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,309,        DestinationStatistics result = null;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,310,        org.apache.activemq.broker.region.Destination dest = getDestination(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,311,        if (dest != null) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,312,            result = dest.getDestinationStatistics();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,313,        }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,314,        return result;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,315,    }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,317,    private org.apache.activemq.broker.region.Destination getDestination(ActiveMQDestination destination) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,318,        org.apache.activemq.broker.region.Destination result = null;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,319,        RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,320,        for (org.apache.activemq.broker.region.Destination dest : regionBroker.getQueueRegion().getDestinationMap().values()) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,321,            if (dest.getName().equals(destination.getPhysicalName())) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,322,                result = dest;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,323,                break;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,324,            }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,325,        }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,326,        return result;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,327,    }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,114,  final long sendCount = 2000;
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,353,"    public void isFull(ConnectionContext context,Destination destination,Usage usage) {"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,354,"        super.isFull(context,destination, usage);"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,355,        try {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,356,            ActiveMQTopic topic = AdvisorySupport.getFullAdvisoryTopic(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,357,            ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,358,"            advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME, usage.getName());"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,359,"            fireAdvisory(context, topic,null,null,advisoryMessage);"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,360,        } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,361,"            LOG.warn(""Failed to fire message is full advisory"");"
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,44,
activemq-web/src/main/java/org/apache/activemq/web/SessionFilter.java,42,        ((HttpServletRequest)request).getSession(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,287,"                    LOG.info(""Usage Manager memory limit reached for "" + getActiveMQDestination().getQualifiedName()"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,293,"                    throw new javax.jms.ResourceAllocationException(""Usage Manager memory limit reached. Stopping producer ("" + message.getProducerId() + "") to prevent flooding """
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,91,          //we are slow
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,127,                            list = matched.pageInList(pageInSize);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,481,
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,482,    /**
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,483,     * Get the list of inflight messages
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,484,     * @return the list
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,485,     */
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,486,    public synchronized List<MessageReference> getInFlightMessages(){
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,487,     List<MessageReference> result = new ArrayList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,488,        synchronized(matched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,489,            result.addAll(matched.pageInList(1000));
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,490,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,491,        return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,492,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PendingMessageCursor.java,214,     * Page in a restricted number of messages
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,170,            //override prefetch size if not set by the Consumer
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,171,            int prefetch=subscription.getConsumerInfo().getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,172,            if (prefetch == ActiveMQPrefetchPolicy.DEFAULT_TOPIC_PREFETCH){
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,173,                subscription.getConsumerInfo().setPrefetchSize(getTopicPrefetch());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,174,            }
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,179,        if (!initialized) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,180,            return 0;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,243,"            LOG.debug(""Memory usage change from: "" + oldPercentUsage + ""% of available memory, to: """
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,46,"        for (Entry<String, Tracker> t: trackers.entrySet()) {"
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,47,"            LOG.info(""Tracker: "" + t.getKey() + "", "" + t.getValue().size() + "" entry points..."");"
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,48,            for (Trace trace : t.getValue().values()) {
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,49,"                LOG.info(""count: "" + trace.count, trace);"
activemq-core/src/main/java/org/apache/activemq/util/ThreadTracker.java,51,"            LOG.info(""Tracker: "" + t.getKey() + "", done."");"
activemq-core/src/test/java/org/apache/activemq/broker/TopicSubscriptionTest.java,19,import javax.jms.JMSException;
activemq-core/src/test/java/org/apache/activemq/broker/TopicSubscriptionTest.java,20,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,160,"        produceMessage(producerSession, destination, prefetch * 2);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,248,"        produceMessage(producerSession, destination, prefetch * 2);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,22,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,182,        return list;
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,44,import org.apache.activemq.broker.region.policy.PendingMessageLimitStrategy;
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,47,import org.apache.activemq.broker.region.policy.PrefetchRatePendingMessageLimitStrategy;
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,53,import org.junit.Before;
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,66,    @Before
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,67,    public void setUp() throws Exception {
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,68,        broker = createBroker();
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,85,    public void testMessageEvictionMemoryUsage() throws Exception {
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,147,"        assertEquals(""usage goes to 0"", 0,"
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,148,"                TestSupport.getDestination(broker,"
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,149,                        ActiveMQDestination.transform(destination)).getMemoryUsage().getPercentUsage());
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,150,
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,153,    BrokerService createBroker() throws Exception {
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,171,        pendingMessageLimitStrategy.setLimit(500);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,312,"    public void messageDiscarded(ConnectionContext context, MessageReference messageReference) {"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,313,"        super.messageDiscarded(context, messageReference);"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,319,"                fireAdvisory(context, topic,payload);"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,406,"        advisoryMessage.setIntProperty(""consumerCount"", count);"
activemq-core/src/main/java/org/apache/activemq/broker/Broker.java,344,"    void messageDiscarded(ConnectionContext context, MessageReference messageReference);"
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,287,"    public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {"
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,288,"        next.messageDiscarded(context, messageReference);"
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,274,"    public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {"
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,289,"    public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {"
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,298,"    public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {"
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,299,"        getNext().messageDiscarded(context, messageReference);"
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,432,"    public void messageDiscarded(ConnectionContext context, MessageReference messageReference) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,434,"            broker.messageDiscarded(context, messageReference);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,181,"    void messageDiscarded(ConnectionContext context, MessageReference messageReference);"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,242,"    public void messageDiscarded(ConnectionContext context, MessageReference messageReference) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,243,"        next.messageDiscarded(context, messageReference);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,466,"            dest.messageDiscarded(getContext(), message);"
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,582,"    public void messageDiscarded(ConnectionContext context,"
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,592,"        super.messageDiscarded(context, messageReference);"
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,64,    protected int numMessages = 4000;
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,74,"        destination = session.createTopic(""verifyEvection"");"
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,86,        doTestMessageEvictionMemoryUsage(new FilePendingSubscriberMessageStoragePolicy());
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,91,        doTestMessageEvictionMemoryUsage(new VMPendingSubscriberMessageStoragePolicy());
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,94,    public void doTestMessageEvictionMemoryUsage(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception {
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,95,        setUp(pendingSubscriberPolicy);
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,150,"        assertTrue(""messages sending done"", sendDone.await(90, TimeUnit.SECONDS));"
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,207,        brokerService.setAdvisorySupport(false);
activemq-core/src/test/java/org/apache/activemq/MessageEvictionTest.java,208,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,64,        SelectorWorker worker = null;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,65,        if (freeWorkers.size() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,66,            worker = freeWorkers.getFirst();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,67,        } else {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,68,            worker = new SelectorWorker(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,69,            freeWorkers.addFirst(worker);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,71,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,72,"        SelectorSelection selection = new SelectorSelection(worker, socketChannel, listener);"
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,32,    private final SelectionKey key;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,36,"    public SelectorSelection(SelectorWorker worker, SocketChannel socketChannel, Listener listener) throws ClosedChannelException {"
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,39,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,40,        // Lock when mutating state of the selector
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,41,        worker.lock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,42,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,43,        try {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,44,"            this.key = socketChannel.register(worker.selector, 0, this);"
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,45,            worker.incrementUseCounter();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,46,        } finally {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,47,            worker.unlock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,48,        }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,56,        key.interestOps(interest);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,57,        worker.selector.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,61,        if (key.isValid()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,62,            key.interestOps(0);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,63,        }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,67,        worker.decrementUseCounter();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,68,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,69,        // Lock when mutating state of the selector
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,70,        worker.lock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,71,        try {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,72,            key.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,73,            if (!worker.isRunning()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,74,                worker.close();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,75,            }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,76,        } catch (IOException e) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,77,        } finally {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,78,            worker.unlock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,20,import java.nio.channels.ClosedSelectorException;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,26,import java.util.concurrent.locks.ReadWriteLock;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,27,import java.util.concurrent.locks.ReentrantReadWriteLock;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,36,    final AtomicInteger useCounter = new AtomicInteger();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,38,    private final ReadWriteLock selectorLock = new ReentrantReadWriteLock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,46,    void incrementUseCounter() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,47,        int use = useCounter.getAndIncrement();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,48,        if (use == 0) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,49,            manager.getSelectorExecutor().execute(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,50,        } else if (use + 1 == maxChannelsPerWorker) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,55,    void decrementUseCounter() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,56,        int use = useCounter.getAndDecrement();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,57,        if (use == 1) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,59,        } else if (use == maxChannelsPerWorker) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,64,    boolean isRunning() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,65,        return useCounter.get() != 0;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,73,            while (isRunning()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,74,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,75,                lockBarrier();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,82,                if (!isRunning()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,83,                    return;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,84,                }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,85,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,96,                        s.disable();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,119,        } catch (ClosedSelectorException cse) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,120,            // Don't accept any more selections
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,121,            manager.onWorkerEmptyEvent(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,122,        } catch (IOException e) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,123,            // Don't accept any more selections
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,124,            manager.onWorkerEmptyEvent(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,125,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,139,    private void lockBarrier() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,140,        selectorLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,141,        selectorLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,142, }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,143,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,144,    public void lock() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,145,        selectorLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,146,        selector.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,147,    }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,148,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,149, public void unlock() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,150,     selectorLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,151, }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,152,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,153,    public void close() throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,154,        selector.close();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,155,    }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,28,import java.util.regex.Matcher;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,29,import java.util.regex.Pattern;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,30,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,31,import org.apache.activemq.transport.stomp.Stomp.Headers.Subscribe;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,102,        freeWorkers.add(worker);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,56,        } else if (use < maxChannelsPerWorker) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,71,    private boolean processIoTasks() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,72,        boolean rc = false;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,76,                rc = true;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,82,        return rc;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,93,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,94,                if( processIoTasks() ) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,95,                    continue;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,96,                }
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,97,                int count = selector.select(10);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,137,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,138,        } catch (Throwable e) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,146,
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,48,"        ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {"
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,45,    private int maxChannelsPerWorker = 64;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,48,"        ThreadPoolExecutor rc = new ThreadPoolExecutor(0, 200, 1, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {"
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,103,            throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,204,"            persistentMode += ""Durable, subscriptionID="" + JMXSupport.encodeObjectNamePart(sub.getConsumerInfo().getSubscriptionName());"
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,201,        ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,80,        storeContent();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,82,        copy.object = null;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,404,            (masterConnector != null && masterConnector.isStoppedBeforeStart());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,392,"            throw new IllegalStateException(""Cannot prepare a transaction that had not been started: """
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,82,    private class RemoveTransactionAction implements Runnable {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,89,        public void run() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,475,            return TRACKED_RESPONSE_MARKER;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,23,    private Runnable runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,25,    public Tracked(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,26,        this.runnable = runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,29,    public void onResponses() {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,30,        if (runnable != null) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,31,            runnable.run();
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,32,            runnable = null;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,37,        return runnable != null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,158,                        ((Tracked) object).onResponses();
activemq-core/src/test/java/org/apache/activemq/ActiveMQXAConnectionFactoryTest.java,251,
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,341,                if (dest.isTopic()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,346,"                            LOG.debug(""Restoring durable subscription: "" + info);"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,348,"                            subscriptions.put(key, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,173,"                LOG.debug(""Restoring durable subscription: "" + infos);"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,91,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,680,                        // See if this consumer's brokerPath tells us it came from the broker at the other end
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,681,                        // of the bridge. I think we should be making this decision based on the message's
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,682,"                        // broker bread crumbs and not the consumer's? However, the message's broker bread"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,683,"                        // crumbs are null, which is another matter."
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,684,                        boolean cameFromRemote = false;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,685,                        Object consumerInfo = md.getMessage().getDataStructure();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,686,                        if (consumerInfo != null && (consumerInfo instanceof ConsumerInfo))
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,687,"                            cameFromRemote = contains(((ConsumerInfo) consumerInfo).getBrokerPath(), remoteBrokerInfo.getBrokerId());"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,688,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,693,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,695,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,700,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,702,                                // Don't send it off to the remote if it originally came from the remote.
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,703,                                if (!cameFromRemote) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,704,                                    remoteBroker.oneway(message);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,705,                                } else {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,706,                                    if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,707,"                                        LOG.debug(""Message not forwarded on to remote, because message came from remote"");"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,708,                                    }
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,709,                                }
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,710,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,716,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,718,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,733,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,734,                                        }
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,742,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,745,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1133,        // This works for now since we use a VM connection to the local broker.
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1134,        // may need to change if we ever subscribe to a remote broker.
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1135,        sub.getLocalInfo().setAdditionalPredicate(createNetworkBridgeFilter(info));
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,57,        ActiveMQDestination[] dests = durableDestinations;
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,99,"        String subscriberName = configuration.getBrokerName() + ""_"" + dest.getPhysicalName();"
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,58,            if (configuration.isDynamicOnly()) {
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,59,"                result = new ConduitBridge(configuration, localTransport, remoteTransport);"
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,60,            } else {
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,61,"                result = new DurableConduitBridge(configuration, localTransport, remoteTransport);"
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,62,            }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,47," private final static String QUEUE_NAME = ""testQ"";"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,58,        networkConnector.setDuplex(false);
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,61,
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,82,
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,84,          consSession.createConsumer(consSession.createQueue(QUEUE_NAME));
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,87,"        assertTrue(""got expected consumer count from mbean within time limit"", Wait.waitFor(new Wait.Condition() {"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,88,
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,89,            public boolean isSatisified() throws Exception {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,90,                boolean result = false;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,91,                MBeanServerConnection mbsc = getMBeanServerConnection();
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,92,                if (mbsc != null) {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,93,                    // We should have 1 consumer for the queue on the local broker
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,94,"                    Object consumers = getAttribute(mbsc, ""Queue"", ""Destination="" + QUEUE_NAME, ""ConsumerCount"");"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,95,                    if (consumers != null) {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,96,"                        LOG.info(""Consumers for "" + QUEUE_NAME + "" on "" + BROKER_NAME + "" : "" + consumers);"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,97,                        if (1L == ((Long)consumers).longValue()) {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,98,                            result = true;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,99,                        }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,100,                    }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,101,                }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,102,                return result;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,103,            }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,104,        }));
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,112,"        assertTrue(""got expected 0 count from mbean within time limit"", Wait.waitFor(new Wait.Condition() {"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,113,
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,114,            public boolean isSatisified() throws Exception {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,115,                boolean result = false;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,116,                MBeanServerConnection mbsc = getMBeanServerConnection();
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,117,                if (mbsc != null) {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,118,                    // We should have 1 consumer for the queue on the local broker
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,119,"                    Object consumers = getAttribute(mbsc, ""Queue"", ""Destination="" + QUEUE_NAME, ""ConsumerCount"");"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,120,                    if (consumers != null) {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,121,"                        LOG.info(""Consumers for "" + QUEUE_NAME + "" on "" + BROKER_NAME + "" : "" + consumers);"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,122,                        if (0L == ((Long)consumers).longValue()) {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,123,                            result = true;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,124,                        }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,125,                    }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,126,                }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,127,                return result;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,128,            }
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,129,        }));
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,174,"    private Object getAttribute(MBeanServerConnection mbsc, String type, String pattern, String attrName) throws Exception {"
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,177,"            obj = mbsc.getAttribute(getObjectName(BROKER_NAME, type, pattern), attrName);"
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,116,                peer.receiveCounter++;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,132,                    transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,152,
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,171,            // let the peer know that we are disconnecting..
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,172,            try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,173,                oneway(DISCONNECT);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,174,            } catch (Exception ignore) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,175,            }
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,209,        SERVERS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,210,        TransportConnector connector = CONNECTORS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,211,        if (connector != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,212,"            LOG.debug(""Shutting down VM connectors for broker: "" + host);"
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,213,            ServiceSupport.dispose(connector);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,214,            BrokerService broker = BROKERS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,215,            if (broker != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,216,                ServiceSupport.dispose(broker);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,217,            }
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,218,        }
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1076,        long nextTxId = readFile.readLong();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1077,        long expectedChecksum = readFile.readLong();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1078,        int pageCounter = readFile.readInt();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,658,    void clearMessagesInProgress() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,661,        synchronized (unconsumedMessages.getMutex()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,662,            if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,663,"                LOG.debug(getConsumerId() + "" clearing dispatched list ("" + unconsumedMessages.size() + "") on transport interrupt"");"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,664,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,665,            // ensure unconsumed are rolledback up front as they may get redelivered to another consumer
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,666,            List<MessageDispatch> list = unconsumedMessages.removeAll();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,667,            if (!this.info.isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,668,                for (MessageDispatch old : list) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,669,"                    session.connection.rollbackDuplicate(this, old.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,673,        // allow dispatch on this connection to resume
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,674,        session.connection.transportInterruptionProcessingComplete();
activemq-core/src/test/java/org/apache/activemq/transport/vm/VmTransportNetworkBrokerTest.java,57,"        assertTrue(""things are ok w.r.t.threads, threadCount="" + threadCount + "" threadCountAfterSleep="" + threadCountAfterSleep,"
activemq-core/src/test/java/org/apache/activemq/transport/vm/VmTransportNetworkBrokerTest.java,58,                threadCountAfterSleep < threadCount+2);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,260,                            } else if (context.isInTransaction()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,310,"                        prefetchExtension = Math.max(prefetchExtension, index + 1);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,86,    private int cursorMemoryHighWaterMark=70;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,198,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,696,  return this.cursorMemoryHighWaterMark;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,697, }
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,699, public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,700,  this.cursorMemoryHighWaterMark = cursorMemoryHighWaterMark;
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,23,import java.util.*;
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,29,
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,34,import org.apache.kahadb.util.*;
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,106,
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,168,"        Scheduler.executePeriodically(cleanupTask, DEFAULT_CLEANUP_INTERVAL);"
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,348,        Scheduler.cancel(cleanupTask);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,30," public static final Timer CLOCK_DAEMON = new Timer(""ActiveMQ Scheduler"", true);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,117,    private final ThreadPoolExecutor asyncConnectionThread;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,207,"        asyncConnectionThread = new ThreadPoolExecutor(1, 1, 5, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {"
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,209,"                Thread thread = new Thread(r, ""ActiveMQ Connection Worker: "" + transport);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,215,
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,216,        this.info = new ConnectionInfo(new ConnectionId(CONNECTION_ID_GENERATOR.generateId()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,659,                if (asyncConnectionThread != null){
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,660,                    asyncConnectionThread.shutdown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1722,                        asyncConnectionThread.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1782,                asyncConnectionThread.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1807,                asyncConnectionThread.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1822,   asyncConnectionThread.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,32,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,40,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,114,    protected static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,133,    private JMSConsumerStatsImpl stats;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,137,    private AtomicBoolean started = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,143,    private AtomicBoolean deliveryingAcknowledgements = new AtomicBoolean();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,155,    private long optimizeAckTimeout = 300;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,22,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,28,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,76,    private JMSProducerStatsImpl stats;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,78,    private long startTime;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,28,
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,56,
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,201,    protected static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,223,    private JMSSessionStatsImpl stats;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,254,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,81,import org.apache.activemq.store.amq.AMQPersistenceAdapterFactory;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,191,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,193,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,759,        if (persistenceFactory == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,760,            persistenceFactory = createPersistenceFactory();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,761,        }
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,956,        if (taskRunnerFactory == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,957,"            taskRunnerFactory = new TaskRunnerFactory(""BrokerService"", getTaskRunnerPriority(), true, 1000,"
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,960,        return taskRunnerFactory;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1772,"                    getTaskRunnerFactory(), getConsumerSystemUsage(), destinationFactory, destinationInterceptor);"
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1775,                    destinationInterceptor);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1853,            return getPersistenceFactory().createPersistenceAdapter();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1859,    protected AMQPersistenceAdapterFactory createPersistenceFactory() {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1860,        AMQPersistenceAdapterFactory factory = new AMQPersistenceAdapterFactory();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1861,        factory.setDataDirectory(getBrokerDataDirectory());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1862,        factory.setTaskRunnerFactory(getPersistenceTaskRunnerFactory());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1863,        factory.setBrokerName(getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1864,        return factory;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1865,    }
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1866,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2254,    }
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2255,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2256,
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,51,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,52,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,53,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,54,import java.util.Hashtable;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,55,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,56,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,57,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,58,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,59,import java.util.Map.Entry;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,60,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,61,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,62,import javax.management.InstanceNotFoundException;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,63,import javax.management.MalformedObjectNameException;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,64,import javax.management.ObjectName;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,65,import javax.management.openmbean.CompositeData;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,66,import javax.management.openmbean.CompositeDataSupport;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,67,import javax.management.openmbean.CompositeType;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,68,import javax.management.openmbean.OpenDataException;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,69,import javax.management.openmbean.TabularData;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,70,import javax.management.openmbean.TabularDataSupport;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,71,import javax.management.openmbean.TabularType;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,94,"                               DestinationFactory destinationFactory, DestinationInterceptor destinationInterceptor) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,95,"        super(brokerService, taskRunnerFactory, memoryManager, destinationFactory, destinationInterceptor);"
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,20,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,22,
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,134,                entry.configure(topic);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,26,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,29,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,58,    protected static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,73,    private CountDownLatch okForAckAsDispatchDone = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,529,"   public void add(ConnectionContext context, Destination destination) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,549,                  rc.add((QueueMessageReference)r);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,128,    private static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,103,                        DestinationInterceptor destinationInterceptor) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,234,                entry.configure(topic);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowConsumerStrategy.java,8,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowConsumerStrategy.java,27,    private static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowConsumerStrategy.java,28,    private AtomicBoolean taskStarted = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowConsumerStrategy.java,29,"    private Map<Subscription, SlowConsumerEntry> slowConsumers = new ConcurrentHashMap<Subscription, SlowConsumerEntry>();"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FixedCountSubscriptionRecoveryPolicy.java,21,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,93,        baseConfiguration(queue);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,115,    public void configure(Topic topic) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,116,        baseConfiguration(topic);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,122,            topic.setSubscriptionRecoveryPolicy(subscriptionRecoveryPolicy.copy());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,130,    public void baseConfiguration(BaseDestination destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,151,        destination.setSlowConsumerStrategy(getSlowConsumerStrategy());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/QueryBasedSubscriptionRecoveryPolicy.java,20,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/QueryBasedSubscriptionRecoveryPolicy.java,24,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/QueryBasedSubscriptionRecoveryPolicy.java,53,    private AtomicLong messageSequence = new AtomicLong(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/QueryBasedSubscriptionRecoveryPolicy.java,54,    private IdGenerator idGenerator = new IdGenerator();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/QueryBasedSubscriptionRecoveryPolicy.java,55,    private ProducerId producerId = createProducerId();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/TimedSubscriptionRecoveryPolicy.java,31,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/TimedSubscriptionRecoveryPolicy.java,45,    protected static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,38,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,78,    protected static Scheduler scheduler  = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,196,"        scheduler.executePeriodically(cleanupTask, DEFAULT_CLEANUP_INTERVAL);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,331,        scheduler.cancel(cleanupTask);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,379,            DataFile dataFile = (DataFile)fileMap.get(key);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,396,            DataFile dataFile = (DataFile)fileMap.get(key);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,417,            DataFile dataFile = (DataFile)fileMap.get(key);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,435,                DataFile dataFile = (DataFile)fileMap.get(key);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,33,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,61,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,88,    private static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,102,    private AMQTransactionStore transactionStore = new AMQTransactionStore(this);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,115,    private AtomicLong storeSize = new AtomicLong();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,127,"    private Map<AMQMessageStore,Map<Integer, AtomicInteger>> dataFilesInProgress = new ConcurrentHashMap<AMQMessageStore,Map<Integer, AtomicInteger>> ();"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,128,"    private String directoryPath = """";"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,168,                this.directoryPath=directory.getAbsolutePath();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,195,        if (taskRunnerFactory == null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,196,            taskRunnerFactory = createTaskRunnerFactory();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,197,        }
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,392,                Location mark = (Location)ms.getMark();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,400,                Location mark = (Location)ms.getMark();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,757,    protected TaskRunnerFactory createTaskRunnerFactory() {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,758,        return DefaultThreadPools.getDefaultTaskRunnerFactory();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,759,    }
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,760,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,20,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,38,    private TaskRunnerFactory taskRunnerFactory;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,125,        if (taskRunnerFactory == null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,126,"            taskRunnerFactory = new TaskRunnerFactory(""AMQPersistenceAdaptor Task"", journalThreadPriority,"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,127,"                                                      true, 1000, isUseDedicatedTaskRunner());"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,128,        }
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,34,
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,69,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,88,    protected static final Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,100,    private long checkpointInterval = 1000 * 60 * 5;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,106,    private JournalTransactionStore transactionStore = new JournalTransactionStore(this);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,113,    private AtomicBoolean started = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,270,"        scheduler.executePeriodically(periodicCheckpointTask, checkpointInterval / 10);"
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,281,        scheduler.cancel(periodicCheckpointTask);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,418,"        return ""KahaDBPersistenceAdapter"";"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,178,        super.doStart();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,179,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,330,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,85, private BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,248,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,279,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,280,         loadPageFile();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,281,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,388,         long start = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,389,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,401,"          LOG.info(""Replayed "" + redoCounter + "" operations from the journal in "" + ((end - start) / 1000.0f) + "" seconds."");"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,696,"    private void process(JournalCommand data, final Location location) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,735,"    private void process(final KahaAddMessageCommand command, final Location location) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,839,"    private void upadateIndex(Transaction tx, KahaAddMessageCommand command, Location location) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,873,"    private void updateIndex(Transaction tx, KahaRemoveMessageCommand command, Location ackLocation) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,905,"    private void updateIndex(Transaction tx, KahaRemoveDestinationCommand command, Location location) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,934,"    private void updateIndex(Transaction tx, KahaSubscriptionCommand command, Location location) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,964,"    private void checkpointUpdate(Transaction tx, boolean cleanup) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,965,
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,24," * Singelton, references maintained by users"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,27,public final class Scheduler {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,28,
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,29," private final Timer CLOCK_DAEMON = new Timer(""ActiveMQ Scheduler"", true);"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,30,"    private final HashMap<Runnable, TimerTask> TIMER_TASKS = new HashMap<Runnable, TimerTask>();"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,31,    private static Scheduler instance;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,32,
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,33,    static {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,34,        instance = new Scheduler();
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,35,    }
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,37,    private Scheduler() {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,38,    }
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,39,
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,40,    public static Scheduler getInstance() {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,41,        return instance;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,43,
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,44,"    public synchronized void executePeriodically(final Runnable task, long period) {"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,46,"        CLOCK_DAEMON.scheduleAtFixedRate(timerTask, period, period);"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,47,"        TIMER_TASKS.put(task, timerTask);"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,56,"        CLOCK_DAEMON.schedule(timerTask, period, period);"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,57,"        TIMER_TASKS.put(task, timerTask);"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,61,     TimerTask ticket = TIMER_TASKS.remove(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,64,            CLOCK_DAEMON.purge();//remove cancelled TimerTasks
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,68,"    public void executeAfterDelay(final Runnable task, long redeliveryDelay) {"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,70,"        CLOCK_DAEMON.schedule(timerTask, redeliveryDelay);"
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,74,        CLOCK_DAEMON.cancel();
activemq-core/src/main/java/org/apache/activemq/usage/SystemUsage.java,48,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,24,import java.util.concurrent.Executor;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,25,import java.util.concurrent.LinkedBlockingQueue;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,26,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,28,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,30,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,46,    private static ThreadPoolExecutor executor;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,56,    private List<T> children = new CopyOnWriteArrayList<T>();
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,59,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,60,    private AtomicBoolean started=new AtomicBoolean();
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,61,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,414,    protected Executor getExecutor() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,415,        return executor;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,417,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,418,    static {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,419,"        executor = new ThreadPoolExecutor(1, 10, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {"
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,420,            public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,421,"                Thread thread = new Thread(runnable, ""Usage Async Task"");"
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,422,                thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,423,                return thread;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,424,            }
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,425,        });
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,427,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,26,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,44,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,46,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,124,        private boolean shouldPublish = true;
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,173,
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,179,"                    new SimpleTopicSubscriber(CONNECTION_URL, System.currentTimeMillis() + ""-"" + id, TOPIC_NAME);"
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,29,import org.apache.activemq.thread.Scheduler;
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,52,                        Connection connection = fac.createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,74,                                Scheduler scheduler = Scheduler.getInstance();
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,75,                                scheduler.shutdown();
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,77,                                brokerService.stop();
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,78,                                Scheduler.getInstance().shutdown();
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,79,
activemq-core/src/test/java/org/apache/activemq/bugs/embedded/EmbeddedActiveMQ.java,93,                while (numTh > 1)
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkTest.java,21,
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,20,
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,33,
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,35,
activemq-core/src/test/java/org/apache/activemq/usage/MemoryUsageTest.java,23,
activemq-core/src/test/java/org/apache/activemq/usage/MemoryUsageTest.java,26,
activemq-core/src/test/java/org/apache/activemq/usage/MemoryUsageTest.java,69,        underTest = new MemoryUsage();
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,345,        sendSyncToSlave(message);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,75,import org.apache.activemq.thread.Scheduler;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,87,"    protected final Map<MessageId, StoreQueueTask> asyncQueueMap = new HashMap<MessageId, StoreQueueTask>();"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,98,    private Scheduler scheduler;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,99,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,101,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,200,    protected StoreQueueTask removeQueueTask(MessageId id) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,201,        StoreQueueTask task = this.asyncQueueMap.remove(id);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,209,    protected void addQueueTask(StoreQueueTask task) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,216,"        this.asyncQueueMap.put(task.getMessage().getMessageId(), task);"
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,305,                addQueueTask(result);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,315,                StoreQueueTask task = removeQueueTask(ack.getLastMessageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,337,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,918,                this.future.cancel(false);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,919,                return true;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,928,                    removeQueueTask(this.message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,747,                TransactionId key = key(command.getTransactionInfo());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,22,
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,24,
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,111,             synchronized(matchedListMutex){
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,112,              while (matched.isFull()){
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,113,                  if (getContext().getStopping().get()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,114,"                      LOG.warn(toString() + "": stopped waiting for space in pendingMessage cursor for: "" + node.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,115,                      enqueueCounter.decrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,116,                      return;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,117,                  }
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,118,                  if (!warnedAboutWait) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,119,"                      LOG.info(toString() + "": Pending message cursor [""+ matched + ""] is full, temp usage ("" + + matched.getSystemUsage().getTempUsage().getPercentUsage() + ""%) or memory usage ("" + matched.getSystemUsage().getMemoryUsage().getPercentUsage() + ""%) limit reached, blocking message add() pending the release of resources."");"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,120,                      warnedAboutWait = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,121,                  }
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,122,               matchedListMutex.wait(20);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,123,              }
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,124,              matched.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,125,             }
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,459,                        MessageReference message = (MessageReference) matched.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,550,        return (int)info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,36,public class AbstractPendingMessageCursor implements PendingMessageCursor {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,    public synchronized void addMessageLast(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,196,                        return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,205,                            return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,211,                systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,212,                ByteSequence bs = getByteSequence(node.getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,213,"                getDiskList().addLast(node.getMessageId().toString(), bs);"
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,230,
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,253,                    // We need to update the previous child's next pointer to skip over the child being removed....
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,254,                    if( idx > 0 && children.length > 1) {
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,255,"                        BTreeNode<Key, Value> previousChild = getChild(tx, idx-1);"
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,256,                        previousChild.next = child.next;
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,257,"                        index.storeNode(tx, previousChild, true);"
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,259,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,233,        return false;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,117,                   if (previousByte == 0 && b == 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,120,                   currentCommand.write(b);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,121,"                   // end of command reached, unmarshal"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,122,                   if (b == 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,123,                       Object command = wireFormat.unmarshal(new ByteSequence(currentCommand.toByteArray()));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,124,                       doConsume((Command)command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,125,                       currentCommand.reset();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,90,            String action = null;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,91,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,92,            // skip white space to next real action line
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,93,            while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,94,"                action = readLine(in, MAX_COMMAND_LENGTH, ""The maximum command length was exceeded"");"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,95,                if (action == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,96,"                    throw new IOException(""connection was closed"");"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,97,                } else {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,98,                    action = action.trim();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,99,                    if (action.length() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,100,                        break;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,101,                    }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,102,                }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,103,            }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,106,"            HashMap<String, String> headers = new HashMap<String, String>(25);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,107,            while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,108,"                String line = readLine(in, MAX_HEADER_LENGTH, ""The maximum header length was exceeded"");"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,109,                if (line != null && line.trim().length() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,110,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,111,                    if (headers.size() > MAX_HEADERS) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,112,"                        throw new ProtocolException(""The maximum number of headers was exceeded"", true);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,113,                    }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,114,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,115,                    try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,116,                        int seperatorIndex = line.indexOf(Stomp.Headers.SEPERATOR);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,117,"                        String name = line.substring(0, seperatorIndex).trim();"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,118,"                        String value = line.substring(seperatorIndex + 1, line.length()).trim();"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,119,"                        headers.put(name, value);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,120,                    } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,121,"                        throw new ProtocolException(""Unable to parser header line ["" + line + ""]"", true);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,122,                    }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,123,                } else {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,124,                    break;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,125,                }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,126,            }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,134,                int length;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,135,                try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,136,                    length = Integer.parseInt(contentLength.trim());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,137,                } catch (NumberFormatException e) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,138,"                    throw new ProtocolException(""Specified content-length is not a valid integer"", true);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,139,                }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,140,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,141,                if (length > MAX_DATA_LENGTH) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,142,"                    throw new ProtocolException(""The maximum data length was exceeded"", true);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,143,                }
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,49,            listener.recoverMessage(message);
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,50,            lastRecovered = message.getMessageId();
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,51,            count++;
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,52,            return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,111,                        listener.recoverMessage(msg);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,112,                        finalLast.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,113,                        finalPriority.set(msg.getPriority());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,114,                        return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,454,            s.setMaxRows(maxReturned);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,469,                    } else {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,470,                        break;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,477,                    } else {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,478,                        break;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,308,                            } else {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,309,                                break;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,801,                            listener.recoverMessage(loadMessage(entry.getValue().location));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,802,                            counter++;
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,50,    public JmsTopicSelectorTest() {
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,51,        super();
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,52,    }
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,53,
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,54,    public JmsTopicSelectorTest(String name) {
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,55,        super(name);
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,56,    }
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,57,
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,45,public class TestSupport extends TestCase {
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,49,
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,50,    public TestSupport() {
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,51,        super();
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,52,    }
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,53,
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,54,    public TestSupport(String name) {
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,55,        super(name);
activemq-core/src/test/java/org/apache/activemq/TestSupport.java,56,    }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,19,import static org.junit.Assert.assertEquals;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,20,import static org.junit.Assert.assertNotNull;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,21,import static org.junit.Assert.assertNull;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,22,import static org.junit.Assert.assertTrue;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,23,import static org.junit.Assert.fail;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,24,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,25,import java.io.File;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,26,import java.io.IOException;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,27,import java.net.URI;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,28,import java.util.Vector;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,29,import java.util.concurrent.CountDownLatch;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,30,import java.util.concurrent.Executors;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,31,import java.util.concurrent.TimeUnit;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,32,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,33,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,34,import javax.jms.Connection;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,35,import javax.jms.JMSException;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,36,import javax.jms.Message;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,37,import javax.jms.MessageConsumer;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,38,import javax.jms.MessageProducer;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,39,import javax.jms.Queue;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,40,import javax.jms.ServerSession;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,41,import javax.jms.ServerSessionPool;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,42,import javax.jms.Session;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,43,import javax.jms.TextMessage;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,44,import javax.jms.TransactionRolledBackException;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,45,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,57,import org.apache.activemq.store.amq.AMQPersistenceAdapter;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,58,import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,63,import org.junit.After;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,64,import org.junit.Test;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,68,public class FailoverTransactionTest {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,69,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,71," private static final String QUEUE_NAME = ""FailoverWithTx"";"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,72," private String url = ""tcp://localhost:61616"";"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,73, BrokerService broker;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,74,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,75, public void startCleanBroker() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,76,     startBroker(true);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,77, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,78,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,79, @After
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,80, public void stopBroker() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,81,     if (broker != null) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,82,         broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,83,     }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,84, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,85,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,86, public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,87,     broker = createBroker(deleteAllMessagesOnStartup);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,89, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,90,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,91, public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,92,     broker = new BrokerService();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,93,     broker.setUseJmx(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,94,     broker.setAdvisorySupport(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,95,     broker.addConnector(url);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,96,     broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,97,     return broker;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,98, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,99,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,100, @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,101, public void testFailoverProducerCloseBeforeTransaction() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,102,     startCleanBroker();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,103,"  ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(""failover:("" + url + "")"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,104,  Connection connection = cf.createConnection();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,105,  connection.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,106,"  Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,107,  Queue destination = session.createQueue(QUEUE_NAME);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,110,"  produceMessage(session, destination);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,111,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,112,  // restart to force failover and connection state recovery before the commit
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,113,  broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,114,  startBroker(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,115,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,116,  session.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,117,"  assertNotNull(""we got the message"", consumer.receive(20000));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,118,  session.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,119,  connection.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,120, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,121,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,122,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,123,    public void testFailoverCommitReplyLostAMQ() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,124,        doTestFailoverCommitReplyLost(0);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,125,    }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,126,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,127,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,128,    public void testFailoverCommitReplyLostJdbc() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,129,        doTestFailoverCommitReplyLost(1);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,131,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,132,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,133,    public void testFailoverCommitReplyLostKahaDB() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,134,        doTestFailoverCommitReplyLost(2);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,136,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,137,    public void doTestFailoverCommitReplyLost(final int adapter) throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,138,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,140,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,141,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,142,        broker.setPlugins(new BrokerPlugin[] {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,146,"                            TransactionId xid, boolean onePhase) throws Exception {"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,150,                        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,160,                   }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,164,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,173,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,176,        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,189,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,193,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,197,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,206,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,210,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,213,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,215,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,231,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,232,    //@Test not implemented
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,233,    public void testFailoverSendReplyLostAMQ() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,234,        doTestFailoverSendReplyLost(0);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,235,    }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,236,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,237,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,238,    public void testFailoverSendReplyLostJdbc() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,239,        doTestFailoverSendReplyLost(1);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,240,    }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,241,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,242,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,243,    public void testFailoverSendReplyLostKahaDB() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,244,        doTestFailoverSendReplyLost(2);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,246,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,247,    public void doTestFailoverSendReplyLost(final int adapter) throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,248,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,250,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,251,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,252,        broker.setPlugins(new BrokerPlugin[] {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,256,                            org.apache.activemq.command.Message messageSend)
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,261,                        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,275,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,285,        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,299,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,303,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,308,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,316,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,318,"        assertEquals(""no newly queued messages"", 0, ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().getEnqueues().getCount());"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,319,"        assertEquals(""1 dequeue"", 1, ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount());"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,320,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,324,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,327,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,329,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,345,    // not implemented.. @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,346,    public void testFailoverConnectionSendReplyLostAMQ() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,347,        doTestFailoverConnectionSendReplyLost(0);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,348,    }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,349,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,350,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,351,    public void testFailoverConnectionSendReplyLostJdbc() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,352,        doTestFailoverConnectionSendReplyLost(1);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,353,    }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,354,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,355,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,356,    public void testFailoverConnectionSendReplyLostKahaDB() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,357,        doTestFailoverConnectionSendReplyLost(2);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,359,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,360,    public void doTestFailoverConnectionSendReplyLost(final int adapter) throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,361,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,363,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,364,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,367,        broker.setPlugins(new BrokerPlugin[] {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,373,                            org.apache.activemq.command.Message messageSend)
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,379,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,381,                            Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,389,                                }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,396,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,399,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,409,        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,422,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,429,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,436,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,438,"        assertEquals(""one queued message"", 1, ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().getEnqueues().getCount());"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,439,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,443,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,446,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,448,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,463,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,464,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,465,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,466,    private void setPersistenceAdapter(int adapter) throws IOException {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,467,        switch (adapter) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,468,        case 0:
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,469,            broker.setPersistenceAdapter(new AMQPersistenceAdapter());
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,470,            break;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,471,        case 1:
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,472,            broker.setPersistenceAdapter(new JDBCPersistenceAdapter());
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,473,            break;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,474,        case 2:
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,475,            KahaDBPersistenceAdapter store = new KahaDBPersistenceAdapter();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,476,"            // duplicate checker not updated on canceled tasks, even it"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,477,"            // it was, reovery of the audit would fail as the message is"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,478,            // not recorded in the store and the audit may not be up to date.
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,479,"            // So if duplicate are a nono (w.r.t stats), this must be disabled"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,480,            store.setConcurrentStoreAndDispatchQueues(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,481,            store.setMaxFailoverProducersToTrack(10);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,482,"            store.setDirectory(new File(""target/activemq-data/kahadb/FailoverTransactionTest""));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,483,            broker.setPersistenceAdapter(store);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,484,            break;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,488, @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,489, public void testFailoverProducerCloseBeforeTransactionFailWhenDisabled() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,490,     startCleanBroker();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,491,"     ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(""failover:("" + url + "")?trackTransactionProducers=false"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,492,     Connection connection = cf.createConnection();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,493,     connection.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,494,"     Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,495,     Queue destination = session.createQueue(QUEUE_NAME);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,496,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,497,     MessageConsumer consumer = session.createConsumer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,498,"     produceMessage(session, destination);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,499,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,500,     // restart to force failover and connection state recovery before the commit
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,501,     broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,502,     startBroker(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,503,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,504,     session.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,505,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,506,"     // without tracking producers, message will not be replayed on recovery"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,507,"     assertNull(""we got the message"", consumer.receive(5000));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,508,     session.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,509,     connection.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,510, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,511,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,512, @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,513, public void testFailoverMultipleProducerCloseBeforeTransaction() throws Exception {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,514,     startCleanBroker();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,515,"     ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(""failover:("" + url + "")"");"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,516,     Connection connection = cf.createConnection();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,517,     connection.start();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,518,"     Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,519,     Queue destination = session.createQueue(QUEUE_NAME);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,520,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,521,     MessageConsumer consumer = session.createConsumer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,522,     MessageProducer producer;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,523,     TextMessage message;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,524,     final int count = 10;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,525,     for (int i=0; i<count; i++) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,526,         producer = session.createProducer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,527,"         message = session.createTextMessage(""Test message: "" + count);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,528,         producer.send(message);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,529,         producer.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,530,     }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,531,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,532,     // restart to force failover and connection state recovery before the commit
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,533,     broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,534,     startBroker(false);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,535,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,536,     session.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,537,     for (int i=0; i<count; i++) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,538,"         assertNotNull(""we got all the message: "" + count, consumer.receive(20000));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,539,     }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,540,     session.commit();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,541,     connection.close();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,542, }
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,543,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,544,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,547,        startCleanBroker();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,551,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,575,        for (int i=0; i<count; i++) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,576,            producer = session.createProducer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,581,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,585,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,587,        for (int i=0; i<count-1; i++) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,592,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,595,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,596,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,599,        for (int i=0; i<3; i++) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,607,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,609,        final int adapter = 0;
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,611,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,612,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,613,        broker.setPlugins(new BrokerPlugin[] {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,621,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,623,                        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,625,"                                LOG.info(""Stopping broker on ack: ""  + ack);"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,637,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,645,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,650,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,655,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,658,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,661,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,665,        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,672,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,675,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,679,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,689,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,701,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,710,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,711,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,715,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,719,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,721,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,731,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,741,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,742,        for (Connection c: connections) {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,745,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,749,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,752,        setPersistenceAdapter(adapter);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,754,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,770,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,781,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,783,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,786,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,790,        setPersistenceAdapter(1);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,792,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,798,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,799,        broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,802,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,807,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,808,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,820,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,827,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,831,        setPersistenceAdapter(1);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,836,        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,846,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,847,        broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,850,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,851,"        assertTrue(""commit was successfull"", commitDone.await(30, TimeUnit.SECONDS));"
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,852,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,857,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,858,    @Test
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,870,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,877,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,878,        broker.stop();
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,883,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,888,        Executors.newSingleThreadExecutor().execute(new Runnable() {
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,898,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,902,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,905,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,912,
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,918,        MessageProducer producer = producerSession.createProducer(destination);
activemq-core/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,923,
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,72,        return true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,99,    /**
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,100,     * This is called before transacted work is done by
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,101,     * the session.  XA Work can only be done when this
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,102,     * XA resource is associated with an Xid.
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,103,     *
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,104,     * @throws JMSException not associated with an Xid
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,107,
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,108,        if (!getTransactionContext().isInXATransaction()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,109,"            throw new JMSException(""Session's XAResource has not been enlisted in a distributed transaction."");"
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,110,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,111,
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,30,import org.apache.activemq.transport.TransportDisposedIOException;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,64,            parameters = URISupport.parseParamters(discoveryURI);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,330,"        Map<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));"
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2068,"            Map<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));"
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1204,"                HashMap<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));"
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,66,            CompositeData data = URISupport.parseComposite(discoveryURI);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,67,"            parameters = new HashMap<String, String>();"
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,68,            parameters.putAll(data.getParameters());
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,69,            for (URI uri : data.getComponents()) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,70,                parameters.putAll(URISupport.parseParamters(uri));
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,71,            }
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,139,"            Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));"
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,154,"            Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,49,            Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/rendezvous/RendezvousDiscoveryAgentFactory.java,33,            Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,72,"            final Map<String, String> brokerOptions = new HashMap<String, String>(URISupport.parseParamters(location));"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,74,"            Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,52,"            Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));"
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,56,"            Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));"
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,80,                options = URISupport.parseParamters(location);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,127,"    public static Map<String, String> parseParamters(URI uri) throws URISyntaxException {"
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,128,"        return uri.getQuery() == null ? emptyMap() : parseQuery(stripPrefix(uri.getQuery(), ""?""));"
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,134,"        Map<String, String> parameters = URISupport.parseParamters(discoveredServiceURI);"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/TcpFaultyTransportFactory.java,83,"            Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));"
activemq-core/src/test/java/org/apache/activemq/util/URISupportTest.java,59,        Map part1Params = URISupport.parseParamters(data.getComponents()[0]);
activemq-core/src/test/java/org/apache/activemq/util/URISupportTest.java,67,        Map map = URISupport.parseParamters(source);
activemq-core/src/test/java/org/apache/activemq/util/URISupportTest.java,99,"        assertEquals(""correct param count"", 2, URISupport.parseParamters(dest).size());"
activemq-optional/src/main/java/org/apache/activemq/transport/discovery/http/HTTPDiscoveryAgentFactory.java,34,            Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,128,        if (uri.getQuery() != null) {
activemq-core/src/main/java/org/apache/activemq/transport/FutureResponse.java,52,"            return responseSlot.poll(timeout, TimeUnit.MILLISECONDS);"
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,53,         // we should not take longer than 5 seconds to return from send
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,67,                      // Currently after the timeout producer just
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,68,                      // returns but there is no way to know that
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,69,                      // the send timed out
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,72,                 } catch (JMSException e) {
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,73,                     e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,74,                     if (e instanceof ResourceAllocationException) {
activemq-core/src/test/java/org/apache/activemq/bugs/JmsTimeoutTest.java,95,         broker.getSystemUsage().setSendFailIfNoSpaceAfterTimeout(5000);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,162,"            messages.put(message.getMessageId(), data);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584Test.java,60,"                        // PersistenceAdapterChoice.AMQ,"
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,29,"    private boolean writeObjectCalled, readObjectCalled, readObjectNoDataCalled;"
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,44,        writeObjectCalled = true;
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,45,        Thread.dumpStack();
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,50,        readObjectCalled = true;
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,51,        Thread.dumpStack();
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,56,        Thread.dumpStack();
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,57,        readObjectNoDataCalled = true;
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,60,    public boolean getWriteObjectCalled() {
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,61,        return writeObjectCalled;
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,64,    public boolean getReadObjectCalled() {
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,65,        return readObjectCalled;
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,68,    public boolean getReadObjectNoDataCalled() {
activemq-core/src/test/java/org/apache/activemq/usecases/MyObject.java,69,        return readObjectNoDataCalled;
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,42,    Connection connection;
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,43,    ActiveMQSession session;
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,44,    MessageProducer producer;
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,45,    MessageConsumer consumer;
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,46,"    public ActiveMQDestination destination = new ActiveMQQueue(""test"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,47,
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,48,    int numReceived = 0;
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,49,"    boolean writeObjectCalled, readObjectCalled, readObjectNoDataCalled;"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,64,
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,65,"  ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,66,        factory.setOptimizedMessageDispatch(true);
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,67,        factory.setObjectMessageSerializationDefered(true);
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,68,        factory.setCopyMessageOnSend(false);
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,71,  connection = factory.createConnection();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,72,"  session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,73,  producer = session.createProducer(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,75,  consumer = session.createConsumer(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,76,  connection.start();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,77,
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,80,"  Thread consumerThread = new Thread(""Consumer Thread"") {"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,83,                    ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,85,                        numReceived++;
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,91,     ex.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,95,
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,96,        consumerThread.start();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,97,
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,106,                    ex.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,110,
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,113,        consumerThread.join();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,115,        session.close();
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,117,"        assertFalse(""writeObject called"", obj.getWriteObjectCalled());"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,118,"        assertFalse(""readObject called"", obj.getReadObjectCalled());"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,119,"        assertFalse(""readObjectNoData called"", obj.getReadObjectNoDataCalled());"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,127,"        broker.addConnector(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java,135,  connection.stop();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,200,            localHostName = java.net.InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,618,                brokerName = java.net.InetAddress.getLocalHost().getHostName().toLowerCase();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,403,            String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,335,                result = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransport.java,343,        String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,19,import java.net.InetAddress;
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,54,                hostName = InetAddress.getLocalHost().getHostName();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,22,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,29,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,30,import junit.framework.Test;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,31,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,58,    final int minPercentUsageForStore = 10;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,64,        CountDownLatch redeliveryConsumerLatch = new CountDownLatch(((2*numMessages) *3) -1);
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,65,        CountDownLatch dlqConsumerLatch = new CountDownLatch((numMessages) -1);
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,68,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,75,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,79,"        LOG.info(""store percent usage: ""+brokerView.getStorePercentUsage());"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,80,"        //assertTrue(""some store in use"", broker.getAdminView().getStorePercentUsage() > minPercentUsageForStore);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,81,"        assertTrue(""redelivery consumer got all it needs"", redeliveryConsumerLatch.await(60, TimeUnit.SECONDS));"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,89,        // consumer some of the duplicates that arrived after the first ack
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,90,        closeDlqConsumer();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,91,        int numFiles = ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).getDirectory().list().length;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,93,"        assertTrue(""kahaDB dir should contain few db files,but definitely less than 10, is: "" + numFiles,10>numFiles);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,94,  }
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,95,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,101,"        final Session session = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,107,                    session.recover();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,111,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,115,"        session.createDurableSubscriber(topic, ""subName1"").setMessageListener(listener);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,116,"        session.createDurableSubscriber(topic, ""subName2"").setMessageListener(listener);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,117,"        session.createDurableSubscriber(topic, ""subName3"").setMessageListener(listener);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,119,    private void openDlqConsumer(final CountDownLatch received)throws Exception{
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,120,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,121,     dlqConnection  = (ActiveMQConnection) createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,122,"     Session dlqSession = dlqConnection .createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,123,"     MessageConsumer dlqConsumer = dlqSession.createConsumer(new ActiveMQQueue(""ActiveMQ.DLQ""));"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,124,     dlqConsumer.setMessageListener(new MessageListener() {
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,125,          public void onMessage(Message message) {
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,126,              if (received.getCount() % 200 == 0) {
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,127,"                  LOG.info(""remaining on DLQ: "" + received.getCount());"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,128,              }
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,129,              received.countDown();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,130,          }
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,131,     });
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,132,     dlqConnection.start();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,133,    }
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,134,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,135,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,137,        if (consumerConnection != null)
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,139,        consumerConnection = null;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,141,    private void closeDlqConsumer() throws JMSException {
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,142,        if (dlqConnection != null)
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,143,         dlqConnection.close();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,144,        dlqConnection = null;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,174,        KahaDBPersistenceAdapter persistenceAdapter=new KahaDBPersistenceAdapter();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,175,        persistenceAdapter.setEnableJournalDiskSyncs(false);
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,176,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,177,        broker.setPersistenceAdapter(persistenceAdapter);
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,190,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,835,"             LOG.debug(""Expired message with no DLQ strategy in place"");"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2584ConcurrentDlqTest.java,227,"        properties.put(""concurrentStoreAndDispatchQueues"", ""false"");"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,673,     * so a more restrictive and expensive option may be needed like TRANSACTION_REPEATABE_READ
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,96,"                ""ALTER TABLE "" + getFullAckTableName() + "" ADD PRIORITY "" + sequenceDataType,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,210,"                                      + "" WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?"";"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,218,"                                          + getFullAckTableName() + "" WHERE CONTAINER=?"";"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,225,"            updateLastAckOfDurableSubStatement = ""UPDATE "" + getFullAckTableName() + "" SET LAST_ACKED_ID=?, PRIORITY=?"""
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,226,"                                                 + "" WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?"";"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,267,"                                              + ""((M.ID > ? AND M.PRIORITY = ?) OR M.PRIORITY < ?)"""
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,309,"                                                     + "" WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"""
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,310,"                                                     + "" AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID AND M.PRIORITY <= D.PRIORITY"";"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,341,"                                         + ""   ( SELECT min("" + getFullAckTableName() + "".LAST_ACKED_ID)"""
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,342,"                                         + ""      FROM "" + getFullAckTableName() + "" WHERE """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,344,"                                         +          getFullMessageTableName() + "".CONTAINER )"""
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,345,"                                         + ""   AND PRIORITY >= """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,346,"                                         + ""   ( SELECT min("" + getFullAckTableName() + "".PRIORITY) """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,347,"                                         + ""     FROM "" + getFullAckTableName() + "" WHERE """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,349,"                                         + getFullMessageTableName() + "".CONTAINER ))"";"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,396,"            s.setLong(2, prio);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,397,"            s.setString(3, destination.getQualifiedName());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,398,"            s.setString(4, clientId);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,399,"            s.setString(5, subscriptionName);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,403,"                throw new SQLException(""Failed add a message"");"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,660,            rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,661,            s.close();
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,52,    public boolean useCache;
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,53,    public boolean dispatchAsync = false;
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,69,        policy.setPrioritizedMessages(true);
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,90,        sess.close();
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,91,        conn.close();
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,92,
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,93,        broker.stop();
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,94,        broker.waitUntilStopped();
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,167,"        final String text = ""Message with priority "" + priority;"
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,202,"        addCombinationValues(""dispatchAsync"", new Object[] {Boolean.TRUE, Boolean.FALSE});"
activemq-core/src/test/java/org/apache/activemq/store/MessagePriorityTest.java,224,            Message msg = sub.receive(30000);
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCMessagePriorityTest.java,43,        jdbc.setCleanupPeriod(1000);
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCMessagePriorityTest.java,77,            Message msg = sub.receive(30000);
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCMessagePriorityTest.java,78,"            LOG.debug(""received i="" + i + "", m="" + (msg!=null? msg.getJMSMessageID() : null));"
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionSelectorTest.java,36,abstract public class DurableSubscriptionSelectorTest extends org.apache.activemq.TestSupport {
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionSelectorTest.java,133,        broker.setPersistenceAdapter(createPersistenceAdapter());
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionSelectorTest.java,143,    abstract public PersistenceAdapter createPersistenceAdapter() throws Exception;
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionSelectorTest.java,144,
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,337,        // if ((flags & TMJOIN) == TMJOIN) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,338,        // // TODO: verify that the server has seen the xid
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,339,        // }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,340,        // if ((flags & TMJOIN) == TMRESUME) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,341,        // // TODO: verify that the xid was suspended.
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,342,        // }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,167,         synchronizations = null;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,337,"        String txSuspendResumeNotSupportMsg = ""The suspend/resume of a transaction """
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,338,"         + ""is not supported. Instead it is recommended that a new JMS session be created."";"
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,339,
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,340,        if ((flags & TMJOIN) == TMJOIN) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,341,         throw new XAException(txSuspendResumeNotSupportMsg);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,343,        }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,344,        if ((flags & TMRESUME) == TMRESUME) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,345,         throw new XAException(txSuspendResumeNotSupportMsg);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,346,        // TODO: verify that the xid was suspended.
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,347,        }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,708,     try {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,709,   return this.connection.syncSendPacket(command);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,710,  } catch (JMSException e) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,711,   if (e.getLinkedException() instanceof InterruptedIOException) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,712,    try {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,713,     Thread.interrupted();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,714,     return this.connection.syncSendPacket(command);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,715,    } finally {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,716,     Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,717,    }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,718,   }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,719,
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,720,   throw e;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,721,  }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,320,
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,353,"                        // If the user manager is not full, then the task will"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,354,                        // not
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,355,                        // get called..
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,356,                        if (!memoryUsage.notifyCallbackWhenNotFull(sendMessagesWaitingForSpaceTask)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,357,                            // so call it directly here.
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,358,                            sendMessagesWaitingForSpaceTask.run();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,359,                        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1704,"            //Set the ""JMS"" header fields on the orriginal message, see 1.1 spec section 3.4.11"
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1705,            message.setJMSDestination(destination);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1731,
activemq-core/src/test/java/org/apache/activemq/JMSMessageTest.java,50,    public int deliveryMode;
activemq-core/src/test/java/org/apache/activemq/JMSMessageTest.java,53,    public byte destinationType;
activemq-core/src/test/java/org/apache/activemq/JMSMessageTest.java,55,    public String connectURL;
activemq-core/src/test/java/org/apache/activemq/JMSMessageTest.java,477,"            assertEquals(destination, message.getJMSDestination());"
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,91,        return transactionId != null && transactionId.isXATransaction();
activemq-core/src/test/java/org/apache/activemq/store/jdbc/JDBCXACommitExceptionTest.java,111,"                    LOG.debug(""Rolling back transaction (just in case, no need to do this as it is implicit in a commit failure) "" + tid);"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,604,
activemq-core/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,309,"                rc.put(BODY_PREVIEW, new byte[] {});"
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,103,                connectUri = URISupport.removeQuery(connectUri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,104,"                connectUri = URISupport.applyParameters(connectUri, parameters);"
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,30, * processes but that no one task overtakes the system. This is kina like
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,92,"            new Thread(runnable, name).start();"
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,99,"                Thread thread = new Thread(runnable, name);"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransport.java,78,"                uri = URISupport.applyParameters(uri, parameters);"
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,144,                    result = true;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,134,            for (URI component : data.getComponents()) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,135,"                parameters.putAll(component.getQuery() == null ? emptyMap() : parseQuery(stripPrefix(component.getQuery(), ""?"")));"
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,136,            }
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,137,            if (parameters.isEmpty())
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,148,                if (newQuery.length()!=0) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,149,                    newQuery.append('&');
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,151,                newQuery.append(param.getKey()).append('=').append(param.getValue());
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,222,     * @param p
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,272,     * @param componentString
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,63,
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,64,        Map map = URISupport.parseParameters(config);
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,65,        if (!map.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,66,"            IntrospectionSupport.setProperties(this, map);"
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,67,            config = URISupport.removeQuery(config);
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,68,        }
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,51,
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,54,        broker.setUseJmx(true);
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,66,"            builder.append("")?randomize=false)"");"
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,67,            broker.addNetworkConnector(builder.toString());
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,71,
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,153,"        LOG.info(""Creating Consumer on the networked brokerA ..."");"
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,157,        ConnectionFactory consFactory = createConnectionFactory(brokerA);
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,164,"        LOG.info(""publishing to brokerB"");"
activemq-core/src/test/java/org/apache/activemq/network/FailoverStaticNetworkTest.java,166,"        sendMessageTo(destination, brokerB);"
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,108,"                "")?useExponentialBackOff=false&maxReconnectAttempts=2&reconnectDelay="" + initialReconnectDelay;"
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,124,"        final URI uri = new URI(""discovery:(multicast://default)?initialReconnectDelay=100&"" + extraParameterName + ""="" + extraParameterValue);"
activemq-core/src/test/java/org/apache/activemq/util/URISupportTest.java,106,"        URI uri = new URI(""static:(http://localhost:61617?proxyHost=localhost&proxyPort=80)"");"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,73,"    private final String shutdownMutex = ""shutdownMutex"";"
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,46, *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,125,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,154,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,163,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,221,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,423,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,440,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,452,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,465,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,477,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,492,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,504,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,588,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,606,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,626,
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,38, *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,83,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,90,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,143,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,150,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,159,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,167,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,176,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,179,     * @param sub
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,185,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,193,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,201,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,212,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,217,
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,37, *
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,38, *
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,110,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,140,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,75, *
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,76, *
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,235,             if (context.isFaultTolerant() || context.isNetworkConnection()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,236,              //remove the old connection
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,237,              try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,238,"               removeConnection(oldContext, info, new Exception(""remove stale client""));"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,239,              }catch(Exception e){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,240,"               LOG.warn(""Failed to remove stale connection "",e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,241,              }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,242,             }else{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,245,             }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,499,                || (producerExchange.getRegion() != null && producerExchange.getRegion().getDestinationMap().get(message.getDestination()) == null)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,796,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,800,            long expiration=message.getExpiration();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,807,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,815,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,818,"         MessageReference node, Subscription subscription){"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,819,  try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,820,   if(node!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,821,    Message message=node.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,822,    if(message!=null && node.getRegionDestination()!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,823,     DeadLetterStrategy deadLetterStrategy=node
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,824,             .getRegionDestination().getDeadLetterStrategy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,825,     if(deadLetterStrategy!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,826,      if(deadLetterStrategy.isSendToDeadLetterQueue(message)){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,827,          // message may be inflight to other subscriptions so do not modify
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,828,          message = message.copy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,829,          stampAsExpired(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,830,          message.setExpiration(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,831,          if(!message.isPersistent()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,832,           message.setPersistent(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,833,"           message.setProperty(""originalDeliveryMode"","
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,834,"                ""NON_PERSISTENT"");"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,835,       }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,836,       // The original destination and transaction id do
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,837,"       // not get filled when the message is first sent,"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,838,       // it is only populated if the message is routed to
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,839,       // another destination like the DLQ
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,840,       ActiveMQDestination deadLetterDestination=deadLetterStrategy
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,841,"               .getDeadLetterQueueFor(message, subscription);"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,842,       if (context.getBroker()==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,843,        context.setBroker(getRoot());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,844,       }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,845,"       BrokerSupport.resendNoCopy(context,message,"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,846,               deadLetterDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,847,      }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,848,     } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,849,         if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,850,"             LOG.debug(""Dead Letter message with no DLQ strategy in place, message id: """
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,852,         }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,853,     }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,854,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,855,   }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,856,  }catch(Exception e){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,857,"   LOG.warn(""Caught an exception sending to DLQ: ""+node,e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,858,  }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,859, }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,870,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,880,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,881,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,886,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,890,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,902,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,906,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,910,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,915,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,933,
activemq-core/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java,35, *
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,37,    private ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,43,            if (audit.isDuplicate(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,27, *
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,28, *
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,50,
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,62,"        addStatistic(""expired"", expired);"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,77,
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,89,
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,49, *
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,182,            out.close();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,2, * Licensed to the Apache Software Foundation (ASF) under one or more
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,53, *
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,55, *
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,141,     *
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,165,     *
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,252,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,265,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,297,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,399,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,428,     *
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,536,                //closing the socket can hang also
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,538,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,540,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,545,"                            LOG.debug(""Caught exception closing socket"",e);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,546,                        }finally {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,550,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,552,"                latch.await(1,TimeUnit.SECONDS);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,553,            }else {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,560,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,629,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,639,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,643,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,517,                || (producerExchange.getRegion() != null && producerExchange.getRegion().getDestinationMap().get(message.getDestination()) == null)
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,214,                thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,51,"    private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {""ConnectionFactory"", ""QueueConnectionFactory"", ""TopicConnectionFactory""};"
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,43,"        return load(classDesc.getName(), cl);"
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,"                return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);"
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,65,"    private Class<?> load(String className, ClassLoader cl) throws ClassNotFoundException {"
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,66,        try {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,67,"            return Class.forName(className, false, cl);"
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,68,        } catch (ClassNotFoundException e) {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,69,            final Class<?> clazz = (Class<?>) primClasses.get(className);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,70,            if (clazz != null) {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,71,                return clazz;
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,72,            } else {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,73,"                return Class.forName(className, false, FALLBACK_CLASS_LOADER);"
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,35,    private javax.xml.xpath.XPathExpression expression;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,17,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,25,import javax.xml.parsers.DocumentBuilder;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,26,import javax.xml.parsers.DocumentBuilderFactory;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,27,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,28,import org.w3c.dom.Document;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,29,import org.w3c.dom.traversal.NodeIterator;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,30,import org.xml.sax.InputSource;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,34,import org.apache.xpath.CachedXPathAPI;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,35,import org.apache.xpath.objects.XObject;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,40,    private final String xpath;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,42,    public XalanXPathEvaluator(String xpath) {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,43,        this.xpath = xpath;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,46,    public boolean evaluate(Message m) throws JMSException {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,47,        if (m instanceof TextMessage) {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,48,            String text = ((TextMessage)m).getText();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,50,        } else if (m instanceof BytesMessage) {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,51,            BytesMessage bm = (BytesMessage)m;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,61,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,63,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,64,            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,65,            factory.setNamespaceAware(true);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,66,            DocumentBuilder dbuilder = factory.newDocumentBuilder();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,67,            Document doc = dbuilder.parse(inputSource);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,68,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,69,            CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,70,"            XObject result = cachedXPathAPI.eval(doc, xpath);"
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,71,            if (result.bool())
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,72,             return true;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,73,            else {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,74,"             NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);"
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,75,             return (iterator.nextNode() != null);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,76,            }
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,77,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,78,        } catch (Throwable e) {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,86,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,87,            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,88,            factory.setNamespaceAware(true);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,89,            DocumentBuilder dbuilder = factory.newDocumentBuilder();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,90,            Document doc = dbuilder.parse(inputSource);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,91,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,92,            //An XPath expression could return a true or false value instead of a node.
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,93,            //eval() is a better way to determine the boolean value of the exp.
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,94,"            //For compliance with legacy behavior where selecting an empty node returns true,"
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,95,            //selectNodeIterator is attempted in case of a failure.
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,96,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,97,            CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,98,"            XObject result = cachedXPathAPI.eval(doc, xpath);"
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,99,            if (result.bool())
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,100,             return true;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,101,            else {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,102,"             NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);"
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,103,             return (iterator.nextNode() != null);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,104,            }
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,105,
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,106,        } catch (Throwable e) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,237,                            // contract prefetch if dispatch required a pull
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,238,                            if (getPrefetchSize() == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,239,                                // Protect extension update against parallel updates.
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,240,                                while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,241,                                    int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,242,"                                    int newExtension = Math.max(0, currentExtension - index);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,243,"                                    if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,244,                                        break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,245,                                    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,246,                                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,247,                            } else if (usePrefetchExtension && context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,248,                                // extend prefetch window only if not a pulling consumer
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,249,                                while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,250,                                    int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,251,"                                    int newExtension = Math.max(currentExtension, index);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,252,"                                    if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,253,                                        break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,254,                                    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,255,                                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,256,                            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,286,                        // Protect extension update against parallel updates.
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,287,                        while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,288,                            int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,289,"                            int newExtension = Math.max(0, currentExtension - 1);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,290,"                            if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,291,                                break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,316,                        if (usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,519,        return dispatched.size() - prefetchExtension.get() >= info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,540,        return info.getPrefetchSize() + prefetchExtension.get() - dispatched.size();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,699,        // No reentrant lock - Patch needed to IndirectMessageReference on method lock
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,701,        // NULL messages don't count... they don't get Acked.
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,705,        } else {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,176,    private boolean messagePrioritySupported = true;
activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java,177,"        Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);"
activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java,224,        // this call should return the next message (Msg5) still left on the queue
activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java,228,        // Now using other consumer
activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java,229,        // this call should return the next message (Msg5) still left on the queue
activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java,255,"        Session session = connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,632,        // Store the interrupted state and clear so that cleanup happens without
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,633,        // leaking connection resources.  Reset in finally to preserve state.
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,634,        boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,635,
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,637,
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,725,            if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,726,                Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,727,            }
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,729,        // Store interrupted state and clear so that Transport operations don't
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,730,        // throw InterruptedException and we ensure that resources are cleaned up.
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,731,        boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,737,        if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,738,            Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,739,        }
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,663,        boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,668,        if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,669,            Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,670,        }
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,19,import java.io.InterruptedIOException;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,38,import org.apache.activemq.command.Response;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,333,                syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,406,
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,407,            // TODO: we may want to put the xid in a suspended list.
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,408,            try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,409,                beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,410,            } catch (JMSException e) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,411,                throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,412,            } finally {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,413,                setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,414,            }
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,419,                try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,420,                    beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,421,                } catch (JMSException e) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,422,                    throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,423,                } finally {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,424,                    setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,425,                }
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,468,            IntegerResponse response = (IntegerResponse)syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,537,            syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,584,            syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,646,            syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,744,                    syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,776,    /**
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,777,"     * Sends the given command. Also sends the command in case of interruption,"
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,778,     * so that important commands like rollback and commit are never interrupted.
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,779,"     * If interruption occurred, set the interruption state of the current"
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,780,     * after performing the action again.
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,781,     *
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,782,     * @return the response
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,783,     */
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,784,    private Response syncSendPacketWithInterruptionHandling(Command command) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,785,        try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,786,            return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,787,        } catch (JMSException e) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,788,            if (e.getLinkedException() instanceof InterruptedIOException) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,789,                try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,790,                    Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,791,                    return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,792,                } finally {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,793,                    Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,794,                }
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,795,            }
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,796,
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,797,            throw e;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,798,        }
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,799,    }
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,800,
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,42,            Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,43,            if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,44,"                LOG.debug(""Operation interupted: "" + e, e);"
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,46,"            throw new InterruptedIOException(""Interrupted."");"
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,58,"            throw new InterruptedIOException(""Interrupted."");"
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,67,        FutureResponse future = new FutureResponse(responseCallback);
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,125,        dispose(error);
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,97,"            if (!readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {"
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,101,            Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,102,            throw new InterruptedIOException();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,133,    public FailoverTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,160,    public FanoutTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/util/ThreadPoolUtils.java,127,                    executorService.shutdownNow();
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,321,        assertTrue(Wait.waitFor(new Wait.Condition() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,71,    public boolean getTransacted() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,72,        checkClosed();
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,73,        return getTransactionContext().isInXATransaction();
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,74,    }
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,75,
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,102,    /*
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,103,     * when there is no XA transaction it is auto ack
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,104,     */
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,105,    public boolean isAutoAcknowledge() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,106,      return true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,107,    }
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,108,
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,110,        // allow non transactional auto ack work on an XASession
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,111,        // Seems ok by the spec that an XAConnection can be used without an XA tx
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/XAConnectionPoolTest.java,95,                        return false;
activemq-pool/src/test/java/org/apache/activemq/pool/ConnectionFailureEvictsFromPoolTest.java,71,"                new XaPooledConnectionFactory(new ActiveMQXAConnectionFactory(""mock:"" + connector.getConnectUri() + ""?closeAsync=false""));"
activemq-pool/src/test/java/org/apache/activemq/pool/XAConnectionPoolTest.java,88,                        return false;
activemq-unit-tests/src/test/java/org/apache/activemq/JMSXAConsumerTest.java,34,"        return new ActiveMQXAConnectionFactory(""vm://localhost"");"
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/JDBCXACommitExceptionTest.java,366,        factory = new ActiveMQXAConnectionFactory(connectionUri);
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/JDBCXACommitExceptionTest.java,369,            XAConnection connection = factory.createXAConnection();
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/XACompletionTest.java,922,        javax.jms.Connection connection = factory.createConnection();
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/XACompletionTest.java,939,"        sendMessagesWith(factory, messagesExpected);"

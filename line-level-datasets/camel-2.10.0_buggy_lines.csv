File,LineNumber,src
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,173,            if (routeDefinition.getRoutePolicies() != null) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,174,                for (RoutePolicy routePolicy : routeDefinition.getRoutePolicies()) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,222,            if (routeDefinition.getRoutePolicies() != null) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,223,                for (RoutePolicy routePolicy : routeDefinition.getRoutePolicies()) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,264,            if (routeDefinition.getRoutePolicies() != null) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,265,                for (RoutePolicy routePolicy : routeDefinition.getRoutePolicies()) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,295,            if (routeDefinition.getRoutePolicies() != null) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,296,                for (RoutePolicy routePolicy : routeDefinition.getRoutePolicies()) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,308,            if (routeDefinition.getRoutePolicies() != null) {
camel-core/src/main/java/org/apache/camel/impl/RouteService.java,309,                for (RoutePolicy routePolicy : routeDefinition.getRoutePolicies()) {
camel-core/src/test/java/org/apache/camel/impl/RoutePolicyCallbackTest.java,29,    private MyRoutePolicy policy = new MyRoutePolicy();
camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java,99,        return new Producer() {
camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java,117,            public void process(Exchange exchange) throws Exception {
camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java,134,                    return;
camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java,153,                    // route to original destination
camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java,154,                    producer.process(exchange);
camel-core/src/main/java/org/apache/camel/impl/InterceptSendToEndpoint.java,156,"                    LOG.debug(""Stop() means skip sending exchange to original intended destination: {} for exchange: {}"", getEndpoint(), exchange);"
camel-core/src/main/java/org/apache/camel/language/simple/ast/DoubleQuoteStart.java,43,            return block.createExpression(expression);
camel-core/src/main/java/org/apache/camel/language/simple/ast/DoubleQuoteStart.java,44,        } else {
camel-core/src/main/java/org/apache/camel/language/simple/ast/DoubleQuoteStart.java,45,            return null;
camel-core/src/main/java/org/apache/camel/language/simple/ast/SingleQuoteStart.java,43,            return block.createExpression(expression);
camel-core/src/main/java/org/apache/camel/language/simple/ast/SingleQuoteStart.java,44,        } else {
camel-core/src/main/java/org/apache/camel/language/simple/ast/SingleQuoteStart.java,45,            return null;
components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/SoapJaxbDataFormat.java,67,"    private static final QName FAULT_CODE_SERVER = new QName(""http://www.w3.org/2003/05/soap-envelope"", ""Receiver"");"
camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java,88,"        return new SedaProducer(this, getQueue(), getWaitForTaskToComplete(), getTimeout(), isBlockWhenFull());"
camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java,42,     * @deprecated use the other constructor
camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java,46,"        this(endpoint, queue, waitForTaskToComplete, timeout, false);"
camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java,48,
camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java,49,"    public SedaProducer(SedaEndpoint endpoint, BlockingQueue<Exchange> queue, WaitForTaskToComplete waitForTaskToComplete,"
camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java,50,"                        long timeout, boolean blockWhenFull) {"
camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java,52,        this.queue = queue;
camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java,128,                    queue.remove(copy);
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddItAgainTest.java,26,public class SedaRemoveRouteThenAddItAgainTest extends ContextTestSupport {
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddItAgainTest.java,39,    public void testRemoveRouteAndThenAddItAgain() throws Exception {
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddItAgainTest.java,43,"        template.sendBody(""seda:in"", ""Test Message"");"
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddItAgainTest.java,55,"        template.sendBody(""seda:in"", ""Test Message"");"
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,28,    @Override
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,29,    protected RouteBuilder createRouteBuilder() throws Exception {
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,30,        return new RouteBuilder() {
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,31,
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,32,            @Override
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,33,            public void configure() throws Exception {
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,34,"                from(""seda:in"").id(""sedaToMock"").to(""mock:out"");"
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,35,            }
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,36,        };
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,37,    }
camel-core/src/test/java/org/apache/camel/component/seda/SedaRemoveRouteThenAddAgainTest.java,38,
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,484,        }
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,485,"        expectedHeaderValues.put(name, value);"
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,486,
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,487,        expects(new Runnable() {
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,488,            public void run() {
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,489,                for (int i = 0; i < getReceivedExchanges().size(); i++) {
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,490,                    Exchange exchange = getReceivedExchange(i);
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,491,"                    for (Map.Entry<String, Object> entry : expectedHeaderValues.entrySet()) {"
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,492,                        String key = entry.getKey();
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,493,                        Object expectedValue = entry.getValue();
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,494,
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,495,                        // we accept that an expectedValue of null also means that the header may be absent
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,496,                        if (expectedValue != null) {
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,497,"                            assertTrue(""Exchange "" + i + "" has no headers"", exchange.getIn().hasHeaders());"
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,498,                            boolean hasKey = exchange.getIn().getHeaders().containsKey(key);
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,499,"                            assertTrue(""No header with name "" + key + "" found for message: "" + i, hasKey);"
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,501,
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,502,                        Object actualValue = exchange.getIn().getHeader(key);
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,503,"                        actualValue = extractActualValue(exchange, actualValue, expectedValue);"
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,504,
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,505,"                        assertEquals(""Header with name "" + key + "" for message: "" + i, expectedValue, actualValue);"
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,508,            }
camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java,509,        });
components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java,88,                    exchange.getIn().setBody(body.getData());
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConfiguration.java,41,    // TODO: document deleting of dataCoding
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppDataSmCommand.java,23,import org.jsmpp.bean.GeneralDataCoding;
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppDataSmCommand.java,54,                    new GeneralDataCoding(dataSm.getDataCoding()));
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSmCommand.java,38,        byte alphabet = SmppConstants.UNKNOWN_ALPHABET;
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSmCommand.java,41,        } else {
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSmCommand.java,42,            alphabet = config.getAlphabet();
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitMultiCommand.java,34,import org.jsmpp.bean.GeneralDataCoding;
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitMultiCommand.java,35,import org.jsmpp.bean.MessageClass;
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitMultiCommand.java,77,"                        new GeneralDataCoding(submitMulti.getDataCoding()),"
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitMultiCommand.java,132,"        DataCoding dataCoding = new GeneralDataCoding(false, true, MessageClass.CLASS1, determinedAlphabet);"
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitMultiCommand.java,134,
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitMultiCommand.java,148,            submitMulti.setDataCoding(dataCoding.value());
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java,29,import org.jsmpp.bean.GeneralDataCoding;
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java,30,import org.jsmpp.bean.MessageClass;
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java,72,"                        new GeneralDataCoding(submitSm.getDataCoding()),"
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java,103,"        template.setDataCoding(new GeneralDataCoding(false, true, MessageClass.CLASS1, determinedAlphabet).value());"
components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java,104,
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,28,import org.jsmpp.bean.Alphabet;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,30,import org.jsmpp.bean.GeneralDataCoding;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,31,import org.jsmpp.bean.MessageClass;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,50,import static org.easymock.classextension.EasyMock.createMock;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,51,import static org.easymock.classextension.EasyMock.replay;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,52,import static org.easymock.classextension.EasyMock.verify;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,96,"                eq(ReplaceIfPresentFlag.DEFAULT), eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(""short message body"".getBytes()),"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,132,"                eq(ReplaceIfPresentFlag.REPLACE), eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(""short message body"".getBytes()),"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitMultiCommandTest.java,168,"                eq(ReplaceIfPresentFlag.REPLACE), eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(""short message body"".getBytes()),"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,27,import org.jsmpp.bean.Alphabet;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,29,import org.jsmpp.bean.GeneralDataCoding;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,30,import org.jsmpp.bean.MessageClass;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,32,import org.jsmpp.bean.OptionalParameter;
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,92,"                eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0),"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,107,"    @Ignore(""TODO: easymock fails"")"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,122,"                eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(firstSM), aryEq(new OptionalParameter[0])))"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,127,"                eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), eq(secondSM)))"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,161,"                eq(ReplaceIfPresentFlag.REPLACE.value()), eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(""short message body"".getBytes())))"
components/camel-smpp/src/test/java/org/apache/camel/component/smpp/SmppSubmitSmCommandTest.java,195,"                eq(ReplaceIfPresentFlag.REPLACE.value()), eq(new GeneralDataCoding(false, true, MessageClass.CLASS1, Alphabet.ALPHA_DEFAULT)), eq((byte) 0), aryEq(""short message body"".getBytes())))"
camel-core/src/main/java/org/apache/camel/component/bean/RegistryBean.java,61,    public Object getBean() throws NoSuchBeanException {
examples/camel-example-gae/src/main/java/org/apache/camel/example/gae/ReportGenerator.java,44,        exchange.getIn().setBody(new StringBuilder()
examples/camel-example-gae/src/main/java/org/apache/camel/example/gae/ReportGenerator.java,47,"            .append(""\n"").append(""Current temperature: "").append(temp).append("" (Celsius)"").toString());"
examples/camel-example-gae/src/main/java/org/apache/camel/example/gae/TutorialRouteBuilder.java,52,                reportData.setWeather(weatherExchange.getIn().getBody(Document.class));
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/DefaultMyBatisProcessingStrategy.java,31,
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/DefaultMyBatisProcessingStrategy.java,37,        } finally {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/DefaultMyBatisProcessingStrategy.java,46,"            return session.selectList(endpoint.getStatement(), null);"
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,126,            try {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,127,                session.commit();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,128,            } finally {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,129,                session.close();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,130,            }
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,151,            try {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,152,                session.commit();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,153,            } finally {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,154,                session.close();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,155,            }
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,180,            try {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,181,                session.commit();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,182,            } finally {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,183,                session.close();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,184,            }
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,209,            try {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,210,                session.commit();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,211,            } finally {
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,212,                session.close();
components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java,213,            }
components/camel-http/src/main/java/org/apache/camel/component/http/HttpProducer.java,307,"            CachedOutputStream cos = new CachedOutputStream(exchange, false);"
components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java,312,"            CachedOutputStream cos = new CachedOutputStream(exchange, false);"
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java,145,
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java,153,"                            return tc.convertTo(type, exchange, embedded);"
components/camel-testng/src/main/java/org/apache/camel/testng/CamelSpringTestSupport.java,82,    @AfterTest
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormat.java,94,"        PGPPrivateKey key = PGPDataFormatUtil.findPrivateKey(exchange.getContext(), keyFileName, keyUserid, password);"
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,39,import org.bouncycastle.openpgp.PGPSecretKeyRing;
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,86,"    public static PGPPrivateKey findPrivateKey(CamelContext context, String filename, String userid, String passphrase) throws IOException,"
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,87,"            PGPException, NoSuchProviderException {"
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,89,"        InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(context.getClassResolver(), filename);"
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,91,        PGPPrivateKey privKey;
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,93,"            privKey = findPrivateKey(context, is, userid, passphrase);"
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,95,            IOHelper.close(is);
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,101,"    public static PGPPrivateKey findPrivateKey(CamelContext context, InputStream input, String userid, String passphrase) throws IOException,"
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,103,        PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(input));
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,104,
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,105,        Iterator<PGPSecretKeyRing> keyRingIter = pgpSec.getKeyRings();
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,106,        while (keyRingIter.hasNext()) {
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,107,            PGPSecretKeyRing keyRing = keyRingIter.next();
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,108,
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,109,            Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,110,            while (keyIter.hasNext()) {
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,111,                PGPSecretKey key = keyIter.next();
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,112,                for (Iterator<String> iterator = key.getUserIDs(); iterator.hasNext();) {
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,113,                    String userId = iterator.next();
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,114,                    if (key.isSigningKey() && userId.contains(userid)) {
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,115,"                        return key.extractPrivateKey(passphrase.toCharArray(), ""BC"");"
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,116,                    }
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,117,                }
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,118,            }
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,120,
components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/PGPDataFormatUtil.java,121,        return null;
components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java,46,"                String keyFileName = ""org/apache/camel/component/crypto/pubring.gpg"";"
components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/PGPDataFormatTest.java,48,"                String keyFileNameSec = ""org/apache/camel/component/crypto/secring.gpg"";"
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,95,    private final ThreadLocal<MessageVariableResolver> variableResolver = new ThreadLocal<MessageVariableResolver>();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,136,        // add on completion so the thread locals is removed when exchange is done
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,137,        exchange.addOnCompletion(new XPathBuilderOnCompletion());
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,138,
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,139,"        Object booleanResult = evaluateAs(exchange, XPathConstants.BOOLEAN);"
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,140,"        return exchange.getContext().getTypeConverter().convertTo(Boolean.class, booleanResult);"
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,144,        // add on completion so the thread locals is removed when exchange is done
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,145,        exchange.addOnCompletion(new XPathBuilderOnCompletion());
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,146,
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,147,        Object result = evaluate(exchange);
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,148,"        return exchange.getContext().getTypeConverter().convertTo(type, result);"
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,168,            // remove the dummy from the thread local after usage
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,169,            variableResolver.remove();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,192,            // remove the dummy from the thread local after usage
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,193,            variableResolver.remove();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,216,            // remove the dummy from the thread local after usage
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,217,            variableResolver.remove();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,218,            exchange.remove();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1009,        MessageVariableResolver resolver = variableResolver.get();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1010,        if (resolver == null) {
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1011,            resolver = new MessageVariableResolver(exchange);
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1012,            variableResolver.set(resolver);
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1013,        }
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1014,        return resolver;
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1055,    /**
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1056,     * On completion class which cleanup thread local resources
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1057,     */
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1058,    private final class XPathBuilderOnCompletion extends SynchronizationAdapter {
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1059,
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1060,        @Override
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1061,        public void onDone(Exchange exchange) {
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1062,"            // when the exchange is done, then cleanup thread locals if they are still"
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1063,            // pointing to this exchange that was done
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1064,            if (exchange.equals(XPathBuilder.this.exchange.get())) {
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1065,                // cleanup thread locals after usage
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1066,                XPathBuilder.this.variableResolver.remove();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1067,                XPathBuilder.this.exchange.remove();
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1068,            }
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1069,        }
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1070,
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1071,        @Override
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1072,        public boolean allowHandover() {
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1073,"            // this completion should not be handed over, as we want to execute it"
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1074,            // on current thread as the thread locals is bound the current thread
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1075,            return false;
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1076,        }
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1077,
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1078,        @Override
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1079,        public String toString() {
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1080,"            return ""XPathBuilderOnCompletion"";"
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1081,        }
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1082,    }
camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java,1083,
components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcComponent.java,87,
components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcComponent.java,88,        // restructure uri to be based on the parameters left as we don't want to include the Camel internal options
components/camel-ahc/src/main/java/org/apache/camel/component/ahc/helper/AhcHelper.java,138,                    String basePath = baseURI.getRawPath();
components/camel-http/src/main/java/org/apache/camel/component/http/helper/HttpHelper.java,188,                    String basePath = baseURI.getRawPath();
components/camel-http4/src/main/java/org/apache/camel/component/http4/helper/HttpHelper.java,188,                    String basePath = baseURI.getRawPath();
camel-core/src/main/java/org/apache/camel/component/xslt/XsltComponent.java,120,"        configureXslt(xslt, uri, remaining, parameters);"
camel-core/src/main/java/org/apache/camel/component/xslt/XsltComponent.java,121,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,19,import java.net.URI;
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,54,        URI endpointUri = new URI(uri);
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,55,        String tableName = endpointUri.getHost();
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,66,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,69,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,70,     * @param parameters
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,71,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,93,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseComponent.java,99,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,54,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,67,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,70,        HTableInterface table = null;
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,72,            table = tablePool.getTable(tableName);
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,157,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,174,     * Delegates to the {@link HBaseRemoveHandler }.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,175,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,176,     * @param row
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,184,            table.close();
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseConsumer.java,188,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseContats.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseDeleteHandler.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseDeleteHandler.java,32,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseDeleteHandler.java,33,     * @param table
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseDeleteHandler.java,34,     * @param row
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseDeleteHandler.java,42,"            LOG.warn(""Failed to delete row from table"", e);"
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,37,    private String tableName;
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,39,    private HTablePool tablePool;
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,46,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,52,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,55,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,56,    public HBaseEndpoint() {
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,57,    }
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,58,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,75,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseEndpoint.java,152,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseHelper.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseHelper.java,53,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseRemoveHandler.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseRemoveHandler.java,27,     * @param table
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HBaseRemoveHandler.java,28,     * @param row
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/HbaseAttribute.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareColumnMatchingFilter.java,39,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareColumnMatchingFilter.java,40,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareColumnMatchingFilter.java,43,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareColumnMatchingFilter.java,44,     * @param context
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareColumnMatchingFilter.java,45,     * @param rowModel
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareFilter.java,27,     * @param context
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareFilter.java,28,     * @param rowModel
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareFilterList.java,65,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareFilterList.java,66,     * @param context
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareFilterList.java,67,     * @param rowModel
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareFilterList.java,80,     * @param filter
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareFilterList.java,81,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,26,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,36,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,37,     * @param context
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,38,     * @param rowModel
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,47,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,50,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,51,     * @param filter
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareSkipFilter.java,52,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareWhileMatchFilter.java,35,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareWhileMatchFilter.java,36,     * @param context
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareWhileMatchFilter.java,37,     * @param rowModel
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareWhileMatchFilter.java,48,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareWhileMatchFilter.java,49,     * @param filter
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/filters/ModelAwareWhileMatchFilter.java,50,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,24, * A  {@link org.apache.camel.component.hbase.mapping.CellMappingStrategy} implementation.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,28, * <p>First header is expected to have no suffix</p>.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,29, * <p>Suffixes start from number 2</p>.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,30, * <p>Suffixes need to be sequential</p>.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,36,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,37,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,38,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,45,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,48,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,49,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,50,     * @param data
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,59,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,62,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,63,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/BodyMappingStrategy.java,64,     * @param data
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,27, * It is allowed that an exchange refers to more than once cells. This happens if headers for multiple cells are present in the {@Exchange}.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,33,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,34,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,35,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,37,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,40,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,51,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,52,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategy.java,53,     * @param rows
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategyFactory.java,50,"            strategy = loadStrategyfromClassName(message.getHeader(STRATEGY_CLASS_NAME, String.class));"
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategyFactory.java,61,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/CellMappingStrategyFactory.java,62,    private CellMappingStrategy loadStrategyfromClassName(String strategyClassName) {
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,30,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,36, * <p>First header is expected to have no suffix</p>.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,37, * <p>Suffixes start from number 2</p>.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,38, * <p>Suffixes need to be sequential</p>.
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,44,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,45,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,46,     * @param index
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,47,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,82,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,83,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,84,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,109,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,112,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,113,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,114,     * @param hRows
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,135,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,136,     * @param message
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,151,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,159,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,160,     * @param family
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,161,     * @param qualifier
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,162,     * @param cells
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,163,     * @return
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseCell.java,17,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseCell.java,53,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseData.java,28,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,32,    /**
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,33,     * Constructor
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,34,     */
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,36,        cells = new LinkedHashSet<HBaseCell>();
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,39,    /**
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,40,     * Constructor
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,41,     *
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,42,     * @param cells
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,43,     */
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/model/HBaseRow.java,73,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/processor/idempotent/HBaseIdempotentRepository.java,51,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/processor/idempotent/HBaseIdempotentRepository.java,109,
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/processor/idempotent/HBaseIdempotentRepository.java,114,
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/CamelHBaseTestSupport.java,17,
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/HBaseConsumerTest.java,17,
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/HBaseConvertionsTest.java,17,
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/HBaseProducerTest.java,17,
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/HBaseSpringConsumerTest.java,17,
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/HBaseSpringProducerTest.java,17,
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/processor/idempotent/HBaseIdempotentRepositoryTest.java,17,
components/camel-http/src/main/java/org/apache/camel/component/http/HttpEndpoint.java,211,        return httpUri.getPath();
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,202,
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java,34,"            String out = template.requestBody(""http://localhost:{{port}}/hello?foo="" + i, null, String.class);"
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java,44,"                from(""jetty://http://localhost:{{port}}/hello"")"
components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java,229,        return httpUri.getPath();
camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java,1133,        ThreadsDefinition answer = threads();
camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java,1147,        ThreadsDefinition answer = threads();
camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java,1163,        ThreadsDefinition answer = threads();
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,301,"            IOHelper.copy(bundle.build(), fos);"
components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelProxyFactoryBean.java,49,            if (camelContext == null && camelContextId != null) {
components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelProxyFactoryBean.java,52,
components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelProxyFactoryBean.java,56,
components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.java,86,        if (camelContext == null && camelContextId != null) {
components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java,49,    }
components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java,50,
components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java,51,    public void destroy() throws Exception {
components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java,52,    }
components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java,53,
components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java,54,    public CamelContext getCamelContext() {
components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java,55,        if (camelContext == null && camelContextId != null) {
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,19,import java.io.File;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,20,import java.io.FileInputStream;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,21,import java.io.FileNotFoundException;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,22,import java.io.FileOutputStream;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,25,import java.util.ArrayList;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,26,import java.util.Arrays;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,27,import java.util.Collection;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,28,import java.util.Dictionary;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,29,import java.util.Enumeration;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,30,import java.util.HashMap;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,31,import java.util.Iterator;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,32,import java.util.List;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,33,import java.util.Map;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,49,import org.osgi.framework.BundleContext;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,50,import org.osgi.framework.BundleException;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,51,import org.osgi.framework.Constants;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,52,import org.osgi.framework.Filter;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,53,import org.osgi.framework.FrameworkUtil;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,54,import org.osgi.framework.InvalidSyntaxException;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,55,import org.osgi.framework.ServiceReference;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,94,"        deleteDirectory(""target/bundles"");"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,95,"        createDirectory(""target/bundles"");"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,96,
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,98,"        System.setProperty(""org.osgi.framework.storage"", ""target/bundles/"" + System.currentTimeMillis());"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,104,            String jarName = name.toLowerCase();
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,105,"            bundles.add(getBundleDescriptor(""target/bundles/"" + jarName + "".jar"", bundle));"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,127,                bundleContext.getBundle().stop();
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,130,"            System.clearProperty(""org.osgi.framework.storage"");"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,299,"        FileOutputStream fos = new FileOutputStream(file, true);"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,301,"            IOHelper.copyAndCloseInput(bundle.build(), fos);"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,303,            IOHelper.close(fos);
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,316,            return new BundleDescriptor(
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,321,"            IOHelper.close(fis, jis);"
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java,66,     * @return
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,19,import java.io.*;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,22,import java.util.*;
components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java,38,import org.osgi.framework.*;
camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java,142,        if (file.getPath().startsWith(endpointNormalized)) {
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Consumer.java,147,        // using the unordered thread pool is fine as we dont need ordered invocation in our response handler
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Consumer.java,148,        workerPool = new UnorderedThreadPoolExecutor(configuration.getMaximumPoolSize());
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java,301,        // using the unordered thread pool is fine as we dont need ordered invocation in our response handler
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java,302,        workerPool = new UnorderedThreadPoolExecutor(configuration.getMaximumPoolSize());
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java,360,        // using the unordered thread pool is fine as we dont need ordered invocation in our response handler
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java,361,        workerPool = new UnorderedThreadPoolExecutor(configuration.getMaximumPoolSize());
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,40,
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,65,
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,66,"        LOG.trace(""Looking for existing chat instance with thread ID {}"", endpoint.getChatId());"
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,67,        Chat chat = chatManager.getThreadChat(endpoint.getChatId());
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,68,        if (chat == null) {
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,69,"            LOG.trace(""Creating new chat instance with thread ID {}"", endpoint.getChatId());"
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,70,"            chat = chatManager.createChat(getParticipant(), endpoint.getChatId(), new MessageListener() {"
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,71,"                public void processMessage(Chat chat, Message message) {"
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,72,                    // not here to do conversation
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,73,                    if (LOG.isDebugEnabled()) {
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,74,"                        LOG.debug(""Received and discarding message from {} : {}"", getParticipant(), message.getBody());"
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,75,                    }
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,76,                }
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,77,            });
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,78,        }
components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java,79,
camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java,92,        // only allow running the timer task if we can run and are not suspended
camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java,93,        return isRunAllowed() && !isSuspended();
camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java,135,
camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java,136,            // log exception if an exception occurred and was not handled
camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java,137,            if (exchange.getException() != null) {
camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java,138,"                getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());"
camel-core/src/main/java/org/apache/camel/component/timer/TimerConsumer.java,139,            }
camel-core/src/main/java/org/apache/camel/component/timer/TimerEndpoint.java,42,    private long delay;
components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java,196,                if (sendReply && exchange.getPattern().isOutCapable() && exchange.hasOut()) {
components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java,197,                    body = exchange.getOut();
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteRequestReplyTest.java,77,            from(endpointUriA).process(new Processor() {
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteRequestReplyTest.java,78,                public void process(Exchange e) {
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteRequestReplyTest.java,79,                    // do nothing
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteRequestReplyTest.java,80,                }
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteRequestReplyTest.java,81,            });
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestLateReplyTest.java,169,                // set the MEP to InOptionalOut as we might not be able to send a reply
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSimpleRequestLateReplyTest.java,170,                from(getQueueEndpointName()).setExchangePattern(ExchangePattern.InOptionalOut).process(new Processor() {
platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/RouteList.java,65,                    String status = camelContext.getRouteStatus(routeDefinition.getId()).name();
platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/RouteList.java,66,"                    System.out.println(String.format(OUTPUT_FORMAT, routeDefinition.getId(), contextName, status));"
components/camel-quartz/src/main/java/org/apache/camel/routepolicy/quartz/ScheduledRoutePolicy.java,49,            } else if (routeStatus == ServiceStatus.Suspended) {
components/camel-quartz/src/main/java/org/apache/camel/routepolicy/quartz/ScheduledRoutePolicy.java,66,                startConsumer(route.getConsumer());
components/camel-quartz/src/test/java/org/apache/camel/routepolicy/quartz/SimpleScheduledRoutePolicyTest.java,174,    }
camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java,147,        } else if (!outputs.isEmpty() && parentPolicy.getMaximumRedeliveries() > 0) {
components/camel-apns/src/main/java/org/apache/camel/component/apns/factory/ApnsServiceFactory.java,188,"            builder.withCert(certificateInputStream, getCertificatePassword()).withProductionDestination();"
components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/TypeNameStrategy.java,45,"        return new QName(nameSpace, xmlType.name());"
camel-core/src/main/java/org/apache/camel/util/EventHelper.java,122,                return;
camel-core/src/main/java/org/apache/camel/util/EventHelper.java,237,                return;
camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java,55,import static org.apache.camel.util.ExchangeHelper.convertToType;
camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java,56,
camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java,574,
camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java,575,"                Object value = convertToType(exchange, methodInfo.getBodyParameterType(), body);"
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,105,"            answer = routeContext.lookup(ref, ErrorHandlerBuilder.class);"
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,106,            if (answer == null) {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,107,"                throw new IllegalArgumentException(""ErrorHandlerBuilder with id "" + ref + "" not found in registry."");"
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,108,            }
camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java,142,
camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java,262,"            strategy = routeContext.lookup(strategyRef, AggregationStrategy.class);"
camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java,287,"            repository = routeContext.lookup(aggregationRepositoryRef, AggregationRepository.class);"
camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java,288,            if (repository == null) {
camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java,289,"                throw new IllegalArgumentException(""AggregationRepositoryRef "" + aggregationRepositoryRef + "" not found in registry."");"
camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java,290,            }
camel-core/src/main/java/org/apache/camel/model/EnrichDefinition.java,98,"            aggregationStrategy = routeContext.lookup(aggregationStrategyRef, AggregationStrategy.class);"
camel-core/src/main/java/org/apache/camel/model/IdempotentConsumerDefinition.java,221,"            idempotentRepository = routeContext.lookup(messageIdRepositoryRef, IdempotentRepository.class);"
camel-core/src/main/java/org/apache/camel/model/LoadBalancerDefinition.java,59,"            LoadBalancer loadBalancer = routeContext.lookup(ref, LoadBalancer.class);"
camel-core/src/main/java/org/apache/camel/model/MulticastDefinition.java,212,"            aggregationStrategy = routeContext.lookup(strategyRef, AggregationStrategy.class);"
camel-core/src/main/java/org/apache/camel/model/PollEnrichDefinition.java,103,"            aggregationStrategy = routeContext.lookup(aggregationStrategyRef, AggregationStrategy.class);"
camel-core/src/main/java/org/apache/camel/model/ProcessDefinition.java,89,"            answer = routeContext.lookup(getRef(), Processor.class);"
camel-core/src/main/java/org/apache/camel/model/ProcessDefinition.java,90,"            ObjectHelper.notNull(answer, ""registry entry called "" + getRef(), this);"
camel-core/src/main/java/org/apache/camel/model/RecipientListDefinition.java,167,"            aggregationStrategy = routeContext.lookup(strategyRef, AggregationStrategy.class);"
camel-core/src/main/java/org/apache/camel/model/WireTapDefinition.java,100,"            newExchangeProcessor = routeContext.lookup(newExchangeProcessorRef, Processor.class);"
camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java,113,     * {@link CamelContext} or throws NoSuchBeanException if not found.
camel-core/src/test/java/org/apache/camel/model/ProcessorTypeConfigurationTest.java,37,"            assertEquals(""registry entry called hello must be specified on: process[ref:hello]"", e.getCause().getMessage());"
components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerCamelContextRefNotFoundTest.java,37,"            IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, cause.getCause());"
components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerCamelContextRefNotFoundTest.java,38,"            assertEquals(""ErrorHandlerBuilder with id foo not found in registry."", iae.getMessage());"
components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerRouteContextRefNotFoundTest.java,36,"            IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, cause.getCause());"
components/camel-spring/src/test/java/org/apache/camel/spring/config/ErrorHandlerRouteContextRefNotFoundTest.java,37,"            assertEquals(""ErrorHandlerBuilder with id bar not found in registry."", iae.getMessage());"
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,67,            hCell.setQualifier(columnName);
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,68,            hCell.setFamily(columnFamily);
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,69,            hCell.setValue(value);
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,70,            // String is the default value type
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,71,            hCell.setValueType((valueClass != null) ? valueClass : String.class);
components/camel-hbase/src/main/java/org/apache/camel/component/hbase/mapping/HeaderMappingStrategy.java,72,            hRow.getCells().add(hCell);
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/HBaseProducerTest.java,124,"            getExchange.getIn().setHeader(HbaseAttribute.HBASE_FAMILY.asHeader(), family[0]);"
components/camel-hbase/src/test/java/org/apache/camel/component/hbase/HBaseProducerTest.java,125,"            getExchange.getIn().setHeader(HbaseAttribute.HBASE_QUALIFIER.asHeader(), column[0][0]);"
camel-core/src/main/java/org/apache/camel/builder/DefaultErrorHandlerBuilder.java,433,"                // no explicit configured thread pool, so leave it up to the error handler to deceide if it need"
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilder.java,37,     * @param exception  the exception to handle
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilder.java,39,    void addErrorHandlers(OnExceptionDefinition exception);
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilder.java,44,     * @param exceptions  the list of exceptions to handle
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilder.java,46,    void setErrorHandlers(List<OnExceptionDefinition> exceptions);
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilder.java,51,    List<OnExceptionDefinition> getErrorHandlers();
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,36,    private ErrorHandlerBuilder handler;
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,44,    public void addErrorHandlers(OnExceptionDefinition exception) {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,46,            handler.addErrorHandlers(exception);
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,48,        super.addErrorHandlers(exception);
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,101,                ((ErrorHandlerBuilder)answer).setErrorHandlers(other.getErrorHandlers());
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,145,    public ErrorHandlerFactory getHandler() {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,146,        return handler;
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,147,    }
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,148,
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,150,"        handler = (ErrorHandlerBuilder)lookupErrorHandlerBuilder(routeContext, getRef());"
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,156,        List<OnExceptionDefinition> list = getErrorHandlers();
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,157,        for (OnExceptionDefinition exceptionType : list) {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderRef.java,158,            handler.addErrorHandlers(exceptionType);
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,35,    private List<OnExceptionDefinition> exceptions = new ArrayList<OnExceptionDefinition>();
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,38,    public void addErrorHandlers(OnExceptionDefinition exception) {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,40,        if (!exceptions.contains(exception)) {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,41,            exceptions.add(exception);
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,49,            for (OnExceptionDefinition exception : exceptions) {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,50,"                handlerSupport.addExceptionPolicy(routeContext, exception);"
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,55,    public List<OnExceptionDefinition> getErrorHandlers() {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,56,        return exceptions;
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,59,    public void setErrorHandlers(List<OnExceptionDefinition> exceptions) {
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,60,        this.exceptions.clear();
camel-core/src/main/java/org/apache/camel/builder/ErrorHandlerBuilderSupport.java,61,        this.exceptions.addAll(exceptions);
camel-core/src/main/java/org/apache/camel/model/OnExceptionDefinition.java,193,        builder.addErrorHandlers(this);
camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java,164,            route.setErrorHandlerBuilderIfNull(context.getErrorHandlerBuilder());
components/camel-spring/src/main/java/org/apache/camel/spring/spi/SpringTransactionPolicy.java,106,                txBuilder.setErrorHandlers(builder.getErrorHandlers());
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpReturnFaultTest.java,31,"        String out = template.requestBody(""http://localhost:{{port}}/test"", ""Hello World"", String.class);"
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpReturnFaultTest.java,32,"        assertEquals(""This is a fault"", out);"
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/jettyproducer/JettyHttpProderReturnFaultTest.java,40,"        String out = template.requestBody(""jetty://http://localhost:{{port}}/test"", ""Hello World"", String.class);"
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/jettyproducer/JettyHttpProderReturnFaultTest.java,41,"        assertEquals(""This is a fault"", out);"
camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java,659,                if (key.startsWith(prefix)) {
camel-core/src/main/java/org/apache/camel/impl/converter/AsyncProcessorTypeConverter.java,47,     * @deprecated use AnycProcessorConverter.convert instead
camel-core/src/main/java/org/apache/camel/processor/SendProcessor.java,152,"            producerCache = new ProducerCache(this, camelContext, 1);"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,203,        // multicast uses fine grained error handling on the output processors
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,204,        // so use try .. catch to cater for this
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,205,        boolean exhaust = false;
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,211,            // after we have created the processors we consider the exchange as exhausted if an unhandled
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,212,"            // exception was thrown, (used in the catch block)"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,213,"            // if the processors is working in Streaming model, the exchange could not be processed at this point."
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,214,            exhaust = !isStreaming();
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,215,
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,232,"            doDone(exchange, null, callback, true, exhaust);"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,239,"        doDone(exchange, subExchange, callback, true, exhaust);"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,311,"                                throw new CamelExchangeException(""Parallel processing failed for number "" + number, subExchange, subExchange.getException());"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,530,"                    throw new CamelExchangeException(""Sequential processing failed for number "" + total.get(), subExchange, subExchange.getException());"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,531,                } else {
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,532,"                    // we want to stop on exception, and the exception was handled by the error handler"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,533,"                    // this is similar to what the pipeline does, so we should do the same to not surprise end users"
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,534,                    // so we should set the failed exchange as the result and be done
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,535,                    result.set(subExchange);
camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java,536,                    return true;
camel-core/src/test/java/org/apache/camel/processor/MulticastParallelStopOnExceptionTest.java,70,"            ExecutionException ee = assertIsInstanceOf(ExecutionException.class, e.getCause());"
camel-core/src/test/java/org/apache/camel/processor/MulticastParallelStopOnExceptionTest.java,71,"            CamelExchangeException cause = assertIsInstanceOf(CamelExchangeException.class, ee.getCause());"
camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelFineGrainedErrorHandlingTest.java,126,"            assertIsInstanceOf(ExecutionException.class, e.getCause());"
camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelFineGrainedErrorHandlingTest.java,127,"            assertIsInstanceOf(CamelExchangeException.class, e.getCause().getCause());"
camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelFineGrainedErrorHandlingTest.java,128,"            assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause().getCause());"
camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelFineGrainedErrorHandlingTest.java,129,"            assertEquals(""Damn"", e.getCause().getCause().getCause().getMessage());"
camel-core/src/test/java/org/apache/camel/processor/SplitterParallelStopOnExceptionTest.java,67,"            ExecutionException ee = assertIsInstanceOf(ExecutionException.class, e.getCause());"
camel-core/src/test/java/org/apache/camel/processor/SplitterParallelStopOnExceptionTest.java,68,"            CamelExchangeException cause = assertIsInstanceOf(CamelExchangeException.class, ee.getCause());"
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,27,    // TODO: CAMEL-5681
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,28,
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,32,"        // getMockEndpoint(""mock:c"").expectedMessageCount(1);"
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,34,        try {
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,35,"            template.sendBody(""direct:start"", ""Hello World"");"
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,36,        } catch (Exception e) {
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,37,            // should not happen
camel-core/src/test/java/org/apache/camel/processor/onexception/DoCatchDirectRecipientListTest.java,38,        }
camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java,30,import org.apache.camel.util.LRUSoftCache;
camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java,63,     * This implementation returns a {@link org.apache.camel.util.LRUSoftCache} instance.
camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java,69,        // We use a soft reference cache to allow the JVM to re-claim memory if it runs low on memory.
camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java,70,"        return new LRUSoftCache<String, PollingConsumer>(cacheSize);"
camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java,40,import org.apache.camel.util.LRUSoftCache;
camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java,81,     * This implementation returns a {@link LRUSoftCache} instance.
camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java,87,        // We use a soft reference cache to allow the JVM to re-claim memory if it runs low on memory.
camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java,88,"        return new LRUSoftCache<String, Producer>(cacheSize);"
components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java,270,        // only allow multiple consumers for pub sub domain (e.g. topics)
components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java,271,        return isPubSubDomain();
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,22,import org.apache.camel.FailedToStartRouteException;
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,25,
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,36,    public void testMultipleConsumersAllowed() throws Exception {
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,62,    public void testMultipleConsumersNotAllowed() throws Exception {
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,66,"                from(""jms:queue:foo"").to(""mock:foo"");"
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,70,"                from(""jms:queue:foo"").to(""mock:bar"");"
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,73,        try {
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,74,            context.start();
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,75,"            fail(""Should have thrown an exception"");"
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,76,        } catch (FailedToStartRouteException e) {
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,77,"            assertTrue(e.getMessage().endsWith(""Multiple consumers for the same endpoint is not allowed: Endpoint[jms://queue:foo]""));"
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java,78,        }
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,80,    private boolean matches;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,290,            private boolean sentTo;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,301,                sentTo = false;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,308,                    sentTo = true;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,316,                return sentTo;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,326,                sentTo = false;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,348,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,352,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,357,                return current >= number;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,362,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,387,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,391,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,397,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,402,                return current >= number;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,407,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,429,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,431,            private boolean done;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,435,                if (current == index) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,438,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,445,                    done = true;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,453,                    done = true;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,459,                return done;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,464,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,466,                done = false;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,491,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,495,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,500,                return current >= number;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,505,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,527,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,531,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,536,                return current >= number;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,541,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,562,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,566,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,572,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,577,                return current == number;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,582,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,604,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,608,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,613,                return current == number;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,618,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,637,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,641,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,646,                return current == number;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,651,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,684,            private boolean matches;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,688,                if (!received && !matches) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,689,                    matches = predicate.matches(exchange);
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,696,                if (!received && !matches) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,697,                    matches = predicate.matches(exchange);
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,704,                if (received && !matches) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,705,                    matches = predicate.matches(exchange);
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,711,                return matches;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,716,                matches = false;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,753,            private boolean matches = true;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,757,                if (!received && matches) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,758,                    matches = predicate.matches(exchange);
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,765,                if (!received && matches) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,766,                    matches = predicate.matches(exchange);
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,773,                if (received && matches) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,774,                    matches = predicate.matches(exchange);
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,780,                return matches;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,785,                matches = true;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,935,
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1063,            private boolean matches;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1064,            private int current;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1091,                current++;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1092,
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1093,                if (current > bodies.size()) {
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1099,                Object expected = bodies.get(current - 1);
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1105,                    return matches && current == bodies.size();
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1107,                    return matches && current >= bodies.size();
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,1114,                current = 0;
camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java,447,                    done.set(false);
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,23,
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,36,
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,50,    // for lazy creation of the Schema
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,72,        Source source;
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,73,        Result result;
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,75,            if (useDom) {
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,76,                source = exchange.getIn().getBody(DOMSource.class);
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,77,                result = new DOMResult();
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,79,                source = exchange.getIn().getBody(SAXSource.class);
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,80,                result = new SAXResult();
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,82,        } catch (Exception e) {
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,83,"            throw new NoXmlBodyValidationException(exchange, e);"
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,84,        }
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,85,        if (source == null) {
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,86,            throw new NoXmlBodyValidationException(exchange);
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,87,        }
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,89,        // create a new errorHandler and set it on the validator
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,90,        // must be a local instance to avoid problems with concurrency (to be
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,91,        // thread safe)
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,92,        ValidatorErrorHandler handler = errorHandler.getClass().newInstance();
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,93,        validator.setErrorHandler(handler);
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,95,        try {
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,96,"            validator.validate(source, result);"
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,97,        } catch (SAXParseException e) {
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,98,            // can be thrown for non well formed XML
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,99,"            throw new SchemaValidationException(exchange, schema, Collections.singletonList(e),"
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,100,"                    Collections.<SAXParseException> emptyList(),"
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,101,                    Collections.<SAXParseException> emptyList());
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,102,        }
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,104,"        handler.handleErrors(exchange, schema, result);"
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,185,"     * Sets whether DOMSource and DOMResult should be used, or SaxSource and"
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,186,     * SaxResult.
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,187,     *
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,188,     * @param useDom
camel-core/src/main/java/org/apache/camel/processor/validation/ValidatingProcessor.java,189,     *            true to use DOM otherwise Sax is used
camel-core/src/test/java/org/apache/camel/component/validator/FileValidatorRouteTest.java,59,
camel-core/src/test/java/org/apache/camel/component/validator/FileValidatorRouteTest.java,71,"                from(""file:target/validator"")"
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,33,public class BlueprintCamelContext extends DefaultCamelContext {
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,74,        final ClassLoader original = Thread.currentThread().getContextClassLoader();
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,75,        try {
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,76,            // let's set a more suitable TCCL while starting the context
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,77,            Thread.currentThread().setContextClassLoader(getApplicationContextClassLoader());
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,78,            maybeStart();
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,79,        } finally {
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,80,            Thread.currentThread().setContextClassLoader(original);
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,81,        }
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,82,    }
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,83,
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,84,    private void maybeStart() throws Exception {
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,85,        if (!isStarted() && !isStarting()) {
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,86,            start();
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,87,        } else {
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,88,            // ignore as Camel is already started
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,89,"            LOG.trace(""Ignoring maybeStart() as Apache Camel is already started"");"
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java,90,        }
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java,264,"                                                                                 /*getBeanPostProcessor(),*/ getContext().getPackageScanClassResolver());"
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,126,            // schedule task to extend visibility if enabled
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,127,            ScheduledFuture<?> scheduledFuture = null;
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,128,            Integer visibilityTimeout = getConfiguration().getVisibilityTimeout();
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,129,            if (scheduledExecutor != null && visibilityTimeout != null && (visibilityTimeout.intValue() / 2) > 0) {
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,130,                int delay = visibilityTimeout.intValue() / 2;
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,131,                int period = visibilityTimeout.intValue();
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,132,"                LOG.debug(""Scheduled TimeoutExtender task to start after {} delay, and run with {} period (seconds) to extend exchangeId: {}"","
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,133,"                        new Object[]{delay, period, exchange.getExchangeId()});"
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,134,                scheduledFuture = this.scheduledExecutor.scheduleAtFixedRate(
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,135,"                        new TimeoutExtender(exchange, visibilityTimeout), delay, period, TimeUnit.SECONDS);"
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,136,            }
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,137,
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,144,                // cancel task as we are done
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,145,                if (scheduledFuture != null) {
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,146,"                    LOG.trace(""Processing done so cancelling TimeoutExtender task for exchangeId: {}"", exchange.getExchangeId());"
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,147,                    scheduledFuture.cancel(true);
components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java,148,                }
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,197,"        String address = uri.startsWith(""jetty:"") ? remaining : uri;"
components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamProducer.java,184,"        boolean headerStream = ""header"".equals(uri) && !systemStream;"
components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamProducer.java,188,        if (expiredStream) {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,130,"        Map<String, Object> httpClientParameters = new HashMap<String, Object>(parameters);"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,131,
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,150,
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,151,        // configure http client if we have url configuration for it
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,152,        // http client is only used for jetty http producer (hence not very commonly used)
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,153,        HttpClient client = null;
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,154,"        if (IntrospectionSupport.hasProperties(parameters, ""httpClient."") || sslContextParameters != null) {"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,155,"            client = createHttpClient(httpClientMinThreads, httpClientMaxThreads, ssl);"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,156,
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,157,"            if (IntrospectionSupport.hasProperties(parameters, ""httpClient."")) {"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,158,                // set additional parameters on http client
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,159,"                IntrospectionSupport.setProperties(client, parameters, ""httpClient."");"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,160,                // validate that we could resolve all httpClient. parameters as this component is lenient
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,161,"                validateParameters(uri, parameters, ""httpClient."");"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,162,            }
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,163,
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,164,            if (ssl != null) {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,165,                ((CamelHttpClient) client).setSSLContext(ssl.createSSLContext());
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,166,            }
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,167,        }
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,168,        // keep the configure parameters for the http client
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,169,        for (String key : parameters.keySet()) {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,170,            httpClientParameters.remove(key);
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,171,        }
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,175,"        URI endpointUri = URISupport.createRemainingURI(addressUri, httpClientParameters);"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,182,        if (client != null) {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,183,            endpoint.setClient(client);
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,66,            // use shared client
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,73,"            answer.setClient(JettyHttpComponent.createHttpClient(min, max, sslContextParameters));"
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,189,    @Override
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,190,    protected void doStart() throws Exception {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,191,        if (client != null) {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,192,            client.start();
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,193,        }
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,194,        super.doStart();
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,197,    @Override
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,198,    protected void doStop() throws Exception {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,199,        super.doStop();
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,200,        if (client != null) {
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,201,            client.stop();
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpEndpoint.java,202,        }
components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java,303,                        if (quote != null) {
components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java,307,                        if (quote != null) {
components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/CsvRecord.java,76,"    String quote() default """";"
components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java,158,"                result = unquoteTokens(result, separator);"
components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java,202,"    private List<String> unquoteTokens(List<String> result, String separator) {"
components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java,214,"            if (s.startsWith(""\"""") || s.startsWith(""'"")) {"
components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java,218,"            if (s.endsWith(""\"""") || s.endsWith(""'"")) {"
components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyInlinedQuotesCsvUnmarshallTest.java,59,        BindyDoubleQuotesCsvUnmarshallTest.Order order = (BindyDoubleQuotesCsvUnmarshallTest.Order) map.values().iterator().next();
components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyInlinedQuotesCsvUnmarshallTest.java,66,"        BindyCsvDataFormat camelDataFormat = new BindyCsvDataFormat(""org.apache.camel.dataformat.bindy.csv"");"
components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySingleQuotesCsvUnmarshallTest.java,56,"        BindyCsvDataFormat camelDataFormat = new BindyCsvDataFormat(""org.apache.camel.dataformat.bindy.csv"");"
components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySingleQuotesCsvUnmarshallTest.java,61,
components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySingleQuotesCsvUnmarshallTest.java,63,
components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv2/WeatherModel.java,25,"@CsvRecord(separator = "","", quote = ""\"""")"
camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java,54,        File[] files = directory.listFiles();
camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java,55,        if (files == null || files.length == 0) {
camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java,64,"                log.trace(""Found {} in directory: {}"", files.length, directory.getPath());"
camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java,84,"                if (endpoint.isRecursive() && isValidFile(gf, true) && depth < endpoint.getMaxDepth()) {"
camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java,94,"                if (isValidFile(gf, false) && depth >= endpoint.minDepth) {"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,329,"                log.trace(""Skiped retrieval of file: {} from: {}"", name, endpoint);"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,409,"    protected boolean isValidFile(GenericFile<T> file, boolean isDirectory) {"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,410,"        if (!isMatched(file, isDirectory)) {"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,436,"    protected boolean isMatched(GenericFile<T> file, boolean isDirectory) {"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,500,"            if (!isMatched(file, doneFileName)) {"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,512,     * @param doneFileName the done file name
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,515,"    protected boolean isMatched(GenericFile<T> file, String doneFileName) {"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,516,        // the file is only valid if the done file exist
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,517,        if (!operations.existsFile(doneFileName)) {
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,518,"            log.trace(""Done file: {} does not exist"", doneFileName);"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,519,            return false;
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,520,        }
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,521,
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,522,        // assume matched
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,523,        return true;
camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java,524,    }
camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java,809,            answer = path + File.separator + pattern;
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java,111,"                if (endpoint.isRecursive() && isValidFile(remote, true) && depth < endpoint.getMaxDepth()) {"
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java,122,"                if (isValidFile(remote, false) && depth >= endpoint.getMinDepth()) {"
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,23,import org.apache.camel.component.file.GenericFile;
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,26,import org.apache.camel.util.FileUtil;
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,163,    @Override
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,164,"    protected boolean isMatched(GenericFile<T> file, String doneFileName) {"
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,165,        // ftp specific as we need to cater for stepwise
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,166,        if (getEndpoint().getConfiguration().isStepwise()) {
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,167,"            // stepwise enabled, so done file should always be without path"
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,168,            doneFileName = FileUtil.stripPath(doneFileName);
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,169,        }
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,170,
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,171,"        return super.isMatched(file, doneFileName);"
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java,172,    }
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java,108,"                if (endpoint.isRecursive() && isValidFile(remote, true) && depth < endpoint.getMaxDepth()) {"
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java,121,"                if (isValidFile(remote, false) && depth >= endpoint.getMinDepth()) {"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,113,        if (endpoint.getDoneFileName() != null && !endpoint.isNoop()) {
components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv2/BindyUnmarshalCommaIssueTest.java,89,    //@Ignore
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,377,"        LOG.trace(""Waiting for operation to complete {}"", channelFuture);"
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,378,        latch.await();
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,21,import java.util.concurrent.CountDownLatch;
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,24,import java.util.concurrent.TimeUnit;
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,308,    private ChannelFuture openConnection() throws Exception {
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,368,        // wait until until the operation is complete
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,369,        final CountDownLatch latch = new CountDownLatch(1);
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,370,        channelFuture.addListener(new ChannelFutureListener() {
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,371,            @Override
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,372,            public void operationComplete(ChannelFuture channelFuture) throws Exception {
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,373,"                LOG.trace(""Operation complete {}"", channelFuture);"
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,374,                latch.countDown();
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,375,            }
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,376,        });
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,378,"        LOG.trace(""Waiting for operation to complete {} for {} millis"", channelFuture, configuration.getConnectTimeout());"
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,379,"        latch.await(configuration.getConnectTimeout(), TimeUnit.MILLISECONDS);"
components/camel-netty/src/main/java/org/apache/camel/component/netty/NettyProducer.java,381,        if (!channelFuture.isSuccess()) {
components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java,93,"        LOG.trace(""Channel closed: {}"", ctx.getChannel());"
camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java,61,    // need a name -> actual name mapping as some servers changes the names (suc as WebSphere)
camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java,260,        // close JMX Connector
camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java,387,            LocateRegistry.createRegistry(registryPort);
camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationWithConnectorTest.java,59,        int port = 30000 + new Random().nextInt(10000);
camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationWithConnectorTest.java,60,"        log.info(""Using port "" + port);"
camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationWithConnectorTest.java,61,"        url = ""service:jmx:rmi:///jndi/rmi://localhost:"" + port + ""/jmxrmi/camel"";"
camel-core/src/test/java/org/apache/camel/management/JmxInstrumentationWithConnectorTest.java,66,"        System.setProperty(JmxSystemPropertyKeys.REGISTRY_PORT, """" + port);"
components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsPollingConsumer.java,46,        return receive(1);
components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsPollingConsumer.java,50,        return receive(0L);
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/JMXConsumer.java,25,
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/JMXConsumer.java,78,"    public JMXConsumer(JMXEndpoint aEndpoint, Processor aProcessor) {"
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/JMXConsumer.java,79,"        super(aEndpoint, aProcessor);"
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/JMXConsumer.java,80,        this.mJmxEndpoint = aEndpoint;
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/JMXConsumer.java,81,        mFormatter = new NotificationXmlFormatter();
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,24,import java.util.concurrent.locks.Lock;
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,25,import java.util.concurrent.locks.ReentrantLock;
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,47,public class NotificationXmlFormatter {
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,50,    private Marshaller mMarshaller;
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,51,    private Lock mMarshallerLock = new ReentrantLock(false);
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,52,    private ObjectFactory mObjectFactory = new ObjectFactory();
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,56,        NotificationEventType jaxb = null;
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,57,
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,128,            try {
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,129,                mMarshallerLock.lock();
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,130,"                getMarshaller(mObjectFactory.getClass().getPackage().getName()).marshal(bean, sw);"
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,131,            } finally {
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,132,                mMarshallerLock.unlock();
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,133,            }
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,156,    private Marshaller getMarshaller(String aPackageName) throws JAXBException {
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,157,        if (mMarshaller == null) {
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,158,            mMarshaller = JAXBContext.newInstance(aPackageName).createMarshaller();
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,159,        }
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,160,        return mMarshaller;
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,161,    }
components/camel-jmx/src/main/java/org/apache/camel/component/jmx/NotificationXmlFormatter.java,162,
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,19,import java.lang.reflect.InvocationTargetException;
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,20,import java.lang.reflect.Method;
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,21,import java.util.concurrent.atomic.AtomicBoolean;
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,22,
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,45,    private Method methodObject;
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,68,"        String description = methodObject != null ? "" "" + methodObject : """";"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,69,"        return ""BeanProcessor["" + beanHolder + description + ""]"";"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,159,        if (invocation == null) {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,160,"            throw new IllegalStateException(""No method invocation could be created, no matching method could be found on: "" + bean);"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,161,        }
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,163,        Object value;
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,164,        try {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,165,            AtomicBoolean sync = new AtomicBoolean(true);
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,166,"            value = invocation.proceed(callback, sync);"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,167,            if (!sync.get()) {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,168,"                LOG.trace(""Processing exchangeId: {} is continued being processed asynchronously"", exchange.getExchangeId());"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,169,                // the remainder of the routing will be completed async
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,170,"                // so we break out now, then the callback will be invoked which then continue routing from where we left here"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,171,                return false;
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,172,            }
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,173,
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,174,"            LOG.trace(""Processing exchangeId: {} is continued being processed synchronously"", exchange.getExchangeId());"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,175,        } catch (InvocationTargetException e) {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,176,            // let's unwrap the exception when it's an invocation target exception
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,177,            exchange.setException(e.getCause());
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,178,            callback.done(true);
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,179,            return true;
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,180,        } catch (Throwable e) {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,181,            exchange.setException(e);
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,186,        // if the method returns something then set the value returned on the Exchange
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,187,        if (!invocation.getMethod().getReturnType().equals(Void.TYPE) && value != Void.TYPE) {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,188,            if (exchange.getPattern().isOutCapable()) {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,189,                // force out creating if not already created (as its lazy)
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,190,"                LOG.debug(""Setting bean invocation result on the OUT message: {}"", value);"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,191,                exchange.getOut().setBody(value);
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,192,                // propagate headers
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,193,                exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,194,            } else {
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,195,                // if not out then set it on the in
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,196,"                LOG.debug(""Setting bean invocation result on the IN message: {}"", value);"
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,197,                exchange.getIn().setBody(value);
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,198,            }
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,199,        }
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,200,
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,201,        callback.done(true);
camel-core/src/main/java/org/apache/camel/component/bean/BeanProcessor.java,202,        return true;
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,32,import java.util.concurrent.atomic.AtomicBoolean;
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,249,"            public Object proceed(AsyncCallback callback, AtomicBoolean doneSync) throws Exception {"
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,257,"                    boolean sync = dynamicRouter.doRoutingSlip(exchange, expression, callback);"
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,258,                    // must remember the done sync returned from the dynamic router
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,259,                    doneSync.set(sync);
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,260,                    return Void.TYPE;
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,274,"                    boolean sync = recipientList.sendToRecipientList(exchange, result, callback);"
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,275,                    // must remember the done sync returned from the recipient list
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,276,                    doneSync.set(sync);
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,277,                    // we don't want to return the list of endpoints
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,278,                    // return Void to indicate to BeanProcessor that there is no reply
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,279,                    return Void.TYPE;
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,285,"                    boolean sync = routingSlip.doRoutingSlip(exchange, result, callback);"
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,286,                    // must remember the done sync returned from the routing slip
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,287,                    doneSync.set(sync);
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,288,                    return Void.TYPE;
camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java,291,                return result;
camel-core/src/main/java/org/apache/camel/component/bean/MethodInvocation.java,21,import java.util.concurrent.atomic.AtomicBoolean;
camel-core/src/main/java/org/apache/camel/component/bean/MethodInvocation.java,36,"    Object proceed(AsyncCallback callback, AtomicBoolean doneSync) throws Exception;"
components/camel-spring/src/test/java/org/apache/camel/component/bean/BeanWithRecipientListTest.java,24,import org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests;
components/camel-spring/src/test/java/org/apache/camel/component/bean/BeanWithRecipientListTest.java,30,public class BeanWithRecipientListTest extends AbstractJUnit38SpringContextTests {
components/camel-spring/src/test/java/org/apache/camel/spring/bind/BeanInfoTest.java,46,        Object value = invocation.proceed(new AsyncCallback() {
components/camel-spring/src/test/java/org/apache/camel/spring/bind/BeanInfoTest.java,50,"        }, sync);"
components/camel-spring/src/test/java/org/apache/camel/spring/bind/BeanInfoTest.java,53,"        assertEquals(""Hello James!"", value);"
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,314,        InputStream is;
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,319,"            is = exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, message.getBody());"
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,325,            try {
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,326,                // copy directly from input stream to output stream
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,327,"                IOHelper.copy(is, os);"
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,328,            } finally {
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,329,"                IOHelper.close(os, is);"
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,297,        InputStream is;
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,301,"            // try to use input stream first, so we can copy directly"
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,302,"            is = exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, message.getBody());"
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,307,            try {
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,308,"                LOG.trace(""Writing direct response from source input stream to servlet output stream"");"
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,309,                // copy directly from input stream to output stream
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,310,"                IOHelper.copy(is, os);"
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,311,            } finally {
components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java,312,"                IOHelper.close(os, is);"
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java,471,
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,125,            // need to ensure we release resources
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,126,            try {
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,127,                if (folder.isOpen()) {
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,128,                    folder.close(true);
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,130,            } catch (Exception e) {
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,131,                // some mail servers will lock the folder so we ignore in this case (CAMEL-1263)
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,132,"                LOG.debug(""Could not close mailbox folder: "" + folder.getName(), e);"
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,139,"            LOG.debug(""Disconnecting from {}"", getEndpoint().getConfiguration().getMailStoreLogInformation());"
components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConsumer.java,143,"                LOG.debug(""Could not disconnect from {}: "" + getEndpoint().getConfiguration().getMailStoreLogInformation(), e);"
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java,79,            // NOTE this code cannot work with CXF 2.2.x
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java,117,                return provider == null ? null : provider.getContinuation();
components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java,166,"                    Object unmarshalled = unmarshal(unmarshaller, exchange, xmlReader);"
components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java,167,                    return type.cast(unmarshalled);
components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java,171,"                        LOG.info(""Cannot use StaxStreamReader to unmarshal the message, due to {}"", ex);"
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,406,        if (isCompletionFromBatchConsumer()) {
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,407,            batchConsumerCorrelationKeys.add(key);
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,408,            batchConsumerCounter.incrementAndGet();
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,409,"            int size = exchange.getProperty(Exchange.BATCH_SIZE, 0, Integer.class);"
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,410,            if (size > 0 && batchConsumerCounter.intValue() >= size) {
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,411,                // batch consumer is complete then reset the counter
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,412,                batchConsumerCounter.set(0);
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,413,"                return ""consumer"";"
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,414,            }
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,415,        }
camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java,416,
components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java,104,            if (cache.isKeyInCache(key)) {
components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintContainerRegistry.java,43,        return blueprintContainer.getComponentInstance(name);
components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java,198,            out = exchange.getOut();
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,220,"                doWriteFaultResponse(exchange.getOut(), response, exchange);"
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,223,            // just copy the protocol relates header
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,224,"            copyProtocolHeaders(exchange.getIn(), exchange.getOut());"
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,225,            Message out = exchange.getOut();
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,226,            if (out != null) {
components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java,227,"                doWriteResponse(out, response, exchange);"
camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java,163,"                LOG.trace(""Consumer is suspended so skip polling"");"
camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java,164,                try {
camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java,165,                    // sleep at most 1 sec
camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java,166,"                    Thread.sleep(Math.min(pollTimeout, 1000));"
camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java,167,                } catch (InterruptedException e) {
camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java,168,"                    LOG.debug(""Sleep interrupted, are we stopping? {}"", isStopping() || isStopped());"
camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java,170,                continue;
camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java,287,"                boolean sync = asyncProducer.process(exchange, new AsyncCallback() {"
camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java,350,
camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java,351,                callback.done(sync);
camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java,352,                return sync;
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,125,        if (endpoint.getDoneFileName() != null && !endpoint.isNoop() && complete) {
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,129,
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,130,            try {
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,131,                // delete done file
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,132,                boolean deleted = operations.deleteFile(doneFileName);
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,133,"                log.trace(""Done file: {} was deleted: {}"", doneFileName, deleted);"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,134,                if (!deleted) {
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,135,"                    log.warn(""Done file: "" + doneFileName + "" could not be deleted"");"
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,137,            } catch (Exception e) {
camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java,138,                handleException(e);
components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjComponent.java,63,"                    engines.put(remaining, engine);"
components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java,165,"        assertThat(component.getEngines().size(), is(1));"
components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java,166,"        assertThat(component.getEngines().get(settingsFile.getName()), is(notNullValue()));"
components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java,167,"        assertThat(component.getEngines().get(settingsFile.getName()).isStarted(), is(false));"
components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java,173,"        assertThat(component.getEngines().size(), is(1));"
components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java,174,"        assertThat(component.getEngines().get(settingsFile.getName()), is(notNullValue()));"
components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java,175,"        assertThat(component.getEngines().get(settingsFile.getName()).isStarted(), is(false));"
components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java,334,        component.start();
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,26,import org.apache.camel.util.CamelContextHelper;
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,27,import org.apache.camel.util.ObjectHelper;
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,58,"        ObjectHelper.notNull(camelContext, ""camelContext"", this);"
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,59,"        ObjectHelper.notNull(ref, ""ref"", this);"
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,60,
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,61,"        List answer = CamelContextHelper.lookup(camelContext, ref, List.class);"
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,62,        if (answer == null) {
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,63,"            throw new IllegalArgumentException(""Cannot find RouteContext with id "" + ref);"
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,64,        }
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinition.java,65,        return answer;
camel-core/src/main/java/org/apache/camel/model/RouteContextRefDefinitionHelper.java,134,
camel-core/src/main/java/org/apache/camel/util/jsse/SSLContextParameters.java,237,
camel-core/src/main/java/org/apache/camel/util/jsse/SSLContextParameters.java,243,     *
camel-core/src/main/java/org/apache/camel/util/jsse/SSLContextParameters.java,251,
components/camel-ahc-ws/src/test/java/org/apache/camel/component/ahc/ws/WssProducerTest.java,41,        sslContextFactory.setSslContext(defineSSLContextServerParameters().createSSLContext());
components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcEndpoint.java,244,                    SSLContext ssl = sslContextParameters.createSSLContext();
components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcEndpoint.java,252,                    SSLContext ssl = sslContextParameters.createSSLContext();
components/camel-apns/src/main/java/org/apache/camel/component/apns/factory/ApnsServiceFactory.java,195,            builder.withSSLContext(getSslContextParameters().createSSLContext());
components/camel-cometd/src/main/java/org/apache/camel/component/cometd/CometdComponent.java,223,            sslContextFactory.setSslContext(sslContextParameters.createSSLContext());
components/camel-etcd/src/main/java/org/apache/camel/component/etcd/AbstractEtcdEndpoint.java,96,            return configuration.getSslContextParameters().createSSLContext();
components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java,75,            SSLContext context = sslContextParameters.createSSLContext();
components/camel-http/src/main/java/org/apache/camel/component/http/SSLContextParametersSecureProtocolSocketFactory.java,28,import org.apache.commons.httpclient.ConnectTimeoutException;
components/camel-http/src/main/java/org/apache/camel/component/http/SSLContextParametersSecureProtocolSocketFactory.java,62,            this.context = params.createSSLContext();
components/camel-http/src/main/java/org/apache/camel/component/http/SSLContextParametersSecureProtocolSocketFactory.java,70,"    public Socket createSocket(String host, int port,"
components/camel-http/src/main/java/org/apache/camel/component/http/SSLContextParametersSecureProtocolSocketFactory.java,71,"                               InetAddress localAddress, int localPort) throws IOException, UnknownHostException {"
components/camel-http/src/main/java/org/apache/camel/component/http/SSLContextParametersSecureProtocolSocketFactory.java,76,"    public Socket createSocket(String host, int port,"
components/camel-http/src/main/java/org/apache/camel/component/http/SSLContextParametersSecureProtocolSocketFactory.java,77,"                               InetAddress localAddress, int localPort, HttpConnectionParams params) throws IOException, UnknownHostException,"
components/camel-http/src/main/java/org/apache/camel/component/http/SSLContextParametersSecureProtocolSocketFactory.java,78,        ConnectTimeoutException {
components/camel-http/src/test/java/org/apache/camel/component/http/HttpsSslContextParametersGetTest.java,33,                    new SSLContextParametersSecureProtocolSocketFactory(params);
components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java,285,"            builder.register(""https"", new SSLConnectionSocketFactory(sslContextParams.createSSLContext(), x509HostnameVerifier));"
components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java,286,"            builder.register(""https4"", new SSLConnectionSocketFactory(sslContextParams.createSSLContext(), x509HostnameVerifier));"
components/camel-irc/src/main/java/org/apache/camel/component/irc/CamelSSLIRCConnection.java,49,                                 SSLContextParameters sslContextParameters) {
components/camel-irc/src/main/java/org/apache/camel/component/irc/CamelSSLIRCConnection.java,68,                sslContext = sslContextParameters.createSSLContext();
components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcComponent.java,81,                                                 configuration.getSslContextParameters());
components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java,602,            answer.setSslContext(ssl.createSSLContext());
components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java,85,    private static LinkedInOAuthRequestFilter createRequestFilter(LinkedInConfiguration configuration) {
components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java,92,            final SSLContext sslContext = new SSLContextParameters().createSSLContext();
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Consumer.java,198,"            SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());"
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Consumer.java,225,"            SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());"
components/camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2Producer.java,316,"            SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());"
components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/HttpClientPipelineFactory.java,131,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/HttpServerPipelineFactory.java,141,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultClientPipelineFactory.java,114,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-netty/src/main/java/org/apache/camel/component/netty/DefaultServerPipelineFactory.java,131,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/HttpClientInitializerFactory.java,136,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/HttpServerInitializerFactory.java,136,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-netty4/src/main/java/org/apache/camel/component/netty4/DefaultClientInitializerFactory.java,115,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-netty4/src/main/java/org/apache/camel/component/netty4/DefaultServerInitializerFactory.java,134,            answer = configuration.getSslContextParameters().createSSLContext();
components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java,142,                clientBuilder.setSSLContext(sslContextParameters.createSSLContext());
components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java,275,        SSLContext context = scp.createSSLContext();
components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java,194,        sslContextFactory.setSslContext(contextParameters.createSSLContext());
components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/BulkApiIntegrationTest.java,41,        sslContextFactory.setSslContext(new SSLContextParameters().createSSLContext());
components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/RestApiIntegrationTest.java,74,        sslContextFactory.setSslContext(new SSLContextParameters().createSSLContext());
components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java,100,    private static void prepareMessageSenders(SpringWebserviceConfiguration configuration) {
components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java,131,"                messageSenders[i] = new AbstractHttpWebServiceMessageSenderDecorator((HttpUrlConnectionMessageSender) messageSender, configuration);"
components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java,148,
components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java,153,"        public AbstractHttpWebServiceMessageSenderDecorator(AbstractHttpWebServiceMessageSender delegate, SpringWebserviceConfiguration configuration) {"
components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java,172,                                sslContext = configuration.getSslContextParameters().createSSLContext();
components/camel-stomp/src/main/java/org/apache/camel/component/stomp/StompEndpoint.java,90,            stomp.setSslContext(configuration.getSslContextParameters().createSSLContext());
components/camel-stomp/src/test/java/org/apache/camel/component/stomp/StompBaseTest.java,134,            serverSslContext = getServerSSLContextParameters().createSSLContext();
components/camel-stomp/src/test/java/org/apache/camel/component/stomp/StompBaseTest.java,150,            clientSslContext = getClientSSLContextParameters().createSSLContext();
components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java,292,            sslContext = sslContextParameters.createSSLContext();
components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java,492,            sslContextFactory.setSslContext(sslContextParameters.createSSLContext());
components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketSSLContextInUriRouteExampleTest.java,109,        builder.setSSLContext(new SSLContextParameters().createSSLContext());
components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketSSLRouteExampleTest.java,77,        builder.setSSLContext(new SSLContextParameters().createSSLContext());
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,130,
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,168,
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,169,        if (is == null && this.context != null) {
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,170,"            LOG.trace(""Trying to open resource using the CamelContext ClassResolver [{}]."", context.getClassResolver());"
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,171,            is = context.getClassResolver().loadResourceAsStream(resource);
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,172,            if (is == null) {
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,173,"                LOG.trace(""Could not to open resource [{}] using the CamelContext ClassResolver [{}]."","
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,174,"                          resource, context.getClassResolver());"
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,175,            } else {
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,176,"                LOG.debug(""Opened resource [{}] using the CamelContext ClassResolver [{}]."","
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,177,"                          resource, this.getClass().getClassLoader());"
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,178,            }
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,179,        }
camel-core/src/main/java/org/apache/camel/util/jsse/JsseParameters.java,184,

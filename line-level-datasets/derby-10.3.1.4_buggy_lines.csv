File,LineNumber,src
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,209,  FromList fromList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,217,"    fromList, new SubqueryList(), new Vector());"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,221,"    fromList, new SubqueryList(), new Vector());"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,260,"    findType(((ConditionalNode)thenNode).thenElseList, fromList);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,269,"    findType(((ConditionalNode)elseNode).thenElseList, fromList);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,391,"   recastNullNodes(thenElseList, findType(thenElseList, fromList));"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,394,"  thenElseList.bindExpression(fromList,"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,395,"   subqueryList,"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,396,   aggregateVector);
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,397,
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1733,  //eg if getTables is called to only look for table types 'S' and
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1734,"  //'A', then 'S' will be used for first ? in TABLETYPE IN (?, ?, ?, ?)"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1735,"  //'A' will be used for second ? in TABLETYPE IN (?, ?, ?, ?) and"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1736,  //NULL will be used for third and fourth ?s in
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1738,"  //If the user hasn't asked for any specific table types, then the"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1739,"  //""else"" statement below will kick in. When the control comes to"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1740,"  //""else"" statement, it means that the user wants to see all the"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1741,"  //table types supported by Derby. And hence, we simply set first"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1742,"  //? to 'T', second ? to 'S', third ? to 'V' and fourth ? to 'A'."
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1743,"  //When a new table type is added to Derby in future, we will have"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1744,"  //to do another setString for that in the ""else"" statement for that"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1745,  //new table type.
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1746,  if (types != null  &&  types.length >= 1) {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1747,   int i=0;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1748,   final int numberOfTableTypesInDerby = 4;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1749,   for (; i<types.length; i++){
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1750,    /*
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1751,     * Let's assume for now that the table type first char
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1752,     * corresponds to JBMS table type identifiers.
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1753,     *
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1754,     * The reason I have i+4 is because there are already 3 ?s in
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1755,     * the getTables sql before the ?s in the IN clause. Hence
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1756,     * setString for table types should be done starting 4th
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1757,     * parameter.
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1758,     */
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1759,"    s.setString(i+4, types[i].substring(0, 1));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1760,   }
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1761,   for (; i<numberOfTableTypesInDerby; i++) {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1762,"    s.setNull(i+4, Types.CHAR);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1763,   }
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1764,  } else {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1765,"   s.setString(4, ""T"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1766,"   s.setString(5, ""S"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1767,"   s.setString(6, ""V"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1768,"   s.setString(7, ""A"");"
java/testing/org/apache/derbyTesting/junit/JDBC.java,69,     * just synonyms. Need work around for DERBY-1790 where
java/testing/org/apache/derbyTesting/junit/JDBC.java,70,     * passing a table type of SYNONYM fails.
java/testing/org/apache/derbyTesting/junit/JDBC.java,73,"        new String[] {""AA_DERBY-1790-SYNONYM""};"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,234,  //quoteStringIfNecessary is for bug 3476. If the schemaName and/or tableName has
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,235,"  //double quotes in it, this method will put them in quotes and replace every"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,236,  //double quote with 2 double quotes.
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,237,"  return quoteStringIfNecessary(getSchemaName()) + ""."" +"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,238,   quoteStringIfNecessary(getName());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,252, private String quoteStringIfNecessary(String name)
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,258,   return name;
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,205,     DataTypeDescriptor.getBuiltInDataTypeDescriptor(
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,206,"       Types.VARCHAR, true, tc"
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,207,         .getCastToCharWidth(leftOperand
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,208,"           .getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,218,     DataTypeDescriptor.getBuiltInDataTypeDescriptor(
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,219,"       Types.VARCHAR, true, tc"
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,220,         .getCastToCharWidth(rightOperand
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,221,"           .getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,457,    private ValueNode castArgToNationalString(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,458,"    ValueNode       vn,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,459,"    TypeCompiler    vnTC,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,460,    TypeId          vnTypeId)
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,461,        throws StandardException
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,462,    {
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,463,        ValueNode newNode =  (ValueNode)
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,464,            getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,465,"                C_NodeTypes.CAST_NODE,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,466,"                vn,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,467,"                new DataTypeDescriptor(vnTypeId,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,468,"                true,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,469,"                vnTC.getCastToCharWidth(vn.getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,470,                getContextManager());
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,471,
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,472,        ((CastNode) newNode).bindCastNodeOnly();
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,473,
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,474,        return newNode;
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,475,    }
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,109,"       DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true,"
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,110,            operand.getTypeCompiler().
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,111,           getCastToCharWidth(
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,112,"            operand.getTypeServices())),"
java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java,114,     ((CastNode) operand).bindCastNodeOnly();
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,741,"       DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true,"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,742,                       vnTC.getCastToCharWidth(
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,743,"                           vn.getTypeServices())),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1061,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1264,"            p.put(Attribute.CLIENT_SECURITY_MECHANISM,"
java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java,179,                info.getProperty(Attribute.CLIENT_SECURITY_MECHANISM)) != null)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,176,        suite.addTest(new NSSecurityMechanismTest(
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,178,        return TestConfiguration.clientServerDecorator((suite));
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,371,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,216,     * Test an explict load of the driver works as well.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,226,        Class.forName(driverClass);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,227,        testSuccessfulConnect();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,228,        testUnsuccessfulConnect();
java/engine/org/apache/derby/impl/sql/compile/Predicate.java,309,"  if (this.isRelationalOpPredicate()) // this is not ""in"""
java/engine/org/apache/derby/impl/sql/compile/Predicate.java,317,"  if (otherPred.isRelationalOpPredicate()) // other is not ""in"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,267,     * DERBY-2470.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,414,"        st.execute(""drop table ct"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,449,            ds.getConnection();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1195,"  if (sqlState.regionMatches(0,SQLState.DATABASE_NOT_FOUND,0,5) |"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1196,"   sqlState.regionMatches(0,SQLState.NO_SUCH_DATABASE,0,5))"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1198,  else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1199,"   if (sqlState.regionMatches(0,SQLState.LOGIN_FAILED,0,5) ||"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1200,"    sqlState.regionMatches(0,SQLState.AUTH_INVALID_USER_NAME,0,5))"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1202,  else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1278,   // need to set the security check code based on the reason the connection
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1279,"   // was denied, Derby doesn't say whether the userid or password caused"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1280,"   // the problem, so we will just return userid invalid"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1289,"   if (sqlState.regionMatches(0,SQLState.LOGIN_FAILED,0,5))"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1291,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1292,   return 0;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,588,"   throw newSQLException(SQLState.LOGIN_FAILED, MessageService.getTextMessage(MessageId.AUTH_INVALID));"
java/engine/org/apache/derby/jdbc/InternalDriver.java,200,"                                  SQLState.LOGIN_FAILED, MessageService.getTextMessage(MessageId.AUTH_INVALID));"
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,33,import java.sql.SQLTransientConnectionException;
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,68,            //NonTransientConnectionException
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,69,"            ex = new SQLTransientConnectionException(message, sqlState, errCode);"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,30,import java.sql.SQLTransientConnectionException;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,46,     * 08                          java.sql.SQLTransientConnectionException
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,75,            //NonTransientConnectionException
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,76,"            ex = new SQLTransientConnectionException(message, sqlState,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestJDBC40Exception.java,31,import java.sql.SQLTransientConnectionException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestJDBC40Exception.java,96,        } catch (SQLTransientConnectionException cone) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,94,"        ""\\S+@[0-9]+.* \\(XID = .*\\), \\(SESSIONID = [0-9]+\\), "" +"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,71,"    In case of a large log record that does not fit into a bufffer, it needs to"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,72,    be written directly to the disk instead of going through the log buffers.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,73,    In this case the log record write gets broken into three parts:
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,74,        1) Write checksum log record and LOG RECORD HEADER (length + instant)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,75,        2) Write the log record.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,76,        3) Write the trailing length of the log record.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,117, private boolean directWrite = false; //true when log is written directly to file.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,200,    * this space when buffer is switched or while doing direct write to the log file.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,212, private byte[] db = new byte[LOG_RECORD_TRAILER_SIZE];
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,213,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,214,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,261,  if (total_log_record_length <= currentBuffer.bytes_free)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,262,        {
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,263,            byte[] b    = currentBuffer.buffer;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,264,            int    p    = currentBuffer.position;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,265,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,266,            // writeInt(length)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,267,"   p = writeInt(length, b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,268,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,269,            // writeLong(instant)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,270,"   p = writeLong(instant, b , p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,271,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,272,"            // write(data, data_offset, length - optional_data_length)"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,273,            int transfer_length = (length - optional_data_length);
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,274,"   System.arraycopy(data, data_offset, b, p, transfer_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,275,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,276,            p += transfer_length;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,277,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,278,            if (optional_data_length != 0)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,279,            {
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,280,                // write(
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,281,"                //   optional_data, optional_data_offset, optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,282,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,283,                System.arraycopy(
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,284,"                    optional_data, optional_data_offset,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,285,"                    b,             p,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,286,                    optional_data_length);
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,287,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,288,                p += optional_data_length;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,289,            }
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,290,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,291,            // writeInt(length)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,292,"   p = writeInt(length, b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,293,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,294,   currentBuffer.position   = p;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,296,  }
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,297,        else
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,298,        {
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,299,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,300,   /** Because current log record will never fit in a single buffer
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,301,    * a direct write to the log file is required instead of
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,302,    * writing the log record through  the log bufffers.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,303,    */
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,304,   directWrite = true;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,305,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,306,   byte[] b    = currentBuffer.buffer;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,307,            int    p    = currentBuffer.position;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,308,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,309,            // writeInt(length)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,310,"   p = writeInt(length , b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,311,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,312,            // writeLong(instant)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,313,"   p = writeLong(instant, b, p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,314,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,315,   currentBuffer.position   = p;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,316,   currentBuffer.bytes_free -= LOG_RECORD_HEADER_SIZE;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,317,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,318,   /** using a seperate small buffer to write the traling length
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,319,    * instead of the log buffer because data portion will be
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,320,    * written directly to log file after the log buffer is
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,321,    * flushed and the trailing length should be written after that.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,322,    */
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,323,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,324,   // writeInt(length)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,325,"   writeInt(length , db, 0);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,327,   if(writeChecksum)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,328,   {
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,329,    checksumLogOperation.reset();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,330,"    checksumLogOperation.update(b, checksumLogRecordSize, p - checksumLogRecordSize);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,331,"    checksumLogOperation.update(data, data_offset, length - optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,332,    if (optional_data_length != 0)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,333,    {
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,334,"     checksumLogOperation.update(optional_data, optional_data_offset, optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,335,    }
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,337,    // update the checksum to include the trailing length.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,338,"    checksumLogOperation.update(db, 0, LOG_RECORD_TRAILER_SIZE);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,339,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,340,    // write checksum log record to the log buffer
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,341,    writeChecksumLogRecord();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,342,   }
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,343,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,344,
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,345,   // now do the  writes directly to the log file.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,347,   // flush all buffers before wrting directly to the log file.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,348,   flushLogAccessFile();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,350,"   // Note:No Special Synchronization required here ,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,351,   // There will be nothing to write by flushDirtyBuffers that can run
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,352,   // in parallel to the threads that is executing this code. Above
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,353,   // flush call should have written all the buffers and NO new log will
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,354,   // get added until the following direct log to file call finishes.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,357,   // write the rest of the log directltly to the log file.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,358,"            writeToLog(data, data_offset, length - optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,359,            if (optional_data_length != 0)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,360,            {
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,361,                writeToLog(
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,362,"                    optional_data, optional_data_offset, optional_data_length);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,363,            }
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,365,   // write the trailing length
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,366,"   writeToLog(db,0, 4);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,367,   directWrite = false;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,368,  }
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,574,   if(writeChecksum && !directWrite)
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,578,    writeChecksumLogRecord();
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,806, /*
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,807,  * generate the checkum log record and write it into the log buffer.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,809," private void writeChecksumLogRecord() throws IOException, StandardException"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,810, {
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,812,  byte[] b    = currentBuffer.buffer;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,816,"  p = writeInt(checksumLength, b , p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,819,"  p = writeLong(checksumInstant, b , p);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,822,  logOutputBuffer.setData(b);
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,830,"    logFactory.encrypt(b, LOG_RECORD_HEADER_SIZE, checksumLength,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,831,"           b, LOG_RECORD_HEADER_SIZE);"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,842,"  p = writeInt(checksumLength, b, p );"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,293,   mb.upCast(leftInterfaceType);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,2914,        assertTrue(str.matches(CONNSTRING_FORMAT));
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4685,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4690,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4748,"                        setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4759,"                        setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4770,"                        setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8364,"    private static void setAsCharacterStream(PreparedStatement ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8373,
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,667,
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,5065,  int insertFlag = Page.INSERT_INITIAL | Page.INSERT_OVERFLOW;
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,5193,   if (page != null)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,76,              dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,83,              dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,127,              dumpExpectedSQLExceptions(e);
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,372,     *      totalSpace * (1 - spareSpace/100) -
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,373,     *      slotEntrySize * - 16 - OVERFLOW_POINTER_SIZE;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,375, protected int maxFieldSize;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,699,        initSpace();
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,701,  if (pageSize >= 65536)
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,702,   slotFieldSize = LARGE_SLOT_SIZE;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,703,  else
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,704,   slotFieldSize = SMALL_SLOT_SIZE;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,705,
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,706,  slotEntrySize = 3 * slotFieldSize;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,3341,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1356,            dbname +
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1357,"            ""), "" +"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1358,            LanguageConnectionContext.dbnameStr +
java/client/org/apache/derby/client/am/Clob.java,50,
java/client/org/apache/derby/client/am/Clob.java,54,
java/client/org/apache/derby/client/am/Clob.java,57,
java/client/org/apache/derby/client/am/Clob.java,60,
java/client/org/apache/derby/client/am/Clob.java,71,
java/client/org/apache/derby/client/am/Clob.java,74,
java/client/org/apache/derby/client/am/Clob.java,93,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,96,
java/client/org/apache/derby/client/am/Clob.java,106,
java/client/org/apache/derby/client/am/Clob.java,123,"                throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,124,"                    new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Clob.java,147,
java/client/org/apache/derby/client/am/Clob.java,150,
java/client/org/apache/derby/client/am/Clob.java,155,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,164,
java/client/org/apache/derby/client/am/Clob.java,167,
java/client/org/apache/derby/client/am/Clob.java,172,
java/client/org/apache/derby/client/am/Clob.java,174,     * Create a <code>Clob</code> object for a Clob value stored
java/client/org/apache/derby/client/am/Clob.java,176,     * @param agent context for this <code>Clob</code>
java/client/org/apache/derby/client/am/Clob.java,180,"    public Clob(Agent agent, int locator)"
java/client/org/apache/derby/client/am/Clob.java,198,
java/client/org/apache/derby/client/am/Clob.java,201,
java/client/org/apache/derby/client/am/Clob.java,217,
java/client/org/apache/derby/client/am/Clob.java,221,
java/client/org/apache/derby/client/am/Clob.java,251,   * which only zero-length substrings can be returned.
java/client/org/apache/derby/client/am/Clob.java,266,
java/client/org/apache/derby/client/am/Clob.java,270,
java/client/org/apache/derby/client/am/Clob.java,285,
java/client/org/apache/derby/client/am/Clob.java,293,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,294,"                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE),"
java/client/org/apache/derby/client/am/Clob.java,295,                        new Long(pos));
java/client/org/apache/derby/client/am/Clob.java,311,"    private String getSubStringX(long pos, int length) throws SqlException"
java/client/org/apache/derby/client/am/Clob.java,332,
java/client/org/apache/derby/client/am/Clob.java,336,
java/client/org/apache/derby/client/am/Clob.java,378,
java/client/org/apache/derby/client/am/Clob.java,382,
java/client/org/apache/derby/client/am/Clob.java,425,
java/client/org/apache/derby/client/am/Clob.java,429,
java/client/org/apache/derby/client/am/Clob.java,440,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,444,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,445,"                        new ClientMessageId(SQLState.BLOB_BAD_POSITION),"
java/client/org/apache/derby/client/am/Clob.java,467,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,471,
java/client/org/apache/derby/client/am/Clob.java,474,            //Locator support is available. Hence call
java/client/org/apache/derby/client/am/Clob.java,475,            //CLOBGETPOSITIONFROMSTRING to determine the position
java/client/org/apache/derby/client/am/Clob.java,490,
java/client/org/apache/derby/client/am/Clob.java,494,
java/client/org/apache/derby/client/am/Clob.java,505,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,506,"                        new ClientMessageId(SQLState.BLOB_BAD_POSITION),"
java/client/org/apache/derby/client/am/Clob.java,511,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,531,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,572,
java/client/org/apache/derby/client/am/Clob.java,576,
java/client/org/apache/derby/client/am/Clob.java,597,
java/client/org/apache/derby/client/am/Clob.java,601,
java/client/org/apache/derby/client/am/Clob.java,624,"                new ClientMessageId(SQLState.BLOB_BAD_POSITION),"
java/client/org/apache/derby/client/am/Clob.java,632,        if ((offset < 0) || offset > str.length() ) {
java/client/org/apache/derby/client/am/Clob.java,633,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,637,
java/client/org/apache/derby/client/am/Clob.java,643,
java/client/org/apache/derby/client/am/Clob.java,678,
java/client/org/apache/derby/client/am/Clob.java,682,
java/client/org/apache/derby/client/am/Clob.java,690,
java/client/org/apache/derby/client/am/Clob.java,699,                    outStream = new
java/client/org/apache/derby/client/am/Clob.java,715,
java/client/org/apache/derby/client/am/Clob.java,719,
java/client/org/apache/derby/client/am/Clob.java,750,
java/client/org/apache/derby/client/am/Clob.java,754,
java/client/org/apache/derby/client/am/Clob.java,766,
java/client/org/apache/derby/client/am/Clob.java,768,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,772,
java/client/org/apache/derby/client/am/Clob.java,776,
java/client/org/apache/derby/client/am/Clob.java,817,
java/client/org/apache/derby/client/am/Clob.java,820,
java/client/org/apache/derby/client/am/Clob.java,824,
java/client/org/apache/derby/client/am/Clob.java,871,     *
java/client/org/apache/derby/client/am/Clob.java,872,     * @throws SQLException.
java/client/org/apache/derby/client/am/Clob.java,925,
java/client/org/apache/derby/client/am/Clob.java,967,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,985,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,1005,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Clob.java,1006,"                new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Clob.java,1013,     * Checks is isValid is true. If it is not true throws
java/client/org/apache/derby/client/am/Clob.java,1032,        unicodeStream_ = super.materializeStream(isAsciiStream() ?
java/client/org/apache/derby/client/am/Clob.java,1033,                                                        asciiStream_ :
java/client/org/apache/derby/client/am/Clob.java,1038,
java/client/org/apache/derby/client/am/Clob.java,1042,
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,147,                ((Resetable) storeStream).initStream();
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,155,"            this.clob = new StoreStreamClob(storeStream, this);"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,33,import java.io.InputStream;
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,136,    /*
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,137,      Initialize.  Reopen the container. This will have the effect of
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,138,"      getting an intent shared lock on the table, which will stay around until"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,139,      the end of the transaction (or until the enclosing blob/clob object is
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,140,      closed). Also get a read lock on the appropriate row.
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,141,    */
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,144,        // it is possible that the transaction in which the stream was
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,151,        We might want to use the mode and isolation level of the container.
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,152,"        This would have the advantage that, if the isolation level"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,153,"        is READ_COMMITTED, resources would be freed if blobs/clob finalizers are"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,154,        called (e.g. they are garbage collected) before the end of transaction.
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,155,"        If the mode was MODE_CONTAINER, openContainer would get an S lock on the"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,156,"        table instead of an IS lock, and lockRecordForRead would have no effect."
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,157,
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,158,"        To do this, need to consider:"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,159,        Sometimes the container's locking policy may NOT reflect the correct
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,160,"        locking policy. For example, if the container is a table (not an index)"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,161,"        and Access handles the locking of the table via an index, the container's"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,162,        locking policy would be set to do no locking.
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,163,"        Moreover, if the container is an index, the locking policy would"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,164,        always be set to do no locking.
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,166,
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,170,"                TransactionController.ISOLATION_REPEATABLE_READ, true);"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,185,      Close the container associated with this stream. (In the future if we use
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,186,"      a read committed isolation mode, this will also free the associated IS"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,187,      table lock and the associated S row lock.)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,162,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,163,        blob = BlobClobTestSetup.getSampleBlob(getConnection());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,164,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,165,        //call the buildHashSetMethod to initialize the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,166,        //HashSet with the method signatures that are exempted
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,167,        //from throwing a SQLException after free has been called
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,168,        //on the Clob object.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,169,        buildHashSet();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,173,        blob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,174,        blob = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,611,    public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,612,        return  new BlobClobTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,613,                TestConfiguration.defaultSuite(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,614,"                BlobTest.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,615,                false));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,157,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,158,        clob = BlobClobTestSetup.getSampleClob(getConnection());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,159,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,160,        //call the buildHashSetMethod to initialize the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,161,        //HashSet with the method signatures that are exempted
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,162,        //from throwing a SQLException after free has been called
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,163,        //on the Clob object.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,164,        buildHashSet();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,168,        clob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,169,        clob = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,201,"        throws IllegalAccessException, InvocationTargetException, SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,202,            InputStream asciiStream = clob.getAsciiStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,203,            Reader charStream  = clob.getCharacterStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,204,            clob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,205,            //testing the idempotence of the free() method
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,206,            //the method can be called multiple times on
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,207,            //the same instance. subsequent calls after
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,208,            //the first are treated as no-ops
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,209,            clob.free();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,210,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,211,            //clob becomes invalid after the first call
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,212,            //to the free method so testing calling
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,213,            //a method on this invalid object should throw
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,214,            //an SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,215,            buildMethodList(clob);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,460,     * @throws SQLException.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,704,     * Create test suite for this test.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,706,    public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,707,        return  new BlobClobTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,708,                TestConfiguration.defaultSuite(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,709,"                ClobTest.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,710,                false));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,1310,            conn2.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2276,        commit();
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,196,   int attach_id = Rn.nextInt(count - 1);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,275,   int id = Rn.nextInt(id_count - 1);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,280,    int for_id = Rn.nextInt(id_count - 1);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,380,    int message_id = Rn.nextInt(count - 1);
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,426,"  System.out.println(""num: "" + num);"
java/client/org/apache/derby/client/am/PreparedStatement.java,2417,                new Integer(parameterMetaData_.columns_));
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,108,"  internalSavePointName = ""ISSP"" + hashCode();"
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,99,    // Counter used to create unique savepoint names.
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,100,    private static long nextNameId = Long.MIN_VALUE;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,101,
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,111,        internalSavePointName = createInternalSavepointName();
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,112,
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,121,    /**
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,122,     * Generate a unique name for this savepoint.
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,123,     * This method should only be called from the constructor.
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,124,     *
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,125,     * @return the savepoint name.
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,126,     */
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,127,    private synchronized static String createInternalSavepointName() {
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,128,"        return ""ISSP"" + nextNameId++;"
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,129,    }
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,130,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,54,"        {""APP"",""dan"",""kreg"",""jeff"",""ames"",""jerry"",""francois"",""jamie"",""howardR""};"
java/client/org/apache/derby/client/am/PreparedStatement.java,2413,        if (parameterMetaData_ == null || parameterIndex < 1 || parameterIndex > parameterMetaData_.columns_) {
java/client/org/apache/derby/client/am/PreparedStatement.java,2414,         int totalParameters = 0;
java/client/org/apache/derby/client/am/PreparedStatement.java,2415,            if (parameterMetaData_ != null)
java/client/org/apache/derby/client/am/PreparedStatement.java,2416,             //Load totalParmeters with correct number of parameters if
java/client/org/apache/derby/client/am/PreparedStatement.java,2417,             //ParameterMetaData_ is not null. We will need that in the error
java/client/org/apache/derby/client/am/PreparedStatement.java,2418,             //message.
java/client/org/apache/derby/client/am/PreparedStatement.java,2419,             totalParameters = parameterMetaData_.columns_;
java/client/org/apache/derby/client/am/PreparedStatement.java,2423,                new Integer(totalParameters));
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java,1149,         if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java,1150,"          //note that SQLState is XCL13. For setString above, the"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java,1151,          //SQLState is XCL14. I have entered DERBY-3139 for this
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java,1152,          //difference in SQLState.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java,1153,"          assertSQLState(""XCL13"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java,1154,         else
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java,1155,"          assertSQLState(""07009"", e);"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,795,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,796,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,797,"    // DB2 LUW does not support Java object types for SMALLINT, INTEGER, BIGINT, REAL, DOUBLE"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,798,    // and these are the only types that can map to a primitive or an object type according
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,799,    // to SQL part 13. So always map to the primitive type. We can not use the getPrimitiveSignature()
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,800,    // as it (incorrectly but historically always has) maps a DECIMAL to a double.
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,801,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,802,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,814,        switch (returnType.getJDBCTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,815,        case java.sql.Types.SMALLINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,816,        case java.sql.Types.INTEGER:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,817,        case java.sql.Types.BIGINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,818,        case java.sql.Types.REAL:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,819,        case java.sql.Types.DOUBLE:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,820,         TypeCompiler tc = getTypeCompiler(returnTypeId);
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,821,         requiredType = tc.getCorrespondingPrimitiveTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,822,         if (!routineInfo.calledOnNullInput() && routineInfo.getParameterCount() != 0)
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,823,         {
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,824,          promoteName = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,825,         }
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,826,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,827,         break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,828,        default:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,829,         requiredType = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,830,         break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,831,        }
java/engine/org/apache/derby/catalog/SystemProcedures.java,1564,        try {
java/engine/org/apache/derby/catalog/SystemProcedures.java,1565,"            // Validate the name, however the name stored in"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1566,"            // the properties is in the external format, as a"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1567,            // quoted identifier if required. The external form
java/engine/org/apache/derby/catalog/SystemProcedures.java,1568,            // is what the user passes into this method so that
java/engine/org/apache/derby/catalog/SystemProcedures.java,1569,            // gets used in modifying the lists.
java/engine/org/apache/derby/catalog/SystemProcedures.java,1570,            IdUtil.getUserAuthorizationId(userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1575,"                removeFromAccessList(Property.READ_ONLY_ACCESS_USERS_PROPERTY,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1576,                        userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1580,            {
java/engine/org/apache/derby/catalog/SystemProcedures.java,1581,"                removeFromAccessList(Property.FULL_ACCESS_USERS_PROPERTY,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1582,                        userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1587,"                removeFromAccessList(Property.FULL_ACCESS_USERS_PROPERTY,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1588,                        userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1589,"                removeFromAccessList(Property.READ_ONLY_ACCESS_USERS_PROPERTY,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1590,                        userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1591,                return;
java/engine/org/apache/derby/catalog/SystemProcedures.java,1597,            String addList = SYSCS_GET_DATABASE_PROPERTY(addListProperty);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1598,"            SYSCS_SET_DATABASE_PROPERTY(addListProperty,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1599,"                IdUtil.appendId(userName, addList));"
java/engine/org/apache/derby/iapi/util/IdUtil.java,61,   Delimit the identifier provided.
java/engine/org/apache/derby/iapi/util/IdUtil.java,64, private static String delimitId(String id)
java/engine/org/apache/derby/iapi/util/IdUtil.java,68,     char[] charArray = id.toCharArray();
java/engine/org/apache/derby/iapi/util/IdUtil.java,69,
java/engine/org/apache/derby/iapi/util/IdUtil.java,70,  for (int ix = 0; ix < charArray.length; ix++){
java/engine/org/apache/derby/iapi/util/IdUtil.java,71,   char currentChar = charArray[ix];
java/engine/org/apache/derby/iapi/util/IdUtil.java,90,            return delimitId(id2);
java/engine/org/apache/derby/iapi/util/IdUtil.java,92,   delimitId(id1) +
java/engine/org/apache/derby/iapi/util/IdUtil.java,94,   delimitId(id2);
java/engine/org/apache/derby/iapi/util/IdUtil.java,106,   sb.append(delimitId(ids[ix]));
java/engine/org/apache/derby/iapi/util/IdUtil.java,306,   return delimitId(b.toString()); //Put the quotes back.
java/engine/org/apache/derby/iapi/util/IdUtil.java,584,   sb.append(IdUtil.delimitId(ids[ix]));
java/engine/org/apache/derby/iapi/util/IdUtil.java,675,   Append an id in external form.
java/engine/org/apache/derby/iapi/util/IdUtil.java,676,   @return the list with the id appended.
java/engine/org/apache/derby/iapi/util/IdUtil.java,679," public static String appendId(String id, String list)"
java/engine/org/apache/derby/iapi/util/IdUtil.java,683,   return id;
java/engine/org/apache/derby/iapi/util/IdUtil.java,685,"   return list+"",""+id;"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,243,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,249,"                jdbcUserName, connUser.getMetaData().getUserName());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,820,"        csSetAccess.setString(1, ""123""); // not an identifier."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,821,"        csSetAccess.setString(2, ""FULLACCESS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,822,"        assertStatementError(""28502"", csSetAccess);"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1634,            String sqlUser = IdUtil.getUserAuthorizationId(userName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1638,"            if (IdUtil.idOnList(sqlUser, fullUserList))"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1643,"            if (IdUtil.idOnList(sqlUser, readOnlyUserList))"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,257,"            //JDBC.assertSingleValueResultSet(psGetAccess.executeQuery(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,258,"            //        ""READONLYACCESS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,272,"            //JDBC.assertSingleValueResultSet(psGetAccess.executeQuery(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,273,"            //        ""FULLACCESS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,293,"            //JDBC.assertSingleValueResultSet(psGetAccess.executeQuery(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,294,"            //        ""READONLYACCESS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,735,"        psGetAccess.setString(1, ""jamie"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,741,"        psGetAccess.setString(1, ""system"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,747,"        psGetAccess.setString(1, ""mickEy"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,768,"        psGetAccess.setString(1, ""miCKEY"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,770,"        psGetAccess.setString(1, ""jamie"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,774,"        psGetAccess.setString(1, ""system"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,785,"        psGetAccess.setString(1, ""miCKEY"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,787,"        psGetAccess.setString(1, ""jamie"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,791,"        psGetAccess.setString(1, ""system"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,906,        // Clear out the properties to ensure we start afresh
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,907,"        setDatabaseProperty(""derby.database.fullAccessUsers"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,908,"                null, conn1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,909,"        setDatabaseProperty(""derby.database.readOnlyAccessUsers"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,910,"                null, conn1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,911,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,912,"        csSetAccess.setString(1, ""dan"");"
java/drda/org/apache/derby/impl/drda/DssTrace.java,100,  private static final char hexDigit [] = {
java/drda/org/apache/derby/impl/drda/DssTrace.java,163,  protected void startComBufferTrace (String fileName)
java/drda/org/apache/derby/impl/drda/DssTrace.java,166,      try {
java/drda/org/apache/derby/impl/drda/DssTrace.java,170,"          comBufferWriter = new java.io.PrintWriter (new java.io.BufferedWriter (new java.io.FileWriter (fileName), 4096));"
java/drda/org/apache/derby/impl/drda/DssTrace.java,184,      catch (java.io.IOException e) {
java/drda/org/apache/derby/impl/drda/DssTrace.java,185,        // The IOException is currently ignored.  Handling should be added.
java/drda/org/apache/derby/impl/drda/DssTrace.java,186,      }
java/drda/org/apache/derby/impl/drda/DssTrace.java,188,  }
java/drda/org/apache/derby/impl/drda/DssTrace.java,201,        comBufferWriter.flush();
java/drda/org/apache/derby/impl/drda/DssTrace.java,202,        comBufferWriter.close();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1428,"      sendMessage(writer, ERROR,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1429,"       localizeMessage(""DRDA_SessionNotFound.U"","
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1430,"       (session.langUtil == null) ? langUtil : session.langUtil,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1431,       new String [] {new Integer(sessionArg).toString()}));
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3360,   setTraceAll(on);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3363,    {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3364,     Session session = (Session) e.nextElement();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3366,      session.setTraceOn(traceDirectory);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3378,     session.setTraceOn(traceDirectory);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3385,  return true;
java/drda/org/apache/derby/impl/drda/Session.java,127, protected void initTrace(String traceDirectory)
java/drda/org/apache/derby/impl/drda/Session.java,134,  traceOn = true;
java/drda/org/apache/derby/impl/drda/Session.java,145, protected void setTraceOn(String traceDirectory)
java/drda/org/apache/derby/impl/drda/Session.java,149,  initTrace(traceDirectory);
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java,48,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,408,        byte[]          inputBuffer = new byte[ 1000 ];
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,410,        InputStream is = _inputStreamHolder[ 0 ];
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,202,   String classpath;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,203,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,204,   try {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,205,"    classpath = System.getProperty(""java.class.path"");"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,213,    ZipInfoProperties zip[]= Main.getAllInfo (classpath);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,292,  private static String getJavaProperty (String whichProperty) {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,294,    String property;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,295,"    String unavailable = Main.getTextMessage (""SIF01.H"");"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,298,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,299,"      property = System.getProperty (whichProperty, unavailable);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,300,      return property;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,892,    private static ZipInfoProperties checkForInfo(String cpEntry)
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,894,        File f = new File(cpEntry);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,895,        if ( ! f.exists())
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,896,        {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,897,            return null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,898,        }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,900,        if (f.isDirectory())
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,901,        {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,902,            ZipInfoProperties zip = checkDirectory(cpEntry);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,903,            return zip;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,904,        }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,906,        if (f.isFile())
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,907,        {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,908,            ZipInfoProperties zip = checkFile(cpEntry);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,909,            return zip;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,910,        }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,911,        return null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2807,"        st.execute(""create table brit13 (i int not null, j int not null, k """
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2808,"                + ""int, unique (i,j))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2844,        // not used unless DERBY-3182 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2845,        // String [][] expRSK =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2846,"        //    {""2"", ""K"", ""4"", ""INTEGER"", ""4"", null, ""10"", ""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2901,        // DERBY-3182: we aren't handling nullOk flag correctly we
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2902,"        // just drop nullable cols, we should skip an answer that"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2903,        // has nullable cols in it instead and look for another one.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2904,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2905,"        // result: columns i, j (WRONG) the correct answer is k:"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2906,        // the non-null columns of the table
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,26, What's the current JDK runtime environment.
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,34,"  <LI> 2 - J2SE_13- JDK 1.2, 1.3"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,42, public static final int J2SE_13 = 2;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,83,"   javaVersion = System.getProperty(""java.specification.version"", ""1.3"");"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,88,"   javaVersion = ""1.3"";"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,91,"  if (javaSpec != null && javaSpec.startsWith(""J2ME""))"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,93,   // IBM's WCTME 5.7 returns these values for CDC 1.0 profiles.
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,94,"   // ""J2ME Foundation Specification"""
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,95,   //
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,96,
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,97,   // Foundation 1.0 and Personal Profile 1.0 based
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,98,   // upon CDC 1.0 which is JDK 1.3 based
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,99,   id = J2SE_13;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,107,"   if (javaVersion.equals(""1.2"") || javaVersion.equals(""1.3""))"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,108,   {
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,109,    id = J2SE_13; //jdk1.3 is still Java2 platform with the same API
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,110,   }
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,111,"   else if (javaVersion.equals(""1.4""))"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,132,    id = J2SE_13;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,165,"  case J2SE_13: return J2ME ? ""J2ME - JDBC for CDC/FP 1.0"" : ""J2SE 1.3 - JDBC 2.1"";"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,166,"  case J2SE_14: return ""J2SE 1.4 - JDBC 3.0"";"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1666,  if( JVMInfo.JDK_ID >= JVMInfo.J2SE_14)
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,185,"        long autoincStart, long autoincInc)"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3681,"                    (UUID) null, 0, 0);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,3865,"            0, 0);"
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,226,        new SQLLongint(autoincStart));
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,323,"  long autoincStart, autoincInc;"
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,396,"  /* 7th column is AUTOINCREMENTVALUE, not cached in descriptor (long) */"
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,412,"       defaultUUID, autoincStart, autoincInc);"
java/client/org/apache/derby/client/ClientPooledConnection.java,27,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/LogicalConnection.java,137,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,138,        return physicalConnection_.createStatement();
java/client/org/apache/derby/client/am/LogicalConnection.java,142,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,143,        return physicalConnection_.prepareStatement(sql);
java/client/org/apache/derby/client/am/LogicalConnection.java,156,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,157,        return physicalConnection_.prepareCall(sql);
java/client/org/apache/derby/client/am/LogicalConnection.java,161,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,162,        return physicalConnection_.nativeSQL(sql);
java/client/org/apache/derby/client/am/LogicalConnection.java,166,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,167,        physicalConnection_.setAutoCommit(autoCommit);
java/client/org/apache/derby/client/am/LogicalConnection.java,171,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,172,        return physicalConnection_.getAutoCommit();
java/client/org/apache/derby/client/am/LogicalConnection.java,176,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,177,        physicalConnection_.commit();
java/client/org/apache/derby/client/am/LogicalConnection.java,181,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,182,        physicalConnection_.rollback();
java/client/org/apache/derby/client/am/LogicalConnection.java,186,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,187,        physicalConnection_.setTransactionIsolation(level);
java/client/org/apache/derby/client/am/LogicalConnection.java,191,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,192,        return physicalConnection_.getTransactionIsolation();
java/client/org/apache/derby/client/am/LogicalConnection.java,196,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,197,        return physicalConnection_.getWarnings();
java/client/org/apache/derby/client/am/LogicalConnection.java,201,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,202,        physicalConnection_.clearWarnings();
java/client/org/apache/derby/client/am/LogicalConnection.java,206,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,207,        return physicalConnection_.getMetaData();
java/client/org/apache/derby/client/am/LogicalConnection.java,211,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,212,        physicalConnection_.setReadOnly(readOnly);
java/client/org/apache/derby/client/am/LogicalConnection.java,216,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,217,        return physicalConnection_.isReadOnly();
java/client/org/apache/derby/client/am/LogicalConnection.java,221,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,222,        physicalConnection_.setCatalog(catalog);
java/client/org/apache/derby/client/am/LogicalConnection.java,226,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,227,        return physicalConnection_.getCatalog();
java/client/org/apache/derby/client/am/LogicalConnection.java,232,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,233,"        return physicalConnection_.createStatement(resultSetType, resultSetConcurrency);"
java/client/org/apache/derby/client/am/LogicalConnection.java,239,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,240,"        return physicalConnection_.prepareStatement(sql, resultSetType, resultSetConcurrency);"
java/client/org/apache/derby/client/am/LogicalConnection.java,246,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,247,"        return physicalConnection_.prepareCall(sql, resultSetType, resultSetConcurrency);"
java/client/org/apache/derby/client/am/LogicalConnection.java,251,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,252,        return physicalConnection_.getTypeMap();
java/client/org/apache/derby/client/am/LogicalConnection.java,256,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,257,        physicalConnection_.setTypeMap(map);
java/client/org/apache/derby/client/am/LogicalConnection.java,262,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,263,"        return physicalConnection_.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);"
java/client/org/apache/derby/client/am/LogicalConnection.java,269,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,270,"        return physicalConnection_.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);"
java/client/org/apache/derby/client/am/LogicalConnection.java,276,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,277,"        return physicalConnection_.prepareStatement(sql, resultSetType, resultSetConcurrency,"
java/client/org/apache/derby/client/am/LogicalConnection.java,278,                resultSetHoldability);
java/client/org/apache/derby/client/am/LogicalConnection.java,283,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,284,"        return physicalConnection_.prepareStatement(sql, autoGeneratedKeys);"
java/client/org/apache/derby/client/am/LogicalConnection.java,289,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,290,"        return physicalConnection_.prepareStatement(sql, columnIndexes);"
java/client/org/apache/derby/client/am/LogicalConnection.java,295,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,296,"        return physicalConnection_.prepareStatement(sql, columnNames);"
java/client/org/apache/derby/client/am/LogicalConnection.java,300,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,301,        physicalConnection_.setHoldability(holdability);
java/client/org/apache/derby/client/am/LogicalConnection.java,305,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,306,        return physicalConnection_.getHoldability();
java/client/org/apache/derby/client/am/LogicalConnection.java,310,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,311,        return physicalConnection_.setSavepoint();
java/client/org/apache/derby/client/am/LogicalConnection.java,315,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,316,        return physicalConnection_.setSavepoint(name);
java/client/org/apache/derby/client/am/LogicalConnection.java,320,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,321,        physicalConnection_.rollback(savepoint);
java/client/org/apache/derby/client/am/LogicalConnection.java,325,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection.java,326,        physicalConnection_.releaseSavepoint(savepoint);
java/client/org/apache/derby/client/am/SqlCode.java,53,    public final static SqlCode disconnectError = new SqlCode(-4499);
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,68,"   assertEquals(-4499, e.getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,87,"   assertEquals(-4499, e.getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3280,        SQLException sqle = event.getSQLException();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3281,        if (sqle != null)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3282,"            System.out.print(""DataSourceTest-"" + catcher + ""; SQLSTATE="""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3283,                + sqle.getSQLState());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3289,        SQLException sqle = event.getSQLException();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3290,        if (sqle != null)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3291,"            System.out.print(""DataSourceTest-"" + catcher + ""; SQLSTATE="" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3292,                sqle.getSQLState());
java/testing/org/apache/derbyTesting/system/nstest/NsTest.java,313,   if ((sqe.getErrorCode() == -4499)
java/client/org/apache/derby/client/am/LogicalConnection40.java,57,  checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,58,"        return physicalConnection_.createArrayOf( typeName, elements );"
java/client/org/apache/derby/client/am/LogicalConnection40.java,63,  checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,64,        return physicalConnection_.createBlob();
java/client/org/apache/derby/client/am/LogicalConnection40.java,69,  checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,70,        return physicalConnection_.createClob();
java/client/org/apache/derby/client/am/LogicalConnection40.java,75,  checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,76,        return physicalConnection_.createNClob();
java/client/org/apache/derby/client/am/LogicalConnection40.java,81,  checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,82,        return physicalConnection_.createSQLXML();
java/client/org/apache/derby/client/am/LogicalConnection40.java,87,  checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,88,"        return physicalConnection_.createStruct( typeName, attributes );"
java/client/org/apache/derby/client/am/LogicalConnection40.java,103, checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,104, return physicalConnection_.getClientInfo();
java/client/org/apache/derby/client/am/LogicalConnection40.java,119, checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,120, return physicalConnection_.getClientInfo(name);
java/client/org/apache/derby/client/am/LogicalConnection40.java,130,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,131,        return ((java.sql.Connection) physicalConnection_).getTypeMap();
java/client/org/apache/derby/client/am/LogicalConnection40.java,149,        // Check if we have a underlying physical connection
java/client/org/apache/derby/client/am/LogicalConnection40.java,150,        if (physicalConnection_ == null) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,151,            return false;
java/client/org/apache/derby/client/am/LogicalConnection40.java,152,        }
java/client/org/apache/derby/client/am/LogicalConnection40.java,153,        return physicalConnection_.isValid(timeout);
java/client/org/apache/derby/client/am/LogicalConnection40.java,159,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,160,        return interfaces.isInstance(this);
java/client/org/apache/derby/client/am/LogicalConnection40.java,173, try { checkForNullPhysicalConnection(); }
java/client/org/apache/derby/client/am/LogicalConnection40.java,174, catch (SQLException se) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,175,     throw new SQLClientInfoException
java/client/org/apache/derby/client/am/LogicalConnection40.java,176,"  (se.getMessage(), se.getSQLState(),"
java/client/org/apache/derby/client/am/LogicalConnection40.java,177,   (new FailedProperties40(properties)).getProperties());
java/client/org/apache/derby/client/am/LogicalConnection40.java,178, }
java/client/org/apache/derby/client/am/LogicalConnection40.java,179, physicalConnection_.setClientInfo(properties);
java/client/org/apache/derby/client/am/LogicalConnection40.java,192, try { checkForNullPhysicalConnection(); }
java/client/org/apache/derby/client/am/LogicalConnection40.java,193,        catch (SQLException se) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,195,"                (se.getMessage(), se.getSQLState(),"
java/client/org/apache/derby/client/am/LogicalConnection40.java,196,                 new FailedProperties40
java/client/org/apache/derby/client/am/LogicalConnection40.java,197,                 (FailedProperties40.makeProperties
java/client/org/apache/derby/client/am/LogicalConnection40.java,198,"                  (name,value)).getProperties());"
java/client/org/apache/derby/client/am/LogicalConnection40.java,199,        }
java/client/org/apache/derby/client/am/LogicalConnection40.java,200," physicalConnection_.setClientInfo(name, value);"
java/client/org/apache/derby/client/am/LogicalConnection40.java,205,        checkForNullPhysicalConnection();
java/client/org/apache/derby/client/am/LogicalConnection40.java,206,        // Derby does not implement non-standard methods on JDBC objects
java/client/org/apache/derby/client/am/LogicalConnection40.java,207,        try {
java/client/org/apache/derby/client/am/LogicalConnection40.java,208,            return interfaces.cast(this);
java/client/org/apache/derby/client/am/LogicalConnection40.java,209,        } catch (ClassCastException cce) {
java/client/org/apache/derby/client/am/LogicalConnection40.java,210,"            throw new SqlException(null,"
java/client/org/apache/derby/client/am/LogicalConnection40.java,211,"                                   new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),"
java/client/org/apache/derby/client/am/LogicalConnection40.java,212,                                   interfaces).getSQLException();
java/client/org/apache/derby/client/am/LogicalConnection40.java,213,        }
java/client/org/apache/derby/client/net/NetConnection40.java,247,"                (se.getMessage(), se.getSQLState(),"
java/client/org/apache/derby/client/net/NetConnection40.java,248,                 new FailedProperties40(p).getProperties());
java/client/org/apache/derby/client/net/NetConnection40.java,277,       fp.getProperties());
java/client/org/apache/derby/client/net/NetConnection40.java,290,"                                         se.getSQLState(), fp.getProperties());"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,70,        if (isClosed()) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,71,            throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,72,        }
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,96,        if (isClosed()) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,97,            throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,98,        }
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,214,"                (se.getMessage(), se.getSQLState(),"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,314,        checkIfClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,315,        return interfaces.isInstance(this);
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,328,        checkIfClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,329,        //Derby does not implement non-standard methods on
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,330,        //JDBC objects
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,332,            return interfaces.cast(this);
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,333,        } catch (ClassCastException cce) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,334,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,335,                    interfaces);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,155,                                             fp.getProperties());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,172,"                                         se.getSQLState(), fp.getProperties());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,39,import javax.sql.ConnectionEvent;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,40,import javax.sql.ConnectionEventListener;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3619,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3620,class AssertEventCatcher implements ConnectionEventListener
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3621,{
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3622,    private final int catcher;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3623,    //The following flags will indicate what kind of event was
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3624,    //received by this listener
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3625,    private boolean gotConnectionClosed = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3626,    private boolean gotConnectionErrorOccured = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3627,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3628,    AssertEventCatcher(int which) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3629,        catcher=which;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3630,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3631,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3632,    // ConnectionEventListener methods
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3633,    public void connectionClosed(ConnectionEvent event)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3634,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3635,        gotConnectionClosed = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3636,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3637,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3638,    public void connectionErrorOccurred(ConnectionEvent event)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3639,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3640,        gotConnectionErrorOccured = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3641,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3642,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3643,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3644,     * Tell the caller if we received Connection closed event
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3645,     * @return true if received Connection closed event
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3646,     */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3647,    public boolean didConnectionClosedEventHappen()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3648,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3649,     return gotConnectionClosed;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3650,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3651,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3652,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3653,     * Tell the caller if we received Connection error event
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3654,     * @return true if received Connection error event
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3655,     */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3656,    public boolean didConnectionErrorEventHappen()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3657,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3658,     return gotConnectionErrorOccured;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3659,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3660,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3661,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3662,     * Clear the event received flags for this listener.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3663,     */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3664,    public void resetState()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3665,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3666,     gotConnectionClosed = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3667,     gotConnectionErrorOccured = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3668,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,3669,}
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,402,"  return formatTime.format(t, new StringBuffer(),"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,403,         new java.text.FieldPosition(0)).toString();
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,31,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,32,import org.apache.derby.iapi.store.access.Qualifier;
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,36,import org.apache.derby.iapi.types.NumberDataValue;
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,41,import org.apache.derby.iapi.store.access.Qualifier;
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,46,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,768,  TypeId resultType;
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,816,  resultType = receiverType = receiver.getTypeId();
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,819,"                    ioe, identity, new Integer(myContainer.getPageSize()));"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,836,"                    identity, new Integer(myContainer.getPageSize())));"
java/client/org/apache/derby/client/net/NaiveTrustManager.java,55,               java.security.KeyManagementException
java/client/org/apache/derby/client/net/NaiveTrustManager.java,60,
java/client/org/apache/derby/client/net/NaiveTrustManager.java,62,"        ctx.init(null, // Use default key manager"
java/client/org/apache/derby/client/net/NaiveTrustManager.java,63,"                 thisManager,"
java/client/org/apache/derby/client/net/NaiveTrustManager.java,64,                 null); // Use default random source
java/client/org/apache/derby/client/net/NaiveTrustManager.java,66,    }
java/client/org/apache/derby/client/net/NaiveTrustManager.java,79,        // Reject all attemtpts to truts a client. We should never end
java/client/org/apache/derby/client/net/OpenSocketAction.java,44,               java.security.KeyManagementException {
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,55,               java.security.KeyManagementException
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,60,
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,62,"        ctx.init(null, // Use default key manager"
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,63,"                 thisManager,"
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,64,                 null); // Use default random source
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,79,        // Reject all attemtpts to truts a client. We should never end
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2336,              java.security.KeyManagementException
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,26,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,27,
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,29,import org.apache.derby.iapi.store.raw.ContainerHandle;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,34,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,41,import org.apache.derby.iapi.services.io.StoredFormatIds;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,771,  if (myContainer != null)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,772,        {
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,773,   try
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,774,            {
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,775,    myContainer.writePage(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,776,"                    identity.getPageNumber(), pageData, syncMe);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,779,    // Do some in memory unlogged bookkeeping tasks while we have
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,780,    // the container.
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,783,    if (!isOverflowPage() && isDirty())
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,786,     // let the container knows whether this page is a not
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,787,"                    // filled, non-overflow page"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,788,     myContainer.trackUnfilledPage(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,789,"                        identity.getPageNumber(), unfilled());"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,790,
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,791,"     // if this is not an overflow page, see if the page's row"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,792,     // count has changed since it come into the cache.
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,793,     //
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,794,"     // if the page is not invalid, row count is 0.  Otherwise,"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,795,     // count non-deleted records on page.
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,796,     //
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,797,     // Cannot call nonDeletedRecordCount because the page is
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,798,     // unlatched now even though nobody is changing it
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,799,     int currentRowCount = internalNonDeletedRecordCount();
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,800,
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,801,     if (currentRowCount != initialRowCount)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,802,     {
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,803,      myContainer.updateEstimatedRowCount(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,804,                            currentRowCount - initialRowCount);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,805,
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,806,      setContainerRowCount(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,807,                            myContainer.getEstimatedRowCount(0));
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,809,      initialRowCount = currentRowCount;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,810,     }
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,812,
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,813,   }
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,814,            catch (IOException ioe)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,815,            {
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,816,    // page cannot be written
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,817,    throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,818,"                    SQLState.FILE_WRITE_PAGE_EXCEPTION,"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,819,"                    ioe, identity);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,821,   finally
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,822,   {
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,823,    containerCache.release(myContainer);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,824,    myContainer = null;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,825,   }
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,826,  }
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,827,  else
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,829,   StandardException nested =
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,830,                StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,831,"                    SQLState.DATA_CONTAINER_VANISHED,"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,832,                    identity.getContainerId());
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,833,   throw dataFactory.markCorrupt(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,834,                StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,835,"                    SQLState.FILE_WRITE_PAGE_EXCEPTION, nested,"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,836,                    identity));
java/drda/org/apache/derby/drda/NetworkServerControl.java,557,             (!server.runningUnsecure())
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,108, ValueNode firstNonParameterNode;//The generated method will generate code to call coalesce on this non-parameter argument
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,155,    firstNonParameterNode = (ValueNode) argumentsList.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,282,"  firstNonParameterNode.generateExpression(acb, mb); //coalesce will be called on this non-parameter argument"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,414,"   printLabel(depth, ""argumentsList: "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java,1134,    }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,169,   res = ResourceBundle.getBundle(MESSAGE_FILE);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1089, private static ResourceBundle getBundle() {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1090,  try {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1091,"   return ResourceBundle.getBundle(""org.apache.derby.loc.sysinfoMessages"");"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1092,  } catch (MissingResourceException mre) {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1093,  }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1094,  return null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1095, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1098,"  return getCompleteMessage(msgId, (Object[]) null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1117,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1118,  // we have a base file (sysinfoMessages.properties) so don't give us a last chance.
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1119,"  return org.apache.derby.iapi.services.i18n.MessageService.formatMessage(getBundle(), msgId, arguments, false);"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,168,        OpenBTree open_btree = new OpenBTree();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,174,            // The current space reclamation algorithm requires a table level
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,175,            // lock on the btree - this is mostly because the shrink algorithm
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,176,            // is not multi-user.  This lock is requested NOWAIT as it does
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,177,            // not want to impedede normal operation on the table.  If the lock
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,178,            // were to wait then the current lock manager livelock algorithm
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,179,            // would block all subsequent lock requests on this btree even if
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,180,            // they are compatible with the current holder of the lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,181,            //
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,182,            // There are currently 3 outstanding enhancement requests:
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,183,            // track 4237 - retry the work intelligently
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,184,"            // track 4238 - if can't get table lock, at least reclaim the rows"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,185,            // track 4239 - do row level lock shrink - very hard to do.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,187,            ConglomerateController base_cc =
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,188,                btree.lockTable(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,190,                    (ContainerHandle.MODE_FORUPDATE |
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,191,"                     ContainerHandle.MODE_LOCK_NOWAIT),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,192,"                    TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,193,                    TransactionController.ISOLATION_REPEATABLE_READ);
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,194,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,195,            open_btree.init(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,196,"                (TransactionManager) null,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,197,"                internal_xact,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,198,"                (ContainerHandle) null,           // open the container"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,199,"                internal_xact.getRawStoreXact(),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,200,"                false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,201,"                ContainerHandle.MODE_FORUPDATE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,202,"                TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,203,                btree.getBtreeLockingPolicy(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,204,"                    internal_xact.getRawStoreXact(),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,205,"                    TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,206,"                    LockingPolicy.MODE_CONTAINER,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,207,"                    TransactionController.ISOLATION_REPEATABLE_READ,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,208,"                    base_cc,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,209,"                    open_btree),"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,210,"                btree,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,211,"                (LogicalUndo) null,              // No logical undo necessry."
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,212,                (DynamicCompiledOpenConglomInfo) null);
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,225,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,226,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,227,            //2 kinds of errors here expected here.  Either container not found or dead lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,233,"   //If it is a locking error, work is requeued. (4237)"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,234,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,238,    requeue_work = true;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,239,   }
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,241,   //RESSOLVE-mike (4238) If you can't get a table level lock for btree space recovery in
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,242,"   //the post commit thread, maybe you should at least reclaim the"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,243,   //rows on the page while you are at it.  Use the same algorithm
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,244,   //as exists in BTreeController.java.  row level shrink is still a
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,245,   //big problem and a separate track exists for it.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,246,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1369,            if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1380,                    scan_position.current_slot)) {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1382,            } else {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1390,       // Beetle 5750: we do not reclaim the root page of the btree if
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1391,            // there are no children since we were
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1392,         // doing too many post commit actions in a benchmark which does an
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1393,"         // insert/commit/delete/commit operations in a single user system. now ,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1394,         // with this change the work will move to the user
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1395,            // thread which does the insert
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1398,  !(scan_position.current_leaf.getIsRoot() &&
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1399,    scan_position.current_leaf.getLevel() == 0 ))
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,522,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,523,            return;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,526,
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,123,            return bytes[0];
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,113,            return bytes[0];
java/drda/org/apache/derby/drda/NetworkServerControl.java,548,     * <li>Classes live in the jar files which we expect..</li>
java/drda/org/apache/derby/drda/NetworkServerControl.java,558,             (!server.runningUnsecure()) &&
java/drda/org/apache/derby/drda/NetworkServerControl.java,559,             (packagingLooksGood())
java/drda/org/apache/derby/drda/NetworkServerControl.java,563,    /**
java/drda/org/apache/derby/drda/NetworkServerControl.java,564,     * Return true if the server lives in the expected jar file. This
java/drda/org/apache/derby/drda/NetworkServerControl.java,565,     * is meant to address DERBY-3083. We expect that the URL of
java/drda/org/apache/derby/drda/NetworkServerControl.java,566,     * the jar which contains NetworkServerControl will end with the
java/drda/org/apache/derby/drda/NetworkServerControl.java,567,"     * string ""derbynet.jar"". If this is true, then getCodeSourcePrefix()"
java/drda/org/apache/derby/drda/NetworkServerControl.java,568,     * will return a prefix which can be substituted into the default
java/drda/org/apache/derby/drda/NetworkServerControl.java,569,     * server policy file and so end up granting permissions to the server jar file.
java/drda/org/apache/derby/drda/NetworkServerControl.java,570,     */
java/drda/org/apache/derby/drda/NetworkServerControl.java,571,    private static  boolean packagingLooksGood()
java/drda/org/apache/derby/drda/NetworkServerControl.java,572,        throws Exception
java/drda/org/apache/derby/drda/NetworkServerControl.java,573,    {
java/drda/org/apache/derby/drda/NetworkServerControl.java,574,        String      derbyNetURL = NetworkServerControl.class.getProtectionDomain().getCodeSource().getLocation().toExternalForm();
java/drda/org/apache/derby/drda/NetworkServerControl.java,575,
java/drda/org/apache/derby/drda/NetworkServerControl.java,576,        return derbyNetURL.endsWith( DERBYNET_JAR );
java/drda/org/apache/derby/drda/NetworkServerControl.java,577,    }
java/drda/org/apache/derby/drda/NetworkServerControl.java,578,
java/drda/org/apache/derby/drda/NetworkServerControl.java,579,
java/tools/org/apache/derby/impl/tools/ij/util.java,470,        if (driverName != null) {
java/tools/org/apache/derby/impl/tools/ij/util.java,475, if (jdbcProtocol != null)
java/tools/org/apache/derby/impl/tools/ij/util.java,485, if (databaseURL != null) {
java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java,154,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,433,     Connection conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,444,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,458,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,500,     Connection conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,511,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,529,        conn.commit();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,130,  a ResultSet from a Statement.executeQuery().
java/client/org/apache/derby/client/am/MaterialStatement.java,64,    public abstract void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException;
java/client/org/apache/derby/client/am/Statement.java,1299,    public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException {
java/client/org/apache/derby/client/am/Statement.java,1300,        materialStatement_.writeSetSpecialRegister_(sqlsttList);
java/client/org/apache/derby/client/net/NetStatement.java,111,    public void writeSetSpecialRegister_(java.util.ArrayList sqlsttList) throws SqlException {
java/client/org/apache/derby/client/net/NetStatement.java,112,        netAgent_.statementRequest_.writeSetSpecialRegister(sqlsttList);
java/client/org/apache/derby/client/net/NetStatementRequest.java,1765,    public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException {
java/client/org/apache/derby/client/net/NetStatementRequest.java,1766,        Section section =
java/client/org/apache/derby/client/net/NetStatementRequest.java,1767,                netAgent_.sectionManager_.getDynamicSection(java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT);
java/client/org/apache/derby/client/net/NetStatementRequest.java,1768,
java/client/org/apache/derby/client/net/StatementRequestInterface.java,91,    public void writeSetSpecialRegister(java.util.ArrayList sqlsttList) throws SqlException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc30Test.java,64,"                        .clientServerDecorator(baseSuite(""StatementJdbc30Test:client"")));"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,860,     ** loss of precision.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,862,     if (newCost < 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,863,      newCost = 0.0;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,451,        char[] arr = new char[clobSize];
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,452,        for (int i = 0; i < arr.length; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,453,            arr[i] = 'a';
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,466,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,518,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,519,        byte[] arr = new byte[blobSize];
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,520,        for (int i = 0; i < arr.length; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,521,            arr[i] = (byte)8;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,522,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,570,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,579,"          assertEquals('b',c);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,583,"        assertEquals(clobSize,count);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,584,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,585,"        s.executeUpdate(""drop table lob1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,586,"        s.executeUpdate(""drop table t_lob1_log"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,587,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,588,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,878,       newCost = recoverCostFromProposedJoinOrder();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,961,         recoverCostFromProposedJoinOrder();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1277, private double recoverCostFromProposedJoinOrder()
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1283,   recoveredCost +=
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1284,    optimizableList.getOptimizable(proposedJoinOrder[i])
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1285,     .getBestAccessPath().getCostEstimate().getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,83,  * back to the InListOperatorNode referenced here.
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,85, InListOperatorNode inListProbeSource = null;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,156,  * IN-list).
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,780,  if (inListProbeSource != null)
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1218,  return (inListProbeSource == null);
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1228,  return (inListProbeSource == null) &&
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1232, /** @see ValueNode#isInListProbeNode */
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1250,  if (inListProbeSource != null)
java/engine/org/apache/derby/impl/sql/compile/OrNode.java,155,       if (bron.getInListOp() == null)
java/engine/org/apache/derby/impl/sql/compile/OrNode.java,226,     if (bron.getInListOp() != null)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,215,     * The one test fixture for this test.  Executes three different types
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,216,"     * of queries (""strategies"") repeatedly with an increasing number of"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,217,     * values in the IN list.  Underneath we will check the query plan
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,218,     * for each query to make sure that Derby is doing multi-probing as
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,219,     * expected.
java/engine/org/apache/derby/iapi/types/SQLChar.java,2516,  RuleBasedCollator rbc = getLocaleFinder().getCollator();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,847,    columnNumber = ftRC.getColumnPosition();
java/client/org/apache/derby/client/net/NetCursor.java,149,
java/client/org/apache/derby/client/net/NetCursor.java,186,"        // If we don't have at least one byte in the buffer for the DA null indicator,"
java/client/org/apache/derby/client/net/NetCursor.java,187,        // then we need to send a CNTQRY request to fetch the next block of data.
java/client/org/apache/derby/client/net/NetCursor.java,188,        // Read the DA null indicator.
java/client/org/apache/derby/client/net/NetCursor.java,189,        daNullIndicator = readFdocaOneByte();
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,70, protected long    CID;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,241,   if(!isUniqueStream)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,493,
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,498,  lastArraySlot = -1;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,499,  numRowsIn = 0;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,500,  state = STATE_UNINIT;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,502,  /*
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,503,  ** We are not expecting this to be called
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,504,  ** when we have a temporary conglomerate
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,505,"  ** but just to be on the safe side, drop"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,506,"  ** it.  We'd like do something cheaper,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,507,  ** but there is no truncate on congloms.
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,508,  */
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,509,  if (conglomCreated)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,510,  {
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,511,   TransactionController tc = activation.getTransactionController();
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,512,   tc.dropConglomerate(CID);
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,513,   conglomCreated = false;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,514,  }
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,596,  }
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,597,
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,154,   holder.CID = currentConglomId;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,276,  if (holder.CID == 0)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,288,"                    holder.CID,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,341,"    heapCC = tc.openConglomerate( holder.CID,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,361,  if(holder.CID ==0)
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,365,"   heapCC = tc.openConglomerate( holder.CID,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,259,    ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,260,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,268,    GeneratedClass  newGC = ps.getActivationClass();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,269,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,819,  normExpressions();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,820,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,883,   havingClause = havingClause.preprocess(
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1073, private void normExpressions()
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1082,  if (whereClause != null)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1084,   whereClause = whereClause.eliminateNots(false);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1087,    if (!(whereClause.verifyEliminateNots()) )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1089,     whereClause.treePrint();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1091,"      ""whereClause in invalid form: "" + whereClause);"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1094,   whereClause = whereClause.putAndsOnTop();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1097,    if (! ((whereClause instanceof AndNode) &&
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1098,        (whereClause.verifyPutAndsOnTop())) )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1100,     whereClause.treePrint();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1102,"      ""whereClause in invalid form: "" + whereClause);"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1105,   whereClause = whereClause.changeToCNF(true);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1108,    if (! ((whereClause instanceof AndNode) &&
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1109,        (whereClause.verifyChangeToCNF())) )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1111,     whereClause.treePrint();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1113,"      ""whereClause in invalid form: "" + whereClause);"
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,612,       underTopAndNode &&
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,676,       underTopAndNode &&
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,153,          ResultSet rs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,157,"                  rs = s.executeQuery(""SELECT * from tab"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,165,          // close the final ResultSet and gc() so we won't have a
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,166,          // ResultSet reference when we try to drop the table.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,167,          rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,168,          rs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,169,          System.gc();
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,1005,  @param probeValsAreSorted Whether or not the values in probeVals are
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,1006,   sorted.
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,1021,"        boolean probeValsAreSorted,"
java/engine/org/apache/derby/impl/sql/compile/BaseTableNumbersVisitor.java,99,   rc = (ResultColumn)rc;
java/engine/org/apache/derby/impl/sql/compile/BaseTableNumbersVisitor.java,152,    ((ColumnReference)node).getTablesReferenced(tableMap);
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,52,import org.apache.derby.iapi.sql.compile.C_NodeTypes;
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2922,   mb.push(ilon.isOrdered());
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1425,   prnRSN.adjustForSortElimination();
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,738,"         boolean probeValsAreSorted,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,770,"        probeValsAreSorted,"
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,84,     * Whether or not we need to sort the values.  If all values were
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,85,     * specified as literals (as opposed to parameters) then we did the
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,86,     * sort at compile time and so we do not need to do it here.
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,88,    private boolean needSort;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,106,"        boolean probeValsAreSorted,"
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,160,        this.needSort = !probeValsAreSorted;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,178,        if (needSort)
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,193,            java.util.Arrays.sort(pVals);
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,196,        else
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,197,            probeValues = origProbeValues;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,372,     * Assumption is that the list is sorted in ascending order
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,373,     * and that probeValIndex is the index of the next value.
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,374,     * If we've exhausted the probe list then just return null.
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,420,  }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,196,            TestConfiguration.defaultSuite(DatabaseMetaDataTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,740,"                true, true, true, true, nullval, true, nullval,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,758,"                true, true, true, true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,770,"                true, true, true, true, true, true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1906,"        // DERBY-2307 Nullablity is wrong for columns 1,7,9 (1-based)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1913,"                true, true, true, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1914,"                true, true, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2300,"          true, false, false, true, // TABLE_SCHEM cannot be NULL in Derby"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2301,"          true, true, true, true,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2902,"                true, false, false, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2903,"                true, false, false, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3221,"                    false, true, false, true, false, false, false, false};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3325,"        boolean [] nullability = {true,false,false,false,true,true,true,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3394,"        boolean [] nullability = {true,false,false,true,true,true,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3559,"        boolean [] nullability = {true,false,false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3560,"            true,true,true,true,true,false,true,true,true,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3731,"        boolean [] nullability = {true,false,false,false,true,false};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4000,"            boolean [] nullability = {true,false,false,false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4001,"                true,false,false,false,true,true,true,false,false,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4259,"                true, false, false, true, true, true, true, true, false};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4261,"                true, false, false, true, true, true, true, true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4326,"                true, false, true, true, true, true, true, true, true, false//};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4329,"                true, false, false, false, false, true, false, false, true, true,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4330,"                true, false, true, true, true, true, true, true, true//};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,196,            TestConfiguration.embeddedSuite(DatabaseMetaDataTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,740,"                true, true, false, true, nullval, true, nullval,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,742,"                nullval, nullval, true, true, true, true, true"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,29,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,30,
java/client/org/apache/derby/client/ClientDataSourceFactory.java,31,import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,32,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,33,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,84,        ClientBaseDataSource ds = null;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,85,        if (ref.getClassName().equals(ClientDataSource.className__)) {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,86,            ds = new ClientDataSource();
java/client/org/apache/derby/client/ClientDataSourceFactory.java,87,        } else if (ref.getClassName().equals(ClientXADataSource.className__)) {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,88,            ds = new ClientXADataSource();
java/client/org/apache/derby/client/ClientDataSourceFactory.java,89,        } else if (ref.getClassName().equals(ClientConnectionPoolDataSource.className__)) {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,90,            ds = new ClientConnectionPoolDataSource();
java/client/org/apache/derby/client/ClientDataSourceFactory.java,91,        } else {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,92,            return null;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,93,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,192,"        // DERBY-2559 - with jdk16, this recreatedDS will be null."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,193,        // bailing out
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,194,        if (JDBC.vmSupportsJDBC4())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,195,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,196,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,390,}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,622,"                {""AAAAA"", ""EDAM"", ""999.8888"", ""54321"", ""EDAM"", ""8.5646""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,623,"                {""54321"", ""EDAM"", ""8.5646"", ""54321"", ""EDAM"", ""8.5646""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,624,"                {""00000"", ""EDAM"", ""2.1111"", ""54321"", ""EDAM"", ""8.5646""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,625,"                {""AAAAA"", ""EDAM"", ""999.8888"", ""00000"", ""EDAM"", ""2.1111""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,626,"                {""54321"", ""EDAM"", ""8.5646"", ""00000"", ""EDAM"", ""2.1111""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,627,"                {""00000"", ""EDAM"", ""2.1111"", ""00000"", ""EDAM"", ""2.1111""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,630,        JDBC.assertFullResultSet(st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,635,            expRS3);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,641,"                {""00000"", ""EDAM"", ""2.1111"", ""00000"", ""EDAM"", ""2.1111""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,642,"                {""54321"", ""EDAM"", ""8.5646"", ""00000"", ""EDAM"", ""2.1111""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,643,"                {""AAAAA"", ""EDAM"", ""999.8888"", ""00000"", ""EDAM"", ""2.1111""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,644,"                {""00000"", ""EDAM"", ""2.1111"", ""54321"", ""EDAM"", ""8.5646""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,645,"                {""54321"", ""EDAM"", ""8.5646"", ""54321"", ""EDAM"", ""8.5646""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,646,"                {""AAAAA"", ""EDAM"", ""999.8888"", ""54321"", ""EDAM"", ""8.5646""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,649,        JDBC.assertFullResultSet(st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,654,            expRS4);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,699,"        JDBC.assertFullResultSet(ps.executeQuery(), expRS3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/InListMultiProbeTest.java,710,"        JDBC.assertFullResultSet(ps.executeQuery(), expRS4);"
java/testing/org/apache/derbyTesting/junit/JDBC.java,945,                    && (rsmd.getColumnType(i+1) == Types.SMALLINT))
java/testing/org/apache/derbyTesting/junit/JDBC.java,949,"                        obj = (rs.getShort(i+1) == 0) ? ""false"" : ""true"";"
java/testing/org/apache/derbyTesting/junit/JDBC.java,951,                        obj = rs.getString(i+1);
java/testing/org/apache/derbyTesting/junit/JDBC.java,956,                    obj = rs.getString(i+1);
java/testing/org/apache/derbyTesting/junit/JDBC.java,966,                obj = rs.getObject(i+1);
java/testing/org/apache/derbyTesting/junit/JDBC.java,984,"                    rsmd.getColumnName(i+1) + ""', row "" + rowNum +"
java/testing/org/apache/derbyTesting/junit/JDBC.java,990,"                assertResultColumnNullable(rsmd, i+1);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2431,"     constraintText.append(columnNames[colCtr] + "" IS NOT NULL "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1250,"        suite.addTest(collatedSuite(""no"", ""testNorwayCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1251,"        suite.addTest(collatedSuite(""pl"", ""testPolishCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1252,"        suite.addTest(collatedSuite(""fr"", ""testFrenchCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,1904,"        suite.addTest(collatedTest(""no_NO"", ""testNorwayCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,1905,"        suite.addTest(collatedTest(""pl"", ""testPolishCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForUpdateTest.java,263,"  stmt.execute(""create index t3bi on t3(b)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForUpdateTest.java,264,"  stmt.execute(""insert into t3 values (1, 'hhhh'), (2, 'uuuu'), (3, 'yyyy'), (4, 'aaaa'), (5, 'jjjj'), (6, 'rrrr')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForUpdateTest.java,265,"  stmt.execute(""insert into t3 values (7, 'iiii'), (8, 'wwww'), (9, 'rrrr'), (10, 'cccc'), (11, 'hhhh'), (12, 'rrrr')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForUpdateTest.java,266,  commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ScrollCursors1Test.java,535,"            s.executeUpdate(""drop table t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ScrollCursors1Test.java,536,"            s.executeUpdate(""drop table t2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ScrollCursors1Test.java,686,"            s.executeUpdate(""drop table t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java,133,            if (!(JDBC.vmSupportsJSR169() &&
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java,134,                (OLD_VERSIONS[i][0]==10) && (OLD_VERSIONS[i][1]==0)))
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java,135,                suite.addTest(UpgradeRun.suite(OLD_VERSIONS[i]));
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java,28,public class LocalizedInput extends InputStreamReader{
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java,31,  super(i);
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java,36,"  super(i,encode);"
java/engine/org/apache/derby/diag/LockTable.java,81," the index, this can only happen if this is not a user transaction.</LI>"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1087,"  methodCall.categorize(referencedTableMap, false);"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1089,  // Create the dependency map
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1091,  for (int index = 0; index < numTables; index++)
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1092,  {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1093,   if ((index != tableNumber) && referencedTableMap.get(index))
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1094,   {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1095,    dependencyMap.set(index);
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1096,   }
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1097,  }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,599,   int nextOptimizable = 0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,740,    nextOptimizable = proposedJoinOrder[joinPosition] + 1;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,741,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,758,     /* Check to make sure that all of the next optimizable's
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,759,      * dependencies have been satisfied.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,761,     if (nextOptimizable < numOptimizables)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,763,      Optimizable nextOpt =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,764,        optimizableList.getOptimizable(nextOptimizable);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,765,      if (! (nextOpt.legalJoinOrder(assignedTableMap)))
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,767,       if (optimizerTrace)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,769,"        trace(SKIPPING_JOIN_ORDER, nextOptimizable, 0, 0.0, null);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,771,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,772,       /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,773,       ** If this is a user specified join order then it is illegal.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,774,       */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,775,       if ( ! optimizableList.optimizeJoinOrder())
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,776,       {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,777,        if (optimizerTrace)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,778,        {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,779,"         trace(ILLEGAL_USER_JOIN_ORDER, 0, 0, 0.0, null);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,780,        }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,781,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,782,        throw StandardException.newException(SQLState.LANG_ILLEGAL_FORCED_JOIN_ORDER);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,783,       }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,784,       continue;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,786,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,787,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,788,     if (! found)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,789,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,790,      break;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,791,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,792,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,793,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,794,   }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,795,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,796,   /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,797,   ** We are going to try an optimizable at the current join order
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,798,   ** position.  Is there one already at that position?
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,799,   */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,800,   if (proposedJoinOrder[joinPosition] >= 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,801,   {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,802,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,803,    ** We are either going to try another table at the current
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,804,"    ** join order position, or we have exhausted all the tables"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,805,"    ** at the current join order position.  In either case, we"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,806,    ** need to pull the table at the current join order position
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,807,    ** and remove it from the join order.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,808,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,809,    Optimizable pullMe =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,810,     optimizableList.getOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,811,           proposedJoinOrder[joinPosition]);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,812,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,813,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,814,    ** Subtract the cost estimate of the optimizable being
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,815,    ** removed from the total cost estimate.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,816,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,817,"    ** The total cost is the sum of all the costs, but the total"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,818,    ** number of rows is the number of rows returned by the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,819,    ** innermost optimizable.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,820,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,821,    double prevRowCount;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,822,    double prevSingleScanRowCount;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,823,    int prevPosition = 0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,824,    if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,825,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,826,     prevRowCount = outermostCostEstimate.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,827,     prevSingleScanRowCount = outermostCostEstimate.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,828,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,829,    else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,830,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,831,     prevPosition = proposedJoinOrder[joinPosition - 1];
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,832,     CostEstimate localCE =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,833,      optimizableList.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,834,       getOptimizable(prevPosition).
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,835,        getBestAccessPath().
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,836,         getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,837,     prevRowCount = localCE.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,838,     prevSingleScanRowCount = localCE.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,839,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,840,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,841,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,842,"    ** If there is no feasible join order, the cost estimate"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,843,    ** in the best access path may never have been set.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,844,"    ** In this case, do not subtract anything from the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,845,"    ** current cost, since nothing was added to the current"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,846,    ** cost.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,847,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,848,    double newCost = currentCost.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,849,    double pullCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,850,    CostEstimate pullCostEstimate =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,851,        pullMe.getBestAccessPath().getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,852,    if (pullCostEstimate != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,853,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,854,     pullCost = pullCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,855,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,856,     newCost -= pullCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,857,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,858,     /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,859,     ** It's possible for newCost to go negative here due to
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,860,     ** loss of precision--but that should ONLY happen if the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,861,     ** optimizable we just pulled was at position 0.  If we
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,862,"     ** have a newCost that is <= 0 at any other time, then"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,863,     ** it's the result of a different kind of precision loss--
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,864,"     ** namely, the estimated cost of pullMe was so large that"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,865,     ** we lost the precision of the accumulated cost as it
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,866,     ** existed prior to pullMe. Then when we subtracted
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,867,"     ** pullMe's cost out, we ended up setting newCost to zero."
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,868,     ** That's an unfortunate side effect of optimizer cost
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,869,     ** estimates that grow too large. If that's what happened
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,870,"     ** here,try to make some sense of things by adding up costs"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,871,     ** as they existed prior to pullMe...
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,872,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,873,     if (newCost <= 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,874,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,875,      if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,876,       newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,877,      else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,878,       newCost = recoverCostFromProposedJoinOrder(false);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,879,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,880,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,882,"    /* If we are choosing a new outer table, then"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,883,     * we rest the starting cost to the outermostCost.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,884,     * (Thus avoiding any problems with floating point
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,885,     * accuracy and going negative.)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,886,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,887,    if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,888,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,889,     if (outermostCostEstimate != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,890,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,891,      newCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,892,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,893,     else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,894,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,895,      newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,897,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,899,    currentCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,900,"     newCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,901,"     prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,902,     prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,903,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,904,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,905,    ** Subtract from the sort avoidance cost if there is a
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,906,    ** required row ordering.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,907,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,908,    ** NOTE: It is not necessary here to check whether the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,909,"    ** best cost was ever set for the sort avoidance path,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,910,    ** because it considerSortAvoidancePath() would not be
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,911,    ** set if there cost were not set.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,912,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,913,    if (requiredRowOrdering != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,914,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,915,     if (pullMe.considerSortAvoidancePath())
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,917,      AccessPath ap = pullMe.getBestSortAvoidancePath();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,918,      double    prevEstimatedCost = 0.0d;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,919,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,920,      /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,921,      ** Subtract the sort avoidance cost estimate of the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,922,      ** optimizable being removed from the total sort
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,923,      ** avoidance cost estimate.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,924,      **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,925,"      ** The total cost is the sum of all the costs, but the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,926,      ** total number of rows is the number of rows returned
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,927,      ** by the innermost optimizable.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,928,      */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,929,      if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,930,      {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,931,       prevRowCount = outermostCostEstimate.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,932,       prevSingleScanRowCount = outermostCostEstimate.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,933,"       /* If we are choosing a new outer table, then"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,934,        * we rest the starting cost to the outermostCost.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,935,        * (Thus avoiding any problems with floating point
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,936,        * accuracy and going negative.)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,937,        */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,938,       prevEstimatedCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,939,      }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,940,      else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,942,       CostEstimate localCE =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,943,        optimizableList.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,944,         getOptimizable(prevPosition).
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,945,          getBestSortAvoidancePath().
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,946,           getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,947,       prevRowCount = localCE.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,948,       prevSingleScanRowCount = localCE.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,949,       prevEstimatedCost = currentSortAvoidanceCost.getEstimatedCost() -
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,950,             ap.getCostEstimate().getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,953,"      // See discussion above for ""newCost""; same applies here."
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,954,      if (prevEstimatedCost <= 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,956,       if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,957,        prevEstimatedCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,958,       else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,960,        prevEstimatedCost =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,961,         recoverCostFromProposedJoinOrder(true);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,963,      }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,965,      currentSortAvoidanceCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,966,"       prevEstimatedCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,967,"       prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,968,       prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,969,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,970,      /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,971,      ** Remove the table from the best row ordering.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,972,      ** It should not be necessary to remove it from
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,973,"      ** the current row ordering, because it is"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,974,      ** maintained as we step through the access paths
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,975,      ** for the current Optimizable.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,976,      */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,977,      bestRowOrdering.removeOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,978,             pullMe.getTableNumber());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,980,      /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,981,"      ** When removing a table from the join order,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,982,      ** the best row ordering for the remaining outer tables
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,983,      ** becomes the starting point for the row ordering of
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,984,      ** the current table.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,985,      */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,986,      bestRowOrdering.copy(currentRowOrdering);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,988,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,989,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,990,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,991,    ** Pull the predicates at from the optimizable and put
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,992,    ** them back in the predicate list.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,993,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,994,    ** NOTE: This is a little inefficient because it pulls the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,995,"    ** single-table predicates, which are guaranteed to always"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,996,    ** be pushed to the same optimizable.  We could make this
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,997,    ** leave the single-table predicates where they are.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,998,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,999,    pullMe.pullOptPredicates(predicateList);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1000,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1001,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1002,    ** When we pull an Optimizable we need to go through and
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1003,    ** load whatever best path we found for that Optimizable
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1004,    ** with respect to this OptimizerImpl.  The reason is that
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1005,    ** we could be pulling the Optimizable for the last time
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1006,"    ** (before returning false), in which case we want it (the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1007,    ** Optimizable) to be holding the best access path that it
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1008,    ** had at the time we found bestJoinOrder.  This ensures
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1009,    ** that the access path which is generated and executed for
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1010,    ** the Optimizable matches the the access path decisions
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1011,    ** made by this OptimizerImpl for the best join order.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1012,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1013,    ** NOTE: We we only reload the best plan if it's necessary
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1014,    ** to do so--i.e. if the best plans aren't already loaded.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1015,    ** The plans will already be loaded if the last complete
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1016,"    ** join order we had was the best one so far, because that"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1017,"    ** means we called ""rememberAsBest"" on every Optimizable"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1018,"    ** in the list and, as part of that call, we will run through"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1019,    ** and set trulyTheBestAccessPath for the entire subtree.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1020,"    ** So if we haven't tried any other plans since then,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1021,    ** we know that every Optimizable (and its subtree) already
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1022,    ** has the correct best plan loaded in its trulyTheBest
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1023,    ** path field.  It's good to skip the load in this case
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1024,    ** because 'reloading best plans' involves walking the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1025,"    ** entire subtree of _every_ Optimizable in the list, which"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1026,    ** can be expensive if there are deeply nested subqueries.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1027,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1028,    if (reloadBestPlan)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1029,"     pullMe.updateBestPlanMap(FromTable.LOAD_PLAN, this);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1031,    /* Mark current join position as unused */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1032,    proposedJoinOrder[joinPosition] = -1;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1121,    /* Clear the assigned table map for the previous position
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1122,     * NOTE: We need to do this here to for the dependency tracking
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1123,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1124,    if (joinPosition >= 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1125,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1126,     Optimizable pullMe =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1127,      optimizableList.getOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1128,           proposedJoinOrder[joinPosition]);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1129,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1130,     /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1131,     ** Clear the bits from the table at this join position.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1132,     ** This depends on them having been set previously.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1133,     ** NOTE: We need to do this here to for the dependency tracking
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1134,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1135,     assignedTableMap.xor(pullMe.getReferencedTableMap());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1136,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1137,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1195,   /* Set the assigned table map to be exactly the tables
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1196,    * in the current join order.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1197,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1198,   assignedTableMap.clearAll();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1199,   for (int index = 0; index <= joinPosition; index++)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1200,   {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1201,    assignedTableMap.or(optimizableList.getOptimizable(proposedJoinOrder[index]).getReferencedTableMap());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1202,   }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1203,
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,303,  boolean duplicate = false;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,304,        long conglomId = 0;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,305,
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,316,"   /* For an index to be considered a duplicate of already existing index, the"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,317,    * following conditions have to be satisfied:
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,323,    */
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,325,   if ((bcps.length == baseColumnPositions.length) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,326,       (irg.isUnique() || !unique) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,327,    indexType.equals(irg.indexType()))
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,336,   if (j == baseColumnPositions.length) // duplicate
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,352,    //Duplicate indexes share the physical conglomerate underneath
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,354,    indexRowGenerator = cd.getIndexDescriptor();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,356,    //Duplicate indexes will have unqiue logical conglomerate UUIDs.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,358,    duplicate = true;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,365,   * entry into SYSCONGLOMERATES.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,368,  if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,419,  if (! duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,530,"   /* now that we got indexTemplateRow, done for duplicate index"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,532,   if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,649,  // Create a conglomerate descriptor with the conglomId filled in and
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,650,  // add it.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,653,  ConglomerateDescriptor cgd =
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,654,"   ddg.newConglomerateDescriptor(conglomId, indexName, true,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,655,"            indexRowGenerator, isConstraint,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,656,"            conglomerateUUID, td.getUUID(), sd.getUUID() );"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,658,"  dd.addDescriptor(cgd, sd, DataDictionary.SYSCONGLOMERATES_CATALOG_NUM, false, tc);"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,660,  // add newly added conglomerate to the list of conglomerate descriptors
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,661,  // in the td.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,662,  ConglomerateDescriptorList cdl = td.getConglomerateDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,663,  cdl.add(cgd);
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,673,"     new StatisticsDescriptor(dd, dd.getUUIDFactory().createUUID(),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,674,"            cgd.getUUID(), td.getUUID(), ""I"", new StatisticsImpl(numRows, c[i]),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,675,            i + 1);
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,351,     * @param lcc
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,352,     * @param td
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,355," public void drop(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,356,         TableDescriptor td)
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,357, throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,358, {
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,645,"    public void drop(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,646,            boolean clearDependencies)
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,647,        throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,692,"                        conglomDescs[i].drop(lcc, table);"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,76,        javax.naming.Reference ref = (javax.naming.Reference) refObj;
java/client/org/apache/derby/client/ClientDataSourceFactory.java,77,
java/client/org/apache/derby/client/ClientDataSourceFactory.java,78,        // Create the proper data source object shell.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,79,        Object ds = Class.forName(ref.getClassName()).newInstance();
java/client/org/apache/derby/client/ClientDataSourceFactory.java,80,
java/client/org/apache/derby/client/ClientDataSourceFactory.java,81,        // Fill in the data source object shell with values from the jndi reference.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,82,"        ClientDataSourceFactory.setBeanProperties(ds, ref);"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,83,
java/client/org/apache/derby/client/ClientDataSourceFactory.java,31, * The data source factory currrently for ClientDataSource only. This factory will support XA and pooling-enabled data
java/client/org/apache/derby/client/ClientDataSourceFactory.java,32, * sources in the future.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,33, * <p/>
java/client/org/apache/derby/client/ClientDataSourceFactory.java,34, * This factory reconstructs a DERBY simple data source object when it is retrieved from JNDI. References are needed
java/client/org/apache/derby/client/ClientDataSourceFactory.java,35, * since many naming services don't have the ability to store Java objects in their serialized form. When a data source
java/client/org/apache/derby/client/ClientDataSourceFactory.java,36, * object is bound in this type of naming service the Reference for that object is actually stored by the JNDI
java/client/org/apache/derby/client/ClientDataSourceFactory.java,37," * implementation, not the data source object itself."
java/client/org/apache/derby/client/ClientDataSourceFactory.java,38, * <p/>
java/client/org/apache/derby/client/ClientDataSourceFactory.java,39, * A JNDI administrator is responsible for making sure that both the object factory and data source implementation
java/client/org/apache/derby/client/ClientDataSourceFactory.java,40, * classes provided by a JDBC driver vendor are accessible to the JNDI service provider at runtime.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,41, * <p/>
java/client/org/apache/derby/client/ClientDataSourceFactory.java,42," * An object factory implements the javax.naming.spi.ObjectFactory interface. This interface contains a single method,"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,43," * getObjectInstance, which is called by a JNDI service provider to reconstruct an object when that object is retrieved"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,44, * from JNDI. A JDBC driver vendor should provide an object factory as part of their JDBC 2.0 product.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,50,    public ClientDataSourceFactory() {
java/client/org/apache/derby/client/ClientDataSourceFactory.java,51,    }
java/client/org/apache/derby/client/ClientDataSourceFactory.java,54,     * Reconstructs a ClientDataSource object from a JNDI data source reference.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,55,     * <p/>
java/client/org/apache/derby/client/ClientDataSourceFactory.java,56,     * The getObjectInstance() method is passed a reference that corresponds to the object being retrieved as its first
java/client/org/apache/derby/client/ClientDataSourceFactory.java,57,     * parameter. The other parameters are optional in the case of JDBC data source objects. The object factory should
java/client/org/apache/derby/client/ClientDataSourceFactory.java,58,"     * use the information contained in the reference to reconstruct the data source. If for some reason, a data source"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,59,"     * object cannot be reconstructed from the reference, a value of null may be returned. This allows other object"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,60,     * factories that may be registered in JNDI to be tried. If an exception is thrown then no other object factories
java/client/org/apache/derby/client/ClientDataSourceFactory.java,61,     * are tried.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,63,     * @param refObj      The possibly null object containing location or reference information that can be used in
java/client/org/apache/derby/client/ClientDataSourceFactory.java,64,     *                    creating an object.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,65,"     * @param name        The name of this object relative to nameContext, or null if no name is specified."
java/client/org/apache/derby/client/ClientDataSourceFactory.java,66,"     * @param nameContext Context relative to which the name parameter is specified, or null if name is relative to the"
java/client/org/apache/derby/client/ClientDataSourceFactory.java,67,     *                    default initial context.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,68,     * @param environment Possibly null environment that is used in creating the object.
java/client/org/apache/derby/client/ClientDataSourceFactory.java,70,     * @return object created; null if an object cannot be created
java/client/org/apache/derby/client/ClientDataSourceFactory.java,104,    /*
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,199,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,200,   if (resultCol == null) {
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,225,        columnPosition = targetCols.size() - targetCols.getOrderBySelect() + addedColumnOffset + 1;
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,381,     if (dd.getConglomerateDescriptors(getConglomerateNumber()).length == 1)
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,386,         /* Drop the conglomerate */
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,388,        }
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,389,
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,399,     /* TODO: DERBY-3299 incremental development; just return null
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,400,      * for now.
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,401,      */
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,402,     return null;
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,404,
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,609,"   drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,875,"            cd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,885,"   cd.drop(lcc, false);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,903,"                    fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1756,"     cd.drop(activation.getLanguageConnectionContext(), td);"
java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java,230,"        conDesc.drop(lcc, !cascadeOnRefKey);"
java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java,246,"    fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/DropIndexConstantAction.java,174,"  cd.drop(lcc, td);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,315,"   cd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,346,"   cd.drop(lcc, false);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,369,"     fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1216,   columnIndexes == null
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1251,   columnNames == null
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1119,        if (!usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1120,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1121,            // Can't run these with embedded now because of DERBY-3430
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1122,"            ps = prepareStatement(sql, new String[] {});"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1123,            ps.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1124,"            assertNull(""Expected NULL ResultSet after ps.execute()"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1125,            ps.getGeneratedKeys());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1127,"            ps = prepareStatement(sql, new String[] {});"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1128,            ps.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1129,"            assertNull(""Expected NULL ResultSet after ps.executeUpdate()"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1130,                    ps.getGeneratedKeys());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1131,        }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2243, //4)Make sure underneath language resultset is not closed
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2254,"      //in case of autocommit on, if there was an exception which caused runtime rollback in this transaction prior to this call,"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2255,      //the rollback code will mark the language resultset closed (it doesn't mark the JDBC ResultSet closed).
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2256,"      //That is why alongwith the earlier checkIfClosed call in this method, there is a check for language resultset close as well."
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2257,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2258,      //4)Make sure underneath language resultset is not closed
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2259,      if (theResults.isClosed())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2260,"        throw Util.generateCsSQLException(SQLState.LANG_RESULT_SET_NOT_OPEN, methodName);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2276,     * 4) Make sure underneath language resultset is not closed
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2290,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2291,        // 4)Make sure underneath language resultset is not closed
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2292,        if (theResults.isClosed()) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2293,"            throw Util.generateCsSQLException(SQLState.LANG_RESULT_SET_NOT_OPEN, ""insertRow"");"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2294,        }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4251,  if (isClosed) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2514,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2515,"                assertSQLState(""08003"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2516,            else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2517,"                assertSQLState(""XCL16"", sqle);"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,388,   SubstituteExpressionVisitor se =
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,389,    new SubstituteExpressionVisitor(
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,390,"      gbc.getColumnExpression(),"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,391,"      vc,"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,393,   parent.getResultColumns().accept(se);
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,417,   if (havingClause != null) {
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,419,     new SubstituteExpressionVisitor(
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,420,"       gbc.getColumnExpression(),"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,421,"       vc, null);"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,422,    havingClause.accept(havingSE);
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,44,import org.apache.derby.iapi.jdbc.EngineConnection;
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,628,   ps = database.getConnection().prepareCall(sqlStmt);
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,630,   if (isolationSet)
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,631,    database.setPrepareIsolation(saveIsolationLevel);
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,632,   return ps;
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,634,  parsePkgidToFindHoldability();
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,635,"  ps = prepareStatementJDBC3(sqlStmt, scrollType, concurType,"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,636,            withHoldCursor);
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1619,
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1620, /**
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1621,  *  prepare a statement using Connection.prepareStatement.
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1622,     *
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1623,  *  @param sqlStmt - SQL statement text
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1624,  *  @param scrollType - scroll type
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1625,  *  @param concurType - concurrency type
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1626,  *  @param withHoldCursor - holdability
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1627,  *
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1628,  *  @throws SQLException
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1629,  *  @return Prepared Statement
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1630,  *  @see java.sql.Connection#prepareStatement
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1631,  */
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1632," private PreparedStatement prepareStatementJDBC3(String sqlStmt, int"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1633,"             scrollType, int concurType,"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1634,             int withHoldCursor) throws SQLException
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1635, {
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1636,        EngineConnection conn = database.getConnection();
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1637,        if (withHoldCursor == -1) {
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1638,"            // Holdability not explictly set, let the"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1639,            // connection provide the default.
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1640,"            return conn.prepareStatement(sqlStmt,"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1641,"                    scrollType, concurType);"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1642,        }
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1643,
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1644,        // Holdability explictly set.
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1645,"        return conn.prepareStatement(sqlStmt,"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1646,"                scrollType, concurType, withHoldCursor);"
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1647, }
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1648,
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,1649,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,472,   if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,576,   if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,218,   if (addedColumnOffset >= 0 &&
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,219,     target instanceof SelectNode &&
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,220,     ( (SelectNode)target ).hasDistinct())
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,221,    throw StandardException.newException(SQLState.LANG_DISTINCT_ORDER_BY_EXPRESSION);
java/client/org/apache/derby/client/net/Request.java,196,        // save the length position and skip
java/client/org/apache/derby/client/net/Request.java,197,        // note: the length position is saved so it can be updated
java/client/org/apache/derby/client/net/Request.java,198,        // with a different value later.
java/client/org/apache/derby/client/net/Request.java,200,        // always turn on chaining flags... this is helpful for lobs...
java/client/org/apache/derby/client/net/Request.java,201,        // these bytes will get rest if dss lengths are finalized.
java/client/org/apache/derby/client/net/Request.java,205,        // insert the manditory 0xD0 and the dssType
java/client/org/apache/derby/client/net/Request.java,215,        // write the request correlation id
java/client/org/apache/derby/client/net/Request.java,824,    // signal the completion of a Dss Layer A object. The length of
java/client/org/apache/derby/client/net/Request.java,825,    // dss object will be calculated based on the difference between the
java/client/org/apache/derby/client/net/Request.java,826,"    // start of the dss, saved on the beginDss call, and the current"
java/client/org/apache/derby/client/net/Request.java,827,    // offset into the buffer which marks the end of the data.  In the event
java/client/org/apache/derby/client/net/Request.java,828,"    // the length requires the use of continuation Dss headers, one for each 32k"
java/client/org/apache/derby/client/net/Request.java,829,"    // chunk of data, the data will be shifted and the continuation headers"
java/client/org/apache/derby/client/net/Request.java,830,    // will be inserted with the correct values as needed.
java/client/org/apache/derby/client/net/Request.java,831,"    // Note: In the future, we may try to optimize this approach"
java/client/org/apache/derby/client/net/Request.java,832,    // in an attempt to avoid these shifts.
java/client/org/apache/derby/client/ClientPooledConnection.java,371,     * Used by <code>LogicalConnection.close</code> when it disassociates itself
java/client/org/apache/derby/client/ClientPooledConnection.java,372,     * from the pooled connection.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,173,        // Due to a bug following cannot be run for client - DERBY-3379
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,174,"        // To run this fixture with client, add to getClientSuite(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,175,"        // when DERBY-3379 is fixed, remove from here (and client) and"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,176,        // move to baseSuite.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,177,"        suite.addTest(new J2EEDataSourceTest(""testPooledReuseOnClose""));"
java/client/org/apache/derby/client/am/Blob.java,24,import java.io.BufferedInputStream;
java/client/org/apache/derby/client/am/Blob.java,263,    private java.io.InputStream getBinaryStreamX() throws SqlException {
java/client/org/apache/derby/client/am/Blob.java,654,     *
java/client/org/apache/derby/client/am/Blob.java,655,     * @throws SQLException.
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,24,import java.sql.CallableStatement;
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,189,
java/client/org/apache/derby/client/am/Clob.java,357,    private java.io.Reader getCharacterStreamX() throws SqlException {
java/client/org/apache/derby/client/am/Clob.java,403,    private java.io.InputStream getAsciiStreamX() throws SqlException {
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,24,import java.sql.CallableStatement;
java/client/org/apache/derby/client/am/ClobLocatorReader.java,169,
java/client/org/apache/derby/client/am/Cursor.java,982,"                Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,983,"                return agent_.crossConverters_.getStringFromBytes(b.getBytes(1, (int) b.length()));"
java/client/org/apache/derby/client/am/Cursor.java,986,"                return c.getSubString(1, (int) c.length());"
java/client/org/apache/derby/client/am/Cursor.java,1005,"                Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1006,"                return b.getBytes(1, (int) b.length());"
java/client/org/apache/derby/client/am/Cursor.java,1016,    public final java.io.InputStream getBinaryStream(int column) throws SqlException {
java/client/org/apache/derby/client/am/Cursor.java,1017,        try {
java/client/org/apache/derby/client/am/Cursor.java,1018,            switch (jdbcTypes_[column - 1]) {
java/client/org/apache/derby/client/am/Cursor.java,1025,"                Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1026,                return b.getBinaryStream();
java/client/org/apache/derby/client/am/Cursor.java,1030,            }
java/client/org/apache/derby/client/am/Cursor.java,1031,        } catch ( SQLException se ) {
java/client/org/apache/derby/client/am/Cursor.java,1032,            throw new SqlException(se);
java/client/org/apache/derby/client/am/Cursor.java,1036,    public final java.io.InputStream getAsciiStream(int column) throws SqlException {
java/client/org/apache/derby/client/am/Cursor.java,1037,        try {
java/client/org/apache/derby/client/am/Cursor.java,1038,            switch (jdbcTypes_[column - 1]) {
java/client/org/apache/derby/client/am/Cursor.java,1041,                return c.getAsciiStream();
java/client/org/apache/derby/client/am/Cursor.java,1065,"                Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1066,                return b.getBinaryStream();
java/client/org/apache/derby/client/am/Cursor.java,1070,            }
java/client/org/apache/derby/client/am/Cursor.java,1071,        }
java/client/org/apache/derby/client/am/Cursor.java,1072,        catch ( SQLException se ) {
java/client/org/apache/derby/client/am/Cursor.java,1073,            throw new SqlException(se);
java/client/org/apache/derby/client/am/Cursor.java,1076,
java/client/org/apache/derby/client/am/Cursor.java,1117,"                Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1118,                return b.getBinaryStream();
java/client/org/apache/derby/client/am/Cursor.java,1128,    public final java.io.Reader getCharacterStream(int column) throws SqlException {
java/client/org/apache/derby/client/am/Cursor.java,1129,        try {
java/client/org/apache/derby/client/am/Cursor.java,1130,            switch (jdbcTypes_[column - 1]) {
java/client/org/apache/derby/client/am/Cursor.java,1133,                return c.getCharacterStream();
java/client/org/apache/derby/client/am/Cursor.java,1158,"                    Blob b = (Blob) getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1159,"                    return new java.io.InputStreamReader(b.getBinaryStream(), ""UTF-16BE"");"
java/client/org/apache/derby/client/am/Cursor.java,1169,        } catch ( SQLException se ) {
java/client/org/apache/derby/client/am/Cursor.java,1170,            throw new SqlException(se);
java/client/org/apache/derby/client/am/Cursor.java,1171,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,200,"        //suite.addTest(TestConfiguration.clientServerDecorator(baseSuite(""LargeDataLocksTest:client"")));"
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,273," protected void createPage(PageKey newIdentity, int[] args)"
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,279,  // args[0] is the format id
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,280,  // args[1] is whether to sync the page to disk or not
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,281,  // args[2] is the pagesize (used by StoredPage)
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,282,  // args[3] is the spareSize (used by StoredPage)
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,283,  // args[4] is the number of bytes to reserve for container header
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,284,  // args[5] is the minimumRecordSize
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,285,  // NOTE: the arg list here must match the one in FileContainer
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,286,  int pageSize = args[2];
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,287,  int minimumRecordSize = args[5];
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,288,  borrowedSpace = args[4];
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,324,"  extent = createExtent(newIdentity.getPageNumber()+1, pageSize, 0 /* pagesAlloced */, maxSpace);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,259,  int[] createArgs = (int[]) createParameter;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,261,  if (createArgs[0] == -1)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,270,  if (createArgs[0] != getTypeFormatId())
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,273,"                changeInstanceTo(createArgs[0], newIdentity).createIdentity("
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,299,  if ((createArgs[1] & WRITE_SYNC) != 0 ||
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,300,   (createArgs[1] & WRITE_NO_SYNC) != 0)
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,301,"   writePage(newIdentity, (createArgs[1] & WRITE_SYNC) != 0);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,307,    String syncFlag =
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,308,"                    ((createArgs[1] & WRITE_SYNC) != 0)     ? ""Write_Sync"" :"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,309,"     (((createArgs[1] & WRITE_NO_SYNC) != 0) ? ""Write_NO_Sync"" :"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,314,"                    ""creating new page "" + newIdentity + "" with "" + syncFlag);"
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,903," protected abstract void createPage(PageKey id, int[] args)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,292, /**
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,293,  the number of arguments we need to pass to alloc page for create
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,294, */
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,295, protected static final int STORED_PAGE_ARG_NUM = 5;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,296, protected static final int ALLOC_PAGE_ARG_NUM  = 6;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,297,
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1771,       int[] createPageArgs = new int[STORED_PAGE_ARG_NUM];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1772,       createPageArgs[0] = StoredPage.FORMAT_NUMBER;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1773,       createPageArgs[1] = prealloced ?
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1774,                                        0 : (noIO ? 0 : CachedPage.WRITE_SYNC);
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1775,       createPageArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1776,       createPageArgs[3] = spareSpace;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1777,       createPageArgs[4] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1800,"                            ""\ncreatePageArgs[1] = "" + createPageArgs[1] +"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2226,  int[] createAllocPageArgs = new int[ALLOC_PAGE_ARG_NUM];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2227,  createAllocPageArgs[0] = AllocPage.FORMAT_NUMBER;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2228,  createAllocPageArgs[1] = noIO ? 0 : CachedPage.WRITE_SYNC;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2229,  createAllocPageArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2230,  createAllocPageArgs[3] = 0;  // allocation page has no need for spare
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2231,  createAllocPageArgs[4] = containerInfoSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2232,  createAllocPageArgs[5] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2274,  @param createArgs the int array for page creation
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2282,"        int[] createArgs,"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2556,  int[] reCreatePageArgs = null;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2560,   reCreatePageArgs = new int[STORED_PAGE_ARG_NUM];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2561,   reCreatePageArgs[0] = pageFormat;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2562,   reCreatePageArgs[1] = CachedPage.WRITE_SYNC;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2563,   reCreatePageArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2564,   reCreatePageArgs[3] = spareSpace;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2565,   reCreatePageArgs[4] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2569,   reCreatePageArgs = new int[ALLOC_PAGE_ARG_NUM];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2583,   reCreatePageArgs[0] = pageFormat;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2584,   reCreatePageArgs[1] = CachedPage.WRITE_SYNC;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2585,   reCreatePageArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2586,   reCreatePageArgs[3] = 0; // allocation page has no need for spare
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2587,   reCreatePageArgs[4] = containerInfoSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2588,   reCreatePageArgs[5] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3254,  int[] createArgs = new int[5];
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3255,  createArgs[0] = StoredPage.FORMAT_NUMBER; // default is a stored page
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3256,  createArgs[1] = CachedPage.WRITE_NO_SYNC; // write it but no sync
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3257,  createArgs[2] = pageSize;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3258,  createArgs[3] = spareSpace;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,3259,  createArgs[4] = minimumRecordSize;
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,749,     *                      container header and passed in through the array.
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,753, protected void createPage(
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,754,"    PageKey newIdentity,"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,755,    int[]   args)
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,758,  // arg[0] is the formatId of the page
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,759,  // arg[1] is whether to sync the page to disk or not
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,761,  int pageSize        = args[2];
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,762,  spareSpace          = args[3];
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,763,  minimumRecordSize   = args[4];
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,765,        setPageArray(pageSize);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,78,    private final int             locator;
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,120,             locator = con.addLOBMapping (this);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,196,        this.locator = con.addLOBMapping (this);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,78,    private final int             locator;
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,120,             locator = con.addLOBMapping (this);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,196,        this.locator = con.addLOBMapping (this);
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,82,    private final int locator;
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,94,        this.locator = con.addLOBMapping (this);
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,159,        this.locator = con.addLOBMapping (this);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2904,  HashMap map = rootConnection.lobHashMap;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2906,            Iterator it = map.values().iterator();
java/client/org/apache/derby/client/am/Cursor.java,689,"    abstract public Blob getBlobColumn_(int column, Agent agent) throws SqlException;"
java/client/org/apache/derby/client/am/Cursor.java,691,"    abstract public Clob getClobColumn_(int column, Agent agent) throws SqlException;"
java/client/org/apache/derby/client/am/Cursor.java,1007,"                Blob b = getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1010,                b.free();  // Free resources from underlying Blob
java/client/org/apache/derby/client/am/Cursor.java,1013,"                Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1015,                c.free();  // Free resources from underlying Clob
java/client/org/apache/derby/client/am/Cursor.java,1035,"                Blob b = getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1037,                b.free(); // Free resources from underlying Blob
java/client/org/apache/derby/client/am/Cursor.java,1058,"                Blob b = getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1062,                    // Underlying Blob should be released when stream is closed
java/client/org/apache/derby/client/am/Cursor.java,1063,                    is.setFreeBlobOnClose();
java/client/org/apache/derby/client/am/Cursor.java,1079,"                Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1083,                    // Underlying Clob should be released when stream is closed
java/client/org/apache/derby/client/am/Cursor.java,1084,                    is.setFreeClobOnClose();
java/client/org/apache/derby/client/am/Cursor.java,1124,"                    Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1126,                    c.free(); // Release resources from underlying Clob
java/client/org/apache/derby/client/am/Cursor.java,1175,"                Clob c = getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1179,                    //  Make sure underlying Blob is released when reader is closed
java/client/org/apache/derby/client/am/Cursor.java,1180,                    reader.setFreeClobOnClose();
java/client/org/apache/derby/client/am/Cursor.java,1225,"            return getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1235,"            return getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1284,"            return getBlobColumn_(column, agent_);"
java/client/org/apache/derby/client/am/Cursor.java,1286,"            return getClobColumn_(column, agent_);"
java/client/org/apache/derby/client/net/NetCursor.java,1079,"    public Blob getBlobColumn_(int column, Agent agent) throws SqlException"
java/client/org/apache/derby/client/net/NetCursor.java,1080,    {
java/client/org/apache/derby/client/net/NetCursor.java,1081,        netResultSet_.markLOBAsAccessed(column);
java/client/org/apache/derby/client/net/NetCursor.java,1115,"    public Clob getClobColumn_(int column, Agent agent) throws SqlException {"
java/client/org/apache/derby/client/net/NetCursor.java,1116,        netResultSet_.markLOBAsAccessed(column);
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,727,            try {
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,728,                // if the transaction is not local disassociate the transaction from
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,729,                // the connection first because the rollback can not be performed
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,730,                // on a transaction associated with the XAResource
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,732,                    if (!local) {
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,733,                        XAResource xaResource = getXAResource();
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,734,                        // this will throw the XAException (because TMFAIL
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,735,                        // will throw an exception)
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,736,"                        xaResource.end(xid, XAResource.TMFAIL);"
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,737,                    }
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,739,                    // do not print out the exception generally thrown
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,740,                    // when TMFAIL flag is present
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,741,                    if (e.errorCode < XAException.XA_RBBASE
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,742,                        || e.errorCode > XAException.XA_RBEND) {
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,743,                        connThread.getServer().consoleExceptionPrint(e);
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,744,                    }
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,746,"                rollbackTransaction(xid, false);"
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,747,            } catch  (DRDAProtocolException e) {
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,748,                // because we do not dump any DRDA stuff to the socket
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,749,                // the exception can not be thrown in this case
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,750,"                // However, we will dump the exception to the console"
java/drda/org/apache/derby/impl/drda/DRDAXAProtocol.java,751,                connThread.getServer().consoleExceptionPrint(e);
java/drda/org/apache/derby/impl/drda/XADatabase.java,37,import org.apache.derby.impl.drda.DRDAXid;
java/drda/org/apache/derby/impl/drda/XADatabase.java,38,import  org.apache.derby.iapi.jdbc.BrokeredConnection;
java/drda/org/apache/derby/impl/drda/XADatabase.java,117,
java/drda/org/apache/derby/impl/drda/XADatabase.java,120,
java/drda/org/apache/derby/impl/drda/XADatabase.java,121,
java/drda/org/apache/derby/impl/drda/XADatabase.java,122,
java/drda/org/apache/derby/impl/drda/XADatabase.java,123,
java/drda/org/apache/derby/impl/drda/XADatabase.java,124,
java/drda/org/apache/derby/impl/drda/XADatabase.java,125,
java/drda/org/apache/derby/impl/drda/XADatabase.java,126,
java/drda/org/apache/derby/impl/drda/XADatabase.java,127,
java/engine/org/apache/derby/jdbc/ResourceAdapterImpl.java,32,//import org.apache.derby.iapi.jdbc.XATransactionResource;
java/engine/org/apache/derby/jdbc/XATransactionState.java,84,    /** Has this transaction been finished (committed
java/engine/org/apache/derby/jdbc/XATransactionState.java,85,      * or rolled back)? */
java/engine/org/apache/derby/jdbc/XATransactionState.java,86,    boolean isFinished;
java/engine/org/apache/derby/jdbc/XATransactionState.java,103,                XATransactionState.this.cancel();
java/engine/org/apache/derby/jdbc/XATransactionState.java,104,            } catch (XAException ex) {
java/engine/org/apache/derby/jdbc/XATransactionState.java,105,                Monitor.logThrowable(ex);
java/engine/org/apache/derby/jdbc/XATransactionState.java,121,        this.isFinished = false;
java/engine/org/apache/derby/jdbc/XATransactionState.java,122,
java/engine/org/apache/derby/jdbc/XATransactionState.java,350,    /** This method cancels timeoutTask and marks the transaction
java/engine/org/apache/derby/jdbc/XATransactionState.java,351,      * as finished by assigning 'isFinished = true'.
java/engine/org/apache/derby/jdbc/XATransactionState.java,357,        isFinished = true;
java/engine/org/apache/derby/jdbc/XATransactionState.java,366,    private synchronized void cancel() throws XAException {
java/engine/org/apache/derby/jdbc/XATransactionState.java,367,        // Check isFinished just to be sure that
java/engine/org/apache/derby/jdbc/XATransactionState.java,371,        if (!isFinished) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,89,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,90,            // check the output of the global xid in syscs_diag.transaction_table
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,100,            Assert.assertTrue(rs.next());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,104,"            Assert.assertEquals(xid, rXid);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,107,            Assert.assertFalse(rs.next());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,143,      * It executes 1000 global transactions during the test. Everyone
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,167,        int timeoutStatementsToExecute = 1000;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,170,           commited statement in timout related test. */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,174,           during a timout related test. */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,183,        XAConnection xaConn = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,188,            xaConn = xaDataSource.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,189,            xaRes = xaConn.getXAResource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,190,            conn = xaConn.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,193,            xaRes.setTransactionTimeout(5);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,204,                xaConn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,206,                // check the timout for transactions disassociated
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,210,                    Assert.fail();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,219,                xaConn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,221,                // check the timout for transactions disassociated
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,225,                xaConn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,226,            } else {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,227,                // check the timout for associated transactions
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,228,                ;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,229,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,233,"        ResultSet rs = stm.executeQuery(""select count(*) from XATT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,238,        Assert.assertTrue(rs.getInt(1) == timeoutStatementsCommitted);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,240,        // test the timout during the statement is run
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,241,        xaConn = xaDataSource.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,242,        xaRes = xaConn.getXAResource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,243,        conn = xaConn.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,253,        boolean exceptionThrown = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,256,"                 ""select * from XATT a, XATT b, XATT c, XATT d, XATT e """
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,257,"               + ""order by a.i"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,262,                ex
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,263,            );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,264,            exceptionThrown = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,266,        Assert.assertTrue(exceptionThrown);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,274,        Assert.assertTrue(rs.getInt(1) == timeoutStatementsCommitted);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,299,        Assert.assertNotNull(str);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,300,"        Assert.assertTrue(str.matches(""\\(\\p{Digit}+,\\p{XDigit}+,\\p{XDigit}+\\)""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,306,        Assert.assertTrue(gtidS.length() % 2 == 0);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,307,        Assert.assertTrue(bqualS.length() % 2 == 0);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,335,            return TestConfiguration.defaultSuite(XATransactionTest.class);
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,29,import org.apache.derby.impl.store.raw.data.BaseContainer;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,30,import org.apache.derby.impl.store.raw.data.BaseContainerHandle;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,31,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,32,import org.apache.derby.impl.store.raw.data.PageVersion;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,33,
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,37,import org.apache.derby.iapi.services.daemon.DaemonService;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,38,import org.apache.derby.iapi.services.daemon.Serviceable;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,41,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,49,import org.apache.derby.iapi.store.raw.LockingPolicy;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,50,import org.apache.derby.iapi.store.raw.Loggable;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,53,import org.apache.derby.iapi.store.raw.PageTimeStamp;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,72,import java.io.DataOutput;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,695,  Read the container's header.  Assumes the input stream (fileData)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,696,  is positioned at the beginning of the file.
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,697,
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,698,  Subclass that implements openContainer is expected to manufacture a DataInput
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,699,  stream which is used here to read the header.
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,706, protected void readHeader(DataInput fileData)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,709,  // Always read the header from the input stread even if the alloc page may
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,710,  // still be in cache.  This is because a stubbify operation only writes
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,711,"  // the stub to disk, it did not get rid of any stale page from the page"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,712,  // cache.  So if it so happen that the stubbified container object is
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,713,"  // aged out of the container cache but the first alloc page hasn't,"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,714,"  // then when any stale page of this container wants to be written out,"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,715,"  // the container needs to be reopened, which is when this routine is"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,716,  // called.  We must not get the alloc page in cache because it may be
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,717,  // stale page and it may still say the container has not been dropped.
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,718,
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,719,  byte[] epage = getEmbryonicPage(fileData);
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,720,
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,726,
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,727,  epage = null;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,872,  Write the container header directly to output stream (fileData).
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,873,  Assumes the output stream is positioned at the beginning of the file.
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,883," protected void writeHeader(DataOutput fileData, boolean create, byte[] epage)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,906,   fileData.write(epage);
java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java,92,   readHeader(dis);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,682,   file.seek(FIRST_ALLOC_PAGE_OFFSET);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,683,   epage = getEmbryonicPage(file);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,688,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,689,  file.seek(FIRST_ALLOC_PAGE_OFFSET);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1396,                 fileData.seek(FIRST_ALLOC_PAGE_OFFSET);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1397,                 readHeader(fileData);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1438,                         readHeader(fileData);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,27,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,29,import org.apache.derby.impl.store.raw.data.BaseDataFileFactory;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,100,        boolean result = super.openContainer(newIdentity);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,101,        if (result == true && super.fileData != null &&
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,102,                super.fileData instanceof java.io.RandomAccessFile) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,103,            /** XXX - this cast isn't testing friendly.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,104,             * A testing class that implements StorageRandomAccessFile but isn't
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,105,"             * a RandomAccessFile will be ""worked around"" by this class. An"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,106,             * example of such a class is
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,107,             * functionTests/util/corruptio/CorruptRandomAccessFile.java.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,108,             * An interface rework may be necessary.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,109,             */
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,110,            ourChannel = ((RandomAccessFile)super.fileData).getChannel();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,111,        }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,112,        return result;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,124,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,125,        if (super.fileData != null &&
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,126,                super.fileData instanceof java.io.RandomAccessFile) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,127,"            // XXX - see ""XXX"" comment above."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,128,            ourChannel = ((RandomAccessFile) super.fileData).getChannel();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,129,        }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,191,            ioChannel = ourChannel;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,194,                // If ioChannel == null and fileData supports getChannel()
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,195,                // we have a problem. See this.openContainer(ContainerKey
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,196,                // newIdentity).
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,197,                SanityManager.ASSERT(! ((ioChannel == null) &&
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,198,"                        super.fileData instanceof java.io.RandomAccessFile),"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,199,"                        ""RAFContainer4: New style readPage attempted"" +"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,200,"                        "" with uninitialized ioChannel"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,201,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,275,        synchronized(this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,280,            ioChannel = ourChannel;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,281,            if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,282,                // If ioChannel == null and fileData supports getChannel()
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,283,                // we have a problem
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,284,                SanityManager.ASSERT(! ((ioChannel == null) &&
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,285,"                        super.fileData instanceof java.io.RandomAccessFile),"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,286,"                        ""RAFContainer4: New style writePage attempted "" +"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,287,"                        ""with uninitialized ioChannel"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,288,            }
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,24,import java.sql.SQLException;
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,25,
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,28,import org.apache.derby.shared.common.error.ExceptionUtil;
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,29,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,191,    /**
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,192,     * Closes this input stream and releases any system resources associated
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,193,     * with the stream.  This will release the underlying Blob value.
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,194,     *
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,195,     * @throws java.io.IOException
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,196,     */
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,197,    public void close() throws IOException {
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,198,        try {
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,199,            if (blob != null  && freeBlobOnClose) {
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,200,                blob.free();
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,201,            }
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,202,        } catch (SQLException ex) {
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,203,            if (ex.getSQLState().compareTo
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,204,                    (ExceptionUtil.getSQLStateFromIdentifier
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,205,                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,206,"                // Blob has already been freed, probably because of autocommit"
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,207,                return;  // Ignore error
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,208,            }
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,209,
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,210,            IOException ioEx = new IOException();
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,211,            ioEx.initCause(ex);
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,212,            throw ioEx;
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,213,        }
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,214,    }
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,215,
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,216,    /**
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,217,     * Tell stream to free the underlying Blob when it is closed.
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,218,     */
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,219,    public void setFreeBlobOnClose() {
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,220,        freeBlobOnClose = true;
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,221,    }
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,222,
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,244,
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,245,    /**
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,246,"     * If true, the underlying Blob will be freed when the underlying stream is"
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,247,     * closed.  Used to implement correct behavior for streams obtained from
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,248,     * result sets.
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,249,     */
java/client/org/apache/derby/client/am/BlobLocatorInputStream.java,250,    private boolean freeBlobOnClose = false;
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,66,    /**
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,67,"     * If true, the underlying Blob will be freed when the underlying stream is"
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,68,     * closed.  Used to implement correct behavior for streams obtained from
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,69,     * result sets.
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,70,     */
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,71,    private boolean freeClobOnClose = false;
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,72,
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,170,    /**
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,171,     * Closes this input stream and releases any system resources associated
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,172,     * with the stream.  This will release the underlying Clob value.
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,173,     *
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,174,     * @throws java.io.IOException
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,175,     */
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,176,    public void close() throws IOException {
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,177,        try {
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,178,            if (clob != null  && freeClobOnClose) {
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,179,                clob.free();
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,180,            }
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,181,        } catch (SQLException ex) {
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,182,            if (ex.getSQLState().compareTo
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,183,                    (ExceptionUtil.getSQLStateFromIdentifier
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,184,                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,185,"                // Clob has already been freed, probably because of autocommit"
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,186,                return;  // Ignore error
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,187,            }
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,188,
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,189,            IOException ioEx = new IOException();
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,190,            ioEx.initCause(ex);
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,191,            throw ioEx;
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,192,        }
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,193,    }
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,194,
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,195,    /**
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,196,     * Tell stream to free the underlying Clob when it is closed.
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,197,     */
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,198,    public void setFreeClobOnClose() {
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,199,        freeClobOnClose = true;
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,200,    }
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,201,
java/client/org/apache/derby/client/am/ClobLocatorInputStream.java,202,
java/client/org/apache/derby/client/am/ClobLocatorReader.java,72,    /**
java/client/org/apache/derby/client/am/ClobLocatorReader.java,73,"     * If true, the underlying Blob will be freed when the underlying stream is"
java/client/org/apache/derby/client/am/ClobLocatorReader.java,74,     * closed.  Used to implement correct behavior for streams obtained from
java/client/org/apache/derby/client/am/ClobLocatorReader.java,75,     * result sets.
java/client/org/apache/derby/client/am/ClobLocatorReader.java,76,     */
java/client/org/apache/derby/client/am/ClobLocatorReader.java,77,    private boolean freeClobOnClose = false;
java/client/org/apache/derby/client/am/ClobLocatorReader.java,78,
java/client/org/apache/derby/client/am/ClobLocatorReader.java,178,
java/client/org/apache/derby/client/am/ClobLocatorReader.java,179,        try {
java/client/org/apache/derby/client/am/ClobLocatorReader.java,180,            if (clob != null && freeClobOnClose) {
java/client/org/apache/derby/client/am/ClobLocatorReader.java,181,                clob.free();
java/client/org/apache/derby/client/am/ClobLocatorReader.java,182,            }
java/client/org/apache/derby/client/am/ClobLocatorReader.java,183,        } catch (SQLException ex) {
java/client/org/apache/derby/client/am/ClobLocatorReader.java,184,            if (ex.getSQLState().compareTo
java/client/org/apache/derby/client/am/ClobLocatorReader.java,185,                    (ExceptionUtil.getSQLStateFromIdentifier
java/client/org/apache/derby/client/am/ClobLocatorReader.java,186,                            (SQLState.LOB_OBJECT_INVALID)) == 0) {
java/client/org/apache/derby/client/am/ClobLocatorReader.java,187,"                // Clob has already been freed, probably because of autocommit"
java/client/org/apache/derby/client/am/ClobLocatorReader.java,188,                return;  // Ignore error
java/client/org/apache/derby/client/am/ClobLocatorReader.java,189,            }
java/client/org/apache/derby/client/am/ClobLocatorReader.java,190,
java/client/org/apache/derby/client/am/ClobLocatorReader.java,191,            IOException ioEx = new IOException();
java/client/org/apache/derby/client/am/ClobLocatorReader.java,192,            ioEx.initCause(ex);
java/client/org/apache/derby/client/am/ClobLocatorReader.java,193,            throw ioEx;
java/client/org/apache/derby/client/am/ClobLocatorReader.java,194,        }
java/client/org/apache/derby/client/am/ClobLocatorReader.java,195,    }
java/client/org/apache/derby/client/am/ClobLocatorReader.java,196,
java/client/org/apache/derby/client/am/ClobLocatorReader.java,197,    /**
java/client/org/apache/derby/client/am/ClobLocatorReader.java,198,     * Tell stream to free the underlying Clob when it is closed.
java/client/org/apache/derby/client/am/ClobLocatorReader.java,199,     */
java/client/org/apache/derby/client/am/ClobLocatorReader.java,200,    public void setFreeClobOnClose() {
java/client/org/apache/derby/client/am/ClobLocatorReader.java,201,        freeClobOnClose = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,1700,
java/engine/org/apache/derby/impl/sql/execute/MaxMinAggregator.java,94,  super.writeExternal(out);
java/engine/org/apache/derby/impl/sql/execute/MaxMinAggregator.java,106,  super.readExternal(in);
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,60,     // DERBY-2644 disable encryption tests until permissions failures
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,61,     // are resolved.
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,62,            //suite.addTest(EncryptionKeyAESTest.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,63,            //suite.addTest(EncryptionKeyBlowfishTest.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,64,            //suite.addTest(EncryptionKeyDESTest.suite());
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1525,      false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1566,      false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8045,"  * @param list  The list to build, if supplied.  If null, then caller expects"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8046,  *     a single descriptor
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8070,  TransactionController tc;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8073,  // Get the current transaction controller
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8074,  tc = getTransactionCompile();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8075,
java/engine/org/apache/derby/impl/sql/execute/CreateSchemaConstantAction.java,103,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,82,    @param activation activation
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,83,    @param schemaName name of the schema
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,95,  TransactionController tc = activation.getLanguageConnectionContext().getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,99,            ConstantAction csca
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,102,            try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,103,                csca.executeConstantAction(activation);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,104,            } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,105,                if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,106,                    .equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,107,"                    // Ignore ""Schema already exists"". Another thread has"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,108,                    // probably created it after we checked for it
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,109,                } else {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,110,                    throw se;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,111,                }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,112,            }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,113,
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,186,            boolean mayStillRun = !cancel();
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,187,            if (mayStillRun) {
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,188,                synchronized (this) {
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,189,                    statementContext = null;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,190,                }
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,99,        int ret = this.stream.read(b);
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,100,        this.pos += ret;
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,101,        return ret;
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,115,        this.pos += ret;
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,128,        if (ret > -1) {
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetStream.java,25,import java.io.IOException;
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetStream.java,32,    extends InputStream {
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,113,        if (ret > 0) {
java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java,128,        if (ret > 0) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9091,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9092,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2236,  int size = size();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2347,  int size = size();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2219,"       ""size() = ("" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2220,       size() +
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2221,"       "") is expected to equal otherRCL.size ("" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2222,       otherRCL.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1763,     * Test that GROUP BY can be used in the sub-queries of a UNION.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1764,     * DERBY-3764.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1766,    public void testUnionAndGroupBy() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1767,        PreparedStatement ps1 =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1768,"            prepareStatement(""select sum(a) from yy group by a union values 1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1769,"        // The bug is not completely fixed, so executing the statement fail"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1770,        // JDBC.assertDrainResults(ps1.executeQuery());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1771,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1772,        PreparedStatement ps2 =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1773,"            prepareStatement(""select sum(a) from yy group by a union "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1774,"                             ""select sum(a) from yy group by a"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1775,"        // The bug is not completely fixed, so executing the statement fail"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1776,        // JDBC.assertDrainResults(ps2.executeQuery());
java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java,85,    private final char[]   buffer = new char[8 * 1024];
java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java,141,                    this.in = in;
java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java,149,                    // Buffer this for improved performance.
java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java,150,                    this.in = new BufferedInputStream (in);
java/engine/org/apache/derby/impl/jdbc/UTF8Reader.java,196,        this.in = new BufferedInputStream(in);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,107,   // DERBY-48: This operation creates a schema and we don't
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,108,   // want to hold a lock for SYSSCHEMAS for the duration of
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,109,"   // the user transaction, so we perform the creation in a"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,110,   // nested transaction if possible.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,111,   TransactionController useTc    = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,112,   TransactionController nestedTc = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,114,   try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,115,    nestedTc = tc.startNestedUserTransaction(false);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,116,    useTc = nestedTc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,117,   } catch (StandardException e) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,118,    if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,119,     SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,120,"      ""Unexpected: not able to start nested transaction "" +"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,121,"      ""to auto-create schema"", e);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,123,    useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,124,   }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,126,"   // Try max twice: if nested transaction times out, try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,127,   // again in the outer transaction because it may be a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,128,"   // self-lock, that is, the outer transaction may hold some"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,129,   // lock(s) that make the nested transaction attempt to set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,130,   // a write lock time out.  Trying it again in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,131,   // transaction will then succeed. If the reason is some
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,132,"   // other transaction barring us, trying again in the outer"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,133,   // transaction will possibly time out again.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,134,   //
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,135,"   // Also, if creating a nested transaction failed, only try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,136,   // once in the outer transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,137,   while (true) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,138,    try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,139,"     csca.executeConstantAction(activation, useTc);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,140,    } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,141,     if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,142,      // We don't test for SQLState.DEADLOCK or
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,143,      // .LOCK_TIMEOUT_LOG here because a) if it is a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,144,"      // deadlock, it may be better to expose it, and b)"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,145,      // LOCK_TIMEOUT_LOG happens when the app has set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,146,"      // derby.locks.deadlockTrace=true, in which case we"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,147,      // don't want to mask the timeout.  So in both the
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,148,      // latter cases we just throw.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,149,      if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,151,"       // clean up after use of nested transaction,"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,152,       // then try again in outer transaction
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,153,       useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,155,       continue;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,157,     } else if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,161,      break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,162,     }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,163,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,164,"     // We got an non-expected exception, either in"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,165,     // the nested transaction or in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,166,     // transaction; we had better pass that on
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,167,     if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,168,      nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,170,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,171,     throw se;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,173,    break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,176,   // We either succeeded or got LANG_OBJECT_ALREADY_EXISTS.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,177,   // Clean up if we did this in a nested transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,178,   if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,179,    nestedTc.commit();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,180,    nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,181,   }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java,211,    protected void  tearDown() throws Exception {
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,505,  * @param schemaName
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,104,            CreateSchemaConstantAction csca
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,105,"                = new CreateSchemaConstantAction(schemaName, (String) null);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,109,    // DERBY-48: This operation creates the user's initial default
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,110,    // schema and we don't want to hold a lock for SYSSCHEMAS for
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,111,"    // the duration of the user transaction, so we perform the"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,112,    // creation in a nested transaction if possible.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,113,    TransactionController useTc    = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,114,    TransactionController nestedTc = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,115,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,116,    try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,117,     nestedTc = tc.startNestedUserTransaction(false);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,118,     useTc = nestedTc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,119,    } catch (StandardException e) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,120,     if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,121,      SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,122,"       ""Unexpected: not able to start nested transaction "" +"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,123,"       ""to auto-create schema"", e);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,124,     }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,125,     useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,126,    }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,127,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,128,"    // Try max twice: if nested transaction times out, try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,129,    // again in the outer transaction because it may be a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,130,"    // self-lock, that is, the outer transaction may hold some"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,131,    // lock(s) that make the nested transaction attempt to set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,132,    // a write lock time out.  Trying it again in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,133,    // transaction will then succeed. If the reason is some
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,134,"    // other transaction barring us, trying again in the outer"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,135,    // transaction will possibly time out again.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,136,    //
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,137,"    // Also, if creating a nested transaction failed, only try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,138,    // once in the outer transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,139,    while (true) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,140,     try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,141,"      csca.executeConstantAction(activation, useTc);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,142,     } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,143,      if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,144,       // We don't test for SQLState.DEADLOCK or
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,145,       // .LOCK_TIMEOUT_LOG here because a) if it is a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,146,"       // deadlock, it may be better to expose it, and b)"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,147,       // LOCK_TIMEOUT_LOG happens when the app has set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,148,"       // derby.locks.deadlockTrace=true, in which case we"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,149,       // don't want to mask the timeout.  So in both the
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,150,       // latter cases we just throw.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,151,       if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,152,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,153,"        // clean up after use of nested transaction,"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,154,        // then try again in outer transaction
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,155,        useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,156,        nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,157,        continue;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,158,       }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,159,      } else if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,160,            .equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,161,"       // Ignore ""Schema already exists"". Another thread has"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,162,       // probably created it after we checked for it
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,163,       break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,164,      }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,165,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,166,"      // We got an non-expected exception, either in"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,167,      // the nested transaction or in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,168,      // transaction; we had better pass that on
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,169,      if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,170,       nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,171,      }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,172,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,173,      throw se;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,174,     }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,175,     break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,176,    }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,177,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,178,    // We either succeeded or got LANG_OBJECT_ALREADY_EXISTS.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,179,    // Clean up if we did this in a nested transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,180,    if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,181,     nestedTc.commit();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,182,     nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,183,    }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,185,    // create the schema in the user transaction always
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java,224,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java,237,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangHarnessJavaTest.java,71,"        // ""holdCursorJavaReflection"", TODO don't care holdability supported."
java/drda/org/apache/derby/impl/drda/DssTrace.java,30,import org.apache.derby.iapi.util.PrivilegedFileOps;
java/drda/org/apache/derby/impl/drda/DssTrace.java,31,
java/drda/org/apache/derby/impl/drda/DssTrace.java,32,
java/drda/org/apache/derby/impl/drda/DssTrace.java,182,                File traceDirectory = new File(fileName).getParentFile();
java/drda/org/apache/derby/impl/drda/DssTrace.java,183,                if (traceDirectory != null)
java/drda/org/apache/derby/impl/drda/DssTrace.java,184,                {
java/drda/org/apache/derby/impl/drda/DssTrace.java,185,                    PrivilegedFileOps.mkdirs(traceDirectory);
java/engine/org/apache/derby/impl/load/Export.java,25,import java.sql.ResultSet;
java/engine/org/apache/derby/impl/load/Export.java,28,import java.util.*;
java/engine/org/apache/derby/impl/load/Export.java,29,import org.apache.derby.iapi.util.PrivilegedFileOps;
java/engine/org/apache/derby/impl/load/Export.java,129,            return PrivilegedFileOps.exists(file);
java/engine/org/apache/derby/impl/load/Export.java,145,
java/engine/org/apache/derby/impl/load/Export.java,146,           return PrivilegedFileOps.exists(file);
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,24,import org.apache.derby.iapi.util.PrivilegedFileOps;
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,575,   if(PrivilegedFileOps.exists(backupRoot))
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,579,    if(PrivilegedFileOps.exists(bserviceProp))
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,25,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,38,import org.apache.derby.iapi.services.info.ProductGenusNames;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,53,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,70,import org.apache.derby.iapi.store.raw.RecordHandle;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,89,import org.apache.derby.iapi.util.PrivilegedFileOps;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,98,import java.io.FilePermission;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,99,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2472,        File bsegdir;   //segment directory in the backup
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2473,        File backupRoot = new java.io.File(backupPath); //root dir of backup db
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2474,
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2481,        String[] bfilelist = PrivilegedFileOps.list(backupRoot);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2490,"                    bsegdir = new File(backupRoot , bfilelist[i]);"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2491,                    if(PrivilegedFileOps.exists(bsegdir) &&
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2492,                       PrivilegedFileOps.isDirectory(bsegdir))
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2493,                    {
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2494,                        segmentexist = true;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2495,                        break;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2624,    public final Object run() throws Exception
java/client/org/apache/derby/client/am/Sqlca.java,393,"                states[i] = tokens[i].substring(0, 5);"
java/client/org/apache/derby/client/am/Sqlca.java,394,                tokens[i] = tokens[i].substring(6);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6008,   sqlerrmc = buildTokenizedSqlerrmc((EmbedSQLException) se);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6060, private String buildTokenizedSqlerrmc(EmbedSQLException se) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6064,   String messageId = se.getMessageId();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6065,   // arguments are variable part of a message
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6066,   Object[] args = se.getArguments();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6067,   for (int i = 0; args != null &&  i < args.length; i++)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6068,    sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6069,   sqlerrmc += messageId;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6070,   se = (EmbedSQLException) se.getNextException();
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,273,"  sb.append("" : "");"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6052,  * for a Derby SQLException
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,58,    private StorageFile lobFile;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,100,                    lobFile =
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,355,                tmpFile.close();
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,356,                conn.removeLobFile(tmpFile);
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,439,            tmpFile.close();
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,440,            deleteFile(lobFile);
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,441,            conn.removeLobFile(tmpFile);
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,489,            StorageFile oldStoreFile = lobFile;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,513,            oldFile.close();
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,514,            conn.removeLobFile(oldFile);
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,515,            deleteFile(oldStoreFile);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,293,   SchemaDescriptor sd = getSchemaDescriptor();
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,368,     getSchemaDescriptor());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,463,  return isSessionSchema(getSchemaDescriptor());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,483,  SchemaDescriptor sd = getSchemaDescriptor();
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,133,"  return getGenericConstantActionFactory().getDropTableConstantAction( getFullName(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,134,"            getRelativeName(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,135,"            getSchemaDescriptor(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,136,"            conglomerateNumber,"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,137,"            td.getUUID(),"
java/engine/org/apache/derby/impl/sql/compile/DropTableNode.java,138,            dropBehavior);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,438,"          getObjectName(),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,266,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,278,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,290,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,301,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,346,"    private void    expectError( String sqlState, String query )"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1189,        * null in a join case (See Beetle 4423)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1192,       if (accessPath == null)
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,120,  return defaultText;
java/engine/org/apache/derby/iapi/sql/compile/C_NodeTypes.java,234,    static final int FINAL_VALUE = ROW_NUMBER_COLUMN_NODE;
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,380,  if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,382,   /* In order to check the validity of the check constraints
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,390,   FromList fromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,391,"         C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,392,"         getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,393,         getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,394,   FromBaseTable table = (FromBaseTable)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,395,         getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,396,"          C_NodeTypes.FROM_BASE_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,397,"          getObjectName(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,398,"          null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,399,"          null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,400,"          null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,401,          getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,402,   fromList.addFromTable(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,403,"   fromList.bindTables(dd,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,404,       (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,405,"        C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,406,"        getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,407,        getContextManager()));
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,408,   tableElementList.appendNewColumnsToRCL(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,411,    * the check constraints.
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,413,   tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,414,
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,421,  if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,423,   /* In order to check the validity of the check constraints
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,431,   FromList fromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,432,"         C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,433,"         getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,434,         getContextManager());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,435,   // DERBY-3043: To avoid a no-such-schema error when
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,436,"   // binding the check constraint, ensure that the"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,437,   // table we bind against has a schema name specified.
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,438,"   // If it doesn't, fill in the schema name now."
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,439,   //
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,440,   TableName newTN = getObjectName();
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,441,   if (newTN.getSchemaName() == null)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,442,    newTN.setSchemaName(getSchemaDescriptor().getSchemaName());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,443,   FromBaseTable table = (FromBaseTable)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,444,         getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,445,"          C_NodeTypes.FROM_BASE_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,446,"          newTN,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,447,"          null,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,448,"          null,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,449,"          null,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,450,          getContextManager());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,451,   table.setTableNumber(0);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,452,   fromList.addFromTable(table);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,453,   table.setResultColumns((ResultColumnList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,454,"            C_NodeTypes.RESULT_COLUMN_LIST,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,455,            getContextManager()));
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,456,   tableElementList.appendNewColumnsToRCL(table);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,459,    * the check constraints.
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,461,   tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1160,  return (TableName) getNodeFactory().getNode
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1165,    getContextManager()
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,200,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,213,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,844, /**
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,845,"   * Bind time logic. Raises an error if this ValueNode, once compiled, returns"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,846,   * unstable results AND if we're in a context where unstable results are
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,847,   * forbidden.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,848,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,849,   * Called by children who may NOT appear in the WHERE subclauses of ADD TABLE clauses.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,850,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,851,"   * @param fragmentType Type of fragment as a String, for inclusion in error messages."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,852,   * @param fragmentBitMask Type of fragment as a bitmask of possible fragment types
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,853,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,854,   * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,855,   */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,856," public void checkReliability( String fragmentType, int fragmentBitMask )"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,857,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,858, {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,859,"  // if we're in a context that forbids unreliable fragments, raise an error"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,860,  if ( ( getCompilerContext().getReliability() & fragmentBitMask ) != 0 )
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,861,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,862,            throwReliabilityException( fragmentType );
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,863,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,864, }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,865,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,866, /**
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,867,"   * Bind time logic. Raises an error if this ValueNode, once compiled, returns"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,868,   * unstable results AND if we're in a context where unstable results are
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,869,   * forbidden.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,870,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,871,   * Called by children who may NOT appear in the WHERE subclauses of ADD TABLE clauses.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,872,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,873,   * @param fragmentBitMask Type of fragment as a bitmask of possible fragment types
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,874,"   * @param fragmentType Type of fragment as a String, to be fetch for the error message."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,875,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,876,   * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,877,   */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,878," public void checkReliability( int fragmentBitMask, String fragmentType )"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,879,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,880, {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,881,"  // if we're in a context that forbids unreliable fragments, raise an error"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,882,  if ( ( getCompilerContext().getReliability() & fragmentBitMask ) != 0 )
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,883,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,884,            String fragmentTypeTxt = MessageService.getTextMessage( fragmentType );
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,885,            throwReliabilityException( fragmentTypeTxt );
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,886,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,887, }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,888,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,889,    /**
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,890,     * Common code for the 2 checkReliability functions.  Always throws StandardException.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,891,     *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,892,"     * @param fragmentType Type of fragment as a string, for inclusion in error messages."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,893,"     * @exception StandardException        Throws an error, always."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,894,     */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,895,    private void throwReliabilityException( String fragmentType ) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,896,    {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,897,        String sqlState;
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,898,  /* Error string somewhat dependent on operation due to different
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,899,   * nodes being allowed for different operations.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,900,   */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,901,  if (getCompilerContext().getReliability() == CompilerContext.DEFAULT_RESTRICTION)
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,902,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,903,            sqlState = SQLState.LANG_INVALID_DEFAULT_DEFINITION;
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,904,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,905,  else
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,906,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,907,            sqlState = SQLState.LANG_UNRELIABLE_QUERY_FRAGMENT;
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,908,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,909,"  throw StandardException.newException(sqlState, fragmentType);"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,910,    }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,911,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,324,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,325,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,326,    //     * Verify basic parse/bind logic for declaring generated columns.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,327,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,328,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,329,    //    public  void    test_004_basicParser()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,330,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,331,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,332,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,333,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,334,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,335,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,336,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,337,"    //             ""create function f_parse_deterministic( a int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,338,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,339,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,340,"    //             ""deterministic\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,341,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,342,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,343,"    //             ""external name 'java.lang.Math.abs'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,344,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,345,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,346,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,347,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,348,"    //             ""create function f_parse_non_deterministic( a int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,349,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,350,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,351,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,352,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,353,"    //             ""external name 'java.lang.Math.abs'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,354,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,355,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,356,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,357,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,358,"    //             ""create table t_parse_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,359,"    //             ""(\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,360,"    //             ""   a int,\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,361,"    //             ""   b int generated always as ( f_parse_deterministic( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,362,"    //             ""   c int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,363,"    //             "")"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,364,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,365,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,366,    //        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,367,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,368,"    //             UNSTABLE_RESULTS,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,369,"    //             ""create table t_parse_shouldFail\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,370,"    //             ""(\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,371,"    //             ""   a int,\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,372,"    //             ""   b int generated always as ( f_parse_non_deterministic( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,373,"    //             ""   c int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,374,"    //             "")\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,375,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,376,    //    }
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,152,"    colDef.append("" DEFAULT "");"
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,153,    colDef.append(rs.getString(2));
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,117," ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,206," ResultSet getUpdateResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,207,         GeneratedMethod checkGM)
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,480,   if (checkConstraints != null)
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,482,"    bindCheckConstraint(nodeFactory,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,497,  * Binds an already parsed check constraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,502,  * @param checkConstraint  Parsed query tree for check constraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,506, void bindCheckConstraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,511,  ValueNode   checkConstraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,516,  TableName targetTableName =
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,517,"      makeTableName(targetTableDescriptor.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,518,           targetTableDescriptor.getName());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,519,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,521,"  /* We now have the check constraints as a query tree.  Now, we prepare"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,523,   * generated code for the check constraints will be evaluated against the
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,530,   *     (This allows the ColumnReferences in the check constraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,534,   * the constraint against the source RCL but against a temp
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,543,       getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,551,    getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,556,  checkConstraint = checkConstraint.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,416,"    targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,435,   /* Get and bind all constraints on the table */
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,539,   FromVTI targetVTI)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,587,"      targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,810,"  *   ResultSetFactory.getInsertResultSet(resultSet.generate(ps), this )"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,843,   // arg 2 generate code to evaluate CHECK CONSTRAINTS
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,846,"   mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, ""getInsertResultSet"", ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,152,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,165,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,175,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,181,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,358,  expression = getNullNode(getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,588,"  expression = expression.bindExpression(fromList, subqueryList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,589,         aggregateVector);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,693,
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,717,            expression = getNullNode(bindingRC.getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,825,"  expression = expression.preprocess(numTables, outerFromList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,827,             outerPredicateList);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1515,   expression = (ValueNode)expression.accept(v);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,611,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,977,"    //System.out.println(""    streamStorable=true"");"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1191,   else
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,4168, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1149,                    // Generate the tree for the default
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1150,                    String defaultText = defaultInfo.getDefaultText();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1151,                    ValueNode defaultTree = parseDefault(defaultText);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1152,                    defaultTree = defaultTree.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1153,"                        getFromList(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1154,"                        (SubqueryList) null,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1155,                        (Vector) null);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1156,                    newResultColumn = (ResultColumn) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1157,"                        C_NodeTypes.RESULT_COLUMN,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1158,"                        defaultTree.getTypeServices(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1159,"                        defaultTree,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1160,                        getContextManager());
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,38,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1334, {
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,70," public ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,76,"  return new InsertResultSet(source, checkGM, activation );"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,142," public ResultSet getUpdateResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,143,          GeneratedMethod checkGM)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,257,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,311,  heapConglom = constants.conglomId;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,447,"    // if we have a check constraint, we have"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,450,    if (checkGM != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,462,       evaluateCheckConstraints();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,380,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,381,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,382,    //     * Verify basic insert behavior for generated columns.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,383,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,384,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,385,    //    public  void    test_005_basicInsert()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,386,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,387,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,388,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,389,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,390,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,391,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,392,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,393,"    //             ""create table t_insert_1( a int,  b int  default 1, c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,394,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,395,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,396,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,397,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,398,"    //             ""create table t_insert_2( a int,  b int  generated always as( -a ) check ( b < 0 ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,399,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,400,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,401,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,402,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,403,"    //             ""create unique index t_insert_2_b on t_insert_2( b )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,404,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,405,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,406,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,407,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,408,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,409,"    //             ""insert into t_insert_1( a, c ) values ( 100, 1000 ), ( 200, 2000 ), ( 300, 3000 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,410,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,411,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,412,    //        // insert one row
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,413,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,414,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,415,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,416,"    //             ""insert into t_insert_2( a, c ) values ( 2, 200 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,417,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,418,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,419,    //        // insert multiple rows
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,420,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,421,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,422,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,423,"    //             ""insert into t_insert_2( a, c ) values ( 1, 100 ), ( 3, 300 ), ( 4, 400 ), ( 5, 500 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,424,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,425,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,426,    //        // insert by selecting from another table
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,427,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,428,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,429,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,430,"    //             ""insert into t_insert_2( a, c ) select a, c from t_insert_1"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,431,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,432,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,433,    //        // insert using a default clause on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,434,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,435,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,436,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,437,"    //             ""insert into t_insert_2( a, b ) values ( 6, default )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,438,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,439,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,440,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,441,    //        // Verify that all of the expected rows are in the table having the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,442,    //        // generated column.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,443,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,444,    //        assertResults
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,445,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,446,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,447,"    //             ""select * from t_insert_2 order by a"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,448,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,449,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,450,"    //                 { ""1"" ,         ""-1"" ,        ""100"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,451,"    //                 { ""2"" ,         ""-2"" ,        ""200"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,452,"    //                 { ""3"" ,         ""-3"" ,        ""300"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,453,"    //                 { ""4"" ,         ""-4"" ,        ""400"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,454,"    //                 { ""5"" ,         ""-5"" ,        ""500"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,455,"    //                 { ""6"" ,         ""-6"" ,        null },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,456,"    //                 { ""100"",        ""-100"" ,      ""1000"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,457,"    //                 { ""200"" ,       ""-200"" ,      ""2000"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,458,"    //                 { ""300"" ,       ""-300"" ,      ""3000"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,459,"    //             },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,460,    //             false
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,461,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,462,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,463,    //        // fails trying to override a generation clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,464,    //        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,465,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,466,"    //             CANT_OVERRIDE_GENERATION_CLAUSE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,467,"    //             ""insert into t_insert_2( a, b ) values ( 7, 70 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,468,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,469,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,470,    //        // fails on a violation of the check constraint on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,471,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,472,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,473,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,474,"    //             CONSTRAINT_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,475,"    //             ""insert into t_insert_2( a ) values ( -8 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,476,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,477,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,478,    //        // fails because it violates the unique index on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,479,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,480,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,481,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,482,"    //             ILLEGAL_DUPLICATE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,483,"    //             ""insert into t_insert_2( a ) values ( 2 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,484,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,485,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,486,    //    }
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,207," ResultSet getUpdateResultSet(NoPutResultSet source, GeneratedMethod checkGM)"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,29,
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,450,          afterColumns);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,557,"    if (hasCheckConstraints(dataDictionary, targetTableDescriptor))"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,596,"                                                hasTriggers ? resultColumnList : afterColumns,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,821,"            generateCheckConstraints( checkConstraints, acb, mb ); // arg 2"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,828,"                              ClassName.ResultSet, 4);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,832,"                              ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,876,  ResultColumnList updateColumnList
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,887,"  FormatableBitSet columnMap = UpdateNode.getUpdateReadMap(baseTable,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,888,"   updateColumnList, conglomVector, relevantCdl, relevantTriggers, needsDeferredProcessing );"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,943,  boolean[]     needsDeferredProcessing
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1140,
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,142," public ResultSet getUpdateResultSet(NoPutResultSet source, GeneratedMethod checkGM)"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,158,"  return new UpdateResultSet(source, checkGM, activation);"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,187,"  return new UpdateResultSet(source, checkGM, activation,"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,114,"  this(source, checkGM , activation, activation.getConstantAction(),null);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,136,"  this(source, checkGM , activation,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,488,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,489,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,490,    //     * Verify basic update behavior for generated columns.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,491,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,492,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,493,    //    public  void    test_006_basicUpdate()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,494,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,495,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,496,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,497,    //        int             counter;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,498,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,499,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,500,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,501,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,502,"    //             ""create function f_minus\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,503,"    //             ""(\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,504,"    //             ""    a int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,505,"    //             "")\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,506,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,507,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,508,"    //             ""deterministic\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,509,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,510,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,511,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,512,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,513,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,514,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,515,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,516,"    //             ""create function f_readMinusCounter()\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,517,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,518,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,519,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,520,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,521,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.readMinusCounter'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,522,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,523,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,524,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,525,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,526,"    //             ""create table t_update_1( a int,  b int  generated always as( f_minus(a) ) check ( b < 0 ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,527,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,528,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,529,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,530,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,531,"    //             ""create unique index t_update_1_b on t_update_1( b )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,532,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,533,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,534,    //        counter = readMinusCounter( conn );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,535,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,536,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,537,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,538,"    //             ""insert into t_update_1( a, c ) values ( 1, 100 ), ( 2, 200 ), ( 3, 300 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,539,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,540,"    //        assertEquals( counter + 3, readMinusCounter( conn ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,541,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,542,    //        counter = readMinusCounter( conn );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,543,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,544,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,545,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,546,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,547,"    //             ""set a = a + 10 where a > 1\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,548,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,549,"    //        assertEquals( counter + 2, readMinusCounter( conn ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,550,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,551,    //        // you can use the DEFAULT keyword to set a generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,552,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,553,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,554,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,555,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,556,"    //             ""set a = a + 10, b = default where c = 300\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,557,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,558,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,559,    //        // fails trying to override a generation clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,560,    //        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,561,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,562,"    //             CANT_OVERRIDE_GENERATION_CLAUSE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,563,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,564,"    //             ""set a = a + 10, b = -3 where c = 300\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,565,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,566,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,567,    //        // fails on a violation of the check constraint on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,568,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,569,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,570,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,571,"    //             CONSTRAINT_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,572,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,573,"    //             ""set a = -100\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,574,"    //             ""where a = 1\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,575,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,576,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,577,    //        // fails because it violates the unique index on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,578,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,579,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,580,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,581,"    //             ILLEGAL_DUPLICATE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,582,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,583,"    //             ""set a = 12\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,584,"    //             ""where a = 1\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,585,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,586,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,587,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,588,    //        // Verify that all of the expected rows are in the table having the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,589,    //        // generated column.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,590,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,591,    //        assertResults
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,592,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,593,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,594,"    //             ""select * from t_update_1 order by c"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,595,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,596,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,597,"    //                 { ""1"" ,         ""-1"" ,        ""100"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,598,"    //                 { ""12"" ,         ""-12"" ,        ""200"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,599,"    //                 { ""23"" ,         ""-23"" ,        ""300"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,600,"    //             },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,601,    //             false
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,602,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,603,    //    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,604,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,605,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,606,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,607,    //     * Verify basic trigger interaction with generated columns
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,608,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,609,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,610,    //    public  void    test_007_basicTriggers()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,611,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,612,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,613,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,614,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,615,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,616,    //        // Setup schema for test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,617,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,618,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,619,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,620,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,621,"    //             ""create function triggerReports()\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,622,"    //             ""returns TABLE\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,623,"    //             ""  (\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,624,"    //             ""     contents varchar( 100 )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,625,"    //             ""  )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,626,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,627,"    //             ""parameter style DERBY_JDBC_RESULT_SET\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,628,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,629,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.triggerReport'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,630,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,631,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,632,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,633,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,634,"    //             ""create procedure clearTriggerReports\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,635,"    //             ""()\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,636,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,637,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,638,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,639,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.clearTriggerReports'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,640,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,641,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,642,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,643,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,644,"    //             ""create procedure report_proc\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,645,"    //             ""( tag varchar( 40 ), a int, b int, c int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,646,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,647,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,648,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,649,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.showValues'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,650,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,651,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,652,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,653,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,654,"    //             ""create procedure wide_report_proc\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,655,"    //             ""( tag varchar( 40 ), old_a int, old_b int, old_c int, new_a int, new_b int, new_c int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,656,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,657,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,658,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,659,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.showValues'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,660,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,661,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,662,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,663,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,664,"    //             ""create table t1_trig( a int, b int generated always as ( f_minus(a) ), c int )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,665,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,666,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,667,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,668,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,669,"    //             ""create trigger t1_trig_before_insert_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,670,"    //             ""no cascade before insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,671,"    //             ""referencing new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,672,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,673,"    //             ""call report_proc( 'before_insert_row_trigger', ar.a, ar.b, ar.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,674,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,675,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,676,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,677,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,678,"    //             ""create trigger t1_trig_after_insert_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,679,"    //             ""after insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,680,"    //             ""referencing new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,681,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,682,"    //             ""call report_proc( 'after_insert_row_trigger', ar.a, ar.b, ar.c ) \n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,683,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,684,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,685,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,686,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,687,"    //             ""create trigger t1_trig_before_update_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,688,"    //             ""no cascade before update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,689,"    //             ""referencing old as br new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,690,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,691,"    //             ""call wide_report_proc( 'before_update_row_trigger', br.a, br.b, br.c, ar.a, ar.b, ar.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,692,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,693,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,694,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,695,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,696,"    //             ""create trigger t1_trig_after_update_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,697,"    //             ""after update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,698,"    //             ""referencing old as br new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,699,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,700,"    //             ""call wide_report_proc( 'after_update_row_trigger', br.a, br.b, br.c, ar.a, ar.b, ar.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,701,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,702,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,703,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,704,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,705,"    //             ""create trigger t1_trig_before_delete_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,706,"    //             ""no cascade before delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,707,"    //             ""referencing old as br\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,708,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,709,"    //             ""call report_proc( 'before_delete_row_trigger', br.a, br.b, br.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,710,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,711,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,712,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,713,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,714,"    //             ""create trigger t1_trig_after_delete_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,715,"    //             ""after delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,716,"    //             ""referencing old as br\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,717,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,718,"    //             ""call report_proc( 'after_delete_row_trigger', br.a, br.b, br.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,719,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,720,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,721,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,722,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,723,"    //             ""create trigger t1_trig_before_insert_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,724,"    //             ""no cascade before insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,725,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,726,"    //             ""call report_proc( 'before_insert_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,727,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,728,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,729,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,730,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,731,"    //             ""create trigger t1_trig_after_insert_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,732,"    //             ""after insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,733,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,734,"    //             ""call report_proc( 'after_insert_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,735,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,736,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,737,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,738,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,739,"    //             ""create trigger t1_trig_before_update_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,740,"    //             ""no cascade before update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,741,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,742,"    //             ""call report_proc( 'before_update_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,743,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,744,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,745,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,746,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,747,"    //             ""create trigger t1_trig_before_delete_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,748,"    //             ""no cascade before delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,749,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,750,"    //             ""call report_proc( 'before_delete_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,751,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,752,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,753,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,754,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,755,"    //             ""create trigger t1_trig_after_update_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,756,"    //             ""after update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,757,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,758,"    //             ""call report_proc( 'after_update_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,759,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,760,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,761,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,762,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,763,"    //             ""create trigger t1_trig_after_delete_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,764,"    //             ""after delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,765,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,766,"    //             ""call report_proc( 'after_delete_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,767,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,768,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,769,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,770,    //        // Now run the tests.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,771,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,772,    //        assertTriggerStatus
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,773,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,774,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,775,"    //             ""insert into t1_trig( a ) values ( 1 ), ( 2 ), ( 3 )"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,776,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,777,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,778,"    //                 { ""before_insert_row_trigger: [ 1, -1, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,779,"    //                 { ""before_insert_row_trigger: [ 2, -2, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,780,"    //                 { ""before_insert_row_trigger: [ 3, -3, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,781,"    //                 { ""before_insert_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,782,"    //                 { ""after_insert_row_trigger: [ 1, -1, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,783,"    //                 { ""after_insert_row_trigger: [ 2, -2, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,784,"    //                 { ""after_insert_row_trigger: [ 3, -3, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,785,"    //                 { ""after_insert_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,786,    //             }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,787,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,788,    //        assertTriggerStatus
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,789,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,790,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,791,"    //             ""update t1_trig set a = a + 10"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,792,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,793,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,794,"    //                 { ""before_update_row_trigger: [ 1, -1, null, 11, -11, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,795,"    //                 { ""before_update_row_trigger: [ 2, -2, null, 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,796,"    //                 { ""before_update_row_trigger: [ 3, -3, null, 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,797,"    //                 { ""before_update_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,798,"    //                 { ""after_update_row_trigger: [ 1, -1, null, 11, -11, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,799,"    //                 { ""after_update_row_trigger: [ 2, -2, null, 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,800,"    //                 { ""after_update_row_trigger: [ 3, -3, null, 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,801,"    //                 { ""after_update_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,802,    //             }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,803,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,804,    //        assertTriggerStatus
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,805,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,806,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,807,"    //             ""delete from t1_trig where a > 11"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,808,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,809,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,810,"    //                 { ""before_delete_row_trigger: [ 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,811,"    //                 { ""before_delete_row_trigger: [ 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,812,"    //                 { ""before_delete_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,813,"    //                 { ""after_delete_row_trigger: [ 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,814,"    //                 { ""after_delete_row_trigger: [ 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,815,"    //                 { ""after_delete_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,816,    //             }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,817,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,818,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,819,    //    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,821,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,822,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,823,    //     * Verify basic interaction of foreign keys with generated columns
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,824,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,825,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,826,    //    public  void    test_008_basicForeignKeys()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,827,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,828,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,829,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,830,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,831,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,832,    //        // Setup schema for test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,833,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,834,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,835,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,836,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,837,"    //             ""create table t1_for( a int, b int generated always as ( f_minus(a) ) primary key, c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,838,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,839,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,840,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,841,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,842,"    //             ""create table t2_for( a int, b int references t1_for( b ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,843,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,844,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,845,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,846,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,847,"    //             ""create table t3_for( a int, b int primary key, c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,848,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,849,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,850,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,851,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,852,"    //             ""create table t4_for( a int, b int generated always as ( f_minus(a) ) references t3_for( b ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,853,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,854,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,855,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,856,    //        // Initial data.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,857,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,858,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,859,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,860,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,861,"    //             ""insert into t1_for( a ) values ( 1 ), ( 2 ), ( 3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,862,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,863,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,864,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,865,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,866,"    //             ""insert into t2_for( b ) values ( -1 ), ( -3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,867,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,868,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,869,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,870,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,871,"    //             ""insert into t3_for( b ) values ( 1 ), ( 2 ), ( 3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,872,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,873,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,874,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,875,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,876,"    //             ""insert into t4_for( a ) values ( -1 ), ( -2 ), ( -3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,877,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,878,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,879,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,880,    //        // Let's violate some foreign keys.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,881,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,882,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,883,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,884,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,885,"    //             FOREIGN_KEY_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,886,"    //             ""update t1_for set a = a + 10 where a = 1"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,887,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,888,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,889,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,890,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,891,"    //             FOREIGN_KEY_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,892,"    //             ""update t4_for set a = a + 10 where a = -1"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,893,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,894,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,895,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,896,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,897,"    //             FOREIGN_KEY_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,898,"    //             ""insert into t4_for( a ) values ( -4 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,899,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,900,    //    }
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,400,   if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses(fromList); }
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,441,   if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses(fromList); }
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,662, void bindAndValidateGenerationClauses(FromList fromList)
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,692,      generationClauseNode = cdn.getGenerationClauseNode();
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,129,                   NON_DETERMINISTIC_ILLEGAL
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1505,            throwReliabilityException( fragmentType );
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1528,            throwReliabilityException( fragmentTypeTxt );
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1538,    private void throwReliabilityException( String fragmentType ) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1550,            sqlState = SQLState.LANG_NON_DETERMINISTIC_GENERATION_CLAUSE;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3902,    if (defaultInfo != null)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,383,  if ( (numCheckConstraints > 0) || (numGenerationClauses > 0) )
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,401,"            { tableElementList.bindAndValidateGenerationClauses(fromList, baseTable.makeColumnMap( baseTable.getGeneratedColumns() ) ); }"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,425,  if ( (numCheckConstraints > 0) || (numGenerationClauses > 0) )
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,442,"   if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses(fromList, new FormatableBitSet() ); }"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,806,                int         referencedColumnID = referencedColumns[ i ];
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,811,            }   // end of loop through referenced columns
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,814,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,68,"    private static  final   String  MISPLACED_SELECT = ""42X01"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1428,"             MISPLACED_SELECT,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1438,"             MISPLACED_SELECT,"
java/client/org/apache/derby/client/net/NetConnection.java,302,        completeConnect();
java/client/org/apache/derby/client/net/NetConnection.java,303,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,133,"        // when DERBY-2498 gets fixed, move this one to baseSuite"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,134,"        suite.addTest(new DataSourceTest(""testJira95ds""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,234,"            // DERBY-2498: with client, getting a NullPointerException."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,235,            // Note also: the NPE does not occur with XADataSource - see
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,236,            // testJira95xads().
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,237,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,238,"                assertSQLState(""XCY00"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,240,"            // DERBY-2498, when fixed, remove 'if'"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,241,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,242,"                fail (""unexpected exception: "" + e.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,186,"        // when DERBY-2498 gets fixed, move this one to baseSuite"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,187,"        suite.addTest(new J2EEDataSourceTest(""testJira95pds""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2206,"            // DERBY-2498 - when fixed, remove if"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2207,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2208,"                assertSQLState(""XCY00"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2210,"            // DERBY-2498 - when fixed, remove if"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2211,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2212,                throw e;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,457,   if (!isAutoincrement)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,262,"            evaluateGenerationClauses( generationClauses, activation, sourceResultSet, execRow );"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,984,"            evaluateGenerationClauses( generationClauses, activation, sourceResultSet, row );"
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,593,      ExecRow           newRow
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,107,  /*
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,108,"    An update row, for an update statement which sets n columns; i.e"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,109,"       UPDATE tab set x,y,z=.... where ...;"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,110,"    has,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,111,"    before values of x,y,z after values of x,y,z and rowlocation."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,112,"    need only normalize after values of x,y,z."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,113,"    i.e insead of starting at index = 1, I need to start at index = 4."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,114,    also I needn't normalize the last value in the row.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,115, */
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,116,  startCol = (forUpdate) ? ((numCols - 1)/ 2) + 1 : 1;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,306,  if (desiredTypes == null)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,307,  {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,308,   desiredTypes = new DataTypeDescriptor[numCols];
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,309,   for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,310,   {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,311,    DataTypeDescriptor dtd = resultDescription.getColumnDescriptor(whichCol).getType();
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,312,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,313,    desiredTypes[whichCol - 1] = dtd;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,314,   }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,316,  }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,318,  for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,320,   DataValueDescriptor sourceCol = sourceRow.getColumn(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,325,    if (whichCol < startCol)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,326,     normalizedCol = sourceCol;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,328,     try {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,329,      normalizedCol =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,330,"      desiredTypes[whichCol - 1].normalize(sourceCol,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,331,         normalizedRow.getColumn(whichCol));
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,332,     } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,333,      // Catch illegal null insert and add column info
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,334,      if (se.getMessageId().startsWith(SQLState.LANG_NULL_INTO_NON_NULL))
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,335,      {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,336,       ResultColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,337,        resultDescription.getColumnDescriptor(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,338,       throw
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,339,"        StandardException.newException(SQLState.LANG_NULL_INTO_NON_NULL,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,340,                  columnDescriptor.getName());
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,341,      }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,342,      //just rethrow if not LANG_NULL_INTO_NON_NULL
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,343,      throw se;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,344,     }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,345,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,346,"    normalizedRow.setColumn(whichCol, normalizedCol);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,451,"            evaluateGenerationClauses( generationClauses, activation, source, row );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1639,"             ""   a  char( 20 ),\n"" +"
java/engine/org/apache/derby/catalog/DefaultInfo.java,37,"  * If this default is a generation clause, then return the 1-based ids of"
java/engine/org/apache/derby/catalog/DefaultInfo.java,40, public int[] getReferencedColumnIDs();
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,58,    private int[]                   referencedColumnIDs;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,89,         int[]    referencedColumnIDs
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,92,        if ( referencedColumnIDs == null ) { referencedColumnIDs = new int[0]; }
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,96,  this.referencedColumnIDs = referencedColumnIDs;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,108,  * @see DefaultInfo#getReferencedColumnIDs
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,110, public int[] getReferencedColumnIDs()
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,112,  return referencedColumnIDs;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,147,            referencedColumnIDs = new int[ count ];
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,148,            for ( int i = 0; i < count; i++ ) { referencedColumnIDs[ i ] = in.readInt(); }
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,168,            int count = referencedColumnIDs.length;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,170,            for ( int i = 0; i < count; i++ ) { out.writeInt( referencedColumnIDs[ i ] ); }
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,771,
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,778,"                ( generationClauseNode.getExpressionText(), generationClauseColumnReferences );"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,802,            int[]   referencedColumns = cdn.getDefaultInfo().getReferencedColumnIDs();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,803,            int     count = referencedColumns.length;
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,807,                int         referencedColumnID = referencedColumns[ i ];
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1044,"        addGeneratedColumnPrecursors( affectedGeneratedColumns, columnMap );"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1073,"        ColumnDescriptorList    affectedGeneratedColumns,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1074,  FormatableBitSet        columnMap
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1083,            int[]                       mentionedColumns = gc.getDefaultInfo().getReferencedColumnIDs();
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1131,            int[]                       mentionedColumns = defaultInfo.getReferencedColumnIDs();
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1132,            int                         mentionedColumnCount = mentionedColumns.length;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1142,                ColumnDescriptor    mentionedColumn = baseTable.getColumnDescriptor( mentionedColumns[ mcIdx ] );
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1143,                String                      mentionedColumnName = mentionedColumn.getColumnName();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,502,"     dropColumnFromTable(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1410,  * @param   ix    the index of the column specfication in the ALTER
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1414," private void dropColumnFromTable(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1415,          int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1423,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1424,  ColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1425,   td.getColumnDescriptor(columnInfo[ix].name);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1426,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1427,"  // We already verified this in bind, but do it again"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1428,  if (columnDescriptor == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1429,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1430,   throw
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1431,    StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1432,"                    SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1433,"                    columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1434,                    td.getQualifiedName());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1435,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1438,  ColumnDescriptorList tab_cdl = td.getColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1439,  int size = tab_cdl.size();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1442,  if (size == 1)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1447,"                    ""THE *LAST* COLUMN "" + columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1453,  boolean cascade = (behavior == StatementType.DROP_CASCADE);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1504,"                            columnInfo[ix].name, ""TRIGGER"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1576,"                        columnInfo[ix].name, ""CONSTRAINT"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1660,"  dd.dropColumnDescriptor(td.getUUID(), columnInfo[ix].name, tc);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1011,"             new int[] {},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1017,"             new int[] { 1 },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1023,"             new int[] { 1, 3 },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2494,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2495,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2496,    // MINIONS
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2497,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2498,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2499,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2500,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2501,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2502,     * Run good DDL.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2503,     * @throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2504,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2505,"    private void    goodStatement( Connection conn, String ddl ) throws SQLException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2506,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2507,"        PreparedStatement    ps = chattyPrepare( conn, ddl );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2508,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2509,        ps.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2510,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2511,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2512,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2513,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2514,     * Prepare a statement and report its sql text.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2515,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2516,"    private PreparedStatement   chattyPrepare( Connection conn, String text )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2517,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2518,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2519,"        println( ""Preparing statement:\n\t"" + text );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2520,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2521,        return conn.prepareStatement( text );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2522,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2523,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2524,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2525,"     * Assert that the statement text, when compiled, raises an exception"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2526,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2527,"    private void    expectCompilationError( String sqlState, String query )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2528,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2529,"        println( ""\nExpecting "" + sqlState + "" when preparing:\n\t"" + query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2530,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2531,"        assertCompileError( sqlState, query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2532,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2533,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2535,"     * Assert that the statement text, when executed, raises an error."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2537,"    private void    expectExecutionError( Connection conn, String sqlState, String query )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2540,"        println( ""\nExpecting "" + sqlState + "" when executing:\n\t""  );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2541,"        PreparedStatement   ps = chattyPrepare( conn, query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2542,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2543,"        assertStatementError( sqlState, ps );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2544,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2546,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2547,     * Assert that triggers fire correctly
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2548,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2549,"    private void assertTriggerStatus( Connection conn, String query, String[][] rows )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2550,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2551,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2555,"             ""call clearTriggerReports()\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2560,             query
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2562,"        PreparedStatement   ps = chattyPrepare( conn, ""select * from table( triggerReports() ) s"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2563,        ResultSet                   rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2564,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2565,"        assertResults( rs, rows, true );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2566,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2567,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2568,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2569,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2570,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2571,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2572,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2573,     * Assert whether a routine is expected to be DETERMINISTIC.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2574,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2575,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2576,"    public  void    assertDeterministic( Connection conn, String routineName, boolean isDeterministic )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2577,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2578,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2579,        PreparedStatement   ps = conn.prepareStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2581,"             ""select a.aliasinfo\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2582,"             ""from sys.sysaliases a\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2583,"             ""where alias =  ?"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2585,"        ps.setString( 1, routineName );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2586,        ResultSet               rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2587,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2588,        rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2589,        RoutineAliasInfo    rai = (RoutineAliasInfo) rs.getObject( 1 );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2590,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2591,"        assertEquals( isDeterministic, rai.isDeterministic() );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2592,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2593,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2594,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2595,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2596,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2597,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2598,     * Assert that the statement returns the correct results.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2599,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2600,"    private void assertResults( Connection conn, String query, String[][] rows, boolean trimResults )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2601,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2602,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2603,"        PreparedStatement   ps = chattyPrepare( conn, query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2604,        ResultSet                   rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2606,"        assertResults( rs, rows, trimResults );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2608,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2609,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2610,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2612,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2613,     * Assert that the ResultSet returns the desired rows.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2673,"        ( Connection conn, String tableName, String columnName, int[] expectedReferenceColumns, String expectedDefaultText )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2679,"            ( StringUtil.stringify( expectedReferenceColumns ), StringUtil.stringify( di.getReferencedColumnIDs() ) );"
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,347,   defaultInfo = (DefaultInfoImpl)cd.getDefaultInfo();
java/shared/org/apache/derby/shared/common/reference/SQLState.java,904,"    String LANG_CASCADED_GEN_COL_DROP                                     = ""42XA7"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,3477,    public static   int minus( int a )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,3481,        return -a;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1143,  if (!privExists(dbHistoryFile))
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,433, public int genColumnInfos(ColumnInfo[] colInfos)
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,444,"        null, null, null, null, null,"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,458,    /* Remember how many constraints that we've seen */
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,32,
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,25,
java/engine/org/apache/derby/iapi/util/StringUtil.java,499,     * Turn an array of ints into a printable string.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1589,      // generate statements of the form
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1590,"   // fieldX.setColumn(columnNumber, (DataValueDescriptor) columnExpr);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1591,   // and add them to exprFun.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1602,                continue;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1639, public MethodBuilder generateGenerationClauses
java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java,152,"        return ""GENERATED ALWAYS( "" + _expressionText + "" )"";"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,754,   // bind the check condition
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,755,   // verify that it evaluates to a boolean
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,769,    ProviderList prevAPL = cc.getCurrentAuxiliaryProviderList();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,823,    // Restore the previous AuxiliaryProviderList
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,824,    cc.setCurrentAuxiliaryProviderList(prevAPL);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,42,import org.apache.derby.iapi.sql.compile.C_NodeTypes;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,579,     /* Get and bind all check constraints on the columns
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,580,      * being updated.  We want to bind the check constraints against
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,592,   * Compute the generation clauses on the current row in order to fill in computed columns.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3909,                // in a NULL literal as a placeholder.
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,77,    private int                             firstColumn = -1;
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,78,    private int[]                           generatedColumnPositions; // 1-based positions
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,79,    private DataValueDescriptor[]  normalizedGeneratedValues; // one for  each slot in generatedColumnPositions
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,666,   * Construct support for normalizing generated columns.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,295,"  * Normalize a row.  For now, this means calling constructors through"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,302,"  * In the future, this mechanism will be extended to do type conversions,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,303,  * as well.  I didn't implement type conversions yet because it looks
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,304,"  * like a lot of work, and we needed char and varchar right away."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,305,  *
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,335,"  * Normalize a row.  For now, this means calling constructors through"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,336,"  * the type services to normalize a type to itself.  For example,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,337,"  * if you're putting a char(30) value into a char(15) column, it"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,338,"  * calls a SQLChar constructor with the char(30) value, and the"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,339,  * constructor truncates the value and makes sure that no non-blank
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,340,  * characters are truncated.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,341,  *
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,342,"  * In the future, this mechanism will be extended to do type conversions,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,343,  * as well.  I didn't implement type conversions yet because it looks
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,344,"  * like a lot of work, and we needed char and varchar right away."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1505,     * generation clause can be assigned to.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2256,"             ""    a char( 10 ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,260,"      compareAgrave(1,1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,265,"    compareAgrave(2,1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,270, /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,271," * For a TERRITORY_BASED collation french database, differences between pre-composed accents such"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,272," * as ""\u00C0"" (A-grave) and combining accents such as ""A\u0300"" (A, combining-grave) should match"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,273, * for = and like. But they do not match for UCS_BASIC. We insert both into a table and search
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,274, * based on equal and like.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,283,  int expectedMatchCountForLike) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,284,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,292,"      s.executeUpdate(""CREATE TABLE T (vc varchar(30))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,303,"      ps = prepareStatement(""SELECT COUNT(*) FROM T WHERE VC LIKE ?"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,308,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,102,        return new CleanDatabaseTestSetup( suite );
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,346,  if (defaultNode == null)
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,549,                SchemaDescriptor    previousSchema = compilerContext.setCompilationSchema( originalCurrentSchema );
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,550,                try {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,555,                    compilerContext.setCompilationSchema( previousSchema );
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2207,   FromTable     fsq;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2212,   SchemaDescriptor   prevCompSchema;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2227,   prevCompSchema = compilerContext.setCompilationSchema(compSchema);
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2272,    fsq = (FromTable) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2294,    compilerContext.setCompilationSchema(prevCompSchema);
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,216,  subquery.bindExpressions(nestedFromList);
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,217,  subquery.bindResultColumns(nestedFromList);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,30,        return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,134,    public void testBTreeForwardScan_fetchRows1() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,47,    /** List of obstructor threads to wait for after running the test. */
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,48,    private List obstructors;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,67,        // Go through all the obstructors and call waitFor() so that we
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,69,        if (obstructors != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,70,            for (Iterator it = obstructors.iterator(); it.hasNext(); ) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,71,                Obstructor o = (Obstructor) it.next();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,72,                o.waitFor();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,73,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,75,        obstructors = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,330,"    // TODO: add a similar case as the one above, only that it should"
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,331,    // cause a split before the index scan wakes up
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,372,"    // TODO: add a similar case as the one above, only that it should"
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,373,    // cause a split before the index scan wakes up
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,397,"    private void obstruct(String sql, long blockMillis) {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,398,        if (obstructors == null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,399,            obstructors = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,400,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,401,"        obstructors.add(new Obstructor(sql, blockMillis));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,405,     * Helper class for the obstruct() method. Executes SQL in a separate
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,406,     * thread and stores any exceptions thrown.
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,408,    private class Obstructor implements Runnable {
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,409,        private final String sql;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,410,        private final long blockMillis;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,411,        private final Thread thread;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,415,         * Create and start an obstructor thread.
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,416,         * @param sql the SQL text to execute
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,417,         * @param blockMillis the time in milliseconds to keep the
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,418,         * transaction active
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,420,"        Obstructor(String sql, long blockMillis) {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,421,            this.sql = sql;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,422,            this.blockMillis = blockMillis;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,423,            thread = new Thread(this);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,428,         * Run the SQL in a separate transaction and block for the specified
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,429,         * amount of time.
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,433,                Connection c = openDefaultConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,435,                    c.setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,436,                    Statement s = c.createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,437,                    s.execute(sql);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,438,                    s.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,439,                    Thread.sleep(blockMillis);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,441,                    c.rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,442,                    c.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,450,         * Wait for the obstructor thread to complete. If an error occurred
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,451,"         * while the thread was running, the exception will be rethrown by"
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,452,         * this method.
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,453,         *
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,454,         * @throws Exception if an error occurred while the thread was running
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,458,            Exception e = error;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,459,            error = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,460,            if (e != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,461,                throw e;
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,464,
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,466,
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,66,        getConnection().setAutoCommit(false); // required by JDBC.dropSchema()
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,90,        getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,187,        getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,239,        getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,300,        getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,339,        getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,400,        getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,440,        getConnection().setAutoCommit(false);
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,339,"  * In the query rewrite for group by, add the columns on which"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,340,  * we are doing the group by.
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,341,
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,344, private void addUnAggColumns() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,455,   for (int r = 0; r < havingRefsToSubstitute.size(); r++)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,456,    havingClause.accept(
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,457,     (SubstituteExpressionVisitor)havingRefsToSubstitute.get(r));
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,458,}
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,540,   addUnAggColumns();
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,568,  addAggregateColumns();
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,653,   ** ReplaceAggregatesWithColumnReferencesVisitor()
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,173,
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,174,
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,175,    /**
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,176,     * Do work necessary to maintain the current position in the scan.
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,177,     * <p>
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,178,"     * The latched page in the conglomerate ""congomid"" is changing, do"
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,179,     * whatever is necessary to maintain the current position of the scan.
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,180,     * For some conglomerates this may be a no-op.
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,181,     * <p>
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,182,     *
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,183,     * @param conglom   Conglomerate object of the conglomerate being changed.
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,184,     * @param page      Page in the conglomerate being changed.
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,185,     *
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,186,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,187,     **/
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,188,"    public void savePosition(Conglomerate conglom, Page page)"
java/engine/org/apache/derby/iapi/store/access/conglomerate/ScanManager.java,189,        throws StandardException;
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,25,import org.apache.derby.iapi.store.access.AccessFactory;
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,29,import org.apache.derby.iapi.store.raw.LockingPolicy;
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,30,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,175,
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,176,
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,177,    /**
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,178,     * Do work necessary to maintain the current position in all the scans.
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,179,     * <p>
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,180,"     * The latched page in the conglomerate ""congomid"" is changing, do"
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,181,     * whatever is necessary to maintain the current position of all the
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,182,     * scans open in this transaction.
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,183,     * <p>
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,184,     * For some conglomerates this may be a no-op.
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,185,     * <p>
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,186,     *
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,187,     * @param conglom   Conglomerate object of the conglomerate being changed.
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,188,     * @param page      Page in the conglomerate being changed.
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,189,     *
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,190,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,191,     **/
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,192,"    public void saveScanPositions(Conglomerate conglom, Page page)"
java/engine/org/apache/derby/iapi/store/access/conglomerate/TransactionManager.java,193,        throws StandardException;
java/engine/org/apache/derby/iapi/store/raw/Page.java,141,    /**
java/engine/org/apache/derby/iapi/store/raw/Page.java,142,     * Get a record id protection handle.
java/engine/org/apache/derby/iapi/store/raw/Page.java,143,     *
java/engine/org/apache/derby/iapi/store/raw/Page.java,144,     * @return a record id protection handle
java/engine/org/apache/derby/iapi/store/raw/Page.java,145,     * @see RecordHandle#RECORD_ID_PROTECTION_HANDLE
java/engine/org/apache/derby/iapi/store/raw/Page.java,146,     */
java/engine/org/apache/derby/iapi/store/raw/Page.java,147,    public RecordHandle getProtectionRecordHandle();
java/engine/org/apache/derby/iapi/store/raw/Page.java,148,
java/engine/org/apache/derby/iapi/store/raw/RecordHandle.java,50,  A lock with this recordHandle protects all the recordIds in the page.
java/engine/org/apache/derby/iapi/store/raw/RecordHandle.java,51,  No recordId can disappear while this lock is held.
java/engine/org/apache/derby/iapi/store/raw/RecordHandle.java,52,  New recordIds may appear while this lock is held.
java/engine/org/apache/derby/iapi/store/raw/RecordHandle.java,53, */
java/engine/org/apache/derby/iapi/store/raw/RecordHandle.java,54, public static final int RECORD_ID_PROTECTION_HANDLE = 1;
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,38,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,74,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,89,import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2375,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2376,    /**
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2377,     * Do work necessary to maintain the current position in all the scans.
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2378,     * <p>
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2379,"     * The latched page in the conglomerate ""congomid"" is changing, do"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2380,     * whatever is necessary to maintain the current position of all the
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2381,     * scans open in this transaction.
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2382,     * <p>
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2383,     * For some conglomerates this may be a no-op.
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2384,     * <p>
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2385,     *
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2386,     * @param conglom   Conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2387,     * @param page      Page in the conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2388,     *
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2389,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2390,     **/
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2391,"    public void saveScanPositions(Conglomerate conglom, Page page)"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2392,        throws StandardException
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2393,    {
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2394,        for (Iterator it = scanControllers.iterator(); it.hasNext(); )
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2395,  {
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2396,            Object o = it.next();
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2397,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2398,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2399,            {
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2400,                // The following debugging code is here because the following
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2401,                // (ScanManager) cast is occasionally causing a
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2402,                // java.lang.ClassCastException.
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2403,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2404,                if (!(o instanceof ScanManager))
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2405,                {
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2406,                    HeaderPrintWriter istream = Monitor.getStream();
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2407,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2408,                    if (o == null)
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2409,"                        istream.println(""next element was null\n"");"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2410,                    else
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2411,"                        istream.println(""non ScanManager on list: "" + o);"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2412,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2413,                    istream.println(
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2414,"                        ""Current list of open scans: "" +  debugOpened());"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2415,                }
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2416,            }
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2417,   ScanManager sm = (ScanManager) o;
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2418,"            sm.savePosition(conglom, page);"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2419,  }
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2420,    }
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,2421,
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,144,            if ((num_possible_commit_delete > 0) &&
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,145,                (btree_locking_policy.lockScanForReclaimSpace(leaf)))
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,147,                // Need to get an exclusive scan lock on the page before we can
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,148,"                // do any sort of purges, otherwise other concurrent scans would"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,149,"                // not work.  If we can't get the lock NOWAIT, just give up on"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,150,                // purging rows and do the split without reclaiming rows.
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,195,            if (controlRow != null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,197,
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,727,"                        ""BTreeController_doIns"", false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,32,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,307,"                        false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,319,"                            ""BTreeScan_fetchNextGroup"", false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,331,                if (latch_released)
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,334,"                    // Because we have scan lock on page, we need only"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,335,                    // call reposition() which will use the saved record
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,336,                    // handle to reposition to the same spot on the page.
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,337,                    // We don't have to search the
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,338,"                    // tree again, as we have the a scan lock on the page"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,339,                    // which means the current_rh is valid to reposition on.
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,358,                        while (latch_released)
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,359,                        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,360,"                            if (!reposition(pos, false))"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,361,                            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,362,                                if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,363,                                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,364,                                    // can't fail while with scan lock
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,365,                                    SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,366,"                                        ""can not fail holding scan lock."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,367,                                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,368,
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,369,                                // reposition will set pos.current_leaf to
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,370,"                                // null, if it returns false so if the this"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,371,"                                // ever does fail in delivered code, expect"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,372,"                                // a null pointer exception on the next line,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,373,                                // trying to call fetchFromSlot().
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,374,
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,375,                            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,376,
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,388,"                                    false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,393,                        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,394,                    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,395,                    else
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,396,                    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,397,"                        if (!reposition(pos, false))"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,398,                        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,399,                            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,400,                            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,401,                                // can't fail while with scan lock
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,402,                                SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,403,"                                    ""can not fail holding scan lock."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,404,                            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,405,
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,406,                            // reposition will set pos.current_leaf to
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,407,"                            // null, if it returns false so if the this"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,408,"                            // ever does fail in delivered code, expect"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,409,"                            // a null pointer exception on the next line,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,410,                            // trying to call isDeletedAtSlot().
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,411,
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,412,                        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,413,
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,459,                    if (max_rowcnt <= ret_row_count)
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,461,                        // current_slot is invalid after releasing latch
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,462,                        pos.current_slot = Page.INVALID_SLOT_NUMBER;
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,463,
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,464,                        // exit fetch row loop and return to the client.
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,465,                        pos.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,466,                        pos.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java,467,
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,76,     *     lockScan                 - lock the scan page
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,77,     *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,78,     *     lockScanRow              - lock row and possibly the scan page
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,79,     *     unlockScan               - unlock the scan page
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,84,    /**
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,85,     * Lock the current leaf page.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,86,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,87,     * Logically lock the record id's on a leaf page.  This protocol is used
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,88,     * by splits/row purgers and scans to coordinate between themselves.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,89,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,90,"     * Anyone who wants to either move rows off of a btree page or, purge"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,91,"     * them from existence must first call this routine with ""forUpdate"""
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,92,     * true.  This will result in a lock request which will block on other
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,93,     * processes which cannot work if rows move off the page or disappear.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,94,     * It is expected that the this routine will only be called for update
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,95,     * by very short term internal transactions which will commit immediately
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,96,     * after doing their work and give up the exclusive lock quickly.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,97,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,98,"     * Currently scans can position themselves in one of 2 ways, either by"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,99,     * saving the record handle of a record when they give up the latch on
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,100,"     * the page, or by saving the entire row.  If they save the record handle"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,101,"     * then they must call this routine with ""forUpdate"" false, to get a"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,102,     * lock which will protect the record handle they are using from moving
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,103,     * off the page or disapearing.  This is also why aborts of inserts must
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,104,"     * be done by marking the rows deleted, rather than purging them."
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,105,     * It is expected that scanner's will release this lock once they move
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,106,     * off the page they are looking at.  They do this by calling
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,107,     * unlockScan().
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,108,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,109,     * This lock enforces the same lock/latch protocol as btree row locks.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,110,     * On return the lock has been obtained.  Return status indicates if the
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,111,"     * lock was waited for, which will mean a latch(s) were dropped while"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,112,     * waiting.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,113,     * In general a false status means that the caller will either have
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,114,     * to research the tree unless some protocol has been implemented that
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,115,     * insures that the row will not have moved while the latch was dropped.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,116,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,117,     * This routine requests a special row on the RECORD_ID_PROTECTION_HANDLE
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,118,     * row id.  If the lock is granted the routine will return true.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,119,"     * If the lock cannot be granted NOWAIT, then the routine will release"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,120,"     * the latch on ""current_leaf"" and ""aux_control_row"" (if"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,121,"     * aux_control_row is non-null), and then it will request a WAIT lock on"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,122,     * the row.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,123,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,124,     * @param current_leaf      The lock is associated with this page in the
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,125,     *                          btree.  This control row is unlatched if the
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,126,     *                          routine has to wait on the lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,127,"     * @param aux_control_row   If non-null, this control row is unlatched"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,128,     *                          if the routine has to wait on the lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,129,     * @param forUpdate         Whether to wait for lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,130,"     * @param lock_operation    For what operation are we requesting the lock,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,131,     *                          this should be one of the following 4 options:
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,132,"     *                          LOCK_READ [read lock],"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,133,"     *                          (LOCK_INS | LOCK_UPD) [ lock for insert],"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,134,     *                          (LOCK_INSERT_PREVKEY | LOCK_UPD) [lock for
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,135,"     *                          previous key to insert],"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,136,     *                          (LOCK_UPD) [lock for delete or replace]
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,137,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,138,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,139,     **/
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,140,    abstract public boolean lockScan(
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,141,"    LeafControlRow          current_leaf,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,142,"    ControlRow              aux_control_row,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,143,"    boolean                 forUpdate,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,144,    int                     lock_operation)
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,145,  throws StandardException;
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,146,
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,147,
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,148,    /**
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,149,     * Lock a control row page for reclaiming deleted rows.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,150,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,151,     * When reclaiming deleted rows during split need to get an exclusive
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,152,"     * scan lock on the page, which will mean there are no other scans"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,153,"     * positioned on the page.  If there are other scans positioned, just"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,154,     * give up on reclaiming space now.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,155,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,156,"  * @return true if lock was granted nowait, else false and not lock was"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,157,     *         granted.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,158,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,159,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,160,     **/
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,161,    abstract public boolean lockScanForReclaimSpace(
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,162,    LeafControlRow          current_leaf)
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,163,  throws StandardException;
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,164,
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,191,"     * Get the scan lock on the page if ""request_scan_lock"" is true."
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,198,     * (p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,199,     * As a side effect stores the value of the record handle of the current
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,200,     * scan lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,208,"     * @param request_scan_lock Whether to request the page scan lock, should"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,209,     *                          only be requested once per page in the scan.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,227,"    boolean                 request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,251,    /**
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,252,     * Release the lock gotten by calling lockScan.  This call can only be
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,253,"     * made to release read scan locks, write scan locks must be held until"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,254,     * end of transaction.
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,255,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,256,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,257,"     * @param protectionHandle a <code>RecordHandle</code> that, when locked,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,258,     * protects all the record ids on a page
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,259,     * @see RecordHandle#RECORD_ID_PROTECTION_HANDLE
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,260,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,261,     **/
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,262,    abstract public void unlockScan(RecordHandle protectionHandle);
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,263,
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,80,"    BTreeRowPosition        pos,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,148,"                        false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,160,"                            ""BTreeMaxScan_fetchNextGroup"", false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,175,"                    // Because we have scan lock on page, we need only"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,176,                    // call reposition() which will use the saved record
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,178,                    // We don't have to search the
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,179,"                    // tree again, as we have the a scan lock on the page"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,180,                    // which means the current_rh is valid to reposition on.
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,183,                        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,185,                            // can't fail while with scan lock
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,186,                            SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,187,"                                ""can not fail holding scan lock."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,288,            SanityManager.ASSERT(pos.current_scan_protectionHandle == null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,328,            // locking is the max row to return.  Get the scan lock at the
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,329,            // same time.
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,335,"                    true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,348,"                        ""BTreeMaxScan_positionAtStartPosition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,366,        pos.current_scan_protectionHandle =
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,367,            pos.current_leaf.page.getProtectionRecordHandle();
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,463,"                        false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,534,"            max_found = fetchMaxRowFromBeginning(scan_position, fetch_row);"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,477,            if ((num_possible_commit_delete > 0) &&
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,478,                (btree_locking_policy.lockScanForReclaimSpace(leaf)))
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,484,                // Need to get an exclusive scan lock on the page before we can
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,485,"                // do any sort of purges, otherwise other concurrent scans would"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,486,"                // not work.  If we can't get the lock NOWAIT, just give up on"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,487,                // purging rows.
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,28,import org.apache.derby.iapi.store.raw.RecordHandle;
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,49,    public    RecordHandle          current_scan_protectionHandle;
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,59,    public BTreeRowPosition()
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,61,        super();
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,101,"                "";current_scan_protectionHandle"" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeRowPosition.java,102,                current_scan_protectionHandle +
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,30,import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,260,        scan_position = new BTreeRowPosition();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,351,            SanityManager.ASSERT(pos.current_scan_protectionHandle == null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,439,"                        true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,446,            else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,447,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,448,"                // Don't need to lock the ""previous key"" but still need to get"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,449,                // the scan lock to protect the position in the btree.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,450,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,451,                latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,452,                    !this.getLockingPolicy().lockScan(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,453,"                        pos.current_leaf,   // the page we are positioned on."
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,454,"                        (ControlRow) null,  // no other page to unlatch"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,455,"                        false,              // lock for read."
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,456,                        lock_operation);    // not used.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,457,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,465,"                        ""BTreeScan_positionAtStartPosition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,484,        pos.current_scan_protectionHandle =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,485,            pos.current_leaf.page.getProtectionRecordHandle();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,517,            SanityManager.ASSERT(pos.current_scan_protectionHandle == null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,612,"                    true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,624,"                        ""BTreeScan_positionAtStartPosition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,642,        pos.current_scan_protectionHandle =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,643,            pos.current_leaf.page.getProtectionRecordHandle();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,657,     * once it has successfully gotten both the latch on the next page and
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,658,     * the scan lock on the next page.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,668,        // RESOLVE (mikem) - not sure but someday in the future this
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,669,"        // assert may not be true, but for now we always have the scan"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,670,        // lock when we call this routine.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,671,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,672,            SanityManager.ASSERT(pos.current_scan_protectionHandle != null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,674,        while (true)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,675,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,676,            if ((pos.next_leaf =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,677,                 (LeafControlRow) pos.current_leaf.getRightSibling(this)) == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,678,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,679,                break;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,680,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,682,            boolean latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,683,                !this.getLockingPolicy().lockScan(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,684,"                    pos.next_leaf,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,685,"                    (LeafControlRow) null, // no other latch currently"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,686,"                    false /* not for update */,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,687,                    ConglomerateController.LOCK_READ); // get read scan lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,688,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,689,            // TESTING CODE:
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,690,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,691,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,692,                latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,693,                    test_errors(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,694,"                        this,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,695,"                        ""BTreeScan_positionAtNextPage"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,696,"                        this.getLockingPolicy(), pos.next_leaf, latch_released);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,697,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,698,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,699,            if (!latch_released)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,700,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,701,                break;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,702,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,703,        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,704,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,705,"        // Now that we either have both latch and scan lock on next leaf, or"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,706,        // there is no next leaf we can release scan and latch on current page.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,707,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,708,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,709,   if (pos.current_scan_protectionHandle.getPageNumber() !=
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,710,                         pos.current_leaf.page.getPageNumber()) {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,711,    SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,712,"                ""pos.current_scan_protectionHandle = "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,713,                pos.current_scan_protectionHandle +
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,714,"                ""pos.current_leaf = "" + pos.current_leaf);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,715,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,716,        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,725,        unlockCurrentScan(pos);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,729,        pos.current_scan_protectionHandle =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,730,            (pos.current_leaf == null) ?
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,731,            null : pos.current_leaf.page.getProtectionRecordHandle();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,732,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,785,"                if (!reposition(pos, false))"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,786,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,787,                    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,788,                    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,789,                        SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,790,"                            ""can not fail while holding update row lock."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,791,                    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,792,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,793,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,796,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,797,                pos.current_rh   = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,798,                pos.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,799,                pos.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,803,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,804,"        // Need to do this unlock in any case, until lock manager provides"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,805,        // a way to release locks associated with a compatibility space.  This
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,806,"        // scan lock is special, as it is a lock on the btree container rather"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,807,        // than the heap container.  The open container on the btree actually
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,808,        // has a null locking policy so the close of that container does not
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,809,"        // release this lock, need to explicitly unlock it here or when the"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,810,        // scan is closed as part of the abort the lock will not be released.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,811,        unlockCurrentScan(pos);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,812,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,838,"        // Need to do this unlock in any case, until lock manager provides"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,839,        // a way to release locks associated with a compatibility space.  This
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,840,"        // scan lock is special, as it is a lock on the btree container rather"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,841,        // than the heap container.  The open container on the btree actually
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,842,        // has a null locking policy so the close of that container does not
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,843,"        // release this lock, need to explicitly unlock it here or when the"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,844,        // scan is closed as part of the abort the lock will not be released.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,845,        unlockCurrentScan(pos);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,846,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1003,     * If the scan has saved it's position by key (and thus has given up the
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1004,"     * scan lock on the page), there are a few cases where it is possible that"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1014,"     * key, gives up scan lock and then purges row (1, 2), when transaction"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1051,        // Either current_rh or positionKey is valid - the other is null.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1054,   if ((pos.current_rh == null) != (pos.current_positionKey != null))
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1061,        if (!((pos.current_rh == null) == (pos.current_positionKey != null)))
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1069,        if (pos.current_positionKey == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1072,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1073,                SanityManager.ASSERT(pos.current_scan_protectionHandle != null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1075,            pos.current_leaf = (LeafControlRow)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1076,"                ControlRow.get(this, pos.current_rh.getPageNumber());"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1077,            pos.current_slot =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1078,                pos.current_leaf.page.getSlotNumber(pos.current_rh);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1080,        else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1081,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1082,            // RESOLVE (mikem) - not sure but someday in the future this
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1083,"            // assert may not be true, but for now we always release the"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1084,            // scan lock when we save the row away as the current position.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1085,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1086,                SanityManager.ASSERT(pos.current_scan_protectionHandle == null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1088,            SearchParameters sp =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1095,"            // latch/lock loop, continue until you can get scan lock on page"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1096,            // while holding page latched without waiting.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1097,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1098,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1099,            boolean latch_released;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1100,            do
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1101,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1102,                pos.current_leaf = (LeafControlRow)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1105,                if (sp.resultExact || missing_row_for_key_ok)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1106,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1107,                    // RESOLVE (mikem) - we could have a scan which always
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1108,"                    // maintained it's position by key value, or we could"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1109,                    // optimize and delay this lock until we were about to
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1110,                    // give up the latch.  But it is VERY likely we will get
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1111,                    // the lock since we have the latch on the page.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1112,                    //
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1113,                    // In order to be successfully positioned we must get the
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1114,                    // scan lock again.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1115,                    latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1116,                        !this.getLockingPolicy().lockScan(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1117,"                            pos.current_leaf,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1118,"                            (LeafControlRow) null, // no other latch currently"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1119,"                            false /* not for update */,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1120,                            ConglomerateController.LOCK_READ); // read lock on scan position
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1121,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1122,                    // TESTING CODE:
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1123,                    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1124,                    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1125,                        latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1126,                            test_errors(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1127,"                                this,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1128,"                                ""BTreeScan_reposition"", true,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1129,"                                this.getLockingPolicy(),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1130,"                                pos.current_leaf, latch_released);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1131,                    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1132,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1133,                else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1134,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1135,                    // Did not find key to exactly position on.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1137,                    pos.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1138,                    pos.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1139,                    return(false);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1140,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1142,            } while (latch_released);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1144,            pos.current_scan_protectionHandle =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1145,                pos.current_leaf.page.getProtectionRecordHandle();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1146,            pos.current_slot        = sp.resultSlot;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1147,            pos.current_positionKey = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1153,    /**
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1154,     * Unlock the scan protection row for the current scan.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1155,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1156,     * @param pos position of the scan
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1157,     */
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1158,    private void unlockCurrentScan(BTreeRowPosition pos) {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1159,        if (pos.current_scan_protectionHandle != null) {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1160,            getLockingPolicy().unlockScan(pos.current_scan_protectionHandle);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1161,            pos.current_scan_protectionHandle = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1162,        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1163,    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1164,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1343,"                        false,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1352,"                    // Because we have scan lock on page, we need only"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1353,                    // call reposition() which will use the saved record
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1354,                    // handle to reposition to the same spot on the page.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1355,                    // We don't have to search the
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1356,"                    // tree again, as we have the a scan lock on the page"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1357,                    // which means the current_rh is valid to reposition on.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1417,                scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1418,                scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1518,                scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1519,                scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1595,                scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1596,                scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1710,                scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,1711,                scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2100,            // reposition to get record handle if we don't have it.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2101,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2102,"            if (!reposition(scan_position, false))"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2103,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2104,                if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2105,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2106,                    SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2107,"                        ""can not fail while holding update row lock."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2108,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2109,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2110,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2113,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2114,            scan_position.current_rh   = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2115,            scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2116,            scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2119,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2120,"        // Need to do this unlock in any case, until lock manager provides"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2121,        // a way to release locks associated with a compatibility space.  This
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2122,"        // scan lock is special, as it is a lock on the btree container rather"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2123,        // than the heap container.  The open container on the btree actually
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2124,        // has a null locking policy so the close of that container does not
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2125,"        // release this lock, need to explicitly unlock it here or when the"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2126,        // scan is closed as part of the abort the lock will not be released.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2127,        unlockCurrentScan(scan_position);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2128,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2268,                if (scan_position.current_positionKey == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2269,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2270,                    // save position of scan by key rather than location so
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2271,                    // that we can recover if the page with the position
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2272,                    // disappears while we don't have a scan lock.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2274,                    savePosition();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2275,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2290,     * Do work necessary to maintain the current position in the scan.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2291,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2292,     * Save the current position of the scan as a key.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2293,     * Do whatever is necessary to maintain the current position of the scan.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2294,     * For some conglomerates this may be a no-op.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2296,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2297,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2298,     **/
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2299,    private void savePosition()
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2300,  throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2301,    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2302,        if (this.scan_state == SCAN_INPROGRESS)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2303,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2304,            // Either current_rh or positionKey is valid - the other is null.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2305,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2306,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2307,                SanityManager.ASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2308,                    (scan_position.current_rh == null) ==
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2309,                    (scan_position.current_positionKey != null));
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2310,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2311,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2312,            try
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2313,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2314,                if (scan_position.current_rh != null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2315,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2316,"                    // if scan position is not saved by key, then make it so."
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2317,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2318,                    // must reposition to get the page latched.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2319,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2320,"                    if (reposition(scan_position, false))"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2321,                    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2322,                        scan_position.current_positionKey =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2323,                            runtime_mem.get_row_for_export(getRawTran());
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2324,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2325,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2326,                        Page page = scan_position.current_leaf.getPage();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2327,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2328,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2329,                        RecordHandle rh =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2330,                            page.fetchFromSlot(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2331,"                                (RecordHandle) null,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2332,"                                page.getSlotNumber(scan_position.current_rh),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2333,"                                scan_position.current_positionKey,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2334,"                                (FetchDescriptor) null,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2335,                                true);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2336,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2337,                        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2338,                        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2339,                            SanityManager.ASSERT(rh != null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2340,                        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2341,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2342,                        scan_position.current_rh = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2343,                        scan_position.current_slot = Page.INVALID_SLOT_NUMBER;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2344,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2345,                        // release scan lock now that the row is saved away.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2346,                        unlockCurrentScan(scan_position);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2348,                    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2349,                    else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2350,                    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2351,                        // this should never happen as we hold the scan lock
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2352,                        // on the page while maintaining the position by
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2353,                        // recordhandle - reposition should always work in this
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2354,                        // case.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2356,                        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2357,                            SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2358,"                                ""Must always be able to reposition."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2359,                    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2360,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2363,            finally
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2364,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2365,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2366,                if (scan_position.current_leaf != null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2367,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2368,                    // release latch on page
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2369,                    scan_position.current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2370,                    scan_position.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2371,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2375,    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2376,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2377,    /**
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2378,     * Do work necessary to maintain the current position in the scan.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2379,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2380,"     * The latched page in the conglomerate ""congomid"" is changing, do"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2381,     * whatever is necessary to maintain the current position of the scan.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2382,     * For some conglomerates this may be a no-op.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2383,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2384,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2385,     * @param conglom  Conglomerate object of the conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2386,     * @param page      Page in the conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2387,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2388,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2389,     **/
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2390,"    public void savePosition(Conglomerate conglom, Page page)"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2391,        throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2392, {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2393,        // page should be latched by split.  This scan is assuming that latch
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2394,        // and reading off it's key from the page under the split's latch.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2395,        // A lock should have already been gotten on this row.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2396,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2397,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2398,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2399,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2400,            SanityManager.ASSERT(page.isLatched());
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2401,        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2402,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2403,        /*
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2404,        System.out.println(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2405,"            ""Saving position in btree at top: "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2406,"            "" this.conglomerate = "" +  this.conglomerate        +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2407,"            "" this.scan_state   = "" +  this.scan_state);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2408,"        SanityManager.DEBUG_PRINT(""savePosition()"","
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2409,"            ""Saving position in btree at top: "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2410,"            "" this.conglomerate = "" +  this.conglomerate        +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2411,"            "" this.scan_state   = "" +  this.scan_state);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2412,        */
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2413,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2414,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2415,        if ((this.getConglomerate() == conglom) &&
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2416,            (this.scan_state == SCAN_INPROGRESS))
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2417,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2418,            // Either current_rh or positionKey is valid - the other is null.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2419,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2420,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2421,                SanityManager.ASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2422,                    (scan_position.current_rh == null) ==
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2423,                    (scan_position.current_positionKey != null));
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2426,            /*
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2427,"            SanityManager.DEBUG_PRINT(""savePosition()"","
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2428,"                ""Saving position in btree: "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2429,"                "";current_scan_pageno = "" + this.current_scan_pageno +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2430,"                ""this.current_rh = "" + this.current_rh +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2431,"                "";page.getPageNumber() = "" + page.getPageNumber() +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2432,                ((this.current_rh != null) ?
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2433,"                    ("";this.current_rh.getPageNumber() = "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2434,"                     this.current_rh.getPageNumber()) : """"));"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2435,            */
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2436,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2437,            if (scan_position.current_rh != null &&
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2438,                page.getPageNumber() ==
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2439,                    scan_position.current_rh.getPageNumber())
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2440,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2441,                scan_position.current_positionKey =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2442,                    runtime_mem.get_row_for_export(getRawTran());
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2443,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2444,                RecordHandle rh =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2445,                    page.fetchFromSlot(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2447,"                        page.getSlotNumber(scan_position.current_rh),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2448,"                        scan_position.current_positionKey,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2449,"                        (FetchDescriptor) null,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2452,                if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2453,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2454,                    SanityManager.ASSERT(rh != null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2457,                scan_position.current_rh = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2458,                scan_position.current_slot = Page.INVALID_SLOT_NUMBER;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2460,                // release the scan lock now that we have saved away the row.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2461,                unlockCurrentScan(scan_position);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2462,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,2464, }
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,632,"        // Before moving the rows on the page, while having the latch on the"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,633,"        // page, notify btree scans that the rows on this page may be moving"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,634,        // onto another page.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,635,        //
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,636,        // RESOLVE (mikem) - need to pass conlgomid.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,637,"        // RESOLVE (mikem) - some optimization later, we only need to notify"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,638,        // the scans which are positioned on moving rows.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,639,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,640,            SanityManager.ASSERT(open_btree.init_open_user_scans != null);
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,641,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,642,        open_btree.init_open_user_scans.saveScanPositions(
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,643,"                open_btree.getConglomerate(), this.page);"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,644,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,645,        // Get exclusive RECORD_ID_PROTECTION_HANDLE lock to make sure that
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,646,        // we wait for scans in other transactions to move off of this page
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,647,        // before we split.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,648,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,649,        if (!open_btree.getLockingPolicy().lockScan(
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,650,"                this, parent_page, true /* for update */,"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,651,                ConglomerateController.LOCK_UPD))
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,652,        {
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,653,            // we had to give up latches on this and parent_page to get the
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,654,            // split lock.  Redo the whole split pass as we have lost our
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,655,"            // latches.  Just returning is ok, as the caller can not assume"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,656,            // that split has succeeded in making space.  Note that at this
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,657,            // point in the split no write work has been done in the current
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,658,"            // internal transaction, so giving up here is fairly cheap."
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,659,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,660,            // RESOLVE RLL PERFORMANCE - we could keep a stack of visited
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,661,            // pages so as to not have to redo the complete search.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,662,            return(current_leaf_pageno);
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,663,        }
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,830,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,831,"        // Before moving the rows on the page, while having the latch on the"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,832,"        // page, notify btree scans that the rows on this page may be moving"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,833,        // onto another page.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,834,        //
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,835,        open_btree.init_open_user_scans.saveScanPositions(
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,836,"                open_btree.getConglomerate(), leafroot.page);"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,837,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,838,        // Get exclusive RECORD_ID_PROTECTION_HANDLE lock to make sure that
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,839,        // we wait for scans in other transactions to move off of this page
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,840,"        // before we grow root.  If we don't wait, scanners in other"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,841,        // transactions may be positioned on the leaf page which we are
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,842,        // about to make into a branch page.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,843,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,844,        if (!open_btree.getLockingPolicy().lockScan(
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,845,"                leafroot, (ControlRow) null,"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,846,"                true /* for update */,"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,847,                ConglomerateController.LOCK_UPD))
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,848,        {
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,849,            // We had to give up latches on leafroot to get the
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,850,            // split lock.  Redo the whole split pass as we have lost our
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,851,            // latches - which may mean that the root has grown when we gave
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,852,"            // up the latch.  Just returning is ok, as the caller can not assume"
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,853,            // that grow root has succeeded in making space.  Note that at this
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,854,            // point in the split no write work has been done in the current
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,855,"            // internal transaction, so giving up here is fairly cheap."
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,856,
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,857,            return;
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,858,        }
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,859,
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,113,    /**
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,114,"    In the case of splits, notify all scans in this transaction to save their"
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,115,"    current position by key, because the split may move the row they are"
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,116,    positioned on.  This is done by calling open_user_scans.saveScanPositions().
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,117,    Note that not all OpenBTree's will have a non-null open_user_scans.  For
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,118,    instance logical undo of btree operations will get a OpenBTree with a null
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,119,"    open_user_scans, this is all right because this operation should never need"
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,120,    to call saveScanPositions() (ie. it will never do a split).
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,121,    **/
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,430,        // Remember the transaction manager so saveScanPositions() can be called
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,628,"    boolean             release_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,646,                    if (release_scan_lock)
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,647,                    {
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,648,                        btree_locking_policy.unlockScan(
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,649,                            leaf.page.getProtectionRecordHandle());
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,651,                    leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,86,     *     lockScan                 - lock the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,87,     *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,88,     *     lockScanRow              - lock row and possibly the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,89,     *     unlockScan               - unlock the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,94,
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,95,    /**
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,96,     * Lock a control row page for scan.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,97,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,98,     * See BTree.lockScan() for more info.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,99,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,100,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,101,     **/
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,102,    public boolean lockScan(
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,103,"    LeafControlRow          current_leaf,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,104,"    ControlRow              aux_control_row,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,105,"    boolean                 forUpdate,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,106,    int                     lock_operation)
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,107,  throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,108,    {
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,109,        return(true);
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,110,    }
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,111,
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,112,    /**
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,113,     * Lock a control row page for reclaiming deleted rows.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,114,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,115,     * When reclaiming deleted rows during split need to get an exclusive
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,116,"     * scan lock on the page, which will mean there are no other scans"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,117,"     * positioned on the page.  If there are other scans positioned, just"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,118,     * give up on reclaiming space now.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,119,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,120,"  * @return true if lock was granted nowait, else false and not lock was"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,121,     *         granted.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,122,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,123,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,124,     **/
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,125,    public boolean lockScanForReclaimSpace(
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,126,    LeafControlRow          current_leaf)
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,127,  throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,128,    {
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,129,        // if doing no locking don't allow reclaiming space.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,130,        return(false);
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,131,    }
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,132,
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,162,"     * Get the scan lock on the page if ""request_scan_lock"" is true."
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,169,     * (p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,170,     * As a sided effect stores the value of the record handle of the current
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,171,     * scan lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,176,"     * @param request_scan_lock Whether to request the page scan lock, should"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,177,     *                          only be requested once per page in the scan.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,185,"    boolean                 request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,213,    /**
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,214,     * Unlock the lock gotten by lockScan().
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,215,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,216,     * See BTree.unlockScan() for more info.
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,217,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,218,     **/
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,219,    public void unlockScan(RecordHandle protectionHandle)
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,220,    {
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,221,    }
java/engine/org/apache/derby/impl/store/access/btree/index/B2INoLocking.java,222,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,82,     *     lockScan                 - lock the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,83,"     *                                (inherit from B2IRowLocking2, we still"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,84,     *                                 get page control locks).
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,85,     *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,86,"     *                                (inherit from B2IRowLocking2, should never"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,87,     *                                 be called while in read uncommitted).
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,88,"     *     lockScanRow              - lock row and possibly the scan page, only"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,89,     *                                if row is forUpdate and not a previous key
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,90,     *                                lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,91,     *     unlockScan               - unlock the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,92,"     *                                (inherit from B2IRowLocking2, should never"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,93,     *                                 be called while in read uncommitted).
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,106,"     * Get the scan lock on the page if ""request_scan_lock"" is true."
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,113,     * (p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,114,     * As a side effect stores the value of the record handle of the current
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,115,     * scan lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,123,"     * @param request_scan_lock Whether to request the page scan lock, should"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,124,     *                          only be requested once per page in the scan.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,135,"    boolean                 request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,144,        // request the scan lock if necessary.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking1.java,153,"                 request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking2.java,86,"   SanityManager.ASSERT(pos.current_leaf != null , ""leaf is null"");"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking2.java,87,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,32,import org.apache.derby.iapi.store.access.TransactionController;
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,33,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,79,    /**
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,80,     * The locking policy to use to get and release the scan locks.  We could
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,81,     * cache this somewhere better.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,82,     **/
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,83,    private LockingPolicy                   scan_locking_policy;
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,84,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,104,        this.scan_locking_policy =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,105,            rawtran.newLockingPolicy(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,106,"                LockingPolicy.MODE_RECORD,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,107,"                TransactionController.ISOLATION_READ_COMMITTED, true);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,115,    private boolean _lockScan(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,116,"    RecordHandle    rh,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,117,"    boolean         forUpdate,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,118,    boolean         wait)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,119,  throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,120,    {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,121,        boolean ret_val = true;
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,122,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,123,        // only get the scan lock if we are record locking.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,124,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,125,        if (!forUpdate)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,126,        {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,127,            ret_val =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,128,                scan_locking_policy.lockRecordForRead(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,129,"                    rawtran, open_btree.getContainerHandle(),"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,130,"                    rh, wait, false);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,131,        }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,132,        else
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,133,        {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,134,            ret_val =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,135,                scan_locking_policy.lockRecordForWrite(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,136,"                    rawtran, rh, false, wait);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,137,        }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,138,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,139,        return(ret_val);
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,140,    }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,141,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,250,     * @param check_changed_rowloc
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,251,     *                          whether to check for the changed rowloc or not.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,268,"    boolean                 check_changed_rowloc,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,324,            if (current_leaf != null)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,439,"                            false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,538,"     * Get the scan lock on the page if ""request_scan_lock"" is true."
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,545,     * (p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,546,     * As a sided effect stores the value of the record handle of the current
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,547,     * scan lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,557,"     * @param request_scan_lock Whether to request the page scan lock, should"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,558,     *                          only be requested once per page in the scan.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,572,"    boolean                 request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,620,"                            ""B2iRowLocking3_1_lockScanRow"",  false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,634,"                        true,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,647,"                            ""B2iRowLocking3_2_lockScanRow"", false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,653,        if (request_scan_lock && !latch_released)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,654,        {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,655,            // Get the scan lock on the start page.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,656,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,657,            // Get shared RECORD_ID_PROTECTION_HANDLE lock to make sure that
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,658,            // we wait for scans in other transactions to move off of this page
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,659,            // before we split.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,660,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,661,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,662,            latch_released =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,663,                !lockScan(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,664,"                    pos.current_leaf,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,665,"                    (LeafControlRow) null, // no other latch currently"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,666,"                    false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,667,                    ConglomerateController.LOCK_READ);// read scan lock position
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,668,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,669,            // special test to see if latch release code works
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,670,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,671,            {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,672,                /* RESOLVE - need to get a container here */
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,673,                latch_released =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,674,                    OpenBTree.test_errors(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,675,"                        open_btree,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,676,"                        ""B2iRowLocking3_3_lockScanRow"", true,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,677,"                        this, pos.current_leaf, latch_released);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,678,            }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,679,        }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,680,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,692,     *     lockScan                 - lock the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,693,     *     lockScanForReclaimSpace  - lock page for reclaiming deleted rows.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,694,     *     lockScanRow              - lock row and possibly the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,695,     *     unlockScan               - unlock the scan page
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,700,    /**
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,701,     * Lock a control row page for scan.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,702,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,703,     * Scanners get shared lock on the page while positioned on a row within
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,704,"     * the page, splitter/purgers/mergers get exclusive lock on the page."
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,705,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,706,     * See BTree.lockScan() for more info.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,707,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,708,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,709,     **/
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,710,    public boolean lockScan(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,711,"    LeafControlRow          current_leaf,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,712,"    ControlRow              aux_control_row,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,713,"    boolean                 forUpdate,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,714,    int                     lock_operation)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,715,  throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,716,    {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,717,        // The scan page lock is implemented as a row lock on the reserved
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,718,        // row id on the page (RecordHandle.RECORD_ID_PROTECTION_HANDLE).
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,719,        RecordHandle scan_lock_rh =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,720,            current_leaf.getPage().getProtectionRecordHandle();
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,721,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,722,"        // First try to get the lock NOWAIT, while latch is held."
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,723,        boolean ret_status =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,724,"            _lockScan(scan_lock_rh, forUpdate, false /* NOWAIT */);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,725,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,726,        if (!ret_status)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,727,        {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,728,            current_leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,729,            current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,730,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,731,            if (aux_control_row != null)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,732,            {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,733,                aux_control_row.release();
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,734,                aux_control_row = null;
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,735,            }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,736,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,737,"            // Could not get the lock NOWAIT, release latch and wait"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,738,            // for the lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,739,"            _lockScan(scan_lock_rh, forUpdate, true /* WAIT */);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,740,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,741,"            // once we get the lock, give it up as we need to get the lock"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,742,            // while we have the latch.  When the lock manager gives us the
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,743,            // ability to do instantaneous locks do that.  We just wait on the
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,744,            // lock to give the split a chance to finish before we interfere.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,745,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,746,            if (!forUpdate)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,747,            {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,748,                scan_locking_policy.unlockRecordAfterRead(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,749,"                    rawtran, open_btree.getContainerHandle(),"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,750,"                    scan_lock_rh, false, true);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,751,            }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,752,            else
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,753,            {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,754,                // RESOLVE - need instantaneous locks as there is no way
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,755,                // currently to release a write lock.  This lock will only
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,756,"                // be requested by split, and will be released by internal"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,757,                // transaction.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,758,            }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,759,        }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,760,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,761,        return(ret_status);
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,762,    }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,763,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,764,    /**
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,765,     * Lock a control row page for reclaiming deleted rows.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,766,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,767,     * When reclaiming deleted rows during split need to get an exclusive
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,768,"     * scan lock on the page, which will mean there are no other scans"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,769,"     * positioned on the page.  If there are other scans positioned, just"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,770,     * give up on reclaiming space now.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,771,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,772,"  * @return true if lock was granted nowait, else false and not lock was"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,773,     *         granted.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,774,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,775,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,776,     **/
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,777,    public boolean lockScanForReclaimSpace(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,778,    LeafControlRow          current_leaf)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,779,  throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,780,    {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,781,        // The scan page lock is implemented as a row lock on the reserved
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,782,        // row id on the page (RecordHandle.RECORD_ID_PROTECTION_HANDLE).
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,783,        RecordHandle scan_lock_rh =
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,784,            current_leaf.getPage().getProtectionRecordHandle();
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,785,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,786,"        // First try to get the lock NOWAIT, while latch is held."
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,787,        return(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,788,"            _lockScan(scan_lock_rh, true /* update */, false /* NOWAIT */));"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,789,    }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,790,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,840,"     * Get the scan lock on the page if ""request_scan_lock"" is true."
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,847,     * (p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,848,     * As a sided effect stores the value of the record handle of the current
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,849,     * scan lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,857,"     * @param request_scan_lock Whether to request the page scan lock, should"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,858,     *                          only be requested once per page in the scan.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,869,"    boolean                 request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,884,"                request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,908,    /**
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,909,     * Release the lock gotten by calling lockScan.  This call can only be
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,910,"     * made to release read scan locks, write scan locks must be held until"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,911,     * end of transaction.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,912,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,913,     * See BTree.unlockScan() for more info.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,914,     *
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,915,     **/
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,916,    public void unlockScan(RecordHandle scan_lock_rh)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,917,    {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,918,"        // This is first row in table, lock the special key that"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,919,        // represents the key previous to the first key of the table.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,920,        try
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,921,        {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,922,            scan_locking_policy.unlockRecordAfterRead(
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,923,"                rawtran, open_btree.getContainerHandle(),"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,924,"                scan_lock_rh, false, true);"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,925,        }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,926,        catch (StandardException se)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,927,        {
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,928,   if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,929,    SanityManager.THROWASSERT(se);
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,930,        }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,931,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,932,    }
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,933,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,979,"                    false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,1097,"                false,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,72,"     * Get the scan lock on the page if ""request_scan_lock"" is true."
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,79,     * (p>
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,80,     * As a side effect stores the value of the record handle of the current
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,81,     * scan lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,89,"     * @param request_scan_lock Whether to request the page scan lock, should"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,90,     *                          only be requested once per page in the scan.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,101,"    boolean                 request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,118,"                request_scan_lock,"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,151,"                SanityManager.ASSERT(pos.current_leaf != null , ""leaf is null"");"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLockingRR.java,152,
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,361,"            SanityManager.THROWASSERT(""SHOULD NOT BE CALLED"");"
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,37,import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,46,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,403,
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,404,
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,405, /*
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,406, ** Methods of ScanManager
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,407, */
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,408,
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,409,    /**
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,410,     * Do work necessary to maintain the current position in the scan.
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,411,     * <p>
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,412,"     * The latched page in the conglomerate ""congomid"" is changing, do"
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,413,     * whatever is necessary to maintain the current position of the scan.
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,414,     * For some conglomerates this may be a no-op.
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,415,     * <p>
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,416,     *
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,417,     * @param conglom   Conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,418,     * @param page      Page in the conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,419,     *
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,420,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,421,     **/
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,422,"    public void savePosition(Conglomerate conglom, Page page)"
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,423,        throws StandardException
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,424, {
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,425,"        // RESOLVE (mikem), under the current implementation all scans within"
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,426,        // a transaction are called rather than just the ones with the right
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,427,        // conglom.  For now just have heaps ignore the call.
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,428,
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,429,  // throw HeapOperationException.unimplementedFeature();
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,430,        return;
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,431, }
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,34,import org.apache.derby.iapi.store.access.conglomerate.Conglomerate;
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,40,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,332, /*
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,333, ** Methods of ScanManager
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,334, */
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,335,
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,336,    /**
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,337,     * Do work necessary to maintain the current position in the scan.
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,338,     * <p>
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,339,"     * The latched page in the conglomerate ""congomid"" is changing, do"
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,340,     * whatever is necessary to maintain the current position of the scan.
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,341,     * For some conglomerates this may be a no-op.
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,342,     * <p>
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,343,     *
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,344,     * @param conglom   Conglomerate object of the conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,345,     * @param page      Page in the conglomerate being changed.
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,346,     *
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,347,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,348,     **/
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,349,"    public void savePosition(Conglomerate conglom, Page page)"
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,350,        throws StandardException
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,351, {
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,352,"        // RESOLVE (mikem), under the current implementation all scans within"
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,353,        // a transaction are called rather than just the ones with the right
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,354,        // conglomid.  For now just have sort scans ignore the call.
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,355,
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,356,        return;
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,357, }
java/engine/org/apache/derby/impl/store/access/sort/Scan.java,358,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,108, /**
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,109,"  * A record handle that, when locked, protects all the record ids on the"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,110,  * page.
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,111,  * @see RecordHandle#RECORD_ID_PROTECTION_HANDLE
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,112,  */
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,113, private RecordId protectionHandle;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,114,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,229,  protectionHandle = null;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,271,   SanityManager.ASSERT(protectionHandle == null);
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,295,  protectionHandle = null;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,323,    /**
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,324,     * Get the record id protection handle for the page.
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,325,     *
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,326,     * @return protection handle
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,327,     * @see RecordHandle#RECORD_ID_PROTECTION_HANDLE
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,328,     */
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,329,    public final RecordHandle getProtectionRecordHandle() {
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,330,        // only allocate a new handle the first time the method is called
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,331,        if (protectionHandle == null) {
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,332,            protectionHandle =
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,333,"                new RecordId(getPageId(),"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,334,                             RecordHandle.RECORD_ID_PROTECTION_HANDLE);
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,335,        }
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,336,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,337,        if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,338,            SanityManager.ASSERT(
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,339,"                getPageId().equals(protectionHandle.getPageId()),"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,340,"                ""PageKey for cached protection handle doesn't match identity"");"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,341,        }
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,342,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,343,        return protectionHandle;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,344,    }
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,345,
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,3072,  RecordHandle special = page1.makeRecordHandle(RecordHandle.RECORD_ID_PROTECTION_HANDLE);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,3076,  rhs[1] = page1.makeRecordHandle(RecordHandle.RECORD_ID_PROTECTION_HANDLE);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3067,"            ""B2iRowLocking3_3_lockScanRow1"","
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3069,"            ""BTreeScan_positionAtNextPage1"","
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3213,"            ""B2iRowLocking3_3_lockScanRow2"","
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3216,"            ""BTreeScan_positionAtNextPage2"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,63,
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,64,        // Disabled until DERBY-2991 has been fixed
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,65,        //suite.addTest(IndexSplitDeadlockTest.suite());
java/client/org/apache/derby/client/am/Clob.java,24,import java.io.BufferedInputStream;
java/client/org/apache/derby/client/am/Clob.java,25,import java.io.BufferedReader;
java/client/org/apache/derby/client/am/Clob.java,26,import java.io.InputStream;
java/client/org/apache/derby/client/am/Clob.java,30,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/client/am/Clob.java,628,        if ((offset < 0) || offset > str.length() ) {
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,549,        if (pos < 1)
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3651,            } catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3736,        } catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3798,            } catch (StandardException t) {
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,65, private boolean dumpedStats;
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,347,  if (! dumpedStats)
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,385,   dumpedStats = true;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java,2146,    private void testRuntimeStatistics(String sql) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java,2176,"        testRuntimeStatistics(""select * from dept"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java,2185,"        testRuntimeStatistics(""update dept set dname = upper(dname)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java,2194,"        testRuntimeStatistics(""insert into dept select * from dept where 1<>1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java,2203,"        testRuntimeStatistics(""delete from dept"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java,2211,"        testRuntimeStatistics(""values (1, 2, 3, 'this is a test')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ResultSetsFromPreparedStatementTest.java,2222,"                ""current schema, 'DEPT', 1)"");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,27,import org.apache.derby.iapi.store.raw.RecordHandle;
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,47,"The lockScan*() interfaces assume that the caller gets a ""scan lock"" on the"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,48,page before requesting any row locks on the page.  This is either done by
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,49,"makeing a lockScan() call followed by row lock requests, or it can be done"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,50,in one operation by calling lockScanRow() and requesting the scan lock be
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,51,obtained before getting the row lock.  Upon return from these interfaces
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,58,"The lockNonScan*() interfaces assume that no ""scan lock"" exists.  If these"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,62,that the correct key is locked with latches held.  Because no scan lock is
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,63,held the original row could have disappeared from the table.  These interfaces
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,821,                // RESOLVE RLL (mikem) - do I need to do the
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,822,                // RECORD_ID_PROTECTION_HANDLE lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,823,                // First guarantee that record id's will not move off this
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,824,"                // current page while searching for previous key, by getting"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,825,                // the RECORD_ID_PROTECTION_HANDLE lock on the current page.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,826,                // Since we have a latch on the cur
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,827,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,828,                // RESOLVE RLL (mikem) - NO RECORD_ID PROTECTION IN EFFECT.
java/engine/org/apache/derby/iapi/services/io/FormatableBitSet.java,688,  * @param beyondBit only look at bit that is greater than this bit number
java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java,187, public void updateRow(ExecRow row) throws StandardException;
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,333, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,334,  ((NoPutResultSet)cursor).updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java,515, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,406, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,407,  source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,586, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,587,  source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1101, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1102,  ExecRow newRow = row;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1103,  boolean undoProjection = false;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1115,  if (prRS != null) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1116,   newRow = prRS.doBaseRowProjection(row);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1117,   undoProjection = true;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1118,  }
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1119,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1121,  DataValueDescriptor[] hashRowArray = (DataValueDescriptor[])
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1126,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1132,  if (undoProjection) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1133,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1134,   final DataValueDescriptor[] newRowData = newRow.getRowArray();
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1135,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1136,   // Array of original position in row
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1137,   final int[] origPos = prRS.getBaseProjectMapping();
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1138,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1139,   // We want the row to contain data backed in BackingStoreHashtable
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1140,   final DataValueDescriptor[] backedData =
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1141,    getRowArrayFromHashTable(currentPosition);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1142,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1143,   for (int i=0; i<origPos.length; i++) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1144,    if (origPos[i]>=0) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1145,"     row.setColumn(origPos[i], backedData[i]);"
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1146,    }
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1148,  } else {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1149,   row.setRowArray(getRowArrayFromHashTable(currentPosition));
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,1127, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,560,    source.updateRow(newBaseRow);
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,888,     source.updateRow(newBaseRow);
java/engine/org/apache/derby/iapi/sql/execute/RowChanger.java,173,"  * @returns column no, or -1 if not found or not a base column"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,205,        // DERBY-4244 (START)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,206,"        // Without these lines, this test fails a few lines later when"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,207,        // it makes yet another attempt to add column c2 to table t0. This
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,208,"        // bug is logged as DERBY-4244. When that problem is fixed, this"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,209,        // section could be removed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,210,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,211,"        st.executeUpdate(""drop table t0"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,212,        st.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,213,"                ""create table t0(c1 int not null constraint p1 primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,214,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,215,        // DERBY-4244 (END)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,216,
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,141,  /*
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,142,  ** Load up the sorter because we have something to sort.
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,143,  */
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,144,  scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,161,  /* If this is an in-order group by then we do not need the sorter.
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,162,   * (We can do the aggregation ourselves.)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,163,   * We save a clone of the first row so that subsequent next()s
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,164,   * do not overwrite the saved row.
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,165,   */
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,166,  if (isInSortedOrder)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,167,  {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,168,   currSortedRow = getNextRowFromRS();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,169,   if (currSortedRow != null)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,171,    currSortedRow = (ExecIndexRow) currSortedRow.getClone();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,172,    initializeVectorAggregation(currSortedRow);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,174,  }
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,175,  else
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,176,  {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,177,   /*
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,178,   ** Load up the sorter
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,179,   */
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,180,   scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,146,     isOpen = true;
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,148,  leftRow = leftResultSet.getNextRowCore();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,149,  if (leftRow != null)
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,150,  {
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,151,   openRight();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,152,   rowsSeenLeft++;
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,111,        isOpen = true;
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,113,        rightSource.openCore();
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,114,        rightInputRow = rightSource.getNextRowCore();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,250,  /* If this is an in-order distinct then we do not need the sorter.
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,251,   * (We filter out the duplicate rows ourselves.)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,252,   * We save a clone of the first row so that subsequent next()s
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,253,   * do not overwrite the saved row.
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,254,   */
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,255,  if (isInSortedOrder && distinct)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,256,  {
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,257,   currSortedRow = getNextRowFromRS();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,258,   if (currSortedRow != null)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,260,    currSortedRow = (ExecRow) currSortedRow.getClone();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,262,  }
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,263,  else
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,264,  {
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,265,   /*
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,266,   ** Load up the sorter.
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,267,   */
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,268,   scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,269,   sorted = true;
java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java,102,        isOpen = true;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2295,"    return fsq.bindNonVTITables(dataDictionary, fromListParam);"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,630,   }
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,638,   if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,639,    cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,640,   else
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,641,    cachedDest.setToNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,644,   if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,645,    cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,646,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,353,  int     whichCol;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,354,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,355,  if (desiredTypes == null) { desiredTypes = fetchResultTypes( resultDescription ); }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,356,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,370,                    normalizedCol = normalizeColumn
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,371,"                        ( desiredTypes[i - 1], sourceRow, i, normalizedRow.getColumn(i), resultDescription );"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,386,    private  DataTypeDescriptor[]    fetchResultTypes( ResultDescription desc )
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,387,        throws StandardException
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,31,import org.apache.derby.iapi.store.access.TransactionController;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,217,    /**
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,218,     * Open the scan controller
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,219,     *
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,220,     * @param tc transaction controller; will open one if null.
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,221,     * @exception StandardException thrown on failure to open
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,222,     */
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,223,    protected void openScanController(TransactionController tc)
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,224,        throws StandardException
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,225,    {
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,226,        /* If we're opening the scan controller for the first time then
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,227,         * we want to use the first value in the (now sorted) list as
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,228,         * the start/stop key.  That's what we pass in here.
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,229,         */
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,230,"        openScanController(tc, probeValues[0]);"
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,231,
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,232,        /* probeValIndex should be the index of the *next* value to
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,233,         * use.  Since we just positioned ourselves at the 0th probe
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,234,"         * value with the above call, the next value we want is the"
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,235,"         * one at index ""1""."
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,236,         */
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,237,        probeValIndex = 1;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,238,    }
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,239,
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,310,        DataValueDescriptor pv = null;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,311,        if (moreInListVals())
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,312,        {
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,313,            pv = getNextProbeValue();
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,314,            if (pv == null)
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,315,            {
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,316,                /* We'll get here when we've exhausted the probe list. In
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,317,"                 * that case leave the scan as it is, which effectively"
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,318,                 * means we are done.
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,319,                 */
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,320,                return;
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,324,        reopenScanController(pv);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,85, private boolean sameStartStopPosition;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,247,
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,248,  if (startKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,249,  {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,250,   startPosition = (ExecIndexRow) startKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,251,   if (sameStartStopPosition)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,252,   {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,253,    stopPosition = startPosition;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,254,   }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,255,  }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,256,  if (stopKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,257,  {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,258,   stopPosition = (ExecIndexRow) stopKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,259,  }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,337, {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,338,"  openScanController(tc, (DataValueDescriptor)null);"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,339, }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,340,
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,341, /*
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,342, ** Does the work of openScanController.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,343, **
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,344, ** @param tc transaction controller; will open one if null.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,345, ** @param probeValue If non-null then we will open the scan controller
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,346, **  and position it using the received probeValue as the start key.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,347, **  Otherwise we'll use whatever value is in startPosition (if non-
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,348, **  null) as the start key.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,349, */
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,350," protected void openScanController(TransactionController tc,"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,351,  DataValueDescriptor probeValue) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,358,"  /* If we have a probe value then we do the ""probe"" by positioning"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,359,   * the scan at the first row matching the value.  The way to do
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,360,"   * that is to use the value as a start key, which is what will"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,361,"   * happen if we plug it into first column of ""startPositionRow""."
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,362,"   * So in this case startPositionRow[0] functions as a ""place-holder"""
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,363,   * for the probe value.  The same goes for stopPositionRow[0].
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,364,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,365,   * Note that it *is* possible for a start/stop key to contain more
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,366,   * than one column (ex. if we're scanning a multi-column index). In
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,367,   * that case we plug probeValue into the first column of the start
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,368,   * and/or stop key and leave the rest of the key as it is.  As an
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,369,"   * example, assume we have the following predicates:"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,370,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,371,"   *    ... where d in (1, 20000) and b > 200 and b <= 500"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,372,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,373,"   * And assume further that we have an index defined on (d, b)."
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,374,   * In this case it's possible that we have TWO start predicates
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,375,"   * and TWO stop predicates: the IN list will give us ""d = probeVal"","
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,376,"   * which is a start predicate and a stop predicate; then ""b > 200"""
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,377,"   * may give us a second start predicate, while ""b <= 500"" may give"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,378,   * us a second stop predicate.  So in this situation we want our
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,379,   * start key to be:
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,380,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,381,"   *    (probeValue, 200)"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,382,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,383,   * and our stop key to be:
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,384,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,385,"   *    (probeValue, 500)."
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,386,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,387,   * This will effectively limit the scan so that it only returns
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,388,"   * rows whose ""D"" column equals probeValue and whose ""B"" column"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,389,   * falls in the range of 200 thru 500.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,390,   *
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,391,   * Note: Derby currently only allows a single start/stop predicate
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,392,   * per column. See PredicateList.orderUsefulPredicates().
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,393,   */
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,394,  if (probeValue != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,395,  {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,396,   startPositionRow[0] = probeValue;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,397,
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,398,"    /* If the start key and stop key are the same, we've already set"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,399,    * stopPosition equal to startPosition as part of openCore().
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,400,"    * So by putting the probe value into startPositionRow[0], we"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,401,    * also put it into stopPositionRow[0].
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,402,    */
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,403,   if (!sameStartStopPosition)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,404,    stopPositionRow[0] = probeValue;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,405,  }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,406,
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,463, {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,464,  reopenScanController((DataValueDescriptor)null);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,465, }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,466,
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,467, /*
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,468, ** Does the work of reopenScanController.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,469, **
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,470, ** @param probeValue If non-null then we will open the scan controller
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,471, **  and position it using the received probeValue as the start key.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,472, **  Otherwise we'll use whatever value is in startPosition (if non-
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,473, **  null) as the start key.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,474, */
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,475, protected void reopenScanController(DataValueDescriptor probeValue)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,476,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,483,"  /* If we have a probe value then we do the ""probe"" by using the"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,484,   * value as a start and stop key.  See openScanController() for
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,485,   * details.  Note that in this case we do *not* want to reset
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,486,   * the rowsThisScan variable because we are going to be doing
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,487,"   * multiple ""probes"" for a single scan.  Logic to detect when"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,488,   * when we've actually started a new scan (as opposed to just
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,489,   * repositioning an existing scan based on a probe value) is
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,490,"   * in MultiProbeTableScanResultSet.reopenScanController(),"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,491,   * and that method will then take care of resetting the variable
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,492,   * (if needed) for probing scans.
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,493,   */
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,494,  if (probeValue != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,495,  {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,496,   startPositionRow[0] = probeValue;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,497,   if (!sameStartStopPosition)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,498,    stopPositionRow[0] = probeValue;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,499,  }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,500,  else
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,501,   rowsThisScan = 0;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,534,  if (startKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,535,  {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,536,   startPosition = (ExecIndexRow) startKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,537,   if (sameStartStopPosition)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,538,   {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,539,    stopPosition = startPosition;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,540,   }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,541,  }
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,542,  if (stopKeyGetter != null)
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,543,  {
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,544,   stopPosition = (ExecIndexRow) stopKeyGetter.invoke(activation);
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,545,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java,33,import junit.framework.TestSuite;
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,564,
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1314,"     //Numeric types are comparable to numeric types, boolean types and to"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1315,  //comparable user types
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1317,      return (compareWithTypeID.isNumericTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1318,              compareWithTypeID.isBooleanTypeId());
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1338,"  //Booleans are comparable to Boolean, string, numeric and to"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1339,  //comparable user types
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1342,        compareWithTypeID.isStringTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1343,        compareWithTypeID.isNumericTypeId());
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,286,       (otherType.isBooleanTypeId()) ||
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,320,  if ((otherType.isNumericTypeId()) ||
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,321,   (otherType.isBooleanTypeId()))
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,322,   return true;
java/engine/org/apache/derby/impl/sql/compile/BitTypeCompiler.java,64,     otherType.isBooleanTypeId() ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,55,  int otherJDBCTypeId = otherType.getJDBCTypeId();
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,56,
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,57,  if ((otherJDBCTypeId == Types.DATE) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,58,   (otherJDBCTypeId == Types.TIME) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,59,   (otherJDBCTypeId == Types.TIMESTAMP))
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,60,  {
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,61,   return false;
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,62,  }
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,63,
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,64,  return true;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,55,            return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,78,            // no automatic conversions at store time--but string
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,81,            return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,55,   // or CLOB.
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,58,    return (otherType.isStringTypeId());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,438,"         rs = s.executeQuery(""select count(*) from SYS.SYSCONGLOMERATES where CAST(CONGLOMERATENAME AS VARCHAR(128))='IX' and ISINDEX=1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,450,"         rs = s.executeQuery(""select count(*) from SYS.SYSCONGLOMERATES where CAST(CONGLOMERATENAME AS VARCHAR(128))='IX' and ISINDEX=1"");"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1691,   if (resultColumn.isGenerated())
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,307,  * Set the type of each parameter in the result column list for this table constructor.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,317,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,318,"   SanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,319,"    ""More columns in ResultColumnList than in base table"");"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,320,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,321,  /* Look for ? parameters in the result column list */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,322,  int rclSize = resultColumns.size();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,323,  for (int index = 0; index < rclSize; index++)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,324,  {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,325,   ResultColumn rc = (ResultColumn) resultColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,326,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,327,   ValueNode re = rc.getExpression();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,328,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,329,   if (re.requiresTypeFromContext())
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,330,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,331,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,332,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,333,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,334,    /*
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,335,    ** We found a ? - set its type to the type of the
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,336,    ** corresponding column of the target table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,337,    */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,338,    re.setType(typeCol.getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,339,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,340,   else if (re instanceof CharConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,341,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,342,    // Character constants are of type CHAR (fixed length string).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,343,    // This causes a problem (beetle 5160) when multiple row values are provided
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,344,    // as constants for insertion into a variable length string column.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,345,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,346,    // This issue is the query expression
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,347,"    // VALUES 'abc', 'defghi'"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,348,"    // has type of CHAR(6), ie. the length of largest row value for that column."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,349,    // This is from the UNION defined behaviour.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,350,    // This causes strings with less than the maximum length to be blank padded
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,351,    // to that length (CHAR semantics). Thus if this VALUES clause is used to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,352,"    // insert into a variable length string column, then these blank padded values"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,353,"    // are inserted, which is not what is required ..."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,354,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,355,"    // BECAUSE, when the VALUES is used as a table constructor SQL standard says the"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,356,    // types of the table constructor's columns are set by the table's column types.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,357,"    // Thus, in this case, each of those string constants should be of type VARCHAR"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,358,    // (or the matching string type for the table).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,359,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,360,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,361,"    // This is only an issue for fixed length character (CHAR, BIT) string or"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,362,    // binary consraints being inserted into variable length types.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,363,    // This is because any other type's fundemental literal value is not affected
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,364,"    // by its data type. E.g. Numeric types such as INT, REAL, BIGINT, DECIMAL etc."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,365,    // do not have their value modifed by the union since even if the type is promoted
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,366,"    // to a higher type, its fundemental value remains unchanged."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,367,"    // values (1.2, 34.4567, 234.47) will be promoted to"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,368,"    // values (1.2000, 34.4567, 234.4700)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,369,    // but their numeric value remains the same.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,370,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,371,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,372,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,373,    // The fix is to change the base type of the table constructor's value to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,374,"    // match the column type. Its length can be left as-is, because there is"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,375,    // still a normailzation step when the value is inserted into the table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,376,    // That will set the correct length and perform truncation checks etc.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,377,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,378,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,379,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,380,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,381,    TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,382,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,383,    if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,384,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,385,     if (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,386,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,387,      int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,388,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,389,"      re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,390,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,391,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,392,    else if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,393,     if (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,394,     // then we're trying to cast a char literal into a
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,395,     // variable bit column.  We can't change the base
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,396,     // type of the table constructor's value from char
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,397,"     // to bit, so instead, we just change the base type"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,398,"     // of that value from char to varchar--that way,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,399,     // no padding will be added when we convert to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,400,     // bits later on (Beetle 5306).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,401,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,402,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,403,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,404,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,405,     else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,406,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,407,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,408,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,409,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,410,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,411,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,412,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,413,   else if (re instanceof BitConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,414,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,415,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,416,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,417,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,418,    TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,419,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,420,    if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,421,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,422,"     // NOTE: Don't bother doing this if the column type is BLOB,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,423,     // as we don't allow bit literals to be inserted into BLOB
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,424,     // columns (they have to be explicitly casted first); beetle 5266.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,425,     if ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,426,      (colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,427,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,428,      int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,429,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,430,"      re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,431,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,432,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,433,    else if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,434,     if (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,435,     // then we're trying to cast a bit literal into a
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,436,     // variable char column.  We can't change the base
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,437,     // type of the table constructor's value from bit
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,438,"     // to char, so instead, we just change the base"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,439,"     // type of that value from bit to varbit--that way,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,440,     // no padding will be added when we convert to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,441,     // char later on.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,442,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,443,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,444,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,445,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,446,     else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,447,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,448,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,449,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,450,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,451,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,452,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,453,  }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,26,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,29,import org.apache.derby.iapi.sql.compile.OptimizableList;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,31,import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,41,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,42,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,43,import org.apache.derby.iapi.sql.Row;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,46,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,58,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,59,import java.util.Properties;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1607,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1608,   ResultColumnList newSelectList = prnRSN.getResultColumns().copyListAndObjects();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1609,   newSelectList.removeGeneratedGroupingColumns();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1610,"   newSelectList.genVirtualColumnNodes(prnRSN, prnRSN.getResultColumns());"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1614,"      newSelectList,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,2246,}
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,841, /**
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,842,  * Swap the left and right sides.
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,843,  */
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,844, void swapOperands()
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,845, {
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,846,  String   tmpInterfaceType = leftInterfaceType;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,847,  ValueNode tmpVN = leftOperand;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,848,
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,849,  leftOperand = rightOperand;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,850,  rightOperand = tmpVN;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,851,  leftInterfaceType = rightInterfaceType;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,852,  rightInterfaceType = tmpInterfaceType;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,853, }
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,854,
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1086,
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2274,    else if (right instanceof ConstantNode && left instanceof ColumnReference)
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2277,     bcon.swapOperands();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1691,   if (resultColumn.isGenerated() || resultColumn.isGeneratedForUnmatchedColumnInInsert())
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1513,         ! (opNode.getRightOperand() instanceof ConstantNode ||
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1514,        opNode.getRightOperand() instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2276,    if (left instanceof ColumnReference &&
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2277,       (right instanceof ConstantNode || right instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2281,    else if (left instanceof ConstantNode && right instanceof ColumnReference)
java/client/org/apache/derby/client/am/PreparedStatement.java,1003,
java/client/org/apache/derby/client/am/PreparedStatement.java,1423,                if (x instanceof String) {
java/client/org/apache/derby/client/am/PreparedStatement.java,3072,        /*
java/client/org/apache/derby/client/am/PreparedStatement.java,3073,"        static SqlException throwLangDataTypeSetException( LogWriter logWriter,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3074,"                                                           int valType,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3075,                                                           int paramType)
java/client/org/apache/derby/client/am/PreparedStatement.java,3076,
java/client/org/apache/derby/client/am/PreparedStatement.java,3077,            throws SqlException{
java/client/org/apache/derby/client/am/PreparedStatement.java,3078,
java/client/org/apache/derby/client/am/PreparedStatement.java,3079,"            throw new SqlException( logWriter,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3080,"                                    new ClientMessageId(SQLState.LANG_DATA_TYPE_SET_MISMATCH) ,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3081,                                    new Object[]{
java/client/org/apache/derby/client/am/PreparedStatement.java,3082,"                                        Types.getTypeString(valType),"
java/client/org/apache/derby/client/am/PreparedStatement.java,3083,                                        Types.getTypeString(paramType)
java/client/org/apache/derby/client/am/PreparedStatement.java,3084,"                                    },"
java/client/org/apache/derby/client/am/PreparedStatement.java,3085,                                    (Throwable) null);
java/client/org/apache/derby/client/am/PreparedStatement.java,3086,        }
java/client/org/apache/derby/client/am/PreparedStatement.java,3087,        */
java/client/org/apache/derby/client/am/PreparedStatement.java,3088,
java/client/org/apache/derby/client/net/DssConstants.java,25,    static final int MAX_DSS_LEN = 32767;
java/client/org/apache/derby/client/net/NetStatementReply.java,2079,    // FORMAT FOR SQLAM >= 7
java/client/org/apache/derby/client/net/NetStatementReply.java,2080,    //   SQLUDTXTYPE; PROTOCOL TYPE I4; ENVLID 0X02; Length Override 4
java/client/org/apache/derby/client/net/NetStatementReply.java,2081,    //   SQLUDTRDB; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2082,    //   SQLUDTSCHEMA_m; PROTOCOL TYPE VCM; ENVLID 0X3E; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2083,    //   SQLUDTSCHEMA_s; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2084,    //   SQLUDTNAME_m; PROTOCOL TYPE VCM; ENVLID 0X3E; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2085,    //   SQLUDTNAME_s; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2087,                                int columnNumber) throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,2088,        if (readFastUnsignedByte() == CodePoint.NULLDATA) {
java/client/org/apache/derby/client/net/NetStatementReply.java,2089,            return;
java/client/org/apache/derby/client/net/Request.java,1609,"        System.arraycopy(bytes, 0, bytes_, offset_, bytes.length);"
java/client/org/apache/derby/client/net/Request.java,1610,        offset_ += bytes.length;
java/client/org/apache/derby/client/net/Typdef.java,428,        /* 0x50 Empties */
java/client/org/apache/derby/client/net/Typdef.java,429,"        null,"
java/client/org/apache/derby/client/net/Typdef.java,430,        /* 0x51 Empties */
java/client/org/apache/derby/client/net/Typdef.java,431,"        null,"
java/client/org/apache/derby/client/net/Typdef.java,768,"        0x00, // 0x50 Empties"
java/client/org/apache/derby/client/net/Typdef.java,769,"        0x00, // 0x51 Empties"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4836,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6600,"   int drdaType = FdocaConstants.mapJdbcTypeToDrdaType(colType,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7031,"      drdaType = FdocaConstants.mapJdbcTypeToDrdaType(stmt.getOutputParamType(i),true,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7355,"                nullable,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7357,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7469,  writer.writeByte(CodePoint.NULLDATA);
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,135," protected static int mapJdbcTypeToDrdaType(int jdbcType, boolean nullable,"
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,198,    drdaType = DRDAConstants.DRDA_TYPE_NLONG;
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,199,    outlen[0] = LONGVARCHAR_MAX_LEN;
java/drda/org/apache/derby/impl/drda/SQLTypes.java,133," static protected int mapJdbcTypeToDB2SqlType (int jdbctype, boolean nullable,"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,143,"   FdocaConstants.mapJdbcTypeToDrdaType(jdbctype,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,179,     return DRDAConstants.DB2_SQLTYPE_LONG + nullAddVal;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,140,        else { return doubleQuote( schemaName ) + '.' + doubleQuote( unqualifiedName ); }
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,186,        switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,258,        return formatId;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,313,        switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,444,"                        SanityManager.THROWASSERT(""Unexpected formatId "" + formatId);"
java/engine/org/apache/derby/iapi/reference/DRDAConstants.java,144,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends OutputStream {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,37,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38, private static int INITIAL_SIZE = 4096;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,39,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40, private byte[] buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41, private int  position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,42, private int  used;  // how many bytes are used
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,43, private int  beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,44,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,45, public DynamicByteArrayOutputStream() {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,46,  this(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,47, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,48,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,49, public DynamicByteArrayOutputStream(int size) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,50,  super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,51,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,52,  buf = new byte[size];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,53, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,54,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,55, public DynamicByteArrayOutputStream(byte[] data) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,56,  super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,57,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,58,  buf = data;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,59, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,60,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,61, public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,62,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,63,  byte[] cbuf = toBeCloned.getByteArray();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,64,  buf = new byte[cbuf.length];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,65,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,66,"  write(cbuf, 0, cbuf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,67,  position = toBeCloned.getPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,68,  used = toBeCloned.getUsed();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,69,  beginPosition = toBeCloned.getBeginPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,70, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,71,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,72, /*
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,73,  * OutputStream methods
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,74,  */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,75, public void write(int b)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,76, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,77,  if (position >= buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,78,   expandBuffer(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,79,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,80,  buf[position++] = (byte) b;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,81,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,82,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,83,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,84, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,85,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,86," public void write(byte[] b, int off, int len)"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,87, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,88,  if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,89,   expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,90,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,91,"  System.arraycopy(b, off, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,92,  position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,93,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,94,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,95,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,96, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,97,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,98," void writeCompleteStream(InputStream dataIn, int len) throws IOException"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,99, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,100,  if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,101,   expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,102,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,103,"  org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,104,  position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,105,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,106,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,107,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,108, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,109,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,110, public void close()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,111, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,112,  buf = null;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,113,  reset();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,114, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,115,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,116, /*
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,117,  * Specific methods
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,118,  */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,119,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,120, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,121,  Reset the stream for reuse
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,122, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,123, public void reset()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,124, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,125,  position = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,126,  beginPosition = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,127,  used = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,128, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,129,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,130, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,131,  Get a reference to the byte array stored in the byte array output
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,132,  stream. Note that the byte array may be longer that getPosition().
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,133,  Bytes beyond and including the current poistion are invalid.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,134, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,135, public byte[] getByteArray()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,136, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,137,  return buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,138, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,139,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,140, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,141,  Get the number of bytes that was used.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,142, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,143, public int getUsed()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,144, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,145,  return used;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,146, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,147,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,148, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,149,  Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,150, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,151, public int getPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,152, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,153,  return position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,154, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,155,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,156, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,157,  Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,158, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,159, public int getBeginPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,160, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,161,  return beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,162, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,163,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,164, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,165,  Set the position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,166,  It is up to the caller to make sure the stream has no gap of garbage in
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,167,  it or useful information is not left out at the end because the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,168,  does not remember anything about the previous position.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,169, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,170, public void setPosition(int newPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,171, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,172,  if (newPosition > position)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,173,  {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,174,   if (newPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,175,    expandBuffer(newPosition - buf.length);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,176,  }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,177,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,178,  position = newPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,179,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,180,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,181,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,182,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,183,  return ;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,184, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,185,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,186, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,187,  Set the begin position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,188,"  If the newBeginPosition is larger than the stream itself,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,189,"  then, the begin position is not set."
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,190, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,191, public void setBeginPosition(int newBeginPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,192, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,193,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,194,  if (newBeginPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,195,   return;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,196,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,197,  beginPosition = newBeginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,198, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,199,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,200, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,201,  Shrink the buffer left by the amount given. Ie.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,202,  bytes from 0 to amountToShrinkBy are thrown away
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,203, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,204, public void discardLeft(int amountToShrinkBy) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,205,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,206,"  System.arraycopy(buf, amountToShrinkBy, buf, 0,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,207,   used - amountToShrinkBy);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,208,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,209,  position -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,210,  used -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,211, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,212,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,213, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,214,  Expand the buffer by at least the number of bytes requested in minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,215,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,216,"  To optimize performance and reduce memory copies and allocation, we have a staged buffer"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,217,  expansion.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,218,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,219,  <UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,220,  <LI> buf.length < 128k - increase by 4k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,221,  <LI> buf.length < 1Mb - increase by 128k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,222,  <LI> otherwise increase by 1Mb.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,223,  </UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,224,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,225,"  In all cases, if minExpansion is greater than the value about then the buffer will"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,226,  be increased by minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,227, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,228, private void expandBuffer(int minExtension)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,229, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,230,  if (buf.length < (128 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,231,   if (minExtension < INITIAL_SIZE)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,232,    minExtension = INITIAL_SIZE;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,233,  } else if (buf.length < (1024 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,234,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,235,   if (minExtension < (128 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,236,    minExtension = (128 * 1024);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,237,  } else {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,238,   if (minExtension < (1024 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,239,    minExtension = 1024 * 1024;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,240,  }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,241,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,242,  int newsize = buf.length + minExtension;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,243,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,244,  byte[] newbuf = new byte[newsize];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,245,"  System.arraycopy(buf, 0, newbuf, 0, buf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,246,  buf = newbuf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,247, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,248,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,31,public final class InputStreamUtil {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,32,    private static final int SKIP_FRAGMENT_SIZE = Integer.MAX_VALUE;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,33,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,34, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,35,"  Read an unsigned byte from an InputStream, throwing an EOFException"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,36,  if the end of the input is reached.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,37,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,38,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,39,  @exception EOFException if the end of the stream is reached
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,40,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,41,  @see DataInput#readUnsignedByte
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,42,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,43, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,44, public static int readUnsignedByte(InputStream in) throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,45,  int b = in.read();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,46,  if (b < 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,47,   throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,48,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,49,  return b;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,50, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,51,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,52, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,53,  Read a number of bytes into an array.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,54,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,55,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,56,  @exception EOFException if the end of the stream is reached
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,57,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,58,  @see DataInput#readFully
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,59,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,60, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,61," public static void readFully(InputStream in, byte b[],"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,62,"                                 int offset,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,63,                                 int len) throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,64, {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,65,  do {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,66,"   int bytesRead = in.read(b, offset, len);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,67,   if (bytesRead < 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,68,    throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,69,   len -= bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,70,   offset += bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,71,  } while (len != 0);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,72, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,73,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,74,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,75, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,76,  Read a number of bytes into an array.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,77,        Keep reading in a loop until len bytes are read or EOF is reached or
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,78,        an exception is thrown. Return the number of bytes read.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,79,"        (InputStream.read(byte[],int,int) does not guarantee to read len bytes"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,80,         even if it can do so without reaching EOF or raising an exception.)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,81,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,82,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,83, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,84," public static int readLoop(InputStream in,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,85,"                                byte b[],"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,86,"                                int offset,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,87,                                int len)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,88,        throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,89, {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,90,        int firstOffset = offset;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,91,  do {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,92,"   int bytesRead = in.read(b, offset, len);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,93,   if (bytesRead <= 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,94,                break;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,95,   len -= bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,96,   offset += bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,97,  } while (len != 0);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,98,        return offset - firstOffset;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,99, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,100,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,101,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,102,"     * Skips until EOF, returns number of bytes skipped."
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,103,     * @param is
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,104,     *      InputStream to be skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,105,     * @return
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,106,     *      number of bytes skipped in fact.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,107,     * @throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,108,     *      if IOException occurs. It doesn't contain EOFException.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,109,     * @throws NullPointerException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,110,     *      if the param 'is' equals null.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,111,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,112,    public static long skipUntilEOF(InputStream is) throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,113,        if(is == null)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,114,            throw new NullPointerException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,115,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,116,        long bytes = 0;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,117,        while(true){
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,118,"            long r = skipPersistent(is, SKIP_FRAGMENT_SIZE);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,119,            bytes += r;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,120,            if(r < SKIP_FRAGMENT_SIZE)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,121,                return bytes;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,122,        }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,123,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,124,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,125,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,126,"     * Skips requested number of bytes,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,127,     * throws EOFException if there is too few bytes in the stream.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,128,     * @param is
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,129,     *      InputStream to be skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,130,     * @param skippedBytes
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,131,"     *      number of bytes to skip. if skippedBytes <= zero, do nothing."
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,132,     * @throws EOFException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,133,     *      if EOF meets before requested number of bytes are skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,134,     * @throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,135,     *      if IOException occurs. It doesn't contain EOFException.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,136,     * @throws NullPointerException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,137,     *      if the param 'is' equals null.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,138,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,139,"    public static void skipFully(InputStream is, long skippedBytes)"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,140,    throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,141,        if(is == null)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,142,            throw new NullPointerException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,143,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,144,        if(skippedBytes <= 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,145,            return;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,146,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,147,"        long bytes = skipPersistent(is, skippedBytes);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,148,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,149,        if(bytes < skippedBytes)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,150,            throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,151,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,152,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,153,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,154,     * Tries harder to skip the requested number of bytes.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,155,     * <p>
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,156,"     * Note that even if the method fails to skip the requested number of bytes,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,157,"     * it will not throw an exception. If this happens, the caller can be sure"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,158,     * that end-of-stream has been reached.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,159,     *
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,160,     * @param in byte stream
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,161,     * @param bytesToSkip the number of bytes to skip
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,162,     * @return The number of bytes skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,163,     * @throws IOException if reading from the stream fails
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,164,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,165,"    public static final long skipPersistent(InputStream in, long bytesToSkip)"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,166,    throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,167,        long skipped = 0;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,168,        while (skipped < bytesToSkip) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,169,            long skippedNow = in.skip(bytesToSkip - skipped);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,170,            if (skippedNow == 0) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,171,                if (in.read() == -1) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,172,"                    // EOF, return what we have and leave it up to caller to"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,173,                    // decide what to do about it.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,174,                    break;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,175,                } else {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,176,                    skippedNow = 1; // Added to count below.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,177,                }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,178,            }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,179,            skipped += skippedNow;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,180,        }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,181,        return skipped;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,182,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,183,}
java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java,204,    size = (w > 0 ? w : 15);
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,42,        /*
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,43,        ** public statics from 3.0 version of java.sql.ParameterMetaData
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,44,        */
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,45,        public static final int PARAMETER_NO_NULLS = ParameterMetaData.parameterNoNulls;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,46,        public static final int PARAMETER_NULLABLE = ParameterMetaData.parameterNullable;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,47,        public static final int PARAMETER_NULLABLE_UNKNOWN = ParameterMetaData.parameterNullableUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,48,        public static final int PARAMETER_MODE_UNKNOWN = ParameterMetaData.parameterModeUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,49,        public static final int PARAMETER_MODE_IN = ParameterMetaData.parameterModeIn;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,50,        public static final int PARAMETER_MODE_IN_OUT = ParameterMetaData.parameterModeInOut;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,51,        public static final int PARAMETER_MODE_OUT = ParameterMetaData.parameterModeOut;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,17,   See the License for the specific language governing permissions and
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1476,    public void testGetColumnsReadOnly() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1490,    public void testGetColumnsModify() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1749,    throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1801,    public static void crossCheckGetColumnRowAndResultSetMetaData(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1803,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1832,        else if (dmdColumnType == Types.JAVA_OBJECT && usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1045,            pingServer(5); // Wait for the server to come up in a reasonable time....
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1176,     * @param iterations How many times to try pinging the server to see if it is running.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1177,     * Sleeps <CODE>SLEEP_TIME_MILLIS</CODE> between tries.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1181,    private void pingServer( int iterations )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1185,"        ping( new NetworkServerControl(), iterations );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1189,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1190,"  private void ping( NetworkServerControl controller, int iterations )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1208,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1209,"        System.out.println( ""Server did not come up: "" + finalException.getMessage() );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1,/*
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,91,        TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(UDTTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,197,"             ""select getCurrencyCode( totalPrice ), getAmount( totalPrice ), getTimeInstant( totalPrice ) from orders"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,200,"                 { ""USD"" ,         ""9.99000"" ,        ""2009-10-16 14:24:43.0"" },"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,516,"  dropSchemaObject( conn, TABLE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,530,"  dropSchemaObject( conn, FUNCTION, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,544,"  dropSchemaObject( conn, PROCEDURE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,556," protected static void dropSchemaObject( Connection conn, String genus, String objectName )"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,561,"   ps = prepare( conn, ""drop "" + genus + "" "" + objectName );"
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,3,   Derby - Class org.apache.derby.shared.common.io.DynamicByteArrayOutputStream
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,22,package org.apache.derby.shared.common.io;
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,23,
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,24,import org.apache.derby.shared.common.sanity.SanityManager;
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,3,   Derby - Class org.apache.derby.shared.common.io.InputStreamUtil
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,22,package org.apache.derby.shared.common.io;
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,31,public class InputStreamUtil {
java/client/org/apache/derby/client/net/Request.java,26,import org.apache.derby.shared.common.io.DynamicByteArrayOutputStream;
java/client/org/apache/derby/client/net/Request.java,28,import org.apache.derby.shared.common.sanity.SanityManager;
java/client/org/apache/derby/client/net/Request.java,1625,        // should not be called if val is null
java/client/org/apache/derby/client/net/Request.java,1626,        if ( val == null )
java/client/org/apache/derby/client/net/Request.java,1627,        {
java/client/org/apache/derby/client/net/Request.java,1628,"            SanityManager.THROWASSERT( ""UDT is null"" );"
java/client/org/apache/derby/client/net/Request.java,1629,        }
java/client/org/apache/derby/client/net/Request.java,1630,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends org.apache.derby.shared.common.io.DynamicByteArrayOutputStream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,37,{
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38, public DynamicByteArrayOutputStream() { super(); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,39, public DynamicByteArrayOutputStream(int size) { super( size ); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40, public DynamicByteArrayOutputStream(byte[] data) { super( data ); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41, public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) { super( toBeCloned ); }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,31,public final class InputStreamUtil extends org.apache.derby.shared.common.io.InputStreamUtil
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,32,{}
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7527,"  * @param elemNum column number we are returning (in case of result set), or,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,699,"        goodStatement( conn, ""create table t_10_a( a price_09_a )\n"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,708,"             ""\""APP\"".\""PRICE_09_A\"""","
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1106,        if ( val == null )
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1107,        {
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1108,"            SanityManager.THROWASSERT( ""UDT is null"" );"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,297,  @param reuseResult Whether or not to reuse the result row.
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,270,  int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1420,  int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1459,   *  arg8: reuseResult - whether or not the result row can be reused
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1460,"   *      (ie, will it always be the same)"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1461,   *  arg9: doesProjection - does this node do a projection
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1462,   *  arg10: estimated row count
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1463,   *  arg11: estimated cost
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1464,   *  arg12: close method
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1465,   */
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1600,"     ClassName.NoPutResultSet, 10);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3502, int[] mapSourceColumns()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3504,  int[]   mapArray = new int[size()];
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3524,     mapArray[index] = vcn.getSourceColumn().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3539,     mapArray[index] = cr.getSource().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3548,  return mapArray;
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,223,"   constantRestriction, mapRefItem,"
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,503,"    result.setColumn(index + 1, sourceRow.getColumn(projectMapping[index]));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,34,import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,395,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,396,"        final Statement stmt = createStatement(ResultSet.TYPE_FORWARD_ONLY,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,398,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,399,        final ResultSet rs =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,400,"            stmt.executeQuery(""SELECT * FROM "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,403,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,405,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,407,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,410,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,411,"            assertEquals(""Unexpected value in val column"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,413,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,418,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,422,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,432,"    private void verifyBlob(final int expectedVal,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,433,"                            final int expectedSize,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,434,                            final Blob blob)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,441,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,444,"                assertEquals(""Unexpected value in stream at position "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,470,"        println(""Setup of: "" + getName());"
java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java,62,   throws StandardException
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,203,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,204,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,205,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,226,  else
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,227,  {
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,228,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,229,  }
java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java,78,"  lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java,79,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,888,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,889,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,890,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,911,  else
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,912,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,913,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,914,  }
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,110,  /* Get or re-use the row changer.
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,111,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,112,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,113,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,114,   */
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,115,  if (! firstExecute)
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,116,  {
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,117,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,118,  }
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,119,
java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java,46,  *
java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java,47,  *  @exception StandardException Standard Derby error policy.
java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java,50,   throws StandardException
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,65, NoPutResultSet[] subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,87,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,105,
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,106,  StatementContext sc = lcc.getStatementContext();
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,107,"  sc.setTopResultSet(this, (NoPutResultSet[]) null);"
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,108,
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,109,  // Pick up any materialized subqueries
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,110,  subqueryTrackingArray = sc.getSubqueryTrackingArray();
java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java,43,  *
java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java,44,  *  @exception StandardException Standard Derby error policy.
java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java,47,   throws StandardException
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,304,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,305,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,306,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,327,  else
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,328,  {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,329,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,330,  }
java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java,79,  if (!firstExecute)
java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java,80,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,237,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,242,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,252,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,256,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,179,    /**
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,180,     * Reopen the stream.
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,181,     */
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,182,    public void reopen()
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,183,            throws IOException {
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,184,        this.closed = false;
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,185,        reset();
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,186,    }
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,187,
java/shared/org/apache/derby/shared/common/reference/MessageId.java,92,
java/client/org/apache/derby/client/net/NetDatabaseMetaData.java,132,        return supportsSessionDataCaching_;
java/client/org/apache/derby/client/net/NetConnection.java,1301,"        extnam_ = ""derbydnc"" + java.lang.Thread.currentThread().getName();"
java/client/org/apache/derby/client/am/Cursor.java,549,                charsetName_[column - 1]);
java/client/org/apache/derby/client/am/DateTime.java,48,    private static final int timestampRepresentationLength = 26;
java/client/org/apache/derby/client/am/DateTime.java,149,     * Expected character representation is DERBY string representation of a timestamp:
java/client/org/apache/derby/client/am/DateTime.java,150,     * <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
java/client/org/apache/derby/client/am/DateTime.java,162,                                                                     String encoding)
java/client/org/apache/derby/client/am/DateTime.java,166,"        String timestamp = new String(buffer, offset,"
java/client/org/apache/derby/client/am/DateTime.java,167,"                DateTime.timestampRepresentationLength,encoding);"
java/client/org/apache/derby/client/am/DateTime.java,172,         * the parsed microseconds value and use that to set nanos.
java/client/org/apache/derby/client/am/DateTime.java,174,"        int micros = parseTimestampString(timestamp, cal);"
java/client/org/apache/derby/client/am/DateTime.java,176,        ts.setNanos(micros * 1000);
java/client/org/apache/derby/client/am/DateTime.java,181,     * Parse a String of the form <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>
java/client/org/apache/derby/client/am/DateTime.java,185,     * @param cal Calendar into which to store the parsed fields.  Should
java/client/org/apache/derby/client/am/DateTime.java,186,     *  not be null.
java/client/org/apache/derby/client/am/DateTime.java,188,     * @return The microseconds field as parsed from the timestamp string.
java/client/org/apache/derby/client/am/DateTime.java,191,     *  create a java.sql.Timestamp with microsecond precision).
java/client/org/apache/derby/client/am/DateTime.java,194,        Calendar cal)
java/client/org/apache/derby/client/am/DateTime.java,224,        int micros =
java/client/org/apache/derby/client/am/DateTime.java,225,                100000 * (((int) timestamp.charAt(20)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,226,                10000 * (((int) timestamp.charAt(21)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,227,                1000 * (((int) timestamp.charAt(22)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,228,                100 * (((int) timestamp.charAt(23)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,229,                10 * (((int) timestamp.charAt(24)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,230,                (((int) timestamp.charAt(25)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,231,
java/client/org/apache/derby/client/am/DateTime.java,232,"        /* The ""ffffff"" that we parsed is microseconds.  In order to"
java/client/org/apache/derby/client/am/DateTime.java,234,         * we have to divide by 1000.
java/client/org/apache/derby/client/am/DateTime.java,236,"        cal.set(Calendar.MILLISECOND, micros / 1000);"
java/client/org/apache/derby/client/am/DateTime.java,237,        return micros;
java/client/org/apache/derby/client/am/DateTime.java,331,     * java.sql.Timestamp is converted to a character representation which is in DERBY string
java/client/org/apache/derby/client/am/DateTime.java,332,     * representation of a timestamp: <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
java/client/org/apache/derby/client/am/DateTime.java,333,     * and then converted to bytes using UTF8 encoding
java/client/org/apache/derby/client/am/DateTime.java,337,     * @return DateTime.timestampRepresentationLength. This is the fixed
java/client/org/apache/derby/client/am/DateTime.java,338,"     * length in bytes, taken to represent the timestamp value"
java/client/org/apache/derby/client/am/DateTime.java,344,                                                      java.sql.Timestamp timestamp)
java/client/org/apache/derby/client/am/DateTime.java,359,        char[] timestampChars = new char[DateTime.timestampRepresentationLength];
java/client/org/apache/derby/client/am/DateTime.java,391,        byte[] timestampBytes = (new String(timestampChars)).getBytes(Typdef.UTF8ENCODING);
java/client/org/apache/derby/client/am/DateTime.java,392,"        System.arraycopy(timestampBytes, 0, buffer, offset, DateTime.timestampRepresentationLength);"
java/client/org/apache/derby/client/am/DateTime.java,394,        return DateTime.timestampRepresentationLength;
java/client/org/apache/derby/client/am/DateTime.java,507,     * Expected character representation is DERBY string representation of a timestamp:
java/client/org/apache/derby/client/am/DateTime.java,508,     * <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
java/client/org/apache/derby/client/am/DateTime.java,550,     * Expected character representation is DERBY string representation of a timestamp:
java/client/org/apache/derby/client/am/DateTime.java,551,     * <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
java/client/org/apache/derby/client/am/DateTime.java,590,"        parseTimestampString(timestamp, cal);"
java/client/org/apache/derby/client/am/DateTime.java,715,     * java.sql.Date is converted to character representation that is in DERBY string
java/client/org/apache/derby/client/am/DateTime.java,716,     * representation of a timestamp:<code>yyyy-mm-dd-hh.mm.ss.ffffff</code> and then
java/client/org/apache/derby/client/am/DateTime.java,717,     * converted to bytes using UTF8 encoding and written out to the buffer
java/client/org/apache/derby/client/am/DateTime.java,718,     * @param buffer
java/client/org/apache/derby/client/am/DateTime.java,719,     * @param offset offset in buffer to start writing to
java/client/org/apache/derby/client/am/DateTime.java,720,     * @param date date value
java/client/org/apache/derby/client/am/DateTime.java,721,     * @return DateTime.timestampRepresentationLength. This is the fixed length
java/client/org/apache/derby/client/am/DateTime.java,722,"     * in bytes, taken to represent the timestamp value."
java/client/org/apache/derby/client/am/DateTime.java,723,     * @throws SqlException
java/client/org/apache/derby/client/am/DateTime.java,724,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,726,"    public static final int dateToTimestampBytes(byte[] buffer,"
java/client/org/apache/derby/client/am/DateTime.java,727,"                                                 int offset,"
java/client/org/apache/derby/client/am/DateTime.java,728,                                                 java.sql.Date date)
java/client/org/apache/derby/client/am/DateTime.java,729,"    throws SqlException, UnsupportedEncodingException {"
java/client/org/apache/derby/client/am/DateTime.java,730,        int year = date.getYear() + 1900;
java/client/org/apache/derby/client/am/DateTime.java,731,        if (year > 9999) {
java/client/org/apache/derby/client/am/DateTime.java,732,"            throw new SqlException(null,"
java/client/org/apache/derby/client/am/DateTime.java,733,"                new ClientMessageId(SQLState.YEAR_EXCEEDS_MAXIMUM),"
java/client/org/apache/derby/client/am/DateTime.java,734,"                new Integer(year), ""9999"");"
java/client/org/apache/derby/client/am/DateTime.java,735,        }
java/client/org/apache/derby/client/am/DateTime.java,736,        int month = date.getMonth() + 1;
java/client/org/apache/derby/client/am/DateTime.java,737,        int day = date.getDate();
java/client/org/apache/derby/client/am/DateTime.java,738,
java/client/org/apache/derby/client/am/DateTime.java,739,        char[] timestampChars = new char[DateTime.timestampRepresentationLength];
java/client/org/apache/derby/client/am/DateTime.java,740,        int zeroBase = (int) '0';
java/client/org/apache/derby/client/am/DateTime.java,741,        timestampChars[0] = (char) (year / 1000 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,742,        timestampChars[1] = (char) ((year % 1000) / 100 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,743,        timestampChars[2] = (char) ((year % 100) / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,744,        timestampChars[3] = (char) (year % 10 + +zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,745,        timestampChars[4] = '-';
java/client/org/apache/derby/client/am/DateTime.java,746,        timestampChars[5] = (char) (month / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,747,        timestampChars[6] = (char) (month % 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,748,        timestampChars[7] = '-';
java/client/org/apache/derby/client/am/DateTime.java,749,        timestampChars[8] = (char) (day / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,750,        timestampChars[9] = (char) (day % 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,751,        timestampChars[10] = '-';
java/client/org/apache/derby/client/am/DateTime.java,752,        timestampChars[11] = '0';
java/client/org/apache/derby/client/am/DateTime.java,753,        timestampChars[12] = '0';
java/client/org/apache/derby/client/am/DateTime.java,754,        timestampChars[13] = '.';
java/client/org/apache/derby/client/am/DateTime.java,755,        timestampChars[14] = '0';
java/client/org/apache/derby/client/am/DateTime.java,756,        timestampChars[15] = '0';
java/client/org/apache/derby/client/am/DateTime.java,757,        timestampChars[16] = '.';
java/client/org/apache/derby/client/am/DateTime.java,758,        timestampChars[17] = '0';
java/client/org/apache/derby/client/am/DateTime.java,759,        timestampChars[18] = '0';
java/client/org/apache/derby/client/am/DateTime.java,760,        timestampChars[19] = '.';
java/client/org/apache/derby/client/am/DateTime.java,761,        timestampChars[20] = '0';
java/client/org/apache/derby/client/am/DateTime.java,762,        timestampChars[21] = '0';
java/client/org/apache/derby/client/am/DateTime.java,763,        timestampChars[22] = '0';
java/client/org/apache/derby/client/am/DateTime.java,764,        timestampChars[23] = '0';
java/client/org/apache/derby/client/am/DateTime.java,765,        timestampChars[24] = '0';
java/client/org/apache/derby/client/am/DateTime.java,766,        timestampChars[25] = '0';
java/client/org/apache/derby/client/am/DateTime.java,767,
java/client/org/apache/derby/client/am/DateTime.java,768,        // Network server expects to read the timestamp parameter value bytes with
java/client/org/apache/derby/client/am/DateTime.java,769,        // UTF-8 encoding.  Reference - DERBY-1127
java/client/org/apache/derby/client/am/DateTime.java,770,        // see DRDAConnThread.readAndSetParams
java/client/org/apache/derby/client/am/DateTime.java,771,        byte[] timestampBytes = (new String(timestampChars)).getBytes(Typdef.UTF8ENCODING);
java/client/org/apache/derby/client/am/DateTime.java,772,"        System.arraycopy(timestampBytes, 0, buffer, offset, DateTime.timestampRepresentationLength);"
java/client/org/apache/derby/client/am/DateTime.java,773,
java/client/org/apache/derby/client/am/DateTime.java,774,        return DateTime.timestampRepresentationLength;
java/client/org/apache/derby/client/am/DateTime.java,777,    /**
java/client/org/apache/derby/client/am/DateTime.java,778,     * java.sql.Time is converted to a character representation that is in DERBY string representation of a timestamp:
java/client/org/apache/derby/client/am/DateTime.java,779,     * <code>yyyy-mm-dd-hh.mm.ss.ffffff</code> and converted to bytes using UTF8 encoding
java/client/org/apache/derby/client/am/DateTime.java,780,     * @param buffer
java/client/org/apache/derby/client/am/DateTime.java,781,     * @param offset offset in buffer to start writing to
java/client/org/apache/derby/client/am/DateTime.java,782,     * @param time time value
java/client/org/apache/derby/client/am/DateTime.java,783,     * @return DateTime.timestampRepresentationLength which is the fixed length
java/client/org/apache/derby/client/am/DateTime.java,784,     * taken up by the conversion of time to timestamp in bytes
java/client/org/apache/derby/client/am/DateTime.java,785,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,786,     */
java/client/org/apache/derby/client/am/DateTime.java,787,"    public static final int timeToTimestampBytes(byte[] buffer,"
java/client/org/apache/derby/client/am/DateTime.java,788,"                                                 int offset,"
java/client/org/apache/derby/client/am/DateTime.java,789,                                                 java.sql.Time time)
java/client/org/apache/derby/client/am/DateTime.java,790,    throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,791,        int hour = time.getHours();
java/client/org/apache/derby/client/am/DateTime.java,792,        int minute = time.getMinutes();
java/client/org/apache/derby/client/am/DateTime.java,793,        int second = time.getSeconds();
java/client/org/apache/derby/client/am/DateTime.java,794,
java/client/org/apache/derby/client/am/DateTime.java,795,        char[] timestampChars = new char[DateTime.timestampRepresentationLength];
java/client/org/apache/derby/client/am/DateTime.java,796,        int zeroBase = (int) '0';
java/client/org/apache/derby/client/am/DateTime.java,797,        timestampChars[0] = '1';
java/client/org/apache/derby/client/am/DateTime.java,798,        timestampChars[1] = '9';
java/client/org/apache/derby/client/am/DateTime.java,799,        timestampChars[2] = '0';
java/client/org/apache/derby/client/am/DateTime.java,800,        timestampChars[3] = '0';
java/client/org/apache/derby/client/am/DateTime.java,801,        timestampChars[4] = '-';
java/client/org/apache/derby/client/am/DateTime.java,802,        timestampChars[5] = '0';
java/client/org/apache/derby/client/am/DateTime.java,803,        timestampChars[6] = '1';
java/client/org/apache/derby/client/am/DateTime.java,804,        timestampChars[7] = '-';
java/client/org/apache/derby/client/am/DateTime.java,805,        timestampChars[8] = '0';
java/client/org/apache/derby/client/am/DateTime.java,806,        timestampChars[9] = '1';
java/client/org/apache/derby/client/am/DateTime.java,807,        timestampChars[10] = '-';
java/client/org/apache/derby/client/am/DateTime.java,808,        timestampChars[11] = (char) (hour / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,809,        timestampChars[12] = (char) (hour % 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,810,        timestampChars[13] = '.';
java/client/org/apache/derby/client/am/DateTime.java,811,        timestampChars[14] = (char) (minute / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,812,        timestampChars[15] = (char) (minute % 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,813,        timestampChars[16] = '.';
java/client/org/apache/derby/client/am/DateTime.java,814,        timestampChars[17] = (char) (second / 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,815,        timestampChars[18] = (char) (second % 10 + zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,816,        timestampChars[19] = '.';
java/client/org/apache/derby/client/am/DateTime.java,817,        timestampChars[20] = '0';
java/client/org/apache/derby/client/am/DateTime.java,818,        timestampChars[21] = '0';
java/client/org/apache/derby/client/am/DateTime.java,819,        timestampChars[22] = '0';
java/client/org/apache/derby/client/am/DateTime.java,820,        timestampChars[23] = '0';
java/client/org/apache/derby/client/am/DateTime.java,821,        timestampChars[24] = '0';
java/client/org/apache/derby/client/am/DateTime.java,822,        timestampChars[25] = '0';
java/client/org/apache/derby/client/am/DateTime.java,823,
java/client/org/apache/derby/client/am/DateTime.java,824,        // Network server expects to read the timestamp parameter value bytes with
java/client/org/apache/derby/client/am/DateTime.java,825,        // UTF-8 encoding.  Reference - DERBY-1127
java/client/org/apache/derby/client/am/DateTime.java,826,        // see DRDAConnThread.readAndSetParams for TIMESTAMP
java/client/org/apache/derby/client/am/DateTime.java,827,        byte[] timestampBytes = (new String(timestampChars)).getBytes(Typdef.UTF8ENCODING);
java/client/org/apache/derby/client/am/DateTime.java,828,"        System.arraycopy(timestampBytes, 0, buffer, offset, DateTime.timestampRepresentationLength);"
java/client/org/apache/derby/client/am/DateTime.java,829,
java/client/org/apache/derby/client/am/DateTime.java,830,        return DateTime.timestampRepresentationLength;
java/client/org/apache/derby/client/am/DateTime.java,831,    }
java/client/org/apache/derby/client/net/NetStatementRequest.java,1263,"                    // lid: PROTOCOL_TYPE_NTIME, length overrid: 26"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1266,                    lidAndLengths[i][1] = 26;
java/client/org/apache/derby/client/net/Request.java,1557,            ensureLength(offset_ + 26);
java/client/org/apache/derby/client/net/Request.java,1558,"            org.apache.derby.client.am.DateTime.timestampToTimestampBytes(bytes_, offset_, timestamp);"
java/client/org/apache/derby/client/net/Request.java,1559,            offset_ += 26;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4651,    String paramVal = reader.readStringData(26).trim();  //parameter may be char value
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7709,     // up to or truncate it into 26 chars
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7713,     if (tsLen < 26)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7715,      for (int i = 0; i < 26-tsLen; i++)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7718,     else if (tsLen > 26)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7719,"      ts2 = ts2.substring(0,26);"
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,182,    outlen[0] = 26;
java/engine/org/apache/derby/iapi/types/TypeId.java,120,        public static final int TIMESTAMP_MAXWIDTH      = 26; // yyyy-mm-dd hh:mm:ss.ffffff
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,888,                     // DERBY-2602 Client TIMESTAMP is truncated
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,889,                        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,890,"                            assertEquals(""2004-02-14 17:14:24.097625551"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,891,                        else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,892,"                            assertEquals(""2004-02-14 17:14:24.097625"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3616,         //DERBY-2602 Client TIMESTAMP is truncated
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3618,                if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3619,"                    assertEquals(""2004-03-12 21:14:24.938222433"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3620,                else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3621,"                    assertEquals(""2004-03-12 21:14:24.938222"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3623,                if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3624,"                    assertEquals(""2004-04-12 04:25:26.462983731"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3625,                else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3626,"                    assertEquals(""2004-04-12 04:25:26.462983"", val.toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3627,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1565,"                assertSQLState(""XN017"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1566,                // rollback the bad insert.
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1567,                rollback();
java/client/org/apache/derby/client/ClientXAConnection.java,88,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,1864,            // DERBY-2532
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,1865,            // Network Server does not think this is worth an exception.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,1866,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,1867,"                fail(""expected SQLException on "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,1868,"                    ""closed XAConnection.getXAResource"");"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,853,    tableNumber = ft.getTableNumber();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,854,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,855,    {
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,856,"     SanityManager.ASSERT(tableNumber != -1,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,857,"      ""tableNumber not expected to be -1"");"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,858,    }
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,869,    ResultColumn ftRC =
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,870,     ft.getResultColumns().getResultColumn(columnName);
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,872,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,873,    {
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,874,"     SanityManager.ASSERT(ftRC != null,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,875,"      ""Failed to find column '"" + columnName + ""' in the "" +"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,876,"      ""RCL for '"" + ft.getTableName() + ""'."");"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2376,   ** Check type compatability.  We want to make sure that
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2377,   ** the types are assignable in either direction
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2378,   ** and they are comparable.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2381,   if (
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2382,"    !thisExpr.getTypeCompiler().storable(otherTypeId, cf) &&"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2383,"    !otherExpr.getTypeCompiler().storable(thisTypeId, cf))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,324,     * <li>Add a new bad implicit cast to test_06_implicitCasts()</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,498,"     * Test that values are implicitly cast to boolean according to the rules in the SQL Standard,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,499,"     * part 2, section 6.12 (<cast specification>), general rule 20. Other than booleans themselves,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,500,     * the only legal casts are from string types to boolean. The following transformations are applied
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,501,     * to the strings:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,502,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,503,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,504,     * <ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,505,     * <li>Trim whitespace off the string</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,506,"     * <li>Then apply the rules in section 5.3 (<literal>). This means that the trimmed string must be 'TRUE', 'FALSE', or 'UNKNOWN', regardless of case.</li>"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,507,"     * <li>Otherwise, raise an exception.</li>"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,508,     * </ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,509,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,510,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,511,"     * See <a href=""https://issues.apache.org/jira/browse/DERBY-4658"">DERBY-4658</a>."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,514,    public void test_06_implicitCasts() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,518,"        vetGoodImplicitCastFromString( conn, ""'true'"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,519,"        vetGoodImplicitCastFromString( conn, ""'false'"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,520,"        vetGoodImplicitCastFromString( conn, ""'TRUE'"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,521,"        vetGoodImplicitCastFromString( conn, ""'FALSE'"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,522,"        vetGoodImplicitCastFromString( conn, ""' true '"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,523,"        vetGoodImplicitCastFromString( conn, ""' false '"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,524,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,525,"        vetGoodImplicitCastFromString( conn, ""cast (null as char( 10 ) )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,526,"        vetGoodImplicitCastFromString( conn, ""cast (null as clob )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,527,"        vetGoodImplicitCastFromString( conn, ""cast (null as long varchar )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,528,"        vetGoodImplicitCastFromString( conn, ""cast (null as varchar( 10 ) )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,529,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,530,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as char( 10 ) )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,531,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as clob )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,532,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as long varchar)"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,533,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as varchar( 10 ) )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,534,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,535,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as char( 10 ) )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,536,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as clob )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,537,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as long varchar)"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,538,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as varchar( 10 ) )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,539,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,540,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""'neither'"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,541,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,542,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as char(10))"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,543,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as clob)"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,544,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as long varchar)"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,545,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as varchar(10))"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,546,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,549,        // char type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,551,        // clob type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,557,        // long varchar type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,563,        // varchar type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,567,"    private void vetGoodImplicitCastFromString( Connection conn, String text, Boolean booleanValue ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,568,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,569,        String expectedValue = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,570,        if ( booleanValue != null ) { expectedValue = booleanValue.toString(); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,571,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,572,        assertResults
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,573,            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,574,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,575,"             makeImplicitCast( text ),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,576,             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,577,             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,578,"                 { expectedValue },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,579,"             },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,580,             false
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,581,             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,582,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,583,    private String makeImplicitCast( String text )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,584,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,585,        return
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,586,"            ""select isindex from sys.sysconglomerates where conglomeratename = 'foo'\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,587,"            ""union\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,588,"            ""values ( "" + text + "" )\n"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,589,    }
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,551,  /* The operand for this aggregate node was initialized at bind
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,552,   * time. Between then and now it's possible that certain changes
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,553,   * have been made to the query tree which affect this operand. In
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,554,"   * particular, if the operand was pointing to a result column in"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,555,   * a JoinNode and then that JoinNode was flattened during pre-
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,556,"   * processing, all of the references to that JoinNode--including"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,557,   * this aggregate's operand--need to be updated to reflect the
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,558,   * fact that the Join Node no longer exists. So check to see if
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,559,"   * the operand is a column reference, and if so, make a call to"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,560,   * remap it to its underlying expression. If nothing has happened
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,561,   * then this will be a no-op; but if something has changed to void
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,562,"   * out the result column to which the operand points, the result"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,563,"   * column will be marked ""redundant"" and the following call should"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,564,   * remap as appropriate. DERBY-3880.
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,565,   */
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,566,  if (operand instanceof ColumnReference)
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,567,  {
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,568,   ((ColumnReference)operand).remapColumnReferencesToExpressions();
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,569,  }
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,570,
java/engine/org/apache/derby/impl/sql/compile/FromList.java,717,          GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/FromList.java,760,              gbl);
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,494,       GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,1431,       GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1425,       GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1090,           groupByList);
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,890,                    columnNumberBeforeFlattening);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,328,"    public ResultColumn getResultColumn(int tableNumber, int columnNumber)"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,350,"                            // Found matching (t,c) within this top resultColumn"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,351,                            resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,352,                            return resultColumn;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,353,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java,307,            if ((new Throwable().getStackTrace().toString()).indexOf(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java,311,                    new Throwable().getStackTrace().length - 1;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java,314,                readerStackLevel = new Throwable().getStackTrace().length;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,328,"     * cf. DERBY-4695, we can remove this parameter."
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,355,                        if (ft.getTableNumber() == tableNumber &&
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,356,                                rc.getColumnPosition() == columnNumber) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,357,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,358,"                            // Found matching (t,c) within this top"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,359,                            // resultColumn. Now do sanity check that column
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,360,                            // name is correct. Remove when DERBY-4695 is
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,361,                            // fixed.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,362,                            if (columnName.equals(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,363,                                        vcn.getSourceColumn().getName())) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,364,                                resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,365,                                return resultColumn;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,366,                            } else {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,367,                                if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,368,                                    SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,369,"                                        false,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,370,"                                        ""wrong (tn,cn) for column "" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,371,                                        columnName +
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,372,"                                        "" found: this pair points to "" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,373,                                        vcn.getSourceColumn().getName());
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,375,"                                // Fall back on column name based lookup,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,376,                                // cf. DERBY-4679. See ColumnReference#
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,377,                                // remapColumnReferencesToExpressions
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,378,                                return null;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,392,                            resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,393,                            return resultColumn;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1893,        ResultSet rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1894,            s.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1895,"                ""select distinct t1.ITEM_ID, t1.state_id, t1.JZ_DISCRIMINATOR from "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1896,"                ""((((((select * from ABSTRACT_INSTANCE z1 where z1.JZ_DISCRIMINATOR = 238) t1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1897,"                ""      left outer join LAB_RESOURCE_OPERATINGSYSTEM j1 on (t1.ITEM_ID = j1.JZ_PARENT_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1898,"                ""     left outer join ABSTRACT_INSTANCE t2 on (j1.ITEM_ID = t2.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1899,"                ""    left outer join OPERATING_SYSTEM_SOFTWARE_INSTALL j2 on (t2.ITEM_ID = j2.JZ_PARENT_ID))"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1900,"                ""   left outer join ABSTRACT_INSTANCE t3 on (j2.ITEM_ID = t3.ITEM_ID) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1901,"                ""  inner join FAMILY t5 on (t2.FAMILY_ITEM_ID = t5.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1902,"                "" inner join FAMILY t7 on (t1.FAMILY_ITEM_ID = t7.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1903,"                ""where (t3.FAMILY_ITEM_ID IN('_5VetVWTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1904,"                ""      (t5.ROOT_ITEM_ID = '_5ZDlwWTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1905,"                ""      (t7.ROOT_ITEM_ID ='_5nN9mmTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1906,"                ""      (t1.VISIBILITY = 0))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1096,"        doXATempTableD4731Work(true, XATestUtil.getXid(997, 9, 49));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1101,     * DERBY-XXXX Temp tables with XA transactions
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1109,    public void xtestXATempTableDXXXX_Assert()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1112,"          doXATempTableD4731Work(false, XATestUtil.getXid(998, 10, 50));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1119,     * Will throw an error in network server when attempt is made to
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1120,     * access the global temporary table after the end and commit.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1126,    public void xtestXATempTableD4743()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1188,            // is temp table empty after the commit?
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1189,"            rs = s.executeQuery(""SELECT count(*) FROM SESSION.t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1190,"            JDBC.assertFullResultSet(rs, new String[][] {{""0""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1191,            rs.close();
java/client/org/apache/derby/client/net/NetConnection.java,307,        if(!isConnectionNull())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,51,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,52,            return TestConfiguration.defaultSuite(ConnectTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,140,}
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2119,        DataSource jds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2120,        jds.setLoginTimeout(10);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2121,        Connection conn = jds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2122,"        CallableStatement cs = conn.prepareCall(""CALL TESTROUTINE.SLEEP(20000)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2123,        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2124,        //rollback to make sure our connection is ok.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2125,        conn.rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2126,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2127,        ConnectionPoolDataSource cpds = J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2128,        cpds.setLoginTimeout(10);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2129,        PooledConnection pc = cpds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2130,        conn = pc.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2131,"        cs = conn.prepareCall(""CALL TESTROUTINE.SLEEP(20000)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2132,        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2133,        //rollback to make sure our connection is ok.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2134,        conn.rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2135,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2136,        // Close the logical connection and get a new one.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2137,        // This will invoke reset which also needs its timeout reset
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2138,        conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2139,        conn = pc.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2140,"        cs = conn.prepareCall(""CALL TESTROUTINE.SLEEP(20000)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2141,        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2142,        //rollback to make sure our connection is ok.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2143,        conn.rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2144,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2145,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2146,        XADataSource xads = J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2147,        xads.setLoginTimeout(10);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2148,        XAConnection xac = xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2149,        conn = pc.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2150,"        cs = conn.prepareCall(""CALL TESTROUTINE.SLEEP(20000)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2151,        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2152,        //rollback to make sure our connection is ok.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2153,        conn.rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2154,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2155,        // Close the logical connection and get a new one.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2156,        // This will invoke reset which also needs its timeout reset
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2157,        conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2158,        conn = pc.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2159,"        cs = conn.prepareCall(""CALL TESTROUTINE.SLEEP(20000)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2160,        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2161,        //rollback to make sure our connection is ok.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2162,        conn.rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2163,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,159,        DriverManager.setLoginTimeout(10);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,160,        //System.out.println(url);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,162,"            Class.forName(""org.apache.derby.jdbc.ClientDriver"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,163,        } catch (ClassNotFoundException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,164,            fail(e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,166,        Connection conn = DriverManager.getConnection(url);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,167,        TestRoutines.installRoutines(conn);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,168,"        CallableStatement cs = conn.prepareCall(""CALL TESTROUTINE.SLEEP(20000)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,169,        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,170,        //rollback to make sure our connection is ok.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,171,        conn.rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConnectTest.java,172,    }
java/client/org/apache/derby/client/net/EncodedInputStream.java,215,    protected void finalize() throws IOException {
java/client/org/apache/derby/client/net/EncodedInputStream.java,216,  close();
java/client/org/apache/derby/client/net/EncodedInputStream.java,217,    }
java/client/org/apache/derby/client/net/EncodedInputStream.java,218,
java/client/org/apache/derby/client/net/EncodedInputStream.java,219,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,260, /**
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,261,"  * This method determines if (1) the query is a LOJ, and (2) if the LOJ is a candidate for"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,262,"  * reordering (i.e., linearization).  The condition for LOJ linearization is:"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,263,"  * 1. only LOJ in the fromList, i.e., no INNER, no FULL JOINs, no ROJs"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,264,"  * 2. ON clause must be equality join between left and right operands and in CNF (i.e., AND is allowed)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,265,  */
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,290,  // This is a very simple LOJ of base tables. Do nothing.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,295,"  // Recursively check if we can reordering LOJ, and build the table"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,303,  {// left operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,318,  {// right operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,322,  // It is much easier to do LOJ reordering if there is no ROJ.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,332,  // Build the data structure for testing/doing LOJ reordering.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,333,  // Fill in the table references on row-preserving and null-producing sides.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,334,  // It may be possible that either operand is a complex view.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,335,  JBitSet    NPReferencedTableMap; // Null-producing
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,336,  JBitSet    RPReferencedTableMap; // Row-preserving
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,346,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,347,"  // Check if the predicate is equality predicate in CNF (i.e., AND only)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,348,  // and left/right column references must come from either operand.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,349,"  // That is, we don't allow:"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,350,  // 1. A=A
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,351,  // 2. 1=1
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,352,  // 3. B=C where both B and C are either from left or right operand.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,353,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,354,"  // we probably need to make the joinClause ""left-deep"" so that we can"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,355,  // walk it easier.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,356,  BinaryRelationalOperatorNode equals;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,357,  ValueNode leftCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,358,  ValueNode rightCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,359,  AndNode   and;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,360,  ValueNode left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,361,  ValueNode vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,362,  while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,364,   and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,365,   left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,367,"   // Make sure that this is an equijoin of the form ""C = D"" where C"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,368,   // and D references tables from both left and right operands.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,369,   if (left instanceof RelationalOperator &&
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,370,    ((ValueNode)left).isBinaryEqualsOperatorNode())
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,371,   {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,372,    equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,373,    leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,374,    rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,376,    if (!( leftCol instanceof ColumnReference && rightCol instanceof ColumnReference))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,377,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,379,    boolean refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,380,    boolean leftOperandCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,382,    if (RPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,383,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,384,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,385,     leftOperandCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,386,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,387,    else if (NPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,388,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,389,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,390,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,392,    if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,393,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,395,    refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,396,    if (leftOperandCheck == false && RPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,397,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,398,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,399,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,400,    else if (leftOperandCheck == true && NPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,401,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,402,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,403,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,405,    if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,406,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,407,   }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,408,   else return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,410,   vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,411,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,413,  // Check if the logical right resultset is a composite inner and as such
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,414,  // that this current LOJ can be pushed through it.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,415,  boolean       push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,416,  // logical right operand is another LOJ... so we may be able to push the
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,417,  // join
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,418,  if (logicalRightResultSet instanceof HalfOuterJoinNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,419,  {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,420,   // get the Null-producing operand of the child
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,421,   JBitSet  logicalNPRefTableMap = ((HalfOuterJoinNode)logicalRightResultSet).LOJgetNPReferencedTables(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,422,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,423,   // does the current LOJ join predicate reference
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,424,"   // logicalNPRefTableMap?  If not, we can push the current"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,425,   // join.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,426,   vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,427,   push = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,428,   while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,429,   {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,430,    and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,431,    left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,432,    equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,433,    leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,434,    rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,435,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,436,    if (logicalNPRefTableMap.get(((ColumnReference)leftCol).getTableNumber()) ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,437,     logicalNPRefTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,438,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,439,     push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,440,     break;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,441,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,443,    vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,444,   }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,445,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,447,  // Push the current LOJ into the next level
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,448,  if (push)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,449,  {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,450,"   // For safety, check the JoinNode data members: they should null or"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,451,   // empty list before we proceed.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,452,   if (super.subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,453,    ((JoinNode)logicalRightResultSet).subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,454,    super.joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,455,    ((JoinNode)logicalRightResultSet).joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,456,    super.usingClause != null ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,457,    ((JoinNode)logicalRightResultSet).usingClause != null)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,458,    return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,459,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,460,   anyChange = true; // we are reordering the LOJs.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,461,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,462,   ResultSetNode tmp = logicalLeftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,463,"   ResultSetNode LChild, RChild;"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,464,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,465,   //            this LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,466,   //            /      \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,467,   //  logicalLeftRS   LogicalRightRS
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,468,   //                   /     \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,469,   //                LChild  RChild
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,470,   // becomes
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,471,   //
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,472,   //               this LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,473,   //               /      \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,474,   //     LogicalRightRS   RChild
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,475,   //           /     \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,476,   // logicalLeftRS   LChild  <<<  we need to be careful about this order
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,477,"   //                              as the ""LogicalRightRS may be a ROJ"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,478,   //
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,479,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,480,   // handle the lower level LOJ node
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,481,   LChild = ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,482,   RChild = ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,483,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,484,   ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet = LChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,485,   ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet  = tmp;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,486,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,487,   // switch the ON clause
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,488,   vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,489,   joinClause   = ((HalfOuterJoinNode)logicalRightResultSet).joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,490,   ((HalfOuterJoinNode)logicalRightResultSet).joinClause = vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,491,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,492,   // No need to switch HalfOuterJoinNode data members for now because
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,493,   // we are handling only LOJ.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,494,   // boolean local_rightOuterJoin = rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,495,   // boolean local_transformed    = transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,496,   // rightOuterJoin = ((HalfOuterJoinNode)logicalRightResultSet).rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,497,   // transformed    = ((HalfOuterJoinNode)logicalRightResultSet).transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,498,   // ((HalfOuterJoinNode)logicalRightResultSet).rightOuterJoin = local_rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,499,   // ((HalfOuterJoinNode)logicalRightResultSet).transformed    = local_transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,500,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,501,   FromList localFromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,502,"                   C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,503,"                   getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,504,                   getContextManager());
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,506,   // switch LOJ nodes: by handling the current LOJ node
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,507,   leftResultSet  = logicalRightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,508,   rightResultSet = RChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,510,   // rebuild the result columns and re-bind column references
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,511,   ((HalfOuterJoinNode)leftResultSet).resultColumns = null;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,512,   ((JoinNode)leftResultSet).bindResultColumns(localFromList); // localFromList is empty
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,514,"   // left operand must be another LOJ, try again until a fixpoint"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,515,   boolean localChange = ((HalfOuterJoinNode)leftResultSet).LOJ_reorderable(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,517,   // rebuild the result columns and re-bind column references for 'this'
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,518,   return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,519,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,521,  return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,522, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,1,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,55,        suite.addTest(TestConfiguration.defaultSuite(OuterJoinTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,2177,    public void TestdDerby5659() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,2611, }
java/testing/org/apache/derbyTesting/junit/JDBC.java,1456,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,263,"                assertSQLState(""40XD1"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,271,        String from_dir;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,272,        String to_dir;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,274,"        String filesep=getSystemProperty(""file.separator"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,275,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,276,"        String testpath=new String( getSystemProperty(""user.dir"") + filesep +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,277,"            ""system"" + filesep + ""singleUse"" + filesep);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,278,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,279,        from_dir = testpath + fromwhere;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,280,        to_dir = testpath + todir;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,281,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,289,"        String filesep=getSystemProperty(""file.separator"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,290,"        String dir_to_change = new String(getSystemProperty(""user.dir"") + filesep"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,291,"            + ""system"" + filesep + ""singleUse"" + filesep + dir);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,295,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,297,     * Change all of the files in a directory and its subdirectories
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,298,"     * to read only (atleast not writeable, depending on system for execute"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,299,     * permission).
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,300,     * @param directory the string representation of the directory
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,301,     * to start recursing from.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,302,"     * @return <code>true</code> for success, <code>false</code> otherwise"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,304,    public static boolean changeDirectoryToReadOnly( String directory )
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,305,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,306,        return changeDirectoryToReadOnly( new File(directory) );
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,410,    public static boolean removeTemporaryDirectory(String directory)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,411,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,412,        return removeTemporaryDirectory(new File(directory));
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,413,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,414,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,526,}
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,25,import java.io.FileInputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,137,"        copyDatabaseOnOS(phDbName, ""readOnly"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,152,"        copyDatabaseOnOS(""readOnly"", ""readWrite"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,160,"        copyDatabaseOnOS(""readWrite"", ""readOnly2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,173,"        copyDatabaseOnOS(""readOnly2"", phDbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,277,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,278,"    private void copyDatabaseOnOS(String fromwhere, String todir) {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,281,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,282,"        assertTrue(""Failed to copy directory from "" + from_dir + "" to "" + to_dir,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,283,"            (copyDirectory(from_dir, to_dir)));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,284,"        assertTrue(""Failed to remove directory: "" + from_dir,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,285,            (removeTemporaryDirectory(from_dir)));
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,388,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,389,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,390,        Remove a directory and all of its contents.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,391,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,392,        The results of executing File.delete() on a File object
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,393,        that represents a directory seems to be platform
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,394,        dependent. This method removes the directory
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,395,        and all of its contents.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,396,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,397,"        @return true if the complete directory was removed, false if it could not be."
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,398,        If false is returned then some of the files in the directory may have been removed.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,399,    */
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,400,    final private static boolean removeTemporaryDirectory(File directory) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,401,"        //System.out.println(""removeDirectory "" + directory);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,402,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,403,        if (directory == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,404,            return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,405,        final File sdirectory = directory;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,406,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,407,        Boolean b = (Boolean)AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,408,            new java.security.PrivilegedAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,409,                public Object run() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,410,                    if (!sdirectory.exists())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,411,                        return new Boolean(true);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,412,                    if (!sdirectory.isDirectory())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,413,                        return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,414,                    String[] list = sdirectory.list();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,415,                    // Some JVMs return null for File.list() when the
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,416,                    // directory is empty.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,417,                    if (list != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,418,                        for (int i = 0; i < list.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,419,"                            File entry = new File(sdirectory, list[i]);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,420,                            if (entry.isDirectory())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,421,                            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,422,                                if (!removeTemporaryDirectory(entry))
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,423,                                    return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,424,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,425,                            else
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,426,                            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,427,                                if (!entry.delete())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,428,                                    return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,429,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,430,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,431,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,432,                    return new Boolean(sdirectory.delete());
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,433,                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,434,            });
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,435,        if (b.booleanValue())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,436,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,437,            return true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,438,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,439,        else return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,440,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,441,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,442,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,443,      Copy a directory and all of its contents.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,444,      */
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,445,"    private static boolean copyDirectory(File from, File to)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,446,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,447,"        return copyDirectory(from, to, (byte[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,448,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,449,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,450,"    private static boolean copyDirectory(String from, String to)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,451,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,452,"        return copyDirectory(new File(from), new File(to));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,453,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,454,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,455,"    private static boolean copyDirectory(File from, File to, byte[] buffer)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,456,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,457,        if (from == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,458,            return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,459,        final File sfrom = from;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,460,        final File sto = to;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,461,        if (buffer == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,462,            buffer = new byte[4*4096];
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,463,        final byte[] sbuffer = buffer;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,464,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,465,        Boolean b = (Boolean)AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,466,            new java.security.PrivilegedAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,467,                public Object run() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,468,                    if (!sfrom.exists() || !sfrom.isDirectory() || sto.exists() || !sto.mkdirs())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,469,                    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,470,"                        //can't do basic stuff, returning fail from copydir method"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,471,                        return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,472,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,473,                    else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,474,"                        //basic stuff succeeded, incl. makind dirs, going on..."
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,475,                        boolean success=true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,476,                        String[] list = sfrom.list();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,477,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,478,                        // Some JVMs return null for File.list() when the
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,479,                        // directory is empty.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,480,                        if (list != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,481,                            for (int i = 0; i < list.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,482,"                                File entry = new File(sfrom, list[i]);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,483,                                if (entry.isDirectory())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,484,                                {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,485,"                                    success = copyDirectory(entry,new File(sto,list[i]),sbuffer);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,486,                                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,487,                                else
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,488,                                {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,489,"                                    success = copyFile(entry,new File(sto,list[i]),sbuffer);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,490,                                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,491,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,492,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,493,                        return new Boolean(success);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,494,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,495,                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,496,            });
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,497,        if (b.booleanValue())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,498,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,499,            return true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,500,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,501,        else return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,502,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,503,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,504,"    public static boolean copyFile(File from, File to)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,505,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,506,"        return copyFile(from, to, (byte[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,507,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,508,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,509,"    public static boolean copyFile(File from, File to, byte[] buf)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,510,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,511,        if (buf == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,512,            buf = new byte[4096*4];
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,513,        //
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,514,"        //      System.out.println(""Copy file (""+from+"",""+to+"")"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,515,        FileInputStream from_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,516,        FileOutputStream to_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,517,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,518,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,519,            from_s = new FileInputStream(from);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,520,            to_s = new FileOutputStream(to);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,521,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,522,            for (int bytesRead = from_s.read(buf);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,523,                 bytesRead != -1;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,524,                 bytesRead = from_s.read(buf))
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,525,"                to_s.write(buf,0,bytesRead);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,526,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,527,            from_s.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,528,            from_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,529,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,530,            to_s.getFD().sync();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,531,            to_s.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,532,            to_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,533,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,534,        catch (IOException ioe)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,535,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,536,            return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,537,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,538,        finally
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,539,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,540,            if (from_s != null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,541,            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,542,                try { from_s.close(); }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,543,                catch (IOException ioe) {}
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,544,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,545,            if (to_s != null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,546,            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,547,                try { to_s.close(); }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,548,                catch (IOException ioe) {}
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,549,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,550,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,551,        return true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,552,    }
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,35,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,136,                            return new Boolean(file.exists());
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,204,"    private static void  recursiveCopy(File source, File target) throws IOException, FileNotFoundException{"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,207,"            copySingleFile(source,target);"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,222,"                    copySingleFile(entry, targetEntry);"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,225,
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,235,     * @throws IOException
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,236,     * @throws FileNotFoundException
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,238,"    private static void copySingleFile (File source, File target) throws IOException, FileNotFoundException {"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,247,        byte[] buf = new byte[32 * 1024];
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,248,
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,249,        for (;;) {
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,250,            int read = in.read(buf);
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,251,            if (read == -1)
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,252,                break;
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,253,"            out.write(buf, 0, read);"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,255,        in.close();
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,256,        out.close();
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1387,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,24,import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,28,import org.apache.derby.shared.common.sanity.SanityManager;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,29,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,30,import junit.framework.Assert;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,34,import java.sql.CallableStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,37,import java.sql.ResultSet;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,59,        if (!JDBC.vmSupportsJSR169()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,60,            // JSR169 cannot run with tests with stored procedures
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,61,            // that do database access - for they require a
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,62,            // DriverManager connection to jdbc:default:connection;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,66,                return new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,67,"                    new TestSuite(Derby151Test.class, name));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,132,            Thread.currentThread().interrupted();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,48,    /** The thread that listens for messages from the slave */
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,49,    private Thread msgReceiver = null;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,50,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,163,        msgReceiver = null;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,312,        msgReceiver = new MasterReceiverThread(dbname);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,367,                    msgReceiver = null;
java/engine/org/apache/derby/iapi/types/SQLChar.java,1578,                    String microsStr = Integer.toString( nanos);
java/engine/org/apache/derby/iapi/types/SQLChar.java,1579,                    if(microsStr.length() > SQLTimestamp.MAX_FRACTION_DIGITS)
java/engine/org/apache/derby/iapi/types/SQLChar.java,1581,                        sb.append(
java/engine/org/apache/derby/iapi/types/SQLChar.java,1582,                            microsStr.substring(
java/engine/org/apache/derby/iapi/types/SQLChar.java,1583,"                                0, SQLTimestamp.MAX_FRACTION_DIGITS));"
java/engine/org/apache/derby/iapi/types/SQLChar.java,1585,                    else
java/engine/org/apache/derby/iapi/types/SQLChar.java,1586,                    {
java/engine/org/apache/derby/iapi/types/SQLChar.java,1587,                        for(int i = microsStr.length();
java/engine/org/apache/derby/iapi/types/SQLChar.java,1588,                            i < SQLTimestamp.MAX_FRACTION_DIGITS ; i++)
java/engine/org/apache/derby/iapi/types/SQLChar.java,1589,                        {
java/engine/org/apache/derby/iapi/types/SQLChar.java,1590,                            sb.append( '0');
java/engine/org/apache/derby/iapi/types/SQLChar.java,1591,                        }
java/engine/org/apache/derby/iapi/types/SQLChar.java,1593,                        sb.append( microsStr);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,984,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,116,     * PrivilegedExceptionAction is raised with cause
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,126,     * @throws PrivilegedActionException if an exception occurs while trying
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,127,     *                                   to open a connection.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,130,     *                     <code>SocketConnection</code> class.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,139,"        PrivilegedActionException,"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,151,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,152,        //Start listening on the socket and accepting the connection
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,153,        Socket client =
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,154,            (Socket)
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,155,            AccessController.doPrivileged(new PrivilegedExceptionAction() {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,156,            public Object run() throws IOException {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,157,                return serverSocket.accept();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,158,            }
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,159,        });
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,160,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,183,     * @throws PrivilegedActionException if an exception occurs while trying
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,186,    private ServerSocket createServerSocket() throws PrivilegedActionException {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,189,        return   (ServerSocket) AccessController.doPrivileged
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,191,"            public Object run() throws IOException, StandardException {"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,192,                ServerSocketFactory sf = ServerSocketFactory.getDefault();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,193,"                return sf.createServerSocket(slaveAddress.getPortNumber(),"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,194,"                    0, slaveAddress.getHostAddress());"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,195,            }
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,196,        });
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,101,     * @throws PrivilegedActionException if an exception occurs while trying
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,102,     *                                   to open a connection.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,103,     *
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,105,     *         <code>SocketConnection</code> class.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,115,"        PrivilegedActionException,"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,123,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,124,        //create a connection to the slave.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,125,        s = (Socket)
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,126,        AccessController.doPrivileged(new PrivilegedExceptionAction() {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,127,            public Object run() throws IOException {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,128,                SocketFactory sf = SocketFactory.getDefault();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,129,                InetSocketAddress sockAddr = new InetSocketAddress(
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,130,"                        slaveAddress.getHostAddress(),"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,131,                        slaveAddress.getPortNumber());
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,132,                Socket s_temp = sf.createSocket();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,133,"                s_temp.connect(sockAddr, timeout_);"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,134,                return s_temp;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,135,            }
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,136,        });
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,94,"                {""a"", ""0"", ""USAGE: java org.apache.derby.tools.sysinfo -cp ["" +"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,95,"                    "" [ embedded ][ server ][ client] [ db2driver ] [ tools ]"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,96,"                    "" [  anyClass.class ] ]"", null},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,101,"                // let's not test the following valid value, it will"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,102,                // fail if db2jcc.jar is not on CLASSPATH
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,103,"                //{""db2driver"", ""6"", Success, ""db2jcc.jar""},"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,142,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,515," private static final String DB2DRIVER = ""db2driver"";"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,521," private static final String USAGESTRINGPARTA = MAINUSAGESTRING + "" [ [ "" + EMBEDDED + "" ][ "" + NET + "" ][ "" + CLIENT + ""] [ "" + DB2DRIVER + "" ] [ "" + TOOLS + "" ] [ "";"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,569,"    tryDB2DriverClasspath(successes, failures);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,605,"  if (argumentsContain(args,DB2DRIVER)) {"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,606,"   tryDB2DriverClasspath(successes, failures);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,607,   seenArg =true;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,608,  }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,653,"    private static void tryDB2DriverClasspath(StringBuffer successes,"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,654,            StringBuffer failures)
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,655,    {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,656,"        tryMyClasspath(""com.ibm.db2.jcc.DB2Driver"","
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,657,"                Main.getTextMessage(""SIF08.L"", ""db2jcc.jar""),"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,658,"                successes, failures);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,659,    }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1024,     *  Check inside a jar file for the presence of a Derby info properties
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1025,"     *  file. There is a special case for db2jcc, which does not have a Derby"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1026,"     *  info propeties file. If db2jcc is in the filename, acquire DB2Driver"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1027,     *  via reflection and get the version number from it.
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1028,     *
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1029,     *  @param filename the jar file to check
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1030,     *  @return ZipInfoProperties with the jar file set as the location
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1031,     *          or null if not found.
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1129,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1130,                return formatURL(result);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1231,"            result = ""IOException"";"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,390,"   // column names can be SQL reserved words, so it"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,391,   // is necessary delimit them using quotes for insert to work correctly.
java/engine/org/apache/derby/impl/load/ColumnInfo.java,392,"   sb.append(""\"""");"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,393,   sb.append(insertColumnNames.get(index));
java/engine/org/apache/derby/impl/load/ColumnInfo.java,394,"   sb.append(""\"""");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,271,"                assertSQLState(""25502"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,72,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,90,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,116,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,136,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,141,     * Create a new connection and count the number of locks held.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,142,     *
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,143,     * @return number of locks held
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,144,     *
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,145,     * @throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,147,    public int countLocks() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,149,        String sql;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,152,"        sql = ""Select count(*) from new org.apache.derby.diag.LockTable() as LT"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,153,        ResultSet lockrs = stmt.executeQuery(sql);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,154,        lockrs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,155,        int count = lockrs.getInt(1);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,156,        lockrs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,159,        return count;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,28,import java.sql.ResultSet;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,78,"        ResultSet rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,79,        JDBC.assertEmpty(rs);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,86,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,87,"        JDBC.assertDrainResults(rs, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,91,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,92,"        JDBC.assertDrainResults(rs, 2);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,94,        //calls to system procedure for update statisitcs is internally
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,137,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,138,        JDBC.assertEmpty(rs);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,163,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,164,"        JDBC.assertDrainResults(rs, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,165,
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,201,   String schemaName = dblook.expandDoubleQuotes(rs.getString(2));
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,202,   String tableName = dblook.expandDoubleQuotes(rs.getString(3));
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,204,   if (dblook.isIgnorableSchema(schemaName))
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,208,   Statement stmtCols = conn.createStatement();
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,209,"   String queryCols = ""SELECT COLUMNNUMBER, COLUMNNAME "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,210,"    ""FROM SYS.SYSCOLUMNS C, SYS.SYSTABLES T, SYS.SYSSCHEMAS S "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,211,"    ""WHERE T.TABLEID = C.REFERENCEID and S.SCHEMAID = T.SCHEMAID ""+"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,212,"    ""and T.TABLENAME = '""+tableName+""' AND SCHEMANAME = '""+schemaName +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,213,"    ""' ORDER BY COLUMNNUMBER"";"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,215,   ResultSet rsCols= stmtCols.executeQuery(queryCols);
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,216,"   String fullName = dblook.addQuotes(schemaName) + ""."" + dblook.addQuotes(tableName);"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,264,   colNames.append(rsCols.getString(2));
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,289,"  grantStmt.append("")"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java,10426,"  assertTrue(rtsp.usedTableScan(""TABLE1""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java,10458,"  assertTrue(rtsp.usedTableScan(""TABLE1""));"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,521,   else
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,522,    bootingDictionary.clearSPSPlans();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,53,
java/client/org/apache/derby/client/am/LogicalStatementEntity.java,169,            if (temporaryPsRef.isClosed()) {
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,390,   sb.append(parameterNames[i]);
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,351,    return getNumberAsString(rs.getBigDecimal(columnNumber));
java/engine/org/apache/derby/impl/sql/execute/DropSchemaConstantAction.java,97,"        SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, null, true);"
java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java,866,"            totaljvmflags = subjvmflags + ""^"" + totaljvmflags;"
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,395,  if (jvmflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,397,   if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,404,   if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,410,      if (testJavaFlags == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,419,      if (testSpecialProps == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java,1601,                if (jvmflags != null)
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,184,"  File classFile = FileUtil.newFile(dir,filename);"
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,190,   FileOutputStream fis = new FileOutputStream(classFile);
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,200,"    SanityManager.THROWASSERT(""Unable to write .class file"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,28,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,35,import junit.framework.TestSuite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,63,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,232,"        String shutdownUrl = TestConfiguration.getCurrent().getJDBCUrl(""\u4e10;shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,233,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,234,            DriverManager.getConnection(shutdownUrl);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,235,        } catch (SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,236,            // ignore shutdown exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,238,"        removeDirectory(getSystemProperty(""derby.system.home"") +  File.separator +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,239,"                ""\u4e10"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,242,    public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,243,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,244,        if (! isSunJVM()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,245,"            TestSuite suite = new TestSuite(""InternationalConnectTest with non-sun/oracle jvm"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,246,            // DERBY-4836 test fails on IBM VMs (on windows).
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,247,            // Skip while research is happening..
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,248,"            println(""Test skipped for this VM, cf. DERBY-4836"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,249,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,250,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,251,
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1268,                            if( moduleList.contains( key))
java/build/org/apache/derbyBuild/GeneratorBase.java,89,    protected TagReader bugListDoc;
java/build/org/apache/derbyBuild/GeneratorBase.java,152,        bugListDoc = new TagReader( new FileInputStream(bugListFileName) );
java/build/org/apache/derbyBuild/JiraIssue.java,1,/*  Derby - Class org.apache.derbyBuild.JiraIssue
java/build/org/apache/derbyBuild/JiraIssue.java,2,Licensed to the Apache Software Foundation (ASF) under one or more
java/build/org/apache/derbyBuild/JiraIssue.java,3,contributor license agreements.  See the NOTICE file distributed with
java/build/org/apache/derbyBuild/JiraIssue.java,4,this work for additional information regarding copyright ownership.
java/build/org/apache/derbyBuild/JiraIssue.java,5,"The ASF licenses this file to You under the Apache License, Version 2.0"
java/build/org/apache/derbyBuild/JiraIssue.java,6,"(the ""License""); you may not use this file except in compliance with"
java/build/org/apache/derbyBuild/JiraIssue.java,7,the License.  You may obtain a copy of the License at
java/build/org/apache/derbyBuild/JiraIssue.java,8,http://www.apache.org/licenses/LICENSE-2.0
java/build/org/apache/derbyBuild/JiraIssue.java,9,"Unless required by applicable law or agreed to in writing, software"
java/build/org/apache/derbyBuild/JiraIssue.java,10,"distributed under the License is distributed on an ""AS IS"" BASIS,"
java/build/org/apache/derbyBuild/JiraIssue.java,11,"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/build/org/apache/derbyBuild/JiraIssue.java,12,See the License for the specific language governing permissions and
java/build/org/apache/derbyBuild/JiraIssue.java,13,limitations under the License.
java/build/org/apache/derbyBuild/JiraIssue.java,17,import org.w3c.dom.*;
java/build/org/apache/derbyBuild/JiraIssue.java,18,import java.io.InputStream;
java/build/org/apache/derbyBuild/JiraIssue.java,19,import java.util.*;
java/build/org/apache/derbyBuild/JiraIssue.java,23, *
java/build/org/apache/derbyBuild/JiraIssue.java,24, * An issue from a JIRA report. The constructor of this class parses text produced by
java/build/org/apache/derbyBuild/JiraIssue.java,25, * a JIRA report. This parsing logic probably has to be rewritten for every release because
java/build/org/apache/derbyBuild/JiraIssue.java,26, * the format of the JIRA reports is not stable.
java/build/org/apache/derbyBuild/JiraIssue.java,27, *
java/build/org/apache/derbyBuild/JiraIssue.java,30,"    private static final String RELEASE_NOTE_NAME = ""releaseNote.html"";"
java/build/org/apache/derbyBuild/JiraIssue.java,31,
java/build/org/apache/derbyBuild/JiraIssue.java,34,    private long releaseNoteAttachmentID = ReportParser.NO_RELEASE_NOTE;
java/build/org/apache/derbyBuild/JiraIssue.java,35,    private HashSet fixVersionSet;
java/build/org/apache/derbyBuild/JiraIssue.java,36,
java/build/org/apache/derbyBuild/JiraIssue.java,37,    /**
java/build/org/apache/derbyBuild/JiraIssue.java,38,     * Create an object instance from a TagReader.
java/build/org/apache/derbyBuild/JiraIssue.java,39,     */
java/build/org/apache/derbyBuild/JiraIssue.java,40,"    public JiraIssue(  ReportParser rp, TagReader tr ) throws Exception"
java/build/org/apache/derbyBuild/JiraIssue.java,41,    {
java/build/org/apache/derbyBuild/JiraIssue.java,42,        key = rp.parseKey( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,43,        title = rp.parseTitle( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,44,        fixVersionSet = rp.parseFixedVersions( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,45,        releaseNoteAttachmentID = rp.getReleaseNoteAttachmentID( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,49,     * Factory method which extracts a list of JiraIssue objects from a Jira
java/build/org/apache/derbyBuild/JiraIssue.java,50,     * report (supplied as an XML Document). Issues with a fixVersion contained
java/build/org/apache/derbyBuild/JiraIssue.java,51,     * in the exclude list will be omitted from the list.
java/build/org/apache/derbyBuild/JiraIssue.java,52,     * @param masterReport a TagReader holding the JIRA report of all the fixed bugs
java/build/org/apache/derbyBuild/JiraIssue.java,53,     * @param excludeReleaseIDList list of fixVersions that disqualifies an issue
java/build/org/apache/derbyBuild/JiraIssue.java,54,     * @param parser a class to parse content in the master report
java/build/org/apache/derbyBuild/JiraIssue.java,55,     * @return a List of JiraIssue objects
java/build/org/apache/derbyBuild/JiraIssue.java,56,     * @throws java.lang.Exception
java/build/org/apache/derbyBuild/JiraIssue.java,58,    public static List createJiraIssueList
java/build/org/apache/derbyBuild/JiraIssue.java,59,"        ( TagReader masterReport, List excludeReleaseIDList, ReportParser parser ) throws Exception"
java/build/org/apache/derbyBuild/JiraIssue.java,60,    {
java/build/org/apache/derbyBuild/JiraIssue.java,61,        int issueCount = 0;
java/build/org/apache/derbyBuild/JiraIssue.java,62,
java/build/org/apache/derbyBuild/JiraIssue.java,65,        while( true )
java/build/org/apache/derbyBuild/JiraIssue.java,66,        {
java/build/org/apache/derbyBuild/JiraIssue.java,67,            TagReader nextIssue = parser.parseNextIssue( masterReport );
java/build/org/apache/derbyBuild/JiraIssue.java,68,            if ( nextIssue == null ) { break; }
java/build/org/apache/derbyBuild/JiraIssue.java,69,
java/build/org/apache/derbyBuild/JiraIssue.java,70,"            JiraIssue candidate = new JiraIssue( parser, nextIssue );"
java/build/org/apache/derbyBuild/JiraIssue.java,71,
java/build/org/apache/derbyBuild/JiraIssue.java,72,            boolean skip = false;
java/build/org/apache/derbyBuild/JiraIssue.java,73,            for (Iterator ex = excludeReleaseIDList.iterator(); ex.hasNext();)
java/build/org/apache/derbyBuild/JiraIssue.java,74,            {
java/build/org/apache/derbyBuild/JiraIssue.java,75,                String rid = (String) ex.next();
java/build/org/apache/derbyBuild/JiraIssue.java,76,                if (candidate.isFixedIn(rid))
java/build/org/apache/derbyBuild/JiraIssue.java,77,                {
java/build/org/apache/derbyBuild/JiraIssue.java,78,"                    //System.out.println(""Already fixed: ""+candidate.getKey()+ "" (in ""+rid+"")"");"
java/build/org/apache/derbyBuild/JiraIssue.java,79,                    skip=true;
java/build/org/apache/derbyBuild/JiraIssue.java,80,                    break;
java/build/org/apache/derbyBuild/JiraIssue.java,81,                }
java/build/org/apache/derbyBuild/JiraIssue.java,83,            if (!skip)
java/build/org/apache/derbyBuild/JiraIssue.java,84,            {
java/build/org/apache/derbyBuild/JiraIssue.java,85,"                //System.out.println(""adding: "" + candidate.getKey());"
java/build/org/apache/derbyBuild/JiraIssue.java,86,                jiraIssues.add(candidate);
java/build/org/apache/derbyBuild/JiraIssue.java,118,        return (releaseNoteAttachmentID > ReportParser.NO_RELEASE_NOTE);
java/build/org/apache/derbyBuild/JiraIssue.java,127,        return fixVersionSet.contains(version);
java/build/org/apache/derbyBuild/JiraIssue.java,141,"        return ""https://issues.apache.org/jira/secure/attachment/"" +"
java/build/org/apache/derbyBuild/JiraIssue.java,142,"                releaseNoteAttachmentID + ""/releaseNote.html"";"
java/build/org/apache/derbyBuild/JiraIssue.java,145,
java/build/org/apache/derbyBuild/JiraIssue.java,146,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,34, * that you freshly regenerate your BUG_LIST and NOTES_LIST just before
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,35, * you run this tool.
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,39, * The tool is designed to be run from Derby's ant build scripts. To run under
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,40," * ant, do the following:"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,44," * <li>Define the ""relnotes.src.reports"" variable in your ant.properties. This"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,45, * variable points at the directory which holds your xml JIRA reports.</li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,46, * <li>Put your xml JIRA reports in that directory. They should have the
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,47, * following names:
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,48, *  <ul>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,49, *  <li>fixedBugsList.xml - This is the list of issues addressed
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,50, * by the release.</li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,51, *  <li>releaseNotesList.xml - This is the list of issues which have detailed
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,52, *  release notes.</li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,53, *  </ul>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,54, * </li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,55," * <li>Then cd to tools/release and run ant thusly: ""ant genrelnotes""</li>"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,57, *
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,58," * <p>For more information on this tool, please see the JIRA which introduced it:"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,60, *
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,61, * <p>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,62," * <a href=""http://issues.apache.org/jira/browse/DERBY-2570"">DERBY-2570</a>"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,75,"        ""  java org.apache.derbyBuild.ReleaseNotesGenerator SUMMARY BUG_LIST NOTES_LIST OUTPUT_PAMPHLET\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,79,"        ""                  BUG_LIST                     An xml JIRA report of issues addressed by this release.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,80,"        ""                  NOTES_LIST                An xml JIRA report listing issues which have detailed releaseNotes.html attachments.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,88,"        ""The ReleaseNoteGenerator assumes that the two JIRA reports contain\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,89,"        ""key, title, and attachments elements for each Derby issue. For each\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,90,"        ""issue in NOTES_LIST, the ReleaseNotesGenerator looks through the\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,91,"        ""attachments block in that report and grabs the latest reported\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,92,"        ""releaseNote.html.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,95,"        ""and NOTES_LIST just before you run this tool.\n"""
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,135,    private ReportParser reportParser = ReportParser.makeReportParser();
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,287,        bugListDoc.reset();
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,288,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,289,"        for ( Iterator i = JiraIssue.createJiraIssueList( bugListDoc, excludeReleaseIDList, reportParser ).iterator(); i.hasNext(); )"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,290,        {
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,327,        bugListDoc.reset();
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,328,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,329,"        for ( Iterator i = JiraIssue.createJiraIssueList( bugListDoc, excludeReleaseIDList, reportParser ).iterator(); i.hasNext(); )"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,330,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,86,        /* Maximum length in bytes is 255. We subtract 12 for ;create=true  */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,87,        int maxNameLength = 255 - 12;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,116,            /* Append one more character to make it fail */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,117,            dbName.append(testCharacters[ch]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,258,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,259,        /* Add the created database for cleanup by tearDown() */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,260,"        databasesForCleanup.add(""\u4e10"");"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,471,  istream.println(LINE);
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,562,"        return (""Sun Microsystems Inc."".equals("
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,563,"                getSystemProperty(""java.vendor"")));"
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,30,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,33,import org.apache.derby.iapi.services.io.StreamStorable;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,34,
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,35,import org.apache.derby.iapi.services.i18n.MessageService;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,36,
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,41,import org.apache.derby.iapi.services.info.JVMInfo;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,46,import java.io.InputStream;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,47,import java.io.ByteArrayInputStream;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,51,import java.io.EOFException;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,351,              JDBCTypeId = JVMInfo.JAVA_SQL_TYPES_BOOLEAN;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,24,import java.sql.Types;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,25,
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,26,
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,53, /**
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,54,"    JDBC Boolean type - Types.BIT in JDK1.1 & 1.2 & 1.3, Types.BOOLEAN in JDK1.4"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,55, */
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,56, public static final int JAVA_SQL_TYPES_BOOLEAN;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,57,
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,70,"  // If we don't recoginze that, or if the property is not set, assume"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,71,  // version 1.3.
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,146,  JAVA_SQL_TYPES_BOOLEAN = (isJ2ME || id >= J2SE_14) ?
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,147,   Types.BOOLEAN :java.sql.Types.BIT;
java/engine/org/apache/derby/catalog/SystemProcedures.java,1632,        String entityName = IdUtil.normalToDelimited(tableName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1633,        if (schemaName != null) {
java/engine/org/apache/derby/catalog/SystemProcedures.java,1634,            entityName =
java/engine/org/apache/derby/catalog/SystemProcedures.java,1635,"                    IdUtil.normalToDelimited(schemaName) + ""."" + entityName;"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1636,        }
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,31,import org.apache.derby.iapi.sql.PreparedStatement;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,37,import org.apache.derby.iapi.types.DataValueFactory;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,38,import org.apache.derby.iapi.sql.LanguageFactory;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,39,import org.apache.derby.iapi.sql.conn.SQLSessionContext;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,40,
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,47,import org.apache.derby.iapi.store.access.TransactionController;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,48,
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,57,import java.sql.SQLException;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,514,  int severity = (error instanceof StandardException) ?
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,515,   ((StandardException) error).getSeverity() :
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,516,   ExceptionSeverity.SESSION_SEVERITY;
java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java,161,                if (lcc.getRunTimeStatisticsMode())
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,372,    !doesCommit() && !activation.isClosed())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,469,"    private boolean hasTable(String schemaName, String tableName)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,472,"        ResultSet rs = getConnection().getMetaData().getTables((String)null,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,479,    private String []tableNames = {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,488,    private void enableXplainStyle(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,493,"            if (hasTable(""XPLTEST"", tableNames[i]))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,500,    private void enableXplainStyleWithTiming(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,512,    private void disableXplainStyle(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,531,"       new AccessDatabase(getConnection(), ""XPLTEST"", stmt_id);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,548,    private void verifyXplainUnset(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,750,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,2348,"            if (hasTable(""XPLTEST"", tableNames[i]))"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,180,        Class iface = Blob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,178,        Class iface = Clob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,115,            is = (FileInputStream) AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,116,                    new PrivilegedExceptionAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,117,                public Object run() throws FileNotFoundException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,128,        ArrayList beforeUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,149,        ArrayList afterUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,191,            is = (FileInputStream) AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,192,                    new PrivilegedExceptionAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,193,                public Object run() throws FileNotFoundException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,205,        ArrayList beforeUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,228,        ArrayList afterUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,521,   Class   iface = exclusions.getInterface();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,372,"            Class derbyImplementation, Method ifaceMethod)"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4929, /** get all the statistiscs descriptors for a given table.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4930,  * @param  td Table Descriptor for which I need statistics
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4931,  */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4943,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4945,"         keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4946,"         (ScanQualifier [][])null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4947,"         ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4948,"         (TupleDescriptor)null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4949,"         statDescriptorList, false);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8458,  return getDescriptorViaIndexMinion(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8459,"   indexId,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8460,"   keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8461,"   scanQualifiers,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8462,"   ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8463,"   parentTupleDescriptor,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8464,"   list,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8465,"   forUpdate,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8466,"   TransactionController.ISOLATION_REPEATABLE_READ,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8467,   tc);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8468, }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8469,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8470, /**
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8471,  * Return a (single or list of) catalog row descriptor(s) from a
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8472,  * system table where the access is from the index to the heap.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8473,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8474,"  * This overload variant takes an explicit tc, in contrast to the normal"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8475,  * one which uses the one returned by getTransactionCompile.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8476,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8477,  * @param indexId The id of the index (0 to # of indexes on table) to use
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8478,  * @param keyRow The supplied ExecIndexRow for search
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8479,  * @param ti  The TabInfoImpl to use
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8480,"  * @param parentTupleDescriptor  The parentDescriptor, if applicable."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8481,"  * @param list      The list to build, if supplied.  If null, then"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8482,  *     caller expects a single descriptor
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8483,  * @param forUpdate Whether or not to open the index for update.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8484,  * @param tc        Transaction controller
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8485,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8486,  * @return The last matching descriptor
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8487,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8488,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8489,  */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8490, private final TupleDescriptor getDescriptorViaIndex(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8491,"      int indexId,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8492,"      ExecIndexRow keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8493,"      ScanQualifier [][] scanQualifiers,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8494,"      TabInfoImpl ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8495,"      TupleDescriptor parentTupleDescriptor,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8496,"      List list,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8497,"      boolean forUpdate,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8498,      TransactionController tc)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8499,   throws StandardException
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8500, {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8501,  if (tc == null) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8502,   tc = getTransactionCompile();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8503,  }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8504,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8505,  return getDescriptorViaIndexMinion(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8506,"   indexId,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8507,"   keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8508,"   scanQualifiers,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8509,"   ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8510,"   parentTupleDescriptor,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8511,"   list,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8512,"   forUpdate,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8513,"   TransactionController.ISOLATION_REPEATABLE_READ,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8514,   tc);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8588,  ExecIndexRow   indexTemplateRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8600,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8601,   if (isolationLevel ==
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8602,     TransactionController.ISOLATION_READ_UNCOMMITTED) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8603,    // list not used for this case
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8604,    SanityManager.ASSERT(list == null);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8605,   }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8606,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8719,    // cf. DERBY-3678. A table's schema descriptor is attempted
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8755,   else
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9443,  ExecRow row;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9451,            getDescriptorViaIndexMinion
java/build/org/apache/derbyBuild/GeneratorBase.java,139,"        System.out.println(""setting summary file name to:"" + summaryFileName +"
java/build/org/apache/derbyBuild/GeneratorBase.java,140,"                "" previousReleaseID: "" + previousReleaseID +"
java/build/org/apache/derbyBuild/GeneratorBase.java,141,"                "" excludeReleaseIDList.size():"" + excludeReleaseIDList.size());"
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/QueryVTIHelper.java,182,            Class                   callerClass = Class.forName( caller.getClassName() );
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java,250,            Class                               callerClass = Class.forName( caller.getClassName() );
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java,258,            Class               vtiClass = Class.forName( vtiClassName );
java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot/Subscription.java,275,            Class                   callerClass = Class.forName( caller.getClassName() );
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,213,
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,32,    /** Constant for version which haven't been released. */
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,33,    private static final long NOT_RELEASED = -1;
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,79,     * @return Milliseconds since the Epoch.
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,191,"        return version + "" ("" + (releaseDate == NOT_RELEASED ? ""n/a"" : Long.toString(releaseDate)) + "")"";"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,121,    private final DerbyVersion ancestorCutOff;
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,161,            ancestorCutOff = getVersion(System.getProperty(
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,192,"        // Expected format: release version, release date (YYYY-MM-DD)"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,195,"                    versions[i][0], parseDate(versions[i][1]));"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,199,            ancestorCutOff = getVersion(System.getProperty(
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,203,"                    ""invaild ancestor cutoff version"", iae);"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,261,        if (parent.compareTo(ancestorCutOff) < 0) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,265,                    ancestorCutOff.getVersion());
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,271,            DerbyVersion a = ancestors[i];
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,272,            Calendar cal = GregorianCalendar.getInstance();
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,273,            cal.setTimeInMillis(a.getReleaseDateMillis());
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,274,"            System.out.println(a.getVersion() + "", "" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,275,"                    cal.get(Calendar.YEAR) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,276,"                    padZero(cal.get(Calendar.MONTH) +1) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,277,                    padZero(cal.get(Calendar.DAY_OF_MONTH)));
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,283,"        System.out.println(""(cutoff="" + ancestorCutOff.getVersion() + "")"");"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,311,            DerbyVersion dv = (DerbyVersion)relIter.next();
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,312,            Calendar cal = GregorianCalendar.getInstance();
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,313,            cal.setTimeInMillis(dv.getReleaseDateMillis());
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,314,"            System.out.println(dv.getVersion() + "", "" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,315,"                    cal.get(Calendar.YEAR) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,316,"                    padZero(cal.get(Calendar.MONTH) +1) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,317,                    padZero(cal.get(Calendar.DAY_OF_MONTH)));
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,318,
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,468,"        log(""dump file: "" + new File(destFile).getAbsolutePath());"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,502,        if (!parent.isReleased() && dv.length > 0) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,503,            ancestors.add(dv[0]);
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,504,        }
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,505,        while (dv.length > 1 && dv[0].compareTo(ancestorCutOff) >= 0) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,522,"     * If the target version has been released, it will be placed at index zero."
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,523,"     * If the target version hasn't been released, it will not be included in"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,524,     * the list.
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,539,            if (!dv.isReleased()) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,561,    /** Adds a leading zero if the value is less than ten. */
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,562,    private static String padZero(int val) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,563,        if (val < 10) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,564,"            return ""0"" + Integer.toString(val);"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,565,        } else {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,566,            return Integer.toString(val);
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,567,        }
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,568,    }
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,569,
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1277,
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,396,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,472,                 if (sz == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,484,                    pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,550,                return control.getInputStream(0);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,558,                    pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,565,"                    return new UpdatableBlobStream (this,"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,566,"                            new AutoPositioningStream (this, myStream, this));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,615,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,627,                    if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,632,"                        if (checkMatch(pattern, pos))"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,634,                        else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,709,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,724,                if (b == null || b.length < 1)  // the 'empty' blob
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,732,                    if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,737,"                        if (checkMatch(pattern, pos))"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,739,                        else
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,338,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,350,                    if (readCount == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,458,                                if (!seenOneCharacter)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,473,                                if (firstPosition == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,491,            } // End outer for loop
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,492,        } // End synchronized block
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1245,   LanguageConnectionContext lcc = tr.getLcc();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2015,    getLanguageConnection().setReadOnly(readOnly);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2109,    getLanguageConnection().setIsolationLevel(iLevel);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2842,    getLanguageConnection().resetFromPool();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2879,     (XATransactionController) getLanguageConnection().getTransactionExecute();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2894,     getLanguageConnection().internalCommit(false /* don't commitStore again */);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2921,       getLanguageConnection().xaCommit(onePhase);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2945,       getLanguageConnection().xaRollback();
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2316,    getLanguageConnectionContext().getDataDictionary().checkVersion(
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3555,    s = getEmbedConnection().prepareMetaDataStatement(queryText);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,147,   } catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,148,      throw handleException(t);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,149,   }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,462,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,582,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,600,     LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4013,    if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4025,"    return new EmbedBlob(dvd, getEmbedConnection());"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4067,    if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4077,"                return new EmbedClob(getEmbedConnection(), dvd);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4514,   try {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4522,     LanguageConnectionContext lcc = getEmbedConnection()
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4523,       .getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4535,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1317,         } catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,344,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java,94,        // return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java,95,        return new CleanDatabaseTestSetup(suite) {
java/client/org/apache/derby/client/am/DatabaseMetaData.java,2388,        return supportsUDTs_;
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,136,        Hashtable classSizes = new Hashtable();
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,228,    private Class[] interfaceList; // Search for classes that implement these interfaces
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,230,    private Hashtable classSizes;
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,235,                              Hashtable classSizes)
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,273,                Class targetClass = null;
java/build/org/apache/derbyBuild/ElementFacade.java,86,    public List getTextListByTagName(String tag) throws Exception {
java/build/org/apache/derbyBuild/ElementFacade.java,89,        ArrayList tagValues = new ArrayList();
java/build/org/apache/derbyBuild/GeneratorBase.java,99,    protected List excludeReleaseIDList;
java/build/org/apache/derbyBuild/GeneratorBase.java,101,    protected ArrayList errors = new ArrayList();
java/build/org/apache/derbyBuild/JiraIssue.java,73,        ArrayList jiraIssues = new ArrayList();
java/build/org/apache/derbyBuild/JiraIssue.java,82,        ArrayList comments = new ArrayList();
java/build/org/apache/derbyBuild/MessageBuilder.java,141,        private         ArrayList    _tagStack;
java/build/org/apache/derbyBuild/MessageBuilder.java,166,            _tagStack = new ArrayList();
java/build/org/apache/derbyBuild/MessageBundleTest.java,73,    static HashSet sqlStateIds          = new HashSet();
java/build/org/apache/derbyBuild/MessageBundleTest.java,74,    static HashSet messageIdIds         = new HashSet();
java/build/org/apache/derbyBuild/MessageBundleTest.java,75,    static HashSet messageBundleIds     = new HashSet();
java/build/org/apache/derbyBuild/MessageBundleTest.java,93,"    static void loadClassIds(Class idclass, HashSet set) throws Exception {"
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,36,/* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,127, private HashMap changeMap;
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,142, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,180, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,195,  changeMap = new HashMap();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,238, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,320, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,379,  ArrayList colDefs = new ArrayList();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,450, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,494, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,505,"  * @return Occurence of <""AS "" + oldVal> in the query text"
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,506,  * has been changed IN PLACE to newVal.
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,545, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,566,  * @return An outer SELECT clause has been generated and
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,642, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,652,  * @return All relevant columns have been updated IN PLACE
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,653,  * to return the required ODBC-compliant values.
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,691, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,699,  * @return The received column has been updated IN PLACE
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,700,  * to return the required ODBC-compliant value.
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,758, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,766,  * @param query The query from which we are extracting
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,777,  ArrayList colDefList)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,841, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,892, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,943, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1011, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1023,  * @return A dummy column name has been added to
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1031,  ArrayList selectColDefs)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1051, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1062,  * @newQueryText The buffer in which we want to
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1064,  * @return The dummy placeholder in the received
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1090, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1097,  * @queryText The buffer in which we are going to do
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1099,  * @return fragKey has been substituted (IN PLACE)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1153,     * @return the old pattern is substituted with the new pattern (IN
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1182, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1223, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1248, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1264, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1274,  Byte changeByte = (Byte)changeMap.get(queryName);
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1283, /* ****
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,150,    private ArrayList missingReleaseNotes = new ArrayList();
java/build/org/apache/derbyBuild/classlister.java,70, protected Hashtable foundClasses;
java/build/org/apache/derbyBuild/classlister.java,87, protected Hashtable masterClassList = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,90,    protected Hashtable classpathHash;
java/build/org/apache/derbyBuild/classlister.java,157,"  foundClasses = new Hashtable(3000, 0.8f);"
java/build/org/apache/derbyBuild/classlister.java,262,        classpathHash = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,534,   Hashtable localHashtable = null;
java/build/org/apache/derbyBuild/classlister.java,537,    localHashtable = (Hashtable) masterClassList.get(className);
java/build/org/apache/derbyBuild/classlister.java,540,     localHashtable = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,671,   Hashtable scoreboard = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,672,   Hashtable grandkids = (Hashtable) masterClassList.get(kid);
java/build/org/apache/derbyBuild/classlister.java,701," protected void unrollHashtable( String parent, Hashtable current, Hashtable scoreboard, int indentLevel)"
java/build/org/apache/derbyBuild/classlister.java,704,  Enumeration e = current.keys();
java/build/org/apache/derbyBuild/classlister.java,709,   key = (String) e.nextElement();
java/build/org/apache/derbyBuild/classlister.java,716,   Integer value = (Integer) scoreboard.get(key);
java/build/org/apache/derbyBuild/classlister.java,732,   Hashtable currentsChildren = (Hashtable) masterClassList.get(key);
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,99,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,99,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,101,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,100,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,100,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/splitmessages.java,46,    private static TreeSet clientMessageIds = new TreeSet();
java/client/org/apache/derby/client/am/Cursor.java,974,            return new java.math.BigDecimal( getInt( column ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/Price.java,49,"    public static Price makePrice( ) { return new Price( ""USD"", new BigDecimal( 1 ), DEFAULT_TIMESTAMP ); }"
java/testing/org/apache/derbyTesting/system/oe/client/Submitter.java,533,        BigDecimal c = new BigDecimal((long) count * 100L);
java/testing/org/apache/derbyTesting/system/oe/client/Submitter.java,534,        BigDecimal t = new BigDecimal((long) total);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,70,"            Types.DECIMAL, Types.NUMERIC, Types.BIT, Types.NULL, // Types.BOOLEAN"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,76,"            ""REAL"", ""FLOAT"", ""DOUBLE"", ""DECIMAL(10,5)"", null, null, null,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,84,"           ""98"",""98"", ""98"",""98"",null,null,null,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,302,"            /*10 null      */       { _, _, _, _, _, _, _, _, _, _, _, X, X, X, _, _, _, X, _, X, _, _},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,940,"                    assertEquals(32, b);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,965,"                    assertEquals(32, s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,991,"                    assertEquals(32, i);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1015,"                    assertEquals(32, l);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1042,"                    assertEquals(32.0, f, .000001);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1067,"                    assertEquals(32.0, d, .00001);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1095,"                            new BigDecimal(""32.0"").compareTo(bd));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1156,"                        assertEquals(""32"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1161,"                        assertEquals(""32.0"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1165,"                        assertEquals(""32.00000"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1626,        if (worked && B2_MOD[whichCall][type])
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1632,        else if (B2_MOD[whichCall][type]) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1648,        if (worked && B5[b5o][type])
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1654,        else if (B5[b5o][type]) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3553,        case Types.BIT: {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,710,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,711,"        assertEquals(""getURL match"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,712,"                getTestConfiguration().getJDBCUrl(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,713,                url);
java/testing/org/apache/derbyTesting/junit/Decorator.java,23,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/junit/Decorator.java,26,import javax.sql.DataSource;
java/testing/org/apache/derbyTesting/junit/Decorator.java,27,
java/testing/org/apache/derbyTesting/junit/Decorator.java,46,     * using encrpyption as a general test and
java/testing/org/apache/derbyTesting/junit/Decorator.java,56,     * <BR>
java/testing/org/apache/derbyTesting/junit/Decorator.java,57,     * The database is created during the setUp of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,66,
java/testing/org/apache/derbyTesting/junit/Decorator.java,67,        test = new BaseTestSetup(test) {
java/testing/org/apache/derbyTesting/junit/Decorator.java,68,
java/testing/org/apache/derbyTesting/junit/Decorator.java,69,            /**
java/testing/org/apache/derbyTesting/junit/Decorator.java,70,             * Create an encrypted database using a
java/testing/org/apache/derbyTesting/junit/Decorator.java,71,             * JDBC data source.
java/testing/org/apache/derbyTesting/junit/Decorator.java,72,             */
java/testing/org/apache/derbyTesting/junit/Decorator.java,73,            protected void setUp() throws SQLException
java/testing/org/apache/derbyTesting/junit/Decorator.java,74,            {
java/testing/org/apache/derbyTesting/junit/Decorator.java,75,                String bootPhrase = getBootPhrase(16);
java/testing/org/apache/derbyTesting/junit/Decorator.java,76,
java/testing/org/apache/derbyTesting/junit/Decorator.java,77,                DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/junit/Decorator.java,78,
java/testing/org/apache/derbyTesting/junit/Decorator.java,79,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,80,"                        ""createDatabase"", ""create"");"
java/testing/org/apache/derbyTesting/junit/Decorator.java,81,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,82,"                        ""connectionAttributes"","
java/testing/org/apache/derbyTesting/junit/Decorator.java,83,"                        ""dataEncryption=true;bootPassword="" + bootPhrase);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,84,
java/testing/org/apache/derbyTesting/junit/Decorator.java,85,                ds.getConnection().close();
java/testing/org/apache/derbyTesting/junit/Decorator.java,86,            }
java/testing/org/apache/derbyTesting/junit/Decorator.java,87,        };
java/testing/org/apache/derbyTesting/junit/Decorator.java,88,
java/testing/org/apache/derbyTesting/junit/Decorator.java,89,        return TestConfiguration.singleUseDatabaseDecorator(test);
java/testing/org/apache/derbyTesting/junit/Decorator.java,95,     * using encrpyption as a general test and
java/testing/org/apache/derbyTesting/junit/Decorator.java,105,     * <BR>
java/testing/org/apache/derbyTesting/junit/Decorator.java,106,     * The database is created during the setUp of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,107,
java/testing/org/apache/derbyTesting/junit/Decorator.java,114,        String bootPhrase = getBootPhrase(64);
java/testing/org/apache/derbyTesting/junit/Decorator.java,115,
java/testing/org/apache/derbyTesting/junit/Decorator.java,116,        String attributes =
java/testing/org/apache/derbyTesting/junit/Decorator.java,117,"            ""dataEncryption=true;bootPassword="" + bootPhrase +"
java/testing/org/apache/derbyTesting/junit/Decorator.java,118,"             "";encryptionAlgorithm="" + algorithm;"
java/testing/org/apache/derbyTesting/junit/Decorator.java,121,
java/testing/org/apache/derbyTesting/junit/Decorator.java,143,     * set to the passed in locale. Database is created
java/testing/org/apache/derbyTesting/junit/Decorator.java,144,     * by the setUp method of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,150,
java/testing/org/apache/derbyTesting/junit/Decorator.java,151,"        String attributes = ""collation=TERRITORY_BASED"";"
java/testing/org/apache/derbyTesting/junit/Decorator.java,154,"            attributes = attributes.concat("";territory="" + locale);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,162,     * set to the passed in locale. Database is created
java/testing/org/apache/derbyTesting/junit/Decorator.java,163,     * by the setUp method of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,169,
java/testing/org/apache/derbyTesting/junit/Decorator.java,170,"        String attributes = ""collation=TERRITORY_BASED:SECONDARY"";"
java/testing/org/apache/derbyTesting/junit/Decorator.java,173,"            attributes = attributes.concat("";territory="" + locale);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,180,     * as the default database. The database is created by the setUp
java/testing/org/apache/derbyTesting/junit/Decorator.java,181,     * method of the decorator. The database will be created using
java/testing/org/apache/derbyTesting/junit/Decorator.java,182,     * a JDBC data source with createDatabase set to create and
java/testing/org/apache/derbyTesting/junit/Decorator.java,183,     * connectionAttributes set to the passed in attributes.
java/testing/org/apache/derbyTesting/junit/Decorator.java,185,     *
java/testing/org/apache/derbyTesting/junit/Decorator.java,186,     * @param attributes Value to set connectionAttributes to when creating
java/testing/org/apache/derbyTesting/junit/Decorator.java,187,     * the database.
java/testing/org/apache/derbyTesting/junit/Decorator.java,191,"    private static Test attributesDatabase(final String attributes, Test test)"
java/testing/org/apache/derbyTesting/junit/Decorator.java,193,        test = new BaseTestSetup(test) {
java/testing/org/apache/derbyTesting/junit/Decorator.java,194,
java/testing/org/apache/derbyTesting/junit/Decorator.java,195,            /**
java/testing/org/apache/derbyTesting/junit/Decorator.java,196,             * Create a  database
java/testing/org/apache/derbyTesting/junit/Decorator.java,197,             * using a JDBC data source with connectionAttributes set.
java/testing/org/apache/derbyTesting/junit/Decorator.java,198,             */
java/testing/org/apache/derbyTesting/junit/Decorator.java,199,            protected void setUp() throws SQLException
java/testing/org/apache/derbyTesting/junit/Decorator.java,200,            {
java/testing/org/apache/derbyTesting/junit/Decorator.java,201,                DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/junit/Decorator.java,202,
java/testing/org/apache/derbyTesting/junit/Decorator.java,203,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,204,"                        ""createDatabase"", ""create"");"
java/testing/org/apache/derbyTesting/junit/Decorator.java,205,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,206,"                        ""connectionAttributes"", attributes);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,207,
java/testing/org/apache/derbyTesting/junit/Decorator.java,208,                ds.getConnection().close();
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,76,"            return DriverManager.getConnection(url, user, password);"
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,91,            Properties attributes = new Properties();
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,92,"            attributes.setProperty(""user"", user);"
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,93,"            attributes.setProperty(""password"", password);"
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,129,
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1746,
java/build/org/apache/derbyBuild/GeneratorBase.java,97,    protected final String releaseID;
java/build/org/apache/derbyBuild/GeneratorBase.java,107,"     * Establishes state, including currrent version number."
java/build/org/apache/derbyBuild/GeneratorBase.java,114,        int thirdDigit = maint / 1000000;
java/build/org/apache/derbyBuild/GeneratorBase.java,115,        int fourthDigit = maint % 1000000;
java/build/org/apache/derbyBuild/GeneratorBase.java,117,"        releaseID = branch + ""."" + thirdDigit + ""."" + fourthDigit;"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4643,"     // DB2 does not have a BOOLEAN java.sql.bit type, it's sent as small"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4644,    if (pmeta.getParameterType(i+1) == Types.BOOLEAN)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4645,"     ps.setBoolean(i+1, (paramVal == 1));"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4646,    else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4647,"     ps.setShort(i+1, paramVal);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3534,            } else if (usingDerbyNetClient() &&
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3535,"                    (""setByte"".equals(method) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3536,"                     ""setObject(java.lang.Byte)"".equals(method) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3537,"                     ""setShort"".equals(method) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3538,"                     ""setObject(java.lang.Short)"".equals(method))) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3539,                // Special case for DERBY-4889.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3540,                assertFalse(b);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1636,        if (usingDerbyNetClient() && (whichCall == 8 /* getString */)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1637,                && (jdbcTypes[type] == Types.BOOLEAN)) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1638,            // Workaround for DERBY-4890.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1639,            shouldWork = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1640,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1641,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1666,        if (usingDerbyNetClient() && (b5o == 0 /* java.lang.String */)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1667,                && (jdbcTypes[type] == Types.BOOLEAN)) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1668,            // Workaround for DERBY-4890.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1669,            shouldWork = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1670,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1671,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3041,                TestConfiguration.embeddedSuite(BlobClob4BlobTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3042,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3043,                TestConfiguration.clientServerSuite(BlobClob4BlobTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3047,"            TestSuite encSuite = new TestSuite (""BlobClob4BlobTest:encrypted"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3048,            encSuite.addTestSuite (BlobClob4BlobTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,35,import org.apache.derbyTesting.junit.TestConfiguration;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,87,    private void createThreads(Thread [] t) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,89,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,91,                public void run() {threadWorker(); }});
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,120,    private void threadWorker() {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,121,        Connection threadConnection = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,122,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,125,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,126,"                /* If a connection hasn't been opened for this thread, open one */"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,127,                if (threadConnection == null){
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,128,                    threadConnection = openDefaultConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,129,                }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,130,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,185,    protected static Test encryptedBaseSuite(String name) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,186,        TestSuite suite = new TestSuite(name);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,187,        suite.addTestSuite(DeadlockModeTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,188,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,189,        return new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,190,"                DatabasePropertyTestSetup.setLockTimeouts(Decorator.encryptedDatabase(suite), 2, 4))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,191,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,192,            /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,193,             * Creates the tables used in the test cases.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,194,             * @exception SQLException if a database error occurs
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,195,             */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,196,            protected void decorateSQL(Statement stmt) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,197,            {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,198,"                stmt.execute(""create table t (i int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,199,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,200,"                stmt.executeUpdate(""insert into t values (1956)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,201,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,202,"                stmt.executeUpdate(""insert into t values (180)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,203,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,204,"                stmt.executeUpdate(""insert into t values (3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,205,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,206,        };
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,207,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,208,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,217,            suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,218,"                    encryptedBaseSuite(""DeadlockModeTest:encrypted"")"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,219,                    );
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,27,import java.util.WeakHashMap;
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,116, ColumnDescriptorList  columnDescriptorList;
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,122, /**
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,123,  * referencedColumnMap is thread local (since DERBY-2861)
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,124,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,125,  * It contains a weak hash map keyed by the the TableDescriptor
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,126,"  * and the value is the actual referencedColumnMap bitmap.  So,"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,127,  * each thread has a weak hash map it uses to find the appropriate
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,128,  * referencedColumnMap for 'this' TableDescriptor.
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,129,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,130,"  * Since the hash map is weak, when the TableDescriptor is no"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,131,  * longer referenced the hash entry can be garbage collected (it
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,132,"  * is the *key* of a weak hash map that is weak, not the value)."
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,133,  */
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,134, private static ThreadLocal referencedColumnMap = new ThreadLocal() {
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,135,   protected Object initialValue() {
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,136,    // Key: TableDescriptor
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,137,    // Value: FormatableBitSet
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,138,    return new WeakHashMap();
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,139,   }
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,140,  };
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,141,
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,143,  WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,145,  return (FormatableBitSet) (map.get(this));
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,151,  WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,152,"  map.put(this, newReferencedColumnMap);"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,305,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,117,    private static  final   String  BUILD_ENVIRONMENT_SECTION =
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,118,"            ""Build Environment"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,713,        TestConfiguration config = getTestConfiguration();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,714,        String expectedURL = usingEmbedded() ?
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,715,            config.getJDBCUrl() : config.getJDBCUrlWithAttributes();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1365,    /**
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1366,"     * Return the JDBC URL for connecting to the default database, including"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1367,     * any connection attributes.
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1368,     *
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1369,     * @return JDBC URL with connection attributes
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1370,     */
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1371,    public String getJDBCUrlWithAttributes() {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1372,        String attrs = getConnectionAttributesString();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1373,        if (attrs == null) {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1374,            return url;
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1375,        } else {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1376,            return url + ';' + attrs;
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1377,        }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1378,    }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1379,
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1433,     * @return connection attributes (can be {@code null})
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1435,    Properties getConnectionAttributes() {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1447,        if (connectionAttributes == null) {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1448,            return null;
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1449,        }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1450,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,275, public void executeConstantAction(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,276,    Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,277,        throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,278, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,279,  LanguageConnectionContext   lcc =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,280,            activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,281,  DataDictionary              dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,282,  DependencyManager           dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,283,  TransactionController       tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,310,"                 defragmentRows(tc, lcc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,318,  if (updateStatistics)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,319,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,320,   updateStatistics(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,438,    ColumnDescriptorList cdl = new ColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,439,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,446,"     addNewColumnToTable(activation, lcc, dd, tc, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,455,"     modifyColumnDefault(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,460,"     modifyColumnType(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,465,     modifyColumnConstraint(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,466,"                        activation, columnInfo[ix].name, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,493,      modifyColumnConstraint(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,494,"                            activation, columnInfo[ix].name, false);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,499,"     dropColumnFromTable(activation, columnInfo[ix].name);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,619,   compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,625,   truncateTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,633,  * @param   activation  the current activation
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,636, private void updateStatistics(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,637, throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,638, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,639,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,640,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,641,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,647,  DependencyManager dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,902,  * @param lcc    the language connection context
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,905, private void defragmentRows(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,906,"   TransactionController tc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,907,   LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,908,        throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,909, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,937,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,938,   ConglomerateDescriptor heapCD =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,939,                td.getConglomerateDescriptor(td.getHeapConglomerateId());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,940,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1290, private void addNewColumnToTable(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1291,"    Activation                  activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1292,"    LanguageConnectionContext   lcc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1293,"    DataDictionary              dd,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1294,"    TransactionController       tc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1295,    int                         ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1302,  DataDescriptorGenerator ddg         = dd.getDataDescriptorGenerator();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1365,"   updateNewAutoincrementColumn(activation, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1373,"   updateNewColumnToDefault(activation, columnDescriptor, lcc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1445,     * @param   activation  the current activation
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1450," private void dropColumnFromTable(Activation activation, String columnName )"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1453,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1454,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1455,  DependencyManager dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1456,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1524,"            dropColumnFromTable( activation, generatedColumnName );"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1735,  createNewBackingCongloms(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1736,"   newCongloms, (long[])null, activation, dd);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1750,  compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1825," private void modifyColumnType(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1826,          int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1827,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1828, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1829,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1830,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1831,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1832,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1862," private void modifyColumnConstraint(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1863,"          String colName,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1864,          boolean nullability)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1865,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1866, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1867,  LanguageConnectionContext lcc =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1868,            activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1869,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1870,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1871,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1872,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1930,  * @param   activation   activation
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1935," private void modifyColumnDefault(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1936,          int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1939,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1940,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1941,  DependencyManager dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1942,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1943,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1997,"   long maxValue = getColumnMax(activation, td, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1998,"           columnInfo[ix].autoincInc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1999,           columnInfo[ix].autoincStart);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2020, private void compressTable(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2021,    Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2028,  this.lcc        = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2029,  this.dd         = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2030,  this.dm         = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2031,  this.tc         = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2032,  this.activation = activation;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2033,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2080,  getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2212, private void truncateTable(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2219,  this.lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2220,  this.dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2221,  this.dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2222,  this.tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2223,  this.activation = activation;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2305,  getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2586, private void getAffectedIndexes(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2652,"   createNewBackingCongloms(newCongloms,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2653,"    indexConglomerateNumbers, activation, dd);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2746,"  long [] ixCongNums, Activation activation, DataDictionary dd)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2832,        int[] base_table_collation_ids = td.getColumnCollationIds();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2833,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3177,  * @param lcc    the language connection context
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3181, private void updateNewColumnToDefault
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3182, (
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3183,"  Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3184,"        ColumnDescriptor    columnDescriptor,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3185,  LanguageConnectionContext  lcc
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3186, )
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3187,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3188, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3221," private long getColumnMax(Activation activation, TableDescriptor td, String columnName,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3222,"         long increment, long initial)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3223,         throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3224, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3229,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3230,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3243," private void dropAllColumnDefaults(UUID tableId, DataDictionary dd)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3244,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3245, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3246,  ColumnDescriptorList cdl = td.getColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3247,  int      cdlSize = cdl.size();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3248,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3249,  for(int index = 0; index < cdlSize; index++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3250,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3251,   ColumnDescriptor cd = (ColumnDescriptor) cdl.elementAt(index);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3252,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3253,   // If column has a default we drop the default and
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3254,   // any dependencies
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3255,   if (cd.getDefaultInfo() != null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3256,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3257,    DefaultDescriptor defaultDesc = cd.getDefaultDescriptor(dd);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3258,"    dm.clearDependencies(lcc, defaultDesc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3259,   }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3260,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3261, }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3262,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3302," private void updateNewAutoincrementColumn(Activation activation, String columnName, long initial,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3306,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3307,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3529,
java/build/org/apache/derbyBuild/GeneratorBase.java,179,"                ""These notes describe the difference between Derby release "" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,217,"        String titleText = ""Release Notes for Derby "" + releaseID;"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,32,import junit.framework.TestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,106,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,493,"  softwareVersion = new DD_Version(this, DataDictionary.DD_VERSION_DERBY_10_7);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,494,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,746,
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,29,"    private String NAME = ""disk_layout"";"
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,28,"    private String NAME = ""end_format"";"
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,29,"    private String NAME = ""format_id"";"
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,29,"    private String NAME = ""purpose"";"
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,29,"    private String NAME = ""upgrade"";"
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,48, * @format_id ACCESS_BTREE_BRANCHCONTROLROW_V1_ID
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,50, * @purpose    Btree pages all have a control row at the front of every page.
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,54, * @upgrade    RESOLVE.
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,56, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,44, * @format_id ACCESS_BTREE_LEAFCONTROLROW_V1_ID
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,46, * @purpose   Btree pages all have a control row at the front of every page.  To
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,50, * @upgrade   This format was made obsolete in the kimono release.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,52, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,79, * @format_id ACCESS_B2I_V3_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,81, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,91, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,123, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,139, * @format_id ACCESS_B2I_V4_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,141, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,150, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,184, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,201, * @format_id ACCESS_B2I_V5_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,203, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,213," * @upgrade   This is the current version, no upgrade necessary."
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,215, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,63, * @format_id ACCESS_B2IUNDO_V1_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,65," * @purpose   Implements the LogicalUndo and Formatable interfaces, basically"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,69, * @upgrade   RESOLVE.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,71, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,29, * @format_id ACCESS_B2I_V4_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,31, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,40, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,74, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,35, * @format_id ACCESS_B2I_V3_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,37, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,47, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,79, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,78, * @format_id ACCESS_HEAP_V2_ID
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,80, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,90, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,122, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,131, * @format_id ACCESS_HEAP_V3_ID
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,133, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,137, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,149," * @upgrade   This is the current version, no upgrade necessary."
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,151, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,50, * @format_id ACCESS_HEAP_ROW_LOCATION_V1_ID
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,52, * @purpose   Object used to store the location of a row within a Heap table.
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,56, * @upgrade   The type of the btree determines the type of rowlocation stored.
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,61, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,35, * @format_id ACCESS_HEAP_V2_ID
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,37, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,47, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,79, * @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,44," @format_id none, format implied by AllocPage's format"
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,45, @purpose manage page status of page in extent
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,46, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,47, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,96, @end_format
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,107, @format_id RAW_STORE_ALLOC_PAGE
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,108, @purpose manage page allocation
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,109, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,110, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,123, @end_format
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,56, @format_id LOGOP_COPY_ROWS
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,59, @purpose copy some rows from one page to another
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,60, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,61, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,69, @end_format
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,62, @format_id LOGOP_DELETE
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,65, @purpose delete a record from a page.
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,66, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,67, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,75, @end_format
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,52, *  @format_id LOGOP_ENCRYPT_CONTAINER
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,55, * @purpose to record enctyption of container with a new encryption key.
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,56, * @upgrade
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,57, * @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,59, * @end_format
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,51, @format_id LOGOP_INIT_PAGE
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,54, @purpose initialized a page
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,55, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,56, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,63, @end_format
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,64, @format_id LOGOP_INSERT
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,67, @purpose insert a row onto a page
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,68, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,69, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,75, @end_format
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,49, @format_id LOGOP_INVALIDATE_PAGE
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,52, @purpose invalidate a page
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,53, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,54, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,57, @end_format
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,61," @format_id no format id, an abstract class."
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,62, @purpose provide methods for logical undo
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,63, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,64, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,70, @end_format
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,55, @format_id LOGOP_PAGE_LOGICAL_UNDO
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,58, @purpose undo a logical log operation
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,59, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,60, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,66, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,69," @format_id no format id, an abstract class."
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,70, @purpose provide methods for logical undo
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,71, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,72, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,76, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,50," @format_id no format id, an abstract class."
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,51, @purpose provide methods for physical undo
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,52, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,53, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,55, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,53, @format_id LOGOP_PAGE_PHYSICAL_UNDO
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,56, @purpose update a physiacl log operation
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,57, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,58, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,61, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,60, @format_id LOGOP_PURGE
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,63, @purpose purge num_rows from the page
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,64, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,65, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,72, @end_format
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,62, @format_id LOGOP_UPDATE_FIELD
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,65, @purpose update a field of a record on the page
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,66, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,67, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,76, @end_format
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,61, @format_id LOGOP_UPDATE
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,64, @purpose update a record on the page
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,65, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,66, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,73, @end_format
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,58, @format_id LOGOP_CHECKSUM
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,61, @purpose  checksum one or more log records while writing to disk
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,62, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,63, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,67, @end_format
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,74," @format_id no formatId, format is implied by the log file format and the"
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,76, @purpose the log record and optional data
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,77, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,78, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,83, @end_format
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,88," @format_id no formatId, format is implied by the log file format and the"
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,90, @purpose undo a previous log record
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,91, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,92, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,102, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,56, @format_id LOG_RECORD
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,59, @purpose The log record described every change to the persistent store
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,60, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,61, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,65, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,149, @format_id FILE_STREAM_LOG_FILE
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,150, @purpose The log control file contains information about which log files
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,152, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,153, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,168, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,175, @format_id FILE_STREAM_LOG_FILE
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,176, @purpose The log file contains log record which record all the changes
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,179, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,180, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,194, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,201, @format_id none.  The format is implied by the FILE_STREAM_LOG_FILE
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,202, @purpose The log record wrapper provides information for the log scan.
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,203, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,204, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,209, @end_format
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,66,"     * status flag is presumably off alread, but we reset it here"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1562,  long pageNumber;  // the page number of the new page
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1570,  long startSearch = lastAllocatedPage;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1635,     allocPage =
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1636,"                        findAllocPageForAdd(allocHandle, ntt, startSearch);"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2018,  synchronized(allocCache)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2019,  {
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2020,"   if (pagenum <= allocCache.getLastPageNumber(handle, firstAllocPageNumber) &&"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2021,"    allocCache.getPageStatus(handle, pagenum, firstAllocPageNumber) == AllocExtent.ALLOCATED_PAGE)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2022,    retval = true;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2023,  }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,180,      throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,480,  synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,482,"   // committed and dropped, do nothing."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,483,   // This file container has already been stubbified
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,484,   if (getCommittedDropState()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,485,    clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,486,    return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,487,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,489,"   // The container is about to change, need to wait till it is really"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,490,   // changed.  We are in the predirty state only for the duration
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,491,   // where the log record that changed the container has been sent to
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,492,   // the log and before the change actually happened.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,493,   while(preDirty == true)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,494,   {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,495,    waited = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,496,    try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,497,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,498,     wait();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,499,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,500,    catch (InterruptedException ie)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,501,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,502,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,503,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,504,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,506,   if (waited)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,507,   {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,508,    // someone else may have stubbified this while we waited
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,509,    if (getCommittedDropState())
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,510,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,511,     clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,512,     return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,513,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,514,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,517,   if (forRemove) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,519,    //    removeFile()
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,520,    //    clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,522,   } else if (isDirty()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,523,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,524,    try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,525,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,526,     // Cannot get the alloc page and write it out
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,527,"     // because in order to do so, the alloc page will need to"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,528,     // find this container object.  But this container object
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,529,     // is in the middle of being cleaned and may not be
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,530,     // 'found' and we will hang.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,531,     //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,532,"     // Instead, just clobber the container info, which is"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,533,     // checksum'ed seperately from the alloc page
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,534,     //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,535,                    writeRAFHeader(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,536,"                        getIdentity(),"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,537,"                        fileData,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,538,"           false,  // don't create, container exists"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,539,           true);  // syncfile
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,540,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,541,     clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,542,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,543,    } catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,544,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,545,     throw dataFactory.markCorrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,546,                        StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,547,"                            SQLState.FILE_CONTAINER_EXCEPTION, ioe,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,548,                            getIdentity() != null ?
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,549,"                               getIdentity().toString() : ""unknown"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,550,"                            ""clean"", fileName));"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,551,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,552,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,553,  }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,862,            return AccessController.doPrivileged( this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1037,                            throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,41, * RAFContainer4 overrides a few methods in RAFContainer in an attempt to use
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,42, * FileChannel from Java 1.4's New IO framework to issue multiple IO operations
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,43, * to the same file concurrently instead of strictly serializing IO operations
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,44, * using a mutex on the container object.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,78,    /**
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,82,    private int iosInProgress = 0;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,164,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,194,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,202,"        // If this is the first alloc page, there may be another thread"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,203,        // accessing the container information in the borrowed space on the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,204,"        // same page. In that case, we synchronize the entire method call, just"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,205,"        // like RAFContainer.readPage() does, in order to avoid conflicts. For"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,206,"        // all other pages it is safe to skip the synchronization, since"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,207,        // concurrent threads will access different pages and therefore don't
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,208,        // interfere with each other.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,209,        if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,210,            synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,211,"                readPage0(pageNumber, pageData);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,214,"            readPage0(pageNumber, pageData);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,218,"    private void readPage0(long pageNumber, byte[] pageData)"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,224,                SanityManager.ASSERT(!getCommittedDropState());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,244,"                readFull(pageBuf, ioChannel, pageOffset);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,256,                pageNumber != FIRST_ALLOC_PAGE_NUMBER)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,270,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,279,"        // If this is the first alloc page, there may be another thread"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,280,        // accessing the container information in the borrowed space on the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,281,"        // same page. In that case, we synchronize the entire method call, just"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,282,"        // like RAFContainer.writePage() does, in order to avoid conflicts. For"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,283,"        // all other pages it is safe to skip the synchronization, since"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,284,        // concurrent threads will access different pages and therefore don't
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,285,        // interfere with each other.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,286,        if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,287,            synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,288,"                writePage0(pageNumber, pageData, syncPage);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,291,"            writePage0(pageNumber, pageData, syncPage);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,362,"                            SanityManager.DEBUG_PRINT(""RAFContainer4"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,363,"                                ""Write to a dropped and closed container discarded."");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,413,"        } else { // iochannel was not initialized, fall back to original method."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,420,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,441,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,454,            ByteBuffer buffer =
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,455,                    ByteBuffer.allocate(AllocPage.MAX_BORROWED_SPACE);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,456,"            readFull(buffer, ioChannel, offset);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,457,            return buffer.array();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,481,            try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,482,"                if (srcChannel.read(dstBuffer,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,484,                        throw new EOFException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,485,"                            ""Reached end of file while attempting to read a """
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,486,"                            + ""whole page."");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,487,                }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,488,            } catch (ClosedByInterruptException e) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,489,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,490,"                    SQLState.FILE_IO_INTERRUPTED, e);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,511,"            throws IOException, StandardException"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,514,            try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,515,"                dstChannel.write(srcBuffer, position + srcBuffer.position());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,516,            } catch (ClosedByInterruptException e) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,517,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,518,"                    SQLState.FILE_IO_INTERRUPTED, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,2,  Class org.apache.derbyTesting.functionTests.tests.store.Derby151Test
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,40,public class Derby151Test extends BaseJDBCTestCase
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,43,    public Derby151Test(String name)
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,59,            suite.addTestSuite(Derby151Test.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,68,"        TestSuite suite = new TestSuite(""Derby151Test"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,73,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,75,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,77,"            baseSuite(""Derby151Test:embedded""));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,81,"                baseSuite(""Derby151Test:c/s"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,91,"        stmt.executeUpdate(""CREATE TABLE d151(x int primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,102,"        stmt.executeUpdate(""DROP TABLE d151"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,111,    public static void d151() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,116,"            insert = c.prepareStatement(""insert into d151 values (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,118,            for (int i = 0; i < 10000; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,121,                Thread.currentThread().interrupt();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,138,    public void testD151 () throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,141,"            ""create procedure D151 () MODIFIES SQL DATA "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,143,"            "".tests.store.Derby151Test.d151' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,146,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,147,"            s.executeUpdate(""call D151()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,149,"            // We were not able to prokove any error, but that should not fail"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,150,            // the test; the results here may depend on VMs possibly.  So just
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,151,            // report this fact in verbose mode:
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,153,"            println(""Not able to test fix for DERBY-151: No interrupt seen"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,154,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,155,"            assertSQLState(""XSDG9"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,156,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,60,        suite.addTest(Derby151Test.suite());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,901, synchronized boolean openContainer(ContainerKey newIdentity)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,908,            boolean success = AccessController.doPrivileged(this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,909,            if (success) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,910,                currentIdentity = newIdentity;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,911,            }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,924,        {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,718,"            // Another interrupted thread got to do the cleanup before us, so"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,811,                        } catch (Exception newE) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,813,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,814,                            if (InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,815,"                                        ""RAF: isInterrupted during recovery"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,816,"                                        threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,817,                                        hashCode())) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,818,                                continue;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,819,                            } else {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,820,                                // Something else failed - shutdown happening?
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,821,                                synchronized(giveUpIOm) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,822,                                    // Make sure other threads will give up and
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,823,"                                    // throw, too."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,824,                                    giveUpIO = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,825,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,826,                                    if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,827,                                        debugTrace(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,828,"                                            ""can't resurrect container: "" +"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,829,                                            newE);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,830,                                    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,841,                threadsInPageIO++;
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,53,    public IndexStatsUtil(Connection con)
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,54,            throws SQLException {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,56,        Assert.assertTrue(con.getAutoCommit());
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,88,"        assertStatCount(getStats(), ""<ALL>"", expectedCount, false);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,101,"        assertStatCount(getStatsTable(table), table, expectedCount, false);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,114,"        assertStatCount(getStatsIndex(index), index, expectedCount, true);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,115,    }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,116,
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,117,    /**
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,118,     * Asserts that the expected number of statistics exists.
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,119,     *
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,120,     * @param stats statistics
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,121,     * @param conglom conglomerate name
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,122,     * @param expectedCount expected number of statistics
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,123,     * @param isIndex {@code true} if the conglomerate is an index
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,124,     */
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,125,"    private void assertStatCount(IdxStats[] stats, String conglom,"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,126,"                                 int expectedCount, boolean isIndex) {"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,127,        if (stats.length != expectedCount) {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,128,"            String name = (isIndex ? ""index "" : ""table "") + ""'"" + conglom + ""'"";"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,129,"            Assert.assertEquals(buildStatString(stats, name),"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,130,"                    expectedCount, stats.length);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,131,        }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,142,        String SEP =
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,143,"                BaseJDBCTestCase.getSystemProperty(""line.separator"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,166,"                    ""select * from SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,184,        if (psGetStatsForTable == null) {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,185,            psGetStatsForTable = con.prepareStatement(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,186,"                ""select * from SYS.SYSSTATISTICS where TABLEID = ?"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,187,        }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,194,"        psGetStatsForTable.setString(1, tableId);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,195,        return buildStatisticsList(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,196,"                psGetStatsForTable.executeQuery(), getIdToNameMap());"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,214,        if (psGetStatsForIndex == null) {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,215,            psGetStatsForIndex = con.prepareStatement(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,216,"                   ""select * from SYS.SYSSTATISTICS where REFERENCEID = ?"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,217,        }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,224,"        psGetStatsForIndex.setString(1, indexId);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,225,        return buildStatisticsList(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,226,"                psGetStatsForIndex.executeQuery(), getIdToNameMap());"
java/testing/org/apache/derbyTesting/junit/Utilities.java,3, * Derby - Class Utilities
java/testing/org/apache/derbyTesting/junit/Utilities.java,25,import java.io.IOException;
java/testing/org/apache/derbyTesting/junit/Utilities.java,30,import java.security.AccessController;
java/testing/org/apache/derbyTesting/junit/Utilities.java,31,import java.security.PrivilegedActionException;
java/testing/org/apache/derbyTesting/junit/Utilities.java,32,import java.security.PrivilegedExceptionAction;
java/testing/org/apache/derbyTesting/junit/Utilities.java,40, * General non-JDBC related utilities relocated from TestUtil
java/testing/org/apache/derbyTesting/junit/Utilities.java,41, *
java/testing/org/apache/derbyTesting/junit/Utilities.java,42, *
java/testing/org/apache/derbyTesting/junit/Utilities.java,46,    public Utilities() {
java/testing/org/apache/derbyTesting/junit/Utilities.java,47,        // TODO Auto-generated constructor stub
java/testing/org/apache/derbyTesting/junit/Utilities.java,48,    }
java/testing/org/apache/derbyTesting/junit/Utilities.java,49,        /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,50,         * Just converts a string to a hex literal to assist in converting test
java/testing/org/apache/derbyTesting/junit/Utilities.java,51,         * cases that used to insert strings into bit data tables
java/testing/org/apache/derbyTesting/junit/Utilities.java,52,         * Converts using UTF-16BE just like the old casts used to.
java/testing/org/apache/derbyTesting/junit/Utilities.java,53,         *
java/testing/org/apache/derbyTesting/junit/Utilities.java,54,         * @param s  String to convert  (e.g
java/testing/org/apache/derbyTesting/junit/Utilities.java,55,         * @return hex literal that can be inserted into a bit column.
java/testing/org/apache/derbyTesting/junit/Utilities.java,56,         */
java/testing/org/apache/derbyTesting/junit/Utilities.java,57,        public static String stringToHexLiteral(String s)
java/testing/org/apache/derbyTesting/junit/Utilities.java,58,        {
java/testing/org/apache/derbyTesting/junit/Utilities.java,59,                byte[] bytes;
java/testing/org/apache/derbyTesting/junit/Utilities.java,60,                String hexLiteral = null;
java/testing/org/apache/derbyTesting/junit/Utilities.java,61,                try {
java/testing/org/apache/derbyTesting/junit/Utilities.java,62,"                        bytes = s.getBytes(""UTF-16BE"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,63,                        hexLiteral = convertToHexString(bytes);
java/testing/org/apache/derbyTesting/junit/Utilities.java,64,                }
java/testing/org/apache/derbyTesting/junit/Utilities.java,65,                catch (UnsupportedEncodingException ue)
java/testing/org/apache/derbyTesting/junit/Utilities.java,66,                {
java/testing/org/apache/derbyTesting/junit/Utilities.java,67,"                        System.out.println(""This shouldn't happen as UTF-16BE should be supported"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,68,                        ue.printStackTrace();
java/testing/org/apache/derbyTesting/junit/Utilities.java,69,                }
java/testing/org/apache/derbyTesting/junit/Utilities.java,71,                return hexLiteral;
java/testing/org/apache/derbyTesting/junit/Utilities.java,74,        /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,75,         * Convert a byte array to a hex string suitable for insert
java/testing/org/apache/derbyTesting/junit/Utilities.java,76,         * @param buf  byte array to convert
java/testing/org/apache/derbyTesting/junit/Utilities.java,77,         * @return     formated string representing byte array
java/testing/org/apache/derbyTesting/junit/Utilities.java,78,         */
java/testing/org/apache/derbyTesting/junit/Utilities.java,79,        private static String convertToHexString(byte [] buf)
java/testing/org/apache/derbyTesting/junit/Utilities.java,80,        {
java/testing/org/apache/derbyTesting/junit/Utilities.java,81,                StringBuffer str = new StringBuffer();
java/testing/org/apache/derbyTesting/junit/Utilities.java,82,"                str.append(""X'"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,83,                String val;
java/testing/org/apache/derbyTesting/junit/Utilities.java,84,                int byteVal;
java/testing/org/apache/derbyTesting/junit/Utilities.java,85,                for (int i = 0; i < buf.length; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,86,                {
java/testing/org/apache/derbyTesting/junit/Utilities.java,87,                        byteVal = buf[i] & 0xff;
java/testing/org/apache/derbyTesting/junit/Utilities.java,88,                        val = Integer.toHexString(byteVal);
java/testing/org/apache/derbyTesting/junit/Utilities.java,89,                        if (val.length() < 2)
java/testing/org/apache/derbyTesting/junit/Utilities.java,90,"                                str.append(""0"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,91,                        str.append(val);
java/testing/org/apache/derbyTesting/junit/Utilities.java,92,                }
java/testing/org/apache/derbyTesting/junit/Utilities.java,93,"                return str.toString() +""'"";"
java/testing/org/apache/derbyTesting/junit/Utilities.java,96,     /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,97,      * repeatChar is used to create strings of varying lengths.
java/testing/org/apache/derbyTesting/junit/Utilities.java,98,      * called from various tests to test edge cases and such.
java/testing/org/apache/derbyTesting/junit/Utilities.java,99,      *
java/testing/org/apache/derbyTesting/junit/Utilities.java,100,      * @param c             character to repeat
java/testing/org/apache/derbyTesting/junit/Utilities.java,101,      * @param repeatCount   Number of times to repeat character
java/testing/org/apache/derbyTesting/junit/Utilities.java,102,      * @return              String of repeatCount characters c
java/testing/org/apache/derbyTesting/junit/Utilities.java,103,      */
java/testing/org/apache/derbyTesting/junit/Utilities.java,104,"       public static String repeatChar(String c, int repeatCount)"
java/testing/org/apache/derbyTesting/junit/Utilities.java,105,       {
java/testing/org/apache/derbyTesting/junit/Utilities.java,106,        char ch = c.charAt(0);
java/testing/org/apache/derbyTesting/junit/Utilities.java,107,
java/testing/org/apache/derbyTesting/junit/Utilities.java,108,        char[] chArray = new char[repeatCount];
java/testing/org/apache/derbyTesting/junit/Utilities.java,109,        for (int i = 0; i < repeatCount; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,110,        {
java/testing/org/apache/derbyTesting/junit/Utilities.java,111,         chArray[i] = ch;
java/testing/org/apache/derbyTesting/junit/Utilities.java,112,        }
java/testing/org/apache/derbyTesting/junit/Utilities.java,113,
java/testing/org/apache/derbyTesting/junit/Utilities.java,114,        return new String(chArray);
java/testing/org/apache/derbyTesting/junit/Utilities.java,115,
java/testing/org/apache/derbyTesting/junit/Utilities.java,116,       }
java/testing/org/apache/derbyTesting/junit/Utilities.java,117,
java/testing/org/apache/derbyTesting/junit/Utilities.java,118,        /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,119,"         * Print out resultSet in two dimensional array format, for use by"
java/testing/org/apache/derbyTesting/junit/Utilities.java,120,"         * JDBC.assertFullResultSet(rs,expectedRows) expectedRows argument."
java/testing/org/apache/derbyTesting/junit/Utilities.java,121,         * Useful while converting tests to get output in correct format.
java/testing/org/apache/derbyTesting/junit/Utilities.java,122,         *
java/testing/org/apache/derbyTesting/junit/Utilities.java,123,         * @param rs
java/testing/org/apache/derbyTesting/junit/Utilities.java,124,         * @throws SQLException
java/testing/org/apache/derbyTesting/junit/Utilities.java,125,         */
java/testing/org/apache/derbyTesting/junit/Utilities.java,126,        public static void showResultSet(ResultSet rs) throws SQLException {
java/testing/org/apache/derbyTesting/junit/Utilities.java,128,            int row = 0;
java/testing/org/apache/derbyTesting/junit/Utilities.java,129,            boolean next = rs.next();
java/testing/org/apache/derbyTesting/junit/Utilities.java,130,            while (next) {
java/testing/org/apache/derbyTesting/junit/Utilities.java,131,                row++;
java/testing/org/apache/derbyTesting/junit/Utilities.java,132,                ResultSetMetaData rsmd = rs.getMetaData();
java/testing/org/apache/derbyTesting/junit/Utilities.java,133,                int nocols = rsmd.getColumnCount();
java/testing/org/apache/derbyTesting/junit/Utilities.java,134,"                System.out.print(""{"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,135,
java/testing/org/apache/derbyTesting/junit/Utilities.java,136,                for (int i = 0; i < nocols; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,137,                {
java/testing/org/apache/derbyTesting/junit/Utilities.java,138,                 String val = rs.getString(i+1);
java/testing/org/apache/derbyTesting/junit/Utilities.java,139,                 if (val == null)
java/testing/org/apache/derbyTesting/junit/Utilities.java,140,"                  System.out.print(""null"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,141,                 else
java/testing/org/apache/derbyTesting/junit/Utilities.java,142,"                  System.out.print(""\"""" + rs.getString(i+1) + ""\"""");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,143,                    if (i == (nocols -1))
java/testing/org/apache/derbyTesting/junit/Utilities.java,144,"                        System.out.print(""}"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,145,                    else
java/testing/org/apache/derbyTesting/junit/Utilities.java,146,"                        System.out.print("","");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,147,
java/testing/org/apache/derbyTesting/junit/Utilities.java,149,                next = rs.next();
java/testing/org/apache/derbyTesting/junit/Utilities.java,150,
java/testing/org/apache/derbyTesting/junit/Utilities.java,151,                if (next)
java/testing/org/apache/derbyTesting/junit/Utilities.java,152,"                    System.out.println("","");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,153,                else
java/testing/org/apache/derbyTesting/junit/Utilities.java,154,"                    System.out.println(""};\n"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,157,
java/testing/org/apache/derbyTesting/junit/Utilities.java,159,     * Calls the public method <code>getInfo</code> of the sysinfo tool within
java/testing/org/apache/derbyTesting/junit/Utilities.java,160,     * this JVM and returns a <code>BufferedReader</code> for reading its
java/testing/org/apache/derbyTesting/junit/Utilities.java,176,                    new InputStreamReader(
java/testing/org/apache/derbyTesting/junit/Utilities.java,177,                            new ByteArrayInputStream(outBytes)));
java/testing/org/apache/derbyTesting/junit/Utilities.java,180,
java/testing/org/apache/derbyTesting/junit/Utilities.java,182,     * <p>Calls the public method <code>getSysInfo()</code> of the Network
java/testing/org/apache/derbyTesting/junit/Utilities.java,195,
java/testing/org/apache/derbyTesting/junit/Utilities.java,199,
java/testing/org/apache/derbyTesting/junit/Utilities.java,205,"     * <code>String.split(String regex)</code>, which is not available"
java/testing/org/apache/derbyTesting/junit/Utilities.java,212,"    static public String[] split(String str, char delim)"
java/testing/org/apache/derbyTesting/junit/Utilities.java,213,    {
java/testing/org/apache/derbyTesting/junit/Utilities.java,214,        if (str == null) {
java/testing/org/apache/derbyTesting/junit/Utilities.java,215,"            throw new NullPointerException(""str can't be null"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,216,        }
java/testing/org/apache/derbyTesting/junit/Utilities.java,217,
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,305,   int errorSeverity = error instanceof StandardException ?
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,306,    ((StandardException) error).getSeverity() :
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,307,    ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java,33,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java,30,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,40,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,1,/*
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,2,   Derby - Class org.apache.derby.iapi.error.ExceptionUtil
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,3,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,4,   Licensed to the Apache Software Foundation (ASF) under one or more
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,5,   contributor license agreements.  See the NOTICE file distributed with
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,6,   this work for additional information regarding copyright ownership.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,7,"   The ASF licenses this file to you under the Apache License, Version 2.0"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,8,"   (the ""License""); you may not use this file except in compliance with"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,9,   the License.  You may obtain a copy of the License at
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,10,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,11,      http://www.apache.org/licenses/LICENSE-2.0
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,12,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,13,"   Unless required by applicable law or agreed to in writing, software"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,14,"   distributed under the License is distributed on an ""AS IS"" BASIS,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,15,"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,16,   See the License for the specific language governing permissions and
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,17,   limitations under the License.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,18,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,19, */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,20,package org.apache.derby.iapi.error;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,21,/* Until DERBY-289 related issue settle for shared code
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,22, * Engine have similar code as client code even though some of
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,23," * code is potentially sharable. If you fix a bug in ExceptionUtil for engine,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,24, * please also change the code in
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,25, * java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java for
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,26, * client if necessary.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,27, */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,28,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,29,import java.io.PrintWriter;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,30,import java.io.StringWriter;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,31,import java.lang.reflect.InvocationTargetException;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,32,import java.lang.reflect.Method;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,33,import java.security.AccessControlException;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,34,import java.security.AccessController;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,35,import java.security.PrivilegedActionException;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,36,import java.security.PrivilegedExceptionAction;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,37,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,38,import org.apache.derby.shared.common.error.ExceptionSeverity;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,39,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,40,/**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,41, * This class provides utility routines for exceptions
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,42, */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,43,public class ExceptionUtil
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,44,{
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,45,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,46,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,47,    /**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,48,     *  Convert a message identifier from
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,49,     *  org.apache.derby.shared.common.reference.SQLState to
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,50,     *  a SQLState five character string.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,51,     *
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,52,     * @param messageID - the sql state id of the message from Derby
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,53,     * @return String   - the 5 character code of the SQLState ID to returned to the user
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,54,     */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,55,    public static String getSQLStateFromIdentifier(String messageID) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,56,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,57,        if (messageID.length() == 5)
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,58,            return messageID;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,59,"        return messageID.substring(0, 5);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,60,    }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,61,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,62,    /**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,63,     * Get the severity given a message identifier from SQLState.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,64,     */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,65,    public static int getSeverityFromIdentifier(String messageID) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,66,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,67,        int lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,68,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,69,        switch (messageID.length()) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,70,        case 5:
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,71,            switch (messageID.charAt(0)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,72,            case '0':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,73,                switch (messageID.charAt(1)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,74,                case '1':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,75,                    lseverity = ExceptionSeverity.WARNING_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,76,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,77,                case 'A':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,78,                case '7':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,79,                    lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,80,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,81,                case '8':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,82,                    lseverity = ExceptionSeverity.SESSION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,83,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,84,                }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,85,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,86,            case '2':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,87,            case '3':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,88,                lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,89,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,90,            case '4':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,91,                switch (messageID.charAt(1)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,92,                case '0':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,93,                    lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,94,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,95,                case '2':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,96,                    lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,97,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,98,                }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,99,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,100,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,101,            break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,102,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,103,        default:
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,104,            switch (messageID.charAt(6)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,105,            case 'M':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,106,                lseverity = ExceptionSeverity.SYSTEM_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,107,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,108,            case 'D':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,109,                lseverity = ExceptionSeverity.DATABASE_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,110,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,111,            case 'C':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,112,                lseverity = ExceptionSeverity.SESSION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,113,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,114,            case 'T':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,115,                lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,116,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,117,            case 'S':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,118,                lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,119,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,120,            case 'U':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,121,                lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,122,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,123,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,124,            break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,125,        }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,126,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,127,        return lseverity;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,128,    }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,129,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,130,    /**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,131,     * Dumps stack traces for all the threads if the JVM supports it.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,132,"     * The result is returned as a string, ready to print."
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,133,     *
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,134,     * If the JVM doesn't have the method Thread.getAllStackTraces
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,135,"     * i.e, we are on a JVM < 1.5, or  if we don't have the permissions:"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,136,"     * java.lang.RuntimePermission ""getStackTrace"" and ""modifyThreadGroup"","
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,137,     * a message saying so is returned instead.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,138,     *
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,139,     * @return stack traces for all live threads as a string or an error message.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,140,     */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,141,    public static String dumpThreads() {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,142,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,143,        StringWriter out = new StringWriter();
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,144,"        PrintWriter p = new PrintWriter(out, true);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,145,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,146,        //Try to get a thread dump and deal with various situations.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,147,        try {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,148,            //This checks that we are on a jvm >= 1.5 where we
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,149,            //can actually do threaddumps.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,150,"            Thread.class.getMethod(""getAllStackTraces"", new Class[] {});"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,151,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,152,            //Then get the thread dump.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,153,"            Class c = Class.forName(""org.apache.derby.iapi.error.ThreadDump"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,154,"            final Method m = c.getMethod(""getStackDumpString"",new Class[] {});"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,155,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,156,            String dump;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,157,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,158,            dump = (String) AccessController.doPrivileged
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,159,            (new PrivilegedExceptionAction(){
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,160,                public Object run() throws
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,161,"                IllegalArgumentException,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,162,"                IllegalAccessException,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,163,                InvocationTargetException{
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,164,"                    return m.invoke(null, null);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,165,                }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,166,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,167,            );
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,168,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,169,            //Print the dump to the message string. That went OK.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,170,"            p.print(""---------------\nStack traces for all "" +"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,171,"            ""live threads:"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,172,"            p.println(""\n"" + dump);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,173,"            p.println(""---------------"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,174,        } catch (NoSuchMethodException e) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,175,"            p.println(""(Skipping thread dump because it is not "" +"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,176,"            ""supported on JVM 1.4)"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,177,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,178,        } catch (Exception e) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,179,            if (e instanceof PrivilegedActionException &&
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,180,                e.getCause() instanceof InvocationTargetException &&
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,181,                e.getCause().getCause() instanceof AccessControlException){
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,182,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,183,"                p.println(""(Skipping thread dump """
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,184,"                        + ""because of insufficient permissions:\n"""
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,185,"                        + e.getCause().getCause() + "")\n"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,186,            } else {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,187,"                p.println(""\nAssertFailure tried to do a thread dump, but """
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,188,"                        + ""there was an error:"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,189,                e.getCause().printStackTrace(p);
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,190,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,191,        }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,192,        return out.toString();
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,193,    }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,194,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,195,}
java/engine/org/apache/derby/iapi/error/ThreadDump.java,1,/*
java/engine/org/apache/derby/iapi/error/ThreadDump.java,2,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,3,   Derby - Class org.apache.derby.iapi.error.ThreadDump
java/engine/org/apache/derby/iapi/error/ThreadDump.java,4,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,5,   Licensed to the Apache Software Foundation (ASF) under one or more
java/engine/org/apache/derby/iapi/error/ThreadDump.java,6,   contributor license agreements.  See the NOTICE file distributed with
java/engine/org/apache/derby/iapi/error/ThreadDump.java,7,   this work for additional information regarding copyright ownership.
java/engine/org/apache/derby/iapi/error/ThreadDump.java,8,"   The ASF licenses this file to you under the Apache License, Version 2.0"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,9,"   (the ""License""); you may not use this file except in compliance with"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,10,   the License.  You may obtain a copy of the License at
java/engine/org/apache/derby/iapi/error/ThreadDump.java,11,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,12,      http://www.apache.org/licenses/LICENSE-2.0
java/engine/org/apache/derby/iapi/error/ThreadDump.java,13,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,14,"   Unless required by applicable law or agreed to in writing, software"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,15,"   distributed under the License is distributed on an ""AS IS"" BASIS,"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,16,"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/engine/org/apache/derby/iapi/error/ThreadDump.java,17,   See the License for the specific language governing permissions and
java/engine/org/apache/derby/iapi/error/ThreadDump.java,18,   limitations under the License.
java/engine/org/apache/derby/iapi/error/ThreadDump.java,19,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,20, */
java/engine/org/apache/derby/iapi/error/ThreadDump.java,21,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,22,package org.apache.derby.iapi.error;
java/engine/org/apache/derby/iapi/error/ThreadDump.java,23,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,24,/* Until DERBY-289 related issue settle for shared code
java/engine/org/apache/derby/iapi/error/ThreadDump.java,25, * Engine have similar code as client code even though some of
java/engine/org/apache/derby/iapi/error/ThreadDump.java,26," * code is potentially sharable. If you fix a bug in ThreadDump for engine,"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,27, * please also change the code in
java/engine/org/apache/derby/iapi/error/ThreadDump.java,28, * java/shared/org/apache/derby/shared/common/sanity/ThreadDump.java for
java/engine/org/apache/derby/iapi/error/ThreadDump.java,29, * client if necessary.
java/engine/org/apache/derby/iapi/error/ThreadDump.java,30, */
java/engine/org/apache/derby/iapi/error/ThreadDump.java,31,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,32,import java.util.Map;
java/engine/org/apache/derby/iapi/error/ThreadDump.java,33,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,34,public class ThreadDump {
java/engine/org/apache/derby/iapi/error/ThreadDump.java,35,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,36,    /**
java/engine/org/apache/derby/iapi/error/ThreadDump.java,37,     *
java/engine/org/apache/derby/iapi/error/ThreadDump.java,38,     * @return A string representation of a full thread dump
java/engine/org/apache/derby/iapi/error/ThreadDump.java,39,     */
java/engine/org/apache/derby/iapi/error/ThreadDump.java,40,    public static String getStackDumpString() {
java/engine/org/apache/derby/iapi/error/ThreadDump.java,41,        StringBuffer sb = new StringBuffer();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,42,"        Map<Thread, StackTraceElement[]> st = Thread.getAllStackTraces();"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,43,"        for (Map.Entry<Thread, StackTraceElement[]> e : st.entrySet()) {"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,44,            StackTraceElement[] lines = e.getValue();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,45,            Thread t = e.getKey();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,46,"            sb.append(""Thread name="" + t.getName() + "" id="" + t.getId()"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,47,"                    + "" priority="" + t.getPriority() + "" state="" + t.getState()"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,48,"                    + "" isdaemon="" + t.isDaemon() + ""\n"");"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,49,            for (int i = 0; i < lines.length; i++) {
java/engine/org/apache/derby/iapi/error/ThreadDump.java,50,"                sb.append(""\t"" + lines[i] + ""\n"");"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,51,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,52,            }
java/engine/org/apache/derby/iapi/error/ThreadDump.java,53,"            sb.append(""\n"");"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,54,        }
java/engine/org/apache/derby/iapi/error/ThreadDump.java,55,        return sb.toString();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,56,    }
java/engine/org/apache/derby/iapi/error/ThreadDump.java,57,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,58,}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,54,"        props.setProperty(""derby.storage.checkpointInterval"", ""100000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,57,        return new CleanDatabaseTestSetup(suite) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,58,            protected void decorateSQL(Statement s) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,59,                // Create and populate a table to be used for flushing the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,60,                // cache. Flushing the cache causes all row count changes to be
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,61,"                // written, which is necessary for the results of this test to"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,62,                // be stable (because otherwise the row count changes would be
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,63,                // written asynchronously)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,64,"                s.executeUpdate(""create table flusher (c1 varchar(3000))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,65,                PreparedStatement ps = getConnection().prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,66,"                    ""insert into flusher values ?"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,67,"                ps.setString(1, Formatters.padString(""a"", 3000));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,68,                for (int i = 0; i < 64; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,69,                    ps.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,70,                }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,71,                ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,72,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,73,        };
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,101,     * Flush the cache so that row count changes are visible.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,104,        JDBC.assertFullResultSet(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,105,"            stmt.executeQuery(""select count(c1) from flusher""),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,106,"            new String[][] { { ""64"" } });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,237,        // Change the row count a little bit
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,238,        for (int i = 1025; i <= 1034; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,257,"            JDBC.assertFullResultSet(ps.executeQuery(),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,258,"                                     new String[][] { { ""1034"" } });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,275,"            JDBC.assertFullResultSet(ps.executeQuery(),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,276,"                                     new String[][] { { ""2068"" } });"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,82,    private Object channelCleanupMonitor = new Object();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,665,"                        // Max 60s, then give up, probably way too long anyway,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,718,"     * @return true if we did it, false if we saw someone else do it and"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,884,                SanityManager.ASSERT(Thread.currentThread().holdsLock(this));
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,886,                SanityManager.ASSERT(!Thread.currentThread().holdsLock(this));
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1068,        boolean beforeOpen = srcChannel.isOpen();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1069,        boolean beforeInterrupted = Thread.currentThread().isInterrupted();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1070,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1108,        boolean beforeOpen = dstChannel.isOpen();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1109,        boolean beforeInterrupted = Thread.currentThread().isInterrupted();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1110,
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,125,    private final String text;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,33,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,43,import org.apache.derby.impl.sql.execute.DropTriggerConstantAction;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,311,  * Get the trigger action sps
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,414,   referencedColInts = new int[triggerCols.size()];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,434,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,435,    referencedColInts[i] = cd.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,437,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,438,   // sort the list
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,439,   java.util.Arrays.sort(referencedColInts);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,470, **  DELETE FROM t WHERE c = old.c
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,472, **  DELETE FROM t WHERE c = org.apache.derby.iapi.db.Factory::
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,473, **     getTriggerExecutionContext().getOldRow().getInt('C');
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,475, **  DELETE FROM t WHERE c in (SELECT c FROM OLD)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,477, **  DELETE FROM t WHERE c in (SELECT c FROM new TriggerOldTransitionTable OLD)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,503, ** More information on step 4 above.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,504, ** DERBY-1482 One of the work done by this method for row level triggers
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,505, ** is to find the columns which are referenced in the trigger action
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,506, ** through the REFERENCES clause ie thro old/new transition variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,507, ** This information will be saved in SYSTRIGGERS so it can be retrieved
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,508, ** during the trigger execution time. The purpose of this is to recognize
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,509, ** what columns from the trigger table should be read in during trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,510," ** execution. Before these code change, during trigger execution, Derby"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,511, ** was opting to read all the columns from the trigger table even if they
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,512, ** were not all referenced during the trigger execution. This caused Derby
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,513, ** to run into OOM at times when it could really be avoided.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,514, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,515, ** We go through the trigger action text and collect the column positions
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,516, ** of all the REFERENCEd columns through new/old transition variables. We
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,517," ** keep that information in SYSTRIGGERS. At runtime, when the trigger is"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,518," ** fired, we will look at this information along with trigger columns from"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,519, ** the trigger definition and only fetch those columns into memory rather
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,520, ** than all the columns from the trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,521, ** This is especially useful when the table has LOB columns and those
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,522, ** columns are not referenced in the trigger action and are not recognized
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,523," ** as trigger columns. For such cases, we can avoid reading large values of"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,524, ** LOB columns into memory and thus avoiding possibly running into OOM
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,525, ** errors.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,526, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,527," ** If there are no trigger columns defined on the trigger, we will read all"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,528, ** the columns from the trigger table when the trigger fires because no
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,529, ** specific columns were identified as trigger column by the user. The
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,530, ** other case where we will opt to read all the columns are when trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,531, ** columns and REFERENCING clause is identified for the trigger but there
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,532, ** is no trigger action column information in SYSTRIGGERS. This can happen
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,533, ** for triggers created prior to 10.7 release and later that database got
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,534, ** hard/soft-upgraded to 10.7 or higher release.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,542,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,543,  //Total Number of columns in the trigger table
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,544,  int numberOfColsInTriggerTable = triggerTableDescriptor.getNumberOfColumns();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,546,  StringBuffer newText = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,547,  boolean regenNode = false;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,549,  if (isRow)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,550,  {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,552,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,553,   //The purpose of following array(triggerActionColsOnly) is to
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,554,   //identify all the columns from the trigger action which are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,555,"   //referenced though old/new transition variables(in other words,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,556,   //accessed through the REFERENCING clause section of
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,557,   //CREATE TRIGGER sql). This array will be initialized to -1 at the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,558,"   //beginning. By the end of this method, all the columns referenced"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,559,   //by the trigger action through the REFERENCING clause will have
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,560,   //their column positions in the trigger table noted in this array.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,562,"   //CREATE TABLE table1 (c11 int, c12 int, c13 int, c14 int, c15 int);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,563,"   //CREATE TABLE table2 (c21 int, c22 int, c23 int, c24 int, c25 int);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,567,"   //For the trigger above, triggerActionColsOnly will finally have"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,568,"   //[-1,-1,-1,4,-1]. We will note all the entries for this array"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,569,   //which are not -1 into SYSTRIGGERS(-1 indiciates columns with
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,570,   //those column positions from the trigger table are not being
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,571,   //referenced in the trigger action through the old/new transition
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,572,   //variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,573,   int[] triggerActionColsOnly = new int[numberOfColsInTriggerTable];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,574,   for (int i=0; i < numberOfColsInTriggerTable; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,575,    triggerActionColsOnly[i]=-1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,577,   //The purpose of following array(triggerColsAndTriggerActionCols)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,578,   //is to identify all the trigger columns and all the columns from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,579,   //the trigger action which are referenced though old/new
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,580,"   //transition variables(in other words, accessed through the"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,581,   //REFERENCING clause section of CREATE TRIGGER sql). This array
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,582,   //will be initialized to -1 at the beginning. By the end of this
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,583,"   //method, all the columns referenced by the trigger action"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,584,   //through the REFERENCING clause and all the trigger columns will
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,585,   //have their column positions in the trigger table noted in this
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,586,   //array.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,587,   //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,588,   //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,589,   //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,590,   //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,591,"   //For the trigger above, triggerColsAndTriggerActionCols will"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,592,"   //finally have [-1,2,-1,4,-1] This list will include all the"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,593,   //columns that need to be fetched into memory during trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,594,   //execution. All the columns with their entries marked -1 will
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,595,   //not be read into memory because they are not referenced in the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,596,   //trigger action through old/new transition variables and they are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,597,   //not recognized as trigger columns.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,598,   int[] triggerColsAndTriggerActionCols = new int[numberOfColsInTriggerTable];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,599,   for (int i=0; i < numberOfColsInTriggerTable; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,600,    triggerColsAndTriggerActionCols[i]=-1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,601,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,602,   if (triggerCols == null || triggerCols.size() == 0) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,603,    //This means that even though the trigger is defined at row
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,604,"    //level, it is either an INSERT/DELETE trigger. Or it is an"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,605,    //UPDATE trigger with no specific column(s) identified as the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,606,"    //trigger column(s). In these cases, Derby is going to read all"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,607,    //the columns from the trigger table during trigger execution.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,608,    //eg of an UPDATE trigger with no specific trigger column(s)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,609,    // CREATE TRIGGER tr1 AFTER UPDATE ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,612,    for (int i=0; i < numberOfColsInTriggerTable; i++) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,613,     triggerColsAndTriggerActionCols[i]=i+1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,614,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,615,   } else {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,616,"    //This is the most interesting case for us. If we are here,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,617,    //then it means that the trigger is defined at the row level
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,618,    //and a set of trigger columns are specified in the CREATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,619,    //TRIGGER statement. This can only happen for an UPDATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,620,    //trigger.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,621,    //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,622,    //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,623,    //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,624,    //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,625,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,626,    for (int i=0; i < triggerCols.size(); i++){
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,627,     rc = (ResultColumn)triggerCols.elementAt(i);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,628,     ColumnDescriptor cd = triggerTableDescriptor.getColumnDescriptor(rc.getName());
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,629,     //Following will catch the case where an invalid trigger column
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,630,     //has been specified in CREATE TRIGGER statement.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,631,     //CREATE TRIGGER tr1 AFTER UPDATE OF c1678 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,632,     //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,633,     //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,634,     if (cd == null)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,635,     {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,636,"      throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,637,"                 rc.getName(),"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,638,                 tableName);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,639,     }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,640,     //Make a note of this trigger column's column position in
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,641,     //triggerColsAndTriggerActionCols. This will tell us that
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,642,     //this column needs to be read in when the trigger fires.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,643,"     //eg for the CREATE TRIGGER below, we will make a note of"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,644,     //column c12's position in triggerColsAndTriggerActionCols
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,645,     //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,646,     //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,647,     //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,648,     //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,649,     triggerColsAndTriggerActionCols[cd.getPosition()-1]=cd.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,650,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,651,   }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,652,"   //By this time, we have collected the positions of the trigger"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,653,   //columns in array triggerColsAndTriggerActionCols. Now we need
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,654,   //to start looking at the columns in trigger action to collect
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,655,   //all the columns referenced through REFERENCES clause. These
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,656,   //columns will be noted in triggerColsAndTriggerActionCols and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,657,   //triggerActionColsOnly arrays.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,658,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,659,   CollectNodesVisitor visitor = new CollectNodesVisitor(ColumnReference.class);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,660,   actionNode.accept(visitor);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,661,   Vector refs = visitor.getList();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,662,"   /* we need to sort on position in string, beetle 4324"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,663,    */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,664,"   QueryTreeNode[] cols = sortRefs(refs, true);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,665,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,666,"   //At the end of the for loop below, we will have both arrays"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,667,   //triggerColsAndTriggerActionCols & triggerActionColsOnly
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,668,   //filled up with the column positions of the columns which are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,669,   //either trigger columns or triger action columns which are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,670,   //referenced through old/new transition variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,671,   //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,672,   //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,673,   //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,674,   //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,675,"   //For the above trigger, before the for loop below, the contents"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,676,   //of the 2 arrays will be as follows
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,677,"   //triggerActionColsOnly [-1,-1,-1,-1,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,678,"   //triggerColsAndTriggerActionCols [-1,2,-1,-1,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,679,"   //After the for loop below, the 2 arrays will look as follows"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,680,"   //triggerActionColsOnly [-1,-1,-1,4,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,681,"   //triggerColsAndTriggerActionCols [-1,2,-1,4,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,682,   //If the database is at 10.6 or earlier version(meaning we are in
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,683,"   //soft-upgrade mode), then we do not want to collect any"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,684,   //information about trigger action columns. The collection and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,685,   //usage of trigger action columns was introduced in 10.7 DERBY-1482
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,686,   boolean in10_7_orHigherVersion =
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,687,     getLanguageConnectionContext().getDataDictionary().checkVersion(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,688,"       DataDictionary.DD_VERSION_DERBY_10_7,null);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,689,   for (int i = 0; i < cols.length; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,690,   {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,691,    ColumnReference ref = (ColumnReference) cols[i];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,692,    /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,693,    ** Only occurrences of those OLD/NEW transition tables/variables
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,694,    ** are of interest here.  There may be intermediate nodes in the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,695,    ** parse tree that have its own RCL which contains copy of
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,696,    ** column references(CR) from other nodes. e.g.:
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,697,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,698,    ** CREATE TRIGGER tt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,699,    ** AFTER INSERT ON x
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,700,    ** REFERENCING NEW AS n
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,701,    ** FOR EACH ROW
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,702,"    **    INSERT INTO y VALUES (n.i), (999), (333);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,703,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,704,    ** The above trigger action will result in InsertNode that
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,705,    ** contains a UnionNode of RowResultSetNodes.  The UnionNode
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,706,    ** will have a copy of the CRs from its left child and those CRs
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,707,    ** will not have its beginOffset set which indicates they are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,708,"    ** not relevant for the conversion processing here, so we can"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,709,    ** safely skip them.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,710,    */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,711,    if (ref.getBeginOffset() == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,712,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,713,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,714,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,715,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,716,    TableName tableName = ref.getTableNameNode();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,717,    if ((tableName == null) ||
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,718,     ((oldTableName == null || !oldTableName.equals(tableName.getTableName())) &&
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,719,     (newTableName == null || !newTableName.equals(tableName.getTableName()))))
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,720,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,721,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,722,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,723,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,724,    if (tableName.getBeginOffset() == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,725,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,726,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,727,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,728,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,729,    checkInvalidTriggerReference(tableName.getTableName());
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,730,    String colName = ref.getColumnName();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,731,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,732,    ColumnDescriptor triggerColDesc;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,733,    //Following will catch the case where an invalid column is
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,734,    //used in trigger action through the REFERENCING clause. The
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,735,    //following tigger is trying to use oldt.c13 but there is no
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,736,    //column c13 in trigger table table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,737,    //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,738,    //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,739,    //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14567;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,740,    if ((triggerColDesc = triggerTableDescriptor.getColumnDescriptor(colName)) ==
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,741,                 null) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,742,     throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,743,"                   SQLState.LANG_COLUMN_NOT_FOUND, tableName+"".""+colName);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,744,     }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,745,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,746,    if (in10_7_orHigherVersion) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,747,     int triggerColDescPosition = triggerColDesc.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,748,     triggerColsAndTriggerActionCols[triggerColDescPosition-1]=triggerColDescPosition;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,749,     triggerActionColsOnly[triggerColDescPosition-1]=triggerColDescPosition;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,750,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,751,   }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,752,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,753,   //Now that we know what columns we need for trigger columns and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,754,"   //trigger action columns, we can get rid of remaining -1 entries"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,755,   //for the remaining columns from trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,756,   //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,757,   //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,758,   //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,759,   //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,760,"   //For the above trigger, before the justTheRequiredColumns() call,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,761,   //the content of triggerColsAndTriggerActionCols array were as
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,762,"   //follows [-1, 2, -1, 4, -1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,763,"   //After the justTheRequiredColumns() call below,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,764,"   //triggerColsAndTriggerActionCols will have [2,4]. What this means"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,765,"   //that, at run time, during trigger execution, these are the only"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,766,   //2 column positions that will be read into memory from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,767,   //trigger table. The columns in other column positions are not
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,768,   //needed for trigger execution.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,769,   triggerColsAndTriggerActionCols = justTheRequiredColumns(triggerColsAndTriggerActionCols);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,770,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,771,   for (int i = 0; i < cols.length; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,772,   {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,773,    ColumnReference ref = (ColumnReference) cols[i];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,774,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,775,    /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,776,    ** Only occurrences of those OLD/NEW transition tables/variables
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,777,    ** are of interest here.  There may be intermediate nodes in the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,778,    ** parse tree that have its own RCL which contains copy of
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,779,    ** column references(CR) from other nodes. e.g.:
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,780,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,781,    ** CREATE TRIGGER tt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,782,    ** AFTER INSERT ON x
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,783,    ** REFERENCING NEW AS n
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,784,    ** FOR EACH ROW
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,785,"    **    INSERT INTO y VALUES (n.i), (999), (333);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,786,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,787,    ** The above trigger action will result in InsertNode that
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,788,    ** contains a UnionNode of RowResultSetNodes.  The UnionNode
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,789,    ** will have a copy of the CRs from its left child and those CRs
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,790,    ** will not have its beginOffset set which indicates they are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,791,"    ** not relevant for the conversion processing here, so we can"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,792,    ** safely skip them.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,793,    */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,794,    if (ref.getBeginOffset() == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,795,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,796,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,797,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,798,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,799,    TableName tableName = ref.getTableNameNode();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,800,    if ((tableName == null) ||
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,801,     ((oldTableName == null || !oldTableName.equals(tableName.getTableName())) &&
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,802,     (newTableName == null || !newTableName.equals(tableName.getTableName()))))
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,803,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,804,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,805,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,806,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,807,    int tokBeginOffset = tableName.getBeginOffset();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,808,    int tokEndOffset = tableName.getEndOffset();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,809,    if (tokBeginOffset == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,811,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,813,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,814,    regenNode = true;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,815,    String colName = ref.getColumnName();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,816,    int columnLength = ref.getEndOffset() - ref.getBeginOffset() + 1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,817,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,818,"    newText.append(originalActionText.substring(start, tokBeginOffset-actionOffset));"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,819,    int colPositionInRuntimeResultSet = -1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,820,    ColumnDescriptor triggerColDesc = triggerTableDescriptor.getColumnDescriptor(colName);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,821,    int colPositionInTriggerTable = triggerColDesc.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,822,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,823,    //This part of code is little tricky and following will help
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,824,    //understand what mapping is happening here.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,825,    //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,826,    //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,827,    //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,828,    //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,829,"    //For the above trigger, triggerColsAndTriggerActionCols will"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,830,"    //have [2,4]. What this means that, at run time, during trigger"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,831,"    //execution, these are the only 2 column positions that will be"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,832,    //read into memory from the trigger table. The columns in other
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,833,    //column positions are not needed for trigger execution. But
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,834,    //even though column positions in original trigger table are 2
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,835,"    //and 4, their relative column positions in the columns read at"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,836,"    //execution time is really [1,2]. At run time, when the trigger"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,837,"    //gets fired, column position 2 from the trigger table will be"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,838,    //read as the first column and column position 4 from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,839,    //trigger table will be read as the second column. And those
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,840,    //relative column positions at runtime is what should be used
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,841,    //during trigger action conversion from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,842,    //UPDATE table2 SET c24=oldt.c14
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,843,    //to
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,844,    //UPDATE table2 SET c24=org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getInt(2)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,845,    //Note that the generated code above refers to column c14 from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,846,    //table1 by position 2 rather than position 4. Column c14's
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,847,    //column position in table1 is 4 but in the relative columns
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,848,"    //that will be fetched during trigger execution, it's position"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,849,    //is 2. That is what the following code is doing.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,850,    if (in10_7_orHigherVersion && triggerColsAndTriggerActionCols != null){
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,851,     for (int j=0; j<triggerColsAndTriggerActionCols.length; j++){
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,852,      if (triggerColsAndTriggerActionCols[j] == colPositionInTriggerTable)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,853,       colPositionInRuntimeResultSet=j+1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,854,     }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,855,    } else
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,856,     colPositionInRuntimeResultSet=colPositionInTriggerTable;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,857,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,858,"    newText.append(genColumnReferenceSQL(dd, colName,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,859,"      tableName.getTableName(),"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,860,"      tableName.getTableName().equals(oldTableName),"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,861,      colPositionInRuntimeResultSet));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,862,    start = tokEndOffset- actionOffset + columnLength + 2;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,864,"   //By this point, we are finished transforming the trigger action if"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,865,   //it has any references to old/new transition variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,866,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,867,"   //Now that we know what columns we need for trigger action columns,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,868,   //we can get rid of -1 entries for the remaining columns from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,869,   //trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,870,   //The final step is to put all the column positions from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,871,   //trigger table of the columns which are referenced in the trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,872,   //action through old/new transition variables. This information
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,873,   //will be saved in SYSTRIGGERS and will be used at trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,874,   //execution time to decide which columns need to be read into
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,875,   //memory for trigger action
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,876,   referencedColsInTriggerAction = justTheRequiredColumns(triggerActionColsOnly);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,909,    regenNode = true;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,941,  if (regenNode)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,943,   if (start < originalActionText.length())
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,944,   {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,945,    newText.append(originalActionText.substring(start));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,946,   }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,947,   actionText = newText.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,987,  QueryTreeNode[] sorted = new QueryTreeNode[size];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,989,  for (Enumeration e = refs.elements(); e.hasMoreElements(); )
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,990,  {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,991,   if (isRow)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,992,    sorted[i++] = (ColumnReference)e.nextElement();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,993,   else
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,994,    sorted[i++] = (FromBaseTable)e.nextElement();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,995,  }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,996,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1083,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1084, /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1085, ** Make sure the given column name is found in the trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1086, ** target table.  Generate the appropriate SQL to get it.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1087, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1088, ** @return a string that is used to get the column using
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1089, ** getObject() on the desired result set and CAST it back
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1090, ** to the proper type in the SQL domain.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1091, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1092, ** @exception StandardException on invalid column name
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1093, */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1094, private String genColumnReferenceSQL
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1095, (
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1096,"  DataDictionary dd,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1097,"  String   colName,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1098,"  String   tabName,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1099,"  boolean   isOldTable,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1100,  int    colPositionInRuntimeResultSet
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1101, ) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1102, {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1103,  ColumnDescriptor colDesc = null;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1104,  if ((colDesc = triggerTableDescriptor.getColumnDescriptor(colName)) ==
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1105,                null)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1106,  {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1107,   throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1108,"                SQLState.LANG_COLUMN_NOT_FOUND, tabName+"".""+colName);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1109,  }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1110,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1111,  /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1112,  ** Generate something like this:
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1113,  **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1114,  **   CAST (org.apache.derby.iapi.db.Factory::
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1115,  **   getTriggerExecutionContext().getNewRow().
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1116,"  **    getObject(<colPosition>) AS DECIMAL(6,2))"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1117,        **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1118,        ** Column position is used to avoid the wrong column being
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1119,        ** selected problem (DERBY-1258) caused by the case insensitive
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1120,        ** JDBC rules for fetching a column by name.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1121,  **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1122,  ** The cast back to the SQL Domain may seem redundant
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1123,  ** but we need it to make the column reference appear
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1124,"  ** EXACTLY like a regular column reference, so we need"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1125,  ** the object in the SQL Domain and we need to have the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1126,  ** type information.  Thus a user should be able to do
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1127,  ** something like
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1128,  **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1129,"  **  CREATE TRIGGER ... INSERT INTO T length(Column), ..."
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1130,        **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1131,        */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1132,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1133,  DataTypeDescriptor  dts     = colDesc.getType();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1134,  TypeId              typeId  = dts.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1135,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1136,        if (!typeId.isXMLTypeId())
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1137,        {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1138,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1139,            StringBuffer methodCall = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1140,            methodCall.append(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1141,"                ""CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext()."");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1142,"            methodCall.append(isOldTable ? ""getOldRow()"" : ""getNewRow()"");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1143,"            methodCall.append("".getObject("");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1144,            methodCall.append(colPositionInRuntimeResultSet);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1145,"            methodCall.append("") AS "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1146,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1147,            /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1148,            ** getSQLString() returns <typeName>
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1149,"            ** for user types, so call getSQLTypeName in that"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1150,            ** case.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1151,            */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1152,            methodCall.append(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1153,                (typeId.userType() ?
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1154,                     typeId.getSQLTypeName() : dts.getSQLstring()));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1155,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1156,"            methodCall.append("") "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1157,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1158,            return methodCall.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1159,        }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1160,        else
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1161,        {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1162,            /*  DERBY-2350
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1163,            **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1164,            **  Triggers currently use jdbc 1.2 to access columns.  The default
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1165,            **  uses getObject() which is not supported for an XML type until
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1166,            **  jdbc 4.  In the meantime use getString() and then call
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1167,            **  XMLPARSE() on the string to get the type.  See Derby issue and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1168,"            **  http://wiki.apache.org/db-derby/TriggerImplementation , for"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1169,            **  better long term solutions.  Long term I think changing the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1170,"            **  trigger architecture to not rely on jdbc, but instead on an"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1171,            **  internal direct access interface to execution nodes would be
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1172,"            **  best future direction, but believe such a change appropriate"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1173,"            **  for a major release, not a bug fix."
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1174,            **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1175,"            **  Rather than the above described code generation, use the"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1176,            **  following for XML types to generate an XML column from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1177,            **  old or new row.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1178,            **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1179,            **          XMLPARSE(DOCUMENT
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1180,            **              CAST (org.apache.derby.iapi.db.Factory::
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1181,            **                  getTriggerExecutionContext().getNewRow().
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1182,            **                      getString(<colPosition>) AS CLOB)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1183,            **                        PRESERVE WHITESPACE)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1184,            */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1185,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1186,            StringBuffer methodCall = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1187,"            methodCall.append(""XMLPARSE(DOCUMENT CAST( "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1188,            methodCall.append(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1189,"                ""org.apache.derby.iapi.db.Factory::getTriggerExecutionContext()."");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1190,"            methodCall.append(isOldTable ? ""getOldRow()"" : ""getNewRow()"");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1191,"            methodCall.append("".getString("");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1192,            methodCall.append(colPositionInRuntimeResultSet);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1193,"            methodCall.append("") AS CLOB) PRESERVE WHITESPACE ) "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1194,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1195,            return methodCall.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1196,        }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1197, }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1216,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java,53,"        {10, 6, 2, 1}, // 10.6.2.1 (Oct 6, 2010/ SVN 999685"
java/client/org/apache/derby/client/am/ResultSet.java,1941,"    private final int findColumnX(String columnName, String operation) throws SqlException {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,34,import java.sql.NClob;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,55, * Tests of JDBC4 features in ResultSet.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,62,    extends BaseJDBCTestCase {
java/client/org/apache/derby/client/net/NetResultSet40.java,278,"            throw new SQLException( ""NULL"", SQLState.LANG_DATA_TYPE_GET_MISMATCH );"
java/client/org/apache/derby/client/net/NetResultSet40.java,282,
java/client/org/apache/derby/client/net/NetResultSet40.java,299,            else { return (T) getObject( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,301,        catch (ClassCastException e) {}
java/client/org/apache/derby/client/net/NetResultSet40.java,303,"        throw new SQLException( type.getName(), SQLState.LANG_DATA_TYPE_GET_MISMATCH, ex );"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,261,"            throw new SQLException( ""NULL"", SQLState.LANG_DATA_TYPE_GET_MISMATCH );"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,264,        Exception ex = null;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,265,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,            else { return (T) getObject( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,284,        catch (ClassCastException e) { ex = e; }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,286,"        throw new SQLException( type.getName(), SQLState.LANG_DATA_TYPE_GET_MISMATCH, ex );"
java/client/org/apache/derby/client/net/NetResultSet40.java,301,                Object  result = getObject( columnIndex );
java/client/org/apache/derby/client/net/NetResultSet40.java,302,                if ( !type.isInstance( result ) ) { throw new ClassCastException( type.getName() ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,303,                return (T) result;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,                Object  result = getObject( columnIndex );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,283,                if ( !type.isInstance( result ) ) { throw new ClassCastException( type.getName() ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,284,                return (T) result;
java/client/org/apache/derby/client/net/NetResultSet40.java,278,"            throw mismatchException( ""NULL"", columnIndex, null );"
java/client/org/apache/derby/client/net/NetResultSet40.java,281,        Exception ex = null;
java/client/org/apache/derby/client/net/NetResultSet40.java,282,
java/client/org/apache/derby/client/net/NetResultSet40.java,304,        catch (Exception e) { ex = e; }
java/client/org/apache/derby/client/net/NetResultSet40.java,306,"        throw mismatchException( type.getName(), columnIndex, ex );"
java/client/org/apache/derby/client/net/NetResultSet40.java,308,"    private SQLException    mismatchException( String targetTypeName, int columnIndex, Throwable t )"
java/client/org/apache/derby/client/net/NetResultSet40.java,313,"        SqlException se = new SqlException( agent_.logWriter_, cmi, targetTypeName, sourceTypeName, t );"
java/client/org/apache/derby/client/am/CallableStatement.java,1204,    private SQLException jdbcMethodNotImplemented() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,3,   Derby - Class CallableStatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,38,public class CallableStatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,39,    extends BaseJDBCTestCase {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,40,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,41,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,3,   Derby - Class ResultSetTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,53,import org.apache.derby.impl.jdbc.EmbedResultSet40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,54,import org.apache.derby.client.net.NetResultSet40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,55,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,68,public class ResultSetTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,69,    extends BaseJDBCTestCase
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,71,    //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,72,    // Wrapper class for testing JDBC 4.1 functionality.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,73,    //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,74,    // This wrapper can be removed after Java 7 goes GA and we are allowed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,75,    // to use the Java 7 compiler to build derbyTesting.jar.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,76,    //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,77,    public  static  final   class   Wrapper41
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,78,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,79,        private EmbedResultSet40    _embedded;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,80,        private NetResultSet40      _netclient;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,81,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,82,        public Wrapper41( ResultSet rs ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,83,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,84,            if ( rs instanceof EmbedResultSet40 ) { _embedded = (EmbedResultSet40) rs; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,85,            else if ( rs instanceof NetResultSet40 ) { _netclient = (NetResultSet40) rs; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,86,            else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,87,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,88,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,89,"        public  <T> T getObject( int columnIndex, Class<T> type ) throws SQLException"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,90,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,91,"            if ( _embedded != null ) { return _embedded.getObject( columnIndex, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,92,"            else if ( _netclient != null ) { return _netclient.getObject( columnIndex, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,93,            else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,94,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,95,"        public  <T> T getObject( String columnName, Class<T> type )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,96,            throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,97,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,98,"            if ( _embedded != null ) { return _embedded.getObject( columnName, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,99,"            else if ( _netclient != null ) { return _netclient.getObject( columnName, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,100,            else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,101,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,102,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,103,"        private SQLException nothingWrapped() { return new SQLException( ""Nothing wrapped!"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,104,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,105,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,106,"    private static  final   String  UNSUPPORTED_COERCION = ""22005"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,107,"    private static  final   String  BAD_FORMAT = ""22018"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,108,"    private static  final   String  BAD_DATETIME = ""22007"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,109,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,110,"    private static  final   String  VARIABLE_STRING = ""XXXXX"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,111,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,140,    private Class   byteArrayClass;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,141,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2123,        examineJDBC4_1extensions( rs );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2148,    private void examineJDBC4_1extensions( ResultSet rs ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2149,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2150,        Wrapper41   wrapper = new Wrapper41( rs );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2151,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2152,"        println( ""Vetting a "" + rs.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2153,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2154,"        byteArrayClass = Class.forName( ""[B"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2155,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2156,        vetWrappedNull( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2157,"        vetWrappedInteger( wrapper, 1, ""BIGINTCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2158,        vetWrappedBlob( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2159,        vetWrappedBoolean( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2160,"        vetWrappedString( wrapper, 4, ""CHARCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2161,"        vetWrappedBinary( wrapper, 5, ""CHARFORBITDATACOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2162,        vetWrappedClob( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2163,        vetWrappedDate( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2164,"        vetWrappedFloatingPoint( wrapper, 8, ""DOUBLECOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2165,"        vetWrappedFloatingPoint( wrapper, 9, ""FLOATCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2166,"        vetWrappedInteger( wrapper, 10, ""INTCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2167,"        vetWrappedString( wrapper, 11, ""LONGVARCHARCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2168,"        vetWrappedBinary( wrapper, 12, ""LONGVARCHARFORBITDATACOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2169,"        vetWrappedInteger( wrapper, 13, ""NUMERICCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2170,"        vetWrappedFloatingPoint( wrapper, 14, ""REALCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2171,"        vetWrappedInteger( wrapper, 15, ""SMALLINTCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2172,        vetWrappedTime( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2173,        vetWrappedTimestamp( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2174,"        vetWrappedString( wrapper, 18, ""VARCHARCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2175,"        vetWrappedBinary( wrapper, 19, ""VARCHARFORBITDATACOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2176,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2177,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2178,    private void    vetWrappedNull( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2179,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2180,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2181,"                wrapper.getObject( 1, (Class) null );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2182,"                fail( ""Did not expect to get a result for a null class type."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2183,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2184,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2185,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2186,"                assertSQLState( ""Null type"", UNSUPPORTED_COERCION, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2187,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2188,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2189,"                wrapper.getObject( ""BIGINTCOL"", (Class) null );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2190,"                fail( ""Did not expect to get a result for a null class type."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2191,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2192,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2193,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2194,"                assertSQLState( ""Null type"", UNSUPPORTED_COERCION, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2195,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2196,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2197,"    private void    vetWrappedInteger( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2198,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2199,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2200,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2201,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2202,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2203,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2204,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2205,"             new Class[] { String.class, BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class, Number.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2206,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2207,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2208,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2209,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2210,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2211,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2212,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2213,"             new Class[] { Float.class, Double.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2214,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2215,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2216,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2217,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2218,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2219,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2220,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2221,             new Class[] { Boolean.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2222,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2223,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2224,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2225,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2226,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2227,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2228,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2229,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2230,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2231,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2232,    private void    vetWrappedBlob( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2233,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2234,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2235,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2236,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2237,"             2,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2238,"             ""BLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2239,"             ""abc"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2240,"             new Class[] { Blob.class, Object.class, byteArrayClass, String.class,  }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2241,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2242,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2243,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2244,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2245,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2246,"             2,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2247,"             ""BLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2248,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2249,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2250,"                 BigDecimal.class, Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2251,"                 Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2252,"                 Date.class, Time.class, Timestamp.class"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2253,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2254,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2255,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2256,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2257,        // We don't try to get a Clob value because we have already gotten a LOB value.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2258,        // Trying to open another LOB stream raises an error. Using a random class type
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2259,"        // also takes us down that code path, so we don't verify against getClass() either."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2260,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2261,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2262,    private void    vetWrappedBoolean( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2263,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2264,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2265,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2266,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2267,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2268,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2269,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2270,"             new Class[] { String.class, Boolean.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2271,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2272,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2273,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2274,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2275,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2276,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2277,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2278,"             new Class[] { BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2279,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2280,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2281,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2282,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2283,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2284,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2285,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2286,"             new Class[] { Float.class, Double.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2287,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2288,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2289,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2290,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2291,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2292,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2293,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2294,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2295,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2296,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2297,"    private void    vetWrappedString( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2298,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2299,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2300,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2301,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2302,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2303,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2304,"             ""a"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2305,"             new Class[] { String.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2306,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2307,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2308,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2309,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2310,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2311,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2312,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2313,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2314,             new Class[] { Boolean.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2315,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2316,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2317,        vetCoercionError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2318,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2319,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2320,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2321,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2322,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2323,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2324,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2325,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2326,"             },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2327,             BAD_FORMAT
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2328,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2329,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2330,        vetCoercionError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2331,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2332,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2333,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2334,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2335,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2336,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2337,"                 Date.class, Time.class, Timestamp.class"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2338,"             },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2339,             BAD_DATETIME
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2340,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2341,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2342,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2343,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2344,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2345,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2346,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2347,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2348,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2349,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2350,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2351,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2352,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2353,"    private void    vetWrappedBinary( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2354,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2355,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2356,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2357,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2358,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2359,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2360,"             ""de"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2361,             new Class[] { String.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2362,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2363,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2364,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2365,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2366,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2367,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2368,"             ""\ufffd"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2369,"             new Class[] { byteArrayClass, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2370,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2371,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2372,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2373,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2374,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2375,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2376,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2377,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2378,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2379,"                 Boolean.class, BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2380,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2381,"                 Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2382,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2383,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2384,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2385,    private void    vetWrappedClob( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2386,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2387,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2388,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2389,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2390,"             6,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2391,"             ""CLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2392,"             ""abc"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2393,"             new Class[] { String.class, Clob.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2394,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2395,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2396,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2397,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2398,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2399,"             6,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2400,"             ""CLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2401,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2402,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2403,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2404,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2405,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2406,"                 Date.class, Time.class, Timestamp.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2407,                 byteArrayClass
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2408,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2409,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2410,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2411,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2412,        // We don't test getting a BLOB because we are only allowed one attempt
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2413,        // to get a LOB from the column. Using a random class type
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2414,"        // also takes us down that code path, so we don't verify against getClass() either."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2415,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2416,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2417,    private void    vetWrappedDate( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2418,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2419,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2420,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2421,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2422,"             7,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2423,"             ""DATECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2424,"             ""1994-02-23"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2425,"             new Class[] { String.class, Date.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2426,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2427,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2428,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2429,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2430,"             7,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2431,"             ""DATECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2432,"             ""1994-02-23 00:00:00.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2433,             new Class[] { Timestamp.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2434,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2435,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2436,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2437,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2438,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2439,"             7,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2440,"             ""DATECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2441,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2442,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2443,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2444,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2445,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2446,"                 Time.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2447,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2448,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2449,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2450,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2451,"    private void    vetWrappedFloatingPoint( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2452,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2453,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2454,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2455,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2456,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2457,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2458,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2459,"             new Class[] { String.class, Float.class, Double.class, BigDecimal.class, Number.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2460,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2461,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2462,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2463,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2464,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2465,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2466,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2467,"             new Class[] { Byte.class, Short.class, Integer.class, Long.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2468,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2469,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2470,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2471,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2472,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2473,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2474,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2475,             new Class[] { Boolean.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2476,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2477,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2478,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2479,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2480,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2481,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2482,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2483,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2484,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2485,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2486,    private void    vetWrappedTime( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2487,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2488,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2489,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2490,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2491,"             16,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2492,"             ""TIMECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2493,"             ""15:09:02"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2494,"             new Class[] { String.class, Time.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2495,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2496,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2497,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2498,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2499,"             16,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2500,"             ""TIMECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2501,"             VARIABLE_STRING,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2502,             new Class[] { Timestamp.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2503,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2504,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2505,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2506,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2507,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2508,"             16,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2509,"             ""TIMECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2510,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2511,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2512,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2513,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2514,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2515,"                 Date.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2516,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2517,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2518,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2519,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2520,    private void    vetWrappedTimestamp( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2521,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2522,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2523,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2524,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2525,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2526,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2527,"             ""1962-09-23 03:23:34.234"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2528,"             new Class[] { String.class, Timestamp.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2529,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2530,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2531,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2532,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2533,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2534,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2535,"             ""03:23:34"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2536,             new Class[] { Time.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2537,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2538,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2539,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2540,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2541,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2542,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2543,"             ""1962-09-23"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2544,             new Class[] { Date.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2545,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2546,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2547,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2548,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2549,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2550,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2551,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2552,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2553,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2554,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2555,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2556,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2557,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2558,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2559,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2560,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2561,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2562,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2563,    private void    vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2564,"        ( Wrapper41 wrapper, int colID, String colName, String expectedValue, Class[] supportedCoercions )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2565,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2566,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2567,        int coercionCount = supportedCoercions.length;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2568,        for ( int i = 0; i < coercionCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2569,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2570,            Class   candidate = supportedCoercions[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2571,"            vetCandidate( candidate, expectedValue, wrapper.getObject( colID, candidate ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2572,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2573,            // you can only retrieve a LOB once
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2574,            if ( (candidate == Blob.class) || (candidate == Clob.class) ) { return; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2575,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2576,"            vetCandidate( candidate, expectedValue, wrapper.getObject( colName, candidate ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2577,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2578,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2579,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2580,"    private void    vetCandidate( Class candidate, String expectedValue, Object actualValue )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2581,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2582,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2583,"        assertTrue( candidate.getName(), candidate.isAssignableFrom( actualValue.getClass( ) ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2584,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2585,        if ( VARIABLE_STRING.equals( expectedValue ) ) { return; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2586,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2587,        String  actualString;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2588,        if ( actualValue instanceof Blob )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2589,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2590,            Blob    blob = (Blob) actualValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2591,"            actualString = squeezeString( blob.getBytes( 1L, (int) blob.length() ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2592,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2593,        else if ( actualValue instanceof byte[] )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2594,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2595,            actualString = squeezeString( (byte[]) actualValue );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2596,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2597,        else if ( actualValue instanceof Clob )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2598,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2599,            Clob    clob = (Clob) actualValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2600,"            actualString = clob.getSubString( 1L, (int) clob.length() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2601,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2602,        else { actualString = actualValue.toString(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2603,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2604,"        assertEquals( candidate.getName(), expectedValue, actualString );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2605,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2606,    private String  squeezeString( byte[] bytes ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2607,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2608,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2609,"        String result = new String( bytes, ""UTF-8"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2610,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2611,        return result;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2612,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2613,    private void    vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2614,"        ( Wrapper41 wrapper, int colID, String colName, Class[] unsupportedCoercions )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2615,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2616,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2617,"        vetCoercionError( wrapper, colID, colName, unsupportedCoercions, UNSUPPORTED_COERCION );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2618,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2619,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2620,    private void    vetCoercionError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2621,"        ( Wrapper41 wrapper, int colID, String colName, Class[] unsupportedCoercions, String expectedSQLState )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2622,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2623,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2624,        int coercionCount = unsupportedCoercions.length;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2625,        for ( int i = 0; i < coercionCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2626,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2627,            Class   candidate = unsupportedCoercions[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2628,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2629,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2630,"                wrapper.getObject( colID, candidate );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2631,"                fail( ""Did not expect to get a "" + candidate.getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2632,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2633,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2634,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2635,"                assertSQLState( candidate.getName(), expectedSQLState, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2636,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2637,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2638,            // you can only retrieve a LOB once
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2639,            if ( (candidate == Blob.class) || (candidate == Clob.class) ) { return; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2640,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2641,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2642,"                wrapper.getObject( colName, candidate );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2643,"                fail( ""Did not expect to get a "" + candidate.getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2644,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2645,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2646,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2647,"                assertSQLState( candidate.getName(), expectedSQLState, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2648,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2649,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2650,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2651,"    private PreparedStatement    prepareStatement( Connection conn, String text )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2652,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2653,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2654,        println( text );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2655,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2656,        PreparedStatement   ps = conn.prepareStatement( text );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2657,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2658,        return ps;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2659,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,441,"             ""15:09:02"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,29,import org.apache.derbyTesting.junit.BaseJDBCTestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,32,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,37,import java.lang.reflect.Method;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,38,import java.util.Vector;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,725,        timearg[0] = new Time( 83342000L );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,726,        timestamparg[0] = new Timestamp( -229527385766L );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,24,import java.math.BigDecimal;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,33,import java.sql.Date;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,52,import junit.extensions.TestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,54,import org.apache.derbyTesting.junit.BaseJDBCTestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2065,"             ""    time('15:09:02'),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2066,"             ""    timestamp('1962-09-23 03:23:34.234'),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,26,import java.sql.DriverManager;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,29,import java.sql.ResultSet;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,30,import java.sql.Statement;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,34,import java.sql.NClob;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,35,import java.sql.SQLFeatureNotSupportedException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,39,import junit.framework.*;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,42,import org.apache.derbyTesting.junit.TestConfiguration;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,441,"             VARIABLE_STRING,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,449,"             VARIABLE_STRING,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,475,"             ""1962-09-23 03:23:34.234"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,483,"             ""03:23:34"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,491,"             ""1962-09-23"","
java/client/org/apache/derby/client/am/CallableStatement40.java,334,"    @SuppressWarnings(""unchecked"")"
java/client/org/apache/derby/client/am/CallableStatement40.java,347,            if ( String.class.equals( type ) ) { return (T) getString( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,348,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,349,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,350,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,351,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,352,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,353,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,354,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,355,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,356,            else if ( Date.class.equals( type ) ) { return (T) getDate( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,357,            else if ( Time.class.equals( type ) ) { return (T) getTime( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,358,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,359,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,360,            else if ( Clob.class.equals( type ) ) { return (T) getClob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,361,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,364,                return type.cast( getObject( parameterIndex ) );
java/client/org/apache/derby/client/net/NetResultSet40.java,265,"    @SuppressWarnings(""unchecked"")"
java/client/org/apache/derby/client/net/NetResultSet40.java,282,            if ( String.class.equals( type ) ) { return (T) getString( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,283,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,284,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,285,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,286,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,287,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,288,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,289,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,290,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,291,            else if ( Date.class.equals( type ) ) { return (T) getDate( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,292,            else if ( Time.class.equals( type ) ) { return (T) getTime( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,293,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,294,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,295,            else if ( Clob.class.equals( type ) ) { return (T) getClob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,296,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,299,                return type.cast( getObject( columnIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,337,"    @SuppressWarnings(""unchecked"")"
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,349,            if ( String.class.equals( type ) ) { return (T) getString( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,350,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,351,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,352,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,353,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,354,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,355,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,356,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,357,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,358,            else if ( Date.class.equals( type ) ) { return (T) getDate( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,359,            else if ( Time.class.equals( type ) ) { return (T) getTime( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,360,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,361,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,362,            else if ( Clob.class.equals( type ) ) { return (T) getClob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,363,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,366,                return type.cast( getObject( parameterIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,253,"    @SuppressWarnings(""unchecked"")"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,265,            if ( String.class.equals( type ) ) { return (T) getString( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,266,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,267,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,268,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,269,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,270,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,271,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,272,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,273,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,274,            else if ( Date.class.equals( type ) ) { return (T) getDate( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,275,            else if ( Time.class.equals( type ) ) { return (T) getTime( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,276,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,277,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,278,            else if ( Clob.class.equals( type ) ) { return (T) getClob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,279,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,                return type.cast( getObject( columnIndex ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,650,        examineJDBC4_1extensions( new Wrapper41( cs ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,746,"         long[] bigintarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,748,"         boolean[] booleanarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,753,"         double[] doublearg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,754,"         double[] floatarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,755,"         int[] intarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,759,"         float[] realarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,760,"         short[] smallintarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,772,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,773,        bigintarg[0] = intValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,774,        blobarg[0] = new HarmonySerialBlob( BINARY_VALUE );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,775,        booleanarg[0] = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,776,        chararg[0] = stringValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,777,        charforbitdataarg[0] = BINARY_VALUE;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,778,        clobarg[0] = new HarmonySerialClob( lobValue );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,779,        datearg[0]= new Date( 761990400000L );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,780,        doublearg[0] = floatValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,781,        floatarg[0] = floatValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,782,        intarg[0] = intValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,783,        longvarchararg[0] = stringValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,784,        longvarcharforbitdataarg[0] =  BINARY_VALUE;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,785,"        numericarg[0] = new BigDecimal( ""1.0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,786,        realarg[0] = floatValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,787,        smallintarg[0] = intValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,788,        timearg[0] = new Time(TIME_VALUE);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,789,        timestamparg[0] = new Timestamp(TIMESTAMP_VALUE);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,790,        varchararg[0] = stringValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,791,        varcharforbitdataarg[0] = BINARY_VALUE;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2072,"        ps = prepareStatement( conn, ""select * from allTypes"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2075,        examineJDBC4_1extensions( new Wrapper41( rs ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,69,    private Class   byteArrayClass;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,82,    public Wrapper41Test(String name) { super(name); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,90,    protected void examineJDBC4_1extensions( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,92,"        println( ""Vetting a "" + wrapper.getWrappedObject().getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,94,"        byteArrayClass = Class.forName( ""[B"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,148,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,156,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,164,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,173,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,183,"             BINARY_VALUE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,184,"             new Class[] { Blob.class, Object.class, byteArrayClass, String.class,  }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,213,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,221,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,229,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,238,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,248,"             ""a"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,257,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,293,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,304,"             ""de"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,312,"             BINARY_VALUE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,313,"             new Class[] { byteArrayClass, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,336,"             ""abc"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,351,                 byteArrayClass
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,368,"             ""1994-02-23"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,376,"             ""1994-02-23 00:00:00.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,391,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,402,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,410,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,418,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,427,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,439,"             expectedTime.toString(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,447,"             timeToTimestamp(expectedTime).toString(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,462,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,474,"             expectedTimestamp,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,484,"             expectedTime,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,494,"             expectedDate,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,508,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,536,"        assertTrue( candidate.getName(), candidate.isAssignableFrom( actualValue.getClass( ) ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,273,        Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,274,  try {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,275,"   s.execute(""drop table table1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,276,  } catch (SQLException sqle) {}
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,277,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,278,  try {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,279,"   s.execute(""drop table table2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,280,  } catch (SQLException sqle) {}
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,281,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,282,  try {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,283,"   s.execute(""drop table table3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,284,  } catch (SQLException sqle) {}
java/engine/org/apache/derby/iapi/util/InterruptDetectedException.java,38,"        super(""nospc.U"");"
java/engine/org/apache/derby/impl/services/locks/ActiveLock.java,122,    throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,599,                            // ending wait because of lock timeout.
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,601,                            if (deadlockTrace)
java/engine/org/apache/derby/impl/services/locks/LockSet.java,349,                        // If we were not woken by another then we have
java/engine/org/apache/derby/impl/services/locks/LockSet.java,350,                        // timed out. Either deadlock out or timeout
java/engine/org/apache/derby/impl/services/locks/LockSet.java,410,                            // ending wait because of lock timeout.
java/engine/org/apache/derby/impl/services/locks/LockSet.java,412,                            if (deadlockTrace)
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1007,        StatementContext localStatementContext = getLanguageConnectionContext().getStatementContext();
java/engine/org/apache/derby/iapi/reference/Property.java,77,
java/engine/org/apache/derby/iapi/reference/Property.java,78, /**
java/engine/org/apache/derby/iapi/reference/Property.java,79,  * derby.stream.error.logBootTrace
java/engine/org/apache/derby/iapi/reference/Property.java,80,  * <BR>
java/engine/org/apache/derby/iapi/reference/Property.java,81,  * defaults to false. If set to true logs a stack trace to
java/engine/org/apache/derby/iapi/reference/Property.java,82,  * the error stream on successful boot or shutdown.
java/engine/org/apache/derby/iapi/reference/Property.java,83,  * This can be useful when trying to debug dual boot
java/engine/org/apache/derby/iapi/reference/Property.java,84,  * scenarios especially with multiple class loaders.
java/engine/org/apache/derby/iapi/reference/Property.java,85,  *
java/engine/org/apache/derby/iapi/reference/Property.java,86,  */
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,239,
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,240,
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,241, /**
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,242,"  @return true if the context manager is shutdown, false otherwise."
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,243,  */
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,244, public boolean cleanupOnError(Throwable error)
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,334,                    if (reportError
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,335,                            && errorSeverity >= ExceptionSeverity.SESSION_SEVERITY) {
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,410,            if (threadDump != null)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,631,   tr.cleanupOnError(t);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1915,       tr.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1928,      tr.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,339,    boolean isShutdown = cleanupOnError(thrownException);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,352,   if (cm!=null) { // something to let us cleanup?
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,353,    cm.cleanupOnError(t);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,419, boolean cleanupOnError(Throwable e)
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,424,  return cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,359,   cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,402,  contextMgr.cleanupOnError(StandardException.normalClose());
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,761,            ctxMgr.cleanupOnError(se);
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,854,            cm.cleanupOnError(se);
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1825,            if (cm != previousCM)
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1826,                cm.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1838,    cm.cleanupOnError(se);
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,214,            getLCC().getContextManager().cleanupOnError( se );
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,101," EmbedPooledConnection(ReferenceableDataSource ds, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,103,                // be used again.
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,104,                inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,110,                inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,407,                inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,413,                inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,457,                inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,463,                inDoubtCM.cleanupOnError(se);
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,124,"                    //stmt.executeUpdate(""update t set i = 456 where i = 456"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,141,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,142, Test suite = TestConfiguration.embeddedSuite(Derby3980DeadlockTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/MaxLogNumberRecovery.java,87,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,626,
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,186,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,212,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,261,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,5483,    cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7258,    cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7260,    cm2.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7262,   //   cpm.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,219,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,244,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,211,            cm1.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,223,            cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,864,                cm.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3270,                cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,421,     * @param error the error we want to clean up
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,300,     * @retrun String[] The list indicates files with certain prefix.
java/client/org/apache/derby/client/am/CallableStatement40.java,345,        try {
java/client/org/apache/derby/client/am/CallableStatement40.java,346,            Object   retval;
java/client/org/apache/derby/client/am/CallableStatement40.java,348,            if ( String.class.equals( type ) ) { retval = getString( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,349,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,350,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,351,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,352,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,353,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,354,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,355,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,356,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,357,            else if ( Date.class.equals( type ) ) { retval = getDate( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,358,            else if ( Time.class.equals( type ) ) { retval = getTime( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,359,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,360,            else if ( Blob.class.equals( type ) ) { retval = getBlob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,361,            else if ( Clob.class.equals( type ) ) { retval = getClob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,362,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,363,            else
java/client/org/apache/derby/client/am/CallableStatement40.java,364,            {
java/client/org/apache/derby/client/am/CallableStatement40.java,365,                retval = type.cast( getObject( parameterIndex ) );
java/client/org/apache/derby/client/am/CallableStatement40.java,366,            }
java/client/org/apache/derby/client/am/CallableStatement40.java,367,
java/client/org/apache/derby/client/am/CallableStatement40.java,368,            if ( wasNull() ) { retval = null; }
java/client/org/apache/derby/client/am/CallableStatement40.java,369,
java/client/org/apache/derby/client/am/CallableStatement40.java,370,            return type.cast( retval );
java/client/org/apache/derby/client/am/CallableStatement40.java,371,        }
java/client/org/apache/derby/client/am/CallableStatement40.java,372,        catch (ClassCastException e) {}
java/client/org/apache/derby/client/am/CallableStatement40.java,373,
java/client/org/apache/derby/client/net/NetResultSet40.java,280,        try {
java/client/org/apache/derby/client/net/NetResultSet40.java,281,            Object   retval;
java/client/org/apache/derby/client/net/NetResultSet40.java,283,            if ( String.class.equals( type ) ) { retval = getString( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,284,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,285,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,286,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,287,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,288,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,289,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,290,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,291,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,292,            else if ( Date.class.equals( type ) ) { retval = getDate( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,293,            else if ( Time.class.equals( type ) ) { retval = getTime( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,294,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,295,            else if ( Blob.class.equals( type ) ) { retval = getBlob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,296,            else if ( Clob.class.equals( type ) ) { retval = getClob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,297,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,298,            else
java/client/org/apache/derby/client/net/NetResultSet40.java,299,            {
java/client/org/apache/derby/client/net/NetResultSet40.java,300,                retval = type.cast( getObject( columnIndex ) );
java/client/org/apache/derby/client/net/NetResultSet40.java,301,            }
java/client/org/apache/derby/client/net/NetResultSet40.java,303,            if ( wasNull() ) { retval = null; }
java/client/org/apache/derby/client/net/NetResultSet40.java,305,            return type.cast( retval );
java/client/org/apache/derby/client/net/NetResultSet40.java,306,        }
java/client/org/apache/derby/client/net/NetResultSet40.java,307,        catch (ClassCastException e) {}
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,347,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,348,            Object   retval;
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,350,            if ( String.class.equals( type ) ) { retval = getString( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,351,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,352,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,353,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,354,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,355,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,356,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,357,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,358,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,359,            else if ( Date.class.equals( type ) ) { retval = getDate( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,360,            else if ( Time.class.equals( type ) ) { retval = getTime( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,361,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,362,            else if ( Blob.class.equals( type ) ) { retval = getBlob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,363,            else if ( Clob.class.equals( type ) ) { retval = getClob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,364,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,365,            else
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,366,            {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,367,                retval = type.cast( getObject( parameterIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,368,            }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,369,
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,370,            if ( wasNull() ) { retval = null; }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,371,
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,372,            return type.cast( retval );
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,373,        }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,374,        catch (ClassCastException e) {}
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,263,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,264,            Object   retval;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,266,            if ( String.class.equals( type ) ) { retval = getString( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,267,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,268,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,269,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,270,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,271,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,272,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,273,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,274,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,275,            else if ( Date.class.equals( type ) ) { retval = getDate( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,276,            else if ( Time.class.equals( type ) ) { retval = getTime( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,277,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,278,            else if ( Blob.class.equals( type ) ) { retval = getBlob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,279,            else if ( Clob.class.equals( type ) ) { retval = getClob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,280,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,281,            else
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,            {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,283,                retval = type.cast( getObject( columnIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,284,            }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,286,            if ( wasNull() ) { retval = null; }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,288,            return type.cast( retval );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,289,        }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,290,        catch (ClassCastException e) {}
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,92,"        setSystemProperty(""derby.stream.error.extendedDiagSeverityLevel"",""50000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,93,
java/client/org/apache/derby/client/am/Connection.java,32,"public abstract class Connection implements java.sql.Connection,"
java/client/org/apache/derby/client/am/Connection.java,33,        ConnectionCallbackInterface {
java/client/org/apache/derby/client/am/Connection.java,649,            checkForClosedConnection();
java/client/org/apache/derby/client/am/Connection.java,743,        if (!open_) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,345,    }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,118,public abstract class EmbedConnection implements EngineConnection
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1902,    if (active) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2250,"   SanityManager.ASSERT(!isClosed(), ""connection is closed"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2475,  checkIfClosed();
java/engine/org/apache/derby/impl/jdbc/Util.java,108, private static void logSQLException(SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,64,public class ConnectionMethodsTest extends BaseJDBCTestCase {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,527, public final String getText()
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,547, public final void setText(String newText)
java/client/org/apache/derby/client/am/Connection.java,33,"    implements java.sql.Connection, ConnectionCallbackInterface, Runnable"
java/client/org/apache/derby/client/am/Connection.java,2474,    public  void    beginAborting()
java/client/org/apache/derby/client/am/Connection.java,2480, //////////////////////////////////////////////////////////
java/client/org/apache/derby/client/am/Connection.java,2481,    //
java/client/org/apache/derby/client/am/Connection.java,2482, // Runnable BEHAVIOR
java/client/org/apache/derby/client/am/Connection.java,2483,    //
java/client/org/apache/derby/client/am/Connection.java,2484,    // This class implements Runnable so that the JDBC 4.1 abort(Executor)
java/client/org/apache/derby/client/am/Connection.java,2485,    // method can run the closeX() logic in a separate thread if necessary.
java/client/org/apache/derby/client/am/Connection.java,2486,    //
java/client/org/apache/derby/client/am/Connection.java,2487, //////////////////////////////////////////////////////////
java/client/org/apache/derby/client/am/Connection.java,2488,
java/client/org/apache/derby/client/am/Connection.java,2489,    public  void    run()
java/client/org/apache/derby/client/am/Connection.java,2490,    {
java/client/org/apache/derby/client/am/Connection.java,2491,        try {
java/client/org/apache/derby/client/am/Connection.java,2492,            rollback();
java/client/org/apache/derby/client/am/Connection.java,2493,            close();
java/client/org/apache/derby/client/am/Connection.java,2494,        } catch (SQLException se)
java/client/org/apache/derby/client/am/Connection.java,2495,        {
java/client/org/apache/derby/client/am/Connection.java,2496,            se.printStackTrace( agent_.getLogWriter() );
java/client/org/apache/derby/client/am/Connection.java,2497,        }
java/client/org/apache/derby/client/am/Connection.java,2498,    }
java/client/org/apache/derby/client/am/Connection.java,2499,
java/client/org/apache/derby/client/net/NetConnection40.java,437,        // The run() method in Connection does the
java/client/org/apache/derby/client/net/NetConnection40.java,438,        // actual releasing of resources.
java/client/org/apache/derby/client/net/NetConnection40.java,440,        executor.execute( this );
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,118,"public abstract class EmbedConnection implements EngineConnection, Runnable"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,121, private static final StandardException exceptionClose = StandardException.closeException();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1894,    private void close(StandardException e) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3333,    public  void    beginAborting()
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3338,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3339, //////////////////////////////////////////////////////////
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3340,    //
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3341, // Runnable BEHAVIOR
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3342,    //
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3343,    // This class implements Runnable so that the JDBC 4.1 abort(Executor)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3344,    // method can run the close() logic in a separate thread if necessary.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3345,    //
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3346, //////////////////////////////////////////////////////////
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3347,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3348,    public  void    run()
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3349,    {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3350,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3351,            rollback();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3352,            close(exceptionClose);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3353,        } catch (SQLException se) { Util.logSQLException( se ); }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3354,    }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3355,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,304,        // The run() method in EmbedConnection does the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,305,        // actual releasing of resources.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,307,        executor.execute( this );
java/client/org/apache/derby/client/am/LogicalConnection40.java,322,        ((NetConnection40) physicalConnection_).abort( executor );
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,56, private boolean isClosed;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,357,        ((EmbedConnection40) getRealConnection()).abort( executor );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,389,     * Test the JDBC 4.1 Connection.abort(Executor) method.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,391,    public void testAbort() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,399,        // NOP if called on a closed connection
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,405,"        Connection conn1 = openUserConnection( ""user1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,462,"            assertSQLState( ""08003"", se );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,466,"        Connection conn2 = openUserConnection( ""user2"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1891,    final String getPassword(String user)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,148,        // NOP if called on a closed connection
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,154,"        Connection conn1 = openUserConnection( ""user1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,168,        else { noSecurityManager( wrapper1 ); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,205,    private void    noSecurityManager(  final Wrapper41Conn wrapper1  ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,227,"        Connection conn2 = openUserConnection( ""user2"");"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,593,
java/engine/org/apache/derby/impl/sql/GenericStatement.java,199,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2353,      // make sure we are not stuck in frozen state if we
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2354,      // caught an interrupt exception and the calling
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2355,                        // thread may not have a chance to call unfreeze
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2356,      isFrozen = false;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2357,      freezeSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2358,
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2359,      throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2402,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1686,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,566,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,589,     inClean = false;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,590,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,573,                                Thread.sleep(500); // 0.5s
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,317,                        InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,318,"                            ""interrupt while waiting to gain entry"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,319,"                            threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,320,                            hashCode());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,520,                        InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,521,"                            ""interrupt while waiting to gain entry"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,522,"                            threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,523,                            hashCode());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,836,"                // again! No need, we have already taken note, pal!"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,34,import java.io.InterruptedIOException;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,516,"      //do nothing, let the flush request to complete."
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,517,      //because it possible that other thread which is
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,518,"      //currently might have completed this request also ,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,519,"      //if exited  on interrupt and throw exception, can not"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,520,      //be sure whether this transaction is COMMITTED ot not.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,679,                {   //does not matter weather I get interrupted or not
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,718,                        // do nothing
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1525, protected boolean checkpointWithTran(
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1604,                                throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2026,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2988,                        // do nothing
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3949,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4011,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4213,                    //does not matter weather I get interrupted or not
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4977,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1071,     * @exception StandardException if interrupted while waiting for a
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1072,     *           backup  to complete.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1075,        throws StandardException
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1087,                            throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1136,  * @exception StandardException if interrupted or a runtime exception occurs
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1139,  throws StandardException
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1154,       // make sure we are not stuck in the backup state
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1155,                            // if we caught an interrupt exception and the
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1156,                            // calling thread may not have a chance to clear
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1157,                            // the in backup state.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1158,
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1159,       inBackup = false;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1160,       backupSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1161,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,224,                //Interrupt the log shipping thread.
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,225,                return;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,474,            try {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,475,                // Wait for the pong response message
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,476,                receivePongSemaphore.wait(DEFAULT_PING_TIMEOUT);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,477,            } catch (InterruptedException ex) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,503,                        sendPingSemaphore.wait();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,512,            } catch (InterruptedException ie) {
java/client/org/apache/derby/client/am/Statement.java,1939,    final void markResultSetsClosed(boolean removeListener) {
java/client/org/apache/derby/client/am/Statement.java,1940,        if (resultSetList_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1941,            for (int i = 0; i < resultSetList_.length; i++) {
java/client/org/apache/derby/client/am/Statement.java,1942,                if (resultSetList_[i] != null) {
java/client/org/apache/derby/client/am/Statement.java,1943,                    resultSetList_[i].markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1945,                resultSetList_[i] = null;
java/client/org/apache/derby/client/am/Statement.java,1948,        if (generatedKeysResultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1949,            generatedKeysResultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1950,        }
java/client/org/apache/derby/client/am/Statement.java,1951,        if (resultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1952,            resultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1953,        }
java/client/org/apache/derby/client/am/Statement.java,1954,        resultSet_ = null;
java/client/org/apache/derby/client/am/Statement.java,1955,        resultSetList_ = null;
java/client/org/apache/derby/client/am/Statement.java,1956,        generatedKeysResultSet_ = null;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,312,"    //first, clear the resutl set"
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1443, void clearResultSets() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,3, * Derby - Class StatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java,279,    private static class StatementExecutor
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,132,
java/client/org/apache/derby/client/am/LogicalConnection40.java,322,        if ( physicalConnection_ != null )
java/client/org/apache/derby/client/am/LogicalConnection40.java,324,            ((NetConnection40) physicalConnection_).abort( executor );
java/client/org/apache/derby/client/am/LogicalConnection40.java,325,        }
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,71,   DriverManager.registerDriver( new AutoloadedDriver() );
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,183,  if ( _engineForcedDown )
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,195, /*
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,197, */
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,204, /*
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,205, ** Unregister the driver. This happens when the engine is
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,206, ** forcibly shut down.
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,207, */
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,210,  _driverModule = null;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,504,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,505,    AutoloadedDriver autoloadedDriver =
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,506,     (AutoloadedDriver) DriverManager.getDriver(url);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,507,    driver = (InternalDriver) autoloadedDriver.getDriverModule();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,508,    // DriverManager will throw an exception if it cannot find the driver
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,160,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,200,        // DERBY-2905 - Autoload driver is left around.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,201,        // assertFalse(isEmbeddedDriverRegistered());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,228,     * Test we can connect successfully to a database.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,299,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,390,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,269,"        // Interrupt recovery: If this thread holds a monitor on ""this"" (when"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,270,        // RAFContainer#clean calls getEmbryonicPage via writeRAFHEader) or
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,271,"        // ""allocCache"" (e.g. FileContainer#newPage, #pageValid) we cannot grab"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,272,"        // channelCleanupMonitor lest another thread is one doing recovery,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,273,        // since the recovery thread will try to grab both those monitors
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,274,"        // during container resurrection.  So, just forge ahead in stealth mode"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,275,        // (i.e. the recovery thread doesn't see us). If we see
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,277,"        // retry from RAFContainer (""this"") or FileContainer (""allocCache"")"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,278,        // after having released the relevant monitor.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,489,"        // Interrupt recovery: If this thread holds a monitor ""allocCache"""
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,490,"        // (e.g. FileContainer#newPage, #pageValid) we cannot grab"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,491,"        // channelCleanupMonitor lest another thread is one doing recovery,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,492,        // since the recovery thread will try to grab both those monitors
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,493,"        // during container resurrection.  So, just forge ahead in stealth mode"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,494,        // (i.e. the recovery thread doesn't see us). If we see
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,496,"        // retry from FileContainer (""allocCache"") after having released the"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,497,        // relevant monitor.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,38, *   Test to reproduce and verify fix for DERBY-151.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,50,    protected static Test baseSuite(String name)
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,54,        if (JDBC.vmSupportsJDBC3()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,55,            // We need a JDBC level that supports DriverManager in order
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,56,            // to run tests that access the database from a stored procedure
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,57,            // using DriverManager and jdbc:default:connection.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,58,            // DriverManager is not supported with JSR169.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,60,            suite.addTestSuite(InterruptResilienceTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,61,            return new CleanDatabaseTestSetup(suite);
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,62,        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,63,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,64,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,69,"        TestSuite suite = new TestSuite(""InterruptResilienceTest"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,74,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,81,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,84,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,85,"            baseSuite(""InterruptResilienceTest:embedded""));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,86,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,87,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,88,            TestConfiguration.clientServerDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,89,"                baseSuite(""InterruptResilienceTest:c/s"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,91,        return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,97,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,99,"        stmt.executeUpdate(""CREATE TABLE irt(x int primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,110,"        stmt.executeUpdate(""DROP TABLE irt"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,118,    // thread.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,119,    public static void irt() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,126,"            insert = c.prepareStatement(""insert into irt values (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,130,"            // running with debug flag ""RAF4Recovery""."
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,140,"                insert.setInt(1, i);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,143,                if (Thread.interrupted()) { // test and reset
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,144,                    seen++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,145,"                    // println(ff() + ""interrupt seen"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,146,                } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,147,"                    // println(ff() + ""interrupt lost"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,148,                    lost++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,149,                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,150,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,164,"            println(""interrupts recovered: "" + seen);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,165,"            println(""interrupts lost: "" + lost + "" ("" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,166,"                    (lost * 100.0/(seen + lost)) + ""%)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,170,    public void testIRT () throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,173,"            ""create procedure IRT () MODIFIES SQL DATA "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,175,"            "".tests.store.InterruptResilienceTest.irt' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,179,"        s.executeUpdate(""call IRT()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,184,    // private static String ff() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,185,    //     return Thread.currentThread().getName();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,186,    // }
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,432,
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,136,
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1536,    Connection openDefaultConnection()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,274,        PreparedStatement ps = prepareStatement
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,275,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,276,"             ""select columnnumber from sys.syscolumns c, sys.systables t\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,277,"             ""where t.tablename = 'SYSTABLES'\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,278,"             ""and t.tableid = c.referenceid\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,279,"             ""and c.columnnumber = delay_st( 5, 1 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,280,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,281,"        println( ""Testing timeout exception for a "" + ps.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,283,        SetQueryTimeoutTest.StatementExecutor   executor =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,284,"            new SetQueryTimeoutTest.StatementExecutor( ps, true, 1 );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,286,        executor.start();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,287,        executor.join();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,289,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,291,        SQLException    se = executor.getSQLException();
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,443,     * @param tc
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,896,"                null, null, ""NO"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2490,"                Types.VARCHAR, Types.SMALLINT, Types.VARCHAR"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2501,"        assertMetaDataResultSet(rs,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2502,                new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2503,"                ""TABLE_CAT"", ""TABLE_SCHEM"", ""TABLE_NAME"", ""COLUMN_NAME"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2504,"                ""DATA_TYPE"", ""TYPE_NAME"", ""COLUMN_SIZE"", ""BUFFER_LENGTH"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2505,"                ""DECIMAL_DIGITS"", ""NUM_PREC_RADIX"", ""NULLABLE"", ""REMARKS"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2506,"                ""COLUMN_DEF"", ""SQL_DATA_TYPE"", ""SQL_DATETIME_SUB"", ""CHAR_OCTET_LENGTH"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2507,"                ""ORDINAL_POSITION"", ""IS_NULLABLE"", ""SCOPE_CATLOG"", ""SCOPE_SCHEMA"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2508,"                ""SCOPE_TABLE"", ""SOURCE_DATA_TYPE"", ""IS_AUTOINCREMENT"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2509,"               }, columnTypes"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2510,"        , null"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2511,              );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,831,"            ,""40"",""1"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,832,"            {"""",""APP"",""V"",""NUM"",""4"",""INTEGER"",""10"",null,""0"",""10"",""1"","""",null,null,null,null,""2"",""YES"",null,null,null,null,""NO""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,877,"              null,null,null,null,""1"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,879,"              null,null,null,null,""2"",""YES"",null,null,null,null,""NO""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,885,"              null,null,null,null,""1"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,887,"              null,null,null,null,""2"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,889,"              null,null,null,null,""3"",""YES"",null,null,null,null,""NO""}};"
java/client/org/apache/derby/client/am/ResultSet.java,467,
java/client/org/apache/derby/client/am/ResultSet.java,468,        nullDataForGC();
java/client/org/apache/derby/client/am/Statement.java,3100,                close();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,618,    isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,625,"            // to prevent infinite looping, tell our parent Statement"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,626,            // that we have closed AFTER
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,627,            // we have marked ourself as closed
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,628,            if ( stmt != null) { stmt.closeMeOnCompletion(); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,629,            if ( (owningStmt != null) && (owningStmt != stmt) ) { owningStmt.closeMeOnCompletion(); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,630,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4328,    isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4353,            isClosed = true;
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,241,     * flag to allow safe operation during execution.  Called when operations
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,242,     * will be be prematurely terminated due to the interrupt.
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,244,"     * If an interrupt status flag was seen, we set it back ON here and throw"
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,245,     * session level SQLState.CONN_INTERRUPT.
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,248,     * @throws StandardException (SQLState.CONN_INTERRUPT)
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,76,            // new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,77,            // TestConfiguration.singleUseDatabaseDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,81,            // new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,82,            // TestConfiguration.singleUseDatabaseDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,354,        public SQLException e; // if any seen
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,374,                PreparedStatement s = c.prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,377,"                    ""insert into mtTab values (?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,388,                        ResultSet rs = s.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,389,                        rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,390,                        if (interrupted()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,391,                            interruptsSeen++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,392,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,393,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,394,"                        assertEquals(""wrong row content"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,395,"                                     candidate, rs.getLong(1));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,397,                        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,404,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,405,                        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,423,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,466,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,467,"                Class.forName(""org.apache.derby.jdbc.EmbeddedDriver"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,468,            } catch (ClassNotFoundException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,469,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,510,
java/client/org/apache/derby/jdbc/ClientDriver.java,50,    static {
java/client/org/apache/derby/jdbc/ClientDriver.java,60,            registeredDriver__ = new ClientDriver();
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,78,            _autoloadedDriver = new AutoloadedDriver();
java/client/org/apache/derby/client/net/NetConnection40.java,456,        try
java/client/org/apache/derby/client/net/NetConnection40.java,457,        {
java/client/org/apache/derby/client/net/NetConnection40.java,458,            if (agent_.loggingEnabled()) {
java/client/org/apache/derby/client/net/NetConnection40.java,459,"                agent_.logWriter_.traceEntry(this, ""getNetworkTimeout"");"
java/client/org/apache/derby/client/net/NetConnection40.java,460,            }
java/client/org/apache/derby/client/net/NetConnection40.java,461,            checkForClosedConnection();
java/client/org/apache/derby/client/net/NetConnection40.java,462,        }
java/client/org/apache/derby/client/net/NetConnection40.java,463,        catch ( SqlException se )
java/client/org/apache/derby/client/net/NetConnection40.java,464,        {
java/client/org/apache/derby/client/net/NetConnection40.java,465,            throw se.getSQLException();
java/client/org/apache/derby/client/net/NetConnection40.java,466,        }
java/client/org/apache/derby/client/net/NetConnection40.java,472,        try
java/client/org/apache/derby/client/net/NetConnection40.java,473,        {
java/client/org/apache/derby/client/net/NetConnection40.java,474,            if (agent_.loggingEnabled()) {
java/client/org/apache/derby/client/net/NetConnection40.java,475,"                agent_.logWriter_.traceEntry(this, ""setNetworkTimeout"");"
java/client/org/apache/derby/client/net/NetConnection40.java,476,            }
java/client/org/apache/derby/client/net/NetConnection40.java,477,            checkForClosedConnection();
java/client/org/apache/derby/client/net/NetConnection40.java,478,        }
java/client/org/apache/derby/client/net/NetConnection40.java,479,        catch ( SqlException se )
java/client/org/apache/derby/client/net/NetConnection40.java,480,        {
java/client/org/apache/derby/client/net/NetConnection40.java,481,            throw se.getSQLException();
java/client/org/apache/derby/client/net/NetConnection40.java,482,        }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,323,        checkIfClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,329,        checkIfClosed();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,650,"            fail( ""Should object that the connection is closed."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,654,"            assertSQLState( CLOSED_CONNECTION, se );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,659,"            fail( ""Should object that the connection is closed."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,663,"            assertSQLState( CLOSED_CONNECTION, se );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,57,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,70,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,83,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,92,"    private SQLException nothingWrapped() { return new SQLException( ""Nothing wrapped!"" ); }"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2160,     newLogFile = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,348,  int  actualErrorCount =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,349,   vanishedMethodList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,350,   unsupportedList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,351,   notUnderstoodList.size();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,352,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,353,  assertEquals
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,354,"   ( ""Unexpected discrepancies."","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,355,"     0, actualErrorCount );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1051,        if (JDBC.vmSupportsJDBC41()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1052,"            // DERBY-4869: The runtime environment supports JDBC 4.1, but"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1053,            // our database drivers don't yet. Disable this test until the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1054,            // drivers have been updated.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1055,"            return new TestSuite(""UnsupportedVetter - Disabled"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1056,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,106,        if (JDBC.vmSupportsJDBC41()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,107,"            // DERBY-4869: The runtime environment supports JDBC 4.1, but"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,108,            // our database drivers don't yet. Disable this test until the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,109,            // drivers have been updated.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,110,"            return new TestSuite(""VerifySignatures - Disabled"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,111,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,99,"            assertFalse(""No exception was thrown"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,100,                        decorator_.expectsException(method_));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,112,        if (JDBC.vmSupportsJDBC41()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,113,"            // DERBY-4869: The runtime environment supports JDBC 4.1, but"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,114,            // our database drivers don't yet. Disable this test until the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,115,            // drivers have been updated.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,116,"            return new TestSuite(""ClosedObjectTest - Disabled"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,117,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,472,"                assertTrue(""method: "" + methodString + "", but message: "" + sqle.getMessage(), sqle.getMessage().indexOf(methodString) > 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,192,"            String AutoloadedDriver = ""org.apache.derby.jdbc.AutoloadedDriver"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,273,"            if (driverClass.equals(""org.apache.derby.jdbc.ClientDriver""))"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,63,    // This flag is set if AutoloadedDriver exists
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,64,    private static boolean activeautoloadeddriver = false;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,96,            activeautoloadeddriver = true;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,230,            if (!activeautoloadeddriver)
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,231,                DriverManager.registerDriver(_driverModule);
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,247,            if (activeautoloadeddriver) {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,249,                activeautoloadeddriver = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,185,"     * Test DERBY-2905:Shutting down embedded Derby does not remove all code,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,186,     * the AutoloadDriver is left registered in the DriverManager.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,474,    private void assertShutdownOK() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,475,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,491,"            JDBCDataSource.setBeanProperty(ds, ""connectionAttributes"",""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,279,        for ( int i = 0; i < 10; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,303,        assertNotNull( se );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,304,"        assertEquals( SQLTimeoutException.class.getName(), se.getClass().getName() );"
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,151,"  return super.getFromTableByName(name, schemaName, exactMatch);"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,117,  * cursor specification. This variant is used by InsertNode.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,190,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,191,     * TODO: Make sure this test is also run with automatic index statistics
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,192,"     * generation enabled, as it revealed a bug in the data dictionary access"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,193,     * pattern (dd was left in write mode when it shouldn't have been).
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,277,        // try to force a timeout. try a couple times to reduce the risk
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,278,        // of instability in this test.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,279,        for ( int i = 0; i < 20; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,280,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,281,            PreparedStatement ps = prepareStatement
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,282,                (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,283,"                 ""select columnnumber from sys.syscolumns c, sys.systables t\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,284,"                 ""where t.tablename = 'SYSTABLES'\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,285,"                 ""and t.tableid = c.referenceid\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,286,"                 ""and c.columnnumber = delay_st( 5, 1 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,287,                 );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,288,"            println( ""Testing timeout exception for a "" + ps.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,289,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,290,            SetQueryTimeoutTest.StatementExecutor   executor =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,291,"                new SetQueryTimeoutTest.StatementExecutor( ps, true, 1 );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,292,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,293,            executor.start();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,294,            executor.join();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,295,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,296,            ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,297,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,298,            se = executor.getSQLException();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,299,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,300,            if ( se != null ) { break; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,301,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,303,        if ( se == null )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,304,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,305,"            println( ""Dang! Still can't force a timeout on this platform!"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,306,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,307,        else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,308,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,309,"            assertEquals( SQLTimeoutException.class.getName(), se.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,310,        }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4917,   if (referencedCols != null){
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1387,    // change triggers to refer to columns in new positions
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1402,   //If the trigger under consideration already got dropped through
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1403,"   //the referencedCols loop above, then move to next trigger"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1406,   //None of the triggers use column being dropped as a trigger
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1407,   //column. Check if the column being dropped is getting used
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1408,   //inside the trigger action through REFERENCING clause.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1410,   if (referencedColsInTriggerAction == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1411,    continue;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1412,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1413,"   int refColInTriggerActionLen = referencedColsInTriggerAction.length, j;"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1414,   boolean changedColPositionInTriggerAction = false;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1415,   for (j = 0; j < refColInTriggerActionLen; j++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1416,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1417,    if (referencedColsInTriggerAction[j] > droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1419,     changedColPositionInTriggerAction = true;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1421,    else if (referencedColsInTriggerAction[j] == droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1423,     if (cascade)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1425,                        trd.drop(lcc);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1426,      activation.addWarning(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1427,       StandardException.newWarning(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1428,"                                SQLState.LANG_TRIGGER_DROPPED,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1429,"                                trd.getName(), td.getName()));"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1430,     }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1431,     else
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1432,"     { // we'd better give an error if don't drop it,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1433,      // otherwise there would be unexpected behaviors
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1434,      throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1435,"                            SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1436,"                            dm.getActionString(DependencyManager.DROP_COLUMN),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1437,"                            columnName, ""TRIGGER"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1438,                            trd.getName() );
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1440,     break;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1580,"  dd.dropColumnDescriptor(td.getUUID(), columnName, tc);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2259,"        // inside the trigger action. DERBY-4887. Currently, Derby does not"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2260,        // look at the columns being used inside the trigger action unless
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2261,        // they are being used through the REFERENCING clause and hence does
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2262,        // not catch the trigger dependencies
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2264,        //Following is not going to be caught by the information available
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2265,        //in systriggers even in 10.7 and higher. We only keep the information
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2266,        //about the columns used through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2270,        //Following will be caught because of the information available in
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2271,        //systriggers in 10.7 and higher because we keep the information
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2272,        //about the columns used through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2279,        // We got an error because Derby detected the dependency on
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2280,        // atdc_12_trigger_2
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2295,        // the 2 triggers should have been dropped as a result of cascade but
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2296,        // only one gets dropped. Derby does not recognize the dependency of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2297,        // trigger action column where the column is not getting referenced
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2298,        // through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2299,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2300,            st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2301,"                    "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2302,"                    ""triggername = 'ATDC_12_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2303,"            JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_12_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2308,"        // action. Currently, Derby does not look at the columns being used"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2309,        // inside the trigger action and hence does not catch the trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2310,        // dependency unless they are being referenced through REFERENCING
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2311,"        // clause. Similarly, drop column cascade should drop this table"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2312,        // level trigger because it is using the colunm in it's trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2313,        // action but Derby does not catch that. DERBY-4887.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2351,        // following is not the right behavior. Derby should have dropped
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2352,        // all the 6 triggers but it drops only 3. Other 3 didn't get
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2353,        // dropped because Derby does not recognize the dependency of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2354,        // trigger action column where the column is not getting referenced
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2355,        // through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2358,        // the triggers should have been dropped as a result of cascade but
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2359,        // Derby does not recognize the dependency of trigger action column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2361,            st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2362,"            "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2363,"            ""triggername in ('ATDC_13_TRIGGER_1', ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2364,"            ""'ATDC_13_TRIGGER_2', 'ATDC_13_TRIGGER_3')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2365,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_13_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2366,"             {""ATDC_13_TRIGGER_2""}, {""ATDC_13_TRIGGER_3""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2368,        // Another test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2407,        // following is not the right behavior. we should have gotten an error
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2408,        // because column being dropped is getting used in a trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,157,     * Make sure that DERBY-4998 changes do not break backward compatibility.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,159,     * It creates triggers in old release with trigger action columns getting
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,160,     * used through the REFERENCING clause. Those triggers in soft upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,161,"     * mode, post soft upgrade mode and hard upgrade mode do not get detected"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,162,"     * by ALTER TABLE DROP COLUMN because prior to 10.7, we did not keep"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,163,     * information about trigger action columns getting used through the
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,164,     * REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,176,         //Create 2 tables for each of the upgrade phases which are
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,177,         //a)soft upgrade b)post soft upgrade and c)hard upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,178,"         //For each of the upgrade phase, one table will be used for"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,182,         //Following 2 tables and triggers are for soft upgrade mode check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,183,"         s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,184,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,185,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,186,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,187,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,188,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,189,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,190,"              ""ON DERBY4998_SOFT_UPGRADE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,191,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,192,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,193,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,194,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,195,"            s.execute(""CREATE TABLE DERBY4998_soft_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,196,"            s.execute(""INSERT INTO DERBY4998_soft_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,197,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,198,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,199,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,200,"            s.execute(""CREATE TRIGGER DERBY4998_soft_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,201,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,202,"              ""ON DERBY4998_soft_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,203,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,204,"                    ""SELECT oldt.c11 from DERBY4998_soft_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,205,"            s.executeUpdate(""UPDATE DERBY4998_soft_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,206,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,207,         //Following 2 tables and triggers are for post-soft upgrade mode
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,208,            //check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,209,"            s.execute(""CREATE TABLE DERBY4998_postsoft_upgrade_restrict(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,210,"            s.execute(""INSERT INTO DERBY4998_postsoft_upgrade_restrict VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,211,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,212,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,213,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,214,"            s.execute(""CREATE TRIGGER DERBY4998_postsoft_upgrade_restrict_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,215,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,216,"              ""ON DERBY4998_postsoft_upgrade_restrict REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,217,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,218,"                    ""SELECT oldt.c11 from DERBY4998_postsoft_upgrade_restrict"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,219,"            s.executeUpdate(""UPDATE DERBY4998_postsoft_upgrade_restrict SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,220,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,221,"            s.execute(""CREATE TABLE DERBY4998_postsoft_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,222,"            s.execute(""INSERT INTO DERBY4998_postsoft_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,223,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,224,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,225,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,226,"            s.execute(""CREATE TRIGGER DERBY4998_postsoft_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,227,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,228,"              ""ON DERBY4998_postsoft_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,229,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,230,"                    ""SELECT oldt.c11 from DERBY4998_postsoft_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,231,"            s.executeUpdate(""UPDATE DERBY4998_postsoft_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,232,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,233,         //Following 2 tables and triggers are for hard upgrade mode check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,234,"            s.execute(""CREATE TABLE DERBY4998_hard_upgrade_restrict(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,235,"            s.execute(""INSERT INTO DERBY4998_hard_upgrade_restrict VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,236,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,237,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,238,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,239,"            s.execute(""CREATE TRIGGER DERBY4998_hard_upgrade_restrict_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,240,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,241,"              ""ON DERBY4998_hard_upgrade_restrict REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,242,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,243,"                    ""SELECT oldt.c11 from DERBY4998_hard_upgrade_restrict"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,244,"            s.executeUpdate(""UPDATE DERBY4998_hard_upgrade_restrict SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,245,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,246,"            s.execute(""CREATE TABLE DERBY4998_hard_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,247,"            s.execute(""INSERT INTO DERBY4998_hard_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,248,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,249,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,250,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,251,"            s.execute(""CREATE TRIGGER DERBY4998_hard_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,252,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,253,"              ""ON DERBY4998_hard_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,254,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,255,"                    ""SELECT oldt.c11 from DERBY4998_hard_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,256,"            s.executeUpdate(""UPDATE DERBY4998_hard_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,260,         //The tables created with 10.6 and prior versions will exhibit
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,261,         //incorrect behavoir
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,262,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,263,"           ""DERBY4998_SOFT_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,264,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,265,"           ""DERBY4998_SOFT_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,266,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,267,"         //Even though we are in soft upgrade mode using Derby 10.7 release,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,268,         //newly created triggers will still not keep track of trigger
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,269,         //action columns referenced through REFERENCING clause because
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,270,         //that will break the backward compatibility when this db gets
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,271,         //used with earlier Derby version again after soft upgrade.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,272,         //Show this with an example
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,273,"            s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,274,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,275,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,276,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,277,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,278,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,279,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,280,"              ""ON DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,281,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,282,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,283,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,284,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,285,"           ""DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,286,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,287,"            s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,288,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,289,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,290,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,291,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,292,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,293,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,294,"              ""ON DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,295,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,296,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,297,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,298,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,299,"           ""DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,305,         //The tables created with 10.6 and prior versions will continue to
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,306,         //exhibit incorrect behavoir
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,307,"         incorrectBehaviorForDropColumn(""DERBY4998_POSTSOFT_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,308,"           ""DERBY4998_POSTSOFT_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,309,"         incorrectBehaviorForDropColumn(""DERBY4998_POSTSOFT_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,310,"           ""DERBY4998_POSTSOFT_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,311,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,316,"            s.execute(""CREATE TABLE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,317,"            s.execute(""INSERT INTO DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,318,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,319,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,320,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,321,"            s.execute(""CREATE TRIGGER DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,322,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,323,"              ""ON DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,324,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,325,"                    ""SELECT oldt.c11 from DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,326,"            s.executeUpdate(""UPDATE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,327,"         incorrectBehaviorForDropColumn(""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,328,"           ""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,330,"            s.execute(""CREATE TABLE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,331,"            s.execute(""INSERT INTO DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,332,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,333,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,334,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,335,"            s.execute(""CREATE TRIGGER DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,336,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,337,"              ""ON DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,338,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,339,"                    ""SELECT oldt.c11 from DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,340,"            s.executeUpdate(""UPDATE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,341,"         incorrectBehaviorForDropColumn(""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,342,"           ""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,343,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,346,         //The tables created with 10.6 and prior versions will exhibit
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,347,"         //incorrect behavior. Even though the database is at 10.7 level,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,348,         //the triggers created with prior Derby releases did not keep
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,349,         //track of trigger action columns referenced through REFERENCING
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,350,         //clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,351,"         incorrectBehaviorForDropColumn(""DERBY4998_HARD_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,352,"           ""DERBY4998_HARD_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,353,"         incorrectBehaviorForDropColumn(""DERBY4998_HARD_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,354,"           ""DERBY4998_HARD_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,356,         //Create 2 new tables now that the database has been upgraded to
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,357,         //10.7 Notice that newly created tables will be able to detect
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,359,"         //This is because starting 10.7, for new triggers, we have"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,360,         //started keeping track of trigger action columns referenced
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,361,         //through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,362,"            s.execute(""CREATE TABLE DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,363,"            s.execute(""INSERT INTO DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,364,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,365,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,366,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,367,"            s.execute(""CREATE TRIGGER DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,368,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,369,"              ""ON DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,370,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,371,"                    ""SELECT oldt.c11 from DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,372,"            s.executeUpdate(""UPDATE DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,374,"              "" alter table DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,378,"            ""triggername='DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_TR1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,380,"              new String[][]{{""DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_TR1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,381,"            s.execute(""CREATE TABLE DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,382,"            s.execute(""INSERT INTO DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,383,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,384,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,385,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,386,"            s.execute(""CREATE TRIGGER DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,387,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,388,"              ""ON DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,389,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,390,"                    ""SELECT oldt.c11 from DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,391,"            s.executeUpdate(""UPDATE DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,392,"            s.executeUpdate(""alter table DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,397,"                    ""triggername='DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE_TR1'""));"
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,61,"     * don't have lcc, e.g. during database creation."
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,274,                // do nothing
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,350,                    // do nothing
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2617,     * Puts the current thread to sleep and sets the interrupt flag of the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2618,     * thread if an {@code InterruptedException} is thrown while sleeping.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2620,     * <em>NOTE</em>: This method does not guarantee that the thread sleeps at
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2626,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2627,            Thread.sleep(millis);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2628,        } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2629,            // Set the interrupt flag of the thread to allow code higher up the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2630,            // stack to detect the interruption.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2631,            Thread.currentThread().interrupt();
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,962,            // Set the interrupt flag again.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,963,            Thread.currentThread().interrupt();
java/engine/org/apache/derby/impl/services/monitor/TopService.java,190,     return false;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,205,        synchronized (receiveSemaphore) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,206,            try {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,207,                receiveSemaphore.wait(DEFAULT_MESSAGE_RESPONSE_TIMEOUT);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,208,            } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/services/monitor/TopService.java,31,import org.apache.derby.iapi.util.InterruptStatus;
java/engine/org/apache/derby/impl/services/monitor/TopService.java,191,                    InterruptStatus.setInterrupted();
java/engine/org/apache/derby/impl/services/monitor/TopService.java,31,// import org.apache.derby.iapi.util.InterruptStatus;
java/engine/org/apache/derby/impl/services/monitor/TopService.java,191,                    // InterruptStatus.setInterrupted();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2213,"        st.executeUpdate(""create table atdc_6 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2220,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2221,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2222,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2223,"                ""triggername='ATDC_6_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2224,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_6_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2237,"        st.executeUpdate(""create table atdc_11 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2244,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2245,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2246,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2247,"                ""triggername='ATDC_11_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2248,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_11_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2260,"        st.executeUpdate(""create table atdc_12 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2274,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2275,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2276,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2277,"                ""triggername in ('ATDC_12_TRIGGER_1', 'ATDC_12_TRIGGER_2')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2278,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_12_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2295,"        st.executeUpdate(""create table atdc_13 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2320,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2321,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2322,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2323,"                ""triggername in ('ATDC_13_TRIGGER_1', ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2324,"                ""'ATDC_13_TRIGGER_2', 'ATDC_13_TRIGGER_3',"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2325,"                ""'ATDC_13_TRIGGER_4', 'ATDC_13_TRIGGER_5',"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2326,"                ""'ATDC_13_TRIGGER_6')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2327,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_13_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2376,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2383,"        st.executeUpdate(""create table atdc_14_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2384,"        st.executeUpdate(""create table atdc_14_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2385,"        st.executeUpdate(""insert into atdc_14_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2386,"        st.executeUpdate(""insert into atdc_14_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2396,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2397,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2398,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2399,"                ""triggername = 'ATDC_14_TRIGGER_1' "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2400,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_14_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2407,"        st.executeUpdate(""create table atdc_14_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2408,"        st.executeUpdate(""create table atdc_14_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2409,"        st.executeUpdate(""insert into atdc_14_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2410,"        st.executeUpdate(""insert into atdc_14_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2431,"        st.executeUpdate(""create table atdc_15_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2432,"        st.executeUpdate(""create table atdc_15_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2433,"        st.executeUpdate(""insert into atdc_15_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2434,"        st.executeUpdate(""insert into atdc_15_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2435,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2436,"            st.executeQuery("" select * from atdc_15_tab1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2437,"        JDBC.assertFullResultSet(rs, new String[][]{{""1"",""11""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2438,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2439,"            st.executeQuery("" select * from atdc_15_tab2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2440,"        JDBC.assertFullResultSet(rs, new String[][]{{""1"",""11""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2462,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1804,    newCC.setCurrentDependent(td);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1805,    stmtnode.bindStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2300,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2301,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2302,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountBeforeCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2303,"  //      st.executeUpdate(""drop table ATDC_12"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2350,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2351,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2352,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountBeforeCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2353,"    //    st.executeUpdate(""drop table ATDC_13"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2393,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2394,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2395,"  //              numberOfRowsInSysdepends(st),sysdependsRowCountAfterCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2396,"    //    st.executeUpdate(""drop table ATDC_13"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2473,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2474,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should not change"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2475,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountAfterCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2484,"//        st.executeUpdate(""drop table ATDC_15_TAB2"");"
java/engine/org/apache/derby/impl/jdbc/Util.java,328,"  return newEmbedSQLException(SQLState.SET_STREAM_FAILURE,"
java/engine/org/apache/derby/impl/jdbc/Util.java,329,"   new Object[] {msg},"
java/engine/org/apache/derby/impl/jdbc/Util.java,330,                StandardException.getSeverityFromIdentifier(SQLState.SET_STREAM_FAILURE));
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,76,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,82,"            s.executeUpdate(""INSERT INTO Trigger_t1(max_size) ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,83,"      ""VALUES(20)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,29,import java.io.FileInputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,30,import java.io.FileNotFoundException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,31,import java.io.IOException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,32,import java.io.OutputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,37,import javax.sql.*;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,195,    public void testGetTypeMapReturnsasExcepted() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,212,        ArrayList lst = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,220,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,221,"             map.put(""JAVA_UTIL_LIST"", Class.forName(""java.util.List""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,222,        } catch (ClassNotFoundException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,223,            se.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,224,"            println(""map.put has exception"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,225,        }
java/client/org/apache/derby/client/am/CallableStatement.java,1188,        try {
java/client/org/apache/derby/client/am/CallableStatement.java,1189,            for ( int i = 0; i < cursorParamCount; i++ )
java/client/org/apache/derby/client/am/CallableStatement.java,1191,                if ( parameterMetaData_.sqlxParmmode_[ i ] == java.sql.ParameterMetaData.parameterModeInOut )
java/client/org/apache/derby/client/am/CallableStatement.java,1193,                    int jdbcParamNumber = i + 1;
java/client/org/apache/derby/client/am/CallableStatement.java,1194,                    Object  returnArg = singletonParams.isNull_[ i ] ? null : singletonParams.getObject( jdbcParamNumber );
java/client/org/apache/derby/client/am/CallableStatement.java,1195,
java/client/org/apache/derby/client/am/CallableStatement.java,1196,                    //
java/client/org/apache/derby/client/am/CallableStatement.java,1197,                    // special case to coerce Integer to Short for SMALLINT
java/client/org/apache/derby/client/am/CallableStatement.java,1198,                    //
java/client/org/apache/derby/client/am/CallableStatement.java,1199,                    if ( parameterMetaData_.types_[ i ] == Types.SMALLINT )
java/client/org/apache/derby/client/am/CallableStatement.java,1201,                        if ( (returnArg != null) && (returnArg instanceof Integer) )
java/client/org/apache/derby/client/am/CallableStatement.java,1202,                        {
java/client/org/apache/derby/client/am/CallableStatement.java,1203,                            returnArg = new Short( ((Integer) returnArg).shortValue() );
java/client/org/apache/derby/client/am/CallableStatement.java,1204,                        }
java/client/org/apache/derby/client/am/CallableStatement.java,1206,
java/client/org/apache/derby/client/am/CallableStatement.java,1207,"                    setInput( jdbcParamNumber, returnArg );"
java/client/org/apache/derby/client/am/CallableStatement.java,1209,            }
java/client/org/apache/derby/client/am/CallableStatement.java,1210,        } catch (Exception se)
java/client/org/apache/derby/client/am/CallableStatement.java,1211,        {
java/client/org/apache/derby/client/am/CallableStatement.java,1212,            throw new IllegalArgumentException( se.getMessage() );
java/client/org/apache/derby/client/am/CallableStatement.java,1213,        }
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,210,   // Driver not registered
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,211,   throw new SQLException
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,212,    (MessageService.getTextMessage(MessageId.CORE_JDBC_DRIVER_UNREGISTERED));
java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java,435,      throw new SQLException(MessageService.getTextMessage(MessageId.CORE_JDBC_DRIVER_UNREGISTERED));
java/shared/org/apache/derby/shared/common/reference/MessageId.java,189," String CORE_JDBC_DRIVER_UNREGISTERED= ""I015""; // JDBCDriver is not registered with the JDBC driver manager"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1684,
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,353,            // SocketTimeoutException is wrapped in
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,354,            // PrivilegedActionException.
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,355,            Throwable cause = e.getCause();
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,356,            if (cause instanceof SocketTimeoutException) {
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,357,                // Timeout!
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,358,                return false;
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,359,            } else {
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,360,                throw StandardException.newException
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,363,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,27,import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,34,import javax.sql.*;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,606,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,607,    public void testIsPoolable() throws SQLException {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1347,             try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1349,"                 // OK not to force WAL here, in fact, this operation preceeds the"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1350,                 // creation of the log record to ensure sufficient space.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1352,                 dataFactory.writeInProgress();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1353,                 try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1354,                 {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1355,"                     fileData = file.getRandomAccessFile( ""rw"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1356,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1357,                 finally
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1358,                 {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1359,                     dataFactory.writeFinished();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1360,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1362,                 // This container format specifies that the first page is an
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1363,                 // allocation page and the container information is stored
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1364,                 // within it.  The allocation page needs to be somewhat
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1365,                 // formatted because if the system crashed after the create
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1366,"                 // container log operation is written, it needs to be well"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1367,                 // formed enough to get the container information back out of
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1368,                 // it.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1369,                 //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1370,                 // Don't try to go thru the page cache here because the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1371,                 // container object cannot be found in the container cache at
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1372,"                 // this point yet.  However, if we use the page cache to store"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1373,"                 // the first allocation page, then in order to write itself"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1374,"                 // out, it needs to ask the container to do so, which is going"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1375,                 // to create a deadlock.  The allocation page cannot write
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1376,                 // itself out without going thru the container because it
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1377,                 // doesn't know where its offset is.  Here we effectively
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1378,                 // hardwire page 0 at offset 0 of the container file to be
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1379,                 // the first allocation page.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1380,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1381,                 // create an embryonic page - if this is not a temporary
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1382,"                 // container, synchronously write out the file header."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1383,                 writeRAFHeader(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1384,"                     actionIdentity, fileData, true,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1385,                     (actionIdentity.getSegmentId() !=
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1388,             } catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1390,"                 // only thrown by the RandomeAccessFile constructor,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1391,                 // so the file won't exist
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1392,"                 throw StandardException.newException( SQLState.FILE_CREATE, se, file);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1394,             } catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1396,                 boolean fileDeleted;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1397,                 try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1398,                     fileDeleted = privRemoveFile(file);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1399,                 } catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1400,"                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, se.toString());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1401,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1403,                 if (!fileDeleted) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1404,"                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, ioe.toString());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1405,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1407,"                 throw StandardException.newException( SQLState.FILE_CREATE, ioe, file);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,665,            // Assert and clear thread's flag:
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,667,            assertTrue(Thread.interrupted());
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,78,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,79,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,80,import org.apache.derby.impl.sql.compile.FromSubquery;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2307,    fsq.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,661, /**
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,662,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,663,  */
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,664, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,665, {
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,666,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,667,  subquery.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,668, }
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,669,
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,213, /**
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,214,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,215,  */
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,216, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,217, {
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,218,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,219,  if (javaNode != null)
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,220,   javaNode.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,221, }
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,222,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,550,"  * Triggers, constraints and views get executed with their definer's"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,551,  * privileges and they can exist in the system only if their definers'
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,552,"  * still have all the privileges to creeate them. Based on this, any"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,555,"  * At compile time, we wil make sure that we do not collect the privilege"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,559, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1364, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1365,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1366,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1367, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1368, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1369,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1370,  if (expression != null)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1371,   expression.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1372, }
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1373,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2781,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2782, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2783,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2784,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2785, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2786, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2787,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2788,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2789,  int size = size();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2790,  for (int index = 0; index < size; index++)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2791,   ((ResultColumn) elementAt(index)).disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2792, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,482, /**
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,483,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,484,  */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,485, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,486, {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,487,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,488,  if (resultColumns != null)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,489,   resultColumns.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,490, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,491,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,27,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,37,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,38,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2265, /**
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2266,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2267,  */
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2268, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2269, {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2270,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2271,  int fromListSize = fromList.size();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2272,  for( int i = 0; i < fromListSize; i++)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2273,   ((FromTable) fromList.elementAt(i)).disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2274, }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2275,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,761,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1349,"     ResultSet rs = dm.getTablePrivileges(null, schema.toUpperCase(), table.toUpperCase());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1351,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java,248,"    private static boolean lessThan( int[] left, int[] right )"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1840,    //Register the dependency between trigger table and trigger
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1841,    // action SPS
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1842,"    dm.addDependency(triggerActionSPSD, td, lcc.getContextManager());"
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,350,"  dm.addDependency(actionspsd, triggerTable, lcc.getContextManager());"
java/engine/org/apache/derby/impl/sql/execute/rts/ResultSetStatistics.java,3,   Derby - Class org.apache.derby.impl.sql.execute.rts.ResultSetStatistics
java/engine/org/apache/derby/impl/sql/execute/rts/ResultSetStatistics.java,22,package org.apache.derby.impl.sql.execute.rts;
java/engine/org/apache/derby/iapi/sql/execute/ResultSetStatisticsFactory.java,31,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINVisitor.java,28,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java,109,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINDefaultVisitor.java,33,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINSystemTableVisitor.java,48,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/testing/org/apache/derbyTesting/unitTests/lang/EmptyResultSetStatisticsFactory.java,39,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,26,/* Strictly speaking we shouldn't import classes under the impl hierarchy here
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,27, * but this is work in progress.
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,28, * manish - Wed Mar 28 13:05:19 PST 2001
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,29, */
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,30,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,31,
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,59," public StatementNode parseStatement(String statementSQLText,"
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,64, public StatementNode parseStatement(String statementSQLText)
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,41,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,42,
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,1293,"   StatementNode actionStmt,"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,44,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,373,   StatementNode stmtnode = (StatementNode)pa.parseStatement(triggerDefinition);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,330,"    StatementNode qt = p.parseStatement(statementText, paramDefaults);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,75,import org.apache.derby.impl.sql.compile.FromBaseTable;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,76,import org.apache.derby.impl.sql.compile.QueryTreeNode;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,77,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4753,"   StatementNode actionStmt,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,24,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,27,import java.util.HashSet;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,549,  StatementNode qt = p.parseStatement(select);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1397,  StatementNode qt = p.parseStatement(select);
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,36,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,37,
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,39,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,45,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,46,
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,259,  StatementNode qt = p.parseStatement(values);
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,24,import org.apache.derby.impl.sql.compile.QueryTreeNode;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,25,import org.apache.derby.iapi.sql.compile.Parser;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,26,import org.apache.derby.iapi.sql.Statement;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,31,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,76, public StatementNode parseStatement(String statementSQLText)
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,129," public StatementNode parseStatement(String statementSQLText, Object[] paramDefaults)"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,40,import org.apache.derby.iapi.services.io.StoredFormatIds;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,786,   return p.parseStatement(sql);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,37,import org.apache.derby.iapi.sql.compile.RowOrdering;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,47,import org.apache.derby.iapi.sql.execute.ExecutionContext;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,48,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,49,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,51,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,54,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,55,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,56,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,60,import org.apache.derby.iapi.services.loader.GeneratedMethod;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,61,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,67,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,68,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,69,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,75,import java.util.Properties;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1245,  StatementNode qt = p.parseStatement(values);
java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java,68,import org.apache.derby.impl.sql.compile.StatementNode;
java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java,492,"   StatementNode actionStmt,"
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,29,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,32,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,169,     return new DDdependableFinder(StoredFormatIds.COLUMNS_PERMISSION_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java,32,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java,33,import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java,212,        return new DDdependableFinder(StoredFormatIds.PERM_DESCRIPTOR_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/RoleGrantDescriptor.java,33,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/RoleGrantDescriptor.java,212,        return new DDdependableFinder(StoredFormatIds.ROLE_GRANT_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,30,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,31,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,166,     return new DDdependableFinder(StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java,37,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java,308,        return new DDdependableFinder(StoredFormatIds.SEQUENCE_DESCRIPTOR_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,29,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,31,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,186,     return new DDdependableFinder(StoredFormatIds.TABLE_PERMISSION_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,24,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,25,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,26,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,30,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,31,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,32,// is it OK to do this?
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,33,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,34,import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,35,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,101, public DependableFinder getDependableFinder(int formatId)
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,103,  return new DDdependableFinder(formatId);
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,109,"  return new DDColumnDependableFinder(formatId, columnBitMap);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,24,import java.util.Properties;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,25,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,28,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,29,import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,30,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,38,import org.apache.derby.impl.sql.compile.ResultColumnList;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,39,import org.apache.derby.impl.sql.compile.ResultSetNode;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,576,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,577, /**
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,578,  * Get one of the several types of create alias nodes. Carved out of parser
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,579,  * so this could be used by ALTER PUBLICATION.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,580,  *
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,581,  * @param aliasName    The name of the alias
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,582,  * @param targetName   The full path/method name
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,583,"  * @param aliasSpecificInfo The full path of the target method name,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,584,  *        if any
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,585,  * @param aliasType The type of alias to create
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,586,  * @param delimitedIdentifier Whether or not to treat the class name
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,587,  *        as a delimited identifier if trying to
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,588,  *        resolve it as a class alias.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,589,  * @param cm   A ContextManager
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,590,  *
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,591,  * @return A CreateAliasNode matching the given parameters
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,592,  *
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,593,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,594,  */
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,595, public abstract QueryTreeNode
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,596, getCreateAliasNode(
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,597,"  Object aliasName,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,598,"  Object targetName,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,599,"  Object aliasSpecificInfo,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,600,"  char aliasType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,601,"  Boolean delimitedIdentifier,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,602,  ContextManager cm)
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,603,  throws StandardException;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,604,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,605,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,606, /**
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,607,  * Return a correctly configured node that represents
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,608,  * a scan from a VTI dervied from the TableDesciptor.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,609,  * Used to convert from system diagnostic tables
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,610,  * to VTI scans.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,611,  * @param td Table that is really a vti
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,612,  * @param correlationName Correlation name of table clause
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,613,  * @param resultColumns Columns extracted from table.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,614,  * @param tableProperties Properties being passed onto the table scan
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,615,  * @param cm Current context manager
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,616,  */
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,617, public abstract ResultSetNode mapTableAsVTI(
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,618,"   TableDescriptor td,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,619,"   String correlationName,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,620,"   ResultColumnList resultColumns,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,621,"   Properties tableProperties,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,622,   ContextManager cm) throws StandardException;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,623,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,625,
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,81,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,82,import java.util.Properties;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,83,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,84,import java.util.HashSet;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,85,import java.util.Iterator;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,86,import java.util.Set;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2195,   ResultSetNode vtiNode = getNodeFactory().mapTableAsVTI(
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,32,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,36,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,37,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,38,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,58,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,61,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,166,  * @param parameterList  A Vector of the parameters
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,170, public void addParms(Vector parameterList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,88,  addParms((Vector) params);
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,135,  addParms((Vector) params);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,25,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,37,import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,46,import org.apache.derby.catalog.AliasInfo;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,48,import org.apache.derby.iapi.util.StringUtil;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,78, private static final Vector emptyVector = new Vector(0);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,79,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,654,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,655,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,656, /**
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,657,  * Get one of the several types of create alias nodes. Carved out of parser
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,658,  * so this could be used by ALTER PUBLICATION.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,659,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,660,  * @param aliasName The name of the alias
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,661,  * @param targetName The full path/method name
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,662,"  * @param aliasSpecificInfo The full path of the target method name,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,663,  *        if any
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,664,  * @param aliasType The type of alias to create
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,665,  * @param delimitedIdentifier Whether or not to treat the class name
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,666,  *        as a delimited identifier if trying to
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,667,  *        resolve it as a class alias.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,668,  * @param cm   A ContextManager
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,669,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,670,  * @return A CreateAliasNode matching the given parameters
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,671,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,672,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,673,  */
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,674, public QueryTreeNode
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,675, getCreateAliasNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,676,"  Object aliasName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,677,"  Object targetName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,678,"  Object aliasSpecificInfo,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,679,"  char aliasType,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,680,"  Boolean delimitedIdentifier,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,681,  ContextManager cm)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,682,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,683, {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,684,  int nodeType;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,685,  String methodName = null;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,686,  String targetMethodName = null;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,687,  String targetClassName = null;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,688,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,689,  nodeType = C_NodeTypes.CREATE_ALIAS_NODE;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,690,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,691,  if (
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,692,            (aliasType != AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR) &&
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,693,            (aliasType != AliasInfo.ALIAS_TYPE_UDT_AS_CHAR)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,694,            )
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,695,  {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,696,         int lastPeriod;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,697,         String fullStaticMethodName = (String) targetName;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,698,         int paren = fullStaticMethodName.indexOf('(');
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,699,         if (paren == -1) {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,700,             // not a Java signature - split based on last period
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,701,             lastPeriod = fullStaticMethodName.lastIndexOf('.');
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,702,         } else {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,703,             // a Java signature - split on last period before the '('
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,704,"             lastPeriod = fullStaticMethodName.substring(0, paren).lastIndexOf('.');"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,705,         }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,706,         if (lastPeriod == -1 || lastPeriod == fullStaticMethodName.length()-1) {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,707,"             throw StandardException.newException(SQLState.LANG_INVALID_FULL_STATIC_METHOD_NAME, fullStaticMethodName);"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,708,         }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,709,"         String javaClassName = fullStaticMethodName.substring(0, lastPeriod);"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,710,         methodName = fullStaticMethodName.substring(lastPeriod + 1);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,711,   targetName = javaClassName;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,712,  }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,713,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,714,  return getNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,715,"   nodeType,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,716,"   aliasName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,717,"   targetName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,718,"   methodName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,719,"   aliasSpecificInfo,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,720,"   new Character(aliasType),"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,721,"   delimitedIdentifier,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,722,   cm );
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,723, }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,724,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,725, /**
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,726,  * Return a node that represents invocation of the virtual table
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,727,  * for the given table descriptor.  The mapping of the table descriptor
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,728,"  * to a specific VTI class name will occur as part of the ""init"""
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,729,  * phase for the NewInvocationNode that we create here.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,730,  * <P>
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,731,  * Currently only handles no argument vtis corresponding to a subset
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,732,  * of the diagnostic tables. (e.g. lock_table).
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,733,  * The node returned is a FROM_VTI node with a passed in NEW_INVOCATION_NODE
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,734,"  * representing the class, with no arguments."
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,735,  * Other attributes of the original FROM_TABLE node (such as resultColumns)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,736,  * are passed into the FROM_VTI node.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,737,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,738,  */
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,739, public ResultSetNode mapTableAsVTI(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,740,"   TableDescriptor td,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,741,"   String correlationName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,742,"   ResultColumnList resultColumns,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,743,"   Properties tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,744,   ContextManager cm)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,745,  throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,746,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,747,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,748,  /* The fact that we pass a non-null table descriptor to the
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,749,   * following call is an indication that we are mapping to a
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,750,   * no-argument VTI.  Since we have the table descriptor we
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,751,   * do not need to pass in a TableName. See NewInvocationNode
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,752,   * for more.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,753,   */
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,754,  QueryTreeNode newNode =
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,755,"   getNode(C_NodeTypes.NEW_INVOCATION_NODE,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,756,"    null, // TableName"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,757,"    td,     // TableDescriptor"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,758,"    emptyVector,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,759,"    Boolean.FALSE,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,760,    cm);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,761,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,762,   QueryTreeNode vtiNode;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,763,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,764,   if (correlationName != null)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,765,   {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,766,"    vtiNode = getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,767,"      newNode,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,768,"      correlationName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,769,"      resultColumns,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,770,"      tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,771,      cm);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,772,   }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,773,   else
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,774,   {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,775,"    TableName exposedName = newNode.makeTableName(td.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,776,      td.getDescriptorName());
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,777,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,778,"   vtiNode = getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,779,"      newNode,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,780,"      correlationName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,781,"      resultColumns,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,782,"      tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,783,"      exposedName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,784,      cm);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,785,  }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,786,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,787,  return (ResultSetNode) vtiNode;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,788, }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,790,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,791,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,28,/* Strictly speaking we shouldn't import classes under the impl hierarchy here
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,29, * but this is work in progress.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,30, * manish - Wed Mar 28 13:05:19 PST 2001
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,31, */
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,32,import org.apache.derby.impl.sql.compile.QueryTreeNode;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,33,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,66," public abstract QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,80," public final QueryTreeNode getNode(int nodeType, Object arg1, ContextManager cm)"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,83,"  QueryTreeNode retval = getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,102," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,108,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,128," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,135,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,156," public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,164,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,187," public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,196,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,219," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,229,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,253," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,264,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,288," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,300,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,325," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,338,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,364," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,378,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,406," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,421,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,450," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,466,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,496," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,513,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,544," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,562,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,216,        QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,357,  QueryTreeNode cast = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,362,  return cast;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,405,   QueryTreeNode cast = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2412,        QueryTreeNode newNode =
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2413,"                getNodeFactory().getNode(C_NodeTypes.NEW_INVOCATION_NODE,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2423,"            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2433,"            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,676,                    getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,904,        QueryTreeNode maxWidthNode = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,136," public QueryTreeNode getNode(int nodeType, ContextManager cm)"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,72,public abstract class QueryTreeNode implements Visitable
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,616,        QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,27,import org.apache.derby.impl.sql.compile.PredicateList;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,27,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,29,import org.apache.derby.iapi.sql.StatementType;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,34,import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,35,
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,28,import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,34,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,35,
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,38,import org.apache.derby.iapi.sql.StatementType;
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,42,import org.apache.derby.impl.sql.execute.DropTriggerConstantAction;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,396,  if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,692,   if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) (lcc.getDataDictionary())).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1103,  if (((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade)
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,558,   bootingDictionary.readOnlyUpgrade = true;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,431, public boolean readOnlyUpgrade;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10489,
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,310,  if (((DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,28,import org.apache.derby.iapi.error.ExceptionSeverity;
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,37,import java.sql.Driver;
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,38,import java.sql.DriverManager;
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,416,            String driverName =
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,417,"                ""org.apache.derby.jdbc.EmbeddedDriver"";"
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,418,
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,419,            Class.forName(driverName).newInstance();
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,420,
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,421,            Driver embedDriver =
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,422,                DriverManager.getDriver(Attribute.PROTOCOL);
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,428,"            embedDriver.connect(conStr, (Properties) null);"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,26,import java.sql.Connection;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,27,import java.sql.DriverManager;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,41,    /**
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,42,     * The maximum length of the data returned from the BLOB stored procedures.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,43,     * <p>
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,44,     * This value is currently dictated by the maximum length of
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,45,"     * VARCHAR/VARBINARY, because these are the return types of the stored"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,46,     * procedures.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,47,     */
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,48,    public static final int MAX_BLOB_RETURN_LEN = Limits.DB2_VARCHAR_MAXWIDTH;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,49,
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,50,    /**
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,51,     * The maximum length of the data returned from the CLOB stored procedures.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,52,     * <p>
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,53,     * This value is currently dictated by the maximum length of
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,54,"     * VARCHAR/VARBINARY, because these are the return types of the stored"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,55,"     * procedures, and the modified UTF8 encoding used for CLOB data. This"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,56,"     * threshold value could be higher (equal to {@code MAX_BLOB_RETURN_LEN}),"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,57,     * but then the procedure fetching data from the CLOB must be rewritten to
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,58,     * have more logic.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,59,     * <p>
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,60,     * For now we use the defensive assumption that all characters are
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,61,     * represented by three bytes.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,62,     */
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,63,    public static final int MAX_CLOB_RETURN_LEN = MAX_BLOB_RETURN_LEN / 3;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,64,
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,177,"        len = Math.min(len, MAX_CLOB_RETURN_LEN);"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,335,"        len = Math.min(len, MAX_BLOB_RETURN_LEN);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,178,// LOBStoredProcedure is imported only to get hold of a constant.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,179,import org.apache.derby.impl.jdbc.LOBStoredProcedure;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,180,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2586,"        TypeDescriptor     newReturnType = DataTypeDescriptor.getCatalogType( Types.VARCHAR, LOBStoredProcedure.MAX_CLOB_RETURN_LEN );"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12311,"                    LOBStoredProcedure.MAX_CLOB_RETURN_LEN),"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12507,"                    LOBStoredProcedure.MAX_BLOB_RETURN_LEN),"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,69,    // This flag is true unless the deregister attribute has been set to
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,70,    // false by the user (DERBY-2905)
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,71,    private static boolean deregister = true;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,252,            if (deregister && _autoloadedDriver != null) {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,258,                deregister = true;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,276,    /**
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,277,     * @param theValue set the deregister value
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,278,     */
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,279,    public static void setDeregister(boolean theValue) {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,280,        AutoloadedDriver.deregister = theValue;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,281,    }
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,282,
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,283,    /**
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,284,     * @return the deregister value
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,285,     */
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,286,    public static boolean getDeregister() {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,287,        return deregister;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,288,    }
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,289,
java/engine/org/apache/derby/jdbc/InternalDriver.java,233,                        AutoloadedDriver.setDeregister(deregister);
java/engine/org/apache/derby/jdbc/InternalDriver.java,637,}
java/engine/org/apache/derby/jdbc/InternalDriver.java,638,
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,142,     *      required (see {@link #MAX_CLOB_RETURN_LEN}).
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,297,     *      (see {@link #MAX_BLOB_RETURN_LEN}).
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,285,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,286,     * Checks if the statement is closed.
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,287,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,288,"     * @return <code>true</code> if the statement is closed,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,289,     * <code>false</code> otherwise
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,290,     * @exception SQLException if an error occurs
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,291,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,292,    public final boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,293,        return getCallableStatement().isClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,294,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,295,
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,84,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,85,     * Checks if the statement is closed.
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,86,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,87,"     * @return <code>true</code> if the statement is closed,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,88,     * <code>false</code> otherwise
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,89,     * @exception SQLException if an error occurs
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,90,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,91,    public final boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,92,        return getPreparedStatement().isClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,93,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,94,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,24,import org.apache.derby.iapi.reference.JDBC30Translation;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,27,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,28,import org.apache.derby.iapi.error.PublicAPI;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,29,import org.apache.derby.iapi.services.info.JVMInfo;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,38,import java.lang.reflect.*;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,39,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,555,     * Checks if the statement is closed. Not implemented for this
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,556,     * class since <code>isClosed()</code> is a new method in JDBC
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,557,     * 4.0. The JDBC 4.0 sub-classes should override this method.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,561,     * @exception SQLException not-implemented exception
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,563,    protected boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,564,        // Not implemented since we cannot forward the call to a JDBC
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,565,        // 4.0 method from this class. This dummy implementation is
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,566,        // provided here so that checkIfClosed() can be implemented
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,567,        // once in this class instead of once in each of the
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,568,        // Brokered*Statement40 classes.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,569,        throw Util.notImplemented();
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,43,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,44,     * Checks if the statement is closed.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,45,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,46,"     * @return <code>true</code> if the statement is closed,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,47,     * <code>false</code> otherwise
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,48,     * @exception SQLException if an error occurs
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,49,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,50,    public final boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,51,        return getStatement().isClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,52,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,53,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,27,import java.sql.Connection;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,36,//import org.apache.derby.impl.jdbc.EmbedConnection40;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,38,import org.apache.derby.impl.jdbc.EmbedConnection40;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,41,public class BrokeredConnection40 extends BrokeredConnection30 {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,359,            ((EmbedConnection40) getRealConnection()).abort( executor );
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,366,             return ((EmbedConnection40) getRealConnection()).getNetworkTimeout();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,376,"             ((EmbedConnection40) getRealConnection()).setNetworkTimeout( executor, milliseconds );"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,39,public class EmbedConnection40 extends EmbedConnection30 {
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,34,import org.apache.derby.impl.jdbc.EmbedCallableStatement40;
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,36,public class BrokeredCallableStatement40 extends  BrokeredCallableStatement30{
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,444,"        return ((EmbedCallableStatement40) getCallableStatement()).getObject( parameterIndex, type );"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,450,"        return ((EmbedCallableStatement40) getCallableStatement()).getObject( parameterName, type );"
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,40,public class EmbedCallableStatement40 extends EmbedCallableStatement30 {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,41,
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,681,    return ps;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,118,        // DERBY-2402 Client does not report added columns.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,119,        // Take out check when DERBY-2402 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,120,        if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,121,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,122,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,125,"        assertEquals(2, rsmd.getColumnCount());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,131,        // ResultSetMetaData for select * after alter table and
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,132,        // executeQuery.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,133,"        s.executeUpdate(""alter table bug4579 add column c13 int"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,134,        ResultSet rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,203,        if (usingEmbedded()) // client/server doesn't keep cursor open.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,204,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,205,            rs = pSt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,206,"            JDBC.assertColumnNames(rs, new String[]{""C1"", ""C2""});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,207,"            JDBC.assertFullResultSet(rs, new String[][]{"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,208,"                        {""1"", null},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,209,"                        {""2"", null}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,210,                    });
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,211,        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,212,            rs = pSt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,213,"            JDBC.assertColumnNames(rs, new String[]{""C1""});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,214,"            JDBC.assertFullResultSet(rs, new String[][]{{""1""}, {""2""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,215,        }
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,32,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,33,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,301,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,302,                    interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,33,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,34,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,374,   throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,499,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,500,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,501,     * Checks if the connection is closed and throws an exception if
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,502,     * it is.
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,503,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,504,     * @exception SQLException if the connection is closed
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,505,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,506,    protected final void checkIfClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,507,        if (isClosed()) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,508,            throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,509,        }
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,510,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,29,import org.apache.derby.iapi.reference.JDBC30Translation;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,34,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,42,    public BrokeredConnection40(BrokeredConnectionControl control) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,312,                throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,332,                throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,338,"                throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,339,                        interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,30,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,31,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,100,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,101,                    interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,26,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,27,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,65,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,561,     * is. This method relies on the <code>isClosed()</code> method
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,562,     * and therefore only works with JDBC 4.0.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,570,"            throw Util.generateCsSQLException(SQLState.ALREADY_CLOSED,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,571,"                                              ""Statement"");"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,24,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,25,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,26,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,59,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,60,                    interfaces);
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,119,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,24,import org.apache.derby.iapi.error.ExceptionSeverity;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,57,import org.apache.derby.iapi.util.IdUtil;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,58,
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,24,import java.io.IOException;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,25,import org.apache.derby.iapi.error.ExceptionSeverity;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,26,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,29,import org.apache.derby.iapi.reference.MessageId;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,37,public class SQLExceptionFactory {
java/engine/org/apache/derby/jdbc/Driver20.java,27,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/jdbc/Driver20.java,29,import org.apache.derby.impl.jdbc.EmbedConnection;
java/engine/org/apache/derby/jdbc/Driver20.java,30,
java/engine/org/apache/derby/jdbc/Driver20.java,31,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/jdbc/Driver20.java,43,import java.sql.Connection;
java/engine/org/apache/derby/jdbc/Driver20.java,46,import java.sql.DriverManager;
java/engine/org/apache/derby/jdbc/Driver20.java,97, public abstract BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control);
java/engine/org/apache/derby/jdbc/Driver30.java,128, public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/Driver40.java,132,    public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/Driver40.java,133,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,187, final Connection getNewCurrentConnectionHandle() {
java/engine/org/apache/derby/jdbc/XAStatementControl.java,29,import org.apache.derby.iapi.jdbc.EngineStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,78,"        if (getSystemProperty(""os.name"").startsWith(""Windows"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,79,            /* Skip with IBM */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,80,            if (isIBMJVM()) return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,81,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,82,            /* Skip with Sun 1.4.2 */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,83,"            if (isSunJVM() && getSystemProperty(""java.version"").startsWith(""1.4.2"")) return;"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,147,"            // sleep, just in case on this machine background"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,148,            // post commit is slow.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,149,            try
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,150,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,151,                Thread.sleep(20);
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,152,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,153,            catch (Exception ex)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,154,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,155,                // just ignore interupts of sleep.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,156,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,166,        int MAX_WAIT_FOR_BG_THREAD = 100000;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,167,        int ms_waited              = 20;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,168,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,171,            if (ms_waited < MAX_WAIT_FOR_BG_THREAD)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,172,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,173,                // The result is dependent on background activity which may
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,174,"                // differ from machine to machine.  Loop, sleeping in this"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,175,                // thread to allow background thread to run.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,176,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,177,                try
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,178,                {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,179,                    ms_waited += 1000;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,180,                    Thread.sleep(1000);
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,181,                }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,182,                catch (Exception ex)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,183,                {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,184,                    // just ignore interupts of sleep.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,185,                }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,187,"                sp_info = getSpaceInfo(conn, ""APP"", ""LONGCOL"", true);"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,188,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,189,                total_pages =
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,190,                    sp_info[SPACE_INFO_NUM_ALLOC] +
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,191,                    sp_info[SPACE_INFO_NUM_FREE];
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,192,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,193,            else
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,194,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,195,                // for the above test case we expect the following space:
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,196,                //     page 0
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,197,                //     page 1
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,198,                //     free space from 1 blob - 9 pages per blob
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,199,                //     allocated page per long/short blob insert.  Each long
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,200,                //         inserts onto a new page to try and fit it entirely
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,201,                //         on a page.  Then the short blob goes to last inserted
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,202,                //         page.  This process repeats.  The previous pages are
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,203,"                //         marked ""half-filled"" and can be used in future for"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,204,                //         short rows that don't fit on the last page inserted.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,205,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,206,                System.out.println(
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,207,"                    ""Test 1 failed, expected less than "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,208,"                    total_expected_page_max + "" pages - count is:\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,209,"                    ""free pages     : ""   + sp_info[SPACE_INFO_NUM_FREE] +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,210,"                    ""\nallocated pages: "" + sp_info[SPACE_INFO_NUM_ALLOC] +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,211,"                    ""\nWaited "" + ms_waited + ""ms. for background work."");"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,213,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,214,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,238,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,239,     * Test reclaim of sequence of deleted blobs.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,240,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,241,"     * Simulates a ""queue"" of work of input ""work_size"".  Inserts ""work_size"""
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,242,"     * elements, and then subsequently in each transaction inserts a new"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,243,     * work item and deletes the oldest work item.  Checks that the used
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,244,"     * space reaches a steady state, rather than constantly growing."
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,245,     *
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,246,     **/
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,287,"            // commit the xact, post commit should kick in to reclaim the"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,288,            // blob space sometime after the commit.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,294,        // the oldes existing work item.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,302,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,304,"            del_stmt.setInt(1, iter - work_size - 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,310,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,311,            try
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,312,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,313,                Thread.sleep(20);
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,314,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,315,            catch (Exception ex)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,316,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,317,                // just ignore interupts of sleep.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,318,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,322,"        int[] sp_info = getSpaceInfo(conn, ""APP"", ""LONGCOL"", true);"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,323,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,324,        int total_pages =
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,325,            sp_info[SPACE_INFO_NUM_ALLOC] + sp_info[SPACE_INFO_NUM_FREE];
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,338,        int total_expected_page_max = 30 * work_size;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,340,        int MAX_WAIT_FOR_BG_THREAD = 100000;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,341,        int ms_waited              = 20;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,343,        while (total_pages > total_expected_page_max)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,344,        {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,345,            if (ms_waited < MAX_WAIT_FOR_BG_THREAD)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,346,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,347,                // The result is dependent on background activity which may
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,348,"                // differ from machine to machine.  Loop, sleeping in this"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,349,                // thread to allow background thread to run.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,350,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,351,                try
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,352,                {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,353,                    ms_waited += 1000;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,354,                    Thread.sleep(1000);
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,355,                }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,356,                catch (Exception ex)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,357,                {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,358,                    // just ignore interupts of sleep.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,359,                }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,360,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,361,"                sp_info = getSpaceInfo(conn, ""APP"", ""LONGCOL"", true);"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,362,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,363,                total_pages =
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,364,                    sp_info[SPACE_INFO_NUM_ALLOC] +
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,365,                    sp_info[SPACE_INFO_NUM_FREE];
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,366,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,367,            else
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,368,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,369,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,370,                System.out.println(
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,371,"                    ""Test 2 failed, expected less than "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,372,"                    total_expected_page_max + "" pages - count is:\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,373,"                    ""free pages     : ""   + sp_info[SPACE_INFO_NUM_FREE] +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,374,"                    ""\nallocated pages: "" + sp_info[SPACE_INFO_NUM_ALLOC] +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,375,"                    ""\nWaited "" + ms_waited + ""ms. for background work."");"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,377,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,378,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,379,        }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,395,        for (int iter = work_size + total_work; iter < (total_work * 2); iter++)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,402,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,404,"            del_stmt.setInt(1, iter - work_size - 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,410,
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,411,            try
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,412,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,413,                Thread.sleep(100);
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,414,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,415,            catch (Exception ex)
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,416,            {
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,417,                // just ignore interupts of sleep.
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,418,            }
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,430,"                ""Test failed, expected constant memory after second run."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/storetests/st_reclaim_longcol.java,479,"        test2(conn, 250000, 5, 500);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,65,"        attributes.setProperty(""bootPassword"", getBootPhrase(16));"
java/testing/org/apache/derbyTesting/junit/Decorator.java,69,
java/testing/org/apache/derbyTesting/junit/Decorator.java,91,"        attributes.setProperty(""bootPassword"", getBootPhrase(64));"
java/testing/org/apache/derbyTesting/junit/Decorator.java,96,
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,984,   mb.push(!sourceCTI.variableLength() || isNumber);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,460,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,29,import org.apache.derby.iapi.sql.compile.TypeCompiler;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,37,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,45,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,46,import org.apache.derby.iapi.services.loader.ClassInspector;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,57,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,58,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,59,import org.apache.derby.catalog.UUID;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,1537,"                ""APP"", ""EMPTY_TABLE"", emptyFileName, ""|"", ""``"", null, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,164,"                  ""create function EMC.GETARTICLE(path VARCHAR(40)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2409,"             ""    b char( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2412,"             ""    e varchar( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2423,"             ""    b char( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2426,"             ""    e varchar( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2529,"             ""create table t_atac_3( a varchar( 5 ), b varchar( 5 ) generated always as ( upper( a )  ) )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2534,"             ""create table t_atac_4( a varchar( 5 ) for bit data,  b varchar( 5 ) for bit data generated always as ( a )  )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java,643,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java,691,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java,2047,"            + ""'extinout/t1.dat' , '\\a', '\\', null) "");"
java/client/org/apache/derby/client/net/EncodedInputStream.java,26,import java.io.ByteArrayOutputStream;
java/client/org/apache/derby/client/net/EncodedInputStream.java,213,
java/client/org/apache/derby/client/net/EncodedInputStream.java,214,
java/client/org/apache/derby/client/net/EncodedInputStream.java,215,    static class PublicBufferOutputStream extends ByteArrayOutputStream{
java/client/org/apache/derby/client/net/EncodedInputStream.java,216,
java/client/org/apache/derby/client/net/EncodedInputStream.java,217,  PublicBufferOutputStream(int size){
java/client/org/apache/derby/client/net/EncodedInputStream.java,218,   super(size);
java/client/org/apache/derby/client/net/EncodedInputStream.java,219,  }
java/client/org/apache/derby/client/net/EncodedInputStream.java,221,  public byte[] getBuffer(){
java/client/org/apache/derby/client/net/EncodedInputStream.java,222,   return buf;
java/client/org/apache/derby/client/net/EncodedInputStream.java,223,  }
java/client/org/apache/derby/client/net/EncodedInputStream.java,224,
java/client/org/apache/derby/client/net/EncodedInputStream.java,225,    }
java/client/org/apache/derby/client/net/Request.java,1430,            DynamicByteArrayOutputStream dbaos = new DynamicByteArrayOutputStream();
java/client/org/apache/derby/client/net/Request.java,1431,            ObjectOutputStream oos = new ObjectOutputStream( dbaos );
java/client/org/apache/derby/client/net/Request.java,1435,            buffer = dbaos.getByteArray();
java/client/org/apache/derby/client/net/Request.java,1436,            length = dbaos.getUsed();
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,67,        } else if (sqlState.startsWith(SQLState.CONNECTIVITY_PREFIX) ||
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,68,            errCode >= ExceptionSeverity.SESSION_SEVERITY) {
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,80,        } else if (sqlState.startsWith(SQLState.TRANSACTION_PREFIX) ||
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,81,            errCode >= ExceptionSeverity.TRANSACTION_SEVERITY ) {
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,98,        } else {
java/client/org/apache/derby/client/am/SqlException.java,262,        errorcode_ = sqlca.getSqlCode();
java/client/org/apache/derby/client/am/Sqlca.java,25,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/client/am/Sqlca.java,323,        int sqlCode;
java/client/org/apache/derby/client/am/Sqlca.java,329,            sqlCode = getSqlCode();
java/client/org/apache/derby/client/am/Sqlca.java,334,            sqlCode = 0;
java/client/org/apache/derby/client/am/Sqlca.java,338,"        return ""DERBY SQL error: SQLCODE: "" + sqlCode + "", SQLSTATE: "" +"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,723,"                writeSQLCARD(sqle, CodePoint.SVRCOD_ERROR, 0, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,815,"      writeSQLCARD(w, CodePoint.SVRCOD_WARNING, 0, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1301,"       writeSQLCARD(databaseAccessException,CodePoint.SVRCOD_ERROR,0,0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5870,  int severity = CodePoint.SVRCOD_INFO;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5873,"   writeSQLCARD(e,severity, updateCount, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5881,  severity = getExceptionSeverity(e);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5895,"  writeSQLCARD(e,severity, updateCount, 0);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5898, private int getSqlCode(int severity)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5900,  if (severity == CodePoint.SVRCOD_WARNING)  // warning
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5901,   return 100;  //CLI likes it
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5902,  else if (severity == CodePoint.SVRCOD_INFO)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5903,   return 0;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5904,  else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5905,   return -1;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5908," private void writeSQLCARD(SQLException e,int severity,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6049,        int sqlcode = 0;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6058,"        // SQLWarnings should have warning severity, except if it's a"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6059,"        // DataTruncation warning for write operations (with SQLState 22001),"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6060,        // which is supposed to be used as an exception even though it's a
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6061,        // sub-class of SQLWarning.
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6062,        if (e instanceof SQLWarning &&
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6063,                !SQLState.LANG_STRING_TRUNCATION.equals(e.getSQLState())) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6064,            sqlcode = ExceptionSeverity.WARNING_SEVERITY;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6065,        } else {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6066,            // Get the SQLCODE for exceptions. Note that this call will always
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6067,"            // return -1, so the real error code will be lost."
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6068,            sqlcode = getSqlCode(getExceptionSeverity(e));
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6069,        }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6070,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,60,"   assertEquals(40000, e.getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,81,"   assertEquals(40000, e.getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/BadConnectionTest.java,102,"   assertEquals(-1, e.getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3428,"        assertEquals(10000, conn.getWarnings().getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3437,"        assertEquals(10000, conn.getWarnings().getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3446,"        assertEquals(10000, conn.getWarnings().getErrorCode());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,51,        suite.addTest(TestConfiguration.embeddedSuite(ErrorCodeTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,373,                if ( (errCode == -1)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1022,                    if ( (errCode == -1)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ShutdownMaster.java,148,                        if ( (errCode == -1)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ShutdownSlave.java,172,                        if ( (errCode == -1)
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,898,
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1147,"            assertEquals(errorCode,se.getErrorCode());"
java/engine/org/apache/derby/diag/SpaceTable.java,150,            conglomTable[i] = new ConglomInfo(
java/engine/org/apache/derby/diag/SpaceTable.java,151,"                cds[i].getConglomerateNumber(),"
java/engine/org/apache/derby/diag/SpaceTable.java,152,"                cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/engine/org/apache/derby/diag/SpaceTable.java,153,                cds[i].isIndex());
java/engine/org/apache/derby/diag/SpaceTable.java,230,  String str = conglomInfo.getConglomName();
java/engine/org/apache/derby/diag/SpaceTable.java,350,"    public ConglomInfo(long conglomId, String conglomName, boolean isIndex)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,155,        String [] expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,157,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,162,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,171,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,172,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,173,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,178,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,191,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,192,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,193,"             ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,198,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,210,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,211,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,212,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,217,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,228,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,229,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,230,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,238,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,239,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,240,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,248,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,249,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,250,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,261,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,262,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,263,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,281,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,282,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,283,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,288,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,300,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,301,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,302,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,312,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,313,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,314,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,346,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,347,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,348,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,349,"        JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,353,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,362,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,363,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,364,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,365,"        JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,369,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/engine/org/apache/derby/diag/SpaceTable.java,137,   schemaName = lcc.getCurrentSchemaName();
java/engine/org/apache/derby/diag/SpaceTable.java,139,"        // if schemaName is null, it gets the default schema"
java/engine/org/apache/derby/diag/SpaceTable.java,140,"        SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true);"
java/engine/org/apache/derby/diag/SpaceTable.java,141,"        TableDescriptor td = dd.getTableDescriptor(tableName,sd, tc);"
java/engine/org/apache/derby/diag/SpaceTable.java,142,        if (td == null)  // table does not exist
java/engine/org/apache/derby/diag/SpaceTable.java,144,            conglomTable = new ConglomInfo[0];   // make empty conglom table
java/engine/org/apache/derby/diag/SpaceTable.java,145,            return;
java/engine/org/apache/derby/diag/SpaceTable.java,147,        ConglomerateDescriptor[] cds = td.getConglomerateDescriptors();
java/engine/org/apache/derby/diag/SpaceTable.java,156,"                 cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,1433,"  * index, the size of the return array is 1."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7036,"  * index, the size of the return array is 1."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7052,  /* Use UUIDStringOrderable in both start and stop positions for scan */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7053,  UUIDStringOrderable = getIDValueAsCHAR(uuid);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7054,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7055,  /* Set up the start/stop position for the scan */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7056,  ExecIndexRow keyRow = exFactory.getIndexableRow(1);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7057,"  keyRow.setColumn(1, UUIDStringOrderable);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7058,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7061,  getDescriptorViaIndex(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7062,"      SYSCONGLOMERATESRowFactory.SYSCONGLOMERATES_INDEX1_ID,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7063,"      keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7064,"      (ScanQualifier [][]) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7065,"      ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7066,"      (TupleDescriptor) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7067,"      cdl,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7068,      false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,167,        String [] allColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,168,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,169,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING"", ""TABLEID"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,170,        String [] expColNames = allColNames;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,329,"        JDBC.assertColumnNames(rs, allColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,342,"        JDBC.assertColumnNames(rs, allColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,46,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,47,  // set input stream
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,48,"  String filePath = ""wisc_setup.sql"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,49,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,50,  try
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,51,  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,52,"   inStream = new BufferedInputStream(new FileInputStream(filePath),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,53,       utilMain.BUFFEREDFILESIZE);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,54,  } catch (FileNotFoundException e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,55,  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,56,"   System.out.println(""unable to find input file ""+filePath);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,57,   throw e;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,58,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,61,"    System.out, (String) null);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SQLAuthorizationPropTest.java,3,* Derby - Class org.apache.derbyTesting.functionTests.lang.SQLAuthorizationPropTest
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,884,            // FROM list of the current query block. See DERBY-5579.
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,886,            if ( isDerbyStyleTableFunction )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,887,            {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,888,                int referencedTableNumber = ref.getTableNumber();
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,890,                for ( int i = 0; i < fromListParam.size(); i++ )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,891,                {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,892,                    FromTable   fromTable = (FromTable) fromListParam.elementAt( i );
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,894,                    if ( referencedTableNumber == fromTable.getTableNumber() )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,888,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,167,        // Test with a 1 second timeout
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,168,        assertTrue(getConnection().isValid(1));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,325,        * Test with a valid timeout
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,327,        if (!conn.isValid(1)) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,328,"            fail(""FAIL: isValid(1): returned false"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,160,     * found in the TestConnectionMethods.java test that is run for
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41.java,62,        else if ( wrapped instanceof NetResultSet40 ) { _netclient = (NetResultSet40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41.java,64,        else if ( wrapped instanceof CallableStatement40 ) { _callableStatement = (CallableStatement40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Conn.java,60,        else if ( wrapped instanceof NetConnection40 ) { _netclient = (NetConnection40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,65,        else if ( wrapped instanceof ClientDataSource40 ) { _netclient = (ClientDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,498,    {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,499,"        TestSuite suite = new TestSuite(testClass,"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,500,"                suiteName(testClass)+"":client"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,501,        return clientServerDecorator(suite);
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,511,"        TestSuite suite = new TestSuite(testClass, suiteName(testClass)"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,512,"                + "":client"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,513,        return clientServerDecoratorWithAlternativePort(suite);
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,523,"        TestSuite suite = new TestSuite(testClass,"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,524,"                suiteName(testClass)+"":client"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,525,        return defaultExistingServerDecorator(suite); // Will not start server and does not stop it when done!.
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,539,"        TestSuite suite = new TestSuite(testClass,"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,540,"                suiteName(testClass)+"":client"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,541,"        return existingServerDecorator(suite, hostName, portNumber);"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,547,"        TestSuite suite = new TestSuite(testClass,"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,548,"                suiteName(testClass)+"":client"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,549,"        return existingServerDecorator(suite, hostName, portNumber, dbPath);"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,629,        if (!(Derby.hasClient() && Derby.hasServer())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,630,                || JDBC.vmSupportsJSR169())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,649,        if (!(Derby.hasClient() && Derby.hasServer())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,650,                || JDBC.vmSupportsJSR169())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,667,        if (!(Derby.hasClient() && Derby.hasServer())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,668,                || JDBC.vmSupportsJSR169())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,684,        if (!(Derby.hasClient() && Derby.hasServer())
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,685,                || JDBC.vmSupportsJSR169())
java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/_Suite.java,123,"                    ""tests.compatibilty disabled on Windows, see DERBY-5889"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/CacheSessionDataTest.java,452,        if (c instanceof org.apache.derby.client.am.Connection) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,24,import java.sql.CallableStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,35,import junit.framework.Assert;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,39,import org.apache.derby.client.ClientXid;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,40,import org.apache.derby.iapi.error.StandardException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,121,"        Xid xid = new ClientXid(0x1234, gid, bid);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,593,"        Xid xid = new ClientXid(0x1234, gid, bid);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,594,        return xid;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,626,        // Using ClientXid is ok also for embedded driver
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,627,        // since it does not contain any related code
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,628,        // and there is no implementation of Xid iterface
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,629,        // for embedded driver
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATransactionTest.java,630,"        return new ClientXid(fmtid, gtid, bqual);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,49,"        // the network server. Specifically, it does not work in J2ME"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,50,        // environments.
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,51,        if (JDBC.vmSupportsJDBC3()) {
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,38,"    public static Xid getXid(int xid, int b1, int b2) {"
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,39,"        return new utilXid(xid, b1, b2);"
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,136,"    utilXid(int xid, int b1, int b2) {"
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,137,        format_id = xid;
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,138,        global_id = new byte[Xid.MAXGTRIDSIZE];
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,139,        branch_id = new byte[Xid.MAXBQUALSIZE];
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,140,
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,141,        for (int i = 0; i < global_id.length; i++) {
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,142,            global_id[i] = (byte) (b1 + i);
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,143,        }
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,144,
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,145,        for (int i = 0; i < branch_id.length; i++) {
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,146,            branch_id[i] = (byte) (b2 + i);
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,147,        }
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1105,   SelectNode childSelect = (SelectNode)childResult;
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1106,
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1107,   if ( (childSelect.hasWindows()  &&
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1108,      childSelect.orderByList != null) ) {
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1109,    // We can't push down if there is an ORDER BY and a window
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1110,    // function because that would make ROW_NUMBER give wrong
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1111,    // result:
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1112,    // E.g.
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1113,"    //     SELECT * from (SELECT ROW_NUMBER() OVER (), j FROM T"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1114,    //                    ORDER BY j) WHERE j=5
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1115,    //
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1116,   } else {
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1117,"    pushPList.pushExpressionsIntoSelect((SelectNode) childResult,"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1118,             false);
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1119,   }
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1120,  }
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,721,  columnNumber = source.getColumnPosition();
java/client/org/apache/derby/client/am/Configuration.java,85,"            {""1.4"", ""1.5"", ""1.6""};"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,529,            storageFactory.shutdown();
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1586,        actionCode = REMOVE_STUBS_ACTION;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1587,        try
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1589,            AccessController.doPrivileged( this);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1591,        catch (PrivilegedActionException pae)
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1592,        {
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1593,            // removeStubs does not throw an exception
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1594,        }
java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java,139,"  CollatorSQLClob result = new CollatorSQLClob(null,"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1815,"     *  BOOLEAN: A user can select boolean columns from system tables, but"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1816,     *   s/he is not allowed to create such a column him/herself.
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1817,     *
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1834,            case Types.BOOLEAN:
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1835,                return false;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java,265,        // BOOLEAN
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java,266,"        assertStatementError(""42X71"", stmt,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java,267,"            ""create table t as select systemalias from sys.sysaliases with no data"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CreateTableFromQueryTest.java,268,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,179,"   // Collect window functions used in result columns, and check them"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,180,   // for any <in-line window specification>s.
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,183,    new CollectNodesVisitor(WindowFunctionNode.class);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4475,   updCols = new int[] {SYSSTATEMENTSRowFactory.SYSSTATEMENTS_VALID} ;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,103,"            s.executeUpdate(""INSERT INTO Trigger_t1(max_size) ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,104,"      ""VALUES(20)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,105,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,107,            // DERBY-5105: The post soft upgrade phase may fail with
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,108,            // NoSuchMethodError if the old version suffers from DERBY-4835.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,109,            // Only execute this part of the test for versions that don't
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,110,            // have this problem.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,111,            if (!oldSuffersFromDerby4835()) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,112,"                s.executeUpdate(""INSERT INTO Trigger_t1(max_size) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,113,"                                ""VALUES(20)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,114,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,115,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,124,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,125,     * Check if the old version from which we upgrade suffers from DERBY-4835.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,126,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,127,    private boolean oldSuffersFromDerby4835() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,128,        // DERBY-4835 exists on 10.5 and 10.6 prior to 10.5.3.2 and 10.6.2.3.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,129,"        return (oldAtLeast(10, 5) && oldLessThan(10, 5, 3, 2)) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,130,"                (oldAtLeast(10, 6) && oldLessThan(10, 6, 2, 3));"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,131,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,132,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,288,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1845,        if (getPhase() == PH_POST_SOFT_UPGRADE && oldSuffersFromDerby4835()) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1846,            // DERBY-5263: Executing the trigger will fail after soft upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1847,            // in all the versions that suffer from DERBY-4835. Skip the test.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1848,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1849,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1850,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1902,        // if the old version suffers from DERBY-4835 we
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1903,        // cannot run this test because the database won't boot
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1904,        // on soft upgrade and none of the fixtures will run.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1905,        if (oldSuffersFromDerby4835())
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1906,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1927,"                s.executeUpdate(""insert into D5289TABLE1(COL1) values ('aaa')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1928,"                s.executeUpdate(""insert into D5289TABLE2(COL2) values ('aaa')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1929,"                s.executeUpdate(""UPDATE D5289TABLE1 SET COL1 = 'bbb'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1930,                assertDERBY5289ResultsAndDelete();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1931,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1933,"                // If old version suffers from DERBY-5289, we can't run this part of the"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1934,                // DERBY-5289 won't go in until 10.8.2.0
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1935,"                if (! oldLessThan(10,8,2,0)) {"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1936,"                    s.executeUpdate(""insert into D5289TABLE1(COL1) values ('aaa')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1937,"                    s.executeUpdate(""insert into D5289TABLE2(COL2) values ('aaa') "");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1938,"                    s.executeUpdate(""UPDATE D5289TABLE1 SET COL1 = 'bbb'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1939,                    assertDERBY5289ResultsAndDelete();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1940,                }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1941,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java,233,
java/drda/org/apache/derby/impl/drda/XADatabase.java,41,    private EmbeddedXADataSource xaDataSource;
java/engine/org/apache/derby/jdbc/Driver30.java,124,"        EmbeddedDataSource eds, String user, String password,"
java/engine/org/apache/derby/jdbc/Driver30.java,136,"        EmbeddedDataSource eds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/Driver40.java,171,"        EmbeddedDataSource eds, String user, String password,"
java/engine/org/apache/derby/jdbc/Driver40.java,180,     * of EmbeddedDataSource.
java/engine/org/apache/derby/jdbc/Driver40.java,183,"        EmbeddedDataSource eds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/Driver40.java,190,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,91, final ReferenceableDataSource dataSource;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,109,"    EmbedPooledConnection(ReferenceableDataSource ds, String u, String p,"
java/engine/org/apache/derby/jdbc/EmbedPooledConnection40.java,52,"    EmbedPooledConnection40 (ReferenceableDataSource ds, String user,"
java/engine/org/apache/derby/jdbc/EmbedXAConnection.java,51," EmbedXAConnection(EmbeddedDataSource ds, ResourceAdapter ra, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedXAConnection40.java,55,"     EmbedXAConnection40 (EmbeddedDataSource ds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbedXAConnection40.java,130,}
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,49,  implements javax.sql.ConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,97,"    protected PooledConnection createPooledConnection (String user,"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,25,import javax.sql.ConnectionPoolDataSource;
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,53,                                extends EmbeddedConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,54,                                implements ConnectionPoolDataSource {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,24,import java.io.PrintWriter;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,25,import java.sql.Connection;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,26,import java.sql.Driver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,27,import java.sql.DriverManager;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,28,import java.sql.SQLException;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,29,import java.util.Properties;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,30,import org.apache.derby.iapi.reference.Attribute;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,31,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,32,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,183,public class EmbeddedDataSource extends ReferenceableDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,184,    javax.sql.DataSource
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,189, /** instance variables that will be serialized */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,190,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,191, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,192,  * The database name.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,193,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,194,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,195, private String databaseName;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,196,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,197, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,198,  * The data source name.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,199,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,200,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,201, private String dataSourceName;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,202,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,203, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,204,  * Description of the database.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,205,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,206,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,207, private String description;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,208,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,209, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,210,"  * Set to ""create"" if the database should be created."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,211,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,212,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,213, private String createDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,214,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,215, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,216,"  * Set to ""shutdown"" if the database should be shutdown."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,217,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,218,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,219, private String shutdownDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,220,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,221, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,222,  * Derby specific connection attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,223,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,224,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,225, private String connectionAttributes;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,226,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,227, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,228,  Set password to be a set of connection attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,229, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,230, private boolean attributesAsPassword;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,231,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,232, /** instance variables that will not be serialized */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,233, transient private PrintWriter printer;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,234, transient private int loginTimeout;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,235,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,236," // Unlike a DataSource, LocalDriver is shared by all"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,237, // Derby databases in the same jvm.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,238, transient InternalDriver driver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,239,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,240, transient private String jdbcurl;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,241,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,254,  //Most of our customers would be using jndi to get the data
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,255,"  //sources. Since we don't have a jndi to test this, we are"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,256,  //adding this method to fake it. This is getting used in
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,257,  //xaJNDI test so we can compare the 2 data sources.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,258, public boolean equals(Object p0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,259,    if (p0 instanceof EmbeddedDataSource) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,260,      EmbeddedDataSource ds = (EmbeddedDataSource)p0;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,261,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,262,      boolean match = true;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,263,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,264,   if (databaseName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,265,        if  (!(databaseName.equals(ds.databaseName)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,266,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,267,   } else if (ds.databaseName != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,268,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,269,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,270,   if (dataSourceName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,271,        if  (!(dataSourceName.equals(ds.dataSourceName)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,272,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,273,   } else if (ds.dataSourceName != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,274,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,275,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,276,   if (description != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,277,        if  (!(description.equals(ds.description)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,278,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,279,   } else if (ds.description != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,280,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,281,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,282,   if (createDatabase != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,283,        if  (!(createDatabase.equals(ds.createDatabase)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,284,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,285,   } else if (ds.createDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,286,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,287,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,288,   if (shutdownDatabase != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,289,        if  (!(shutdownDatabase.equals(ds.shutdownDatabase)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,290,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,291,   } else if (ds.shutdownDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,292,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,293,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,294,   if (connectionAttributes != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,295,        if  (!(connectionAttributes.equals(ds.connectionAttributes)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,296,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,297,   } else if (ds.connectionAttributes != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,298,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,299,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,300,      if (loginTimeout != ds.loginTimeout)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,301,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,302,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,303,      return match;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,304,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,305,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,306,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,307,    return false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,308, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,309,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,310, /*
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,311,  * Properties to be seen by Bean - access thru reflection.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,312,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,313,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,314, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,315,  Set this property to create a new database.  If this
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,316,"  property is not set, the database (identified by databaseName) is"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,317,  assumed to be already existing.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,318,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,319,"  @param create if set to the string ""create"", this data source will try"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,320,"  to create a new database of databaseName, or boot the database if one"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,321,  by that name already exists.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,322,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,323, public final void setCreateDatabase(String create) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,324,"  if (create != null && create.toLowerCase(java.util.Locale.ENGLISH).equals(""create""))"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,325,   createDatabase = create;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,326,  else
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,327,   createDatabase = null;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,328, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,329," /** @return ""create"" if create is set, or null if not */"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,330, public final String getCreateDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,331,  return createDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,332, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,333,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,334,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,335, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,336,   Set this property if one wishes to shutdown the database identified by
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,337,  databaseName.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,338,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,339,"  @param shutdown if set to the string ""shutdown"", this data source will"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,340,  shutdown the database if it is running.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,341,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,342, public final void setShutdownDatabase(String shutdown) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,343,"  if (shutdown != null && shutdown.equalsIgnoreCase(""shutdown""))"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,344,   shutdownDatabase = shutdown;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,345,  else
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,346,   shutdownDatabase = null;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,347, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,348," /** @return ""shutdown"" if shutdown is set, or null if not */"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,349, public final String getShutdownDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,350,  return shutdownDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,351, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,352,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,353, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,354,   Set this property to pass in more Derby specific
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,355,  connection URL attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,356,  <BR>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,357,       Any attributes that can be set using a property of this DataSource implementation
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,358,"       (e.g user, password) should not be set in connectionAttributes. Conflicting"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,359,       settings in connectionAttributes and properties of the DataSource will lead to
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,360,       unexpected behaviour.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,361,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,362,  @param prop set to the list of Derby connection
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,363,"  attributes separated by semi-colons.   E.g., to specify an encryption"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,364,"  bootPassword of ""x8hhk2adf"", and set upgrade to true, do the following:"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,365,  <PRE>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,366,"   ds.setConnectionAttributes(""bootPassword=x8hhk2adf;upgrade=true"");"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,367,  </PRE>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,368,  See the Derby documentation for complete list.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,369,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,370, public final void setConnectionAttributes(String prop) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,371,   connectionAttributes = prop;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,372,   update();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,373, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,374, /** @return Derby specific connection URL attributes */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,375, public final String getConnectionAttributes() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,376,  return connectionAttributes;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,377, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,378,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,379,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,380, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,381,  Set attributeAsPassword property to enable passing connection request attributes in the password argument of getConnection.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,382,"  If the property is set to true then the password argument of the DataSource.getConnection(String user, String password)"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,383,  method call is taken to be a list of connection attributes with the same format as the connectionAttributes property.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,384,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,385,  @param attributesAsPassword true to encode password argument as a set of connection attributes in a connection request.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,386, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,387, public final void setAttributesAsPassword(boolean attributesAsPassword) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,388,  this.attributesAsPassword = attributesAsPassword;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,389,   update();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,390, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,391,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,392, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,393,  Return the value of the attributesAsPassword property.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,394, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,395, public final boolean getAttributesAsPassword() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,396,  return attributesAsPassword;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,397, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,398,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,399, /*
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,400,  * DataSource methods - keep these non-final so that others can
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,401,  * extend Derby's classes if they choose to.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,402,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,403,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,404,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,405, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,406,  * Attempt to establish a database connection.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,407,  *
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,408,  * @return  a Connection to the database
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,409,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,410,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,411, public Connection getConnection() throws SQLException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,412, {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,413,"  return this.getConnection(getUser(), getPassword(), false);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,414, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,415,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,416, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,417,  * Attempt to establish a database connection with the given username and password.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,418,    If the attributeAsPassword property is set to true then the password argument is taken to be a list of
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,419,    connection attributes with the same format as the connectionAttributes property.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,420,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,421,  *
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,422,  * @param username the database user on whose behalf the Connection is
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,423,  *  being made
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,424,  * @param password the user's password
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,425,  * @return  a Connection to the database
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,426,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,427,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,428," public Connection getConnection(String username, String password)"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,429,   throws SQLException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,430, {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,431,"  return this.getConnection(username, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,432, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,433,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,434, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,435,  @param requestPassword true if the password came from the getConnection() call.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,436, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,437," final Connection getConnection(String username, String password, boolean requestPassword)"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,438,  throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,439,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,440,  Properties info = new Properties();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,441,  if (username != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,442,"   info.put(Attribute.USERNAME_ATTR, username);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,443,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,444,  if (!requestPassword || !attributesAsPassword)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,445,  {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,446,   if (password != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,447,"    info.put(Attribute.PASSWORD_ATTR, password);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,448,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,449,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,450,  if (createDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,451,"   info.put(Attribute.CREATE_ATTR, ""true"");"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,452,  if (shutdownDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,453,"   info.put(Attribute.SHUTDOWN_ATTR, ""true"");"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,454,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,455,  String url = jdbcurl;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,456,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,457,  if (attributesAsPassword && requestPassword && password != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,458,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,459,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,460,   StringBuffer sb = new StringBuffer(url.length() + password.length() + 1);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,461,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,462,   sb.append(url);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,463,   sb.append(';');
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,464,   sb.append(password); // these are now request attributes on the URL
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,466,   url = sb.toString();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,468,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,469,"  Connection conn =  findDriver().connect(url, info);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,470,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,471, // JDBC driver's getConnection method returns null if
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,472, // the driver does not handle the request's URL.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,473,        if (conn == null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,474,"           throw Util.generateCsSQLException(SQLState.PROPERTY_INVALID_VALUE,Attribute.DBNAME_ATTR,getDatabaseName());"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,475,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,476,        return conn;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,477, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,478,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,479,    // JDBC 4.0 java.sql.Wrapper interface methods
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,482,     * Returns false unless {@code interfaces} is implemented.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,483,     *
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,484,     * @param iface a class defining an interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,485,     * @return true if this implements the interface or directly or indirectly
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,486,     * wraps an object that does
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,487,     * @throws SQLException if an error occurs while determining
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,488,     * whether this is a wrapper for an object with the given interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,490,    public boolean isWrapperFor(Class<?> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,491,        return iface.isInstance(this);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,492,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,495,     * Returns {@code this} if this class implements the specified interface.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,497,     * @param iface a class defining an interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,498,     * @return an object that implements the interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,499,     * @throws SQLException if no object is found that implements the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,500,     * interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,502,    public <T> T unwrap(Class<T> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,503,"        // Derby does not implement non-standard methods on JDBC objects,"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,504,"        // hence return this if this class implements the interface, or"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,505,        // throw an SQLException.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,506,        try {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,507,            return iface.cast(this);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,508,        } catch (ClassCastException cce) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,509,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,510,                    iface);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,511,        }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,512,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,513,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,514, InternalDriver findDriver() throws SQLException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,515, {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,516,  String url = jdbcurl;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,517,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,518,  synchronized(this)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,519,  {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,520,"   // The driver has either never been booted, or it has been"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,521,   // shutdown by a 'jdbc:derby:;shutdown=true'
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,522,   if (driver == null || !driver.acceptsURL(url))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,523,   {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,524,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,525,    new org.apache.derby.jdbc.EmbeddedDriver();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,526,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,527,"    // If we know the driver, we loaded it.   Otherwise only"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,528,    // work if DriverManager has already loaded it.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,529,                // DriverManager will throw an exception if driver is not found
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,530,                Driver registerDriver = DriverManager.getDriver(url);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,531,                if (registerDriver instanceof AutoloadedDriver) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,532,                    driver = (InternalDriver) AutoloadedDriver.getDriverModule();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,533,                } else {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,534,                    driver = (InternalDriver) registerDriver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,535,                }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,536,   }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,537,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,538,  return driver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,539,  // else driver != null and driver can accept url
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,540, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,541,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,542, void update()
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,544,  StringBuffer sb = new StringBuffer(64);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,546,  sb.append(Attribute.PROTOCOL);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,547,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,548,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,549,  // Set the database name from the databaseName property
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,550,  String dbName = getDatabaseName();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,551,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,552,  if (dbName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,553,   dbName = dbName.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,554,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,555,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,556,  if (dbName == null || dbName.length() == 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,557,   // need to put something in so that we do not allow the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,558,   // database name to be set from the request or from the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,559,   // connection attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,560,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,561,   // this space will selected as the database name (and trimmed to an empty string)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,562,   // See the getDatabaseName() code in InternalDriver. Since this is a non-null
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,563,"   // value, it will be selected over any databaseName connection attribute."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,564,"   dbName = "" "";"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,565,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,566,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,567,  sb.append(dbName);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,570,  String connAttrs = getConnectionAttributes();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,571,  if (connAttrs != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,572,   connAttrs = connAttrs.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,573,   if (connAttrs.length() != 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,574,    sb.append(';');
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,575,    sb.append(connectionAttributes);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,576,   }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,577,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,579,  jdbcurl = sb.toString();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,580, }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,59,public class EmbeddedXADataSource extends EmbeddedDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,60,    javax.sql.XADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,91,"   setupResourceAdapter(null, null, false);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,109,"   setupResourceAdapter(user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,110,"                return createXAConnection (ra, user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,117, void update() {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,122," private void setupResourceAdapter(String user, String password, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,123, {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,124,  synchronized(this)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,125,  {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,126,   if (ra == null || !ra.isActive())
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,127,   {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,128,"    // If it is inactive, it is useless."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,129,    ra = null;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,130,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,131,    // DERBY-4907 make sure the database name sent to find service
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,132,    // does not include attributes.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,133,    String dbName = getShortDatabaseName();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,134,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,135,    if (dbName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,136,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,137,"     // see if database already booted, if it is, then don't make a"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,138,     // connection.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,139,     Database database = null;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,140,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,141,"     // if monitor is never setup by any ModuleControl, getMonitor"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,142,     // returns null and no Derby database has been booted.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,143,     if (Monitor.getMonitor() != null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,144,      database = (Database)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,145,"       Monitor.findService(Property.DATABASE_MODULE, dbName);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,146,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,147,     if (database == null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,148,     {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,149,"      // If database is not found, try connecting to it.  This"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,150,      // boots and/or creates the database.  If database cannot
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,151,"      // be found, this throws SQLException."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,152,      if (requestPassword)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,153,"       getConnection(user, password).close();"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,154,      else
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,155,       getConnection().close();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,156,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,157,      // now try to find it again
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,158,      database = (Database)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,159,"       Monitor.findService(Property.DATABASE_MODULE, dbName);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,160,     }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,161,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,162,     if (database != null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,163,      ra = (ResourceAdapter) database.getResourceAdapter();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,164,    }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,165,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,166,    if (ra == null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,167,"     throw new SQLException(MessageService.getTextMessage(MessageId.CORE_DATABASE_NOT_AVAILABLE),"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,168,"             ""08006"","
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,169,             ExceptionSeverity.DATABASE_SEVERITY);
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,170,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,171,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,172,"    // If database is already up, we need to set up driver"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,173,    // seperately.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,174,    findDriver();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,175,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,176,    if (driver == null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,177,"     throw new SQLException(MessageService.getTextMessage(MessageId.CORE_DRIVER_NOT_AVAILABLE),"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,178,"             ""08006"","
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,179,             ExceptionSeverity.DATABASE_SEVERITY);
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,180,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,181,   }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,182,  }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,183, }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,186,     * Intantiate and return an EmbedXAConnection from this instance
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,193,"    protected XAConnection createXAConnection (ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,55,public class EmbeddedXADataSource40 extends EmbeddedXADataSource {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,23,import java.sql.SQLException;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,25,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,26,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,27,import java.io.Serializable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,28,import java.io.PrintWriter;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,29,import java.util.Properties;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,30,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,31,/* -- JNDI -- */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,32,import javax.naming.NamingException;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,33,import javax.naming.Referenceable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,35,import javax.naming.StringRefAddr;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,37,import javax.naming.Context;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,38,import javax.naming.Name;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,39,import javax.naming.Reference;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,40,import javax.naming.RefAddr;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,41,import java.util.Hashtable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,42,import java.util.Enumeration;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,43,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,44,/**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,45,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,46,        Derby DataSource implementation base class.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,47, ReferenceableDataSource provides support for JDBC standard DataSource attributes and acts
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,48, as the ObjectFactory to generate Derby DataSource implementations.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,49, <P>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,50, The standard attributes provided by this class are:
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,51, <UL>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,52, <LI>databaseName
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,53, <LI>dataSourceName
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,54, <LI>description
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,55, <LI>password
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,56, <LI>user
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,57, </UL>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,58, <BR>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,59, See the specific Derby DataSource implementation for details on their meaning.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,60, <BR>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,61, See the JDBC 3.0 specification for more details.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,62,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,63,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,64,*/
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,65,public class ReferenceableDataSource implements
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,66,"    javax.naming.Referenceable,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,67,"    java.io.Serializable,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,68,    ObjectFactory
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,69,{
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,70,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,71,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,72, private static final long serialVersionUID = 1872877359127597176L;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,73,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,74,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,75," private static final Class[] STRING_ARG = { """".getClass() };"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,76, private static final Class[] INT_ARG = { Integer.TYPE };
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,77, private static final Class[] BOOLEAN_ARG = { Boolean.TYPE };
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,78,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,79, private String description;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,80, private String dataSourceName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,81, private String databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,82, /** shortDatabaseName has attributes of databaseName stripped */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,83, private String shortDatabaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,84,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,85, private String password;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,86, private String user;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,87, private int loginTimeout;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,88,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,89,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,90, /** instance variables that will not be serialized */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,91, transient private PrintWriter printer;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,92,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,93, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,94,  No-arg constructor.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,95,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,96, public ReferenceableDataSource() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,97,  update();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,98, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,99,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,100,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,101, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,102,  * Properties to be seen by Bean - access thru reflection.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,103,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,104,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,105, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,106,  Set the database name.  Setting this property is mandatory.  If a
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,107,"  database named wombat at g:/db needs to be accessed, database name"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,108,"  should be set to ""g:/db/wombat"".  The database will be booted if it"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,109,  is not already running in the system.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,110,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,111,  @param databaseName the name of the database
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,112, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,113, public final synchronized void setDatabaseName(String databaseName) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,114,  this.databaseName = databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,115,"  if( databaseName!= null && (databaseName.indexOf("";"") >= 0)){"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,116,"   String[] dbShort = databaseName.split("";"");"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,117,   this.shortDatabaseName = dbShort[0];
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,118,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,119,  else {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,120,   this.shortDatabaseName = databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,121,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,122,  update();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,123, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,124, public String getDatabaseName() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,125,  return databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,126, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,127,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,128, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,129,  * @return databaseName with attributes stripped.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,130,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,131, protected String getShortDatabaseName() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,132,  return shortDatabaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,133, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,134,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,135, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,136,  Set the data source name.  The property is not mandatory.  It is used
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,137,  for informational purposes only.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,138,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,139,  @param dsn the name of the data source
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,140, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,141, public final void setDataSourceName(String dsn) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,142,  dataSourceName = dsn;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,143, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,144, /** @return data source name */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,145, public final String getDataSourceName() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,146,  return dataSourceName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,147, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,148,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,149, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,150,  Set the data source descripton. This property is not mandatory.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,151,  It is used for informational purposes only.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,152,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,153,  @param desc the description of the data source
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,154,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,155, public final void setDescription(String desc) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,156,  description = desc;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,157, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,158, /** @return description */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,159, public final String getDescription() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,160,  return description;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,161, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,162,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,163, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,164,  Set the <code>user</code> property for the data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,165,  This is user name for any data source getConnection() call
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,166,  that takes no arguments.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,167, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,168, public final void setUser(String user) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,169,  this.user = user;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,170, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,171, /** @return user */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,172, public final String getUser() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,173,  return user;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,174, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,175,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,176, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,177,  Set the <code>password</code> property for the data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,178,  This is user's password for any data source getConnection() call
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,179,  that takes no arguments.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,180, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,181, public final void setPassword(String password) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,182,  this.password = password;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,183, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,184, /** @return password */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,185, public final String getPassword() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,186,  return password;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,187, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,188,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,189, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,190,  * DataSource methods
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,191,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,192,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,193,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,194, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,195,  * Gets the maximum time in seconds that this data source can wait
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,196,  * while attempting to connect to a database.  A value of zero
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,197,  * means that the timeout is the default system timeout
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,198,  * if there is one; otherwise it means that there is no timeout.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,199,"  * When a data source object is created, the login timeout is"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,200,  * initially zero.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,201,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,202,  * @return the data source login time limit
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,203,  * @exception SQLException if a database access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,204,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,205, public int getLoginTimeout() throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,206, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,207,  return loginTimeout;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,208, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,209,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,210, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,211,  * Sets the maximum time in seconds that this data source will wait
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,212,  * while attempting to connect to a database.  A value of zero
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,213,  * specifies that the timeout is the default system timeout
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,214,  * if there is one; otherwise it specifies that there is no timeout.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,215,"  * When a data source object is created, the login timeout is"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,216,  * initially zero.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,217,  <P>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,218,  Derby ignores this property.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,219,  * @param seconds the data source login time limit
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,220,  * @exception SQLException if a database access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,221,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,222, public void setLoginTimeout(int seconds) throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,223, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,224,  loginTimeout = seconds;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,225, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,226,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,227,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,228, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,229,  * Get the log writer for this data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,230,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,231,  * <p>The log writer is a character output stream to which all logging
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,232,  * and tracing messages for this data source object instance will be
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,233,  * printed.  This includes messages printed by the methods of this
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,234,"  * object, messages printed by methods of other objects manufactured"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,235,"  * by this object, and so on.  Messages printed to a data source"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,236,  * specific log writer are not printed to the log writer associated
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,237,  * with the java.sql.Drivermanager class.  When a data source object is
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,238,"  * created the log writer is initially null, in other words, logging"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,239,  * is disabled.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,240,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,241,"  * @return the log writer for this data source, null if disabled"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,242,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,243,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,244, public PrintWriter getLogWriter() throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,245, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,246,  return printer;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,247, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,249, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,250,  * Set the log writer for this data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,251,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,252,  * <p>The log writer is a character output stream to which all logging
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,253,  * and tracing messages for this data source object instance will be
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,254,  * printed.  This includes messages printed by the methods of this
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,255,"  * object, messages printed by methods of other objects manufactured"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,256,"  * by this object, and so on.  Messages printed to a data source"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,257,  * specific log writer are not printed to the log writer associated
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,258,  * with the java.sql.Drivermanager class. When a data source object is
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,259,"  * created the log writer is initially null, in other words, logging"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,260,  * is disabled.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,261,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,262,"  * @param out the new log writer; to disable, set to null"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,263,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,264,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,265, public void setLogWriter(PrintWriter out) throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,266, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,267,  printer = out;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,268, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,269,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,270, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,271, ** Reference methods etc.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,272, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,273,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,274, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,275,  * Object Factory method
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,276,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,277,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,278, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,279,  Re-Create Derby datasource given a reference.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,280,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,281,  @param obj The possibly null object containing location or reference
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,282,  information that can be used in creating an object.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,283,"  @param name The name of this object relative to nameCtx, or null if no"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,284,  name is specified.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,285,  @param nameCtx The context relative to which the name parameter is
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,286,"  specified, or null if name is relative to the default initial context."
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,287,  @param environment The possibly null environment that is used in
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,288,  creating the object.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,289,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,290,  @return One of the Derby datasource object created; null if an
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,291,  object cannot be created.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,292,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,293,  @exception Exception  if this object factory encountered an exception
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,294,"  while attempting to create an object, and no other object factories are"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,295,  to be tried.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,296,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,297," public Object getObjectInstance(Object obj,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,298,"         Name name,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,299,"         Context nameCtx,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,300,         Hashtable environment)
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,301,   throws Exception
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,302, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,303,  Reference ref = (Reference)obj;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,304,  String classname = ref.getClassName();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,305,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,306,  Object ds = Class.forName(classname).newInstance();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,307,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,308,  for (Enumeration e = ref.getAll(); e.hasMoreElements(); ) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,309,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,310,   RefAddr attribute = (RefAddr) e.nextElement();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,311,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,312,   String propertyName = attribute.getType();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,313,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,314,   String value = (String) attribute.getContent();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,315,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,316,"   String methodName = ""set"" + propertyName.substring(0,1).toUpperCase(java.util.Locale.ENGLISH) + propertyName.substring(1);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,317,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,318,   Method m;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,319,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,320,   Object argValue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,321,   try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,322,"    m = ds.getClass().getMethod(methodName, STRING_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,323,    argValue = value;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,324,   } catch (NoSuchMethodException nsme) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,325,    try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,326,"     m = ds.getClass().getMethod(methodName, INT_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,327,     argValue = Integer.valueOf(value);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,328,    } catch (NoSuchMethodException nsme2) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,329,"     m = ds.getClass().getMethod(methodName, BOOLEAN_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,330,     argValue = Boolean.valueOf(value);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,331,    }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,332,   }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,333,"   m.invoke(ds, new Object[] { argValue });"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,334,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,335,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,336,  return ds;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,337, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,338,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,339, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,340,  Referenceable method.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,341,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,342,  @exception NamingException cannot find named object
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,343,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,344, public final Reference getReference() throws NamingException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,345, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,346,  // These fields will be set by the JNDI server when it decides to
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,347,  // materialize a data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,348,"  Reference ref = new Reference(this.getClass().getName(),"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,349,"           ""org.apache.derby.jdbc.ReferenceableDataSource"","
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,350,           null);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,351,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,352,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,353,  // Look for all the getXXX methods in the class that take no arguments.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,354,  Method[] methods = this.getClass().getMethods();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,355,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,356,  for (int i = 0; i < methods.length; i++) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,357,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,358,   Method m = methods[i];
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,359,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,360,   // only look for simple getter methods.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,361,   if (m.getParameterTypes().length != 0)
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,362,    continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,363,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,364,   // only non-static methods
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,365,   if (Modifier.isStatic(m.getModifiers()))
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,366,    continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,367,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,368,   // Only getXXX methods
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,369,   String methodName = m.getName();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,370,"   if ((methodName.length() < 5) || !methodName.startsWith(""get""))"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,371,    continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,372,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,373,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,374,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,375,   Class returnType = m.getReturnType();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,376,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,377,   if (Integer.TYPE.equals(returnType) || STRING_ARG[0].equals(returnType) || Boolean.TYPE.equals(returnType)) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,378,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,379,    // setSomeProperty
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,380,    // 01234
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,381,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,382,"    String propertyName = methodName.substring(3,4).toLowerCase(java.util.Locale.ENGLISH).concat(methodName.substring(4));"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,383,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,384,    try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,385,"     Object ov = m.invoke(this, null);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,386,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,387,"     //Need to check for nullability for all the properties, otherwise"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,388,"     //rather than null, ""null"" string gets stored in jndi."
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,389,     if (ov != null) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,390,"      ref.add(new StringRefAddr(propertyName, ov.toString()));"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,391,     }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,392,    } catch (IllegalAccessException iae) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,393,    } catch (InvocationTargetException ite) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,394,    }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,395,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,396,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,397,   }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,398,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,399,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,400,  return ref;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,401, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,402,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,403,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,404, void update() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,405, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,406,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,407, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,408,  Return a connection for the Derby family of data source implementations.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,409, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,410," java.sql.Connection getConnection(String username, String password, boolean requestPassword) throws SQLException {"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,411,  return null;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,412, }
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,182,            Assert.fail(e.toString());
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,91,   final EmbeddedBaseDataSource dataSource;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,228,   public final Reference getReference() throws NamingException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,230,       // These fields will be set by the JNDI server when it decides to
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,231,       // materialize a data source.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,232,       Reference ref = new Reference(
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,233,"               this.getClass().getName(),"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,234,"               ""org.apache.derby.jdbc.ReferenceableDataSource"","
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,235,               null);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,239,       return ref;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,251,      */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,179,public class EmbeddedDataSource40 extends EmbeddedDataSource {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,220,     * initially zero. {@see #setLoginTimeout}.
java/client/org/apache/derby/client/am/PreparedStatement.java,2425,                if (!parameterSet_[i] && !parameterRegistered_[i]) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1751,        if (usingEmbedded()) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1752,            // Do not run for client until DERBY-2516 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1753,            op.clearParameters();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1754,"            op.setString(2, ""2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1755,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1756,                // a not set
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1757,                op.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1758,"                fail(""FAIL - a  not set"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1759,            } catch (SQLException sqle) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1760,"                assertSQLState(""07000"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1761,            }
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,464,  if(!expression.isConstantExpression()){
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,465,   return false;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,466,  }
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,467,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,468,  return expression.getConstantValueAsObject() instanceof Integer;
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-  lib-debug.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-10.6 .1.0-lib-debug.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/client/org/apache/derby/client/ClientPooledConnection.java,35,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection.java,95,"    public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,145,"    public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,468,"    protected NetXAConnection getNetXAConnection (ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,29,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection40.java,50,"    public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,59,"    public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,32,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection.java,38,    private ClientXADataSource derbyds_ = null;
java/client/org/apache/derby/client/ClientXAConnection.java,46,"    public ClientXAConnection(ClientXADataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,51,        derbyds_ = ds;
java/client/org/apache/derby/client/ClientXAConnection.java,99,    public ClientXADataSource getDataSource() throws SqlException {
java/client/org/apache/derby/client/ClientXAConnection.java,100,        if (logWriter_ != null) {
java/client/org/apache/derby/client/ClientXAConnection.java,101,"            logWriter_.traceExit(this, ""getDataSource"", derbyds_);"
java/client/org/apache/derby/client/ClientXAConnection.java,102,        }
java/client/org/apache/derby/client/ClientXAConnection.java,104,        return derbyds_;
java/client/org/apache/derby/client/ClientXAConnection.java,105,    }
java/client/org/apache/derby/client/ClientXAConnection.java,107,"    public NetXAConnection createControlConnection(NetLogWriter logWriter,"
java/client/org/apache/derby/client/ClientXAConnection.java,108,"                                                   String user,"
java/client/org/apache/derby/client/ClientXAConnection.java,109,"                                                   String password,"
java/client/org/apache/derby/client/ClientXAConnection.java,110,"                                                   org.apache.derby.jdbc.ClientDataSource dataSource,"
java/client/org/apache/derby/client/ClientXAConnection.java,111,"                                                   int rmId,"
java/client/org/apache/derby/client/ClientXAConnection.java,112,                                                   boolean isXAConn) throws SQLException {
java/client/org/apache/derby/client/ClientXAConnection.java,113,        try
java/client/org/apache/derby/client/ClientXAConnection.java,114,        {
java/client/org/apache/derby/client/ClientXAConnection40.java,29,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection40.java,52,"    public ClientXAConnection40 (ClientXADataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,26,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,30,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,47,"    ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,48,"            LogWriter logWriter,String user,String password)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,49,            throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,56,"    ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,57,"            LogWriter logWriter,String user,String password,int rmId)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,58,            throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,65,"    ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,226,"            org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,String user,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,247,"            String user,String password,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,248,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,258,"            LogWriter netLogWriter,String ipaddr,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,259,"            int portNumber,org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,286,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/Configuration.java,38,    public static int traceLevel__ = org.apache.derby.jdbc.ClientBaseDataSource.TRACE_ALL;
java/client/org/apache/derby/client/am/Connection.java,32,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/Connection.java,33,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/Connection.java,173,    public org.apache.derby.jdbc.ClientBaseDataSource dataSource_;
java/client/org/apache/derby/client/am/Connection.java,176,    public int clientSSLMode_ = ClientBaseDataSource.SSL_OFF;
java/client/org/apache/derby/client/am/Connection.java,189,"    protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,190,"                         String user,"
java/client/org/apache/derby/client/am/Connection.java,191,"                         String password,"
java/client/org/apache/derby/client/am/Connection.java,192,                         org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,193,                                                           throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,198,"    protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,199,"                         String user,"
java/client/org/apache/derby/client/am/Connection.java,200,"                         String password,"
java/client/org/apache/derby/client/am/Connection.java,201,"                         boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,202,                         org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,203,                                                           throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,210,"    protected void initConnection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,211,                                  org.apache.derby.jdbc.ClientBaseDataSource
java/client/org/apache/derby/client/am/Connection.java,212,                                            dataSource) throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,250,            ClientBaseDataSource.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/Connection.java,260,"    protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,261,"                         boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,262,                         org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,263,                                                            throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,269,        user_ = ClientDataSource.propertyDefault_user;
java/client/org/apache/derby/client/am/Connection.java,282,            ClientBaseDataSource.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/Connection.java,326,        user_ = ClientDataSource.getUser(properties);
java/client/org/apache/derby/client/am/Connection.java,327,        retrieveMessageText_ = ClientDataSource.getRetrieveMessageText(properties);
java/client/org/apache/derby/client/am/Connection.java,332,        clientSSLMode_ = ClientDataSource.getClientSSLMode(properties);
java/client/org/apache/derby/client/am/LogWriter.java,29,import java.util.Enumeration;
java/client/org/apache/derby/client/am/LogWriter.java,31,import javax.naming.NamingException;
java/client/org/apache/derby/client/am/LogWriter.java,32,import javax.naming.RefAddr;
java/client/org/apache/derby/client/am/LogWriter.java,33,import javax.naming.Reference;
java/client/org/apache/derby/client/am/LogWriter.java,34,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,35,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,215,        } else if (instance instanceof Connection && loggingEnabled(ClientDataSource.TRACE_CONNECTION_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,217,        } else if (instance instanceof ResultSet && loggingEnabled(ClientDataSource.TRACE_RESULT_SET_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,219,        } else if (instance instanceof CallableStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,221,        } else if (instance instanceof PreparedStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,223,        } else if (instance instanceof Statement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,227,        else if (instance instanceof Blob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for lobs !!
java/client/org/apache/derby/client/am/LogWriter.java,232,        else if (instance instanceof Clob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for bobs !!
java/client/org/apache/derby/client/am/LogWriter.java,237,        else if (instance instanceof DatabaseMetaData && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for dbmd ??
java/client/org/apache/derby/client/am/LogWriter.java,242,        else if (loggingEnabled(ClientDataSource.TRACE_XA_CALLS) &&
java/client/org/apache/derby/client/am/LogWriter.java,245,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,248,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,251,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,254,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,257,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,848,        if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,861,        if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,875,        if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,890,        if (!loggingEnabled(ClientDataSource.TRACE_PARAMETER_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,912,        if (!loggingEnabled(ClientDataSource.TRACE_RESULT_SET_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,993,    public void traceConnectEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,997,        if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,1000,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1013,        if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,1016,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1021,"    public void traceConnectResetEntry(Object instance, LogWriter logWriter,"
java/client/org/apache/derby/client/am/LogWriter.java,1022,"                                        String user, ClientBaseDataSource ds) {"
java/client/org/apache/derby/client/am/LogWriter.java,1027,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1036,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1045,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1053,    private void traceConnectsResetEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1067,    private void traceConnectsEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1248,     * Obtain a set of Properties for the ClientBaseDataSource
java/client/org/apache/derby/client/am/LogWriter.java,1250,    private Properties getProperties(ClientBaseDataSource cds)
java/client/org/apache/derby/client/am/LogWriter.java,1253,        Properties properties = new Properties();
java/client/org/apache/derby/client/am/LogWriter.java,1254,
java/client/org/apache/derby/client/am/LogWriter.java,1255,        try {
java/client/org/apache/derby/client/am/LogWriter.java,1256,            Reference ref = cds.getReference();
java/client/org/apache/derby/client/am/LogWriter.java,1257,
java/client/org/apache/derby/client/am/LogWriter.java,1258,            for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
java/client/org/apache/derby/client/am/LogWriter.java,1259,
java/client/org/apache/derby/client/am/LogWriter.java,1260,                RefAddr attribute = (RefAddr) e.nextElement();
java/client/org/apache/derby/client/am/LogWriter.java,1261,
java/client/org/apache/derby/client/am/LogWriter.java,1262,                String propertyKey = attribute.getType();
java/client/org/apache/derby/client/am/LogWriter.java,1263,                String value = (String) attribute.getContent();
java/client/org/apache/derby/client/am/LogWriter.java,1264,
java/client/org/apache/derby/client/am/LogWriter.java,1265,                // Don't display the password or even its length
java/client/org/apache/derby/client/am/LogWriter.java,1266,                if (Attribute.PASSWORD_ATTR.equals(propertyKey)) {
java/client/org/apache/derby/client/am/LogWriter.java,1267,"                    value = ""********"";"
java/client/org/apache/derby/client/am/LogWriter.java,1268,                }
java/client/org/apache/derby/client/am/LogWriter.java,1269,
java/client/org/apache/derby/client/am/LogWriter.java,1270,                if(value != null)
java/client/org/apache/derby/client/am/LogWriter.java,1271,"                    properties.setProperty(propertyKey, value);"
java/client/org/apache/derby/client/am/LogWriter.java,1272,            }
java/client/org/apache/derby/client/am/LogWriter.java,1273,        } catch (NamingException e) {
java/client/org/apache/derby/client/am/LogWriter.java,1274,"            throw new SqlException(this,"
java/client/org/apache/derby/client/am/LogWriter.java,1275,"                new ClientMessageId(SQLState.JAVA_EXCEPTION),"
java/client/org/apache/derby/client/am/LogWriter.java,1276,"                e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/am/LogWriter.java,1278,
java/client/org/apache/derby/client/am/LogWriter.java,1281,
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,24,import java.rmi.UnexpectedException;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,25,import java.sql.Connection;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,35,import org.apache.derby.client.am.Configuration;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,46,import org.apache.derby.client.net.NetLogWriter;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,47,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,48,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,63,"    public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,64,"            LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,71,"    public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,72,"            LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,73,"            String password,int rmId) throws SQLException {"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,79,"    public ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,82,"        return new ClientXAConnection((ClientXADataSource)ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,256,"            org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,280,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,292,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,318,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,49,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,50,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,70,"            ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,78,"            ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,86,"        ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,89,"        return new ClientXAConnection40((ClientXADataSource)ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,247,"            org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,271,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,283,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,308,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,38,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/NetConnection.java,193,"    public NetConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetConnection.java,194,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,195,"                         String user,"
java/client/org/apache/derby/client/net/NetConnection.java,196,                         String password) throws SqlException {
java/client/org/apache/derby/client/net/NetConnection.java,218,        String password = ClientBaseDataSource.getPassword(properties);
java/client/org/apache/derby/client/net/NetConnection.java,219,        securityMechanism_ = ClientBaseDataSource.getSecurityMechanism(properties);
java/client/org/apache/derby/client/net/NetConnection.java,231,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,244,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,283,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,295,"                            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,1405,        // (see ClientBaseDataSource.updateDataSourceValues().
java/client/org/apache/derby/client/net/NetConnection40.java,62,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,78,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,86,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,117,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,66,"    public NetXAConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,67,"                           String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,68,"                           String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,69,"                           org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,70,"                           int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,71,"                           boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,72,                           ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/client/net/NetXAConnection.java,261,"    protected NetConnection createNetConnection (NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,262,"                           String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,263,"                           String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,264,"                           org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,265,"                           int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,266,"                           boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,267,                           ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/client/net/OpenSocketAction.java,54,        case org.apache.derby.jdbc.ClientBaseDataSource.SSL_BASIC:
java/client/org/apache/derby/client/net/OpenSocketAction.java,57,        case org.apache.derby.jdbc.ClientBaseDataSource.SSL_PEER_AUTHENTICATION:
java/client/org/apache/derby/client/net/OpenSocketAction.java,60,        case org.apache.derby.jdbc.ClientBaseDataSource.SSL_OFF:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,24,import java.io.File;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,25,import java.io.PrintWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,26,import java.io.Serializable;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,27,import java.lang.reflect.InvocationTargetException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,28,import java.lang.reflect.Method;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,29,import java.lang.reflect.Modifier;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,30,import java.security.AccessController;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,31,import java.security.PrivilegedAction;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,32,import java.sql.SQLException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,33,import java.util.NoSuchElementException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,35,import java.util.StringTokenizer;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,41,import org.apache.derby.client.am.ClientMessageId;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,42,import org.apache.derby.client.am.Configuration;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,43,import org.apache.derby.client.am.Connection;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,44,import org.apache.derby.client.am.LogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,45,import org.apache.derby.client.am.SqlException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,46,import org.apache.derby.client.net.NetConfiguration;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,47,import org.apache.derby.client.net.NetLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,48,import org.apache.derby.shared.common.error.ExceptionUtil;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,49,import org.apache.derby.shared.common.reference.Attribute;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,50,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,55,"public abstract class ClientBaseDataSource implements Serializable, Referenceable {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,56,    private static final long serialVersionUID = -7660172643035173692L;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,57,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,58,    // Spec requires DH algorithm with 32bytes prime to be used
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,59,    // Not all JCE implementations have support for this. E.g.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,60,    // Sun JCE does not support DH(prime of 32bytes).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,61,    // store information if client JVM has JCE loaded that
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,62,    // can support the necessary algorithms required for EUSRIDPWD
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,63,    // (encrypted userid and password) security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,64,    // this information is needed to decide if security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,65,    // can be upgraded to EUSRIDPWD or not
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,66,    // See getUpgradedSecurityMechanism()
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,67,    static final boolean SUPPORTS_EUSRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,68,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,69,    static
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,70,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,71,        boolean supports_eusridpwd = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,72,        try
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,73,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,74,            // The EncryptionManager class will instantiate objects of the required
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,75,            // security algorithms that are needed for EUSRIDPWD
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,76,            // An exception will be thrown if support is not available
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,77,            // in the JCE implementation in the JVM in which the client
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,78,            // is loaded.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,79,            new org.apache.derby.client.am.EncryptionManager(null);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,80,            supports_eusridpwd = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,81,        }catch(Exception e)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,82,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,83,"            // if an exception is thrown, ignore exception."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,84,            // set SUPPORTS_EUSRIDPWD to false indicating that the client
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,85,            // does not support EUSRIDPWD security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,86,            supports_eusridpwd = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,87,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,88,        SUPPORTS_EUSRIDPWD = supports_eusridpwd;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,89,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,90,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,91,"    // The loginTimeout jdbc 2 data source property is not supported as a jdbc 1 connection property,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,92,    // because loginTimeout is set by the jdbc 1 api via java.sql.DriverManager.setLoginTimeout().
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,93,"    // The databaseName, serverName, and portNumber data source properties are also not supported as connection properties"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,94,    // because they are extracted from the jdbc 1 database url passed on the connection request.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,95,"    // However, all other data source properties should probably also be supported as connection properties."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,96,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,97,    //---------------------contructors/finalizers---------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,98,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,99,"    // This class is abstract, hide the default constructor"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,100,    ClientBaseDataSource() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,101,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,102,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,103,    // ---------------------------- loginTimeout -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,104,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,105,    // was serialized in 1.0 release
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,106,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,107,     * The time in seconds to wait for a connection request on this data source. The default value of zero indicates
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,108,     * that either the system time out be used or no timeout limit.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,109,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,110,     * @serial
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,111,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,112,    private int loginTimeout;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,113,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,114,    public synchronized void setLoginTimeout(int seconds) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,115,        this.loginTimeout = seconds;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,116,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,117,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,118,    public int getLoginTimeout() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,119,        return this.loginTimeout;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,120,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,121,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,122,    // ---------------------------- logWriter -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,123,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,124,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,125,"     * The log writer is declared transient, and is not serialized or stored under JNDI."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,126,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,127,     * @see #traceLevel
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,128,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,129,    private transient PrintWriter logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,130,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,131,    public synchronized void setLogWriter(PrintWriter logWriter) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,132,        this.logWriter = logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,133,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,134,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,135,    public PrintWriter getLogWriter() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,136,        return this.logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,137,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,138,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,139,    // ---------------------------- databaseName -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,140,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,141,"    // Stores the relational database name, RDBNAME."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,142,    // The length of the database name may be limited to 18 bytes
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,143,    // and therefore may throw an SQLException.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,144,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,145,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,146,    private String databaseName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,147,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,148,    // databaseName is not permitted in a properties object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,149,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,150,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,151,    // ---------------------------- description ------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,152,    // A description of this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,153,    private String description;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,154,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,155,    // ---------------------------- dataSourceName -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,156,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,157,    // A data source name;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,158,"    // used to name an underlying XADataSource,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,159,    // or ConnectionPoolDataSource when pooling of connections is done.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,160,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,161,    private String dataSourceName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,162,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,163,    // ---------------------------- portNumber -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,164,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,165,    private int portNumber = propertyDefault_portNumber;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,166,    public final static int propertyDefault_portNumber = 1527;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,167,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,168,    // ---------------------------- serverName -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,169,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,170,    // Derby-410 fix.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,171,    private String serverName = propertyDefault_serverName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,172,"    public final static String propertyDefault_serverName = ""localhost"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,173,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,174,    // serverName is not permitted in a properties object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,175,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,176,    //---------------------- client SSL ----------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,177,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,178,    /** The constant indicating that SSL encryption won't be used. */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,179,    public final static int SSL_OFF = 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,180,"    private final static String SSL_OFF_STR = ""off"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,181,    /** The constant indicating that SSL encryption will be used. */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,182,    public final static int SSL_BASIC = 1;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,183,"    private final static String SSL_BASIC_STR = ""basic"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,184,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,185,     * The constant indicating that SSL encryption with peer authentication
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,186,     * will be used.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,187,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,188,    public final static int SSL_PEER_AUTHENTICATION = 2;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,189,    private final static String SSL_PEER_AUTHENTICATION_STR =
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,190,"            ""peerAuthentication"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,191,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,192,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,193,     * Parses the string and returns the corresponding constant for the SSL
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,194,     * mode denoted.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,195,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,196,"     * Valid values are <tt>off</tt>, <tt>basic</tt> and"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,197,     * <tt>peerAuthentication</tt>.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,198,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,199,     * @param s string denoting the SSL mode
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,200,     * @return A constant indicating the SSL mode denoted by the string. If the
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,201,"     *      string is {@code null}, {@link #SSL_OFF} is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,202,     * @throws SqlException if the string has an invalid value
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,203,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,204,    public static final int getSSLModeFromString(String s)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,205,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,206,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,207,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,208,        if (s != null){
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,209,            if (s.equalsIgnoreCase(SSL_OFF_STR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,210,                return SSL_OFF;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,211,            } else if (s.equalsIgnoreCase(SSL_BASIC_STR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,212,                return SSL_BASIC;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,213,            } else if (s.equalsIgnoreCase(SSL_PEER_AUTHENTICATION_STR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,214,                return SSL_PEER_AUTHENTICATION;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,215,            } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,216,"                throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,217,"                        new ClientMessageId(SQLState.INVALID_ATTRIBUTE),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,218,"                        Attribute.SSL_ATTR, s, SSL_OFF_STR + "", "" +"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,219,"                        SSL_BASIC_STR + "", "" + SSL_PEER_AUTHENTICATION_STR);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,220,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,221,        } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,222,            // Default
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,223,            return SSL_OFF;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,224,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,225,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,226,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,227,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,228,     * Returns the SSL mode specified by the property object.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,229,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,230,     * @param properties data source properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,231,     * @return A constant indicating the SSL mode to use. Defaults to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,232,     *      {@link #SSL_OFF} if the SSL attribute isn't specified.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,233,     * @throws SqlException if an invalid value for the SSL mode is specified
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,234,     *      in the property object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,235,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,236,    public static final int getClientSSLMode(Properties properties)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,237,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,238,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,239,        return getSSLModeFromString(properties.getProperty(Attribute.SSL_ATTR));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,240,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,241,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,242,    // ---------------------------- user -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,243,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,244,    // This property can be overwritten by specifing the
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,245,    // username parameter on the DataSource.getConnection() method
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,246,"    // call.  If user is specified, then password must also be"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,247,"    // specified, either in the data source object or provided on"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,248,    // the DataSource.getConnection() call.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,249,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,250,    // Each data source implementation subclass will maintain it's own <code>password</code> property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,251,"    // This password property may or may not be declared transient, and therefore may be serialized"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,252,"    // to a file in clear-text, care must taken by the user to prevent security breaches."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,253,    // Derby-406 fix
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,254,    private String user = propertyDefault_user;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,255,"    public final static String propertyDefault_user = ""APP"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,256,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,257,    public static String getUser(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,258,        String userString = properties.getProperty(Attribute.USERNAME_ATTR);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,259,"        return parseString(userString, propertyDefault_user);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,260,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,261,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,262,    // ---------------------------- securityMechanism -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,263,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,264,    // The source security mechanism to use when connecting to this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,265,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,266,    // Security mechanism options are:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,267,    // <ul>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,268,    // <li> USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,269,    // <li> CLEAR_TEXT_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,270,    // <li> ENCRYPTED_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,271,    // <li> ENCRYPTED_USER_AND_PASSWORD_SECURITY - both password and user are encrypted
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,272,    // <li> STRONG_PASSWORD_SUBSTITUTE_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,273,    // </ul>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,274,    // The default security mechanism is USER_ONLY_SECURITY.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,275,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,276,    // If the application specifies a security
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,277,    // mechanism then it will be the only one attempted.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,278,    // If the specified security mechanism is not supported by the conversation
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,279,    // then an exception will be thrown and there will be no additional retries.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,280,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,281,    // This property is currently only available for the DNC driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,282,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,283,    // Both user and password need to be set for all security mechanism except USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,284,"    // When using USER_ONLY_SECURITY, only the user property needs to be specified."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,285,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,286,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,287,    // constant to indicate that the security mechanism has not been
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,288,"    // explicitly set, either on connection request when using DriverManager"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,289,    // or on the Client DataSource object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,290,    private final static short SECMEC_HAS_NOT_EXPLICITLY_SET = 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,291,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,292,    // Security Mechanism can be specified explicitly either when obtaining a
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,293,    // connection via a DriverManager or via Datasource.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,294,"    // Via DriverManager, securityMechanism can be set on the connection request using"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,295,    // the 'securityMechanism' attribute.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,296,"    // Via DataSource, securityMechanism can be set by calling setSecurityMechanism()"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,297,    // on the ClientDataSource
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,298,"    // If the security mechanism is not explicitly set as mentioned above, in that case"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,299,"    // the Client will try to upgrade the security mechanism to a more secure one, if possible."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,300,    // @see #getUpgradedSecurityMechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,301,"    // Therefore, need to keep track if the securityMechanism has been explicitly set"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,302,    protected short securityMechanism = SECMEC_HAS_NOT_EXPLICITLY_SET;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,303,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,304,    //  Default security mechanism is USER_ONLY_SECURITY.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,305,    public final static short propertyDefault_securityMechanism =
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,306,                                    (short) NetConfiguration.SECMEC_USRIDONL;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,307,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,308,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,309,    // We use the NET layer constants to avoid a mapping for the NET driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,310,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,311,"     * Return security mechanism if it is set, else upgrade the security mechanism"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,312,     * if possible and return the upgraded security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,313,     * @param properties Look in the properties if securityMechanism is set or not
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,314,"     * if set, return this security mechanism"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,315,     * @return security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,316,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,317,    public static short getSecurityMechanism(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,318,        short secmec;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,319,        String securityMechanismString =
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,320,            properties.getProperty(Attribute.CLIENT_SECURITY_MECHANISM);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,321,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,322,        if ( securityMechanismString != null )
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,323,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,324,"            // security mechanism has been set, do not override, but instead return"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,325,            // the security mechanism that has been set (DERBY-962)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,326,            secmec = Short.parseShort(securityMechanismString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,327,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,328,        else
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,329,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,330,"            // if securityMechanismString is null, this means that"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,331,            // security mechanism has not been set explicitly and not available in
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,332,"            // properties. Hence, do an upgrade of security mechanism if possible"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,333,            // The logic for upgrade of security mechanism uses information about
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,334,"            // if password is available or not, so pass this information also."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,335,            String passwordString = properties.getProperty(Attribute.PASSWORD_ATTR);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,336,            secmec = getUpgradedSecurityMechanism(passwordString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,337,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,338,        return secmec;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,339,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,340,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,341,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,342,     * This method has logic to upgrade security mechanism to a better (more secure)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,343,"     * one if it is possible. Currently derby server only has support for USRIDPWD,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,344,"     * USRIDONL, EUSRIDPWD and USRSSBPWD (10.2+) - this method only considers these"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,345,"     * possibilities. USRIDPWD, EUSRIDPWD and USRSSBPWD require a password, USRIDONL"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,346,     * is the only security mechanism which does not require password.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,347,"     * 1. if password is not available, then security mechanism possible is USRIDONL"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,348,"     * 2. if password is available,then USRIDPWD is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,349,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,350,     * @param password password argument
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,351,     * @return upgraded security mechanism if possible
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,352,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,353,    public static short getUpgradedSecurityMechanism(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,354,"        // if password is null, in that case the only acceptable security"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,355,"        // mechanism is USRIDONL, which is the default security mechanism."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,356,        if ( password == null )
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,357,            return propertyDefault_securityMechanism;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,358,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,359,        // when we have support for more security mechanisms on server
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,360,"        // and client, we should update this upgrade logic to pick"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,361,        // secure security mechanisms before trying out the USRIDPWD
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,362,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,363,        /*
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,364,        // -----------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,365,        // PLEASE NOTE:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,366,"        // When DERBY-1517, DERBY-1755 is fixed, there might be a way to use EUSRIDPWD"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,367,        // when both client and server vm's have support for it. Hence the below
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,368,        // if statement is commented out.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,369,        if (SUPPORTS_EUSRIDPWD)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,370,            return (short)NetConfiguration.SECMEC_EUSRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,371,        else
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,372,            // IMPORTANT NOTE:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,373,            // --------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,374,"            // If DERBY-1517 can be fixed, we should default to"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,375,            // SECMEC_USRSSBPWD (strong password substitute).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,376,"            // Until then, connecting with a 10.2+ client to"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,377,"            // a derby server < 10.2, and hence does not support"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,378,"            // SECMEC_USRSSBPWD as a SECMEC, will cause a DRDA protocol"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,379,"            // exception, as described in DERBY-926)."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,380,            //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,381,            // return (short)NetConfiguration.SECMEC_USRSSBPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,382,         // ----------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,383,         */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,384,         return (short)NetConfiguration.SECMEC_USRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,385,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,386,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,387,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,388,    // ---------------------------- getServerMessageTextOnGetMessage -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,389,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,390,    private boolean retrieveMessageText = propertyDefault_retrieveMessageText;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,391,    public final static boolean propertyDefault_retrieveMessageText = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,392,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,393,    public static boolean getRetrieveMessageText(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,394,        String retrieveMessageTextString = properties.getProperty(Attribute.CLIENT_RETIEVE_MESSAGE_TEXT);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,395,"        return parseBoolean(retrieveMessageTextString, propertyDefault_retrieveMessageText);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,396,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,397,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,398,    // ---------------------------- traceFile -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,399,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,400,    private String traceFile;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,401,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,402,    public static String getTraceFile(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,403,        return properties.getProperty(Attribute.CLIENT_TRACE_FILE);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,404,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,405,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,406,    // ---------------------------- traceDirectory -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,407,    // For the suffix of the trace file when traceDirectory is enabled.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,408,    private transient int traceFileSuffixIndex_ = 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,409,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,410,    private String traceDirectory;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,411,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,412,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,413,     * Check if derby.client.traceDirectory is provided as a JVM property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,414,"     * If yes, then we use that value. If not, then we look for traceDirectory"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,415,     * in the the properties parameter.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,416,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,417,     * @param properties jdbc url properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,418,     * @return value of traceDirectory property
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,419,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,420,    public static String getTraceDirectory(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,421,        String traceDirectoryString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,422,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,423,        traceDirectoryString  = readSystemProperty(Attribute.CLIENT_JVM_PROPERTY_PREFIX+Attribute.CLIENT_TRACE_DIRECTORY);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,424,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,425,        if (traceDirectoryString == null)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,426,            return properties.getProperty(Attribute.CLIENT_TRACE_DIRECTORY);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,427,        else
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,428,            return traceDirectoryString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,429,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,430,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,431,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,432,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,433,     * Read the value of the passed system property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,434,     * @param key name of the system property
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,435,"     * @return value of the system property, null if there is no permission to read the property"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,436,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,437,    private static String readSystemProperty(final String key) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,438,        //Using an anonymous class to read the system privilege because the
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,439,        //method java.security.AccessController.doPrivileged requires an
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,440,        //instance of a class(which implements java.security.PrivilegedAction).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,441,"        //Since readSystemProperty method is static, we can't simply pass ""this"""
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,442,        //to doPrivileged method and have ClientBaseDataSource implement
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,443,        //PrivilegedAction. To get around the static nature of method
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,444,"        //readSystemProperty, have an anonymous class implement PrivilegeAction."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,445,        //This class will read the system property in it's run method and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,446,        //return the value to the caller.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,447,        return AccessController.doPrivileged(new PrivilegedAction<String>() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,448,                public String run() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,449,                    try {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,450,                        return System.getProperty(key);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,451,                    } catch (SecurityException se) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,452,                        // We do not want the connection to fail if the user does not have permission to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,453,"                        // read the property, so if a security exception occurs, just return null and"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,454,                        // continue with the connection.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,455,                        return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,456,                    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,457,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,458,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,459,            );
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,460,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,461,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,462,    // ---------------------------- traceFileAppend -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,463,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,464,    private boolean traceFileAppend = propertyDefault_traceFileAppend;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,465,    public final static boolean propertyDefault_traceFileAppend = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,466,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,467,    public static boolean getTraceFileAppend(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,468,        String traceFileAppendString = properties.getProperty(Attribute.CLIENT_TRACE_APPEND);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,469,"        return parseBoolean(traceFileAppendString, propertyDefault_traceFileAppend);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,470,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,471,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,472,    // ---------------------------- password -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,473,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,474,"    // The password property is defined in subclasses, but the method"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,475,    // getPassword (java.util.Properties properties) is in this class to eliminate
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,476,    // dependencies on j2ee for connections that go thru the driver manager.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,478,    public static String getPassword(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,479,"        return properties.getProperty(""password"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,480,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,481,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,482,    private String password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,483,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,484,    synchronized public final void setPassword(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,485,        this.password = password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,486,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,487,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,488,    public final String getPassword() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,489,        return password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,490,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,492,    //------------------------ interface methods ---------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,495,        // This method creates a new Reference object to represent this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,496,"        // The class name of the data source object is saved in the Reference,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,497,        // so that an object factory will know that it should create an instance
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,498,        // of that class when a lookup operation is performed. The class
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,499,"        // name of the object factory, org.apache.derby.client.ClientBaseDataSourceFactory,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,500,        // is also stored in the reference.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,501,"        // This is not required by JNDI, but is recommend in practice."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,502,        // JNDI will always use the object factory class specified in the reference when
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,503,"        // reconstructing an object, if a class name has been specified."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,504,        // See the JNDI SPI documentation
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,505,"        // for further details on this topic, and for a complete description of the Reference"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,506,        // and StringRefAddr classes.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,508,        // This ClientBaseDataSource class provides several standard JDBC properties.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,509,        // The names and values of the data source properties are also stored
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,510,        // in the reference using the StringRefAddr class.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,511,        // This is all the information needed to reconstruct a ClientBaseDataSource object.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,513,"        Reference ref = new Reference(this.getClass().getName(), ClientDataSourceFactory.class.getName(), null);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,518,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,527,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,529,    private void addBeanProperties(Reference ref)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,530,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,531,        // Look for all the getXXX methods in the class that take no arguments.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,532,        Method[] methods = this.getClass().getMethods();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,533,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,534,        for (int i = 0; i < methods.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,535,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,536,            Method m = methods[i];
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,537,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,538,            // only look for simple getter methods.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,539,            if (m.getParameterTypes().length != 0)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,540,                continue;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,541,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,542,            // only non-static methods
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,543,            if (Modifier.isStatic(m.getModifiers()))
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,544,                continue;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,545,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,546,            // Only getXXX methods
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,547,            String methodName = m.getName();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,548,"            if ((methodName.length() < 5) || !methodName.startsWith(""get""))"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,549,                continue;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,550,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,551,            Class returnType = m.getReturnType();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,552,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,553,            if (Integer.TYPE.equals(returnType)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,554,                    || Short.TYPE.equals(returnType)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,555,                    || String.class.equals(returnType)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,556,                    || Boolean.TYPE.equals(returnType)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,557,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,558,                // setSomeProperty
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,559,                // 01234
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,560,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,561,"                String propertyName = methodName.substring(3, 4).toLowerCase("
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,562,                        java.util.Locale.ENGLISH).concat(
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,563,                        methodName.substring(4));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,564,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,565,                try {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,566,"                    Object ov = m.invoke(this, null);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,567,"                    // Need to check if property value is null, otherwise"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,568,"                    // ""null"" string gets stored."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,569,                    if (ov != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,570,"                        ref.add(new StringRefAddr(propertyName, ov.toString()));"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,571,                    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,572,                } catch (IllegalAccessException iae) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,573,                } catch (InvocationTargetException ite) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,574,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,575,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,576,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,577,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,578,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,579,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,580,    // ----------------------supplemental methods---------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,581,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,582,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,583,    //---------------------- helper methods --------------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,584,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,585,    // The java.io.PrintWriter overrides the traceFile setting.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,586,"    // If neither traceFile nor jdbc logWriter are set, then null is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,587,    // logWriterInUseSuffix used only for trace directories to indicate whether
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,588,"    // log writer is use is from xads, cpds, sds, ds, driver, config, reset."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,589,    LogWriter computeDncLogWriterForNewConnection(String logWriterInUseSuffix) throws SqlException {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,590,"        return computeDncLogWriterForNewConnection(logWriter, traceDirectory, traceFile, traceFileAppend, traceLevel, logWriterInUseSuffix, traceFileSuffixIndex_++);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,591,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,592,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,593,    // Called on for connection requests.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,594,    // The java.io.PrintWriter overrides the traceFile setting.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,595,"    // If neither traceFile, nor logWriter, nor traceDirectory are set, then null is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,596,"    static LogWriter computeDncLogWriterForNewConnection(PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, int traceLevel, String logWriterInUseSuffix, int traceFileSuffixIndex) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,597,        int globaltraceFileSuffixIndex = Configuration.traceFileSuffixIndex__++;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,598,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,599,        // compute regular dnc log writer if there is any
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,600,"        LogWriter dncLogWriter = computeDncLogWriter(logWriter, traceDirectory, traceFile, traceFileAppend, logWriterInUseSuffix, traceFileSuffixIndex, traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,601,        if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,602,            return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,603,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,604,        // compute global default dnc log writer if there is any
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,605,"        dncLogWriter = computeDncLogWriter(null, Configuration.traceDirectory__, Configuration.traceFile__, Configuration.traceFileAppend__, ""_global"", globaltraceFileSuffixIndex, Configuration.traceLevel__);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,606,        return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,607,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,608,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,609,    // Compute a DNC log writer before a connection is created.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,610,"    static LogWriter computeDncLogWriter(PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, String logWriterInUseSuffix, int traceFileSuffixIndex, int traceLevel) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,611,"        // Otherwise, the trace file will still be created even TRACE_NONE."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,612,        if (traceLevel == TRACE_NONE) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,613,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,614,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,615,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,616,"        PrintWriter printWriter = computePrintWriter(logWriter, traceDirectory, traceFile, traceFileAppend, logWriterInUseSuffix, traceFileSuffixIndex);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,617,        if (printWriter == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,618,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,619,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,620,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,621,"        LogWriter dncLogWriter = new NetLogWriter(printWriter, traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,622,        if (printWriter != logWriter &&
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,623,                (traceDirectory != null || traceFile != null))
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,624,        // When printWriter is an internal trace file and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,625,"        // traceDirectory is not null, each connection has"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,626,"        // its own trace file and the trace file is not cached,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,627,        // so we can close it when DNC log writer is closed.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,628,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,629,            dncLogWriter.printWriterNeedsToBeClosed_ = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,630,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,631,        return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,632,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,633,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,634,    // Compute a DNC log writer after a connection is created.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,635,    // Declared public for use by am.Connection.  Not a public external.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,636,"    public static LogWriter computeDncLogWriter(Connection connection, PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, String logWriterInUseSuffix, int traceFileSuffixIndex, int traceLevel) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,637,"        // Otherwise, the trace file will still be created even TRACE_NONE."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,638,        if (traceLevel == TRACE_NONE) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,639,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,640,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,641,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,642,"        PrintWriter printWriter = computePrintWriter(logWriter, traceDirectory, traceFile, traceFileAppend, logWriterInUseSuffix, traceFileSuffixIndex);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,643,        if (printWriter == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,644,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,645,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,646,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,647,"        LogWriter dncLogWriter = connection.agent_.newLogWriter_(printWriter, traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,648,        if (printWriter != logWriter &&
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,649,                (traceDirectory != null || traceFile != null))
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,650,        // When printWriter is an internal trace file and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,651,"        // traceDirectory is not null, each connection has"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,652,"        // its own trace file and the trace file is not cached,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,653,        // so we can close it when DNC log writer is closed.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,654,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,655,            dncLogWriter.printWriterNeedsToBeClosed_ = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,656,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,657,        return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,658,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,659,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,660,    // This method handles all the override semantics.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,661,"    // The logWriter overrides the traceFile, and traceDirectory settings."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,662,"    // If neither traceFile, nor logWriter, nor traceDirectory are set, then null is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,663,"    static PrintWriter computePrintWriter(PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, String logWriterInUseSuffix, int traceFileSuffixIndex) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,664,        if (logWriter != null)  // java.io.PrintWriter is specified
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,665,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,666,            return logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,667,        } else { // check trace file setting.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,668,            if (traceDirectory != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,669,                String fileName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,670,                if (traceFile == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,671,"                    fileName = traceDirectory + File.separator + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,672,                } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,673,"                    fileName = traceDirectory + File.separator + traceFile + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,674,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,675,"                return LogWriter.getPrintWriter(fileName, true); // no file append and not enable caching."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,676,            } else if (traceFile != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,677,"                return LogWriter.getPrintWriter(traceFile, traceFileAppend);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,678,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,679,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,680,        return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,681,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,682,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,683,"    private static boolean parseBoolean(String boolString, boolean defaultBool) {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,684,        if (boolString != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,685,"            return (boolString.equalsIgnoreCase(""true"") || boolString.equalsIgnoreCase(""yes""));"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,686,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,687,        return defaultBool;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,688,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,689,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,690,"    private static String parseString(String string, String defaultString) {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,691,        if (string != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,692,            return string;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,693,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,694,        return defaultString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,695,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,696,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,697,"    private static int parseInt(String intString, int defaultInt) {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,698,        if (intString != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,699,            return Integer.parseInt(intString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,700,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,701,        return defaultInt;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,702,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,703,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,704,"    // tokenize ""property=value;property=value..."" and returns new properties object"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,705,    //This method is used both by ClientDriver to parse the url and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,706,    // ClientDataSource.setConnectionAttributes
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,707,"    static Properties tokenizeAttributes(String attributeString, Properties properties) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,708,        Properties augmentedProperties;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,709,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,710,        if (attributeString == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,711,            return properties;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,712,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,713,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,714,        if (properties != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,715,            augmentedProperties = (Properties) properties.clone();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,716,        } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,717,            augmentedProperties = new Properties();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,718,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,719,        try {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,720,"            StringTokenizer attrTokenizer = new StringTokenizer(attributeString, "";"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,721,            while (attrTokenizer.hasMoreTokens()) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,722,                String v = attrTokenizer.nextToken();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,723,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,724,                int eqPos = v.indexOf('=');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,725,                if (eqPos == -1) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,726,"                    throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,727,"                        new ClientMessageId(SQLState.INVALID_ATTRIBUTE_SYNTAX),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,728,                        attributeString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,729,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,730,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,731,"                augmentedProperties.setProperty((v.substring(0, eqPos)).trim(), (v.substring(eqPos + 1)).trim());"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,732,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,733,        } catch (NoSuchElementException e) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,734,"            // A null log writer is passed, because jdbc 1 sqlexceptions are automatically traced"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,735,"            throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,736,"                new ClientMessageId(SQLState.INVALID_ATTRIBUTE_SYNTAX),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,737,"                attributeString, e);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,738,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,739,"        checkBoolean(augmentedProperties, Attribute.CLIENT_RETIEVE_MESSAGE_TEXT);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,740,        return augmentedProperties;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,741,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,742,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,743,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,744,"    private static void checkBoolean(Properties set, String attribute) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,745,"        final String[] booleanChoices = {""true"", ""false""};"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,746,"        checkEnumeration(set, attribute, booleanChoices);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,747,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,750,"    private static void checkEnumeration(Properties set, String attribute, String[] choices) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,751,        String value = set.getProperty(attribute);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,752,        if (value == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,753,            return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,754,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,755,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,756,        for (int i = 0; i < choices.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,757,            if (value.toUpperCase(java.util.Locale.ENGLISH).equals(choices[i].toUpperCase(java.util.Locale.ENGLISH))) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,758,                return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,761,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,762,// The attribute value is invalid. Construct a string giving the choices for
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,763,// display in the error message.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,764,"        String choicesStr = ""{"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,765,        for (int i = 0; i < choices.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,766,            if (i > 0) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,767,"                choicesStr += ""|"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,768,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,769,            choicesStr += choices[i];
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,770,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,771,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,772,"        throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,773,"            new ClientMessageId(SQLState.INVALID_ATTRIBUTE),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,774,"            attribute, value, choicesStr);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,775,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,776,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,777,    /*
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,778,     * Properties to be seen by Bean - access thru reflection.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,779,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,780,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,781,    // -- Stardard JDBC DataSource Properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,782,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,783,    public synchronized void setDatabaseName(String databaseName) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,784,        this.databaseName = databaseName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,785,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,786,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,787,    public String getDatabaseName() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,788,        return this.databaseName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,789,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,790,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,791,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,792,    public synchronized void setDataSourceName(String dataSourceName) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,793,        this.dataSourceName = dataSourceName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,794,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,795,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,796,    public String getDataSourceName() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,797,        return this.dataSourceName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,798,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,799,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,800,    public synchronized void setDescription(String description) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,801,        this.description = description;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,802,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,803,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,804,    public String getDescription() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,805,        return this.description;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,806,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,807,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,808,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,809,    public synchronized void setPortNumber(int portNumber) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,810,        this.portNumber = portNumber;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,811,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,812,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,813,    public int getPortNumber() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,814,        return this.portNumber;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,815,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,816,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,817,    public synchronized void setServerName(String serverName) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,818,        this.serverName = serverName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,819,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,820,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,821,    public String getServerName() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,822,        return this.serverName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,823,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,824,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,825,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,826,    public synchronized void setUser(String user) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,827,        this.user = user;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,828,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,829,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,830,    public String getUser() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,831,        return this.user;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,832,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,833,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,834,    synchronized public void setRetrieveMessageText(boolean retrieveMessageText) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,835,        this.retrieveMessageText = retrieveMessageText;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,836,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,837,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,838,    public boolean getRetrieveMessageText() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,839,        return this.retrieveMessageText;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,840,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,841,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,842,    // ---------------------------- securityMechanism -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,843,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,844,     * The source security mechanism to use when connecting to this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,845,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,846,     * Security mechanism options are: <ul>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,847,     * <li> USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,848,     * <li> CLEAR_TEXT_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,849,     * <li> ENCRYPTED_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,850,     * <li> ENCRYPTED_USER_AND_PASSWORD_SECURITY - both password and user are encrypted
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,851,     * <li> STRONG_PASSWORD_SUBSTITUTE_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,852,     * </ul> The default security mechanism is USER_ONLY SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,853,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,854,     * If the application specifies a security mechanism then it will be the only one attempted. If the specified
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,855,     * security mechanism is not supported by the conversation then an exception will be thrown and there will be no
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,856,     * additional retries.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,857,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,858,     * This property is currently only available for the  DNC driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,859,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,860,     * Both user and password need to be set for all security mechanism except USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,861,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,862,    // We use the NET layer constants to avoid a mapping for the NET driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,863,    public final static short USER_ONLY_SECURITY = (short) NetConfiguration.SECMEC_USRIDONL;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,864,    public final static short CLEAR_TEXT_PASSWORD_SECURITY = (short) NetConfiguration.SECMEC_USRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,865,    public final static short ENCRYPTED_PASSWORD_SECURITY = (short) NetConfiguration.SECMEC_USRENCPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,866,    public final static short ENCRYPTED_USER_AND_PASSWORD_SECURITY = (short) NetConfiguration.SECMEC_EUSRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,867,    public final static short STRONG_PASSWORD_SUBSTITUTE_SECURITY = (short) NetConfiguration.SECMEC_USRSSBPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,868,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,869,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,870,     * Sets the security mechanism.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,871,     * @param securityMechanism to set
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,872,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,873,    synchronized public void setSecurityMechanism(short securityMechanism) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,874,        this.securityMechanism = securityMechanism;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,875,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,876,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,877,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,878,     * Return the security mechanism.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,879,"     * If security mechanism has not been set explicitly on datasource,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,880,     * then upgrade the security mechanism to a more secure one if possible.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,881,     * @see #getUpgradedSecurityMechanism(String)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,882,     * @return the security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,883,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,884,    public short getSecurityMechanism() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,885,        return getSecurityMechanism(getPassword());
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,886,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,887,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,888,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,889,     * Return the security mechanism for this datasource object.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,890,"     * If security mechanism has not been set explicitly on datasource,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,891,     * then upgrade the security mechanism to a more secure one if possible.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,892,     * @param password  password of user
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,893,     * @see #getUpgradedSecurityMechanism(String)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,894,     * @return the security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,895,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,896,    public short getSecurityMechanism(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,897,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,898,        // if security mechanism has not been set explicitly on
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,899,"        // datasource, then upgrade the security mechanism if possible"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,900,        // DERBY-962
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,901,        if ( securityMechanism == SECMEC_HAS_NOT_EXPLICITLY_SET )
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,902,            return getUpgradedSecurityMechanism(password);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,903,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,904,        return securityMechanism;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,905,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,906,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,907,    // ----------------------- ssl
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,908,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,909,    private int sslMode;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,910,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,911,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,912,     * Specifices the SSL encryption mode to use.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,913,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,914,"     * Valid values are <tt>off</tt>, <tt>basic</tt> and"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,915,     * <tt>peerAuthentication</tt>.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,916,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,917,"     * @param mode the SSL mode to use (<tt>off</tt>, <tt>basic</tt> or"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,918,     *      <tt>peerAuthentication</tt>)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,919,     * @throws SqlException if the specified mode is invalid
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,920,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,921,    public void setSsl(String mode)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,922,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,923,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,924,        sslMode = getSSLModeFromString(mode);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,925,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,926,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,927,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,928,     * Returns the SSL encryption mode specified for the data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,929,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,930,"     * @return <tt>off</tt>, <tt>basic</tt> or <tt>peerAuthentication</tt>."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,931,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,932,    public String getSsl() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,933,        switch(sslMode) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,934,        case SSL_OFF:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,935,        default:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,936,            return SSL_OFF_STR;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,937,        case SSL_BASIC:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,938,            return SSL_BASIC_STR;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,939,        case SSL_PEER_AUTHENTICATION:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,940,            return SSL_PEER_AUTHENTICATION_STR;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,941,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,942,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,943,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,944,    // ----------------------- set/getCreate/ShutdownDatabase ---------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,945,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,946,     * Set to true if the database should be created.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,947,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,948,    private boolean createDatabase;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,949,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,950,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,951,     * Set to true if the database should be shutdown.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,952,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,953,    private boolean shutdownDatabase;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,954,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,955,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,956,     * Set this property to create a new database.  If this property is not
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,957,"     * set, the database (identified by databaseName) is assumed to be already"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,958,     * existing.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,959,"     * @param create if set to the string ""create"", this data source will try"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,960,"     *               to create a new database of databaseName, or boot the"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,961,     *               database if one by that name already exists.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,962,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,963,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,964,    public final void setCreateDatabase(String create) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,965,"        if (create != null && create.equalsIgnoreCase(""create""))"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,966,            this.createDatabase = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,967,        else // reset
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,968,            this.createDatabase = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,969,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,970,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,971,"    /** @return ""create"" if create is set, or null if not"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,972,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,973,    public final String getCreateDatabase() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,974,        String createstr=null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,975,        if (createDatabase)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,976,"            createstr=""create"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,977,        return createstr;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,978,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,979,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,980,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,981,     * Set this property if one wishes to shutdown the database identified by
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,982,     * databaseName.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,983,"     * @param shutdown if set to the string ""shutdown"", this data source will"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,984,     *                 shutdown the database if it is running.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,985,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,986,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,987,    public final void setShutdownDatabase(String shutdown) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,988,"        if (shutdown != null && shutdown.equalsIgnoreCase(""shutdown""))"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,989,            this.shutdownDatabase = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,990,        else // reset
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,991,            this.shutdownDatabase = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,992,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,993,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,994,"    /** @return ""shutdown"" if shutdown is set, or null if not"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,995,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,996,    public final String getShutdownDatabase() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,997,        String shutdownstr=null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,998,        if (shutdownDatabase)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,999,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1000,"            shutdownstr = ""shutdown"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1001,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1002,        return shutdownstr;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1003,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1004,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1005,    protected String connectionAttributes = null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1006,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1007,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1008,     * Set this property to pass in more Derby specific connection URL attributes.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1009,     * <BR>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1010,     * Any attributes that can be set using a property of this DataSource implementation
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1011,"     * (e.g user, password) should not be set in connectionAttributes. Conflicting"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1012,     * settings in connectionAttributes and properties of the DataSource will lead to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1013,     * unexpected behaviour.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1014,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1015,"     * @param prop set to the list of Derby connection attributes separated by semi-colons.   E.g., to specify an"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1016,"     *             encryption bootPassword of ""x8hhk2adf"", and set upgrade to true, do the following: <PRE>"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1017,"     *             ds.setConnectionAttributes(""bootPassword=x8hhk2adf;upgrade=true""); </PRE> See Derby documentation for"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1018,     *             complete list.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1019,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1020,    public final void setConnectionAttributes(String prop) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1021,        connectionAttributes = prop;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1022,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1023,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1024,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1025,     * @return Derby specific connection URL attributes
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1026,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1027,    public final String getConnectionAttributes() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1028,        return connectionAttributes;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1029,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1030,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1031,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1032,    // ---------------------------- traceLevel -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1033,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1034,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1035,    public final static int TRACE_NONE = 0x0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1036,    public final static int TRACE_CONNECTION_CALLS = 0x1;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1037,    public final static int TRACE_STATEMENT_CALLS = 0x2;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1038,    public final static int TRACE_RESULT_SET_CALLS = 0x4;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1039,    public final static int TRACE_DRIVER_CONFIGURATION = 0x10;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1040,    public final static int TRACE_CONNECTS = 0x20;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1041,    public final static int TRACE_PROTOCOL_FLOWS = 0x40;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1042,    public final static int TRACE_RESULT_SET_META_DATA = 0x80;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1043,    public final static int TRACE_PARAMETER_META_DATA = 0x100;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1044,    public final static int TRACE_DIAGNOSTICS = 0x200;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1045,    public final static int TRACE_XA_CALLS = 0x800;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1046,    public final static int TRACE_ALL = 0xFFFFFFFF;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1047,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1048,    public final static int propertyDefault_traceLevel = TRACE_ALL;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1049,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1050,    protected int traceLevel = propertyDefault_traceLevel;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1051,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1052,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1053,     * Check if derby.client.traceLevel is provided as a JVM property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1054,"     * If yes, then we use that value. If not, then we look for traceLevel"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1055,     * in the the properties parameter.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1056,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1057,     * @param properties jdbc url properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1058,     * @return value of traceLevel property
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1059,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1060,    public static int getTraceLevel(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1061,        String traceLevelString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1062,        traceLevelString  = readSystemProperty(Attribute.CLIENT_JVM_PROPERTY_PREFIX+Attribute.CLIENT_TRACE_LEVEL);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1063,        if (traceLevelString == null)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1064,            traceLevelString = properties.getProperty(Attribute.CLIENT_TRACE_LEVEL);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1065,"        return parseInt(traceLevelString, propertyDefault_traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1066,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1067,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1068,    synchronized public void setTraceLevel(int traceLevel) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1069,        this.traceLevel = traceLevel;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1070,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1071,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1072,    public int getTraceLevel() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1073,        return this.traceLevel;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1074,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1075,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1076,    public synchronized void setTraceFile(String traceFile) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1077,        this.traceFile = traceFile;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1078,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1079,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1080,    public String getTraceFile() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1081,        return this.traceFile;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1082,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1083,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1084,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1085,    public synchronized void setTraceDirectory(String traceDirectory) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1086,        this.traceDirectory = traceDirectory;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1087,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1088,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1089,    public String getTraceDirectory() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1090,        return this.traceDirectory;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1091,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1092,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1093,    synchronized public void setTraceFileAppend(boolean traceFileAppend) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1094,        this.traceFileAppend = traceFileAppend;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1095,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1096,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1097,    public boolean getTraceFileAppend() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1098,        return this.traceFileAppend;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1099,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1100,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1101,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1102,     * Returns the maximum number of JDBC prepared statements a connection is
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1103,     * allowed to cache.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1104,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1105,     * A basic data source will always return zero. If statement caching is
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1106,"     * required, use a {@link javax.sql.ConnectionPoolDataSource}."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1107,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1108,     * This method is used internally by Derby to determine if statement
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1109,     * pooling is to be enabled or not.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1110,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1111,"     * @return Maximum number of statements to cache, or <code>0</code> if"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1112,     *      caching is disabled (default).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1113,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1114,    public int maxStatementsToPool() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1115,        return 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1116,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1117,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1118,    // --- private helper methods
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1119,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1120,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1121,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1122,     * The dataSource keeps individual fields for the values that are relevant to the client. These need to be updated
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1123,     * when set connection attributes is called.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1124,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1125,    void updateDataSourceValues(Properties prop)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1126,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1127,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1128,        if (prop == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1129,            return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1130,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1131,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1132,        if (prop.containsKey(Attribute.USERNAME_ATTR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1133,            setUser(getUser(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1134,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1135,        if (prop.containsKey(Attribute.CLIENT_SECURITY_MECHANISM)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1136,            setSecurityMechanism(getSecurityMechanism(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1137,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1138,        if (prop.containsKey(Attribute.CLIENT_TRACE_FILE)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1139,            setTraceFile(getTraceFile(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1140,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1141,        if (prop.containsKey(Attribute.CLIENT_TRACE_DIRECTORY)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1142,            setTraceDirectory(getTraceDirectory(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1143,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1144,        if (prop.containsKey(Attribute.CLIENT_TRACE_APPEND)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1145,            setTraceFileAppend(getTraceFileAppend(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1146,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1147,        if (prop.containsKey(Attribute.CLIENT_RETIEVE_MESSAGE_TEXT)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1148,            setRetrieveMessageText(getRetrieveMessageText(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1149,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1150,        if (prop.containsKey(Attribute.SSL_ATTR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1151,            sslMode = getClientSSLMode(prop);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1152,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1153,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1154,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1155,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1156,     * Handles common error situations that can happen when trying to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1157,"     * obtain a physical connection to the server, and which require special"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1158,     * handling.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1159,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1160,"     * If this method returns normally, the exception wasn't handled and should"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1161,     * be handled elsewhere or be re-thrown.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1162,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1163,"     * @param logWriter log writer, may be {@code null}"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1164,     * @param sqle exception to handle
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1165,     * @throws SQLException handled exception (if any)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1166,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1167,"    protected final void handleConnectionException(LogWriter logWriter,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1168,                                                   SqlException sqle)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1169,            throws SQLException {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1170,        // See DERBY-4070
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1171,        if (sqle.getSQLState().equals(
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1172,                ExceptionUtil.getSQLStateFromIdentifier(
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1173,                    SQLState.INVALID_ATTRIBUTE_SYNTAX))) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1174,            // Wrap this in SQLState.MALFORMED_URL exception to be
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1175,            // consistent with the embedded driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1176,"            throw new SqlException(logWriter,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1177,"                    new ClientMessageId(SQLState.MALFORMED_URL),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1178,"                    constructUrl(), sqle).getSQLException();"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1179,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1180,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1181,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1182,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1183,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1184,     * Constructs the JDBC connection URL from the state of the data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1185,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1186,     * @return The JDBC connection URL.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1187,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1188,    private String constructUrl() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1189,        StringBuffer sb = new StringBuffer(64);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1190,"        // To support subSubProtocols, the protocol addition below must be"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1191,        // changed.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1192,        sb.append(Attribute.DNC_PROTOCOL);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1193,        sb.append(serverName);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1194,        sb.append(':');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1195,        sb.append(portNumber);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1196,        sb.append('/');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1197,        sb.append(databaseName);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1198,        if (connectionAttributes != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1199,            sb.append(';');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1200,            sb.append(connectionAttributes);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1201,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1202,        return sb.toString();
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,48,                                           implements ConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,74,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,75,        try
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,76,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,77,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,78,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,79,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_cpds"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,80,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,81,"                dncLogWriter.traceEntry(this, ""getPooledConnection"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,82,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,83,"            PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,84,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,85,"                dncLogWriter.traceExit(this, ""getPooledConnection"", pooledConnection);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,86,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,87,            return pooledConnection;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,88,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,89,        catch ( SqlException se )
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,90,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,91,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,92,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,93,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,94,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,95,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,100,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,101,        try
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,102,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,103,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,104,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,105,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_cpds"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,106,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,107,"                dncLogWriter.traceEntry(this, ""getPooledConnection"", user, ""<escaped>"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,108,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,109,"            PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, user, password);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,110,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,111,"                dncLogWriter.traceExit(this, ""getPooledConnection"", pooledConnection);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,112,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,113,            return pooledConnection;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,114,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,115,        catch ( SqlException se )
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,116,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,117,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,118,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,119,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,120,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,121,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,124,    //  method that establishes the initial physical connection
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,125,    // using DS properties instead of CPDS properties.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,126,"    private PooledConnection getPooledConnectionX(LogWriter dncLogWriter,"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,127,"                        ClientBaseDataSource ds, String user,"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,128,                        String password) throws SQLException {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,129,"            return ClientDriver.getFactory().newClientPooledConnection(ds,"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,130,"                    dncLogWriter, user, password);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,131,    }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,132,
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,45,        extends ClientConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientDataSource.java,24,import java.sql.Connection;
java/client/org/apache/derby/jdbc/ClientDataSource.java,25,import java.sql.SQLException;
java/client/org/apache/derby/jdbc/ClientDataSource.java,26,import javax.sql.DataSource;
java/client/org/apache/derby/jdbc/ClientDataSource.java,27,import org.apache.derby.client.am.ClientMessageId;
java/client/org/apache/derby/jdbc/ClientDataSource.java,28,import org.apache.derby.client.am.LogWriter;
java/client/org/apache/derby/jdbc/ClientDataSource.java,29,import org.apache.derby.client.am.SqlException;
java/client/org/apache/derby/jdbc/ClientDataSource.java,30,import org.apache.derby.client.net.NetLogWriter;
java/client/org/apache/derby/jdbc/ClientDataSource.java,31,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/jdbc/ClientDataSource.java,32,
java/client/org/apache/derby/jdbc/ClientDataSource.java,104,public class ClientDataSource extends ClientBaseDataSource implements DataSource {
java/client/org/apache/derby/jdbc/ClientDataSource.java,153,    // ---------------------------interface methods-------------------------------
java/client/org/apache/derby/jdbc/ClientDataSource.java,154,
java/client/org/apache/derby/jdbc/ClientDataSource.java,155,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,156,"     * Attempt to establish a database connection in a non-pooling, non-distributed environment."
java/client/org/apache/derby/jdbc/ClientDataSource.java,157,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,158,     * @return a Connection to the database
java/client/org/apache/derby/jdbc/ClientDataSource.java,159,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,160,     * @throws java.sql.SQLException if a database-access error occurs.
java/client/org/apache/derby/jdbc/ClientDataSource.java,161,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,162,    public Connection getConnection() throws SQLException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,163,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientDataSource.java,164,        try {
java/client/org/apache/derby/jdbc/ClientDataSource.java,165,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientDataSource.java,166,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientDataSource.java,167,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_sds"");"
java/client/org/apache/derby/jdbc/ClientDataSource.java,168,"            return getConnectionX(dncLogWriter, getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientDataSource.java,169,        } catch (SqlException se) {
java/client/org/apache/derby/jdbc/ClientDataSource.java,170,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientDataSource.java,171,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,172,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientDataSource.java,173,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientDataSource.java,174,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,175,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,176,
java/client/org/apache/derby/jdbc/ClientDataSource.java,177,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,178,"     * Attempt to establish a database connection in a non-pooling, non-distributed environment."
java/client/org/apache/derby/jdbc/ClientDataSource.java,179,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,180,     * @param user     the database user on whose behalf the Connection is being made
java/client/org/apache/derby/jdbc/ClientDataSource.java,181,     * @param password the user's password
java/client/org/apache/derby/jdbc/ClientDataSource.java,182,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,183,     * @return a Connection to the database
java/client/org/apache/derby/jdbc/ClientDataSource.java,184,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,185,     * @throws java.sql.SQLException if a database-access error occurs.
java/client/org/apache/derby/jdbc/ClientDataSource.java,186,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,187,"    public Connection getConnection(String user, String password) throws SQLException {"
java/client/org/apache/derby/jdbc/ClientDataSource.java,188,        // Jdbc 2 connections will write driver trace info on a
java/client/org/apache/derby/jdbc/ClientDataSource.java,189,        // datasource-wide basis using the jdbc 2 data source log writer.
java/client/org/apache/derby/jdbc/ClientDataSource.java,190,        // This log writer may be narrowed to the connection-level
java/client/org/apache/derby/jdbc/ClientDataSource.java,191,        // This log writer will be passed to the agent constructor.
java/client/org/apache/derby/jdbc/ClientDataSource.java,192,
java/client/org/apache/derby/jdbc/ClientDataSource.java,193,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientDataSource.java,194,        try
java/client/org/apache/derby/jdbc/ClientDataSource.java,195,        {
java/client/org/apache/derby/jdbc/ClientDataSource.java,196,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientDataSource.java,197,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientDataSource.java,198,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_sds"");"
java/client/org/apache/derby/jdbc/ClientDataSource.java,199,"            return getConnectionX(dncLogWriter, user, password);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,200,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,201,        catch(SqlException se)
java/client/org/apache/derby/jdbc/ClientDataSource.java,202,        {
java/client/org/apache/derby/jdbc/ClientDataSource.java,203,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientDataSource.java,204,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,205,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientDataSource.java,206,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientDataSource.java,207,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,208,
java/client/org/apache/derby/jdbc/ClientDataSource.java,209,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,210,
java/client/org/apache/derby/jdbc/ClientDataSource.java,211,"    private Connection getConnectionX(LogWriter dncLogWriter,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,212,"                                      String user, String password)"
java/client/org/apache/derby/jdbc/ClientDataSource.java,213,            throws SqlException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,214,        return ClientDriver.getFactory().newNetConnection(
java/client/org/apache/derby/jdbc/ClientDataSource.java,215,"                (NetLogWriter)dncLogWriter, user, password, this, -1, false);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,216,
java/client/org/apache/derby/jdbc/ClientDataSource.java,217,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,218,
java/client/org/apache/derby/jdbc/ClientDataSource.java,219,    // JDBC 4.0 java.sql.Wrapper interface methods
java/client/org/apache/derby/jdbc/ClientDataSource.java,220,
java/client/org/apache/derby/jdbc/ClientDataSource.java,221,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,222,     * Check whether this instance wraps an object that implements the interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,223,     * specified by {@code iface}.
java/client/org/apache/derby/jdbc/ClientDataSource.java,224,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,225,     * @param iface a class defining an interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,226,"     * @return {@code true} if this instance implements {@code iface}, or"
java/client/org/apache/derby/jdbc/ClientDataSource.java,227,     * {@code false} otherwise
java/client/org/apache/derby/jdbc/ClientDataSource.java,228,     * @throws SQLException if an error occurs while determining if this
java/client/org/apache/derby/jdbc/ClientDataSource.java,229,     * instance implements {@code iface}
java/client/org/apache/derby/jdbc/ClientDataSource.java,230,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,231,    public boolean isWrapperFor(Class<?> iface) throws SQLException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,232,        return iface.isInstance(this);
java/client/org/apache/derby/jdbc/ClientDataSource.java,233,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,234,
java/client/org/apache/derby/jdbc/ClientDataSource.java,235,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,236,     * Returns {@code this} if this class implements the specified interface.
java/client/org/apache/derby/jdbc/ClientDataSource.java,237,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,238,     * @param  iface a class defining an interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,239,     * @return an object that implements the interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,240,     * @throws SQLException if no object is found that implements the
java/client/org/apache/derby/jdbc/ClientDataSource.java,241,     * interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,242,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,243,    public <T> T unwrap(Class<T> iface) throws SQLException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,244,        try {
java/client/org/apache/derby/jdbc/ClientDataSource.java,245,            return iface.cast(this);
java/client/org/apache/derby/jdbc/ClientDataSource.java,246,        } catch (ClassCastException cce) {
java/client/org/apache/derby/jdbc/ClientDataSource.java,247,"            throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,248,"                    new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),"
java/client/org/apache/derby/jdbc/ClientDataSource.java,249,                    iface).getSQLException();
java/client/org/apache/derby/jdbc/ClientDataSource.java,250,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,251,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,252,
java/client/org/apache/derby/jdbc/ClientDataSource40.java,103,public class ClientDataSource40 extends ClientDataSource {
java/client/org/apache/derby/jdbc/ClientDriver.java,125,                port = ClientDataSource.propertyDefault_portNumber;
java/client/org/apache/derby/jdbc/ClientDriver.java,136,                traceLevel = ClientDataSource.getTraceLevel(augmentedProperties);
java/client/org/apache/derby/jdbc/ClientDriver.java,148,"                    ClientDataSource.computeDncLogWriterForNewConnection(java.sql.DriverManager.getLogWriter(),"
java/client/org/apache/derby/jdbc/ClientDriver.java,149,"                            ClientDataSource.getTraceDirectory(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,150,"                            ClientDataSource.getTraceFile(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,151,"                            ClientDataSource.getTraceFileAppend(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,152,"                            traceLevel,"
java/client/org/apache/derby/jdbc/ClientDriver.java,153,"                            ""_driver"","
java/client/org/apache/derby/jdbc/ClientDriver.java,154,                            traceFileSuffixIndex_++);
java/client/org/apache/derby/jdbc/ClientDriver.java,227,"                new java.sql.DriverPropertyInfo(Attribute.USERNAME_ATTR,"
java/client/org/apache/derby/jdbc/ClientDriver.java,228,"                        properties.getProperty(Attribute.USERNAME_ATTR, ClientDataSource.propertyDefault_user));"
java/client/org/apache/derby/jdbc/ClientDriver.java,374,"        return ClientDataSource.tokenizeAttributes(attributeString, properties);"
java/client/org/apache/derby/jdbc/ClientDriver.java,390,        if(Configuration.supportsJDBC40()) {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,26,import javax.sql.XADataSource;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,50,public class ClientXADataSource extends ClientDataSource implements XADataSource {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,61,        NetLogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,62,        try {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,63,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientXADataSource.java,64,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,65,            dncLogWriter = (NetLogWriter)
java/client/org/apache/derby/jdbc/ClientXADataSource.java,66,"                    super.computeDncLogWriterForNewConnection(""_xads"");"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,67,            return getXAConnectionX(
java/client/org/apache/derby/jdbc/ClientXADataSource.java,68,"                    dncLogWriter, this, getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,69,        } catch (SqlException se) {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,70,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientXADataSource.java,71,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,72,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientXADataSource.java,73,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientXADataSource.java,74,        }
java/client/org/apache/derby/jdbc/ClientXADataSource.java,78,        NetLogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,79,        try
java/client/org/apache/derby/jdbc/ClientXADataSource.java,80,        {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,81,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientXADataSource.java,82,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,83,            dncLogWriter = (NetLogWriter)
java/client/org/apache/derby/jdbc/ClientXADataSource.java,84,"                    super.computeDncLogWriterForNewConnection(""_xads"");"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,85,"            return getXAConnectionX(dncLogWriter, this, user, password);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,86,        }
java/client/org/apache/derby/jdbc/ClientXADataSource.java,87,        catch ( SqlException se )
java/client/org/apache/derby/jdbc/ClientXADataSource.java,88,        {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,89,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientXADataSource.java,90,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,91,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientXADataSource.java,92,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientXADataSource.java,93,        }
java/client/org/apache/derby/jdbc/ClientXADataSource.java,95,
java/client/org/apache/derby/jdbc/ClientXADataSource.java,96,    /**
java/client/org/apache/derby/jdbc/ClientXADataSource.java,97,     * Method that establishes the initial physical connection
java/client/org/apache/derby/jdbc/ClientXADataSource.java,98,     * using DS properties instead of CPDS properties.
java/client/org/apache/derby/jdbc/ClientXADataSource.java,99,     */
java/client/org/apache/derby/jdbc/ClientXADataSource.java,100,"    private XAConnection getXAConnectionX(LogWriter dncLogWriter,"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,101,"        ClientBaseDataSource ds, String user, String password)"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,102,        throws SQLException
java/client/org/apache/derby/jdbc/ClientXADataSource.java,103,    {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,104,"        return ClientDriver.getFactory().newClientXAConnection(ds,"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,105,"                dncLogWriter, user, password);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,106,    }
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,50,public class ClientXADataSource40 extends ClientXADataSource {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,56,import org.apache.derby.jdbc.ClientBaseDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2359,                new Integer(ClientBaseDataSource.TRACE_ALL));
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,40,import org.apache.derby.jdbc.ClientBaseDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,41,import org.apache.derby.jdbc.EmbeddedDataSource;
java/testing/org/apache/derbyTesting/junit/J2EEDataSource.java,101,}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,26,import java.sql.DriverManager;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,31,import java.sql.Types;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,35,import javax.sql.DataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,45,import org.apache.derbyTesting.functionTests.tests.nist.NistScripts;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,47,//import org.apache.derby.iapi.types.XML;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,52,import org.apache.derbyTesting.junit.JDBCDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,53,import org.apache.derbyTesting.junit.TestConfiguration;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,73,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,81,      Connection conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,82,      conn.setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,346,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,419,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,540,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1172,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1236,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1985,private void dropTable(Statement s) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1986,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1987,"    s.execute(""DROP TABLE APP.CUSTOMER"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1988,    s.getConnection().commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1989,}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1990,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2049,"        suite.addTest(collatedSuite(""en"", false, ""testEnglishCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2050,"        suite.addTest(collatedSuite(""en"", true, ""testUsingClauseAndNaturalJoin""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2051,"        suite.addTest(collatedSuite(""en"", false, ""testUsingClauseAndNaturalJoin""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2052,"        suite.addTest(collatedSuite(""en"", true, ""testNullColumnInInsert""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2053,"        suite.addTest(collatedSuite(""en"", false, ""testNullColumnInInsert""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2077,"            suite.addTest(collatedSuite(""no"", false, ""testNorwayCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2080,"            suite.addTest(collatedSuite(""pl"", false, ""testPolishCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2083,"            suite.addTest(collatedSuite(""fr"", false, ""testFrenchCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2086,"            suite.addTest(collatedSuite(""sv"", true, ""testSwedishCaseInsensitiveCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2108,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2109,  /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2110,     Load the appropriate driver for the current framework
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2111,   */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2112,  private static void loadDriver()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2113,  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2114,      String driverClass =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2115,          TestConfiguration.getCurrent().getJDBCClient().getJDBCDriverName();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2116,      try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2117,          Class.forName(driverClass).newInstance();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2118,      } catch (Exception e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2119,"          fail (""could not instantiate driver"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2120,      }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2121,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2125,   * a primary fixture from this test plus potentially other
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2126,   * fixtures.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2129,   * @param baseFixture Base fixture from this test.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2132,"  private static Test collatedSuite(String locale, boolean caseInsensitive, String baseFixture)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2135,      suite.addTest(new CollationTest(baseFixture));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2136,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2163,        ResultSet rs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2172,"        rs = s.executeQuery(""select * from derby5591"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2173,"        JDBC.assertFullResultSet(rs,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2174,"                                 new String[][] {{""a""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2176,"        s.executeUpdate(""DROP TABLE derby5591"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,55,    static final long serialVersionUID = -7660172643035173693L;
java/drda/org/apache/derby/impl/drda/XADatabase.java,65,        if (xaDataSource == null)
java/drda/org/apache/derby/impl/drda/XADatabase.java,66,        {
java/drda/org/apache/derby/impl/drda/XADatabase.java,67,            xaDataSource = new EmbeddedXADataSource();
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,33,import javax.naming.Reference;
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,34,import javax.naming.Referenceable;
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,66,"            ""org.apache.derby.jdbc.EmbeddedXADataSource"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,73,"            ""org.apache.derby.jdbc.ClientXADataSource"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,75,
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,95,"                   IllegalAccessException, IOException, NamingException {"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,96,"        String modifiedVersionString = versionString.replaceAll(""\\."", ""_"");"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,116,"            // Wrote version string, build number, the data source object and finally"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,117,            // a {@link javax.naming.Reference} for the data source.
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,121,            Reference dsRef = ((Referenceable)ds).getReference();
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,122,            oos.writeObject(dsRef);
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,160,            obj = ois.readObject();
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,161,"            System.out.println(""\tobject : "" + obj);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java,73,        // Only run this test if we have a JDBC 4 JVM.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java,74,        if (JDBC.vmSupportsJDBC4())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,27,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,28,import org.apache.derby.jdbc.EmbeddedDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,29,import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,30,import org.apache.derby.jdbc.EmbeddedXADataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,31,import org.apache.derby.jdbc.ClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,49,    private ClientDataSource40      _netclient;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,55,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,64,        if ( wrapped instanceof EmbeddedDataSource40  ) { _embedded = (EmbeddedDataSource40 ) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,65,        else if ( wrapped instanceof EmbeddedConnectionPoolDataSource40 ) { _ecpds = (EmbeddedConnectionPoolDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,66,        else if ( wrapped instanceof EmbeddedXADataSource40 ) { _exads = (EmbeddedXADataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,67,        else if ( wrapped instanceof ClientDataSource40 ) { _netclient = (ClientDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,68,        else if ( wrapped instanceof ClientConnectionPoolDataSource40 ) { _ccpds = (ClientConnectionPoolDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,69,        else if ( wrapped instanceof ClientXADataSource40 ) { _cxads = (ClientXADataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,70,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,81,        if ( _embedded != null ) { return _embedded.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,82,        else if ( _netclient != null ) { return _netclient.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,83,        else if ( _ecpds != null ) { return _ecpds.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,84,        else if ( _exads != null ) { return _exads.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,85,        else if ( _ccpds != null ) { return _ccpds.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,86,        else if ( _cxads != null ) { return _cxads.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,87,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,98,        if ( _embedded != null ) { return _embedded; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,99,        else if ( _netclient != null ) { return _netclient; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,100,        else if ( _ecpds != null ) { return _ecpds; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,101,        else if ( _exads != null ) { return _exads; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,102,        else if ( _ccpds != null ) { return _ccpds; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,103,        else if ( _cxads != null ) { return _cxads; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,104,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,34,import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,53,    public void testMaxStatementsProperty() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,54,        ClientConnectionPoolDataSource cDs =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,55,                new ClientConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,82,        ClientConnectionPoolDataSource cDs = (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,83,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,98,        ClientConnectionPoolDataSource cDs = (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,99,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,112,    private void verifyConnection(ClientConnectionPoolDataSource cDs)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,146,       if (JDBC.vmSupportsJSR169()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,147,            // Referenceable is not supported with JSR169
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,148,"            suite = new TestSuite(""DatasourceTest cannot run with JSR169"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,32,import javax.naming.Reference;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,33,import javax.naming.spi.ObjectFactory;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,43, * current version of the data souce.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,52, * made.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,81,"        final String EMBEDDED_CLASS = ""EmbeddedDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,82,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,83,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,84,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,85,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,95,"        final String EMBEDDED_CLASS = ""EmbeddedConnectionPoolDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,96,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,97,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,98,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,99,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,109,"        final String EMBEDDED_CLASS = ""EmbeddedXADataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,110,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,111,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,112,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,113,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,123,"        final String CLIENT_CLASS = ""ClientDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,124,        // No client driver for Derby 10.0
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,125,"        deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,126,"        deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,127,"        deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,137,"        final String CLIENT_CLASS = ""ClientConnectionPoolDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,138,        // No client driver for Derby 10.0
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,139,"        deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,140,"        deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,141,"        deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,151,"        final String CLIENT_CLASS = ""ClientXADataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,152,        // No client driver for Derby 10.0
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,153,"        deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,154,"        deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,155,"        deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,175,"    private void deSerializeDs(String className, String version)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,201,        Reference dsRef = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,223,            // Recreate the data source using reference.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,224,            dsRef = (Reference)ois.readObject();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,239,        String factoryClassName = dsRef.getFactoryClassName();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,240,        ObjectFactory factory =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,241,            (ObjectFactory)Class.forName(factoryClassName).newInstance();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,242,        Object recreatedDs =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,243,"            factory.getObjectInstance(dsRef, null, null, null);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,244,        ds = (DataSource)recreatedDs;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,245,"        assertTrue(""Unexpected class instantiated by Reference: "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,246,"                dsObj.getClass().getName(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,247,                dsObj.getClass().getName().indexOf(className) > 0);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,31,import java.util.HashMap;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,34,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,37,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,38,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,39,import org.apache.derby.jdbc.EmbeddedDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,270,    public void testClientDSConnectionAttributes() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,274,        ClientDataSource ds = new ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,436,    public void testClientMessageTextConnectionAttribute() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,446,        ClientDataSource ds = new ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,117,"            assertSQLState(""08004"", se);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,118,"            // with network server, the java.net.UnknownHostException will be in"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,119,"            // derby.log, the client only gets a 08004 and somewhat misleading"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,120,            // warning ('Reason: userid or password invalid')
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,121,"            println( ""Saw SQLException with message = "" + se.getMessage() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,122,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,123,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,124,"                assertTrue(se.getMessage().indexOf(""java.net.UnknownHostException"")>1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,133,"            assertSQLState(""08004"", se);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,134,"            // with network server, the java.net.UnknownHostException will be in"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,135,"            // derby.log, the client only gets a 08004 and somewhat misleading"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,136,            // warning ('Reason: userid or password invalid')
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,137,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,138,"                assertTrue(se.getMessage().indexOf(""java.net.UnknownHostException"")>1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,56,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,57,import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,58,import org.apache.derby.jdbc.ClientXADataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2347,        final boolean isXA = ds instanceof ClientXADataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2348,        final boolean isCP = ds instanceof ClientConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2359,                new Integer(ClientBaseDataSourceRoot.TRACE_ALL));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2368,            physicalCon = ((ClientConnectionPoolDataSource)ds).
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2726,    public void testClientDSConnectionAttributes() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2731,        ClientConnectionPoolDataSource cpds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2732,            new ClientConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2736,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2739,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2744,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2747,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2756,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2758,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2763,        ClientXADataSource xads = new ClientXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2768,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2771,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2775,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2778,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2786,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2788,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2875,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2878,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2883,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2886,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2891,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2894,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2904,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2907,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2920,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2923,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2927,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2930,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2935,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2938,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2943,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2946,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2952,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2955,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3042,    public void testClientMessageTextConnectionAttribute() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3047,        ClientConnectionPoolDataSource cpds = new ClientConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3064,        ClientXADataSource xads = new ClientXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3852,    private static void dsConnectionRequests(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3888,    private static void dsConnectionRequests(
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,34,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,403,"            ClientDataSource ds = configureDataSource( fullDbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,428,"                ClientDataSource ds = configureDataSource( fullDbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,460,"                ClientDataSource ds = configureDataSource( fullDbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1006,                    ClientDataSource ds = configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1195,"                        ClientDataSource ds = configureDataSource( fDbPath, fSlaveHost, fSlaveServerPort, fConnAttrs );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1354,        ClientDataSource ds = configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1384,        ClientDataSource ds = configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2773,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2777,"        ClientDataSource ds = configureDataSource( dbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2801,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2804,"        ClientDataSource ds = configureDataSource( dbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3022,    ClientDataSource    configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3028,         )
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3030,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,29,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,125,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,127,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,25,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,62,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,83,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,86,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,104,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,26,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,195,                ClientDataSource ds = new ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,27,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,175,            String dbPath) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,177,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,194,            String dbPath) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,196,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,31,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,223,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,225,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,27,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,221,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,224,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,32,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,83,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,126,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,138,            throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,140,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,31,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,78,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,83,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,95,            throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,97,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/junit/Derby.java,98,"                ""org.apache.derby.jdbc.ClientDataSource"");"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,48,"            ""org.apache.derby.jdbc.EmbeddedDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,49,"            ""org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,50,"            ""org.apache.derby.jdbc.EmbeddedXADataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,88,"            ""org.apache.derby.jdbc.ClientDataSource"","
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,389,"      URL client = getURL(""org.apache.derby.jdbc.ClientDataSource"");"
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,392,  }
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,393,
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,524,                //running under jdk1.6 or higher
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,525,                // try instantiating EmbeddedXADataSource40
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,526,                try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,528,"                            ""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,529,"                    ""ClientXADataSource40"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,531,                catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,532,                    //probably it was not compiled with jdbc4.0
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,533,                    //support go ahead with ClientXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,534,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,535,                catch (UnsupportedClassVersionError ue) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,536,                    // ClientXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,537,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,538,                return (XADataSource) (Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,539,"                        ""org.apache.derby.jdbc.ClientXADataSource"""
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,540,                ).newInstance());
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,541,            }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,542,            else {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,543,                //running under jdk1.6 or higher
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,544,                // try instantiating EmbeddedXADataSource40
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,545,                try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,547,"                            ""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,548,"                    ""EmbeddedXADataSource40"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,549,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,550,                catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,551,                    //probably it was not compiled with jdbc4.0
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,552,                    //support go ahead with EmbeddedXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,553,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,554,                catch (UnsupportedClassVersionError ue) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,555,                    // not jdk 16 or higher. Go ahead with
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,556,                    // EmbeddedXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,558,"                return (XADataSource)(Class.forName(""org.apache.derby.jdbc.EmbeddedXADataSource"").newInstance());"
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,32, * NonJNDIClientConnectionPoolDataSource40 is similar to
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,38,public class NonJNDIClientConnectionPoolDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,39,        extends NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,50,"            ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"";"
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,63,    public NonJNDIClientConnectionPoolDataSource40() {
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,32, * NonJNDIClientDataSource40 is similar to ClientDataSource40 except it
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,36,public class NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,41,"            ""org.apache.derby.jdbc.NonJNDIClientDataSource40"";"
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,53,    public NonJNDIClientDataSource40() {
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIClientXADataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,32,public class NonJNDIClientXADataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,33,    extends NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,38,"        ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"";"
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,44,    public NonJNDIClientXADataSource40() {
java/drda/org/apache/derby/impl/drda/XADatabase.java,75,"                        ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"")."
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,27, * NonJNDIEmbeddedConnectionPoolDataSource40 is similar to
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,33,public class NonJNDIEmbeddedConnectionPoolDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,34,    extends NonJNDIEmbeddedDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,43,    public NonJNDIEmbeddedConnectionPoolDataSource40() {
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,30," * NonJNDIEmbeddedDataSource40 is similar to EmbeddedDataSource40, but does"
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,36, public class NonJNDIEmbeddedDataSource40 extends EmbeddedBaseDataSource
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,41,    public NonJNDIEmbeddedDataSource40() {}
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,30, * NonJNDIEmbeddedXADataSource40 is similar to
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,36,public class NonJNDIEmbeddedXADataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,37,    extends NonJNDIEmbeddedDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,48,    public NonJNDIEmbeddedXADataSource40() {
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,70,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,71,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,72,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,83,"            ""org.apache.derby.jdbc.NonJNDIClientDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,84,"            ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,85,"            ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,140,"            if (!(dsClassName.contains(""NonJNDI""))) {"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,183,"            if (!(obj.getClass().getName().indexOf(""NonJNDI"") > 0)) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,33,import org.apache.derby.jdbc.NonJNDIClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,34,import org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,53,    private NonJNDIEmbeddedDataSource40    _nonJNDIembedded;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,58,    private NonJNDIClientDataSource40      _nonJNDInetclient;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,84,            if ( wrapped instanceof NonJNDIEmbeddedDataSource40  ) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,85,                _nonJNDIembedded = (NonJNDIEmbeddedDataSource40 ) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,86,            else if ( wrapped instanceof NonJNDIClientDataSource40 ) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,87,                _nonJNDInetclient = (NonJNDIClientDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,109,            if ( _nonJNDIembedded != null ) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,110,                return _nonJNDIembedded.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,111,            else if ( _nonJNDInetclient != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,112,                return _nonJNDInetclient.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,134,            if ( _nonJNDIembedded != null ) { return _nonJNDIembedded; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,135,            else if ( _nonJNDInetclient != null ) { return _nonJNDInetclient; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,62,"                ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,94,"        final String EMBEDDED_CLASS = ""NonJNDIEmbeddedDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,117,"                ""NonJNDIEmbeddedConnectionPoolDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,138,"        final String EMBEDDED_CLASS = ""NonJNDIEmbeddedXADataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,159,"        final String CLIENT_CLASS = ""NonJNDIClientDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,180,"        final String CLIENT_CLASS = ""NonJNDIClientConnectionPoolDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,201,"        final String CLIENT_CLASS = ""NonJNDIClientXADataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,396,"                filePrefix + ""NonJNDIEmbeddedDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,398,"                    ""NonJNDIEmbeddedConnectionPoolDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,399,"                filePrefix + ""NonJNDIEmbeddedXADataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,400,"                filePrefix + ""NonJNDIClientDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,402,"                    ""NonJNDIClientConnectionPoolDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,403,"                filePrefix + ""NonJNDIClientXADataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,37,import org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,218,            NonJNDIEmbeddedDataSource40 nds = new NonJNDIEmbeddedDataSource40();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,221,"                    expectedValues, ""NonJNDIDataSource"", nds.getConnection());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,278,"                    ""org.apache.derby.jdbc.NonJNDIClientDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,461,"              ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2741,"               ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2783,"                ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3079,"               ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3106,"                ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3054,"                ""org.apache.derby.jdbc.NonJNDIClientDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,135,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,71,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,104,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,132,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,203,"                        ""org.apache.derby.jdbc.NonJNDIClientDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,185,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,213,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,233,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,232,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,33,import org.apache.derby.jdbc.NonJNDIClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,152,            ds = new NonJNDIClientDataSource40();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,32,import org.apache.derby.jdbc.NonJNDIClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,108,            ds = new NonJNDIClientDataSource40();
java/testing/org/apache/derbyTesting/junit/Derby.java,100,"                ""org.apache.derby.jdbc.NonJNDIClientDataSource40"");"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,51,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,55,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,59,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,100,"            ""org.apache.derby.jdbc.NonJNDIClientDataSource40"") :"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,106,"            ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"") :"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,112,"            ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"") :"
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,392,"                    ""org.apache.derby.jdbc.NonJNDIClientDataSource40"");"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,544,"                        ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"")."
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,568,"                        ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"")."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,38, * Java Naming and Directory Interface (JNDI). Use
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,39, * ClientConnectionPoolDataSource if your application runs under
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,40," * JDBC 3.0 or JDBC 4.0, that is, on the following Java Virtual Machines:"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,41, * <p/>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,42, * <UL>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,43, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,44, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,45, * </UL>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,34, * Java Naming and Directory Interface (JNDI). Use this factory
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,35, * if your application runs at JDBC level 4.1 (or higher). Use
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,36," * ClientConnectionPoolDataSource, instead, if your application runs under"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,37," * JDBC 4.0 or JDBC 3.0, that is, on the following Java Virtual Machines:"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,38, * <p/>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,39, * <UL>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,40, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,41, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,42, * </UL>
java/client/org/apache/derby/jdbc/ClientDataSource.java,30, * environment. Use these DataSources if your application runs under
java/client/org/apache/derby/jdbc/ClientDataSource.java,31," * JDBC 3.0 or JDBC 4.0, that is, on the following Java Virtual Machines:"
java/client/org/apache/derby/jdbc/ClientDataSource.java,32, * <p/>
java/client/org/apache/derby/jdbc/ClientDataSource.java,33, * <UL>
java/client/org/apache/derby/jdbc/ClientDataSource.java,34, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientDataSource.java,35, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientDataSource.java,36, * </UL>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,36, * environment. Use these DataSources if your application runs at
java/client/org/apache/derby/jdbc/ClientDataSource40.java,37," * JDBC level 4.1 (or higher). Use the corresponding ClientDataSource,"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,38," * ClientConnectionPoolDataSource, and ClientXADataSource classes if"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,39, * your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientDataSource40.java,40, * <p/>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,41, *  <UL>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,42, *  <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientDataSource40.java,43, *  <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientDataSource40.java,44, * </UL>
java/client/org/apache/derby/jdbc/ClientDriver.java,38,
java/client/org/apache/derby/jdbc/ClientXADataSource.java,31, * <p>
java/client/org/apache/derby/jdbc/ClientXADataSource.java,32, * This is Derby's network XADataSource for use with JDBC 3.0 and JDBC 4.0.
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,31, * <p>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,32, * This is Derby's network XADataSource for use with JDBC 4.1.
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,33, * </p>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,38, * Use ClientXADataSource40 if your application runs at JDBC level 4.1 (or
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,39, * higher). Use ClientXADataSource
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,40, * if your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,41, * <UL>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,42, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,43, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,44, * </UL>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,45, *
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,28, EmbeddedConnectionPoolDataSource is Derby's ConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,29, implementation for JDBC 3.0 and JDBC 4.0.
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,28, EmbeddedConnectionPoolDataSource40 is Derby's ConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,29,    implementation for JDBC 4.1 (and higher) environments.
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,30,
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,35, <P>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,36,    Use EmbeddedConnectionPoolDataSource40 if your application runs at JDBC
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,37,    level 4.1 (or higher).
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,38, Use
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,39, EmbeddedConnectionPoolDataSource if your application runs in the
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,40, following environments:
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,41, <UL>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,42,    <LI> JDBC 3.0 - J2SE 5.0 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,43,    <LI> JDBC 4.0 - Java SE 6 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,44, </UL>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,33,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,34,    EmbeddedDataSource is Derby's DataSource implementation for JDBC 3.0
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,35,    and JDBC 4.0.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,30, EmbeddedDataSource40 is Derby's DataSource implementation for JDBC 4.1.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,36,    Use EmbeddedDataSource40 if your application runs at JDBC level 4.1
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,37,    (or higher).
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,38, Use EmbeddedDataSource
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,39, if your application is runs in one of the following older
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,40, environments:
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,41, <UL>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,42,    <LI> JDBC 3.0 - J2SE 5.0 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,43,    <LI> JDBC 4.0 - Java SE 6 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,44, </UL>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,45,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,46, <P>The following is a list of properties that can be set on a Derby
java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java,44, *
java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java,48, *
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,36,    EmbeddedXADataSource is Derby's XADataSource implementation for JDBC 3.0
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,37,    and JDBC 4.0.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,30,    EmbeddedXADataSource40 is Derby's XADataSource implementation for
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,31,    JDBC 4.1 (and higher).
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,32,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,33, <P>An XADataSource is a factory for XAConnection objects.  It represents a
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,34, RM in a DTP environment.  An object that implements the XADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,35, interface is typically registered with a JNDI service provider.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,36, <P>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,37,    Use EmbeddedXADataSource40 if your application runs at JDBC level 4.1
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,38,    (or higher).
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,41, <UL>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,42,    <LI> JDBC 3.0 - J2SE 5.0 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,43,    <LI> JDBC 4.0 - Java SE 6 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,44, </UL>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,46, <P>EmbeddedXADataSource40 object only works on a local database.  There is no
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,47, client/server support.  An EmbeddedXADataSource40 object must live in the same jvm as
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,48, the database.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,37," * If running on Java SE 7 og higher, consider a more capable data source."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,32," * running on full Java SE 7, corresponding to JDBC 4.1."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,33, * <p/>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,34," * Use ClientConnectionPoolDataSource, instead, if your application"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,35," * runs under JDBC 4.0 or JDBC 3.0, that is, on the following Java"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,36, * Virtual Machines:
java/client/org/apache/derby/jdbc/ClientDataSource.java,27," * If running on Java SE 7 og higher, consider a more capable data source."
java/client/org/apache/derby/jdbc/ClientDataSource40.java,32," * running on full Java SE 7, corresponding to JDBC 4.1."
java/client/org/apache/derby/jdbc/ClientDataSource40.java,33, * <p/>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,34," * Use the corresponding ClientDataSource,"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,35," * ClientConnectionPoolDataSource, and ClientXADataSource classes if"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,36, * your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientXADataSource.java,33," * If running on Java SE 7 og higher, consider a more capable data source."
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,32," * running on full Java SE 7, corresponding to JDBC 4.1."
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,33, * <p/>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,34, * Use ClientXADataSource if your application runs in the following
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,35, * environments:
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,40, *
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,30,"    If running on Java SE 7 og higher, consider a more capable data source."
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,29,"    running on full Java SE 7, corresponding to JDBC 4.1."
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,31,    Use EmbeddedConnectionPoolDataSource if your application runs in
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,32,    the following environments:
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,35,"    If running on Java SE 7 og higher, consider a more capable data source."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,31,"    running on full Java SE 7, corresponding to JDBC 4.1."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,32,    <p/>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,33,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,34,    Use EmbeddedDataSource if your application is runs in one of the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,35,    following older environments:
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,36,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,38,"    If running on Java SE 7 og higher, consider a more capable data source."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,31,"    running on full Java SE 7, corresponding to JDBC 4.1."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,33, Use EmbeddedXADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,34, if your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,35, *   <li>JDBC 4.1 - Java SE 7
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,36, *   <li>JDBC 4.2 - full Java SE 8
java/client/org/apache/derby/jdbc/ClientDataSource40.java,35, *   <li>JDBC 4.1 - Java SE 7
java/client/org/apache/derby/jdbc/ClientDataSource40.java,36, *   <li>JDBC 4.2 - full Java SE 8
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,35, *   <li>JDBC 4.1 - Java SE 7
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,36, *   <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,32,      <li>JDBC 4.1 - Java SE 7
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,33,      <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,34,      <li>JDBC 4.1 - Java SE 7
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,35,      <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,34,      <li>JDBC 4.1 - Java SE 7
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,35,      <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/iapi/types/SQLDouble.java,445,  setValue(bigDecimal.doubleValue());
java/engine/org/apache/derby/iapi/types/SQLDouble.java,446,
java/engine/org/apache/derby/iapi/types/SQLReal.java,401,  // infinity values which should throw an exception in setValue(double).
java/engine/org/apache/derby/iapi/types/SQLReal.java,402,  setValue(bigDecimal.floatValue());
java/engine/org/apache/derby/iapi/types/SQLReal.java,403,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4761,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4762,        // Uncomment when DERBY-5546 is fixed:
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4763,"        // assertUpdateState(rs, ""F04"", bdSmallestPosDoubleValue, ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4764,"        // assertUpdateState(rs, ""F04"", bdSmallestNegDoubleValue, ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4765,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4805,            //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4806,            // Uncomment when DERBY-5546 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4807,"            // assertUpdateState(rs, dfCols[i],"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4808,"            //     bdSmallestPosDoubleValue.divide(BigDecimal.TEN), ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4809,"            // assertUpdateState(rs, dfCols[i],"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4810,"            //     bdSmallestNegDoubleValue.divide(BigDecimal.TEN), ""22003"");"
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,119,  return referencedColumnNames;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,101,  this.baseColumnPositions = baseColumnPositions;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,102,  this.isAscending = isAscending;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,130,  return baseColumnPositions;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,185,  return isAscending;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,191,  this.baseColumnPositions = baseColumnPositions;
java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java,197,  this.isAscending = isAscending;
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,83,  this.referencedColumns = referencedColumns;
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,97,  this.referencedColumns = referencedColumns;
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,98,  this.referencedColumnsInTriggerAction = referencedColumnsInTriggerAction;
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,110,  return referencedColumns;
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,118,  return referencedColumnsInTriggerAction;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,175,  this.parameterNames = parameterNames;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,176,  this.parameterTypes = parameterTypes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,177,  this.parameterModes = parameterModes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,235, public TypeDescriptor[] getParameterTypes() {
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,236,  return parameterTypes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,239, public int[] getParameterModes() {
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,240,  return parameterModes;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,241, }
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,248, public String[] getParameterNames() {
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,249,  return parameterNames;
java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java,250, }
java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java,89,        _columnNames = columnNames;
java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java,90,        _types = types;
java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java,110,    public  String[]    getColumnNames()    { return _columnNames; }
java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java,113,    public  TypeDescriptor[]    getTypes() { return _types; }
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,32,  formatId streams.
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1681,        String[] columnNames = originalMultiSet.getColumnNames();
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,41, /**
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,42,"  * Tell whether sorting is required for this RequiredRowOrdering,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,43,  * given a RowOrdering.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,44,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,45,  * @param rowOrdering The order of rows in question
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,46,  * @param optimizableList The current join order being considered by
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,47,  *    the optimizer. We need to look into this to determine if the outer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,48,  *    optimizables are single row resultset if the order by column is
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,49,  *    on an inner optimizable and that inner optimizable is not a one
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,50,  *    row resultset. DERBY-3926
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,51,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,52,"  * @return SORT_REQUIRED if sorting is required,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,53,  *   ELIMINATE_DUPS if no sorting is required but duplicates
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,54,  *       must be eliminated (i.e. the rows are in
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,55,"  *       the right order but there may be duplicates),"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,56,  *   NOTHING_REQUIRED is no operation is required
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,57,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,58,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,59,  */
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,60," int sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList)"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,61, throws StandardException;
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,63, /**
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,64,"  * Tell whether sorting is required for this RequiredRowOrdering,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,65,"  * given a RowOrdering representing a partial join order, and"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,66,  * a bit map telling what tables are represented in the join order.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,67,  * This is useful for reducing the number of cases the optimizer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,68,  * has to consider.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,69,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,70,  * @param rowOrdering The order of rows in the partial join order
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,71,  * @param tableMap  A bit map of the tables in the partial join order
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,72,  * @param optimizableList The current join order being considered by
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,73,  *    the optimizer. We need to look into this to determine if the outer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,74,  *    optimizables are single row resultset if the order by column is
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,75,  *    on an inner optimizable and that inner optimizable is not a one
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,76,  *    row resultset. DERBY-3926
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,77,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,78,"  * @return SORT_REQUIRED if sorting is required,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,79,  *   ELIMINATE_DUPS if no sorting is required by duplicates
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,80,  *       must be eliminated (i.e. the rows are in
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,81,"  *       the right order but there may be duplicates),"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,82,  *   NOTHING_REQUIRED is no operation is required
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,83,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,84,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,85,  */
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,86," int sortRequired(RowOrdering rowOrdering, JBitSet tableMap,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,87,   OptimizableList optimizableList)
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,88,   throws StandardException;
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,459,"    ""referencedColumns: "" + referencedColumns + ""\n"" +"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,85,  */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,142," // when we ""pull"" it.  If the latest complete join order was the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1768,"       bestRowOrdering, optimizableList) =="
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1769,        RequiredRowOrdering.NOTHING_REQUIRED)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2211,"              assignedTableMap,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2212,              optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2340,"              assignedTableMap,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2341,              optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,428, /**
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,429,  * @see RequiredRowOrdering#sortRequired
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,430,  *
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,431,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,432,  */
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,433," public int sortRequired(RowOrdering rowOrdering,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,434,   OptimizableList optimizableList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,435, {
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,436,"  return sortRequired(rowOrdering, (JBitSet) null, optimizableList);"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,437, }
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,439, /**
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,440,  * @see RequiredRowOrdering#sortRequired
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,441,  *
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,442,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,443,  */
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,444," public int sortRequired(RowOrdering rowOrdering,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,445,"   JBitSet tableMap,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,446,   OptimizableList optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,447,    throws StandardException
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,448, {
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,577,     for (int i=0; i < optimizableList.size(); i++)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,579,      //Get one outer optimizable at a time from the join
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,580,      //order
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,581,      Optimizable considerOptimizable =
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,582,       optimizableList.getOptimizable(i);
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,583,      //If we have come across the optimizable for the order
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,584,"      //by column in the join order, then we do not need to"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,585,      //look at the inner optimizables in the join order. As
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,586,"      //long as the outer optimizables are one row resultset,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,587,      //we are fine to consider sort avoidance.
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,336,  if (actionSPS == null)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,337,  {
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,344,   actionSPS = getDataDictionary().getSPSDescriptor(actionSPSId);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,347,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,366,  DataDictionary dd = getDataDictionary();
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,372,  if((!actionSPS.isValid() ||
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,373,     (actionSPS.getPreparedStatement() == null)) &&
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,378,"                    dd.getSchemaDescriptor(actionSPS.getCompSchemaId(), null));"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,380,   Visitable stmtnode = pa.parseStatement(triggerDefinition);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,382,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,383,"            actionSPS.setText(dd.getTriggerActionString(stmtnode,"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,386,"     triggerDefinition,"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,392,     false
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,393,     ));
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,397,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,398,  return actionSPS;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,427, public SPSDescriptor getWhenClauseSPS()
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,430,        if (whenSPSId != null && whenSPS == null)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,431,  {
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,432,   whenSPS = getDataDictionary().getSPSDescriptor(whenSPSId);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,433,  }
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,434,  return whenSPS;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1867,            SPSDescriptor sps = isWhenClause ? trd.getWhenClauseSPS()
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,110,   whenClause = triggerd.getWhenClauseSPS();
java/client/org/apache/derby/client/am/ClientResultSet.java,2723,                if (rows < 0 || (maxRows_ != 0 && rows > maxRows_)) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2295,  *                rows <= this.getMaxRows() is not satisfied.
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,2299,  if (rows < 0 || (stmt.getMaxRows() != 0 && rows > stmt.getMaxRows())) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java,199,        // exception conditions
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java,201,        try{
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java,202,            rs.setFetchSize(100);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java,203,        } catch(SQLException e){
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java,204,"            assertSQLState(""XJ062"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java,205,        }
java/client/org/apache/derby/client/net/Request.java,44,import org.apache.derby.iapi.error.ExceptionUtil;
java/client/org/apache/derby/client/net/Request.java,45,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,226,  if (numTablesInQuery > 6)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,227,  {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,228,   permuteState = READY_TO_JUMP;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,229,   firstLookOrder = new int[numOptimizables];
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,230,  }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,231,  else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,232,   permuteState = NO_JUMP;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,388, }
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java,112,        mainLoader = java.lang.Thread.currentThread().getContextClassLoader();
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java,130,"     * Given a loaded class, this"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java,131,     * routine asks the class's class loader for information about where the
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java,132,"     * class was loaded from. Typically, this is a file, which might be"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java,133,"     * either a class file or a jar file. The routine figures that out, and"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java,134,"     * returns the name of the file. If it can't figure it out, it returns null"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java,205,        // now attemp to boot using another class loader.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,541,   //then it means that the trigger is defined at the row level
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,542,   //and a set of trigger columns are specified in the CREATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,543,   //TRIGGER statement. This can only happen for an UPDATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,544,   //trigger.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,743,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,744,"            // If we are dealing with statement trigger, then we will read"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,745,            // all the columns from the trigger table since trigger will be
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,746,            // fired for any of the columns in the trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,747,            int numberOfColsInTriggerTable =
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,748,                    triggerTableDescriptor.getNumberOfColumns();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,749,            referencedColInts = new int[numberOfColsInTriggerTable];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,750,            for (int j = 0; j < numberOfColsInTriggerTable; j++) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,751,                referencedColInts[j] = j + 1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,752,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,136,    public void testDerby6383StatementTriggerBug() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,157,"            ""INSERT INTO DERBY_6368_TAB2 values(old_row.x, old_row.y)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,169,        //drop statement trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,172,        //Following should not fire any trigger since following UPDATE is on
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,173,"        // column ""Y"" whereas trigger is defined on column ""X"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,175,"        assertTableRowCount(""DERBY_6368_TAB2"", 2);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,177,        //Following should fire trigger since following UPDATE is on
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,180,"        assertTableRowCount(""DERBY_6368_TAB2"", 3);"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,776,"   ** We are only dependent on the underlying table, and our spses and"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,937,           newReferencingName
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,37,import org.apache.derby.iapi.types.DataValueFactory;
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,38,
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,40,
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,41,import org.apache.derby.iapi.sql.execute.ExecutionFactory;
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,48,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,49,
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,141,  String    newReferencingName
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,1028,  String    newReferencingName
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,1036,"    referencingOld, referencingNew, oldReferencingName, newReferencingName);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1597,"                ""renc_5 (c6) values (1)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1604,"        // This succeeds, because the trigger is not dependent on"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1605,        // renc_5.c6. DERBY-2041 requests that triggers should be
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1606,        // marked as dependent on tables and columns in their body.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1607,"        // If that improvement is made, this test will need to be"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1608,"        // changed, as the next rename would fail, and the insert"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1609,        // after it would then succeed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1610,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1611,        st.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1614,"        // The update statement will fail, because column c6 no"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1615,        // longer exists. See DERBY-2041 for a discussion of this
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1616,        // topic.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1617,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1621,        assertStatementError(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1622,"                ""42X14"", st, ""update renc_4 set c6 = 92"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1625,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1628,"                    ""C2"", ""C3"", ""C4"", ""UNQ_C5"", ""NEW_NAME"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1630,"        JDBC.assertDrainResults(rs,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1631,                0);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1841,        //Following trigger will add 5 rows to sysdepends. Trigger creation
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1850,"          numberOfRowsInSysdepends(st),sysdependsRowCountBeforeTestStart+5);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1852,        //Following trigger will add 5 rows to sysdepends. Trigger creation
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1862,"          numberOfRowsInSysdepends(st),sysdependsRowCountBeforeTestStart+10);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1869,"          numberOfRowsInSysdepends(st),sysdependsRowCountBeforeTestStart+10);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1876,"          numberOfRowsInSysdepends(st),sysdependsRowCountBeforeTestStart+10);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1890,"          numberOfRowsInSysdepends(st),sysdependsRowCountBeforeTestStart+5);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1895,"          numberOfRowsInSysdepends(st),sysdependsRowCountBeforeTestStart+5);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2731,"        st.executeUpdate(""drop table ATDC_13_TAB1_BACKUP"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,213,        // this should work
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,214,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,215,"        st.executeUpdate( ""drop table t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,216,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,217,        // the following should get an error when trying to
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,218,        // recompile the trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,219,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DropTableTest.java,220,"        assertStatementError(""42X05"", st, ""insert into t2 values(1)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4125,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5127,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6484,"        st.executeUpdate(""DROP TRIGGER MAMTA2.TR21T21TRIGGERTEST"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9958,"        st.executeUpdate(""DROP FUNCTION USER1.F_ABS1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9959,"        st.executeUpdate(""DROP FUNCTION USER1.F_ABS2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,60,        //--- check that trigger firing and database event fail if the procedure referred
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,61,        //--- in the triggered sql statement is dropped
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,62,"        s.execute(""drop procedure proc_no_sql"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,63,"        assertStatementError(""42Y03"",s,""insert into t2 values (1,2), (2,4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,64,"        //--- after recreating the procedure, the trigger should work"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,65,"        s.execute(""create procedure proc_no_sql() parameter style java language java NO SQL external name 'org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.zeroArg'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,84,        //--- check that trigger firing and database event fail if the procedure referred
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,85,        //--- in the triggered sql statement is dropped
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,86,"        s.execute(""drop procedure proc_no_sql"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,87,        // --- should fail
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,88,"        assertStatementError(""42Y03"",s,""insert into t2 values (1,2), (2,4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,89,"        //after recreating the procedure, the trigger should work"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,90,"        s.execute(""create procedure proc_no_sql() parameter style java language java NO SQL external name 'org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.zeroArg'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java,205,"        s.executeUpdate(""rename table t6 to t6r"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java,206,"        assertStatementError(""42X05"", s, ""insert into t7 values(3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java,207,"        rs = s.executeQuery(""select * from t6r"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java,210,"        s.executeUpdate(""drop table t6r"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesConferredPrivilegesTest.java,1606,"        s.execute(""drop table trackCreds"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,786,     * @throws IOException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,530,"        // Because of DERBY-2041, dropping the whole table silently succeeds"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,531,        // and leaves the trigger around. It should have caused a warning and
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,532,        // dropped the trigger.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,533,"        s.execute(""drop table t2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,536,"        // The trigger wasn't dropped, but it is now invalid and causes the"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,537,        // triggering insert to fail.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,538,"        assertStatementError(TABLE_DOES_NOT_EXIST, s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,539,"                ""insert into t1 values (1, 2, 3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,553,"        // Again, because of DERBY-2041, DROP TABLE fails to cascade and"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,554,        // drop the trigger.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,555,"        s.execute(""drop table t2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,723,        c1.setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerWhenClauseTest.java,724,"        JDBC.dropSchema(c1.getMetaData(), ""U1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,680,"        dropTable(""BKUP1_5044_5120"");"
java/testing/org/apache/derbyTesting/junit/JDBC.java,303,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,115,        deleteStreamFiles();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,583,"        assertTrue(""File "" + derby0log + "" could not be deleted"", deleted);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,605,"        methodStreamFile = new File(systemHome, makeStreamFilename(""method""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,606,"        fileStreamFile = new File(systemHome, makeStreamFilename(""file""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,607,"        fieldStreamFile = new File(systemHome, makeStreamFilename(""field""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,608,"        errStreamFile = new File(systemHome, makeStreamFilename(""err""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,42,import org.apache.derbyTesting.junit.Utilities;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,390,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,474,        // This will generate enough output to roll through all 10 log files
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,501,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,817,                String failPath = PrivilegedFileOpsForTests.getAbsolutePath(getFailureFolder());
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,818,                // Copy the logfiles dir
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,819,"                File origLogFilesDir = new File(DEFAULT_DB_DIR, LOGFILESDIR);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,820,"                File newLogFilesDir = new File (failPath, LOGFILESDIR);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,821,"                PrivilegedFileOpsForTests.copy(origLogFilesDir,newLogFilesDir);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,823,                removeDirectory(origLogFilesDir);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1877,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1878,"        assertEquals(""RSMD.getCatalogName"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1879,"                rsmdt.getCatalogName(col), rs.getString(""TABLE_CAT""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1880,"        assertEquals(""RSMD.getSchemaName"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1881,"                rsmdt.getSchemaName(col), rs.getString(""TABLE_SCHEM""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1882,"        assertEquals(""RSMD.getTableName"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1883,"                rsmdt.getTableName(col), rs.getString(""TABLE_NAME""));"
java/tools/org/apache/derby/impl/tools/dblook/DB_Trigger.java,62,"                ""SELECT * FROM SYS.SYSTRIGGERS WHERE STATE != 'D'"");"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2668,    //   SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,2691,            // SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3070,    // SQLCNRDB; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3159,    // SQLDCXRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3163,    // SQLDCXRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3168,    // SQLDCXCRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3171,    // SQLDCXCRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3175,    // SQLDCXRRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3178,    // SQLDCXRRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3182,    // SQLDCXTRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3185,    // SQLDCXTRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionRequest.java,498,"                NetConfiguration.PKG_IDENTIFIER_MAX_LEN,   //maximum RDBNAM length in bytes"
java/client/org/apache/derby/client/net/NetCursor.java,667,    //   SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetCursor.java,687,        // SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetCursor.java,784,    // SQLDCRDB; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetPackageRequest.java,65,"                maxIdentifierLength,"
java/client/org/apache/derby/client/net/NetStatementReply.java,1603,        } else if ((ddmLength >= 71) && (ddmLength <= 781)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1611,            if (scldtaLen < 18 || scldtaLen > 255) {
java/client/org/apache/derby/client/net/NetStatementReply.java,2113,    //   SQLXRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2141,        //   SQLXRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2209,    //   SQLDRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2236,        //   SQLDRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/drda/org/apache/derby/impl/drda/CodePoint.java,755,"    static final int RDBNAM_LEN = 18; //dbname fixed length for SQLAM level 6, for level 7,"
java/drda/org/apache/derby/impl/drda/CodePoint.java,756,                                      //limit is MAX_NAME (255)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,3015,                rdbName.length > CodePoint.MAX_NAME) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5735,            if (length < CodePoint.RDBNAM_LEN || length > CodePoint.MAX_NAME) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6607,     *   SQLRDBNAME; DRDA TYPE VCS; ENVLID 0x32; Length Override 255
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8228,        //   SQLXRDBNAM; DRDA TYPE VCS; ENVLID 0x32; Length Override 255
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,72,        // ensuring that we get a connection.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,73,        getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,74,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,76,         * Sun's 1.4.2 JVM and IBM's JVM (any version) fail on Windows for this test
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,77,"         * Thus, we skip it."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,78,         *
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,79,         * Read JIRA's DERBY-4836 for more information.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,81,"        if (getSystemProperty(""os.name"").startsWith(""Windows"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,82,            /* Skip with 1.4.2 jvms */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,83,"            if (getSystemProperty(""java.version"").startsWith(""1.4.2"")) return;"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,84,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,85,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,86,        // Maximum length in bytes is 255. We subtract 14 to account for
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,87,        // ;create=true and ;shutdown=true
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,88,        int maxNameLength = 255 - 14;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,89,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,90,        /**
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,91,         * \u0041 is the letter 'A' (1 byte)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,92,         * \u00e7 is the letter 'c' with a cedilla (2 bytes)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,93,         * \u4310 is a Chinese character (3 bytes)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,94,         * \u1f030 is a domino tile (4 bytes)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,95,         */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,96,"        String[] testCharacters = {""\u0041"", ""\u00e7"", ""\u4e10"", ""\u1f030""};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,97,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,98,        for (int ch=0; ch<testCharacters.length; ch++) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,99,            StringBuffer dbName = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,100,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,101,            /* max length in bytes divided by length of 1 chinese char */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,102,"            int maxChars = maxNameLength / testCharacters[ch].getBytes(""UTF-8"").length;"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,103,            for(int i=0; i<maxChars; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,104,                dbName.append(testCharacters[ch]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,105,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,106,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,107,            /* This time it should work as we're right at the limit */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,108,            String url = TestConfiguration
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,109,"                    .getCurrent().getJDBCUrl(dbName.toString()+ "";create=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,110,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,111,            Connection conn = DriverManager.getConnection(url);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,112,            conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,114,            /* Add the database name for cleanup on tearDown() */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,115,            databasesForCleanup.add(dbName.toString());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,116,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,117,            /* Append three more characters to make it fail */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,118,            for (int i = 0; i < 3; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,119,                dbName.append(testCharacters[ch]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,120,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,122,            url = TestConfiguration
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,123,"                    .getCurrent().getJDBCUrl(dbName.toString()+ "";create=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,125,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,129,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,130,"                assertSQLState(""08001"", e); /* Check if it failed */"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,138, boolean compilingStatement;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,838,   compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,873,   synchronized (this) {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,874,    compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,875,    notifyAll();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,876,   }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,269,    if (!preparedStmt.compilingStatement) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,280,   preparedStmt.compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,281,   preparedStmt.setActivationClass(null);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,636,   synchronized (preparedStmt) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,637,    preparedStmt.compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,638,    preparedStmt.notifyAll();
java/engine/org/apache/derby/impl/sql/GenericStatement.java,639,   }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,90,"        String dbUrl1024bytes = ""memory:dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;create=true"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,93,"        String dbUrl1025bytes = ""memory:dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;create=true"";"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,216,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,217,  {
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,218,"   SanityManager.ASSERT(dummySubqueryList.size() == 0,"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,219,"    ""dummySubqueryList.size() is expected to be 0"");"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,220,  }
java/shared/org/apache/derby/shared/common/reference/SQLState.java,985,"     String LANG_AGGREGATE_IN_GROUPBY_LIST                              = ""42Y26"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,373,  st.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,32,import java.net.URLClassLoader;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,75,    public static Test suite()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,120,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,121,"                   new DatabaseClassLoadingTest(""testDatabaseInClasspath"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,641,"    public void testDatabaseInClasspath() throws SQLException, MalformedURLException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,645,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,646,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,647,            ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,648,"            fail(""opened database before it was on classpath"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,649,        } catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,650,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,651,"           assertSQLState(""XJ004"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,652,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,653,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,654,"        URL jarURL = SupportFilesSetup.getReadOnlyURL(""dclt.jar"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,655,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,656,        // DERBY-2179 - temp disable using the class loader
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,657,        // (since due to DERBY-2162) it's not working anyway)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,658,        // need to re-write code not to assume there is no
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,659,        // existing thread context loader.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,660,        //setContextClassLoader(jarURL);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,661,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,662,"            // Disabled due to DERBY-2162, running this opens"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,663,            // the database thus accessing resources and means the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,664,            // jar file cannot be cleaned up.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,665,            // readOnlyTest(ds);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,666,        } finally {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,667,            //setContextClassLoader(null);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,668,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1334,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1335,    private static void setContextClassLoader(final URL url)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1336,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1337,        AccessController.doPrivileged
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1338,        (new java.security.PrivilegedAction<Void>() {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1339,            public Void run()  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1340,                URLClassLoader cl =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1341,                    url == null ? null : new URLClassLoader(new URL[] {url});
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1342,                java.lang.Thread.currentThread().setContextClassLoader(cl);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1343,              return null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1344,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1345,        });
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1346,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,30,public class FullCollationTests extends CollationTest {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,31,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,32,    public FullCollationTests(String name) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,33,        super(name);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,34,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,35,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,37,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,42,    public static Test suite()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,354,    public static Test suite()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,360,        // Not run on windows until DERBY-5618 is addressed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,361,        // Also not run on small devices because encryption is not supported there
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,362,        // by default.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,364,        if ( !onWindows() && !JDBC.vmSupportsJSR169() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,383,    private static  boolean onWindows()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,384,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,385,"        return getSystemProperty(""os.name"").startsWith(""Windows"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,393,    private static  Test   allConfigurations( boolean clientServer )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,445,        // For testing subprotocols. Cleanup of support files is blocked by DERBY-5618.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,447,        if ( !onWindows() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,484,        }   // end if !onWindows()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,496,    private Test    decorate( boolean clientServer )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,537,        // For testing subprotocols. Cleanup of support files is blocked by DERBY-5618.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,539,        if ( !onWindows() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,541,            // Add the jar files needed for testing jar and classpath subprotocols.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,542,"            result = new SupportFilesSetup( result, SUPPORT_FILES_SOURCE, null, SUPPORT_FILES_TARGET, null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,543,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,544,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,546,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,547,            File        currentDirectory = currentDirectory();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,548,"            File        readOnlyDirectory = new File( currentDirectory, SupportFilesSetup.EXTIN );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,549,"            File        nast2Jar = new File( readOnlyDirectory, NAST2_JAR_FILE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,551,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,552,"                result = new ClasspathSetup( result, nast2Jar.toURI().toURL() );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,553,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,554,            catch (Exception e) { printStackTrace( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,869,        // Vet databases accessed via subprotocols. Not run on Windows machines
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,870,        // because of DERBY-5618.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,874,        if ( !onWindows() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,52, public static Test suite() {
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,64,"    public  ClasspathSetup( Test test, URL resource )  throws Exception"
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,87,"                     URLClassLoader newClassLoader = new URLClassLoader( new URL[] { _resource }, _originalClassLoader );"
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,89,                     Thread.currentThread().setContextClassLoader( newClassLoader );
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,97,    protected void tearDown()
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,101,             new PrivilegedAction<Void>()
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,103,                 public Void run()
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,106,
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,111,    }
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,113,}
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,501,         // the dependency between trigger action sps and trigger table
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,507,"            s.execute(""update ATDC_TAB1 set c12=11"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,512,"                s.execute(""update ATDC_TAB1 set c12=11"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,514,"                assertStatementError(""42802"", s, "" update ATDC_TAB1 set c12=11"");"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,24,import java.sql.Types;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,112, /**
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,113,     * Find a type to which we can cast the untyped NULLs generated by
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,114,     * the parser (for clauses such as ELSE NULL). This does not have to
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,115,     * be the type that the CASE expression ends up returning. It is
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,116,     * enough that it is a type that can be converted into the type of the
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,117,     * CASE expression in order to keep the type checking in the compiler
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,118,     * happy.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,119,  *
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,120,  * @param fromList        The fromList (required for Column References).
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,121,  *
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,122,  * @exception             StandardException Thrown on error.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,123,  */
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,124,    private DataTypeDescriptor findType(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,125,"        FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,126,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,127, {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,128,"  /* We need to ""prebind"" because we want the Types.  Provide"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,129,   * dummy SubqueryList and AggreateList (we don't care)
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,130,   */
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,131,"        thenElseList.bindExpression(fromList, subqueryList, aggregates);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,132,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,133,        // Find the first typed expression.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,134,        DataTypeDescriptor dtd = thenElseList.getTypeServices();
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,135,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,136,        if (dtd == null) {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,137,"            // If none of the expressions have a type, we should probably have"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,138,"            // raised an error (DERBY-2002). However, Derby has always used the"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,139,"            // type CHAR(1) in this case, so return that for now."
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,140,            dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,141,"                                                            Types.CHAR, 1);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,142,        }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,143,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,144,        return dtd;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,145, }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,146,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,162,  // Don't do anything if we couldn't find a castType.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,163,  if (castType == null) return;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,164,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,234,"        // Following call to ""findType()""  and ""recastNullNodes"" will"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,235,"        // indirectly bind the expressions in the thenElseList, so no need"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,236,"        // to call ""thenElseList.bindExpression(...)"" after we do this."
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,237,        // DERBY-2986.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,238,"        recastNullNodes(findType(fromList, subqueryList, aggregates),"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,239,"                        fromList, subqueryList, aggregates);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,260,  /* We can't determine the type for the result expression if
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,261,   * all result expressions are ?s.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,262,   */
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,263,  if (thenElseList.containsAllParameterNodes())
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,264,  {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,265,"   throw StandardException.newException(SQLState.LANG_ALL_RESULT_EXPRESSIONS_PARAMS, ""conditional"");"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,266,  }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,267,
java/shared/org/apache/derby/shared/common/reference/SQLState.java,924," String LANG_ALL_RESULT_EXPRESSIONS_PARAMS                          = ""42X87"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,521,"        // When all branches specify NULL, then Derby currently returns NULL"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,522,        // with type CHAR(1). It should have raised an error according to the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,523,        // SQL standard. See DERBY-2002.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,524,        String[] allNull = {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,527,"            ""values case when true then null when false then null else null end"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,529,        for (String sql : allNull) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,530,"            JDBC.assertSingleValueResultSet(s.executeQuery(sql), null);"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,43,"  setName(JDBC.vmSupportsJSR169() + ""_vmSupportsJSR169()"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,46,"  setName(JDBC.vmSupportsJDBC3() + ""_vmSupportsJDBC3()"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,47, }
java/testing/org/apache/derbyTesting/junit/EnvTest.java,48, public void testJDBC4() {
java/testing/org/apache/derbyTesting/junit/EnvTest.java,49,"  setName(JDBC.vmSupportsJDBC4() + ""_vmSupportsJDBC4()"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,56,"  setName(Derby.hasServer() + ""_hasServer"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,59,"  setName(Derby.hasClient() + ""_hasClient"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,62,"  setName(Derby.hasEmbedded() + ""_hasEmbedded"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,65,"  setName(Derby.hasTools() + ""_hasTools"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,71,"        setName(XML.classpathHasJAXP() + ""_classpathHasJAXP"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,74,"        setName(XML.classpathMeetsXMLReqs() + ""_classpathMeetsXMLReqs"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,404,"        dropTable(""ATDC_BKUP1"");"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,26,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,236,  lcc.popTriggerExecutionContext(this);
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,242,  for (Enumeration<java.sql.ResultSet> e = resultSetVector.elements();
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,243,    e.hasMoreElements(); )
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,244,  {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,245,   java.sql.ResultSet rs = e.nextElement();
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,246,   try
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,247,   {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,248,    rs.close();
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,249,   } catch (SQLException se) {}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,56,"        props.setProperty(""derby.language.stalePlanCheckInterval"", ""10"");"
java/tools/org/apache/derby/iapi/tools/run.java,29,import org.apache.derby.tools.SignatureChecker;
java/tools/org/apache/derby/iapi/tools/run.java,30,import org.apache.derby.iapi.tools.i18n.LocalizedResource;
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,115,"        ""    <p> <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\"">db-derby-{0}-bin.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,116,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\"">db-derby-{0}-bin.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,118,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\"">db-derby-{0}-lib.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,119,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\"">db-derby-{0}-lib.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,124,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\"">db-derby-{0}-src.zip</a>  [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,125,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\"">db-derby-{0}-src.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.md5\"">MD5</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n"";"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,115,"        ""    <p> <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\"">db-derby-{0}-bin.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,116,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\"">db-derby-{0}-bin.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,118,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\"">db-derby-{0}-lib.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,119,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\"">db-derby-{0}-lib.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,124,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\"">db-derby-{0}-src.zip</a>  [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,125,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\"">db-derby-{0}-src.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.sha-512\"">SHA-512</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n"";"

File,LineNumber,src
src/main/org/codehaus/groovy/ant/Groovyc.java,661,"                    } else if (key.indexOf(""nowarn"") != -1) {"
src/main/org/codehaus/groovy/ant/Groovyc.java,662,"                        jointOptions.add(""-Fnowarn"" + e.getValue());"
src/main/org/codehaus/groovy/ant/Groovyc.java,673,"                        jointOptions.add(""-J"" + key + ""="" + e.getValue());"
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,337,"        public final Object call(Object receiver, Object[] args) {"
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,338,"            return defaultCall(receiver, args);"
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,339,        }
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,340,
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,348,
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,349,"        public final Object callStatic(Object receiver, Object[] args) {"
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,350,"            return defaultCallStatic(receiver, args);"
src/main/org/codehaus/groovy/runtime/callsite/CallSite.java,351,        }
src/main/org/codehaus/groovy/runtime/callsite/StaticMetaMethodSite.java,52,"          return defaultCallStatic(receiver, args);"
src/test/org/codehaus/groovy/classgen/JO.java,23,"        ASMifierClassVisitor.main(new String[]{""target/test-classes/spectralnorm.class""});"
src/main/org/codehaus/groovy/classgen/Verifier.java,794,        if (!mr.isDerivedFrom(testmr)) {
src/main/org/codehaus/groovy/classgen/Verifier.java,852,
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,46,"        t = traverse((GroovySourceAST)t,l,null);"
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,52,"        t = traverse((GroovySourceAST)t,null,itr);"
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,64,        if (t == null) { return t; }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,66,        // first visit of node
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,67,        if (l != null) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,68,"            l.add(new LineColumn(t.getLine(),t.getColumn()));"
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,69,        }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,71,        // second vist of node
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,72,        if (itr != null && itr.hasNext()) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,73,            LineColumn lc = (LineColumn)itr.next();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,74,            if (t.getLineLast() == 0) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,75,                int nextLine = lc.getLine();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,76,                int nextColumn = lc.getColumn();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,77,                if (nextLine < t.getLine() || (nextLine == t.getLine() && nextColumn < t.getColumn())) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,78,                    nextLine = t.getLine();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,79,                    nextColumn = t.getColumn();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,80,                }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,81,                t.setLineLast(nextLine);
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,82,                t.setColumnLast(nextColumn);
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,83,"                // This is a good point to call t.setSnippet(),"
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,84,                // but it bulks up the AST too much for production code.
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,85,            }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,86,        }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,88,        GroovySourceAST child = (GroovySourceAST)t.getFirstChild();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,89,        if (child != null) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,90,"            traverse(child,l,itr);"
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,91,        }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,92,
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,93,        GroovySourceAST sibling = (GroovySourceAST)t.getNextSibling();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,94,        if (sibling != null) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,95,"            traverse(sibling,l,itr);"
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,96,        }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,31,    private final SourceBuffer sourceBuffer;
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,33,    public AntlrASTProcessSnippets(SourceBuffer sourceBuffer) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,34,        this.sourceBuffer = sourceBuffer;
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,63,"    private AST traverse(GroovySourceAST t,List l,Iterator itr) {"
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,94,
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,95,        return t;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,93,        AntlrASTProcessor snippets = new AntlrASTProcessSnippets(sourceBuffer);
src/test/org/codehaus/groovy/antlr/treewalker/LineColumnTest.java,57,        AntlrASTProcessor snippets = new AntlrASTProcessSnippets(sourceBuffer);
src/main/org/codehaus/groovy/ast/ClassNode.java,512,     * IF a method with the given name and parameters is already defined then it is returned
src/main/org/codehaus/groovy/ast/ClassNode.java,515,     * be a method defined in a class and  so the default implementations should not be added
src/main/org/codehaus/groovy/ast/ClassNode.java,525,        // lets not add duplicate methods
src/main/org/codehaus/groovy/ast/ClassNode.java,718,        return implementsInterface(GroovyObject.class.getName());
src/main/org/codehaus/groovy/ast/ClassNode.java,722,     * @param name the fully qualified name of the interface
src/main/org/codehaus/groovy/ast/ClassNode.java,725,    public boolean implementsInterface(String name) {
src/main/org/codehaus/groovy/ast/ClassNode.java,728,            if (node.declaresInterface(name)) {
src/main/org/codehaus/groovy/ast/ClassNode.java,738,     * @param name the fully qualified name of the interface
src/main/org/codehaus/groovy/ast/ClassNode.java,741,    public boolean declaresInterface(String name) {
src/main/org/codehaus/groovy/ast/ClassNode.java,745,            if (interfaces[i].getName().equals(name)) {
src/main/org/codehaus/groovy/classgen/AnnotationVisitor.java,91,"        return node.implementsInterface(""java.lang.annotation.Annotation"");"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,247,                if (!classNode.declaresInterface(ClassHelper.GENERATED_CLOSURE_Type.getName())) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,703,"       } else if (type.implementsInterface(""java.lang.annotation.Annotation"")) {"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1393,        if (forceCast || (type != null && !expType.isDerivedFrom(type) && !expType.implementsInterface(type.getName()))) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1692,        if (isStaticMethod() && !classNode.declaresInterface(ClassHelper.GENERATED_CLOSURE_Type.getName())) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2476,        if (classNode.declaresInterface(ClassHelper.GENERATED_CLOSURE_Type.getName())) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3866,        if (rightHandType == null || !rightHandType.isDerivedFrom(type) || !rightHandType.implementsInterface(type.getName())) {
src/main/org/codehaus/groovy/classgen/Verifier.java,2, * Copyright 2003-2007 the original author or authors.
src/main/org/codehaus/groovy/classgen/Verifier.java,50, private ClassNode classNode;
src/main/org/codehaus/groovy/classgen/Verifier.java,147,        if (!node.isDerivedFromGroovyObject()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,148,            node.addInterface(ClassHelper.make(GroovyObject.class));
src/main/org/codehaus/groovy/classgen/Verifier.java,150,            PropertyNode metaClassProperty =
src/main/org/codehaus/groovy/classgen/Verifier.java,151,"                node.addProperty(""metaClass"", ACC_PUBLIC, ClassHelper.METACLASS_TYPE, new BytecodeExpression() {"
src/main/org/codehaus/groovy/classgen/Verifier.java,155,"                        mv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,""$getStaticMetaClass"",""()Lgroovy/lang/MetaClass;"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,156,"                        mv.visitFieldInsn(PUTFIELD, classInternalName,""metaClass"",""Lgroovy/lang/MetaClass;"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,158,"                        mv.visitFieldInsn(GETFIELD, classInternalName,""metaClass"",""Lgroovy/lang/MetaClass;"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,161,                    public ClassNode getType() {
src/main/org/codehaus/groovy/classgen/Verifier.java,162,                        return ClassHelper.METACLASS_TYPE;
src/main/org/codehaus/groovy/classgen/Verifier.java,163,                    }
src/main/org/codehaus/groovy/classgen/Verifier.java,164,"                }, null, null);"
src/main/org/codehaus/groovy/classgen/Verifier.java,165,            metaClassProperty.setSynthetic(true);
src/main/org/codehaus/groovy/classgen/Verifier.java,166,            FieldNode metaClassField = metaClassProperty.getField();
src/main/org/codehaus/groovy/classgen/Verifier.java,167,            metaClassField.setModifiers(metaClassField.getModifiers() | ACC_TRANSIENT);
src/main/org/codehaus/groovy/classgen/Verifier.java,168,
src/main/org/codehaus/groovy/classgen/Verifier.java,169,            List getMetaClassCode = new LinkedList();
src/main/org/codehaus/groovy/classgen/Verifier.java,170,            getMetaClassCode.add( new BytecodeInstruction(){
src/main/org/codehaus/groovy/classgen/Verifier.java,171,                public void visit(MethodVisitor mv) {
src/main/org/codehaus/groovy/classgen/Verifier.java,172,                    Label nullLabel = new Label();
src/main/org/codehaus/groovy/classgen/Verifier.java,173,
src/main/org/codehaus/groovy/classgen/Verifier.java,174,"                    mv.visitVarInsn(ALOAD, 0);"
src/main/org/codehaus/groovy/classgen/Verifier.java,175,"                    mv.visitFieldInsn(GETFIELD, classInternalName,""metaClass"",""Lgroovy/lang/MetaClass;"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,176,                    mv.visitInsn(DUP);
src/main/org/codehaus/groovy/classgen/Verifier.java,177,"                    mv.visitJumpInsn(IFNULL, nullLabel);"
src/main/org/codehaus/groovy/classgen/Verifier.java,178,                    mv.visitInsn(ARETURN);
src/main/org/codehaus/groovy/classgen/Verifier.java,179,
src/main/org/codehaus/groovy/classgen/Verifier.java,180,                    mv.visitLabel(nullLabel);
src/main/org/codehaus/groovy/classgen/Verifier.java,181,                    mv.visitInsn(POP);
src/main/org/codehaus/groovy/classgen/Verifier.java,182,"                    mv.visitVarInsn(ALOAD, 0);"
src/main/org/codehaus/groovy/classgen/Verifier.java,183,                    mv.visitInsn(DUP);
src/main/org/codehaus/groovy/classgen/Verifier.java,184,"                    mv.visitMethodInsn(INVOKEVIRTUAL,classInternalName,""$getStaticMetaClass"",""()Lgroovy/lang/MetaClass;"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,185,"                    mv.visitFieldInsn(PUTFIELD, classInternalName,""metaClass"",""Lgroovy/lang/MetaClass;"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,186,"                    mv.visitVarInsn(ALOAD, 0);"
src/main/org/codehaus/groovy/classgen/Verifier.java,187,"                    mv.visitFieldInsn(GETFIELD, classInternalName,""metaClass"",""Lgroovy/lang/MetaClass;"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,188,                    mv.visitInsn(ARETURN);
src/main/org/codehaus/groovy/classgen/Verifier.java,189,                }
src/main/org/codehaus/groovy/classgen/Verifier.java,190,            });
src/main/org/codehaus/groovy/classgen/Verifier.java,191,            node.addSyntheticMethod(
src/main/org/codehaus/groovy/classgen/Verifier.java,192,"                ""getMetaClass"","
src/main/org/codehaus/groovy/classgen/Verifier.java,193,"                ACC_PUBLIC,"
src/main/org/codehaus/groovy/classgen/Verifier.java,194,"                ClassHelper.make(MetaClass.class),"
src/main/org/codehaus/groovy/classgen/Verifier.java,195,"                Parameter.EMPTY_ARRAY,"
src/main/org/codehaus/groovy/classgen/Verifier.java,196,"                ClassNode.EMPTY_ARRAY,"
src/main/org/codehaus/groovy/classgen/Verifier.java,197,                new BytecodeSequence(getMetaClassCode)
src/main/org/codehaus/groovy/classgen/Verifier.java,198,            );
src/main/org/codehaus/groovy/classgen/Verifier.java,199,
src/main/org/codehaus/groovy/classgen/Verifier.java,200,            // @todo we should check if the base class implements the invokeMethod method
src/main/org/codehaus/groovy/classgen/Verifier.java,201,
src/main/org/codehaus/groovy/classgen/Verifier.java,202,            // let's add the invokeMethod implementation
src/main/org/codehaus/groovy/classgen/Verifier.java,203,            ClassNode superClass = node.getSuperClass();
src/main/org/codehaus/groovy/classgen/Verifier.java,204,            boolean addDelegateObject =
src/main/org/codehaus/groovy/classgen/Verifier.java,205,                (node instanceof InnerClassNode && superClass.equals(ClassHelper.CLOSURE_TYPE))
src/main/org/codehaus/groovy/classgen/Verifier.java,206,                    || superClass.equals(ClassHelper.GSTRING_TYPE);
src/main/org/codehaus/groovy/classgen/Verifier.java,207,
src/main/org/codehaus/groovy/classgen/Verifier.java,208,            // don't do anything as the base class implements the invokeMethod
src/main/org/codehaus/groovy/classgen/Verifier.java,209,            if (!addDelegateObject) {
src/main/org/codehaus/groovy/classgen/Verifier.java,212,                invokeMethodCode.add( new BytecodeInstruction(){
src/main/org/codehaus/groovy/classgen/Verifier.java,224,"                    ""invokeMethod"","
src/main/org/codehaus/groovy/classgen/Verifier.java,225,"                    ACC_PUBLIC,"
src/main/org/codehaus/groovy/classgen/Verifier.java,226,"                    ClassHelper.OBJECT_TYPE,"
src/main/org/codehaus/groovy/classgen/Verifier.java,227,                    new Parameter[] {
src/main/org/codehaus/groovy/classgen/Verifier.java,228,"                        new Parameter(ClassHelper.STRING_TYPE, ""method""),"
src/main/org/codehaus/groovy/classgen/Verifier.java,229,"                        new Parameter(ClassHelper.OBJECT_TYPE, ""arguments"")"
src/main/org/codehaus/groovy/classgen/Verifier.java,230,"                    },"
src/main/org/codehaus/groovy/classgen/Verifier.java,231,"                    ClassNode.EMPTY_ARRAY,"
src/main/org/codehaus/groovy/classgen/Verifier.java,232,                    new BytecodeSequence(invokeMethodCode)
src/main/org/codehaus/groovy/classgen/Verifier.java,235,
src/main/org/codehaus/groovy/classgen/Verifier.java,236,                if (!node.isScript()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,238,                    getPropertyCode.add( new BytecodeInstruction(){
src/main/org/codehaus/groovy/classgen/Verifier.java,249,"                        ""getProperty"","
src/main/org/codehaus/groovy/classgen/Verifier.java,250,"                        ACC_PUBLIC|ACC_SYNTHETIC,"
src/main/org/codehaus/groovy/classgen/Verifier.java,251,"                        ClassHelper.OBJECT_TYPE,"
src/main/org/codehaus/groovy/classgen/Verifier.java,252,"                        new Parameter[] { new Parameter(ClassHelper.STRING_TYPE, ""property"")},"
src/main/org/codehaus/groovy/classgen/Verifier.java,253,"                        ClassNode.EMPTY_ARRAY,"
src/main/org/codehaus/groovy/classgen/Verifier.java,254,                        new BytecodeSequence(getPropertyCode)
src/main/org/codehaus/groovy/classgen/Verifier.java,258,                    setPropertyCode.add( new BytecodeInstruction(){
src/main/org/codehaus/groovy/classgen/Verifier.java,270,"                        ""setProperty"","
src/main/org/codehaus/groovy/classgen/Verifier.java,271,"                        ACC_PUBLIC,"
src/main/org/codehaus/groovy/classgen/Verifier.java,272,"                        ClassHelper.VOID_TYPE,"
src/main/org/codehaus/groovy/classgen/Verifier.java,273,                        new Parameter[] {
src/main/org/codehaus/groovy/classgen/Verifier.java,274,"                            new Parameter(ClassHelper.STRING_TYPE, ""property""),"
src/main/org/codehaus/groovy/classgen/Verifier.java,275,"                            new Parameter(ClassHelper.OBJECT_TYPE, ""value"")"
src/main/org/codehaus/groovy/classgen/Verifier.java,276,"                        },"
src/main/org/codehaus/groovy/classgen/Verifier.java,277,"                        ClassNode.EMPTY_ARRAY,"
src/main/org/codehaus/groovy/classgen/Verifier.java,278,                        new BytecodeSequence(setPropertyCode)
src/main/org/codehaus/groovy/classgen/Verifier.java,855,            if (node.implementsInterface(testNode.getName())) return true;
src/main/org/codehaus/groovy/control/GenericsVisitor.java,88,                if (cnType.isInterface() && nType.declaresInterface(cnType.getName())) continue;
src/main/groovy/xml/dom/DOMCategory.java,43,        return null;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,161,            Class loop = thisClass;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,163,                loop = thisClass.getSuperclass();
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,164,                if (loop == thatClass) {
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,165,                    return -1;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,168,            loop = thatClass;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,169,            while (loop != null && loop != Object.class) {
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,170,                loop = thatClass.getSuperclass();
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,171,                if (loop == thisClass) {
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,172,                    return 1;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,173,                }
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,174,            }
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,175,            return 0;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,556,        if (classNode != null) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,557,            if (classNode.getNameWithoutPackage().equals(name)) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,558,                if (isAnInterface()) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,559,"                    throw new ASTRuntimeException(methodDef, ""Constructor not permitted within an interface."");"
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,560,                }
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,561,"                throw new ASTRuntimeException(methodDef, ""Invalid constructor format. Try remove the 'def' expression?"");"
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,562,            }
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,563,        }
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5288,"        return encodeBase64(data, false);"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7439,     * Iterates through this file line by line.  Each line is passed
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7440,     * to the given closure.  The file reader is closed before this method
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7447,"     * @see #eachLine(Reader,Closure)"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7450,"        return eachLine(newReader(self), closure);"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7454,     * Iterates through this String line by line.  Each line is passed
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7455,     * to the given closure.
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7457,     * @param self    a String
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7459,     * @return the self Object
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7461,"    public static Object eachLine(String self, Closure closure) {"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7462,"        each(readLines(self), closure);"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7463,        return self;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7467,"     * Iterates through this stream reading with the provided charset, passing each line to the closure.  The"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7468,     * stream is closed after the closure returns.
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7475,"     * @see #eachLine(Reader,Closure)"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7478,"        return eachLine(new InputStreamReader(stream, charset), closure);"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7482,"     * Iterates through this stream, passing each line to the closure.  The"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7483,     * stream is closed after the closure returns.
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7489,"     * @see #eachLine(Reader,Closure)"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7492,"        return eachLine(new InputStreamReader(stream), closure);"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7496,     * Iterates through the lines read from the URL's associated input stream
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7504,"        return eachLine(url.openConnection().getInputStream(), closure);"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7508,     * Iterates through the lines read from the URL's associated input stream
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7517,"        return eachLine(new InputStreamReader(url.openConnection().getInputStream(), charset), closure);"
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7521,     * Iterates through the given reader line by line.  Each line is passed
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7522,     * to the given closure.  The Reader is closed before this method returns.
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7531,        int count = 0;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7545,                    count++;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7587,        BufferedReader br /* = null */;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7618,     * for each line is then passed to the given closure.
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7635,     * the given closure.
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7688,
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,7693,
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,745,        }
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,746,        else {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,747,            fieldNode.setModifiers(modifiers);
src/main/org/codehaus/groovy/ast/ClassNode.java,497,            if (pn.getName().equals(name)) {
src/main/org/codehaus/groovy/ast/ClassNode.java,498,                return true;
src/main/org/codehaus/groovy/ast/ClassNode.java,499,            }
src/main/org/codehaus/groovy/ast/ClassNode.java,501,        return false;
src/main/org/codehaus/groovy/ast/PropertyNode.java,30,    private final FieldNode field;
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,72,
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,454,        if (java5 &&
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,455,            !type.isGenericsPlaceHolder() &&
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,456,            !ClassHelper.isCachedType(type)
src/main/org/codehaus/groovy/tools/javac/JavaStubGenerator.java,457,        ) {
src/main/groovy/util/XmlNodePrinter.java,219,        out.print(InvokerHelper.toString(value));
src/main/groovy/lang/ObjectRange.java,239,            int result = from.compareTo(value);
src/main/groovy/lang/ObjectRange.java,240,            return result == 0 || result < 0 && to.compareTo(value) >= 0;
src/main/groovy/lang/ObjectRange.java,251,            if (from instanceof Integer && to instanceof Integer
src/main/groovy/lang/ObjectRange.java,252,                    || from instanceof Long && to instanceof Long) {
src/main/groovy/lang/ObjectRange.java,254,                size = 0;
src/main/groovy/lang/ObjectRange.java,255,                int fromNum = ((Number) from).intValue();
src/main/groovy/lang/ObjectRange.java,256,                int toNum = ((Number) to).intValue();
src/main/groovy/lang/ObjectRange.java,257,                size = toNum - fromNum + 1;
src/main/groovy/lang/ObjectRange.java,260,                size = 0;
src/main/groovy/lang/ObjectRange.java,266,                size = 0;
src/main/groovy/lang/ObjectRange.java,276,                while (to.compareTo(value) >= 0) {
src/main/groovy/lang/ObjectRange.java,279,                    if (first.compareTo(value) >= 0) break; // handle back to beginning due to modulo incrementing
src/main/groovy/lang/ObjectRange.java,345,            while (value.compareTo(to) <= 0) {
src/main/groovy/lang/ObjectRange.java,349,                    if (value.compareTo(first) <= 0) return;
src/main/groovy/lang/ObjectRange.java,356,            while (value.compareTo(from) >= 0) {
src/main/groovy/lang/ObjectRange.java,360,                    if (value.compareTo(first) >= 0) return;
src/main/groovy/lang/ObjectRange.java,97,        }
src/main/groovy/lang/ObjectRange.java,98,        if (from instanceof Float) {
src/main/groovy/lang/ObjectRange.java,99,            from = new Double(((Float) from).doubleValue());
src/main/groovy/lang/ObjectRange.java,100,        }
src/main/groovy/lang/ObjectRange.java,101,        if (to instanceof Float) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,746,            FieldNode storedNode = classNode.getField(fieldNode.getName());
src/main/org/codehaus/groovy/ast/ClassNode.java,395,        for (Iterator methIt = getAllDeclaredMethods().iterator(); methIt.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,396,            MethodNode method = (MethodNode) methIt.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,434,            for (Iterator iter = ifaceMethodsMap.keySet().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,435,                String methSig = (String) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,444,        for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,445,            MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,497,
src/main/org/codehaus/groovy/ast/ClassNode.java,507,     for (Iterator iter = getProperties().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,508,            PropertyNode pn = (PropertyNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,511,                  pn.getField().setInitialValueExpression(initialValueExpression);
src/main/org/codehaus/groovy/ast/ClassNode.java,514,                  pn.setGetterBlock(getterBlock);
src/main/org/codehaus/groovy/ast/ClassNode.java,517,                  pn.setSetterBlock(setterBlock);
src/main/org/codehaus/groovy/ast/ClassNode.java,533,     for (Iterator iter = getProperties().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,534,            PropertyNode pn = (PropertyNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,656,    public FieldNode getField(String name) {
src/main/org/codehaus/groovy/ast/ClassNode.java,740,        List answer = new ArrayList(getDeclaredMethods(name));
src/main/org/codehaus/groovy/ast/ClassNode.java,741,        ClassNode parent = getSuperClass();
src/main/org/codehaus/groovy/ast/ClassNode.java,742,        if (parent!=null) answer.addAll(parent.getMethods(name));
src/main/org/codehaus/groovy/ast/ClassNode.java,752,        List list = getDeclaredMethods(name);
src/main/org/codehaus/groovy/ast/ClassNode.java,753,        for (Iterator iter = list.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,754,            MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,769,        List list = getMethods(name);
src/main/org/codehaus/groovy/ast/ClassNode.java,770,        for (Iterator iter = list.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,771,            MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,928,
src/main/org/codehaus/groovy/ast/ClassNode.java,929,        // now lets visit the contents of the class
src/main/org/codehaus/groovy/ast/ClassNode.java,930,        for (Iterator iter = getProperties().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,931,            PropertyNode pn = (PropertyNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,935,        for (Iterator iter = getFields().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,936,            FieldNode fn = (FieldNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,940,        for (Iterator iter = getDeclaredConstructors().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,941,            ConstructorNode cn = (ConstructorNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,945,        for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,946,            MethodNode mn = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,952,        for (Iterator iter = getDeclaredMethods(getterName).iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,953,            MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,966,        for (Iterator iter = getDeclaredMethods(setterName).iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,967,            MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,1011,        if (genericsTypes!=null) {
src/main/org/codehaus/groovy/ast/ClassNode.java,1014,"                if (i!=0) ret+="", "";"
src/main/org/codehaus/groovy/ast/ClassNode.java,1019,        if (redirect!=null) {
src/main/org/codehaus/groovy/ast/ClassNode.java,1020,"            ret += "" -> ""+redirect().toString();"
src/main/org/codehaus/groovy/ast/ClassNode.java,1026,     * Returns true if the given method has a possibly matching method with the given name and arguments
src/main/org/codehaus/groovy/ast/ClassNode.java,1038,            for (Iterator iter = getDeclaredMethods(name).iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,1039,                MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,1057,        }
src/main/org/codehaus/groovy/ast/ClassNode.java,1058,        else
src/main/org/codehaus/groovy/ast/ClassNode.java,1059,          return null;
src/main/org/codehaus/groovy/ast/ClassNode.java,1065,            for (Iterator iter = node.getDeclaredMethods(name).iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,1066,                MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,1070,                      if (!args.getType().isDerivedFrom(method.getParameters()[i].getType())) {
src/main/org/codehaus/groovy/ast/ClassNode.java,1071,                          match = false;
src/main/org/codehaus/groovy/ast/ClassNode.java,1072,                          break;
src/main/org/codehaus/groovy/ast/ClassNode.java,1073,                      }
src/main/org/codehaus/groovy/ast/ClassNode.java,1077,                          res = method;
src/main/org/codehaus/groovy/ast/ClassNode.java,1079,                          if (res.getParameters().length != count)
src/main/org/codehaus/groovy/ast/ClassNode.java,1080,                            return null;
src/main/org/codehaus/groovy/ast/ClassNode.java,1081,
src/main/org/codehaus/groovy/ast/ClassNode.java,1082,                          if (node.equals(this))
src/main/org/codehaus/groovy/ast/ClassNode.java,1083,                            return null;
src/main/org/codehaus/groovy/ast/ClassNode.java,1084,
src/main/org/codehaus/groovy/ast/ClassNode.java,1085,                          match = true;
src/main/org/codehaus/groovy/ast/ClassNode.java,1086,                          for (int i = 0; i != count; ++i)
src/main/org/codehaus/groovy/ast/ClassNode.java,1087,                            if (!res.getParameters()[i].getType().equals(method.getParameters()[i].getType())) {
src/main/org/codehaus/groovy/ast/ClassNode.java,1088,                                match = false;
src/main/org/codehaus/groovy/ast/ClassNode.java,1089,                                break;
src/main/org/codehaus/groovy/ast/ClassNode.java,1090,                            }
src/main/org/codehaus/groovy/ast/ClassNode.java,1091,
src/main/org/codehaus/groovy/ast/ClassNode.java,1092,                          if (!match)
src/main/org/codehaus/groovy/ast/ClassNode.java,1093,                            return null;
src/main/org/codehaus/groovy/ast/ClassNode.java,1106,     * Returns true if the given method has a possibly matching static method with the given name and arguments
src/main/org/codehaus/groovy/ast/ClassNode.java,1116,        for (Iterator iter = getDeclaredMethods(name).iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,1117,            MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,1123,                method.getParameters()[method.getParameters().length - 1].getType().isArray()) {
src/main/org/codehaus/groovy/ast/InnerClassNode.java,55,        return outerClass.getField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1590,                visitFieldExpression(new FieldExpression(classNode.getField(name)));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1598,                    FieldNode field = classNode.getField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1630,"            visitFieldExpression(new FieldExpression(classNode.getField(""owner"")));"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2549,                    field = classNode.getSuperClass().getField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2551,                    field = classNode.getField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2951,            FieldNode fn = classNode.getField(staticFieldName);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3975,                FieldNode field = classNode.getField(variableName);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,4110,            field = classNode.getField(varExp.getName());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,4113,            field = classNode.getField(fieldExp.getFieldName());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,4117,            if (possibleField != null) field = classNode.getField(possibleField);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,4224,        return compileStack.containsVariable(name) || classNode.getField(name) != null;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,4291,            FieldNode field = classNode.getField(varExp.getName());
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,298,        if (currentClass.getField(node.getName()) != node) {
src/main/org/codehaus/groovy/classgen/Verifier.java,97,"        FieldNode ret = node.getField(""metaClass"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,102,"            ret = current.getField(""metaClass"");"
src/main/org/codehaus/groovy/classgen/Verifier.java,141,        while (node.getField(_myClassFieldName) != null)
src/main/org/codehaus/groovy/classgen/Verifier.java,151,        while (node.getField(_staticClassInfoFieldName) != null)
src/main/org/codehaus/groovy/control/OptimizerVisitor.java,70,        field = currentClass.getField(name);
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,176,                FieldNode field = currentClass.getField(pe.getPropertyAsString());
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,247,        Iterator it = importedClasses.keySet().iterator();
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,248,        while (it.hasNext()) {
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,249,            String className = (String) it.next();
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,258,        if (!staticImportType.isResolved() && !staticImportType.isPrimaryClassNode()) {
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,259,            stillResolving = true;
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,260,        }
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,288,        Iterator it = importPackages.keySet().iterator();
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,289,        while (it.hasNext()) {
src/main/org/codehaus/groovy/control/StaticImportVisitor.java,290,            String className = (String) it.next();
src/main/groovy/lang/IntRange.java,86,         * @throws javax.naming.OperationNotSupportedException always
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,560,            int ito = ((Integer) to).intValue();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,561,            int ifrom = ((Integer) from).intValue();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,573,        } else {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,574,            if (!inclusive) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,575,"                if (compareEqual(from, to)) {"
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,576,                    return new EmptyRange((Comparable) from);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,577,                }
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,578,"                if (compareGreaterThan(from, to)) {"
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,579,"                    to = invokeMethod0(ScriptBytecodeAdapter.class, to, ""next"");"
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,580,                } else {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,581,"                    to = invokeMethod0(ScriptBytecodeAdapter.class, to, ""previous"");"
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,582,                }
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,584,
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,585,            if (from instanceof Integer && to instanceof Integer)
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,586,"              return new IntRange(DefaultTypeTransformation.intUnbox(from), DefaultTypeTransformation.intUnbox(from));"
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,587,            else
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,588,"              return new ObjectRange((Comparable) from, (Comparable) to);"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,815,        loop.getBooleanExpression().visit(this);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,816,"        mv.visitJumpInsn(IFEQ, breakLabel);"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3589,"            parameters = new Parameter[]{new Parameter(ClassHelper.OBJECT_TYPE, ""it"", ConstantExpression.NULL)};"
src/main/groovy/util/GroovyTestCase.java,208,"        return ""TestScript"" + getMethodName() + (counter++) + "".groovy"";"
src/main/org/codehaus/groovy/classgen/Verifier.java,1001,            if (node.implementsInterface(testNode)) return true;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2257,"        if (methodName != null && isThisExpression && isFieldOrVariable(methodName) && !classNode.hasPossibleMethod(methodName, arguments)) {"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2542,                    field = classNode.getDeclaredField(name);
src/main/org/codehaus/groovy/runtime/metaclass/ClosureMetaMethod.java,102,"                    res.add(new MethodClosureMetaMethod(name, declaringClass, closure, method));"
src/main/org/codehaus/groovy/runtime/metaclass/ClosureMetaMethod.java,110,"                        res.add(new ClosureMetaMethod(name, declaringClass, closure, method));"
src/main/org/codehaus/groovy/runtime/metaclass/ClosureMetaMethod.java,115,                res.add(new MetaMethod(closure.getParameterTypes()){
src/main/org/codehaus/groovy/runtime/metaclass/ClosureMetaMethod.java,138,                });
src/main/org/codehaus/groovy/runtime/metaclass/ClosureMetaMethod.java,143,
src/main/groovy/lang/ExpandoMetaClass.java,980,            if(name.length() > 0 && Character.isUpperCase(name.charAt(0))) return true;
src/main/groovy/lang/ExpandoMetaClass.java,984,            if(name.length() > 0 && Character.isUpperCase(name.charAt(0))) return true;
src/main/groovy/lang/ExpandoMetaClass.java,1010,  if(Character.isUpperCase(prop.charAt(0)) && (prop.length() > 1 && Character.isUpperCase(prop.charAt(1)))) {
src/main/groovy/lang/ExpandoMetaClass.java,1013,  else if(Character.isDigit(prop.charAt(0))) {
src/main/groovy/lang/ExpandoMetaClass.java,1014,   return prop;
src/main/groovy/lang/ExpandoMetaClass.java,1015,  }
src/main/groovy/lang/ExpandoMetaClass.java,1016,  else {
src/main/groovy/lang/ExpandoMetaClass.java,1017,"   return Character.toLowerCase(prop.charAt(0)) + (prop.length() > 1 ? prop.substring(1) : """");"
src/main/groovy/lang/ExpandoMetaClass.java,1018,  }
src/main/groovy/lang/ExpandoMetaClass.java,1043,            if(name.length() > 0 && Character.isUpperCase(name.charAt(0))) return true;
src/main/groovy/lang/MetaClassImpl.java,2084,            // get the name of the property
src/main/groovy/lang/MetaClassImpl.java,2085,            final int len = methodName.length() - 3;
src/main/groovy/lang/MetaClassImpl.java,2086,            char[] pn = new char[len];
src/main/groovy/lang/MetaClassImpl.java,2087,"            methodName.getChars(3, 3 + len, pn, 0);"
src/main/groovy/lang/MetaClassImpl.java,2088,            pn[0] = Character.toLowerCase(pn[0]);
src/main/groovy/lang/MetaClassImpl.java,2089,            String propName = new String(pn);
src/main/groovy/lang/MetaProperty.java,69,        return prefix + Character.toUpperCase(propertyName.charAt(0))
src/main/groovy/lang/MetaProperty.java,70,                + propertyName.substring(1);
src/main/groovy/lang/MetaProperty.java,74,"        return PROPERTY_SET_PREFIX + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);"
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,200,"        String s = pname.substring(0, 1).toLowerCase();"
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,201,        String rest = pname.substring(1);
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,202,        pname = s + rest;
src/main/org/codehaus/groovy/classgen/Verifier.java,768,"        return name.substring(0, 1).toUpperCase() + name.substring(1, name.length());"
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,443,    public static String capitalize(String property) {
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,444,"        return property.substring(0, 1).toUpperCase() + property.substring(1, property.length());"
src/main/org/codehaus/groovy/transform/LazyASTTransformation.java,90,"        final String name = ""get"" + fieldNode.getName().substring(1, 2).toUpperCase() + fieldNode.getName().substring(2);"
src/main/org/codehaus/groovy/transform/LazyASTTransformation.java,136,"        final String name = ""get"" + fieldNode.getName().substring(1, 2).toUpperCase() + fieldNode.getName().substring(2);"
src/main/org/codehaus/groovy/transform/LazyASTTransformation.java,143,"        final String name = ""set"" + fieldNode.getName().substring(1, 2).toUpperCase() + fieldNode.getName().substring(2);"
src/test/org/codehaus/groovy/classgen/CapitalizeTest.java,60,"        assertEquals(""FOo"", Verifier.capitalize(""fOo""));"
src/test/org/codehaus/groovy/classgen/CapitalizeTest.java,61,"        assertEquals(""FOO"", Verifier.capitalize(""fOO""));"
src/main/org/codehaus/groovy/ast/ClassNode.java,307,"          addField(""$ownClass"", ACC_STATIC|ACC_PUBLIC|ACC_FINAL|ACC_SYNTHETIC, ClassHelper.CLASS_Type, new ClassExpression(this)).setSynthetic(true);"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,630,"                fieldNode.getModifiers(),"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,633,"                signature, //fieldValue,  //br  all the sudden that one cannot init the field here. init is done in static initilizer and instace intializer."
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,640,"        // the verifyer created the field and the setter/getter methods, so here is"
src/main/org/codehaus/groovy/classgen/Verifier.java,148,"        FieldNode staticMetaClassField = node.addField(staticMetaClassFieldName, ACC_PRIVATE|ACC_STATIC, ClassHelper.make(ClassInfo.class,false), null);"
src/main/org/codehaus/groovy/ast/AnnotatedNode.java,77,     * @param declaringClass The declaringClass to set.
src/main/org/codehaus/groovy/ast/ClassNode.java,307,"          addField(""$ownClass"", ACC_STATIC|ACC_PUBLIC|ACC_FINAL, ClassHelper.CLASS_Type, new ClassExpression(this)).setSynthetic(true);"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,462,"            classNode.addMethod(name, Opcodes.ACC_PUBLIC & Opcodes.ACC_SYNTHETIC, method.getReturnType(), parameters, null, null);"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,630,        int modifiers = fieldNode.getModifiers();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,631,        if (fieldNode.isSynthetic()) modifiers |= ACC_SYNTHETIC;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,633,"                modifiers,"
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3601,"        InnerClassNode answer = new InnerClassNode(outerClass, name, 0, ClassHelper.CLOSURE_TYPE); // closures are local inners and not public"
src/main/org/codehaus/groovy/classgen/EnumVisitor.java,70,"        FieldNode values = new FieldNode(""$VALUES"",PRIVATE_FS,enumArray,enumClass,null);"
src/main/org/codehaus/groovy/classgen/Verifier.java,79,"            node.addField(""metaClass"", ACC_PRIVATE | ACC_TRANSIENT, ClassHelper.METACLASS_TYPE, new BytecodeExpression() {"
src/main/org/codehaus/groovy/classgen/Verifier.java,342,"                Modifier.PUBLIC | Modifier.STATIC,"
src/main/org/codehaus/groovy/classgen/Verifier.java,353,"                Modifier.PUBLIC | Modifier.STATIC,"
src/main/org/codehaus/groovy/ast/ClassNode.java,327,        if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,328,            lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,329,        }
src/main/org/codehaus/groovy/ast/ClassNode.java,339,        if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,340,            lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,341,        }
src/main/org/codehaus/groovy/ast/ClassNode.java,363,        if (!lazyInitDone) lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,461,        if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,462,            lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,463,        }
src/main/org/codehaus/groovy/ast/ClassNode.java,746,        if (!lazyInitDone) lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,887,        if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,888,            lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,889,        }
src/main/org/codehaus/groovy/ast/AnnotationNode.java,147,    public static final String targetToName(int target) {
src/main/org/codehaus/groovy/classgen/ExtendedVerifier.java,57,    public void visitConstructor(ConstructorNode node) {
src/main/org/codehaus/groovy/classgen/ExtendedVerifier.java,58,"        visitAnnotations(node, AnnotationNode.CONSTRUCTOR_TARGET);"
src/main/org/codehaus/groovy/classgen/ExtendedVerifier.java,59,    }
src/main/org/codehaus/groovy/classgen/ExtendedVerifier.java,60,
src/main/org/codehaus/groovy/classgen/ExtendedVerifier.java,66,"        visitAnnotations(node, AnnotationNode.METHOD_TARGET);"
src/main/groovy/util/GroovyScriptEngine.java,183,            long time = System.currentTimeMillis();
src/main/groovy/util/GroovyScriptEngine.java,185,"            for (Map.Entry<String,Set<String>> entry: cache.entrySet()) {"
src/main/groovy/util/GroovyScriptEngine.java,188,                if (clazz==null) continue;
src/main/groovy/util/GroovyScriptEngine.java,189,
src/main/groovy/util/GroovyScriptEngine.java,193,                Set<String> value = convertToPaths(entry.getValue());
src/main/groovy/util/GroovyScriptEngine.java,194,"                ScriptCacheEntry cacheEntry = new ScriptCacheEntry(clazz,time,value);"
src/main/groovy/util/GroovyScriptEngine.java,214,                if (clazz==null) continue;
src/main/groovy/util/GroovyScriptEngine.java,448,        if (entry != null) clazz=entry.scriptClass;
src/main/groovy/util/GroovyScriptEngine.java,527,        long time = System.currentTimeMillis();
src/main/groovy/util/GroovyScriptEngine.java,528,
src/main/groovy/util/GroovyScriptEngine.java,529,        for (String scriptName:entry.dependencies) {
src/main/groovy/util/GroovyScriptEngine.java,531,            long entryChangeTime = depEntry.lastModified + config.getMinimumRecompilationInterval();
src/main/groovy/util/GroovyScriptEngine.java,532,            if (entryChangeTime > time) continue;
src/main/groovy/util/GroovyScriptEngine.java,539,            if (entryChangeTime > lastMod) {
src/main/groovy/util/GroovyScriptEngine.java,540,"                ScriptCacheEntry newEntry = new ScriptCacheEntry(depEntry.scriptClass, time, depEntry.dependencies);"
src/main/groovy/util/AntBuilder.java,2, * Copyright 2003-2009 the original author or authors.
src/main/groovy/util/AntBuilder.java,23,import org.apache.tools.ant.input.DefaultInputHandler;
src/main/groovy/util/AntBuilder.java,35,import java.util.Iterator;
src/main/groovy/util/AntBuilder.java,43, * be used with GroovyMarkup. Requires the ant.jar in your classpath which will
src/main/groovy/util/AntBuilder.java,46," * <a href=""http://ant.apache.org/manual/optionaltasklist.html"">optional tasks</a>"
src/main/groovy/util/AntBuilder.java,48, * your classpath.
src/main/groovy/util/AntBuilder.java,53, * @version $Revision$
src/main/groovy/util/AntBuilder.java,208,            InputStream savedIn = System.in;
src/main/groovy/util/AntBuilder.java,314,        for (final Iterator iter = attributes.entrySet().iterator(); iter.hasNext();) {
src/main/groovy/util/AntBuilder.java,315,            final Map.Entry entry = (Map.Entry) iter.next();
src/main/groovy/lang/IntRange.java,336,                value = value + step;
src/main/groovy/lang/IntRange.java,342,                value = value + step;
src/main/groovy/lang/IntRange.java,31, * This class is a copy of {@link ObjectRange} optimized for <code>int</code>.  If you make any
src/main/groovy/lang/IntRange.java,35, * @version $Revision$
src/main/groovy/lang/IntRange.java,339,                else {
src/main/groovy/lang/IntRange.java,340,                    value = value + step;
src/main/groovy/lang/IntRange.java,341,                }
src/main/groovy/lang/IntRange.java,350,                else {
src/main/groovy/lang/IntRange.java,351,                    value = value + step;
src/main/groovy/lang/IntRange.java,352,                }
src/main/groovy/lang/IntRange.java,336,                value = value + step;
src/main/groovy/lang/IntRange.java,342,                value = value + step;
src/main/groovy/lang/IntRange.java,31, * This class is a copy of {@link ObjectRange} optimized for <code>int</code>.  If you make any
src/main/groovy/lang/IntRange.java,35, * @version $Revision$
src/main/groovy/lang/IntRange.java,339,                else {
src/main/groovy/lang/IntRange.java,340,                    value = value + step;
src/main/groovy/lang/IntRange.java,341,                }
src/main/groovy/lang/IntRange.java,350,                else {
src/main/groovy/lang/IntRange.java,351,                    value = value + step;
src/main/groovy/lang/IntRange.java,352,                }
src/main/groovy/util/BuilderSupport.java,145,            closure.call();
src/main/groovy/lang/ObjectRange.java,277,                long fromNum = ((Number) from).longValue();
src/main/groovy/lang/ObjectRange.java,278,                long toNum = ((Number) to).longValue();
src/main/groovy/lang/ObjectRange.java,279,                size = (int) (toNum - fromNum + 1);
src/main/groovy/lang/ObjectRange.java,284,                size = toNum - fromNum + 1;
src/main/groovy/lang/ObjectRange.java,291,                size = sizeNum.intValue();
src/main/groovy/lang/ObjectRange.java,295,                int tempsize = 0;
src/main/groovy/lang/ObjectRange.java,300,                size = tempsize;            }

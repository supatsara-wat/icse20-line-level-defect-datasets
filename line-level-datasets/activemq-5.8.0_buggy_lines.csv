File,LineNumber,src
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,194,                remaining = data.remaining();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2584Test.java,63,"                        //PersistenceAdapterChoice.LevelDB,  TODO readd and investiaget failures."
activemq-unit-tests/src/test/java/org/apache/activemq/leveldb/LevelDBXARecoveryBrokerTest.java,23,import java.io.File;
activemq-unit-tests/src/test/java/org/apache/activemq/leveldb/LevelDBXARecoveryBrokerTest.java,24,
activemq-unit-tests/src/test/java/org/apache/activemq/leveldb/LevelDBXARecoveryBrokerTest.java,46,
activemq-unit-tests/src/test/java/org/apache/activemq/leveldb/LevelDBXARecoveryBrokerTest.java,47,    @Override
activemq-unit-tests/src/test/java/org/apache/activemq/leveldb/LevelDBXARecoveryBrokerTest.java,48,    public void testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback() {
activemq-unit-tests/src/test/java/org/apache/activemq/leveldb/LevelDBXARecoveryBrokerTest.java,49,        // https://issues.apache.org/jira/browse/AMQ-4296
activemq-unit-tests/src/test/java/org/apache/activemq/leveldb/LevelDBXARecoveryBrokerTest.java,50,    }
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/DurableSubscriptionOfflineTest.java,140,        // TODO - readd PersistenceAdapterChoice.LevelDB and investigate failure cause.
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/DurableSubscriptionOfflineTest.java,142,"                new Object[]{ PersistenceAdapterChoice.KahaDB, PersistenceAdapterChoice.JDBC});"
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,194,                remaining = plain.remaining();
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,28,import org.springframework.context.ConfigurableApplicationContext;
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,29,import org.springframework.context.support.ClassPathXmlApplicationContext;
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,30,import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,75,            PropertySourcesPlaceholderConfigurer configurator =
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,76,                        new PropertySourcesPlaceholderConfigurer();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1423,                gcCandidateSet.remove(metadata.producerSequenceIdTrackerLocation.getDataFileId());
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,78,"        map.put(""async"", ""false"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,90,        SystemUsage usage = new SystemUsage();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,91,        MemoryUsage memoryUsage = new MemoryUsage();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,92,        memoryUsage.setLimit(MESSAGE_LENGTH_BYTES * 200 * NUM_SENDERS_AND_RECEIVERS);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,93,        usage.setMemoryUsage(memoryUsage);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,94,        broker.setSystemUsage(usage);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,95,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,96,
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,878,            localBroker.oneway(sub.getLocalInfo());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ3274Test.java,113,"            LOG.info(""Have "" + cons_client.getNumMsgReceived() + "" messages; expected "" + tot_expected);"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,898,            localBroker.request(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,898,            localBroker.oneway(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,160,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,164,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,176,
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,39,    private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,47,            connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,48,            connection.start();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,49,            return connection;
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,109,
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionKey.java,50,            return equals((ConnectionKey)that);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionKey.java,73,
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,49,    private long firstUsed = lastUsed;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,174,            expiredCheck();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,175,
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,210,        if (hasExpired) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,217,        if (hasFailed
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,218,                || (idleTimeout > 0 && System.currentTimeMillis() > lastUsed + idleTimeout)
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,219,                || expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,220,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,145,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,362,     * @return
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,369,"     * Sets the idle timeout value for Connection's that are created by this pool, defaults to 30 seconds."
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,376,     *
activemq-pool/src/test/java/org/apache/activemq/pool/ConnectionExpiryEvictsFromPoolTest.java,60,
activemq-pool/src/test/java/org/apache/activemq/pool/ConnectionExpiryEvictsFromPoolTest.java,76,    public void testRetainIdleWhenInUse() throws Exception {
activemq-pool/src/test/java/org/apache/activemq/pool/ConnectionExpiryEvictsFromPoolTest.java,84,"        // get the same connection from pool again, it will get destroyed due to validation check"
activemq-pool/src/test/java/org/apache/activemq/pool/ConnectionExpiryEvictsFromPoolTest.java,85,        // it will be the same since maxIdle is set to 1 in implementation
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,198,"                        topic.deactivate(context, this);"
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,651,        startAllConnectors();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,652,
activemq-client/src/main/java/org/apache/activemq/util/JMSExceptionSupport.java,49,        JMSException exception = new JMSException(msg);
activemq-client/src/main/java/org/apache/activemq/util/JMSExceptionSupport.java,62,        JMSException exception = new JMSException(msg);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,108,    private ConnectionInfo connectionInfo = new ConnectionInfo();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,162,                stopTransport();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,558,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,589,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,590,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,591,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,165,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,169,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,170,
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,25,import javax.management.*;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,29,import org.apache.activemq.broker.jmx.*;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,34, *
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,35, *
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,124,"                + "",connector=clientConnectors,connectorName="" + connectorName + "",connectionName=*"");"
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,125,"        Set<ObjectName> queryResult = queryNames(query, null);"
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,45,"        if (cronEntry.startsWith(""* * * * *"")) {"
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,71,                out.print(refreshRate);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,380,            remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,170,"            result = addAdapter(filteredAdapter, destination);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,171,"            startAdapter(((FilteredKahaDBPersistenceAdapter) result).getPersistenceAdapter(), destination.getQualifiedName());"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,176,        return ((FilteredKahaDBPersistenceAdapter) result).getPersistenceAdapter();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,447,    public long setTimeBetweenExpirationCheckMillis() {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,146,"        addCombinationValues(""defaultPersistenceAdapter"","
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,147,"                new Object[]{PersistenceAdapterChoice.KahaDB, PersistenceAdapterChoice.LevelDB, PersistenceAdapterChoice.JDBC});"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/AbstractFeatureTest.java,171,"        + System.getProperty(""camel.version"", ""unknown"")"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/AbstractFeatureTest.java,183,    public static Option[] configureBrokerStart(Option[] existingOptions) {
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/AbstractFeatureTest.java,188,"                replaceConfigurationFile(""etc/activemq.xml"", new File(basedir + ""/src/test/resources/org/apache/activemq/karaf/itest/activemq.xml"")),"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,20,import javax.jms.Connection;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,21,import javax.jms.MessageConsumer;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,22,import javax.jms.Session;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,23,import javax.jms.TextMessage;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,24,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,35,public class ActiveMQBrokerFeatureTest extends AbstractFeatureTest {
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,71,    protected String consumeMessage(String nameAndPayload) throws Exception {
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,72,        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,73,"        Connection connection = factory.createConnection(USER,PASSWORD);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,74,        connection.start();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,75,"        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,76,        MessageConsumer consumer = session.createConsumer(session.createQueue(nameAndPayload));
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,77,        TextMessage message = (TextMessage) consumer.receive(4000);
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,78,"        System.err.println(""message: "" + message);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,79,        connection.close();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,80,        return message.getText();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,81,    }
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,82,
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,83,    protected void produceMessage(String nameAndPayload) throws Exception {
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,84,        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,85,"        Connection connection = factory.createConnection(USER,PASSWORD);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,86,        connection.start();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,87,"        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,88,        session.createProducer(session.createQueue(nameAndPayload)).send(session.createTextMessage(nameAndPayload));
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,89,        connection.close();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,90,    }
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerFeatureTest.java,91,
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,20,import javax.jms.Connection;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,21,import javax.jms.MessageConsumer;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,22,import javax.jms.Session;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,23,import javax.jms.TextMessage;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,24,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,35,import static org.openengsb.labs.paxexam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,39,public class ActiveMQBrokerNdCamelFeatureTest extends AbstractFeatureTest {
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,77,
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,78,    protected String consumeMessage(String nameAndPayload) throws Exception {
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,79,        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,80,"        Connection connection = factory.createConnection(USER,PASSWORD);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,81,        connection.start();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,82,"        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,83,        MessageConsumer consumer = session.createConsumer(session.createQueue(nameAndPayload));
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,84,        TextMessage message = (TextMessage) consumer.receive(10000);
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,85,"        System.err.println(""message: "" + message);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,86,        connection.close();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,87,        return message.getText();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,88,    }
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,89,
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,90,    protected void produceMessage(String nameAndPayload) throws Exception {
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,91,        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,92,"        Connection connection = factory.createConnection(USER,PASSWORD);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,93,        connection.start();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,94,"        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,95,        session.createProducer(session.createQueue(nameAndPayload)).send(session.createTextMessage(nameAndPayload));
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,96,        connection.close();
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,97,    }
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,98,
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,23, *
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,25, *
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,39,     *
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,66,            for (int i = 0; percentUsage >= 100; i++) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,103,     *
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,114,     *
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,128,            ((MemoryUsage)parent).increaseUsage(value);
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,134,     *
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,34, *
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,36, *
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,77,
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,111,
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,141,     *
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,204,     *
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,245,"            LOG.debug(getName() + "": usage change from: "" + oldPercentUsage + ""% of available memory, to: """
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,247,        }
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,299,"                 LOG.info(""Usage({}) limit={} should be smaller than its parent limit={}"","
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,300,"                    new Object[]{getName(), getLimit(), parent.getLimit()});"
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,315,
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,414,
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,42,    private final Destination next;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,104, @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,105, public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,106,  next.setMemoryUsage(memoryUsage);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,107, }
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,196,                //Account for virtual destinations
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,30, *
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,31, *
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,35,    private String prefix;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,36,    private String postfix;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,37,    private boolean local;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,38,"    private LRUCache<ActiveMQDestination,ActiveMQQueue> cache = new LRUCache<ActiveMQDestination,ActiveMQQueue>();"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1172,                                backups.add(bt);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,218,            return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,226,            return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,232,            return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,235,        return false;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,77,        this.pool.incrementReferenceCount();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,223,            connection = connectionsPool.borrowObject(key);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1257,                deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1258,                deliveredMessages.clear();
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/NonBlockingConsumerRedeliveryTest.java,19,import static org.junit.Assert.*;
activemq-tooling/activemq-maven-plugin/src/main/java/org/apache/activemq/maven/BrokerMojo.java,54,"     * @parameter property=""project"""
activemq-broker/src/main/java/org/apache/activemq/broker/util/TimeStampingBrokerPlugin.java,143,            if (deadLetterStrategy != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,762,                context.getTransaction().addSynchronization(new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,763,                    @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,764,                    public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,765,                        sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,766,                        try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,767,                            // It could take while before we receive the commit
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,768,"                            // op, by that time the message could have expired.."
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,769,                            if (broker.isExpired(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,770,"                                broker.messageExpired(context, message, null);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,771,                                destinationStatistics.getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,772,                                return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,773,                            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,774,                            sendMessage(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,775,                        } finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,776,                            sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,777,                            message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,778,                        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,779,"                        messageSent(context, message);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,780,                    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,781,                    @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,782,                    public void afterRollback() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,783,                        message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,784,                    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,785,                });
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,131,"        return super.toString() + ""[synchronizations="" + synchronizations + ""]"";"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,46,import java.util.Stack;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,836,"                process(message, lastRecoveryPosition, (Runnable)null);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,916,"    public Location store(JournalCommand<?> data, boolean sync, Runnable before,Runnable after, Runnable onJournalStoreComplete) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,917,        if (before != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,918,            before.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,919,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,930,"                process(data, location, after);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,943,                Runnable afterCompletion = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,944,                synchronized (orderedTransactionAfters) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,945,                    if (!orderedTransactionAfters.empty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,946,                        afterCompletion = orderedTransactionAfters.pop();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,947,                    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,948,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,949,                if (afterCompletion != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,950,                    afterCompletion.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,951,                } else {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,952,                    // non persistent message case
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,953,                    after.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,954,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1007,"            process(data, location, (Runnable) null);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1025,"    void process(JournalCommand<?> data, final Location location, final Runnable after) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1044,"                process(command, location, after);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1156,    private final Stack<Runnable> orderedTransactionAfters = new Stack<Runnable>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1157,    private void push(Runnable after) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1158,        if (after != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1159,            synchronized (orderedTransactionAfters) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1160,                orderedTransactionAfters.push(after);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1161,            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1162,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1163,    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1164,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1166,"    protected void process(KahaCommitCommand command, Location location, final Runnable after) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1176,            if (after != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1177,"                // since we don't push this after and we may find another, lets run it now"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1178,                after.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1195,            push(after);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,148,    /**
activemq-unit-tests/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,149,     * Small regression. Looks like persistent messages to a queue are not being
activemq-unit-tests/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,150,     * timedout when in a long transaction. See:
activemq-unit-tests/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,151,     * http://issues.apache.org/activemq/browse/AMQ-1269 Commenting out the
activemq-unit-tests/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,152,     * DeliveryMode.PERSISTENT test combination for now.
activemq-unit-tests/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,153,     */
activemq-unit-tests/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,155,"        addCombinationValues(""deliveryMode"", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT)});"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/NegativeQueueTest.java,91,    private static final int MESSAGE_COUNT = 1100;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,236,        Connection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,238,            connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,239,            if (connection instanceof XAConnection) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,                XASession session = ((XAConnection)connection).createXASession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,                XAResource xaResource = session.getXAResource();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,242,                return new XAResource[] {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,243,                    xaResource
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,244,                };
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,245,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,            return new XAResource[] {};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,249,        } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,251,                connection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,252,            } catch (Throwable ignore) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,253,                //
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,254,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,243,"            topic.deactivate(context, this);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,585,   @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,603,            // Synchronized to DispatchLock
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,604,            synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,605,                ArrayList<MessageReference> references = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,606,                for (MessageReference r : dispatched) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,607,                    if( r.getRegionDestination() == destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,608,                        references.add(r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,609,                    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,611,                rc.addAll(references);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,612,                destination.getDestinationStatistics().getDispatched().subtract(references.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,613,                destination.getDestinationStatistics().getInflight().subtract(references.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,614,                dispatched.removeAll(references);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,231,                     consumers.remove(subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,235,                     if (!consumers.contains(subscription)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,236,                      consumers.add(subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,237,                     }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,293,"    public void deactivate(ConnectionContext context, DurableTopicSubscription sub) throws Exception {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,297,"        sub.remove(context, this);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,380,
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,125,    private ArrayList<URI> priorityList = new ArrayList<URI>();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,907,                        if (connectList.get(0).equals(connectedTransportURI)) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1293,            if (newURI.getPort() == uri.getPort()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1294,                InetAddress newAddr = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1295,                InetAddress addr = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1296,                try {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1297,                    newAddr = InetAddress.getByName(newURI.getHost());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1298,                    addr = InetAddress.getByName(uri.getHost());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1299,                } catch(IOException e) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1300,
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1301,                    if (newAddr == null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1302,"                        LOG.error(""Failed to Lookup INetAddress for URI[ "" + newURI + "" ] : "" + e);"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1303,                    } else {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1304,"                        LOG.error(""Failed to Lookup INetAddress for URI[ "" + uri + "" ] : "" + e);"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1305,                    }
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1307,                    if (newURI.getHost().equalsIgnoreCase(uri.getHost())) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1308,                        result = true;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1309,                        break;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1310,                    } else {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1311,                        continue;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1312,                    }
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1315,                if (addr.equals(newAddr)) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1316,                    result = true;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1317,                    break;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1322,        return result;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,146,                        connectedToPriority = isPriority(connectedTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,925,"                        if (compareURIs(connectList.get(0), connectedTransportURI)) {"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1011,                             if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1013,                             }
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1330,            return false;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1342,"                    LOG.error(""Failed to Lookup INetAddress for URI[ "" + firstAddr + "" ] : "" + e);"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1344,"                    LOG.error(""Failed to Lookup INetAddress for URI[ "" + secondAddr + "" ] : "" + e);"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1348,                    return true;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1351,
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1352,            if (firstAddr.equals(secondAddr)) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1353,                return true;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1354,            }
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1357,        return false;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,19,import org.apache.activemq.broker.BrokerService;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,23,import java.util.HashMap;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,24,import java.util.Map;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,25,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,33,"    private HashMap<String,String> urls = new HashMap<String,String>();"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,45,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,46,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,60,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,129,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,162,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,164,
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,966,                                if (transport != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,43,import javax.jms.InvalidClientIDException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,44,import javax.jms.JMSException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,45,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,46,import java.net.URI;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,47,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,48,import java.util.Collections;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,49,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,50,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,51,import java.util.Locale;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,52,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,53,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,54,import java.util.concurrent.ConcurrentHashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,55,import java.util.concurrent.CopyOnWriteArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,56,import java.util.concurrent.ThreadPoolExecutor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,57,import java.util.concurrent.locks.ReentrantReadWriteLock;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,58,
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,529,            removeBrokerInClusterUpdate(info);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,29,"    private static final String BROKER_A_CLIENT_TC_ADDRESS = ""tcp://localhost:61616"";"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,30,"    private static final String BROKER_B_CLIENT_TC_ADDRESS = ""tcp://localhost:61617"";"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,31,"    private static final String BROKER_C_CLIENT_TC_ADDRESS = ""tcp://localhost:61618"";"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,32,"    private static final String BROKER_A_NOB_TC_ADDRESS = ""tcp://localhost:61626"";"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,33,"    private static final String BROKER_B_NOB_TC_ADDRESS = ""tcp://localhost:61627"";"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,34,"    private static final String BROKER_C_NOB_TC_ADDRESS = ""tcp://localhost:61628"";"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,38,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,39,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,42,     * Basic dynamic failover 3 broker test
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,43,     *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,59, /**
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,60,  * Tests a 3 broker configuration to ensure that the backup is random and
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,61,  * supported in a cluster. useExponentialBackOff is set to false and
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,62,  * maxReconnectAttempts is set to 1 to move through the list quickly for
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,63,  * this test.
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,64,  *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,65,  * @throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,66,  */
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,80, /**
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,81,  * Tests a 3 broker cluster that passes in connection params on the
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,82,  * transport connector. Prior versions of AMQ passed the TC connection
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,83,  * params to the client and this should not happen. The chosen param is not
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,84,  * compatible with the client and will throw an error if used.
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,85,  *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,86,  * @throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,87,  */
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,100,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,103,     *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,117, /**
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,118,  * Test to verify that a broker with multiple transport connections only the
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,119,  * one marked to update clients is propagate
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,120,  *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,121,  * @throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,122,  */
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,136, /**
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,137,  * Test to verify the reintroduction of the A Broker
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,138,  *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,139,  * @throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,140,  */
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,167, /**
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,168,  * Test to ensure clients are evenly to all available brokers in the
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,169,  * network.
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,170,  *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,171,  * @throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,172,  */
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,185, /**
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,186,  * Test to verify that clients are distributed with no less than 20% of the
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,187,  * clients on any one broker.
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,188,  *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,189,  * @throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,190,  */
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,203, /**
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,204,  * Runs a 3 Broker dynamic failover test: <br/>
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,205,  * <ul>
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,206,  * <li>asserts clients are distributed across all 3 brokers</li>
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,207,  * <li>asserts clients are distributed across 2 brokers after removing the 3rd</li>
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,208,  * <li>asserts clients are distributed across all 3 brokers after
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,209,  * reintroducing the 3rd broker</li>
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,210,  * </ul>
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,211,  *
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,212,  * @param multi
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,213,  * @param tcParams
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,214,  * @param clusterFilter
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,215,  * @param destinationFilter
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,216,  * @throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,217,  * @throws InterruptedException
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,218,  */
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,229,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,236,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,291,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,293,"     final String tcParams = (params == null)?"""":params;"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,310,"     final String tcParams = (params == null)?"""":params;"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,327,"     final String tcParams = (params == null)?"""":params;"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverComplexClusterTest.java,342,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/FrameTranslator.java,19,import org.apache.activemq.command.ActiveMQDestination;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/FrameTranslator.java,20,import org.apache.activemq.command.ActiveMQMessage;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/FrameTranslator.java,21,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/FrameTranslator.java,22,import javax.jms.Destination;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/FrameTranslator.java,23,import javax.jms.JMSException;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/FrameTranslator.java,144,            headers.remove(Stomp.Headers.Message.TIMESTAMP);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,131,        private String messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,132,        private StompSubscription subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,320,        message.setJMSTimestamp(System.currentTimeMillis());
activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,1846,"        assertFalse(""1234"".equals(mess_headers.get(Stomp.Headers.Message.TIMESTAMP)));"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,734,        destinationStatistics.getEnqueues().decrement();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,22,import javax.jms.ConnectionFactory;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,23,import javax.jms.MessageProducer;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,24,import javax.jms.Queue;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,25,import javax.jms.QueueBrowser;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,26,import javax.jms.Session;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,27,import javax.jms.TextMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,46,import org.apache.activemq.command.*;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,62, *
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,63, *
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,105,"                        DestinationInterceptor destinationInterceptor,Scheduler scheduler,ThreadPoolExecutor executor) throws IOException {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,107,        this.executor=executor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,129,    public Set <Destination> getDestinations(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,219,                                                   + oldContext.getConnection().getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,270,     synchronized (destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,271,        answer = destinations.get(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,272,        if (answer != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,273,            return answer;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,276,        boolean create = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,277,        if (destination.isTemporary())
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,278,            create = createIfTemp;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,279,"        answer = getRegion(destination).addDestination(context, destination, create);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,281,"        destinations.put(destination, answer);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,283,     }
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,284,
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,297,"        addDestination(context, info.getDestination(),true);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,304,
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,387,                || (producerExchange.getRegionDestination() != null && producerExchange.getRegionDestination().isDisposed())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,389,"            producerExchange.getConnectionContext().getBroker().addDestination(producerExchange.getConnectionContext(), destination, isAllowTempAutoCreationOnSend());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,415,        case ActiveMQDestination.QUEUE_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,416,            return queueRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,417,        case ActiveMQDestination.TOPIC_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,418,            return topicRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,419,        case ActiveMQDestination.TEMP_QUEUE_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,420,            return tempQueueRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,421,        case ActiveMQDestination.TEMP_TOPIC_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,422,            return tempTopicRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,423,        default:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,424,            throw createUnknownDestinationTypeException(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,526,               brokerInfos.remove(info.getBrokerId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,554,                ((Destination)message.getRegionDestination()).getDestinationStatistics().getProcessTime().addTime(totalTime);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,592,        ((TopicRegion)topicRegion).setKeepDurableSubsActive(keepDurableSubsActive);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,650,        boolean stamped=false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,652,            long expiration=message.getExpiration();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,653,"            message.setProperty(ORIGINAL_EXPIRATION,new Long(expiration));"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,659,
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,669,"    public void sendToDeadLetterQueue(ConnectionContext context,"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,670,"            MessageReference node, Subscription subscription){"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,671,        try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,672,            if(node!=null){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,673,                Message message=node.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,674,                if(message!=null && node.getRegionDestination()!=null){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,675,                    DeadLetterStrategy deadLetterStrategy=((Destination)node
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,676,                            .getRegionDestination()).getDeadLetterStrategy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,677,                    if(deadLetterStrategy!=null){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,678,                        if(deadLetterStrategy.isSendToDeadLetterQueue(message)){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,683,                            if(!message.isPersistent()){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,685,"                                message.setProperty(""originalDeliveryMode"","
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,686,"                                        ""NON_PERSISTENT"");"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,692,                            ActiveMQDestination deadLetterDestination=deadLetterStrategy
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,693,"                                    .getDeadLetterQueueFor(message, subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,694,                            if (context.getBroker()==null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,697,"                            BrokerSupport.resendNoCopy(context,message,"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,698,                                    deadLetterDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,702,"                            LOG.debug(""Dead Letter message with no DLQ strategy in place, message id: """
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,703,"                                    + message.getMessageId() + "", destination: "" + message.getDestination());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,708,        }catch(Exception e){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,709,"            LOG.warn(""Caught an exception sending to DLQ: ""+node,e);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,728,        synchronized(sequenceGenerator) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,733,
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,750,"            LOG.warn(""unmatched destination: "" + destination + "", in consumerControl: ""  + control);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,804,"                    log.info(dest.getName() + "" Inactive for longer than "" +"
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,805,"                             dest.getInactiveTimoutBeforeGC() + "" ms - removing ..."");"
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,411,"    public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,"
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,412,                                      Subscription subscription){
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,413,"        super.sendToDeadLetterQueue(context, messageReference, subscription);"
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,414,        try {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,415,            if(!messageReference.isAdvisory()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,416,                ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,417,                Message payload = messageReference.getMessage().copy();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,418,                payload.clearBody();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,419,"                fireAdvisory(context, topic,payload);"
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,421,        } catch (Exception e) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,422,"            handleFireFailure(""add to DLQ"", e);"
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,43, *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,44, *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,50,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,73,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,81,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,88,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,99,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,108,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,117,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,125,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,145,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,154,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,163,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,173,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,183,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,193,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,202,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,209,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,216,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,233,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,242,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,263,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,290,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,299,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,316,     *
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,321,"    void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,322,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,327,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,334,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,341,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,346,     * @param sub
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,350,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,354,     * @param destination
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,358,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,366,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,370,     * @param destination
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,374,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,380,
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,382,
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,50, *
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,51, *
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,260,"    public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,"
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,262,"        next.sendToDeadLetterQueue(context, messageReference, subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,273,
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,297,
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,298,    public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,50, *
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,51, *
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,253,"    public void sendToDeadLetterQueue(ConnectionContext context,"
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,254,"                                      MessageReference messageReference,"
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,255,                                      Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,261,
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,265,
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,284,    public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,294,            ConsumerControl control) {
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,51, *
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,52, *
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,263,"    public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,"
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,264,                                      Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,271,
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,275,
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,299,
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,300,    public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,52, *
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,53, *
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,75,     this.next.set(next);
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,272,"    public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,"
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,273,                                      Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,274,"        getNext().sendToDeadLetterQueue(context, messageReference, subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,280,
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,284,
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,308,
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,309,    public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,704,"    public void sendToDeadLetterQueue(ConnectionContext context, MessageReference node, Subscription subscription) {"
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,500,"    public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,"
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,509,"        super.sendToDeadLetterQueue(context, messageReference, subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,129,"    public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription) {"
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,132,"            super.sendToDeadLetterQueue(context, messageReference, subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,148,"                        super.sendToDeadLetterQueue(context, messageReference, subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,153,"                    super.sendToDeadLetterQueue(context, messageReference, subscription);"
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,206,
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,17, package org.apache.activemq.plugin;
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,31, * @author Filip Hanik
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,32, * @version 1.0
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,48,"    public void sendToDeadLetterQueue(ConnectionContext ctx, MessageReference msgRef,"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,49,                                      Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,61,        if (dest == null || destName == null ) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,62,"            //do nothing, no need to forward it"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,63,"            skipMessage(""NULL DESTINATION"",msgRef);"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,65,            //do nothing
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,66,"            skipMessage(""dropAll"",msgRef);"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,68,            //do nothing
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,69,"            skipMessage(""dropTemporaryTopics"",msgRef);"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,71,            //do nothing
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,72,"            skipMessage(""dropTemporaryQueues"",msgRef);"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,73,        } else if (destFilter!=null && matches(destName)) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,74,            //do nothing
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,75,"            skipMessage(""dropOnly"",msgRef);"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,78,"            next.sendToDeadLetterQueue(ctx, msgRef, subscription);"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,80,        if (dropped && getReportInterval()>0) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,81,            if ((++dropCount)%getReportInterval() == 0 ) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,82,"                log.info(""Total of ""+dropCount+"" messages were discarded, since their destination was the dead letter queue"");"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,88,        for (int i=0; destFilter!=null && i<destFilter.length; i++) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,89,            if (destFilter[i]!=null && destFilter[i].matcher(destName).matches()) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,98,"            String lmsg = ""Discarding DLQ BrokerFilter[""+prefix+""] - skipping message:"" + (msgRef!=null?msgRef.getMessage():null);"
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,142,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,20,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,21,import java.util.Date;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,22,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,23,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,24,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,25,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,38,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,39,import org.apache.activemq.broker.region.policy.SlowConsumerEntry;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,40,import org.apache.activemq.broker.scheduler.Job;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,41,import org.apache.activemq.command.ActiveMQBlobMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,42,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,43,import org.apache.activemq.command.ActiveMQMapMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,44,import org.apache.activemq.command.ActiveMQMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,45,import org.apache.activemq.command.ActiveMQObjectMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,46,import org.apache.activemq.command.ActiveMQStreamMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,47,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-unit-tests/src/test/java/org/apache/activemq/command/ActiveMQMessageTest.java,633,"        msg.setIntProperty(propertyName, (int)1);"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,63,public class TcpTransportServer extends TransportServerThreadSupport implements ServiceListener{
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,73,    protected boolean useQueueForAccept=true;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,76,     * trace=true -> the Transport stack where this TcpTransport
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,77,"     * object will be, will have a TransportLogger layer"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,78,     * trace=false -> the Transport stack where this TcpTransport
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,79,"     * object will be, will NOT have a TransportLogger layer, and therefore"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,80,     * will never be able to print logging messages.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,81,     * This parameter is most probably set in Connection or TransportConnector URIs.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,87,    protected int connectionTimeout =  30000;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,90,     * Name of the LogWriter implementation to use.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,91,     * Names are mapped to classes in the resources/META-INF/services/org/apache/activemq/transport/logwriters directory.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,92,     * This parameter is most probably set in Connection or TransportConnector URIs.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,96,     * Specifies if the TransportLogger will be manageable by JMX or not.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,97,"     * Also, as long as there is at least 1 TransportLogger which is manageable,"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,98,     * a TransportLoggerControl MBean will me created.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,102,     * startLogging=true -> the TransportLogger object of the Transport stack
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,103,     * will initially write messages to the log.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,104,     * startLogging=false -> the TransportLogger object of the Transport stack
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,105,     * will initially NOT write messages to the log.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,106,     * This parameter only has an effect if trace == true.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,107,     * This parameter is most probably set in Connection or TransportConnector URIs.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,119,"    public TcpTransportServer(TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,139,"            setConnectURI(new URI(bind.getScheme(), bind.getUserInfo(), resolveHostName(serverSocket, addr), serverSocket.getLocalPort(), bind.getPath(), bind.getQuery(), bind"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,140,                .getFragment()));
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,147,"                setConnectURI(new URI(bind.getScheme(), bind.getUserInfo(), addr.getHostAddress(), serverSocket.getLocalPort(), bind.getPath(), bind.getQuery(), bind.getFragment()));"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,169,     * @param wireFormatFactory The wireFormatFactory to set.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,176,     * Associates a broker info with the transport server so that the transport
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,177,     * can do discovery advertisements of the broker.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,249,     * @param backlog the backlog to set
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,263,     * @param useQueueForAccept the useQueueForAccept to set
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,284,                        }else {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,303,     * Allow derived classes to override the Transport implementation that this
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,304,     * transport server creates.
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,311,"    protected  Transport createTransport(Socket socket, WireFormat format) throws IOException {"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,346,        if(useQueueForAccept) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,366,"            socketHandlerThread = new Thread(null, run,"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,367,"                    ""ActiveMQ Transport Server Thread Handler: "" + toString(),"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,368,                    getStackSize());
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,370,            socketHandlerThread.setPriority(ThreadPriorities.BROKER_MANAGEMENT-1);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,386,        return (InetSocketAddress)serverSocket.getLocalSocketAddress();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,392,"                throw new ExceededMaximumConnectionsException(""Exceeded the maximum "" +"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,393,"                    ""number of allowed client connections. See the 'maximumConnections' "" +"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,394,"                    ""property on the TCP transport configuration URI in the ActiveMQ "" +"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,395,"                    ""configuration file (e.g., activemq.xml)"");"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,396,
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,400,"                options.put(""maxInactivityDurationInitalDelay"","
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,401,                    Long.valueOf(maxInactivityDurationInitalDelay));
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,402,"                options.put(""minmumWireFormatVersion"","
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,403,                    Integer.valueOf(minmumWireFormatVersion));
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,420,                Transport configuredTransport =
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,421,"                    transportFactory.serverConfigure( transport, format, options);"
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,470,     * @param maximumConnections the maximumConnections to set
activemq-client/src/main/java/org/apache/activemq/util/StringToListOfActiveMQDestinationConverter.java,42,"            text = text.substring(1, text.length() - 1);"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VmTransportNetworkBrokerTest.java,112,            threadCountAfterStop == originalThreadCount);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,789,            LinkedList<Transaction> orderedWork = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,792,                if (transaction == orderIndexUpdates.peek()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,793,                    orderedWork = orderIndexUpdates;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,794,                    orderIndexUpdates = new LinkedList<Transaction>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,795,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,796,                    // talking all the ordered work means that earlier
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,797,                    // and later threads do nothing.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,798,                    // this avoids contention/race on the sendLock that
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,799,                    // guards the actual work.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,803,            if (orderedWork != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,812,                for (Transaction tx : orderedWork) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,813,                    sendSyncs.get(tx).processSent();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,814,                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,815,                sendSyncs.remove(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,308,        return isActive();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,82,    private File dataDirFile;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,102,/*
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,103,        https://issues.apache.org/jira/browse/AMQ-4296
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,104,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,105,        a leveldb variant will fail. needs to have this test exercise all stores
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,106,        LevelDBStore persistenceFactory = new LevelDBStore();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,107,        persistenceFactory.setDirectory(dataDirFile);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,108,        brokerService.setPersistenceAdapter(persistenceFactory);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,109,*/
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,20,import java.io.File;
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,21,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,31,public class StoreQueueCursorJournalNoDuplicateTest extends StoreQueueCursorNoDuplicateTest {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,35,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,36,"        File dataFileDir = new File(""target/activemq-data/StoreQueueCursorJournalNoDuplicateTest"");"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,37,"        File journalDir = new File(dataFileDir, ""journal"").getCanonicalFile();"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,38,"        JournalImpl journal = new JournalImpl(journalDir, 3, 1024 * 1024 * 20);"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,39,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,41,        store.setDirectory(dataFileDir);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,42,"        JournalPersistenceAdapter journalAdaptor = new JournalPersistenceAdapter(journal, store, broker.getTaskRunnerFactory());"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,43,        journalAdaptor.setMaxCheckpointWorkers(1);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,44,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/region/cursors/StoreQueueCursorJournalNoDuplicateTest.java,45,        broker.setPersistenceAdapter(journalAdaptor);
activemq-broker/src/main/java/org/apache/activemq/network/DemandSubscription.java,104,                        activeWaiter.wait();
activemq-broker/src/main/java/org/apache/activemq/network/DemandSubscription.java,110,"                             ""expect potentially "" + this.dispatched.get() + "" duplicate deliveried"");"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,597,            // rollback any recovered inflight local transactions
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,543,"        assertEquals(0, view.getEnqueueCount());"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,23,import org.apache.activemq.jaas.GroupPrincipal;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,28,import javax.naming.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,29,import javax.naming.directory.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,30,import javax.naming.event.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,31,import javax.naming.ldap.LdapName;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,32,import javax.naming.ldap.Rdn;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,33,import java.util.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,34,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,35,/**
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,36, */
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,37,public class SimpleCachedLDAPAuthorizationMap extends DefaultAuthorizationMap {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,42,"    private String initialContextFactory = ""com.sun.jndi.ldap.LdapCtxFactory"";"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,49,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,53,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,57,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,58,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,60,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,64,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,71,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,74,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,82,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,83,"    protected HashMap<ActiveMQDestination, AuthorizationEntry> entries ="
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,84,"            new HashMap<ActiveMQDestination, AuthorizationEntry>();"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,107,            } catch (Exception e) {}
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,113,     * Returns the existing open context or creates a new one and registers listeners for
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,114,     * push notifications if such an update style is enabled.  This implementation should not
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,115,     * be invoked concurrently.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,119,     * @throws NamingException if there is an error setting things up
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,129,"                eventContext = ((EventDirContext)context.lookup(""""));"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,130,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,135,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,139,"                            this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.QUEUE, permissionType));"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,142,"                eventContext.addNamingListener(queueSearchBase, ""cn=*"", new SearchControls(),"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,143,"                        this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.QUEUE, null));"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,144,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,146,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,150,"                            this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.TOPIC, permissionType));"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,153,"                eventContext.addNamingListener(topicSearchBase, ""cn=*"", new SearchControls(),"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,154,"                        this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.TOPIC, null));"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,155,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,157,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,161,"                            this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.TEMP, permissionType));"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,171,    }
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,174,     * Queries the directory and initializes the policy based on the data in the directory.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,175,     * This implementation should not be invoked concurrently.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,176,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,177,     * @throws Exception if there is an unrecoverable error processing the directory contents
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,182,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,185,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,188,                processQueryResults(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,189,"                        currentContext.search(queueSearchBase, getFilterForPermissionType(permissionType), constraints),"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,190,"                        DestinationType.QUEUE, permissionType);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,192,"                LOG.error(""Policy not applied!.  Error processing policy under '"" + queueSearchBase + ""' with filter '"""
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,193,"                        + getFilterForPermissionType(permissionType) + ""'"", e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,196,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,199,                processQueryResults(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,200,"                        currentContext.search(topicSearchBase, getFilterForPermissionType(permissionType), constraints),"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,201,"                        DestinationType.TOPIC, permissionType);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,203,"                LOG.error(""Policy not applied!.  Error processing policy under '"" + topicSearchBase + ""' with filter '"""
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,204,"                        + getFilterForPermissionType(permissionType) + ""'"", e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,207,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,210,                processQueryResults(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,211,"                        currentContext.search(tempSearchBase, getFilterForPermissionType(permissionType), constraints),"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,212,"                        DestinationType.TEMP, permissionType);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,214,"                LOG.error(""Policy not applied!.  Error processing policy under '"" + tempSearchBase + ""' with filter '"""
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,215,"                        + getFilterForPermissionType(permissionType) + ""'"", e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,218,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,219,        setEntries(new ArrayList<DestinationMapEntry>(entries.values()));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,222,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,224,     * Processes results from a directory query in the context of a given destination type and permission type.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,225,     * This implementation should not be invoked concurrently.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,227,     * @param results the results to process
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,228,     * @param destinationType the type of the destination for which the directory results apply
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,229,     * @param permissionType the type of the permission for which the directory results apply
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,231,     * @throws Exception if there is an error processing the results
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,233,"    protected void processQueryResults(NamingEnumeration<SearchResult> results,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,234,"            DestinationType destinationType, PermissionType permissionType) throws Exception {"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,235,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,239,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,241,"                entry = getEntry(new LdapName(result.getNameInNamespace()), destinationType);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,243,"                LOG.error(""Policy not applied!  Error parsing authorization policy entry under """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,244,"                        + result.getNameInNamespace(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,247,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,253,     * Marks the time at which the authorization state was last refreshed.  Relevant for synchronous policy updates.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,254,     * This implementation should not be invoked concurrently.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,261,     * Retrieves or creates the {@link AuthorizationEntry} that corresponds to
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,262,     * the DN in {@code dn}.  This implementation should not be invoked concurrently.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,263,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,266,     * @param destinationType the type of the destination to get/create the entry for
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,267,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,269,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,274,"    protected AuthorizationEntry getEntry(LdapName dn, DestinationType destinationType) {"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,282,"                            + ""policy entry.  The permission group entries should be immediately below the """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,283,"                            + ""temporary policy base DN."");"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,285,                entry = getTempDestinationAuthorizationEntry();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,288,                    setTempDestinationAuthorizationEntry((TempDestinationAuthorizationEntry) entry);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,290,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,292,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,298,"                            + ""policy entry.  The destination pattern and permission group entries should be """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,299,"                            + ""nested below the queue or topic policy base DN."");"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,301,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,312,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,318,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,323,     * Applies the policy from the directory to the given entry within the context of the provided
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,324,     * permission type.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,326,     * @param entry the policy entry to apply the policy to
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,327,     * @param result the results from the directory to apply to the policy entry
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,328,     * @param permissionType the permission type of the data in the directory
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,330,     * @throws NamingException if there is an error applying the ACL
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,332,"    protected void applyACL(AuthorizationEntry entry, SearchResult result,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,333,            PermissionType permissionType) throws NamingException {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,334,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,338,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,340,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,346,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,351,"                    memberAttributes = context.getAttributes(memberDn,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,352,"                            new String[] {""objectClass"", groupNameAttribute, userNameAttribute});"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,354,                    LOG.error(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,355,"                            ""Policy not applied! Unknown member "" + memberDn"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,356,"                                    + "" in policy entry """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,357,"                                    + result.getNameInNamespace(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,360,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,363,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,366,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,371,"                            LOG.error(""Policy not applied! Group """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,372,                                    + memberDn
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,373,"                                    + ""does not have name attribute """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,374,"                                    + groupNameAttribute + "" under entry "" + result.getNameInNamespace());"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,377,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,380,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,385,"                            LOG.error(""Policy not applied! User """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,386,"                                    + memberDn + "" does not have name attribute """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,387,"                                    + userNameAttribute + "" under entry "" + result.getNameInNamespace());"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,390,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,394,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,399,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,401,"                LOG.error(""Policy not applied! Can't determine type of member """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,402,"                        + memberDn + "" under entry "" + result.getNameInNamespace());"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,403,            } else if (principalName != null){
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,406,"                        members.add(createGroupPrincipal(principalName, getGroupClass()));"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,408,"                        NamingException ne = new NamingException(""Can't create a group "" + principalName + "" of class "" + getGroupClass());"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,417,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,421,            LOG.error(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,422,"                    ""Policy not applied! Error adding principals to ACL under """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,423,"                            + result.getNameInNamespace(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,426,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,430,     * @param entry the policy entry to which the policy should be applied
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,431,     * @param permissionType the type of the permission that the policy will be applied to
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,432,     * @param acls the principals that represent the actual policy
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,437,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,452,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,454,     * Parses a DN into the equivalent {@link ActiveMQDestination}.  The default implementation
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,455,"     * expects a format of cn=<PERMISSION_NAME>,ou=<DESTINATION_PATTERN>,.... or"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,456,"     * ou=<DESTINATION_PATTERN>,.... for permission and destination entries, respectively."
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,457,"     * For example {@code cn=admin,ou=$,ou=...} or {@code ou=$,ou=...}."
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,459,     * @param dn the DN to parse
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,460,     * @param destinationType the type of the destination that we are parsing
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,464,     * @throws IllegalArgumentException if {@code destinationType} is {@link DestinationType#TEMP} or
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,465,     * if the format of {@code dn} is incorrect for for a topic or queue
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,471,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,476,"                // destination.  As such, we need to determine the proper RDN to work with based"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,480,                } else if (dn.size() == (getPrefixLengthForDestinationType(destinationType) + 1)){
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,483,                    throw new IllegalArgumentException(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,484,"                            ""Malformed DN for representing a permission or destination entry."");"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,488,                throw new IllegalArgumentException(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,489,"                        ""Cannot format destination for destination type "" + destinationType);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,491,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,494,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,496,     * Parses RDN values representing the destination name/pattern and
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,497,     * destination type into the equivalent {@link ActiveMQDestination}.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,498,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,503,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,505,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,509,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,515,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,524,"                throw new IllegalArgumentException(""Unknown destination type: """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,525,                        + destinationType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,532,     * Parses the RDN representing a destination name/pattern into the standard string representation
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,533,     * of the name/pattern.  This implementation does not care about the type of the RDN such that the RDN could
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,534,     * be a CN or OU.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,536,     * @param destinationName the RDN representing the name or pattern for the destination
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,543,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,545,     * Transcribes an existing set into a new set. Used to make defensive copies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,546,     * for concurrent access.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,547,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,550,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,551,     * @return a new set containing the same elements as {@code source} or
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,552,     *         {@code null} if {@code source} is {@code null}
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,561,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,564,     *
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,565,     * @throws IllegalArgumentException if {@code permissionType} is not supported
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,573,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,587,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,590,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,594,     * @throws IllegalArgumentException if {@code destinationType} is not supported
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,602,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,616,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,619,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,621,     * Performs a check for updates from the server in the event that synchronous updates are enabled
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,622,     * and are the refresh interval has elapsed.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,626,            if (!isContextAlive()) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,627,                try {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,628,                    context = createContext();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,629,                } catch (NamingException ne) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,630,"                    // LDAP is down, use already cached values"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,631,                    return;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,632,                }
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,633,            }
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,634,            reset();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,635,            setTempDestinationAuthorizationEntry(null);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,636,            entries.clear();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,638,"            LOG.debug(""Updating authorization map!"");"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,639,            try {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,640,                query();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,641,            } catch (Exception e) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,642,"                LOG.error(""Error updating authorization map.  Partial policy """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,643,"                        + ""may be applied until the next successful update."", e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,644,            }
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,647,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,649,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,651,"     * Provides synchronous refresh capabilities if so configured before delegating to the super implementation,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,652,     * and otherwise simply delegates to the super implementation.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,655,    protected synchronized Set<AuthorizationEntry> getAllEntries(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,657,        return super.getAllEntries(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,659,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,661,     * Provides synchronized and defensive access to the admin ACLs for temp destinations as the super
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,662,     * implementation returns live copies of the ACLs and {@link AuthorizationEntry} is not
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,663,     * setup for concurrent access.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,666,    public synchronized Set<Object> getTempDestinationAdminACLs() {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,668,        return transcribeSet(super.getTempDestinationAdminACLs());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,670,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,672,     * Provides synchronized and defensive access to the read ACLs for temp destinations as the super
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,673,     * implementation returns live copies of the ACLs and {@link AuthorizationEntry} is not
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,674,     * setup for concurrent access.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,676,    public synchronized Set<Object> getTempDestinationReadACLs() {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,678,        return transcribeSet(super.getTempDestinationReadACLs());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,682,     * Provides synchronized and defensive access to the write ACLs for temp destinations as the super
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,683,     * implementation returns live copies of the ACLs and {@link AuthorizationEntry} is not
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,684,     * setup for concurrent access.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,686,    public synchronized Set<Object> getTempDestinationWriteACLs() {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,688,        return transcribeSet(super.getTempDestinationWriteACLs());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,689,    }
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,690,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,691,    /**
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,692,     * Provides synchronized access to the admin ACLs for the destinations as
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,693,     * {@link AuthorizationEntry} is not setup for concurrent access.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,694,     */
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,695,    public synchronized Set<Object> getAdminACLs(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,696,        return super.getAdminACLs(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,700,     * Provides synchronized access to the read ACLs for the destinations as
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,701,     * {@link AuthorizationEntry} is not setup for concurrent access.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,703,    public synchronized Set<Object> getReadACLs(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,705,        return super.getReadACLs(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,709,     * Provides synchronized access to the write ACLs for the destinations as
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,710,     * {@link AuthorizationEntry} is not setup for concurrent access.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,712,    public synchronized Set<Object> getWriteACLs(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,714,        return super.getWriteACLs(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,720,     * @param namingEvent the new entry event that occurred
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,721,     * @param destinationType the type of the destination to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,722,     * @param permissionType the permission type to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,724,"    public synchronized void objectAdded(NamingEvent namingEvent, DestinationType destinationType,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,725,            PermissionType permissionType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,728,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,731,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,732,"            AuthorizationEntry entry = getEntry(name, destinationType);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,733,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,736,"                put(entry.getDestination(), entry);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,738,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,740,"            LOG.error(""Policy not applied!  Error parsing DN for addition of """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,741,"                    + result.getName(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,743,"            LOG.error(""Policy not applied!  Error processing object addition for addition of """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,744,"                    + result.getName(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,751,     * @param namingEvent the removed entry event that occurred
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,752,     * @param destinationType the type of the destination to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,753,     * @param permissionType the permission type to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,755,"    public synchronized void objectRemoved(NamingEvent namingEvent, DestinationType destinationType,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,756,            PermissionType permissionType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,759,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,762,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,763,"            AuthorizationEntry entry = getEntry(name, destinationType);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,764,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,767,"            LOG.error(""Policy not applied!  Error parsing DN for object removal for removal of """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,768,"                    + result.getName(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,770,"            LOG.error(""Policy not applied!  Error processing object removal for removal of """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,771,"                    + result.getName(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,776,     * Handler for renamed policy entries in the directory.  This handler deals with the renaming
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,777,"     * of destination entries as well as permission entries.  If the permission type is not null, it is"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,778,"     * assumed that we are dealing with the renaming of a permission entry.  Otherwise, it is assumed"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,779,     * that we are dealing with the renaming of a destination entry.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,781,     * @param namingEvent the renaming entry event that occurred
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,782,     * @param destinationType the type of the destination to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,783,     * @param permissionType the permission type to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,785,"    public synchronized void objectRenamed(NamingEvent namingEvent, DestinationType destinationType,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,786,            PermissionType permissionType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,794,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,797,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,801,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,804,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,806,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,808,                    NamingEnumeration<SearchResult> results = context.search(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,809,"                            newName,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,810,"                            getFilterForPermissionType(newPermissionType), controls);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,811,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,818,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,820,"                    LOG.error(""Policy not applied!  Error processing object rename for rename of """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,821,"                            + oldBinding.getName() + "" to "" + newBinding.getName()"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,822,"                            + "".  Could not determine permission type of new object."");"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,824,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,831,"                        put(newDest, entry);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,832,"                        remove(oldDest, entry);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,840,"            LOG.error(""Policy not applied!  Error parsing DN for object rename for rename of """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,841,"                    + oldBinding.getName() + "" to "" + newBinding.getName(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,843,"            LOG.error(""Policy not applied!  Error processing object rename for rename of """
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,844,"                    + oldBinding.getName() + "" to "" + newBinding.getName(), e);"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,851,     * @param namingEvent the changed entry event that occurred
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,852,     * @param destinationType the type of the destination to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,853,     * @param permissionType the permission type to which the event applies
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,855,"    public synchronized void objectChanged(NamingEvent namingEvent,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,856,"            DestinationType destinationType, PermissionType permissionType) {"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,865,     * @param namingExceptionEvent the exception event
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,930,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,977,    public void setPermissionGroupMemberAttribute(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,978,            String permissionGroupMemberAttribute) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,981,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,986,    public void setAdminPermissionGroupSearchFilter(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,987,            String adminPermissionGroupSearchFilter) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,995,    public void setReadPermissionGroupSearchFilter(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,996,            String readPermissionGroupSearchFilter) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1004,    public void setWritePermissionGroupSearchFilter(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1005,            String writePermissionGroupSearchFilter) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1008,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1032,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1056,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1064,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1066,"        QUEUE,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1067,"        TOPIC,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1068,        TEMP;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1070,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1072,"        READ,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1073,"        WRITE,"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1074,        ADMIN;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1076,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1078,     * Listener implementation for directory changes that maps change events to
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1079,     * destination types.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1081,    protected class CachedLDAPAuthorizationMapNamespaceChangeListener implements
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1082,"            NamespaceChangeListener, ObjectChangeListener {"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1083,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1086,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1088,"         * Creates a new listener.  If {@code permissionType} is {@code null}, add"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1089,         * and remove events are ignored as they do not directly affect policy state.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1090,         * This configuration is used when listening for changes on entries that represent
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1091,         * destination patterns and not for entries that represent permissions.
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1093,         * @param destinationType the type of the destination being listened for
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1094,         * @param permissionType the optional permission type being listened for
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1096,        public CachedLDAPAuthorizationMapNamespaceChangeListener(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1097,"                DestinationType destinationType, PermissionType permissionType) {"
activemq-unit-tests/src/test/java/org/apache/activemq/security/AbstractCachedLDAPAuthorizationMapLegacyTest.java,115,"        failedACLs = map.getReadACLs(new ActiveMQQueue(""TEST.FOO""));"
activemq-unit-tests/src/test/java/org/apache/activemq/security/AbstractCachedLDAPAuthorizationMapLegacyTest.java,116,"        assertEquals(""set size: "" + failedACLs, 0, failedACLs.size());"
activemq-unit-tests/src/test/java/org/apache/activemq/security/AbstractCachedLDAPAuthorizationMapLegacyTest.java,338,        Thread.sleep(2000);
activemq-unit-tests/src/test/java/org/apache/activemq/security/AbstractCachedLDAPAuthorizationMapLegacyTest.java,340,"        failedACLs = map.getReadACLs(new ActiveMQQueue(""FAILED""));"
activemq-unit-tests/src/test/java/org/apache/activemq/security/AbstractCachedLDAPAuthorizationMapLegacyTest.java,341,"        assertEquals(""set size: "" + failedACLs, 2, failedACLs.size());"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,109,"        // Allow for only a couple outstanding update requests, they can be slow so we"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,111,"        updaterService = new ThreadPoolExecutor(1, 1, 0, TimeUnit.SECONDS,"
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1161,            if (!disposed && (backup || priorityBackup) && backups.size() < backupPoolSize) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1178,                for (Iterator<URI> iter = backupList.iterator(); !disposed && iter.hasNext() && backups.size() < backupPoolSize; ) {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverPriorityTest.java,118,"        setClientUrl(""failover:("" + BROKER_A_CLIENT_TC_ADDRESS + "","" + BROKER_B_CLIENT_TC_ADDRESS + "","" + BROKER_C_CLIENT_TC_ADDRESS + "")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false&backupPoolSize=2"");"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,20,import org.apache.activemq.command.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,26,import org.apache.qpid.proton.amqp.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,27,import org.apache.qpid.proton.amqp.messaging.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,32,import org.apache.qpid.proton.amqp.transaction.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,33,import org.apache.qpid.proton.amqp.transport.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,34,import org.apache.qpid.proton.engine.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,40,import org.apache.qpid.proton.jms.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,47,import javax.jms.InvalidSelectorException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,48,import java.io.IOException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,49,import java.io.UnsupportedEncodingException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,50,import java.util.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,51,import java.util.concurrent.ConcurrentHashMap;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,52,import java.util.concurrent.locks.ReentrantLock;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,53,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,315,    private ConnectionInfo connectionInfo = new ConnectionInfo();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,661,        private boolean presettle;
activemq-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,19,import java.util.Iterator;
activemq-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,27,import org.apache.activemq.security.SimpleSecurityBrokerSystemTest;
activemq-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,32, *
activemq-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,50,    protected void assertMessagesReceivedAreValid(List receivedMessages) throws JMSException {
activemq-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,54,        for (Iterator iter = receivedMessages.iterator(); iter.hasNext();) {
activemq-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,55,            Message message = (Message)iter.next();
activemq-unit-tests/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.java,57,
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,41,     * @see
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,42,     * org.apache.activemq.MessageDispatchChannelI#enqueue(org.apache.activemq
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,43,     * .command.MessageDispatch)
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,48,
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,56,     * @see
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,57,     * org.apache.activemq.MessageDispatchChannelI#enqueueFirst(org.apache.activemq
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,58,     * .command.MessageDispatch)
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,73,        // synchronized (mutex) {
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,75,        // }
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,213,
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,228,
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,234,
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,240,"         priority = Math.max(message.getMessage().getPriority(), 0);"
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,241,"         priority = Math.min(priority, 9);"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,28,import java.io.File;
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,29,import java.util.Vector;
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,30,
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,31,import static org.fusesource.hawtbuf.UTF8Buffer.utf8;
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,32,import static org.junit.Assert.assertArrayEquals;
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,33,import static org.junit.Assert.assertEquals;
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,34,
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,35,
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,42,    AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {};
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,46,
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,52,        while(true) {
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,86,"        TransportConnector connector =brokerService.addConnector(""amqp+ssl://0.0.0.0:""+sslPort);"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,88,"        connector = brokerService.addConnector(""amqp://0.0.0.0:""+port);"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,92,
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,101,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,112,    static final public byte[] EMPTY_BYTE_ARRAY = new byte[]{};
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,129,        if( transport.isTrace() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,154,"//                    System.out.println(""writing: "" + buffer.toString().substring(5).replaceAll(""(..)"", ""$1 ""));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,160,"//            System.out.println(""write done"");"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,173,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,184,        if( command.getClass() == AmqpHeader.class ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,185,            AmqpHeader header = (AmqpHeader)command;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,186,            switch( header.getProtocolId() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,192,"                    sasl.setMechanisms(new String[]{""ANONYMOUS"", ""PLAIN""});"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,199,            frame = (Buffer)command;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,205,"//        System.out.println(""read: "" + frame.toString().substring(5).replaceAll(""(..)"", ""$1 ""));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,206,        while( frame.length > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,214,            try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,216,                if( sasl!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,218,                    if( sasl.getRemoteMechanisms().length > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,219,"                        if( ""PLAIN"".equals(sasl.getRemoteMechanisms()[0]) ) {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,223,                            if( parts.length > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,226,                            if( parts.length > 1 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,233,"                        } else if( ""ANONYMOUS"".equals(sasl.getRemoteMechanisms()[0]) ) {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,249,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,254,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,272,                    ((AmqpDeliveryListener)link.getContext()).onClose();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,279,                    ((AmqpDeliveryListener)link.getContext()).drainCheck();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,283,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,286,                    //TODO - close links?
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,306,        if( !closing ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,312,                    if( !closedSocket) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,320,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,323,        if( !closing ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,357,            //ignore
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,371,        public void onClose() throws Exception {}
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,372,        public void drainCheck() {}
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,379,//        configureInactivityMonitor(connect.keepAlive());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,396,// TODO: figure out how to close /w an error.
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,397,"//                    protonConnection.setLocalError(new EndpointError(exception.getClass().getName(), exception.getMessage()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,416,        AmqpSessionContext sessionContext = (AmqpSessionContext)session.getContext();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,417,        if( sessionContext!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,439,    protected InboundTransformer getInboundTransformer()  {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,462,            Receiver receiver = ((Receiver)delivery.getLink());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,463,            if( !delivery.isReadable() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,468,            if( current==null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,473,            byte data[] = new byte[1024*4];
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,474,"            while( (count = receiver.recv(data, 0, data.length)) > 0 ) {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,479,            if( count == 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,508,            if( destination!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,512,            if( message.getMessageId()==null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,517,            if( remoteState!=null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,527,                    if( !delivery.remotelySettled()  ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,528,                        if( response.isException() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,529,                            ExceptionResponse er = (ExceptionResponse)response;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,544,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,548,    class Transaction {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,564,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,572,            while( len > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,574,"                assert decoded > 0: ""Make progress decoding the message"";"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,579,            Object action = ((AmqpValue)msg.getBody()).getValue();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,580,"            System.out.println(""COORDINATOR received: ""+action+"", [""+buffer+""]"");"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,581,            if( action instanceof Declare ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,583,                if( declare.getGlobalId()!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,590,"                System.out.println(""started transaction ""+txid);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,596,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,597,            } else if( action instanceof Discharge) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,602,                if( discharge.getFail() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,603,"                    System.out.println(""rollback transaction ""+txid);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,604,                    operation = TransactionInfo.ROLLBACK ;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,606,"                    System.out.println(""commit transaction ""+txid);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,613,                        if( response.isException() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,614,                            ExceptionResponse er = (ExceptionResponse)response;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,623,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,625,"                throw new Exception(""Expected coordinator message type: ""+action.getClass());"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,628,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,631,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,636,            if( remoteTarget instanceof Coordinator ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,646,                if( target.getDynamic() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,668,"                            ((LinkImpl)receiver).setLocalError(new EndpointError(exception.getClass().getName(), exception.getMessage()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,679,"            ((LinkImpl)receiver).setLocalError(new EndpointError(exception.getSymbolicName(), exception.getMessage()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,685,        if( terminus == null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,687,        } else if( terminus instanceof org.apache.qpid.proton.amqp.messaging.Source) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,688,            org.apache.qpid.proton.amqp.messaging.Source source = (org.apache.qpid.proton.amqp.messaging.Source)terminus;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,689,            if( source.getAddress() == null || source.getAddress().length()==0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,693,        } else if( terminus instanceof org.apache.qpid.proton.amqp.messaging.Target) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,694,            org.apache.qpid.proton.amqp.messaging.Target target = (org.apache.qpid.proton.amqp.messaging.Target)terminus;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,695,            if( target.getAddress() == null || target.getAddress().length()==0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,699,        } else if( terminus instanceof Coordinator ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,700,            Coordinator target = (Coordinator)terminus;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,703,"            throw new RuntimeException(""Unexpected terminus type: ""+terminus);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,709,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,742,            if( tagCache.size() < 1024 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,747,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,750,            if( !closed ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,760,            if( !closed ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,771,            while(!closed) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,773,                while( currentBuffer !=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,775,                    if( sent > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,777,                        if( currentBuffer.length == 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,778,                            if( presettle ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,791,                if( outbound.isEmpty() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,798,                    if( jms==null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,805,                        if( amqp!=null && amqp.getLength() > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,806,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,808,                            if( presettle ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,815,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,818,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,829,            if( tag !=null && tag.length>0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,833,            if( ackType == -1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,844,                ack.setAckType((byte)ackType);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,848,                if( remoteState!=null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,857,                        if( response.isException() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,874,            if( outbound.isEmpty() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,883,            if( state instanceof Accepted ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,884,                if( !delivery.remotelySettled() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,888,            } else if( state instanceof Rejected) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,892,            } else if( state instanceof Released) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,895,            } else if( state instanceof Modified) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,897,                if ( modified.getDeliveryFailed() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,898,                  // increment delivery counter..
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,899,                  md.setRedeliveryCounter(md.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,903,                if( undeliverableHere !=null && undeliverableHere ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,912,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,918,        org.apache.qpid.proton.amqp.messaging.Source source = (org.apache.qpid.proton.amqp.messaging.Source)sender.getRemoteSource();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,926,            if( source!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,929,                    DescribedType value = (DescribedType)filter.get(JMS_SELECTOR);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,930,                    if( value!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,937,"                            ((LinkImpl)sender).setLocalError(new EndpointError(""amqp:invalid-field"", e.getMessage()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,947,            if( source == null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,960,                consumerContext.closed=true;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,968,"                            ((LinkImpl)sender).setLocalError(new EndpointError(name, exception.getMessage()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,975,"            } else if( contains(source.getCapabilities(), DURABLE_SUBSCRIPTION_ENDED) ) {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,976,                consumerContext.closed=true;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,980,            } else if( source.getDynamic() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,998,            if( source.getDistributionMode() == COPY && dest.isQueue() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1001,            if( DURABLE.equals(source.getDurable()) && dest.isTopic() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1007,                DescribedType value = (DescribedType)filter.get(NO_LOCAL);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1008,                if( value!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1020,                        if( exception instanceof InvalidSelectorException ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1023,"                        ((LinkImpl)sender).setLocalError(new EndpointError(name, exception.getMessage()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1034,"            ((LinkImpl)sender).setLocalError(new EndpointError(e.getSymbolicName(), e.getMessage()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1040,        if( haystack!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1042,                if( capability == needle) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1061,    ////////////////////////////////////////////////////////////////////////////
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1065,    ////////////////////////////////////////////////////////////////////////////
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1109,
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AMQ4563Test.java,47,    public void testTransactions() throws Exception {
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AMQ4563Test.java,53,        Connection connection = createConnection();
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AMQ4563Test.java,77,        Connection connection = createConnection();
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AMQ4563Test.java,107,    private Connection createConnection() throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,515,            if (message.getMessageId() == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,516,"                message.setMessageId(new MessageId(producerId, messageIdGenerator.getNextSequenceId()));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,517,            }
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,144,                this.setMessageId(messageId);
activemq-client/src/main/java/org/apache/activemq/command/MessageId.java,110,"            key = producerId.toString() + "":"" + producerSequenceId;"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,426,            command.setMessageId(message.getMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,439,            command.setMessageId(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,454,            final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,593,                final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,710,            command.setMessageId(messageId.toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2271,                ackedAndPrepared.add(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2283,                    ackedAndPrepared.remove(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,138,            command.setMessageId(message.getMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,145,            command.setMessageId(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,156,            final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,244,            final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,285,            command.setMessageId(messageId.toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,65,    private final WireFormat wireFormat = new OpenWireFormat();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,338,                    Message msg = (Message) wireFormat.unmarshal(new DataInputStream(addOp.getCommand().getMessage()
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,344,                    MessageAck ack = (MessageAck) wireFormat.unmarshal(new DataInputStream(ackb.newInput()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,63,public class TempKahaDBStore extends TempMessageDatabase implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,578,
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AMQ4563Test.java,117,            MessageConsumer consumer = session.createConsumer(queue);
activemq-client/src/main/java/org/apache/activemq/command/MessageId.java,86,        this.key = key;
activemq-client/src/main/java/org/apache/activemq/command/MessageId.java,131,                key = textView;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,29,import java.util.Set;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,31,import java.util.concurrent.*;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,63,import org.apache.activemq.store.kahadb.data.KahaDestination.DestinationType;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,71,import org.apache.activemq.store.kahadb.disk.journal.Location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,72,import org.apache.activemq.store.kahadb.disk.page.Transaction;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,99,    private boolean concurrentStoreAndDispatchTransactions = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,180,        if( brokerService!=null ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,181,            wireFormat.setVersion(brokerService.getStoreOpenWireVersion());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,189,"                asyncQueueJobQueue, new ThreadFactory() {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,190,                    public Thread newThread(Runnable runnable) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,191,"                        Thread thread = new Thread(runnable, ""ConcurrentQueueStoreAndDispatch"");"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,192,                        thread.setDaemon(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,193,                        return thread;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,194,                    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,195,                });
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,197,"                asyncTopicJobQueue, new ThreadFactory() {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,198,                    public Thread newThread(Runnable runnable) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,199,"                        Thread thread = new Thread(runnable, ""ConcurrentTopicStoreAndDispatch"");"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,200,                        thread.setDaemon(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,201,                        return thread;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,202,                    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,203,                });
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,148,               version = is.readInt();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,150,                version=1;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,42, *
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,44, *
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,121,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,147,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,234,        sub.setUsePrefetchExtension(isUsePrefetchExtension());
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,236,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,242,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,445,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,446,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,451,     *
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,460,     *
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,467,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,525,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,532,    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,533,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,540,    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,541,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,556,    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,557,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,668,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,686,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,690,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,694,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,762,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,770,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,777, }
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,780,        this.storeUsageHighWaterMark = storeUsageHighWaterMark;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,790,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,794,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,795,
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,34,import org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,201,                } else if (dest instanceof VirtualTopicInterceptor) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,202,                    VirtualTopicInterceptor virtualTopic = (VirtualTopicInterceptor) dest;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,203,"                    virtualTopic.getTopic().deleteSubscription(context, key);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,29, * A Destination which implements <a
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,30," * href=""http://activemq.org/site/virtual-destinations.html"">Virtual Topic</a>"
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,37,"    private final LRUCache<ActiveMQDestination,ActiveMQQueue> cache = new LRUCache<ActiveMQDestination,ActiveMQQueue>();"
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,61,        synchronized(cache){
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,63,            if (queue==null){
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,65,"                cache.put(original,queue);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,22,import javax.jms.InvalidSelectorException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,27,import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,39,"    public QueueBrowserSubscription(Broker broker,SystemUsage usageManager, ConnectionContext context, ConsumerInfo info)"
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,40,        throws JMSException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,41,"        super(broker,usageManager, context, info);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,45,        return !((QueueMessageReference)node).isAcked();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,49,"        return ""QueueBrowserSubscription:"" + "" consumer="" + info.getConsumerId() + "", destinations="""
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,50,"               + destinations.size() + "", dispatched="" + dispatched.size() + "", delivered="""
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,51,"               + this.prefetchExtension + "", pending="" + getPendingQueueSize();"
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,60,        if( !browseDone && queueRefs == 0 && destinationsAdded) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,61,            browseDone=true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,73,"    protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n)"
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,74,        throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,75,     if (info.isNetworkSubscription()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,76,"      super.acknowledge(context, ack, n);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,77,     }
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,81,        queueRefs++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,91,
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,241,        sub.setMaxProducersToAudit(getMaxProducersToAudit());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,22,import java.net.URI;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,34,import org.apache.activemq.broker.TransportConnector;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,49,    private URI connectUri;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,55,"        TransportConnector connector = broker.addConnector(""tcp://0.0.0.0:0"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,67,        connectUri = connector.getConnectUri();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,68,        factory = new ActiveMQConnectionFactory(connectUri);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,104,        doTestBrowsing(76);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4487Test.java,127,"            LOG.info(""Browsed Message: {}"", m.getJMSMessageID());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,247,        sub.setMaxAuditDepth(Integer.MAX_VALUE);
activemq-unit-tests/src/test/java/org/apache/activemq/JmsQueueBrowserTest.java,310,        for (int i = 0; i < 1000; i++) {
activemq-unit-tests/src/test/java/org/apache/activemq/JmsQueueBrowserTest.java,332,"        assertEquals(1000, numberBrowsed);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,35,import org.apache.activemq.broker.BrokerServiceAware;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,45,import org.apache.activemq.broker.Locker;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,65, *
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,69, *
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,71, *
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,72, *
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,78,"                                                                   ""META-INF/services/org/apache/activemq/store/jdbc/"");"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,80,"                                                                    ""META-INF/services/org/apache/activemq/store/jdbc/lock/"");"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,97,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,103,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,143,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,148,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,166,     }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,168,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,188,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,273,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,377,     *
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,408,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,421,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,423,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,628,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,669,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,681, public int getMaxProducersToAudit() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,682,  return maxProducersToAudit;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,683, }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,685, public void setMaxProducersToAudit(int maxProducersToAudit) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,686,  this.maxProducersToAudit = maxProducersToAudit;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,687, }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,689, public int getMaxAuditDepth() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,690,  return maxAuditDepth;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,691, }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,693, public void setMaxAuditDepth(int maxAuditDepth) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,694,  this.maxAuditDepth = maxAuditDepth;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,695, }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,697, public boolean isEnableAudit() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,698,  return enableAudit;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,699, }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,701, public void setEnableAudit(boolean enableAudit) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,702,  this.enableAudit = enableAudit;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,703, }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,767,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,819,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,317,            consumerInfo.setSubscriptionName(connect.clientId().toString());
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/AbstractMQTTTest.java,20,import static org.junit.Assert.assertEquals;
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/AbstractMQTTTest.java,21,import static org.junit.Assert.assertNotNull;
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,117,        addMQTTConnector();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,118,        brokerService.start();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,119,        final MQTTClientProvider publisher = getMQTTClientProvider();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,120,        initializeConnection(publisher);
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,122,        MQTT mqtt = createMQTTConnection();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,123,"        mqtt.setClientId(""MQTT-Client"");"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,124,        mqtt.setCleanSession(false);
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,126,        {
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,127,            final BlockingConnection subscriber = mqtt.blockingConnection();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,128,            subscriber.connect();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,129,"            Topic[] topic = {new Topic(""foo"", QoS.EXACTLY_ONCE)};"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,130,            subscriber.subscribe(topic);
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,131,
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,132,            for (int i = 0; i < numberOfMessages; i++) {
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,133,"                String payload = ""Test Message: "" + i;"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,134,"                publisher.publish(""foo"", payload.getBytes(), EXACTLY_ONCE);"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,135,            }
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,137,            for (int i = 0; i < numberOfMessages / 2; i++) {
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,138,"                Message message = subscriber.receive(5, TimeUnit.SECONDS);"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,139,                assertNotNull(message);
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,140,                byte[] payload = message.getPayload();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,141,                String messageContent = new String(payload);
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,142,                if (i % 100 == 0) {
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,143,"                    LOG.debug(""Received message from topic: "" + message.getTopic() +"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,144,"                              "" Message content: "" + messageContent);"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,145,                }
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,146,                message.ack();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,147,            }
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,149,            subscriber.disconnect();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,150,        }
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,152,        publisher.disconnect();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,154,        final BlockingConnection subscriber = mqtt.blockingConnection();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,155,        subscriber.connect();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,156,"        Topic[] topic = {new Topic(""foo"", QoS.EXACTLY_ONCE)};"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,157,        subscriber.subscribe(topic);
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,159,        for (int i = 0; i < numberOfMessages / 2; i++) {
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,160,"            Message message = subscriber.receive(5, TimeUnit.SECONDS);"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,162,            byte[] payload = message.getPayload();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,164,            if (i % 100 == 0) {
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,165,"                LOG.debug(""Received message from topic: "" + message.getTopic() +"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,166,"                          "" Message content: "" + messageContent);"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,167,            }
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,171,        subscriber.disconnect();
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,222,"        addMQTTConnector("""");"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,252,"//                LOG.info(""Client Received:\n""+frame);"
activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java,257,"//                LOG.info(""Client Sent:\n"" + frame);"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,23,import org.eclipse.jetty.continuation.ContinuationSupport;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,24,
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,28,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,29,
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,30,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,31,
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,37,
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,38,    private long maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,39,    private AjaxWebClient client;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,42,    private LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>();
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,61,
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,69,"                LOG.debug( ""message is "" + message );"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,70,                if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,71,                    if( continuation.isSuspended() ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,72,"                        LOG.debug( ""Resuming suspended continuation "" + continuation );"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,73,"                        continuation.setAttribute(""undelivered_message"", new UndeliveredAjaxMessage( message, consumer ) );"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,76,"                        LOG.debug( ""Message available, but continuation is already resumed.  Buffer for next time."" );"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,77,"                        bufferMessageForDelivery( message, consumer );"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,83,
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,93,"                bufferMessageForDelivery( message, consumer );"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,99,
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,100,"    public void bufferMessageForDelivery( Message message, MessageConsumer consumer ) {"
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,101,        if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,102,            synchronized( undeliveredMessages ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,103,"                undeliveredMessages.addLast( new UndeliveredAjaxMessage( message, consumer ) );"
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,316,"                // will expire (seems like a bug in Jetty Servlet 3 continuations,"
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,322,"                             LOG.debug(""Continuation "" + cont.toString() + "" expired."");"
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,329,"                            LOG.debug(""Continuation "" + cont.toString() + "" completed."");"
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,384,                for (Iterator<UndeliveredAjaxMessage> it = undeliveredMessages.iterator(); it.hasNext(); ) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,428,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,584,                    redeliveredWaitingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1803,        reference.drop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1804,        destinationStatistics.getMessages().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1805,        pagedInMessagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1806,        try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1807,            pagedInMessages.remove(reference.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1808,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1809,            pagedInMessagesLock.writeLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,421,        if (isUseJmx()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,422,            registerNetworkConnectorMBean(connector);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,423,        }
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,47,            result = result / 1000 * 1000;
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,54,                ServerSocket ss = new ServerSocket(0);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,59,"                LOG.warn(""could not generate unique stub by using DNS and binding to local port"", ioe);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,115,"                ""ALTER TABLE "" + getFullMessageTableName() + "" ADD XID "" + binaryDataType,"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,117,"                ""ALTER TABLE "" + getFullAckTableName() + "" ADD XID "" + binaryDataType,"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,32,import org.apache.activemq.broker.region.BaseDestination;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,231,"                setBinaryData(s, 8, xidVal);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,233,"                setBinaryData(s, 8, null);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,359,"                setBinaryData(s, 1, xidVal);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,446,"                setBinaryData(s, 1, xidVal);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,483,"                setBinaryData(s, 1, xidVal);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,960,"                byte[] encodedXid = getBinaryData(rs, 2);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,974,"                byte[] encodedXid = getBinaryData(rs, 1);"
assembly/src/release/example/src/ProducerTool.java,169,            if (transacted) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,111,    // Messages that are paged in but have not yet been targeted at a
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,112,    // subscription
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,180,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,249,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,450,           // consumersLock.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,453,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,477,            }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,491,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,596,            }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,602,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,642,                    LOG
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,643,"                            .info(""Usage Manager Memory Limit ("""
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,644,                                    + memoryUsage.getLimit()
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,645,"                                    + "") reached on """
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,646,                                    + getActiveMQDestination().getQualifiedName()
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,647,"                                    + "". Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it."""
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,648,"                                    + "" See http://activemq.apache.org/producer-flow-control.html for more info"");"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,982,        try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,984,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1123,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1212,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1233,        try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1238,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1349,            try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1351,            }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1418,            }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1508,            try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1510,            }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1537,            try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1539,            }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1618,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1643,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1673,                            if (!node.isAcked() && !browser.getPending().getMessageAudit().isDuplicate(node.getMessageId())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1753,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1796,            try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1798,            }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1844,        try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1846,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2047,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2107,                }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2152,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2190,        try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2196,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2309,        }finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2349,            }finally {
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,54,"                int idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, ""0""));"
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,57,                ServerSocket ss = new ServerSocket(idGeneratorPort);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,60,                ss.close();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,63,"    private String readTimeoutParameter = ""readTimeout"";"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,69,"    private HashMap<String, WebClient> clients = new HashMap<String, WebClient>();"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,212,
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,257,"//                response.setContentType(""text/plain"");"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,258,"//                writer.write(""No message received"");"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,259,//                writer.flush();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,861,                messageListener.onMessage(message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,862,            } catch (RuntimeException e) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,863,"                LOG.error(""error dispatching message: "", e);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,864,                // A problem while invoking the MessageListener does not
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,865,"                // in general indicate a problem with the connection to the broker, i.e."
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,866,                // it will usually be sufficient to let the afterDelivery() method either
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,867,                // commit or roll back in order to deal with the exception.
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,868,"                // However, we notify any registered client internal exception listener"
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,869,                // of the problem.
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,870,                connection.onClientInternalException(e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,871,            }
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,872,
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,873,            try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,874,"                MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,919,                asyncSendPacket(ack);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,226,"                throw new RuntimeException(""Endpoint after delivery notification failure"", e);"
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1853,"                      jvmLimit / (1024 * 1024) + "" mb"");"
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1874,"                             "" only has "" + dirFreeSpace / (1024 * 1024) + "" mb of usable space"");"
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1909,"                          "" only has "" + dirFreeSpace / (1024 * 1024) + "" mb of usable space"");"
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1949,"                             "" only has "" + dirFreeSpace / (1024 * 1024) + "" mb of usable space"");"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,173,    private long determineTimeDifference(Connection connection) throws SQLException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,180,"            LOG.info(getLeaseHolderId() + "" diff from db: "" + diff + "", db time: "" + timestamp);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,181,            if (diff > maxAllowableDiffFromDBTime || diff < -maxAllowableDiffFromDBTime) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,183,                result = diff;
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/LeaseDatabaseLockerTest.java,19,import static org.junit.Assert.assertEquals;
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/LeaseDatabaseLockerTest.java,20,import static org.junit.Assert.assertFalse;
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/LeaseDatabaseLockerTest.java,21,import static org.junit.Assert.assertTrue;
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/LeaseDatabaseLockerTest.java,22,
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/LeaseDatabaseLockerTest.java,32,
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,292,"       res.append(""${ACTIVEMQ_HOME}/bin/activemq \""$*\"""");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,49,    public void testTransactions() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/LockableServiceSupport.java,125,"            LOG.warn(""locker keepalive resulted in: "" + e, e);"
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,61,"            XAException xae = new XAException(""COMMIT FAILED: Transaction rolled back."");"
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,69,        // Sync on transaction store to avoid out of order messages in the cursor
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,70,        // https://issues.apache.org/activemq/browse/AMQ-2594
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,72,"            transactionStore.commit(getTransactionId(), false,preCommitTask, postCommitTask);"
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,77,"            XAException xae = new XAException(""STORE COMMIT FAILED: Transaction rolled back."");"
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,112,"        XAException xae = new XAException(""Prepare not implemented on Local Transactions."");"
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,92,"            XAException xae = new XAException(""STORE COMMIT FAILED: Transaction rolled back."");"
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,107,"            XAException xae = new XAException(""Cannot do 2 phase commit if the transaction has not been prepared."");"
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,121,"            XAException xae = new XAException(""PRE-PREPARE FAILED: Transaction rolled back."");"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,43,    private AtomicBoolean stopStartInProgress = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,76,"            if (!stopStartInProgress.compareAndSet(false, true)) {"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,77,                // we are already working on it
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,78,                return;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,79,            }
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,80,"            LOG.info(""Initiating stop/restart of broker transport due to IO exception, "" + exception, exception);"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,81,
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,82,"            new Thread(""stop transport connectors on IO exception"") {"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,83,                public void run() {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,84,                    try {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,85,                        ServiceStopper stopper = new ServiceStopper();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,86,                        broker.stopAllConnectors(stopper);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,87,                    } catch (Exception e) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,88,"                        LOG.warn(""Failure occurred while stopping broker connectors"", e);"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,89,                    }
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,90,                }
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,91,            }.start();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,92,
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,93,            // resume again
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,94,"            new Thread(""restart transport connectors post IO exception"") {"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,95,                public void run() {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,96,                    try {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,97,                        while (hasLockOwnership() && isPersistenceAdapterDown()) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,98,"                            LOG.info(""waiting for broker persistence adapter checkpoint to succeed before restarting transports"");"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,99,                            TimeUnit.MILLISECONDS.sleep(resumeCheckSleepPeriod);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,101,                        broker.startAllConnectors();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,102,                    } catch (Exception e) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,103,"                        LOG.warn(""Stopping broker due to failure while restarting broker connectors"", e);"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,104,                        stopBroker(e);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,105,                    } finally {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,106,"                        stopStartInProgress.compareAndSet(true, false);"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,108,                }
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,110,                private boolean isPersistenceAdapterDown() {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,111,                    boolean checkpointSuccess = false;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,112,                    try {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,113,                        broker.getPersistenceAdapter().checkpoint(true);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,114,                        checkpointSuccess = true;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,115,                    } catch (Throwable ignored) {}
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,116,                    return !checkpointSuccess;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,117,                }
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,118,            }.start();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,120,            return;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,123,        stopBroker(exception);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,127,"        LOG.info(""Stopping the broker due to exception, "" + exception, exception);"
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,128,"        new Thread(""Stopping the broker due to IO exception"") {"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,105,"                            LOG.error(""Caught exception during rollback on connection: "" + e1, e1);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,110,"                            LOG.error(""Caught exception while closing connection: "" + e1, e1);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCIOExceptionHandler.java,49,"                    throw new IOException(""PersistenceAdapter lock no longer valid using: "" + locker);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,372,"                    Thread thread = new Thread(runnable, ""ActiveMQ Cleanup Timer"");"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,87,                final long now = System.currentTimeMillis() + diffFromCurrentTime;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,116,"        LOG.info(getLeaseHolderId() + "", becoming the master on dataSource: "" + dataSource);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,190,        releaseLease();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,141,                throw IOExceptionSupport.create(e);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest.java,33,        brokerService.setIoExceptionHandler(new JDBCIOExceptionHandler());
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,46,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,47,    @Override
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,48,    protected void delayTillRestartRequired() {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,49,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,50,"        LOG.info(""delay for less than lease quantum. While Db is offline, master should stay alive"");"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,51,        try {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,52,            TimeUnit.SECONDS.sleep(1);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,53,        } catch (InterruptedException e) {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,54,            e.printStackTrace();
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,55,        }
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,56,    }
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,57,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,58,    @Override
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,59,    protected void verifyExpectedBroker(int inflightMessageCount) {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,60,        if (inflightMessageCount == 0 || inflightMessageCount == failureCount + 10) {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,61,"            assertEquals(""connected to master"", master.getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,62,        }
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,63,    }
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,59,"            assertEquals(""connected to slave"", slave.get().getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,70,        {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,71,            // do some retries as db failures filter back to the client until broker sees
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,72,            // db lock failure and shuts down
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,73,            boolean sent = false;
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,74,            do {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,75,                try {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,76,"                    producer.send(producerDestination, message);"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,77,                    sent = true;
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,78,                } catch (JMSException e) {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,79,"                    LOG.info(""Exception on producer send for: "" + message, e);"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,80,                    try {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,81,                        Thread.sleep(2000);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,82,                    } catch (InterruptedException ignored) {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,83,                    }
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,84,                }
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,85,            } while(!sent);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,86,        }
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,103,            } catch (JMSException ignored) {}
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,105,            if (e.getCause() instanceof TransactionRolledBackException) {
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,106,                TransactionRolledBackException transactionRolledBackException = (TransactionRolledBackException)e.getCause();
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,108,                    // failover chucked bc there is a missing reply to a commit. the ack may have got there and the reply
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,109,                    // was lost or the ack may be lost.
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,110,                    // so we may not get a resend.
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,111,                    //
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,112,"                    // REVISIT: A JDBC store IO exception should not cause the connection to drop, so it needs to be wrapped"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,113,                    // possibly by the IOExceptionHandler
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,114,                    // The commit/close wrappers in jdbc TransactionContext need to delegate to the IOExceptionHandler
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,116,"                    // this would leave the application aware of the store failure, and possible aware of whether the commit"
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,117,"                    // was a success, rather than going into failover-retries as it does now."
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,120,
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueTest.java,79,        broker.stop();
activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java,62,    protected void configureBroker(BrokerService master) {
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/JDBCIOExceptionHandlerTest.java,71,        broker.setIoExceptionHandler(new JDBCIOExceptionHandler());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,154,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,371,"            LOG.debug(""Do not know how to process ActiveMQ Command "" + command);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,384,        public void onClose() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,385,        }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,387,        public void drainCheck() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,388,        }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,576,    long nextTransactionId = 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,608,            Object action = ((AmqpValue) msg.getBody()).getValue();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,631,                byte operation;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,792,                outbound.addLast(md);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,856,"        private void settle(final Delivery delivery, int ackType) throws Exception {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,880,"                    ack.setTransactionId(new LocalTransactionId(connectionId, txid));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,884,"                    LOG.trace(""Sending Ack for MessageId:{} to ActiveMQ"", ack.getLastMessageId());"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,920,            final DeliveryState state = delivery.getRemoteState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,921,            if (state instanceof Accepted) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,922,                if (!delivery.remotelySettled()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,923,                    delivery.disposition(new Accepted());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,925,"                settle(delivery, MessageAck.INDIVIDUAL_ACK_TYPE);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,926,            } else if (state instanceof Rejected) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,927,                // re-deliver /w incremented delivery counter.
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,928,                md.setRedeliveryCounter(md.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,929,"                settle(delivery, -1);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,930,            } else if (state instanceof Released) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,931,                // re-deliver && don't increment the counter.
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,932,"                settle(delivery, -1);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,933,            } else if (state instanceof Modified) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,934,                Modified modified = (Modified) state;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,935,                if (modified.getDeliveryFailed()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,936,                    // increment delivery counter..
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,939,                byte ackType = -1;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,940,                Boolean undeliverableHere = modified.getUndeliverableHere();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,941,                if (undeliverableHere != null && undeliverableHere) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,942,                    // receiver does not want the message..
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,943,                    // perhaps we should DLQ it?
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,944,                    ackType = MessageAck.POSION_ACK_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,945,                }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,946,"                settle(delivery, ackType);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,954,"    void onSenderOpen(final Sender sender, AmqpSessionContext sessionContext) {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,959,"            ConsumerContext consumerContext = new ConsumerContext(id, sender);"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,117,        p.close();
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,52,"        QueueImpl queue = new QueueImpl(""queue://txqueue"");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,81,"        QueueImpl queue = new QueueImpl(""queue://txqueue"");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,82,        final int msgCount = 10;
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,87,"        QueueViewMBean queueView = getProxyToQueue(""txqueue"");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,91,        // Consumer all in TX and commit.
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,92,        {
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,93,"            Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,94,            MessageConsumer consumer = session.createConsumer(queue);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,96,            for (int i = 0; i < msgCount; ++i) {
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,97,                Message msg = consumer.receive(TestConfig.TIMEOUT);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,98,                assertNotNull(msg);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,99,                assertTrue(msg instanceof TextMessage);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,100,            }
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,102,            consumer.close();
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,103,            session.commit();
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,104,        }
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,106,"        LOG.info(""Queue size after consumer commit is: {}"", queueView.getQueueSize());"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,116,"        QueueImpl queue = new QueueImpl(""queue://txqueue"");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,122,"        QueueViewMBean queueView = getProxyToQueue(""txqueue"");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,156,"        QueueImpl queue = new QueueImpl(""queue://txqueue"");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,162,"        QueueViewMBean queueView = getProxyToQueue(""txqueue"");"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,180,            consumer.close();
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,192,"        QueueImpl queue = new QueueImpl(""queue://txqueue"");"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,182,        final LinkedList<ConsumerContext> consumers = new LinkedList<ConsumerContext>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,659,                for (ConsumerContext consumer : context.consumers) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,685,                for (ConsumerContext consumer : context.consumers) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1191,                        sessionContext.consumers.add(consumerContext);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,124,    private final LinkedList<MessageDispatch> deliveredMessages = new LinkedList<MessageDispatch>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,146,    private boolean clearDispatchList;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,707,        clearDispatchList = true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,841,        clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1028,                        clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1061,        clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1165,        clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1341,            clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1378,"                            LOG.warn(""Duplicate dispatch on connection: "" + session.getConnection().getConnectionInfo().getConnectionId()"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1379,"                                    + "" to consumer: ""  + getConsumerId() + "", ignoring (auto acking) duplicate: "" + md);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1380,"                            MessageAck ack = new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1381,                            session.sendAck(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1426,    private void clearDispatchList() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1427,        if (clearDispatchList) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1429,                if (clearDispatchList) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1432,                            if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1433,"                                LOG.debug(getConsumerId() + "" tracking existing transacted delivered list ("" + deliveredMessages.size() + "") on transport interrupt"");"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1434,                            }
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1449,                    clearDispatchList = false;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,44,import org.apache.activemq.leveldb.LevelDBStore;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,45,import org.apache.activemq.usage.MemoryUsage;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,46,import org.apache.activemq.usage.SystemUsage;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,78,    final static int MAX_BROKER_RESTARTS = 3;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,199,                // batch will be replayed
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,200,                nextExpectedSeqNum -= (TRANSACITON_BATCH -1);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2149Test.java,330,        brokerStopPeriod = 30 * 1000;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,292,"        assertEquals(""get message 0 first"", MESSAGE_TEXT + ""0"", receivedMessages.get(0).getText());"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,293,        // it was redelivered
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,294,"        assertEquals(""get message 0 second"", MESSAGE_TEXT + ""0"", receivedMessages.get(1).getText());"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerOutstandingCommitTest.java,296,"        assertEquals(""get message 1 eventually"", MESSAGE_TEXT + ""1"", receivedMessages.get(2).getText());"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerUnconsumedTest.java,159,        final CountDownLatch commitDoneLatch = new CountDownLatch(1);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerUnconsumedTest.java,166,                    commitDoneLatch.countDown();
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverConsumerUnconsumedTest.java,193,"        assertTrue(""consumer added through failover"", commitDoneLatch.await(30, TimeUnit.SECONDS));"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverDuplicateTest.java,206,"        assertEquals(""expect all messages are dequeued with one duplicate"", totalSent +1, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getEnqueues().getCount());"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverDuplicateTest.java,215,"        assertEquals(""dequeue correct, including duplicate dispatch auto acked"", totalSent  + 1, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount());"
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,28,import org.apache.activemq.broker.region.*;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,254,
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,264,"        super.removeSubscription(context, info);"
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,265,
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,165,                pending.setSystemUsage(memoryManager);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,166,                pending.setMemoryUsageHighWaterMark(getCursorMemoryHighWaterMark());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,167,                pending.setMaxAuditDepth(getMaxAuditDepth());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,168,                pending.setMaxProducersToAudit(getMaxProducersToAudit());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,169,                pending.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,170,"                // If nothing was in the persistent store, then try to use the"
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,171,                // recovery policy.
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,172,                if (pending.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,173,                    for (Destination destination : durableDestinations.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,174,                        Topic topic = (Topic) destination;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,175,"                        topic.recoverRetroactiveMessages(context, this);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,198,            pending.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,312,    protected synchronized boolean isStarted() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,214,    public final synchronized void addMessageFirst(MessageReference node) throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,256,
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/DurableSubSelectorDelayWithRestartTest.java,228,                sess.close();
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/DurableSubSelectorDelayWithRestartTest.java,229,                con.close();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,37,import org.apache.activemq.command.ActiveMQDestination;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,38,import org.apache.activemq.command.ActiveMQMessage;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,39,import org.apache.activemq.command.ActiveMQTempQueue;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,40,import org.apache.activemq.command.ActiveMQTempTopic;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,41,import org.apache.activemq.command.Command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,42,import org.apache.activemq.command.CommandTypes;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,43,import org.apache.activemq.command.ConnectionError;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,44,import org.apache.activemq.command.ConnectionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,45,import org.apache.activemq.command.ConnectionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,46,import org.apache.activemq.command.ConsumerControl;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,47,import org.apache.activemq.command.ConsumerId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,48,import org.apache.activemq.command.ConsumerInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,49,import org.apache.activemq.command.DestinationInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,50,import org.apache.activemq.command.ExceptionResponse;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,51,import org.apache.activemq.command.LocalTransactionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,52,import org.apache.activemq.command.MessageAck;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,53,import org.apache.activemq.command.MessageDispatch;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,54,import org.apache.activemq.command.MessageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,55,import org.apache.activemq.command.ProducerId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,56,import org.apache.activemq.command.ProducerInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,57,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,58,import org.apache.activemq.command.Response;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,59,import org.apache.activemq.command.SessionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,60,import org.apache.activemq.command.SessionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,61,import org.apache.activemq.command.ShutdownInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,62,import org.apache.activemq.command.TransactionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,63,import org.apache.activemq.command.TransactionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,940,                hbReadInterval = Long.parseLong(keepAliveOpts[0]);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,948,                monitor.setReadCheckTime(hbReadInterval);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,557,            if (!this.version.equals(Stomp.V1_1)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,558,"                throw new ProtocolException(""Queue Browser feature only valid for Stomp v1.1 clients!"");"
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,929,                hbReadInterval = (long) (Long.parseLong(keepAliveOpts[0]) * hbGracePeriodMultiplier);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,35,import org.apache.activemq.util.IdGenerator;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,36,import org.apache.activemq.util.ServiceStopper;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,37,import org.apache.activemq.util.ServiceSupport;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,38,import org.slf4j.Logger;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,39,import org.slf4j.LoggerFactory;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,43,import org.apache.activemq.util.ByteSequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,59,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,77,     * @see
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,78,     * org.apache.activemq.beanstalk.JobScheduler#addListener(org.apache.activemq
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,79,     * .beanstalk.JobListener)
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,87,     * @see
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,88,     * org.apache.activemq.beanstalk.JobScheduler#removeListener(org.apache.
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,89,     * activemq.beanstalk.JobListener)
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,109,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,112,"    public synchronized void schedule(final String jobId, final ByteSequence payload, final String cronEntry, final long delay,"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,113,"            final long period, final int repeat) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,119,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,144,"     * @see org.apache.activemq.beanstalk.JobScheduler#remove(long,"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,145,     * java.lang.String)
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,211,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,234,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,254,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,261,"    void schedule(Transaction tx, String jobId, ByteSequence payload, String cronEntry, long delay, long period,"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,262,            int repeat) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,321,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,418,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,481,                                        // remove this job from the index - so it
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,482,                                        // doesn't get destroyed
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,490,                                        // we haven't got a separate scheduler to
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,491,                                        // execute at
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,494,                                        //this.scheduleTime.setWaitTime(this.scheduleTime.DEFAULT_WAIT);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,498,                                        // remove this job from the index - so it
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,499,                                        // doesn't get destroyed
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,504,                                            // we have a separate schedule to run at
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,505,                                            // this time
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,506,                                            // so the cron job is used to set of a
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,507,                                            // seperate scheule
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,508,                                            // hence we won't fire the original cron
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,509,                                            // job to the listeners
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,510,                                            // but we do need to start a separate
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,511,                                            // schedule
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,529,                             final long timeUntilNextScheduled = nextUp.getKey() - currentTime;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,530,                             if (timeUntilNextScheduled < this.scheduleTime.getWaitTime()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,531,                              this.scheduleTime.setWaitTime(timeUntilNextScheduled);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,532,                             }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,534,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,544,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,562,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,573,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,677,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,68,    // private int indexWriteBatchSize = PageFile.DEFAULT_WRITE_BATCH_SIZE;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,26,     * @throws Exception
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,28,    public abstract String getName() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,29,/**
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,30, * Add a Job listener
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,31, * @param l
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,32, * @throws Exception
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,33, */
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,34,    public abstract void addListener(JobListener l) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,35,/**
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,36, * remove a JobListener
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,37, * @param l
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,38, * @throws Exception
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,39, */
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,40,    public abstract void removeListener(JobListener l) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,44,     * @param jobId a unique identifier for the job
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,45,     * @param payload the message to be sent when the job is scheduled
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,46,     * @param delay the time in milliseconds before the job will be run
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,49,"    public abstract void schedule(String jobId, ByteSequence payload,long delay) throws Exception;"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,53,     * @param jobId a unique identifier for the job
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,54,     * @param payload the message to be sent when the job is scheduled
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,55,     * @param cronEntry - cron entry
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,58,"    public abstract void schedule(String jobId, ByteSequence payload,String cronEntry) throws Exception;"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,60,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,63,     * @param jobId a unique identifier for the job
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,64,     * @param payload the message to be sent when the job is scheduled
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,65,     * @param cronEntry - cron entry
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,66,     * @param delay time in ms to wait before scheduling
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,67,     * @param period the time in milliseconds between successive executions of the Job
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,68,     * @param repeat the number of times to execute the job - less than 0 will be repeated forever
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,71,"    public abstract void schedule(String jobId, ByteSequence payload,String cronEntry,long delay, long period, int repeat) throws Exception;"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,76,     * @throws Exception
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,78,    public abstract void remove(long time) throws  Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,83,     * @throws Exception
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,85,    public abstract void remove(String jobId) throws  Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,86,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,91,    public abstract void removeAllJobs() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,92,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,95,     * @param start time in milliseconds
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,96,     * @param finish time in milliseconds
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,99,"    public abstract void removeAllJobs(long start,long finish) throws Exception;"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,100,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,102,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,106,     * @throws Exception
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,108,    public abstract long getNextScheduleTime() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,109,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,115,    public abstract List<Job> getNextScheduleJobs() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,116,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,119,     * @return a  list of all jobs
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,120,     * @throws Exception
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,122,    public abstract List<Job> getAllJobs() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,123,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,131,"    public abstract List<Job> getAllJobs(long start,long finish)throws Exception;"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,26,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,27,    JobSchedulerFacade(SchedulerBroker broker){
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,28,        this.broker=broker;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,32,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,39,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,47,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,48,"            return js.getAllJobs(start,finish);"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,55,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,63,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,71,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,79,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,86,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,89,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,94,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,101,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,102,"            js.removeAllJobs(start,finish);"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,104,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,109,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,112,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,117,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,122,"    public void schedule(String jobId, ByteSequence payload,String cronEntry, long start, long period, int repeat) throws Exception {"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,124,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,125,"            js.schedule(jobId, payload, cronEntry,start,period,repeat);"
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,130,        if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,133,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,19,import org.apache.activemq.Service;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,20,
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,24," * @author <a href=""http://hiramchirino.com"">Hiram Chirino</a>"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,54,    private final Object listenerLock = new Object();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,85,        synchronized (this.listenerLock) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,86,            this.listenerLock.notify();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,87,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,483,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,484,            // Can't start pumping messages until a listener is added otherwise we'd discard messages
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,485,            // without any warning.
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,486,            synchronized (listenerLock) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,487,                while (this.running.get() && this.jobListeners.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,488,                    try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,489,"                        LOG.debug(""Scheduled Message dispatch paused while awaiting a Job Listener"");"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,490,                        this.listenerLock.wait();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,491,                    } catch (InterruptedException e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,492,                    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,493,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,494,            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,495,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,589,        synchronized (this.listenerLock) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,590,            this.listenerLock.notify();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,591,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,592,"        this.thread = new Thread(this, ""JobScheduler:"" + this.name);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,593,        this.thread.setDaemon(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,594,        this.thread.start();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,600,        this.scheduleTime.wakeup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,601,        Thread t = this.thread;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,602,        if (t != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,603,            t.join(1000);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,604,        }
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,102, * Manages the lifecycle of an ActiveMQ Broker. A BrokerService consists of a
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,106, *
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,505,    @PostConstruct
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,673,    @PreDestroy
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,31,import org.apache.activemq.command.ActiveMQDestination;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,32,import org.apache.activemq.command.BrokerInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,33,import org.apache.activemq.command.ConnectionInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,34,import org.apache.activemq.command.ConsumerInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,35,import org.apache.activemq.command.DestinationInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,36,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,37,import org.apache.activemq.command.MessageAck;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,38,import org.apache.activemq.command.MessageDispatch;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,39,import org.apache.activemq.command.MessageDispatchNotification;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,40,import org.apache.activemq.command.MessagePull;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,41,import org.apache.activemq.command.ProducerInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,42,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,43,import org.apache.activemq.command.Response;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,44,import org.apache.activemq.command.SessionInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,45,import org.apache.activemq.command.TransactionId;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,55,
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,73,    @PostConstruct
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,23,import javax.annotation.PreDestroy;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,24,import javax.jms.Connection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,25,import javax.jms.ConnectionFactory;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,27,import org.apache.activemq.EnhancedConnection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,39,import org.apache.camel.util.ObjectHelper;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,46, *
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,68,    @PostConstruct
activemq-spring/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java,103,    @PostConstruct
activemq-spring/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java,154,    @PreDestroy
activemq-spring/src/main/java/org/apache/activemq/security/XBeanAuthorizationEntry.java,19,import org.springframework.beans.factory.InitializingBean;
activemq-spring/src/main/java/org/apache/activemq/security/XBeanAuthorizationEntry.java,20,
activemq-spring/src/main/java/org/apache/activemq/security/XBeanAuthorizationEntry.java,50,     * @org.apache.xbean.InitMethod
activemq-spring/src/main/java/org/apache/activemq/security/XBeanAuthorizationMap.java,19,import org.apache.activemq.filter.DestinationMapEntry;
activemq-spring/src/main/java/org/apache/activemq/security/XBeanAuthorizationMap.java,20,import org.springframework.beans.factory.InitializingBean;
activemq-spring/src/main/java/org/apache/activemq/security/XBeanAuthorizationMap.java,23,import java.util.List;
activemq-spring/src/main/java/org/apache/activemq/security/XBeanAuthorizationMap.java,35,     * @org.apache.xbean.InitMethod
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQConnectionFactory.java,27, *
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQConnectionFactory.java,29, *
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQConnectionFactory.java,30, *
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQConnectionFactory.java,36,
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQConnectionFactory.java,42,    @PostConstruct
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQConnectionFactory.java,52,
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQXAConnectionFactory.java,27, *
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQXAConnectionFactory.java,29, *
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQXAConnectionFactory.java,30, *
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQXAConnectionFactory.java,36,
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQXAConnectionFactory.java,42,    @PostConstruct
activemq-spring/src/main/java/org/apache/activemq/spring/ActiveMQXAConnectionFactory.java,52,
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,37, *
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,39, *
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,40, *
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,42,public class SpringSslContext extends SslContext {
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,43,
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,47,"    private String secureRandomAlgorithm=""SHA1PRNG"";"
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,63,    @PostConstruct
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,77,        KeyStore ks = createTrustManagerKeyStore();
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,81,
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,88,        KeyStore ks = createKeyManagerKeyStore();
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,92,
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,102,
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,112,
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,117,
activemq-spring/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,56,    @PostConstruct
activemq-spring/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,87,    @PreDestroy
activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/util/ResourceLoadingSslContext.java,66,    @PostConstruct
activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/JDBCTestMemory.java,85,
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,212,"        String userName = """";"
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,216,"        String passswd = """";"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,63,import org.apache.qpid.proton.amqp.UnsignedInteger;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,118,    private static final UnsignedInteger DURABLE = new UnsignedInteger(2);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1171,            if (DURABLE.equals(source.getDurable()) && dest.isTopic()) {
activemq-broker/src/main/java/org/apache/activemq/broker/LockableServiceSupport.java,134,"        LOG.info(brokerService.getBrokerName() + "", no longer able to keep the exclusive lock so giving up being a master"");"
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,143,        return lock != null && lock.isValid();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,61,"public class MultiKahaDBPersistenceAdapter extends DestinationMap implements PersistenceAdapter, BrokerServiceAware {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,123,        super.setEntries(entries);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,164,        Object result = this.chooseValue(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,252,            removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,262,            removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,313,    public void start() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,314,        Object result = this.chooseValue(matchAll);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,381,"        put(destination, result);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,400,    public void stop() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,402,            persistenceAdapter.stop();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,566,        checkClosedOrFailed();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,630,                stop();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,260,                // notify before any reconnect attempt so ack state can be whacked
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,261,                if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,262,                    transportListener.transportInterupted();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,263,                }
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,264,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,19,import static org.junit.Assert.assertTrue;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,20,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,22,import java.util.concurrent.CountDownLatch;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,23,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,28,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,42,    protected CountDownLatch broker2Started = new CountDownLatch(1);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,43,"    protected String uriString = ""failover://(tcp://localhost:62001,tcp://localhost:62002)?randomize=false&initialReconnectDelay=15000"";"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,85,"        broker1.addConnector(""tcp://localhost:62001"");"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,94,"        broker2.addConnector(""tcp://localhost:62002"");"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,122,    protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,123,        return new ActiveMQConnectionFactory(uriString);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,124,    }
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/InitalReconnectDelayTest.java,125,
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,201,    protected volatile CountDownLatch transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2026,        this.transportInterruptionProcessingComplete = new CountDownLatch(dispatchers.size() - (advisoryConsumer != null ? 1:0));
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2027,        if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2028,"            LOG.debug(""transport interrupted, dispatchers: "" + transportInterruptionProcessingComplete.getCount());"
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2029,        }
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2030,        signalInterruptionProcessingNeeded();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2031,
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2034,            s.clearMessagesInProgress();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2038,            connectionConsumer.clearMessagesInProgress();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2465,        CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2466,        if (cdl != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2467,            if (!closed.get() && !transportFailed.get() && cdl.getCount()>0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2468,"                LOG.warn(""dispatch paused, waiting for outstanding dispatch interruption processing ("" + cdl.getCount() + "") to complete.."");"
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2469,"                cdl.await(10, TimeUnit.SECONDS);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2470,            }
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2476,        CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2477,        if (cdl != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2478,            cdl.countDown();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2479,            try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2480,                signalInterruptionProcessingComplete();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2481,            } catch (InterruptedException ignored) {}
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2485,    private void signalInterruptionProcessingComplete() throws InterruptedException {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2486,        CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2487,        if (cdl.getCount()==0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2489,"                LOG.debug(""transportInterruptionProcessingComplete for: "" + this.getConnectionInfo().getConnectionId());"
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2491,            this.transportInterruptionProcessingComplete = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2501,
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2502,        }
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,158,    public void clearMessagesInProgress() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,161,"        // Till there is a need, lets immediately allow dispatch"
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,162,        this.connection.transportInterruptionProcessingComplete();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,690,        // throw InterruptedException and we ensure that resources are clened up.
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,650,    void clearMessagesInProgress() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2015,            if (consumer.getMessageListener() != null) {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,994,"        // commit may fail if other consumer gets the message on restart, it will be seen a a duplicate on teh connection"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,995,        // but with no transaciton and it pending on another consumer it will be posion
activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/FailoverTransactionTest.java,1015,"        assertNull(""consumer should not get rolledback on non redelivered message or duplicate"", consumer.receive(5000));"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,28,import java.util.HashMap;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,29,import java.util.Map;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,30,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,43,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,56,        if( transport instanceof MutexTransport ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,57,            transport = ((MutexTransport)transport).getNext();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,60,//        MutexTransport mutex = transport.narrow(MutexTransport.class);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,61,//        if (mutex != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,62,//            mutex.setSyncOnCommand(true);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,63,//        }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,72,"//    protected Transport createInactivityMonitor(Transport transport, WireFormat format) {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,73,"//        AmqpInactivityMonitor monitor = new AmqpInactivityMonitor(transport, format);"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,74,//
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,75,//        AmqpTransportFilter filter = transport.narrow(AmqpTransportFilter.class);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,76,//        filter.setInactivityMonitor(monitor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,77,//
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,78,//        return monitor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,79,//    }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,80,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,19,import org.apache.activemq.transport.nio.NIOSSLTransport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,20,import org.apache.activemq.wireformat.WireFormat;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,21,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,22,import javax.net.SocketFactory;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,49,        doConsume(AmqpSupport.toBuffer(plain));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,50,    }
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,48,    AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTestSupport.java,49,    };
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,33,    private boolean magicRead;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,59,        if (!magicRead) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,60,            if (payload.remaining() >= 8) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,61,                magicRead = true;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,62,                Buffer magic = new Buffer(8);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,63,                for (int i = 0; i < 8; i++) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,64,                    magic.data[i] = payload.get();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,65,                }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,66,                doConsume(new AmqpHeader(magic));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,70,        doConsume(AmqpSupport.toBuffer(payload));
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,289,        return this.maxBrowsePageSize;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1608,                            if (!node.isAcked() && !browser.isDuplicate(node.getMessageId())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1617,                        if (!added) {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,58,//        PolicyEntry policy = new PolicyEntry();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,59,"//        policy.setQueue("">"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,60,//        policy.setMaxAuditDepth(16384);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,61,//        policy.setCursorMemoryHighWaterMark(95);  // More breathing room.
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,62,//        PolicyMap pMap = new PolicyMap();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,63,//        pMap.setDefaultEntry(policy);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,64,//        broker.setDestinationPolicy(pMap);
activemq-http/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,126,        return null;
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,24,import java.util.HashMap;
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,26,"@SuppressWarnings(""rawtypes"")"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,32,    /**
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,33,     * Maps primitive type names to corresponding class objects.
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,34,     */
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,35,"    private static final HashMap<String, Class> primClasses = new HashMap<String, Class>(8, 1.0F);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,36,
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,77,"                return Class.forName(className, false, loader);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,82,        // fallback
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,83,        final Class<?> clazz = (Class<?>) primClasses.get(className);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,84,        if (clazz != null) {
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,85,            return clazz;
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,86,        } else {
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,87,"            return Class.forName(className, false, FALLBACK_CLASS_LOADER);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,88,        }
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,91,    static {
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,92,"        primClasses.put(""boolean"", boolean.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,93,"        primClasses.put(""byte"", byte.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,94,"        primClasses.put(""char"", char.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,95,"        primClasses.put(""short"", short.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,96,"        primClasses.put(""int"", int.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,97,"        primClasses.put(""long"", long.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,98,"        primClasses.put(""float"", float.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,99,"        primClasses.put(""double"", double.class);"
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,100,"        primClasses.put(""void"", void.class);"
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,83,        // set the connection factory with the provided broker url
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,84,        answer.setConnectionFactory(new ActiveMQConnectionFactory(brokerURL));
activemq-camel/src/test/java/org/apache/activemq/camel/AMQ2240Test.java,57,            ActiveMQComponent.activeMQComponent(vmUri);
activemq-unit-tests/src/test/java/org/apache/activemq/JmsTopicWildcardSendReceiveTest.java,27,
activemq-client/src/main/java/org/apache/activemq/filter/DestinationFilter.java,23,
activemq-client/src/main/java/org/apache/activemq/filter/DestinationFilter.java,29, *
activemq-client/src/main/java/org/apache/activemq/filter/DestinationFilter.java,30, *
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,38, *
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,39, *
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,60,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,69,                    answer.addAll((Set)value);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,140,"    @SuppressWarnings({ ""rawtypes"" })"
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,141,    protected void setEntries(List<DestinationMapEntry>  entries) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,145,                DestinationMapEntry entry = (DestinationMapEntry)element;
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,159,"    @SuppressWarnings({ ""rawtypes"" })"
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,164,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,176,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,199,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,213,        if (key.isTemporary()){
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,235,    public boolean isEmpty(){
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,240,        if ( candidates != null ) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,242,                for (Iterator<Object> iterator = existing.iterator(); iterator.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,251,        } else if ( existing != null ) {
activemq-client/src/main/java/org/apache/activemq/filter/PrefixDestinationFilter.java,44,     if (destination.getDestinationType() != destinationType) return false;
activemq-client/src/main/java/org/apache/activemq/filter/PrefixDestinationFilter.java,50,                if (!path[i].equals(ANY_CHILD) && !prefixes[i].equals(ANY_CHILD) && !prefixes[i].equals(path[i])) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,717,    private volatile LinkedList<Transaction> orderIndexUpdates = new LinkedList<Transaction>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,745,            synchronized (sendLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,752,            LinkedList<Transaction> orderedWork = new LinkedList<Transaction>();;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,753,            // use existing object to sync orderIndexUpdates that can be reassigned
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,754,            synchronized (sendLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,755,                Transaction next = orderIndexUpdates.peek();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,756,                while( next!=null && next.isCommitted() ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,757,                    orderedWork.addLast(orderIndexUpdates.removeFirst());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,758,                    next = orderIndexUpdates.peek();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,759,                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,760,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,761,            // do the ordered work
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,762,            if (!orderedWork.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,763,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,764,                ArrayList<SendSync> syncs = new ArrayList<SendSync>(orderedWork.size());;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,765,                for (Transaction tx : orderedWork) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,766,                    syncs.add(sendSyncs.remove(tx));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,767,                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,768,                sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,769,                try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,770,                    for (SendSync sync : syncs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,771,                        sync.processSend();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,773,                } finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,774,                    sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,777,                    sync.processSent();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,820,        final Transaction transaction = context.getTransaction();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,850,            if (context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,865,        if (!context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,193,"                LOG.trace(this + ""{} - disabling cache, lastCachedId: {} current node Id: {} batchList size: {}"", new Object[]{ this, lastCachedId, node.getMessageId(), batchList.size() });"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,290,"                    + "",maxBatchSize:"" + maxBatchSize;"
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,37,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,122,            NIOOutputStream outputStream = new NIOOutputStream(channel);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,275,                doConsume((Command) command);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,22,import java.util.*;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,35,
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,99,    protected final BrokerId localBrokerPath[] = new BrokerId[] { null };
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,106,    protected final BrokerId remoteBrokerPath[] = new BrokerId[] { null };
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,254,"                                        LOG.info(""pending tasks on stop {}"", pendingTasks);"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,295,"                    ""remoteBroker="" + remoteBroker + "", localBroker= "" + localBroker);"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,338,                 ServiceSupport.dispose(localBroker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,339,                 ServiceSupport.dispose(remoteBroker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,340,"                 // the bridge is left in a bit of limbo, but it won't get retried"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,341,                 // in this state.
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,342,                 return;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,434,                            + configuration.getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,581,                                || AdvisorySupport.isDestinationAdvisoryTopic(message.getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,590,                                message.setProducerId(duplexInboundLocalProducerInfo.getProducerId());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,591,                                if (message.isResponseRequired() || configuration.isAlwaysSyncSend()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,592,"                                    duplexInboundLocalBroker.asyncRequest(message, new ResponseCallback() {"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,593,                                        final int correlationId = message.getCommandId();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,594,
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,595,                                        @Override
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,596,                                        public void onCompletion(FutureResponse resp) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,597,                                            try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,598,                                                Response reply = resp.getResult();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,599,                                                reply.setCorrelationId(correlationId);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,600,                                                remoteBroker.oneway(reply);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,601,                                            } catch (IOException error) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,602,"                                                LOG.error(""Exception: {} on duplex forward of: {}"", error, message);"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,603,                                                serviceRemoteException(error);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,605,                                        }
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,606,                                    });
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,608,                                    duplexInboundLocalBroker.oneway(message);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,610,                                serviceInboundMessage(message);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,820,"            LOG.info(""Network connection between {} and {} shutdown due to a local error: {}"", new Object[]{ localBroker, remoteBroker, error });"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,847,                        advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,874,"            LOG.trace(""{} remove local subscription: {} for remote {}"", new Object[]{ configuration.getBrokerName(), sub.getLocalInfo().getConsumerId(), sub.getRemoteInfo().getConsumerId() });"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1052,            return new BrokerId[] { idToAppend };
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1159,            && !configuration.isSuppressDuplicateTopicSubscriptions()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1279,"            LOG.debug(""{} using priority: {} for subscription: {}"", new Object[]{ configuration.getBrokerName(), priority, info });"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1291,        info.setBrokerPath(new BrokerId[] { remoteBrokerId });
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1355,     *
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1356,     * @throws InterruptedException
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1406,     *            The dynamicallyIncludedDestinations to set.
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1420,     * @param excludedDestinations
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1421,     *            The excludedDestinations to set.
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1435,     * @param staticallyIncludedDestinations
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1436,     *            The staticallyIncludedDestinations to set.
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1450,     * @param durableDestinations
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1451,     *            The durableDestinations to set.
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1479,     * @param createdByDuplex
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1480,     *            the createdByDuplex to set
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1503,        return (remoteBrokerInfo == null || remoteBrokerInfo.getBrokerId() ==null)? null : remoteBrokerInfo.getBrokerId().toString();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1546,    public void resetStats(){
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1627,    protected void serviceOutbound(Message message){
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1629,        if (l != null){
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1630,"            l.onOutboundMessage(this,message);"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1634,    protected void serviceInboundMessage(Message message){
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1636,        if (l != null){
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1637,"            l.onInboundMessage(this,message);"
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,20,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,21,
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,36,    private final Transport localTransport;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,37,    private final Transport remoteTransport;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,38,    private AtomicBoolean shuttingDown = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,39,    private AtomicBoolean running = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,117,        ss.stop(localTransport);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,20,import java.net.URI;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,21,import java.net.URISyntaxException;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,23,import java.util.concurrent.CopyOnWriteArrayList;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,37, *
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,38, *
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,52,
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,60,                    Transport remoteTransport = createRemoteTransport();
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,61,"                    ProxyConnection connection = new ProxyConnection(localTransport, remoteTransport);"
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,62,                    connections.add(connection);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,75,
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,136,    private Transport createRemoteTransport() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,140,"            ct.add(false,new URI[] {localUri});"
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,149,                connections.remove(this);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,50,import org.junit.Ignore;
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,356,    @Ignore
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,358,    public void testTTL() throws Exception {
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,362,            connection = createConnection();
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,366,            producer.setTimeToLive(1000);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,372,"            LOG.info(""Message JMSExpiration = {}"", received.getJMSExpiration());"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,373,            producer.setTimeToLive(100);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,374,            producer.send(toSend);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,375,            TimeUnit.SECONDS.sleep(2);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,376,            received = consumer.receive(5000);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,377,            if (received != null) {
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,378,"                LOG.info(""Message JMSExpiration = {} JMSTimeStamp = {} TTL = {}"","
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,379,"                         new Object[] { received.getJMSExpiration(), received.getJMSTimestamp(),"
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,380,                                        received.getJMSExpiration() - received.getJMSTimestamp()});
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,381,            }
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,382,            assertNull(received);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,554,        return createConnection(name.toString());
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,556,        factory.setSyncPublish(syncPublish);
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,556,        // seems to require unreleased .026
activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/JMSClientTest.java,557,        // factory.setSyncPublish(syncPublish);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,45, * HTTP POST for sending and HTTP GET for receiving. <p/> You can specify the
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,46, * destination and whether it is a topic or queue via configuration details on
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,47, * the servlet or as request parameters. <p/> For reading messages you can
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,48, * specify a readTimeout parameter to determine how long the servlet should
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,49, * block for.
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,147,     * Supports a HTTP DELETE to be equivlanent of consuming a singe message
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,156,     * Supports a HTTP DELETE to be equivlanent of consuming a singe message
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,179,"            MessageAvailableConsumer consumer = (MessageAvailableConsumer)client.getConsumer(destination, request.getHeader(WebClient.selectorName));"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,181,"            message = (Message)request.getAttribute(""message"");"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,182,            if (message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,183,"                // we're resuming continuation,"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,184,                // so just write the message and return
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,185,"                writeResponse(request, response, message);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,186,                return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,188,            long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,194,            Continuation continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,195,            Listener listener = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,196,
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,197,            // Look for any available messages (need a little timeout)
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,198,            message = consumer.receive(10);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,200,            // Get an existing Continuation or create a new one if there are
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,201,            // no events.
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,203,                continuation = ContinuationSupport.getContinuation(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,205,                if (continuation.isExpired()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,206,                    response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,207,                    return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,210,                continuation.setTimeout(timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,211,                continuation.suspend();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,213,                // Fetch the listeners
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,214,                listener = (Listener)consumer.getAvailableListener();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,215,                if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,216,                    listener = new Listener(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,217,                    consumer.setAvailableListener(listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,219,
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,220,                // register this continuation with our listener.
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,221,                listener.setContinuation(continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,224,"            writeResponse(request, response, message);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,225,        } catch (JMSException e) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,226,"            throw new ServletException(""Could not post JMS message: "" + e, e);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,233,"         response.setHeader(""Cache-Control"", ""no-cache, no-store, must-revalidate""); // HTTP 1.1"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,234,"         response.setHeader(""Pragma"", ""no-cache""); // HTTP 1.0"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,235,"         response.setDateHeader(""Expires"", 0);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,272,            TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,281,            ObjectMessage objectMsg = (ObjectMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,291,            TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,307,            synchronized(this) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,341,        for(Enumeration names = message.getPropertyNames(); names.hasMoreElements();) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,343,"            response.setHeader(name , message.getObjectProperty(name).toString());"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,351,    protected long getReadTimeout(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,352,        long answer = defaultReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,354,        String name = request.getParameter(readTimeoutParameter);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,355,        if (name != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,356,            answer = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,358,        if (answer < 0 || answer > maximumReadTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,359,            answer = maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,361,        return answer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,389,                    try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,390,                        Message message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,391,"                        continuation.setAttribute(""message"", message);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,392,                    } catch (Exception e) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,393,"                        LOG.warn(""Error receiving message due "" + e.getMessage() + "". This exception is ignored."", e);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,394,                    } finally {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,395,                        continuation.resume();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,396,                    }
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,401,
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,23, *
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,25, *
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,26, *
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,23,import java.util.Vector;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,55, *
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,56, *
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,63,"    protected final ConcurrentHashMap<ConnectionId, ConnectionState> connectionStates = new ConcurrentHashMap<ConnectionId, ConnectionState>();"
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,73,    private int currentCacheSize;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,74,"    private Map<Object,Command> messageCache = new LinkedHashMap<Object,Command>(){"
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,90,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,106,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,107,    private class PrepareReadonlyTransactionAction extends RemoveTransactionAction {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,125,     *
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,126,     *
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,129,     * @throws IOException
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,140,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,149,"                // just needs to be a rough estimate of size, ~4 identifiers"
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,150,                currentCacheSize += MESSAGE_PULL_SIZE;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,174,        //now flush messages
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,175,        for (Command msg:messageCache.values()) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,189,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,206,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,214,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,221,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,229,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,272,        for (ConsumerState consumerState : sessionState.getConsumerStates()) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,470,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,476,                                producerState.setTransactionState(transactionState);
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,595,"            messageCache.put(id.intern(), pull);"
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,631,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,639,
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,678,                    transport.oneway(control);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,438,            List<JobLocation> values = entry.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,445,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,446,        for (Long l : keys) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,447,"            this.index.remove(tx, l);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,448,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,457,                List<JobLocation> values = entry.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,458,                if (values != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,459,                    for (JobLocation jl : values) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,460,"                        this.store.decrementJournalCount(tx, jl.getLocation());"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,461,                    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,462,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,469,"            this.index.remove(tx, l);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,105,    /**
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,106,     * @see org.apache.activemq.ra.MessageResourceAdapter#makeConnection()
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,107,     */
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,238,            final ActiveMQConnection connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,239,            return new XAResource[]{new LocalAndXATransaction(new TransactionContext(connection)) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,                public void finalize() throws Throwable {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,                    try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,242,                        connection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,243,                    } catch (Throwable ignore) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,244,                    } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,245,                        super.finalize();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,                    }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,247,                }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,248,            }};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,249,        } catch (JMSException e) {
activemq-ra/src/test/java/org/apache/activemq/ra/ActiveMQConnectionFactoryTest.java,116,        XAResource[] resoruces = ra.getXAResources(null);
activemq-ra/src/test/java/org/apache/activemq/ra/ActiveMQConnectionFactoryTest.java,117,"        assertEquals(""one resource"", 1, resoruces.length);"
activemq-ra/src/test/java/org/apache/activemq/ra/ActiveMQConnectionFactoryTest.java,119,"        assertEquals(""no pending transactions"", 0, resoruces[0].recover(100).length);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,163,                if (!((StoreDurableSubscriberCursor) pending).isStarted() || !keepDurableSubsActive) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,300,            }else if (ack.isDeliveredAck()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,21,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,68,    private final AtomicBoolean prefetchWindowOpen = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,295,            // also. get these for a consumer expired message.
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,296,            if (destination != null && !ack.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,297,                destination.getDestinationStatistics().getDequeues().add(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,316,            prefetchWindowOpen.set(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,320,            if (prefetchWindowOpen.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,324,                    prefetchWindowOpen.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,334,                            pullTimeout();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,347,    private final void pullTimeout() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,349,"            if (prefetchWindowOpen.compareAndSet(true, false)) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,366,        return (int)(dispatchedCounter.get() - dequeueCounter.get());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,465,        return getDispatchedQueueSize() >= info.getPrefetchSize() && !prefetchWindowOpen.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,556,                        prefetchWindowOpen.set(false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,901,"            acknowledge(md, MessageAck.DELIVERED_ACK_TYPE);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,868,"                earlyAck = new MessageAck(md, MessageAck.DELIVERED_ACK_TYPE, 1);"
activemq-unit-tests/src/test/java/org/apache/activemq/JMSConsumerTest.java,888,            MessageProducer producer = sendSession.createProducer(destination);
activemq-unit-tests/src/test/java/org/apache/activemq/broker/policy/AbortSlowAckConsumer0Test.java,147,        AbortSlowAckConsumerStrategy strategy = createSlowConsumerStrategy();
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,67,
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,69,        for (int i = 0; i < messageCount; i++) {
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,70,            consumeMessge(i);
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,98,"    protected void validateConsumerPrefetch(String destination, final long expectedCount) throws JMSException {"
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,100,        for (org.apache.activemq.broker.region.Destination dest : regionBroker.getQueueRegion().getDestinationMap().values()) {
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,108,                            return stats.getInflight().getCount() == expectedCount;
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,116,"                assertEquals(""inflight for: "" + dest.getName() + "": "" + stats.getInflight().getCount() + "" matches"","
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ConsumeTopicPrefetchTest.java,117,"                        expectedCount, stats.getInflight().getCount());"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,43,    private static final Object DISCONNECT = new Object();
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,134,        if (command == DISCONNECT) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,135,"            transportListener.onException(new TransportDisposedIOException(""Peer ("" + peer.toString() + "") disposed.""));"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,136,        } else {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,137,            transport.receiveCounter++;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,138,            transportListener.onCommand(command);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,139,        }
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,244,            if( command == DISCONNECT ) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,245,"                tl.onException(new TransportDisposedIOException(""Peer ("" + peer.toString() + "") disposed.""));"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,246,            } else {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,247,                tl.onCommand(command);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,248,            }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,180,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,181,            this.rollback();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,182,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,183,            throw IOExceptionSupport.create(e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,195,            if (addMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,196,                addMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,197,                addMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,198,            }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,199,            if (removedMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,200,                removedMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,201,                removedMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,202,            }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,203,            if (updateLastAckStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,204,                updateLastAckStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,205,                updateLastAckStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,206,            }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,207,            connection.rollback();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,208,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,30,import junit.framework.TestCase;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,49,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,50,public class AMQ4636Test extends TestCase {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,57,    private TestTransactionContext testTransactionContext;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,59,    protected BrokerService createBroker(boolean withJMX) throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,60,        BrokerService broker = new BrokerService();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,62,        broker.setUseJmx(withJMX);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,64,        EmbeddedDataSource embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,71,        testTransactionContext = new TestTransactionContext(jdbc);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,93,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,96,        broker = this.createBroker(false);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,97,        broker.deleteAllMessages();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,98,        broker.start();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,99,        broker.waitUntilStarted();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,101,"        LOG.info(""***Broker started..."");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,109,"        this.sendMessage(MY_TEST_TOPIC, failoverTransportURL);"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,138,"    public void sendMessage(String topic, String transportURL)"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,148,"            Session session = connection.createSession(false,"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,149,                    Session.AUTO_ACKNOWLEDGE);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,158,            testTransactionContext.throwSQLException = true;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,177,            return testTransactionContext;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,183,        public boolean throwSQLException;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,184,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,192,            if (throwSQLException) {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,194,                throwSQLException = false;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4636Test.java,199,
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,564,            MessageId messageId = message.getMessageId();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,565,            if (messageId == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,566,                messageId = new MessageId();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,567,                message.setMessageId(messageId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,570,            messageId.setProducerId(producerId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,571,            messageId.setProducerSequenceId(messageIdGenerator.getNextSequenceId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,583,"            // was not set by the client.  Lets assign the timestamp now, and adjust the"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,585,            if( message.getExpiration()!= 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,586,                if( message.getTimestamp()==0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,588,                    message.setExpiration(message.getTimestamp()+message.getExpiration());
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,48,"        TabularType tt = new TabularType(""HealthStatus"", ""HealthStatus"", ct, new String[]{""healthId"", ""level"", ""message"", ""resource""});"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,73,         *
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,87,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,95,                    if (storeSize != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,98,"                            answer.add(new HealthStatus(""org.apache.activemq.StoreLimit"", ""WARNING"", ""Message Store size is within "" + val + ""% of its limit"", adapter.toString()));"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,102,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,104,"                        String message = ""Store limit is "" + storeLimit / (1024 * 1024) +"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,105,"                                "" mb, whilst the data directory: "" + dir.getAbsolutePath() +"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,106,"                                "" only has "" + dirFreeSpace / (1024 * 1024) + "" mb of usable space"";"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,109,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,110,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,126,                    int val = (int) ((storeSize * 100) / storeLimit);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,127,                    if (val > 90) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,128,"                        answer.add(new HealthStatus(""org.apache.activemq.TempStoreLimit"", ""WARNING"", ""TempMessage Store size is within "" + val + ""% of its limit"", adapter.toString()));"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,130,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,131,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,133,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,134,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,149,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,157,                    if (storeSize != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,160,"                            answer.add(new HealthStatus(""org.apache.activemq.JobSchedulerLimit"", ""WARNING"", ""JobSchedulerMessage Store size is within "" + val + ""% of its limit"", scheduler.toString()));"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,164,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,166,"                        String message = ""JobSchedulerStore limit is "" + storeLimit / (1024 * 1024) +"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,167,"                                "" mb, whilst the data directory: "" + dir.getAbsolutePath() +"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,168,"                                "" only has "" + dirFreeSpace / (1024 * 1024) + "" mb of usable space"";"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,171,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,176,    if (answer != null && !answer.isEmpty()){
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,177,"         this.currentState = ""Getting Worried {"";"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,178,        for (HealthStatus hs: answer){
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,179,"            currentState += hs + "" , "";"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,181,"        currentState += "" }"";"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,182,    } else{
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,183,"        this.currentState=""Good"";"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,184,    }
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,195,
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,30," * An XA-aware connection pool.  When a session is created and an xa transaction is active,"
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,31, * the session will automatically be enlisted in the current transaction.
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,32, *
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,33, * @author gnodet
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,46,        return ((XAConnection)connection).createXASession();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,54,                // if the xa tx aborts inflight we don't want to auto create a local transaction or auto ack
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,107,                session.setIgnoreClose(true);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaConnectionPool.java,108,                session.setIsXa(false);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,925,        while (!isStarted() && !stopped.get() && !waitSucceeded) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,45,
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,50,
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,67,"            host = (String)brokerData.getParameters().get(""brokerName"");"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,82,"                String config = (String)options.remove(""brokerConfig"");"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,173,/**
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,176,    * @param waitForStart - time in milliseconds to wait for a broker to appear
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,177,    * @return
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,183,            if (broker == null && waitForStart > 0) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,188,"                        LOG.debug(""waiting for broker named: "" + brokerName + "" to start"");"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportWaitForTest.java,39,"        VM_BROKER_URI_NO_WAIT + ""&waitForStart=20000"";"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,88,"                    Map brokerOptions = IntrospectionSupport.extractProperties(options, ""broker."");"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,195,                    try {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,196,"                        LOG.debug(""waiting for broker named: "" + brokerName + "" to enter registry"");"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,197,                        registry.getRegistryMutext().wait(timeout);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,198,                    } catch (InterruptedException ignored) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,200,                    broker = registry.lookup(brokerName);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,160,    private long waitForSlaveTimeout = 600000L;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,252,    private String configurationUrl;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,924,        return waitUntilStarted(Long.MAX_VALUE);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportWaitForTest.java,70,        Thread t = new Thread() {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportWaitForTest.java,92,"        assertTrue(""has got connection"", gotConnection.await(400, TimeUnit.MILLISECONDS));"
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,42,                // Can we do an OR shortcut??
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,46,
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,48,                return rv == null ? null : rv;
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,64,                // Can we do an AND shortcut??
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,65,                if (lv == null) {
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,66,                    return null;
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,67,                }
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,68,                if (!lv.booleanValue()) {
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,71,
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,73,                return rv == null ? null : rv;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,33,import java.util.concurrent.ConcurrentHashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,39,import java.util.concurrent.Future;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,50,import javax.transaction.xa.XAException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,78,import org.apache.activemq.command.TransactionId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,91,import org.apache.activemq.transaction.Transaction;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,104,"public class Queue extends BaseDestination implements Task, UsageListener {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,749,"    final ConcurrentHashMap<Transaction, SendSync> sendSyncs = new ConcurrentHashMap<Transaction, SendSync>();"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,750,    private final LinkedList<Transaction> orderIndexUpdates = new LinkedList<Transaction>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,751,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,752,    // roll up all message sends
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,753,    class SendSync extends Synchronization {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,754,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,755,        class MessageContext {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,756,            public Message message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,757,            public ConnectionContext context;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,758,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,759,"            public MessageContext(ConnectionContext context, Message message) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,760,                this.context = context;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,761,                this.message = message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,762,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,763,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,764,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,765,        final Transaction transaction;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,766,        List<MessageContext> additions = new ArrayList<MessageContext>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,767,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,768,        public SendSync(Transaction transaction) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,769,            this.transaction = transaction;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,770,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,771,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,772,"        public void add(ConnectionContext context, Message message) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,773,"            additions.add(new MessageContext(context, message));"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,774,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,776,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,777,        public void beforeCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,778,            synchronized (orderIndexUpdates) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,779,                orderIndexUpdates.addLast(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,780,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,783,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,784,        public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,785,            ArrayList<SendSync> syncs = new ArrayList<SendSync>(200);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,786,            sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,787,            try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,788,                synchronized (orderIndexUpdates) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,789,                    Transaction next = orderIndexUpdates.peek();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,790,                    while( next!=null && next.isCommitted() ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,791,                        syncs.add(sendSyncs.remove(orderIndexUpdates.removeFirst()));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,792,                        next = orderIndexUpdates.peek();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,795,                for (SendSync sync : syncs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,796,                    sync.processSend();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,797,                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,798,            } finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,799,                sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,800,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,801,            for (SendSync sync : syncs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,802,                sync.processSent();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,804,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,805,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,806,        // called with sendLock
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,807,        private void processSend() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,808,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,809,            for (Iterator<MessageContext> iterator = additions.iterator(); iterator.hasNext(); ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,810,                MessageContext messageContext = iterator.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,811,                // It could take while before we receive the commit
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,812,"                // op, by that time the message could have expired.."
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,813,                if (broker.isExpired(messageContext.message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,814,"                    broker.messageExpired(messageContext.context, messageContext.message, null);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,815,                    destinationStatistics.getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,816,                    iterator.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,817,                    continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,819,                sendMessage(messageContext.message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,820,                messageContext.message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,823,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,824,        private void processSent() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,825,            for (MessageContext messageContext : additions) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,828,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,829,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,830,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,831,        public void afterRollback() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,832,            try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,833,                for (MessageContext messageContext : additions) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,834,                    messageContext.message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,835,                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,836,            } finally {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,837,                sendSyncs.remove(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,842,    class OrderedNonTransactionWorkTx extends Transaction {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,843,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,844,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,845,"        public void commit(boolean onePhase) throws XAException, IOException {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,846,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,847,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,848,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,849,"        public void rollback() throws XAException, IOException {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,850,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,851,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,852,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,853,"        public int prepare() throws XAException, IOException {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,854,            return 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,855,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,857,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,858,        public TransactionId getTransactionId() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,859,            return null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,860,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,862,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,863,        public Logger getLog() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,864,            return null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,868,        public boolean isCommitted() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,869,            return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,870,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,871,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,872,        @Override
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,873,        public void addSynchronization(Synchronization s) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,874,            try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,875,                s.beforeCommit();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,876,            } catch (Exception e) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,877,"                LOG.error(""Failed to add not transactional message to orderedWork"", e);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,880,    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,882,    // called while holding the sendLock
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,883,"    private void registerSendSync(Message message, ConnectionContext context) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,884,        final Transaction transaction =
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,885,                message.isInTransaction() ? context.getTransaction()
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,886,                        : new OrderedNonTransactionWorkTx();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,887,        Queue.SendSync currentSync = sendSyncs.get(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,888,        if (currentSync == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,889,            currentSync = new Queue.SendSync(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,890,            transaction.addSynchronization(currentSync);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,891,"            sendSyncs.put(transaction, currentSync);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,893,"        currentSync.add(context, message);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,900,        boolean needsOrderingWithTransactions = context.isInTransaction();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,925,            // did a transaction commit beat us to the index?
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,926,            synchronized (orderIndexUpdates) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,927,                needsOrderingWithTransactions |= !orderIndexUpdates.isEmpty();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,928,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,929,            if (needsOrderingWithTransactions ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,930,                // If this is a transacted message.. increase the usage now so that
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,931,                // a big TX does not blow up
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,932,                // our memory. This increment is decremented once the tx finishes..
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,933,                message.incrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,934,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,935,"                registerSendSync(message, context);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,936,            } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,937,"                // Add to the pending list, this takes care of incrementing the"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,938,                // usage manager.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,939,                sendMessage(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,940,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,944,        if (!needsOrderingWithTransactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1863,    final void sendMessage(final Message msg) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1866,            messages.addMessageLast(msg);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,85,    public void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,89,        addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,90,        return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,26,import org.apache.activemq.command.TransactionId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,43,    private MessageId lastCachedId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,44,    private TransactionId lastTx;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,87,
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,103,            if (LOG.isDebugEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,104,"                LOG.debug(this + "" - cursor got duplicate: "" + message.getMessageId() + "","" + message.getPriority() + "", cached="" + cached, new Throwable(""duplicate message detected""));"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,105,            } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,106,"                LOG.warn(""{} - cursor got duplicate {}"", regionDestination.getActiveMQDestination(), message.getMessageId());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,107,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,108,            if (!cached ||  message.getMessageId().getEntryLocator() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,109,                // came from the store or was added to the jdbc store
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,192,
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,193,    public final synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,197,"                LOG.trace(""{} - enabling cache for empty store {}"", this, node.getMessageId());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,202,                    lastCachedId = node.getMessageId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,203,                    lastTx = node.getMessage().getTransactionId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,206,                    return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,216,            if (lastCachedId != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,217,"                LOG.debug(""{} - disabling cache, lastCachedId: {} last-tx: {} current node Id: {} node-tx: {} batchList size: {}"","
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,218,"                        new Object[]{ this, lastCachedId, lastTx, node.getMessageId(), node.getMessage().getTransactionId(), batchList.size() });"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,219,                setBatch(lastCachedId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,220,                lastCachedId = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,221,                lastTx = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,263,        for (Iterator<MessageReference>i = batchList.iterator();i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,264,            MessageReference msg = i.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,275,"        //LOG.trace(""{} - fillBatch"", this);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,316,"                    + "",maxBatchSize:"" + maxBatchSize + "",hasSpace:"" + hasSpace();"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,206,    public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,207,"        tryAddMessageLast(node, 0);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PendingMessageCursor.java,87,    void addMessageLast(MessageReference node) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,186,    public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,90,    public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,100,                persistent.addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,100,    public synchronized void addMessageLast(MessageReference node) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,108,     * @param position
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,104,"    public void addMessage(ConnectionContext context, Message message) throws IOException {"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,129,            if (message.isInTransaction()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,130,"                trackPendingSequence(c, sequenceId);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,142,        message.getMessageId().setEntryLocator(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,147,"    private void trackPendingSequence(final TransactionContext transactionContext, final long sequenceId) {"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,148,        synchronized (pendingAdditions) { pendingAdditions.add(sequenceId); }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,149,        transactionContext.onCompletion(new Runnable() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,150,            public void run() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,151,                synchronized (pendingAdditions) { pendingAdditions.remove(sequenceId); }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,152,            }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,153,        });
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,154,    }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,155,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,240,     long seq = ack.getLastMessageId().getEntryLocator() != null ?
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,241,                (Long) ack.getLastMessageId().getEntryLocator() :
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,254,        if (context != null && context.getXid() != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,255,            ack.getLastMessageId().setEntryLocator(seq);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,256,        }
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,344,                        msg.getMessageId().setEntryLocator(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,776,            long sequence = (Long)messageId.getEntryLocator();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,789,"            getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getEntryLocator(), null);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,111,"                            (Long)message.getMessageId().getEntryLocator(),"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,173,        message.getMessageId().setEntryLocator(id);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,190,"                ((JDBCMessageStore)messageStore).onAdd(message, ((Long)message.getMessageId().getEntryLocator()).longValue(), message.getPriority());"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,203,        msg.getMessageId().setEntryLocator(id);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,399,"                throw new SQLException(""Failed to remove message"");"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,938,        this.batchStatments = batchStatements;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1171,"        printQuery(c, ""Select * from ACTIVEMQ_MSGS ORDER BY ID"", System.out);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1172,"        printQuery(c, ""Select * from ACTIVEMQ_ACKS"", System.out);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,86,public class KahaDBStore extends MessageDatabase implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,210,"                LOG.warn(""Receovered Store uses a different OpenWire version[{}] "" +"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,289,    @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,290,    void rollbackStatsOnDuplicate(KahaDestination commandDestination) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,291,        if (brokerService != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,292,            RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,293,            if (regionBroker != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,294,                ActiveMQDestination activeMQDestination = convert(commandDestination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,295,                Destination destination = regionBroker.getDestinationMap(activeMQDestination).get(activeMQDestination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,296,                if (destination != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,297,                    destination.getDestinationStatistics().getMessages().decrement();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,298,                    destination.getDestinationStatistics().getEnqueues().decrement();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,299,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,300,            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,301,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,302,    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,303,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,388,                return result.getFuture();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,426,"        public void addMessage(ConnectionContext context, Message message) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,435,"            store(command, isEnableJournalDiskSyncs() && message.isResponseRequired(), null, null);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,436,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,646,        public void setBatch(MessageId identity) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,45,import org.apache.activemq.store.kahadb.MessageDatabase.AddOpperation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,47,import org.apache.activemq.store.kahadb.MessageDatabase.RemoveOpperation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,257,"    public void commit(TransactionId txid, boolean wasPrepared, Runnable preCommit, Runnable postCommit)"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,297,"                theStore.store(new KahaCommitCommand().setTransactionInfo(info), theStore.isEnableJournalDiskSyncs(), preCommit, postCommit);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,339,                if (op.getClass() == AddOpperation.class) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,340,                    AddOpperation addOp = (AddOpperation) op;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,345,                    RemoveOpperation rmOp = (RemoveOpperation) op;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,257,    public MessageDatabase() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,520,            if (operation instanceof AddOpperation) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,521,                AddOpperation add = (AddOpperation) operation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,525,                RemoveOpperation removeOpperation = (RemoveOpperation) operation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,887,"                process(message, lastRecoveryPosition, (Runnable)null, (Runnable)null);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,954,"        return store(data, false, null,null, onJournalStoreComplete);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,957,"    public Location store(JournalCommand<?> data, boolean sync, Runnable before,Runnable after) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,967,"    public Location store(JournalCommand<?> data, boolean sync, Runnable before, Runnable after, Runnable onJournalStoreComplete) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,978,"                process(data, location, before, after);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1052,"            process(data, location, (Runnable) null, (Runnable) null);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1070,"    void process(JournalCommand<?> data, final Location location, final Runnable before, final Runnable after) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1074,"                process(command, location);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1089,"                process(command, location, before, after);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1130,"    protected void process(final KahaAddMessageCommand command, final Location location) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1132,"            List<Operation> inflightTx = getInflightTx(command.getTransactionInfo(), location);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1133,"            inflightTx.add(new AddOpperation(command, location));"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1140,"                        updateIndex(tx, command, location);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1167,"           List<Operation> inflightTx = getInflightTx(command.getTransactionInfo(), location);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1168,"           inflightTx.add(new RemoveOpperation(command, location));"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1222,"    protected void process(KahaCommitCommand command, Location location, final Runnable before, final Runnable after) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1234,                before.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1240,        this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1242,            // run before with the index lock so that queue can order cursor updates with index updates
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1243,            if (before != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1244,                before.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1245,            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1246,            pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1247,                @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1248,                public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1249,                    for (Operation op : messagingTx) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1250,                        op.execute(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1252,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1253,            });
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1254,            metadata.lastUpdate = location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1255,        } finally {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1256,            this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1290,"    void updateIndex(Transaction tx, KahaAddMessageCommand command, Location location) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1296,            return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1311,"                // If the message ID as indexed, then the broker asked us to"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1312,"                // store a DUP message. Bad BOY! Don't do it, and log a warning."
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1316,                rollbackStatsOnDuplicate(command.getDestination());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1348,    abstract void rollbackStatsOnDuplicate(KahaDestination commandDestination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1349,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2364,"    private List<Operation> getInflightTx(KahaTransactionInfo info, Location location) {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2402,    class AddOpperation extends Operation<KahaAddMessageCommand> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2403,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2404,"        public AddOpperation(KahaAddMessageCommand command, Location location) {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2410,"            updateIndex(tx, command, location);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2415,    class RemoveOpperation extends Operation<KahaRemoveMessageCommand> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2417,"        public RemoveOpperation(KahaRemoveMessageCommand command, Location location) {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2931,"            Iterator<Entry<Long, MessageKeys>> iterator = index.iterator(tx, sequenceId);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2966,"            return new MessageOrderIterator(tx,cursor);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2970,"            return new MessageOrderIterator(tx,m);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2989,"            MessageOrderIterator(Transaction tx, MessageOrderCursor m) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2990,"                this.defaultIterator = defaultPriorityIndex.iterator(tx, m.defaultCursorPosition);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2992,"                    this.highIterator = highPriorityIndex.iterator(tx, m.highPriorityCursorPosition);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2997,"                    this.lowIterator = lowPriorityIndex.iterator(tx, m.lowPriorityCursorPosition);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeIndex.java,232,"        return getRoot(tx).iterator(tx, initialKey);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,87,"        private BTreeIterator(Transaction tx, BTreeNode<Key,Value> current, int nextIndex) {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,634,"    public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx, Key startKey) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,639,"            return getLeafNode(tx, this, startKey).iterator(tx, startKey);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,645,"            return new BTreeIterator(tx, this, idx);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,650,"        return new BTreeIterator(tx, getFirstLeafNode(tx), 0);"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,24,import java.util.Set;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,73,        JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,74,        persistenceAdapter.setDataSource(dataSource);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,75,        brokerService.setPersistenceAdapter(persistenceAdapter);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,81,        defaultEntry.setEnableAudit(false);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,82,        defaultEntry.setUseCache(false);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,85,        defaultEntry.setMemoryLimit(1024 * 1024);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,113,        int publisherMessagesPerThread = 1000;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,114,        int publisherThreadCount = 5;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,115,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,116,        int consumerThreadsPerQueue = 5;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,117,        int consumerBatchSize = 25;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,148,        distinctPublishedCount = publisher.getIDs().size();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,150,"        LOG.info(""Publisher Complete. Distinct IDs Published: "" + distinctPublishedCount);"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,154,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,155,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,160,                DefaultJDBCAdapter.dumpTables(dataSource.getConnection());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,166,"        LOG.info(""\nConsumer Complete. Shutting Down."");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,202,        private Set<String> ids = Collections.synchronizedSet(new TreeSet<String>());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,219,        public Set<String> getIDs() {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,244,        private QueueConnection newQueueConnection() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,288,"                        TextMessage tm = session.createTextMessage(""test"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,407,        private QueueConnection newQueueConnection() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,455,                Queue q = session.createQueue(queueName);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266Test.java,500,"                                LOG.info(""did not receive on {}, current count: {}"", qName, idList.size());"
activemq-unit-tests/src/test/java/org/apache/activemq/network/DemandForwardingBridgeTest.java,109,"        assertEquals(""remote broker dest stat dequeues"", 1, remoteBroker.getDestination(destination).getDestinationStatistics().getDequeues().getCount());"
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/MemoryLimitTest.java,126,        Message msg = consumer.receive();
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/MemoryLimitTest.java,135,                return dest.getMemoryUsage().getPercentUsage() >= 478;
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/MemoryLimitTest.java,140,        assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() >= 478);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1172,            if (ref.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,55,
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,56,        if (n.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,57,            // sync with message expiry processing
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,58,            if (!broker.isExpired(n)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,59,"                LOG.debug(""ignoring ack {}, for already expired message: {}"", ack, n);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,60,                return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,61,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,62,        }
activemq-unit-tests/src/test/java/org/apache/activemq/JmsSendReceiveWithMessageExpirationTest.java,154,"         assertEquals(""got messages"", messageCount + 1, messages.size());"
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,193,"        assertTrue(""memory usage is increased "", 0 < getDestination(broker, dlqDestination).getMemoryUsage().getPercentUsage());"
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,260,        final long queuePrefetch = 600;
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,269,        final long sendCount = 1500;
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,331,"        assertTrue(""Not all sent have expired "", Wait.waitFor(new Wait.Condition() {"
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,334,                return sendCount == view.getExpiredCount();
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,451,"        assertTrue(""All have not sent have expired "", Wait.waitFor(new Wait.Condition() {"
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,454,                return sendCount == view.getExpiredCount();
activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java,55,                        locked = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,21,import java.util.concurrent.CancellationException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,104,"            LOG.warn(""{} - cursor got duplicate {} seq: {}"", this, message.getMessageId(), message.getMessageId().getFutureOrSequenceLong());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,105,
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,106,            // a duplicate from the store - needs to be removed/acked - otherwise it will get redispatched on restart
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,107,            // jdbc store will store duplicates and will set entry locator to sequence long.
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,108,            // REVISIT - this seems too hacky - see use case AMQ4952Test
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,109,            if (!cached || message.getMessageId().getEntryLocator() instanceof Long) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,222,                collapseLastCachedIds();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,252,    private void collapseLastCachedIds() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,253,        for (MessageId candidate : pendingCachedIds) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,254,            final Object futureOrLong = candidate.getFutureOrSequenceLong();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,255,            if (futureOrLong instanceof Future) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,256,                Future future = (Future) futureOrLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,257,                try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,258,                    future.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,259,                    // future should be replaced with sequence by this time
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,260,                } catch (CancellationException ignored) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,261,                    continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,262,                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,263,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,264,            setLastCachedId(candidate);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,265,        }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,266,        pendingCachedIds.clear();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,267,    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,268,
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,270,        if (lastCachedId == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,363,"                    + "",maxBatchSize:"" + maxBatchSize + "",hasSpace:"" + hasSpace() + "",pendingCachedIds.size:"" + pendingCachedIds.size() + "",lastCachedId:"" + lastCachedId;"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,33,import java.util.concurrent.CancellationException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,45,import org.apache.activemq.broker.region.Destination;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,46,import org.apache.activemq.broker.region.RegionBroker;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,89,"public class KahaDBStore extends MessageDatabase implements PersistenceAdapter, MessageDatabase.SerialExecution<Location> {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,127,        serialExecutor = this;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,350,    @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,351,    public Location execute(Callable<Location> c) throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,352,        if (isConcurrentStoreAndDispatchQueues()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,353,            FutureTask<Location> future = new FutureTask<>(c);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,354,            this.queueExecutor.execute(future);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,355,            return future.get();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,356,        } else {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,357,            return c.call();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,358,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,359,    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,360,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,388,                final ListenableFuture<Object> future = result.getFuture();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,391,                    // wait for add completion to remove potential pending addition
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,392,                    message.getMessageId().setFutureOrSequenceLong(future);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,393,"                    indexListener.onAdd(new IndexListener.MessageContext(context, message, new Runnable() {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,394,                        @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,395,                        public void run() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,396,                            try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,397,                                future.get();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,398,"                                trackPendingAddComplete(dest, (Long) message.getMessageId().getFutureOrSequenceLong());"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,399,                            } catch (CancellationException okNothingToTrack) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,400,                            } catch (Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,401,"                                LOG.warn(""{} unexpected exception tracking completion of async add of {}"", this, message.getMessageId(), e);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,402,                            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,403,                        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,404,                    }));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,445,            KahaAddMessageCommand command = new KahaAddMessageCommand();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,453,"            store(command, isEnableJournalDiskSyncs() && message.isResponseRequired(), new IndexAware() {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,454,                @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,455,                public void sequenceAssignedWithIndexLocked(final long sequence) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,456,                    final Object possibleFuture = message.getMessageId().getFutureOrSequenceLong();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,457,                    message.getMessageId().setFutureOrSequenceLong(sequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,458,                    if (indexListener != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,459,"                        trackPendingAdd(dest, sequence);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,460,                        if (possibleFuture == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,461,                            // sync add (for async future present from getFutureOrSequenceLong)
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,462,"                            indexListener.onAdd(new IndexListener.MessageContext(context, message, new Runnable() {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,463,                                @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,464,                                public void run() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,465,"                                    trackPendingAddComplete(dest, sequence);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,466,                                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,467,                            }));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,470,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,471,"            }, null);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,684,                final String key = identity.toProducerKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,685,                lockAsyncJobQueue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,686,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,687,                // Hopefully one day the page file supports concurrent read
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,688,                // operations... but for now we must externally synchronize...
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,689,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,690,                indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,691,                try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,692,                    pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,693,                        @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,694,                        public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,695,"                            StoredDestination sd = getStoredDestination(dest, tx);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,696,"                            Long location = sd.messageIdIndex.get(tx, key);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,697,                            if (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,698,"                                sd.orderIndex.setBatch(tx, location);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,699,                            } else {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,700,"                                LOG.warn(""{} Location {} not found in order index for {}"", this, identity.getFutureOrSequenceLong(), identity);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,701,                            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,703,                    });
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,704,                } finally {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,705,                    indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,706,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,708,                unlockAsyncJobQueue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,726,"                this.localDestinationSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,259,    interface SerialExecution<V> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,260,        public V execute(Callable<V> c) throws Exception;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,261,    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,262,    SerialExecution<Location> serialExecutor;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,263,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,965,"    public Location store(final KahaCommitCommand data, final boolean sync, final IndexAware before, final Runnable after) throws IOException {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,966,        try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,967,            return serialExecutor.execute(new Callable<Location>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,968,                @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,969,                public Location call() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,970,"                    return store(data, sync, before, after, null);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,971,                }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,972,            });
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,973,        } catch (Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,974,"            LOG.error(""Failed to execute commit"", e);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,975,            throw new IOException(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,976,        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,977,    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,978,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1263,            indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1264,            try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1265,                pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1266,                    @Override
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1267,                    public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1268,                        for (Operation op : messagingTx) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1269,                            op.execute(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1270,                        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1272,                });
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1273,                metadata.lastUpdate = location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1274,            } finally {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1275,                indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1276,            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1277,        } catch (Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1278,"            LOG.error(""serial execution of commit failed"", e);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1279,            throw new IOException(e);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,245,                            dumpQueueStat(tally.destination);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,276,    private void dumpQueueStat(ActiveMQDestination destination) throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,281,                //if (objectName.toString().contains(destination.getQualifiedName())) {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,283,"                    LOG.info(brokerService.getBrokerName() + "", "" + qViewMBean.getName() + "" Size: "" + qViewMBean.getEnqueueCount());"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,284,                //}
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,60,    public static final int MAX_AUDIT_DEPTH = 2048;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,44,    MessageId lastCachedId = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,206,                    if (node.getMessageId().getFutureOrSequenceLong() instanceof Future) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,207,                        pruneLastCached();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,208,                        pendingCachedIds.add(node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,209,                    } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,210,                        setLastCachedId(node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,211,                    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,223,            // sync with store on disabling the cache
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,224,            if (!pendingCachedIds.isEmpty() || lastCachedId != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,225,"                LOG.trace(""{} - disabling cache. current Id: {} seq: {}, batchList size: {}"","
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,226,"                            new Object[]{this, node.getMessageId(), node.getMessageId().getFutureOrSequenceLong(), batchList.size()});"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,227,                pruneLastCached();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,228,                if (lastCachedId != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,229,                    setBatch(lastCachedId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,230,                    lastCachedId = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,231,                    pendingCachedIds.clear();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,232,                }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,233,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,253,                // store complete - track via lastCachedId
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,254,                setLastCachedId(candidate);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,260,    private void setLastCachedId(MessageId candidate) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,261,        if (lastCachedId == null || lastCachedId.getFutureOrSequenceLong() == null) {  // possibly null for topics
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,262,            lastCachedId = candidate;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,263,"        } else if (Long.compare(((Long) candidate.getFutureOrSequenceLong()), ((Long) lastCachedId.getFutureOrSequenceLong())) > 0) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,264,            lastCachedId = candidate;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,354,"                    + "",maxBatchSize:"" + maxBatchSize + "",hasSpace:"" + hasSpace() + "",pendingCachedIds.size:"" + pendingCachedIds.size() + "",lastCachedId:"" + lastCachedId + "",lastCachedId-seq:"" + (lastCachedId != null ? lastCachedId.getFutureOrSequenceLong() : ""null"");"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,97,"        LOG.trace(""{}  setBatch {} loc: {}"", this, messageId, messageId.getEntryLocator());"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,89,    private static final int MAX_ASYNC_JOBS = 10000;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,104,        //broker.getSystemUsage().setSendFailIfNoSpace(true);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,409,"                            //LOG.info(""Send to: "" + ((ActiveMQConnection) queueConnection).getBrokerName() + "", "" + val + "", dest:"" + compositeQ);"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,19,import static org.junit.Assert.assertEquals;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,20,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,24,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,32,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,37,import org.apache.activemq.broker.region.policy.PolicyEntry;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4595Test.java,38,import org.apache.activemq.broker.region.policy.PolicyMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,774,            for (MessageContext messageContext : orderedUpdates) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,775,                if (!cursorAdd(messageContext.message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,776,                    // cursor suppressed a duplicate
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,777,                    messageContext.duplicate = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,784,            if (messageContext.onCompletion != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,785,                messageContext.onCompletion.run();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,786,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,104,            storeHasMessages = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,109,"                LOG.trace(""{} store replayed pending message due to concurrentStoreAndDispatchQueues {} seq: {}"", this, message.getMessageId(), message.getMessageId().getFutureOrSequenceLong());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,204,"                LOG.trace(""{} - enabling cache for empty store {} {}"", this, node.getMessageId(), node.getMessageId().getFutureOrSequenceLong());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,220,"            LOG.trace(""{} - disabling cache on add {} {}"", this, node.getMessageId(), node.getMessageId().getFutureOrSequenceLong());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,222,            syncWithStore();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,229,    private void syncWithStore() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,231,"            // only async adds, lets wait on the potential last add and reset from there"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,233,                MessageId lastStored = it.previous();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,234,                Object futureOrLong = lastStored.getFutureOrSequenceLong();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,239,                    } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,240,                        try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,241,                            future.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,242,"                            setLastCachedId(ASYNC_ADD, lastStored);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,243,                        } catch (Exception ignored) {}
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,248,                setBatch(lastCachedIds[ASYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,249,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,250,        } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,251,            // mix of async and sync - async can exceed sync only if next in sequence
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,252,            for (Iterator<MessageId> it = pendingCachedIds.iterator(); it.hasNext(); ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,253,                MessageId candidate = it.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,254,                final Object futureOrLong = candidate.getFutureOrSequenceLong();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,255,                if (futureOrLong instanceof Future) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,256,                    Future future = (Future) futureOrLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,257,                    if (future.isCancelled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,258,                        it.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,259,                    } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,260,                        try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,261,                            future.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,262,                            long next = 1 + (Long)lastCachedIds[SYNC_ADD].getFutureOrSequenceLong();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,263,"                            if (Long.compare(((Long) candidate.getFutureOrSequenceLong()), next) == 0) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,264,"                                setLastCachedId(SYNC_ADD, candidate);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,265,                            } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,266,"                                // out of sequence, revert to sync state"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,267,"                                LOG.trace(""{} cursor order out of sync at seq {}, audit must suppress potential replay of {} messages from the store"", this, next, pendingCachedIds.size());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,268,                                break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,269,                            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,270,                        } catch (Exception ignored) {}
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,271,                    }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,274,            if (lastCachedIds[SYNC_ADD] != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,275,                setBatch(lastCachedIds[SYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,276,            }
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,277,
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,285,        if (node.getMessageId().getFutureOrSequenceLong() instanceof Future) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,383,            this.storeHasMessages = !this.batchList.isEmpty() || !hadSpace;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,97,"        LOG.trace(""{}  setBatch {} seq: {}, loc: {}"", this, messageId, messageId.getFutureOrSequenceLong(), messageId.getEntryLocator());"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1770,"    private final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2340,    private String key(KahaDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,253,"                        LOG.warn(""{} timed out waiting for async add"", this, potentialDeadlock);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,254,                    } catch (Exception cancelledOrTimeOutOrErrorWorstCaseWeReplay) {cancelledOrTimeOutOrErrorWorstCaseWeReplay.printStackTrace();}
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,262,"                if (currentAdd.isRecievedByDFBridge() || Long.compare(((Long) currentAdd.getMessageId().getFutureOrSequenceLong()), ((Long) lastCachedIds[ASYNC_ADD].getFutureOrSequenceLong())) > 0) {"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,275,        if (node.getMessageId().getFutureOrSequenceLong() instanceof Future || node.getMessage().isRecievedByDFBridge()) {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4485LowLimitTest.java,67,    final int numBrokers = 8;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,313,                    } else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,314,"                        // out of sequence, revert to sync state"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,315,                        if (LOG.isDebugEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,316,"                            LOG.debug(""{} cursor order out of sync at seq {}, audit must suppress potential replay of {} messages from the store"", this, next, pendingCachedIds.size());"
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,317,                        }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,659,            final String key = identity.toProducerKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,666,"                        Long location = sd.messageIdIndex.get(tx, key);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,667,                        if (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,668,                            Long pending = sd.orderIndex.minPendingAdd();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,669,                            if (pending != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,670,"                                location = Math.min(location, pending-1);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,671,                            }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,672,"                            sd.orderIndex.setBatch(tx, location);"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,673,                        } else {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,674,"                            LOG.warn(""{} {} setBatch failed, location for {} not found in messageId index for {}"", this, dest.getName(), identity.getFutureOrSequenceLong(), identity);"
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1203,        messagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1220,            messagesLock.readLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2794,        MessageOrderCursor cursor = new MessageOrderCursor();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2895,                } else if (highPriorityIndex != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2896,"                    if (highPriorityIndex.containsKey(tx, sequence)) {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2897,                        lastHighKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2898,                        cursor.highPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2899,"                    } else if (lowPriorityIndex.containsKey(tx, sequence)) {"
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2900,                        lastLowKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2901,                        cursor.lowPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2902,                    }
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2904,"                    LOG.warn(""setBatch: sequence "" + sequence + "" not found in orderindex:"" + this);"
activemq-unit-tests/src/test/java/org/apache/activemq/TestSupport.java,182,"    public PersistenceAdapter setPersistenceAdapter(BrokerService broker, PersistenceAdapterChoice choice) throws IOException {"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,43,import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,44,import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,45,import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,46,import org.apache.derby.jdbc.EmbeddedDataSource;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,66,    private EmbeddedDataSource dataSource;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,87,    public boolean useDefaultStore = false;
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,95,"                {1000,  80,  80,   1024*1024*5,  true, true, false},"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,105,        dataSource = new EmbeddedDataSource();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,106,"        dataSource.setDatabaseName(""target/derbyDb"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,107,"        dataSource.setCreateDatabase(""create"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,108,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,109,        JDBCPersistenceAdapter jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,110,        jdbcPersistenceAdapter.setDataSource(dataSource);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,111,        jdbcPersistenceAdapter.setUseLock(false);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,112,
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,113,        if (!useDefaultStore) {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,114,            brokerService.setPersistenceAdapter(jdbcPersistenceAdapter);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,115,        } else {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,116,            KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,117,            kahaDBPersistenceAdapter.setConcurrentStoreAndDispatchQueues(true);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,118,        }
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,136,        brokerService.getSystemUsage().getMemoryUsage().setLimit(512 * 1024 * 1024);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,148,        try {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,149,"            dataSource.setShutdownDatabase(""shutdown"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,150,            dataSource.getConnection();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,151,        } catch (Exception ignored) {}
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,205,                if (!useDefaultStore) {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,206,                    DefaultJDBCAdapter.dumpTables(dataSource.getConnection());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,207,                }
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,220,"        LOG.info(""DB Contents START"");"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,221,        if (!useDefaultStore) {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,222,            DefaultJDBCAdapter.dumpTables(dataSource.getConnection());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,223,        }
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5266SingleDestTest.java,224,"        LOG.info(""DB Contents END"");"
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,372,            AckEntry pendingAck = this.pedingAcks.get(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,428,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,429,            AckEntry pendingAck = this.pedingAcks.get(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,440,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,449,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,451,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,455,
activemq-karaf-itest/src/test/java/org/apache/activemq/karaf/itest/ActiveMQBrokerNdCamelFeatureTest.java,47,"    @Ignore(""java.lang.IllegalArgumentException: BundleContext must be specified - needs investigation"")"
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,29,import org.apache.xbean.spring.context.ResourceXmlApplicationContext;
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,77,"            ResourceXmlApplicationContext ctx = new ResourceXmlApplicationContext(resource, Collections.EMPTY_LIST, null, Collections.EMPTY_LIST, false) {"
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,242,            if (TRANSPORTLOG.isDebugEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,243,"                TRANSPORTLOG.debug(this + "" failed: "" + e, e);"
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,244,            } else if (TRANSPORTLOG.isWarnEnabled() && !expected(e)) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,245,"                TRANSPORTLOG.warn(this + "" failed: "" + e);"
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,197,                // let the peer know that we are disconnecting after attempting
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,198,                // to cleanly shutdown the async tasks so that this is the last
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,199,                // command it see's.
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,200,                try {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,201,                    peer.transportListener.onCommand(new ShutdownInfo());
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,202,                } catch (Exception ignore) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,203,                }
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,204,
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,205,                // let any requests pending a response see an exception
activemq-unit-tests/src/test/java/org/apache/activemq/TestSupport.java,176,"    public static enum PersistenceAdapterChoice {LevelDB, KahaDB, AMQ, JDBC, MEM };"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2902Test.java,78,"                ""vm://localhost?broker.persistent=false"");"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,265,    @Test(timeout=60000)
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,266,    public void testStopSendsShutdownToPeer() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,267,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,268,        final VMTransport local = new VMTransport(new URI(location1));
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,269,        final VMTransport remote = new VMTransport(new URI(location2));
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,270,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,271,        local.setPeer(remote);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,272,        remote.setPeer(local);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,273,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,274,        final VMTestTransportListener remoteListener = new VMTestTransportListener(remoteReceived);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,275,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,276,        local.setTransportListener(new VMTestTransportListener(localReceived));
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,277,        remote.setTransportListener(remoteListener);
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,278,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,279,        local.start();
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,280,        local.stop();
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,281,
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,282,        assertTrue(Wait.waitFor(new Wait.Condition() {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,283,            @Override
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,284,            public boolean isSatisified() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,285,                return remoteListener.shutdownReceived;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,286,            }
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,287,        }));
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,288,    }
activemq-unit-tests/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java,289,
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,242,            if (! (e instanceof TransportDisposedIOException)) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,243,                if (TRANSPORTLOG.isDebugEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,244,"                    TRANSPORTLOG.debug(this + "" failed: "" + e, e);"
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,245,                } else if (TRANSPORTLOG.isWarnEnabled() && !expected(e)) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,246,"                    TRANSPORTLOG.warn(this + "" failed: "" + e);"
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,247,                }
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,197,                // let any requests pending a response see an exception and shutdown
activemq-unit-tests/src/test/java/org/apache/activemq/TestSupport.java,176,"    public static enum PersistenceAdapterChoice {LevelDB, KahaDB, JDBC, MEM };"
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ2902Test.java,78,"                ""vm://localhostTwo?broker.persistent=false"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,27,import org.apache.activemq.test.TestSupport;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,29,public class ConnectionExpiryEvictsFromPoolTest extends TestSupport {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,31,    private BrokerService broker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,36,    protected void setUp() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,37,        broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,38,        broker.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,39,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,40,"        TransportConnector connector = broker.addConnector(""tcp://localhost:0"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,41,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,55,        TimeUnit.SECONDS.sleep(1);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,68,        TimeUnit.SECONDS.sleep(1);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,82,        TimeUnit.SECONDS.sleep(1);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,103,        TimeUnit.SECONDS.sleep(1);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,110,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,111,    @Override
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,112,    protected void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,113,        broker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/ConnectionExpiryEvictsFromPoolTest.java,114,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,29,import junit.framework.Test;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,30,import junit.framework.TestCase;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,31,import junit.framework.TestSuite;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,32,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,40, *
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,41, * @author: tmielke
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,43,public class PooledConnectionFactoryMaximumActiveTest extends TestCase {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,50,    /**
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,51,     * Create the test case
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,52,     *
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,53,     * @param testName
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,54,     *            name of the test case
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,55,     */
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,56,    public PooledConnectionFactoryMaximumActiveTest(String testName) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,57,        super(testName);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,58,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,59,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,64,    /**
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,65,     * @return the suite of tests being tested
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,66,     */
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,67,    public static Test suite() {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,68,        return new TestSuite(PooledConnectionFactoryMaximumActiveTest.class);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,69,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,70,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,76,     *
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,80,"        ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(""vm://broker1?marshal=false&broker.persistent=false"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,93,        // Thread.sleep(100);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,109,}
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,111,class TestRunner2 implements Callable<Boolean> {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,113,    public final static Logger LOG = Logger.getLogger(TestRunner2.class);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,115,    /**
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,116,"     * @return true if test succeeded, false otherwise"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,117,     */
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,118,    @Override
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,119,    public Boolean call() {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,121,        Session one = null;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,123,        // wait at most 5 seconds for the call to createSession
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,124,        try {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,126,            if (PooledConnectionFactoryMaximumActiveTest.conn == null) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,127,"                LOG.error(""Connection not yet initialized. Aborting test."");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,131,"            one = PooledConnectionFactoryMaximumActiveTest.conn.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,132,"            LOG.info(""Created new Session with id"" + one);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,133,            PooledConnectionFactoryMaximumActiveTest.addSession(one);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,134,            Thread.sleep(2 * PooledConnectionFactoryMaximumActiveTest.sleepTimeout);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,135,        } catch (Exception ex) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,136,            LOG.error(ex.getMessage());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,137,            return new Boolean(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,138,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,139,        } finally {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,140,            if (one != null)
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,141,                try {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,142,                    one.close();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,143,                } catch (JMSException e) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,144,                    LOG.error(e.getMessage());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,145,                }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,147,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,148,"        // all good, test succeeded"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryMaximumActiveTest.java,149,        return new Boolean(true);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,56,public class PooledConnectionFactoryTest {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,60,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,67,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,99,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,119,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,142,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,161,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,189,"        assertTrue("""", Wait.waitFor(new Wait.Condition() {"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,194,        }));
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,207,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,212,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,271,    public void testApp() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,277,        Future<Boolean> result = executor.submit(new TestRunner());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,279,"        // test should not take > 5secs, so test fails i"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,280,        Thread.sleep(5 * 1000);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,282,        if (!result.isDone() || !result.get().booleanValue()) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryTest.java,306,"                ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(""vm://broker1?marshal=false&broker.persistent=false"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,22,import javax.jms.Connection;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,27,import org.apache.activemq.test.TestSupport;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,28,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,32,/**
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,33, * @version $Revision: 1.1 $
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,34, */
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,35,public class PooledConnectionFactoryWithTemporaryDestinationsTest extends TestSupport {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,39,    private BrokerService broker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,43,    protected void setUp() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,44,        broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,45,        broker.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,46,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,47,"        TransportConnector connector = broker.addConnector(""tcp://localhost:0"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,48,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,54,    protected void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,55,        broker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,56,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,57,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,119,        return ((RegionBroker) broker.getRegionBroker()).getTempQueueRegion().getDestinationMap().size();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java,123,        return ((RegionBroker) broker.getRegionBroker()).getTempTopicRegion().getDestinationMap().size();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,31,import javax.management.MalformedObjectNameException;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,32,import javax.management.ObjectName;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,42,import org.slf4j.Logger;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,43,import org.slf4j.LoggerFactory;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,45,public class PooledConnectionSessionCleanupTest {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,46,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,47,"    @SuppressWarnings(""unused"")"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,48,    private static final Logger LOG = LoggerFactory.getLogger(PooledConnectionSessionCleanupTest.class);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,49,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,50,    protected BrokerService service;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,68,    public void prepTest() throws java.lang.Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,69,        service = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,70,"        service.setBrokerName(""PooledConnectionSessionCleanupTestBroker"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,71,        service.setUseJmx(true);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,72,        service.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,73,        service.setSchedulerSupport(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,74,        service.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,75,        service.waitUntilStarted();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,80,        directConnFact = new ActiveMQConnectionFactory(service.getVmConnectorURI());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,100,    public void cleanupTest() throws java.lang.Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,125,        try {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,126,            if (service != null) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,127,                service.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,128,                service.waitUntilStopped();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,129,                service = null;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,130,            }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,131,        } catch (JMSException jms_exc) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,132,        }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,145,"    private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,146,"        ObjectName queueViewMBeanName = new ObjectName(""org.apache.activemq"""
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,147,"                + "":destinationType=Queue,destinationName="" + name"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,148,"                + "",type=Broker,brokerName="" + service.getBrokerName());"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,149,        QueueViewMBean proxy = (QueueViewMBean) service.getManagementContext()
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,150,"                .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,151,        return proxy;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,152,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,153,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,154,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,170,        }));
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,175,        assertNull(consumer.receive(2000));
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,185,        }));
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,192,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,208,        }));
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,213,        assertNull(consumer.receive(2000));
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionSessionCleanupTest.java,223,        }));
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,34,import org.slf4j.Logger;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,35,import org.slf4j.LoggerFactory;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,45,public class PooledConnectionTempDestCleanupTest {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,46,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,47,"    @SuppressWarnings(""unused"")"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,48,    private static final Logger LOG = LoggerFactory.getLogger(PooledConnectionTempDestCleanupTest.class);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,49,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,50,    protected BrokerService embeddedBroker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,68,    public void prepTest() throws java.lang.Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,69,        embeddedBroker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,70,        configureBroker(embeddedBroker);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,71,        embeddedBroker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,72,        embeddedBroker.waitUntilStarted();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,75,        directConnFact = new ActiveMQConnectionFactory(embeddedBroker.getVmConnectorURI());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,92,    public void cleanupTest() throws java.lang.Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,110,        try {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,111,            embeddedBroker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,112,        } catch (JMSException jms_exc) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,113,        }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,116,    protected void configureBroker(BrokerService broker_svc) throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,117,"        broker_svc.setBrokerName(""testbroker1"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,118,        broker_svc.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,119,        broker_svc.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,132,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,163,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,198,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempDestCleanupTest.java,219,        RegionBroker rb = (RegionBroker) embeddedBroker.getBroker().getAdaptor(RegionBroker.class);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,36,public class PooledConnectionTempQueueTest {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,42,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,44,"        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(""vm://localhost?broker.persistent=false"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,84,        Thread.sleep(5000);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,88,        System.out.println(replyMsg.getJMSCorrelationID());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,105,"        System.out.println(""Received message "" + requestMessageId);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,109,"        System.out.println(""Sending reply to "" + inMessage.getJMSReplyTo());"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTempQueueTest.java,117,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,23,import junit.framework.TestCase;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,24,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,33,public class PooledConnectionTest extends TestCase {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,35,    private final Logger log = LoggerFactory.getLogger(PooledConnectionTest.class);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,36,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,37,    @Override
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,38,    public void setUp() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,39,"        log.debug(""setUp() called."");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,40,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,41,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,42,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,43,    @Override
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,44,    public void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,45,"        log.debug(""tearDown() called."");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,46,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,56,"        log.debug(""running testRepeatedSetClientIDCalls()"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,71,"            log.error(""Repeated calls to ActiveMQConnection.setClientID(\""newID\"") caused "" + ise.getMessage());"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,85,"            log.debug(""Correctly received "" + ise);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,99,"            log.debug(""Correctly received "" + ise);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,104,"        log.debug(""Test finished."");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,109,"        cf.setConnectionFactory(new ActiveMQConnectionFactory(""vm://localhost?broker.persistent=false""));"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledConnectionTest.java,111,"        log.debug(""ConnectionFactory initialized."");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,19,import junit.framework.TestCase;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,25,import javax.jms.*;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,26,import java.util.ArrayList;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,27,import java.util.List;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,28,import java.util.concurrent.*;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,29,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,30,public class PooledSessionExhaustionBlockTimeoutTest extends TestCase {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,34,    private Logger logger = Logger.getLogger(getClass());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,36,    private BrokerService broker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,43,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,45,    protected void setUp() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,46,        broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,47,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,48,        broker.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,49,"        TransportConnector connector = broker.addConnector(""tcp://localhost:0"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,50,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,61,    @Override
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,62,    protected void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,63,        broker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,64,        broker.waitUntilStopped();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,65,        broker = null;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,66,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,67,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,103,"            logger.info(""sent "" + i + "" messages using "" + connectionFactory.getClass());"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,127,"                            logger.debug(""received "" + numReceived + "" messages "");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,143,"                System.out.println(""Starting threads to send messages!"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionBlockTimeoutTest.java,154,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,28,import junit.framework.TestCase;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,29,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,35,import java.util.ArrayList;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,36,import java.util.List;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,37,import java.util.concurrent.CyclicBarrier;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,38,import java.util.concurrent.ExecutorService;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,39,import java.util.concurrent.Executors;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,41,public class PooledSessionExhaustionTest extends TestCase {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,45,    private Logger logger = Logger.getLogger(getClass());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,47,    private BrokerService broker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,55,    protected void setUp() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,56,        broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,57,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,58,        broker.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,59,"        TransportConnector connector = broker.addConnector(""tcp://localhost:0"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,60,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,70,    @Override
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,71,    protected void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,72,        broker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,73,        broker.waitUntilStopped();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,74,        broker = null;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,75,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,76,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,109,"            logger.info(""sent "" + i + "" messages using "" + connectionFactory.getClass());"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,131,"                            logger.debug(""received "" + numReceived + "" messages "");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionExhaustionTest.java,147,"                System.out.println(""Starting threads to send messages!"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,31,import org.junit.After;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,35,public class PooledSessionNoPublisherCachingTest {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,37,    private BrokerService broker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,44,        broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,45,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,46,        broker.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,47,"        TransportConnector connector = broker.addConnector(""tcp://localhost:0"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,48,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,58,    @After
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,59,    public void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,60,        broker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,61,        broker.waitUntilStopped();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,62,        broker = null;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,63,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,64,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,65,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,79,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,102,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionNoPublisherCachingTest.java,116,    @Test
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,36,import org.junit.After;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,40,public class PooledSessionTest {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,42,    private BrokerService broker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,49,        broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,50,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,51,        broker.setUseJmx(true);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,52,        broker.getManagementContext().setCreateMBeanServer(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,53,"        TransportConnector connector = broker.addConnector(""tcp://localhost:0"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,54,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,63,    @After
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,64,    public void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,65,        broker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,66,        broker.waitUntilStopped();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,67,        broker = null;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,68,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,69,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,169,"        assertEquals(1, broker.getAdminView().getDynamicDestinationProducers().length);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java,178,"        assertEquals(1, broker.getAdminView().getDynamicDestinationProducers().length);"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,34,import org.apache.activemq.test.TestSupport;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,37,/**
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,38, *
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,39, */
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,40,public class PooledTopicPublisherTest extends TestSupport {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,47,"        pcf.setConnectionFactory(new ActiveMQConnectionFactory(""vm://test""));"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,55,
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,58,"        pcf.setConnectionFactory(new ActiveMQConnectionFactory(""vm://test""));"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,70,        BrokerService broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,71,"        TransportConnector networkConnector = broker.addConnector(""tcp://localhost:0"");"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,72,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,73,        broker.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,74,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,90,        conn.setClientID(getName());
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,94,"        //assertTrue(""got an exception"", gotException.await(5, TimeUnit.SECONDS));"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,95,        TimeUnit.SECONDS.sleep(2);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,96,        conn.close();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,97,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,99,    @Override
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,100,    protected void tearDown() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,101,        if (connection != null) {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,102,            connection.close();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,103,            connection = null;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledTopicPublisherTest.java,104,        }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/XAConnectionPoolTest.java,50,import org.apache.activemq.test.TestSupport;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/XAConnectionPoolTest.java,52,public class XAConnectionPoolTest extends TestSupport {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/XAConnectionPoolTest.java,159,"        pcf.setConnectionFactory(new XAConnectionFactoryOnly(new ActiveMQXAConnectionFactory(""vm://test?broker.persistent=false&jms.xaAckMode="" + Session.CLIENT_ACKNOWLEDGE)));"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/XAConnectionPoolTest.java,277,"        pcf.setConnectionFactory(new ActiveMQXAConnectionFactory(""vm://test?broker.persistent=false""));"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/XAConnectionPoolTest.java,296,"        pcf.setConnectionFactory(new ActiveMQXAConnectionFactory(""vm://test?broker.persistent=false""));"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,31,import org.junit.After;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,37,public class AMQ4441Test {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,40,    private BrokerService broker;
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,44,        broker = new BrokerService();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,45,        broker.setDeleteAllMessagesOnStartup(true);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,46,        broker.setPersistent(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,47,        broker.setUseJmx(false);
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,48,        broker.start();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,49,        broker.waitUntilStarted();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,50,    }
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,52,    @After
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,53,    public void stopBroker() throws Exception {
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,54,        broker.stop();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,55,        broker.waitUntilStopped();
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,58,    @Test(timeout=120000)
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,92,"        if (latch.await(1, TimeUnit.MINUTES)) {"
activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/bugs/AMQ4441Test.java,101,
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,145,        locked = locked && lock != null && lock.isValid() && file.exists();
activemq-unit-tests/src/test/java/org/apache/activemq/store/kahadb/KahaDBDeleteLockTest.java,95,        TimeUnit.MILLISECONDS.sleep(1);
activemq-unit-tests/src/test/java/org/apache/activemq/store/kahadb/KahaDBDeleteLockTest.java,96,"        RandomAccessFile file = new RandomAccessFile(new File(kahaDataDir, ""lock""), ""rw"");"
activemq-unit-tests/src/test/java/org/apache/activemq/store/kahadb/KahaDBDeleteLockTest.java,105,"        }, 5000));"
activemq-unit-tests/src/test/java/org/apache/activemq/store/kahadb/KahaDBDeleteLockTest.java,108,}
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,27,import java.util.Calendar;
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,42,    private RandomAccessFile readFile;
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,75,"                readFile = new RandomAccessFile(file, ""rw"");"
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,78,"                    lock = readFile.getChannel().tryLock(0, Math.max(1, readFile.getChannel().size()), false);"
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,85,                    //Set lastModified only if we are able to successfully obtain the lock.
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,86,                    readFile.getChannel().force(true);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,144,        if (readFile != null) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,146,                readFile.close();
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,149,            readFile = null;
activemq-unit-tests/src/test/java/org/apache/activemq/store/kahadb/KahaDBDeleteLockTest.java,104,"        // ensure modification will be seen, milisecond granularity"
activemq-unit-tests/src/test/java/org/apache/activemq/store/kahadb/KahaDBDeleteLockTest.java,105,        TimeUnit.MILLISECONDS.sleep(10);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,41,        if (msg == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,42,            return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,43,        }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,44,        if (!(msg instanceof BytesMessage)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,36,import org.apache.qpid.proton.amqp.messaging.DeliveryAnnotations;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,129,        final DeliveryAnnotations da = amqp.getDeliveryAnnotations();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,130,        if (da != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,131,"            for (Map.Entry<?, ?> entry : da.getValue().entrySet()) {"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,132,                String key = entry.getKey().toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,133,"                setProperty(jms, prefixVendor + prefixDeliveryAnnotations + key, entry.getValue());"
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,134,            }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,135,        }
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,136,
activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java,75,                            Thread.sleep(lockAcquireSleepInterval);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,22,
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,32,public class SharedFileLockerTest
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,33,{
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,34,   @Rule
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,35,   public TemporaryFolder testFolder;
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,38,   public SharedFileLockerTest()
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,39,   {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,40,      File file = new File(IOHelper.getDefaultDataDirectory());
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,41,      file.mkdir();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,43,      // TemporaryFolder will make sure the files are removed after the test is done
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,44,      testFolder = new TemporaryFolder(file);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,46,   }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,48,   @Test
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,49,   public void testLoop() throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,50,   {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,51,      // Increase the number of iterations if you are debugging races
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,52,      for (int i = 0 ; i < 100; i++)
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,53,      {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,54,         internalLoop(5);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,55,      }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,57,   }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,60,   @Test
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,61,   public void testLogging() throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,62,   {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,63,      // using a bigger wait here
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,64,      // to make sure we won't log any extra info
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,65,      internalLoop(100);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,66,   }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,68,   private void internalLoop(long timewait) throws Exception
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,69,   {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,70,      final AtomicInteger logCounts = new AtomicInteger(0);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,71,      DefaultTestAppender appender = new DefaultTestAppender() {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,72,         @Override
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,73,         public void doAppend(LoggingEvent event) {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,74,            logCounts.incrementAndGet();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,75,         }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,76,      };
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,78,      Logger.getRootLogger().addAppender(appender);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,80,      final AtomicInteger errors = new AtomicInteger(0);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,82,      Thread thread = null;
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,84,      SharedFileLocker locker1 = new SharedFileLocker();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,85,      locker1.setDirectory(testFolder.getRoot());
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,87,      final SharedFileLocker locker2 = new SharedFileLocker();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,88,      locker2.setLockAcquireSleepInterval(1);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,89,      locker2.setDirectory(testFolder.getRoot());
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,92,      try
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,93,      {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,94,         locker1.doStart();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,96,         Assert.assertTrue(locker1.keepAlive());
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,98,"         thread = new Thread(""Locker Thread"")"
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,99,         {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,100,            public void run()
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,102,               try
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,103,               {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,104,                  locker2.doStart();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,105,               }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,106,               catch (Throwable e)
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,107,               {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,108,                  errors.incrementAndGet();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,109,               }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,111,         };
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,113,         thread.start();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,115,         // I need to make sure the info was already logged
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,116,"         // but I don't want to have an unecessary wait here,"
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,117,         // as I want the test to run as fast as possible
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,118,         {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,120,            while (logCounts.get() < 1 && System.currentTimeMillis() < timeout)
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,121,            {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,122,               Thread.sleep(1);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,124,         }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,126,         if (timewait > 0)
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,127,         {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,128,            Thread.sleep(timewait);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,129,         }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,131,         Assert.assertTrue(thread.isAlive());
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,133,         locker1.stop();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,135,"         // 10 seconds here is an eternity, but it should only take milliseconds"
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,136,         thread.join(5000);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,138,"         Assert.assertEquals(""Extra logs in place"", 1, logCounts.get());"
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,140,         long timeout = System.currentTimeMillis() + 5000;
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,142,         while (timeout > System.currentTimeMillis() && !locker2.keepAlive())
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,143,         {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,144,            Thread.sleep(1);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,145,         }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,147,         Assert.assertTrue(locker2.keepAlive());
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,149,         locker2.stop();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,151,"         Assert.assertEquals(0, errors.get());"
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,153,      }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,154,      finally
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,155,      {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,158,         Logger.getRootLogger().removeAppender(appender);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,160,         // to make sure we won't leak threads if the test ever failed for any reason
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,161,         thread.join(1000);
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,162,         if (thread.isAlive())
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,163,         {
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,164,            thread.interrupt();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,165,         }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,167,"         File lockFile = new File(testFolder.getRoot(), ""lock"");"
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,168,         lockFile.delete();
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,169,      }
activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java,171,   }
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,57,    private final boolean keepDurableSubsActive;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,193,        this.usageManager.getMemoryUsage().removeUsageListener(this);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,301,            if (bytesRead == 0) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,344,        while (true) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,345,            switch (sslEngine.getHandshakeStatus()) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,346,            case NEED_UNWRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,347,                secureRead(ByteBuffer.allocate(sslSession.getApplicationBufferSize()));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,348,                break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,349,            case NEED_TASK:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,350,                Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,351,                while ((task = sslEngine.getDelegatedTask()) != null) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,352,                    taskRunnerFactory.execute(task);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,354,                break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,355,            case NEED_WRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,356,                ((NIOOutputStream) buffOut).write(ByteBuffer.allocate(0));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,357,                break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,358,            case FINISHED:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,359,            case NOT_HANDSHAKING:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,360,                finishHandshake();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,361,                return;
activemq-unit-tests/src/test/java/org/apache/activemq/transport/nio/NIOSSLLoadTest.java,31,public class NIOSSLLoadTest extends TestCase {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/nio/NIOSSLLoadTest.java,48,    @Override
activemq-unit-tests/src/test/java/org/apache/activemq/transport/nio/NIOSSLLoadTest.java,49,    protected void setUp() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/transport/nio/NIOSSLLoadTest.java,60,"        TransportConnector connector = broker.addConnector(""nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA"");"
activemq-unit-tests/src/test/java/org/apache/activemq/transport/nio/NIOSSLLoadTest.java,70,    @Override
activemq-unit-tests/src/test/java/org/apache/activemq/transport/nio/NIOSSLLoadTest.java,71,    protected void tearDown() throws Exception {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,351,        int timeout = 100;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,368,                            int keyCount = selector.select(timeout);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,369,                            if (keyCount == 0 && ((System.currentTimeMillis() - now) >= timeout)) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,116,        storeContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,81,        if (text == null && getContent() != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,82,            text = decodeContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,89,    private String decodeContent() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,91,        if (getContent() != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,94,                ByteSequence bodyAsBytes = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,95,                if (bodyAsBytes != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,96,                    is = new ByteArrayInputStream(bodyAsBytes);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,97,                    if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,98,                        is = new InflaterInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,99,                    }
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,100,                    DataInputStream dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,101,                    text = MarshallingSupport.readUTF8(dataIn);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,102,                    dataIn.close();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,144,"                MarshallingSupport.writeUTF8(dataOut, this.text);"
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,195,                text = decodeContent();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,358,
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,364,            for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,365,                Map.Entry entry = (Map.Entry) iter.next();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,366,"                msg.setObjectProperty((String) entry.getKey(), entry.getValue());"
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,386,            connection.close();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,388,
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,67,            if (System.getProperty(getVmLockKey()) != null) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,68,"                throw new IOException(""File '"" + file + ""' could not be locked as lock is already held for this jvm."");"
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,70,"            System.setProperty(getVmLockKey(), new Date().toString());"
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,89,"                    System.setProperty(getVmLockKey(), new Date().toString());"
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,104,                    System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,126,                System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,129,            lock = null;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,77,                    usageLock.readLock().lock();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,150,    private MessageAck pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,790,                        ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,794,            } else if (pendingAck != null && pendingAck.isStandardAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,795,                ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,974,                                    if (pendingAck != null && deliveredCounter > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,975,                                        session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1038,        MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1039,"        pendingAck = new MessageAck(md, ackType, deliveredCounter);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1040,        pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1041,        if( oldPendingAck==null ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1042,            pendingAck.setFirstMessageId(pendingAck.getLastMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1043,        } else if ( oldPendingAck.getAckType() == pendingAck.getAckType() ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1044,            pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1049,"                LOG.debug(""Sending old pending ack {}, new pending: {}"", oldPendingAck, pendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1052,"                LOG.debug(""dropping old pending ack {}, new pending: {}"", oldPendingAck, pendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1058,"            LOG.debug(""ackLater: sending: {}"", pendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1059,            session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1060,            pendingAck=null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,150,    private volatile MessageAck pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,783,            //Capture the pendingAck reference in case the optimizeAcknowledge dispatch
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,784,            //thread mutates it
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,785,            final MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,793,                        ack = oldPendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,797,            } else if (oldPendingAck != null && oldPendingAck.isStandardAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,798,                ack = oldPendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,977,                                    final MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,978,                                    if (oldPendingAck != null && deliveredCounter > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,979,                                        session.sendAck(oldPendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1042,        final MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1043,"        final MessageAck newPendingAck = new MessageAck(md, ackType, deliveredCounter);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1044,        newPendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1045,        if (oldPendingAck == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1046,            newPendingAck.setFirstMessageId(newPendingAck.getLastMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1047,        } else if (oldPendingAck.getAckType() == newPendingAck.getAckType()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1048,            newPendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1053,"                LOG.debug(""Sending old pending ack {}, new pending: {}"", oldPendingAck, newPendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1056,"                LOG.debug(""dropping old pending ack {}, new pending: {}"", oldPendingAck, newPendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1059,        pendingAck = newPendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1060,
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1064,"            LOG.debug(""ackLater: sending: {}"", newPendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1065,            session.sendAck(newPendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1066,            pendingAck = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,783,            if (isAutoAcknowledgeEach()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,784,                synchronized(deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,794,            } else if (pendingAck != null && pendingAck.isStandardAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,795,                ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,796,                pendingAck = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1038,        MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1039,"        pendingAck = new MessageAck(md, ackType, deliveredCounter);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1040,        pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1041,        if( oldPendingAck==null ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1042,            pendingAck.setFirstMessageId(pendingAck.getLastMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1043,        } else if ( oldPendingAck.getAckType() == pendingAck.getAckType() ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1044,            pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1045,        } else {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1046,"            // old pending ack being superseded by ack of another type, if is is not a delivered"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1047,"            // ack and hence important, send it now so it is not lost."
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1048,            if (!oldPendingAck.isDeliveredAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1049,"                LOG.debug(""Sending old pending ack {}, new pending: {}"", oldPendingAck, pendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1050,                session.sendAck(oldPendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1052,"                LOG.debug(""dropping old pending ack {}, new pending: {}"", oldPendingAck, pendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1054,        }
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1055,        // AMQ-3956 evaluate both expired and normal msgs as
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1056,        // otherwise consumer may get stalled
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1057,        if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1058,"            LOG.debug(""ackLater: sending: {}"", pendingAck);"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1059,            session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1060,            pendingAck=null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1061,            deliveredCounter = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1062,            additionalWindowSize = 0;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,274,"            .append(""' "").append("", clientid = '"").append(clientid).append(""' "").append("", userName = '"").append(userName).append(""' "")"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,57,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,253,            return new XAResource[]{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,254,                    new TransactionContext() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,255,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,256,                        @Override
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,257,                        public boolean isSameRM(XAResource xaresource) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,258,                            ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,259,                            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,260,                                original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,261,                                boolean result = super.isSameRM(xaresource);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,262,"                                LOG.trace(""{}.recover({})={}"", getConnection(), xaresource, result);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,263,                                return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,264,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,265,                            } catch (JMSException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,266,"                                LOG.trace(""isSameRM({}) failed"", xaresource, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,267,                                XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,268,                                throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,269,                            } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,270,                                closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,271,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,272,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,273,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,274,                        @Override
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,275,                        protected String getResourceManagerId() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,276,                            ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,277,                            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,278,                                original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,279,                                return super.getResourceManagerId();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,280,                            } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,281,                                closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,282,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,283,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,284,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,285,                        @Override
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,286,"                        public void commit(Xid xid, boolean onePhase) throws XAException {"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,287,                            ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,288,                            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,289,                                setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,290,"                                super.commit(xid, onePhase);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,291,"                                LOG.trace(""{}.commit({},{})"", getConnection(), xid);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,292,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,293,                            } catch (JMSException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,294,"                                LOG.trace(""{}.commit({},{}) failed"", getConnection(), xid, onePhase, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,295,                                throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,296,                            } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,297,                                closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,298,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,299,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,300,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,301,                        @Override
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,302,                        public void rollback(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,303,                            ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,304,                            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,305,                                original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,306,                                super.rollback(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,307,"                                LOG.trace(""{}.rollback({})"", getConnection(), xid);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,308,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,309,                            } catch (JMSException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,310,"                                LOG.trace(""{}.rollback({}) failed"", getConnection(), xid, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,311,                                throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,312,                            } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,313,                               closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,314,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,315,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,316,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,317,                        @Override
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,318,                        public Xid[] recover(int flags) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,319,                            Xid[] result = new Xid[]{};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,320,                            ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,321,                            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,322,                                original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,323,                                result = super.recover(flags);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,324,"                                LOG.trace(""{}.recover({})={}"", getConnection(), flags, result);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,325,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,326,                            } catch (JMSException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,327,"                                LOG.trace(""{}.recover({}) failed"", getConnection(), flags, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,328,                                throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,329,                            } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,330,                                closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,331,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,332,                            return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,333,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,334,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,335,                        @Override
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,336,                        public void forget(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,337,                            ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,338,                            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,339,                                original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,340,                                super.forget(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,341,"                                LOG.trace(""{}.forget({})"", getConnection(), xid);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,342,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,343,                            } catch (JMSException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,344,"                                LOG.trace(""{}.forget({}) failed"", getConnection(), xid, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,345,                                throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,346,                            } finally {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,347,                                closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,348,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,349,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,350,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,351,                        private void throwXAException(JMSException e) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,352,                            XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,353,                            xaException.errorCode = XAException.XAER_RMFAIL;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,354,                            throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,355,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,356,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,357,                        private ActiveMQConnection newConnection() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,358,                            ActiveMQConnection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,359,                            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,360,                                connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,361,                                connection.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,362,                            } catch (JMSException ex) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,363,                                if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,364,                                    try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,365,                                        connection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,366,                                    } catch (JMSException ignore) { }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,367,                                }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,368,                                throw ex;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,369,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,370,                            return connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,371,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,372,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,373,                        private void closeConnection(ActiveMQConnection original) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,374,                            ActiveMQConnection connection = getConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,375,                            if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,376,                                try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,377,                                    connection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,378,                                } catch (JMSException ignored) {}
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,379,                            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,380,                            setConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,381,                        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,382,                    }};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,383,
activemq-ra/src/test/java/org/apache/activemq/ra/ActiveMQConnectionExecutorThreadCleanUpTest.java,114,        ra.stop();
activemq-ra/src/test/java/org/apache/activemq/ra/ActiveMQConnectionFactoryTest.java,20,import static org.junit.Assert.assertFalse;
activemq-ra/src/test/java/org/apache/activemq/ra/ActiveMQConnectionFactoryTest.java,117,"        assertFalse(""no tthe same instance"", resources[0].equals(resource2[0]));"

File,LineNumber,src
wicket-request/src/main/java/org/apache/wicket/request/mapper/CompoundRequestMapper.java,46, private static class MapperWithScore implements Comparable<MapperWithScore>
wicket-request/src/main/java/org/apache/wicket/request/mapper/CompoundRequestMapper.java,59,   return o.compatibilityScore - compatibilityScore;
wicket-core/src/main/java/org/apache/wicket/Component.java,2213,
wicket-core/src/main/java/org/apache/wicket/Component.java,2214,  // check authorization
wicket-core/src/main/java/org/apache/wicket/Component.java,2215,  // first the component itself
wicket-core/src/main/java/org/apache/wicket/Component.java,2216,  // (after attach as otherwise list views etc wont work)
wicket-core/src/main/java/org/apache/wicket/Component.java,2217,  setRenderAllowed();
wicket-core/src/main/java/org/apache/wicket/validation/validator/UrlValidator.java,430,    if (topLevel.length() < 2 || topLevel.length() > 4)
wicket-core/src/test/java/org/apache/wicket/validation/validator/UrlValidatorTest.java,303,"   new ResultPair("".aaa"", false), new ResultPair(""aaa"", true)"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.java,1054,"    pageUrl = RequestCycle.get().urlFor(page.getClass(), page.getPageParameters());"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.java,1059,    pageUrl = RequestCycle.get().urlFor(handler);
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.java,1060,    String ie8_pageUrl = RequestCycle.get().mapUrlFor(handler).toString();
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,19,import static org.junit.Assert.assertFalse;
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,20,
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,30,import org.apache.wicket.util.tester.WicketTester;
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,31,import org.junit.After;
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,32,import org.junit.Before;
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,40,public class ComponentIsRenderedAllowedTest
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,42, private WicketTester tester;
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,43,
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,44, /** */
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,45, @Before
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,46, public void setupTester()
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,47, {
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,48,  tester = new WicketTester(new SecuredApplication());
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,49, }
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,50,
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,51, /** */
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,52, @After
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,53, public void destroyTester()
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,55,  tester.destroy();
wicket-core/src/test/java/org/apache/wicket/authorization/ComponentIsRenderedAllowedTest.java,56,  tester = null;
wicket-core/src/main/java/org/apache/wicket/Component.java,974,  // check authorization
wicket-core/src/main/java/org/apache/wicket/Component.java,975,  setRenderAllowed();
wicket-core/src/main/java/org/apache/wicket/Component.java,976,
wicket-util/src/main/java/org/apache/wicket/util/crypt/AbstractCrypt.java,70,"   log.error(""Error decoding text: "" + text, ex);"
wicket-util/src/main/java/org/apache/wicket/util/crypt/AbstractCrypt.java,72,  return null;
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,19,import static junit.framework.Assert.*;
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,359," public void assertFeedback(String path, String[] messages)"
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,376,   final String actual = renderedMessages.get(i).getMessage().toString();
wicket-core/src/main/java/org/apache/wicket/util/tester/WicketTester.java,377,"   assertResult(isEqual(expected, actual));"
wicket-core/src/main/java/org/apache/wicket/request/mapper/AbstractBookmarkableMapper.java,354,   if (!pageMustHaveBeenCreatedBookmarkable() || page.wasCreatedBookmarkable())
wicket-core/src/main/java/org/apache/wicket/request/mapper/MountedMapper.java,371,   Class<? extends IRequestablePage> pageClass = page.getClass();
wicket-core/src/main/java/org/apache/wicket/request/mapper/MountedMapper.java,372,   if (checkPageClass(pageClass))
wicket-core/src/main/java/org/apache/wicket/resource/aggregation/AbstractResourceAggregatingHeaderResponse.java,326,"  topLevelReferences.add(new ResourceReferenceAndStringData(null, null, url, null,"
wicket-core/src/main/java/org/apache/wicket/resource/aggregation/AbstractResourceAggregatingHeaderResponse.java,361,"  topLevelReferences.add(new ResourceReferenceAndStringData(reference, null, null, media,"
wicket-core/src/main/java/org/apache/wicket/resource/aggregation/AbstractResourceAggregatingHeaderResponse.java,362,"   ResourceType.CSS, false, null, condition));"
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tree/table/MiddleColumnsView.java,166,  nf.setMaximumIntegerDigits(2);
wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java,242,   super(out);
wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java,246,  protected final void writeObjectOverride(final Object obj) throws IOException
wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java,250,    super.writeObject(obj);
wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java,275,   super.flush();
wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java,281,   super.close();
testing/wicket-threadtest/src/main/java/org/apache/wicket/threadtest/apps/app1/ResourceTestPage.java,34,import com.sun.image.codec.jpeg.JPEGCodec;
testing/wicket-threadtest/src/main/java/org/apache/wicket/threadtest/apps/app1/ResourceTestPage.java,35,import com.sun.image.codec.jpeg.JPEGImageEncoder;
testing/wicket-threadtest/src/main/java/org/apache/wicket/threadtest/apps/app1/ResourceTestPage.java,73,    JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(baos);
testing/wicket-threadtest/src/main/java/org/apache/wicket/threadtest/apps/app1/ResourceTestPage.java,76,     encoder.encode(image);
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,101,"    generateCallbackScript(""Wicket.Ajax.get('"" + getCallbackUrl() +"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,102,"     ""&save=true&'+this.name+'='+Wicket.Form.encode(this.value)"") +"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,103,"    ""; return false;}"";"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,106,"    generateCallbackScript(""Wicket.Ajax.get('"" + getCallbackUrl() + ""&save=false'"") +"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,107,"    ""; return false;}"";"
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,394,   initLabelAndEditor(getDelegatingParentModel());
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,408,   initLabelAndEditor(getDelegatingParentModel());
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,423,   initLabelAndEditor(getDelegatingParentModel());
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,513,  * get a model that accesses the parent model lazily. this is required since we eventually
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,514,  * request the parents model before the component is added to the parent.
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,515,  *
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,516,  * @return model
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,518, private IModel<T> getDelegatingParentModel()
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,520,  return new IModel<T>()
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,522,   private static final long serialVersionUID = 1L;
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,524,   public T getObject()
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,525,   {
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,526,    return getParentModel().getObject();
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,527,   }
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,529,   public void setObject(final T object)
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,531,    getParentModel().setObject(object);
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,533,
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,534,   public void detach()
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,536,    getParentModel().detach();
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,538,  };
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/AjaxEditableLabel.java,541,
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1858, /**
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1859,  * @see org.apache.wicket.Component#setRenderAllowed()
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1860,  */
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1861, @Override
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1862, void setRenderAllowed()
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1863, {
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1864,  super.setRenderAllowed();
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1865,
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1866,"  visitChildren(new IVisitor<Component, Void>()"
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1867,  {
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1868,   @Override
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1869,"   public void component(final Component component, final IVisit<Void> visit)"
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1870,   {
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1871,    // Find out if this component can be rendered
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1872,    final boolean renderAllowed = component.isActionAuthorized(RENDER);
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1873,    // Authorize rendering
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1874,    component.setRenderAllowed(renderAllowed);
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1875,   }
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1876,  });
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1877, }
wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java,1878,
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,353,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,354,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,406,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,407,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,682,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,683,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,720,"  request = new MockHttpServletRequest(application, httpSession, servletContext);"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,790,"  request = new MockHttpServletRequest(application, httpSession, servletContext);"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2534,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2535,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2563,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2564,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2596,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2597,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2618,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2619,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2658,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2659,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2662,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2663,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2674,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2675,  */
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2711,  *
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,2712,  */
wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletResponse.java,105,  cookies.remove(cookie);
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,156,   return getData(true).connection.getInputStream();
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,70,  /** The stream read from this connection */
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,71,  private InputStream inputStream;
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,129,  }
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,147,   if (data.inputStream != null)
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,149,    IOUtils.closeQuietly(data.inputStream);
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,165,   data.inputStream = data.connection.getInputStream();
wicket-core/src/main/java/org/apache/wicket/util/resource/UrlResourceStream.java,166,   return data.inputStream;
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,30, *
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,33,public class UrlResourceStreamTest extends Assert
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,34,{
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,37,  *
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,41, public void lastModifiedForResourceInJar() throws IOException
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,42, {
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,54,  *
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,59," public void loadJustOnce() throws IOException, ResourceStreamNotFoundException"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,60, {
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,64,  final AtomicInteger counter = new AtomicInteger(0);
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,65,"  URL url = new URL(null, ""test://anything"", new CountingURLStreamHandler(realURL, counter));"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,69,"  assertEquals(0, counter.get());"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,70,  countingStream.length();
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,72,"  assertEquals(1, counter.get());"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,76,"  assertEquals(1, counter.get());"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,78,"  assertEquals(1, counter.get());"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,80,"  assertEquals(1, counter.get());"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,82,"  assertEquals(1, counter.get());"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,84,  // assert the connection is re-opened (again lazily) second time
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,86,"  assertEquals(2, counter.get());"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,93, private static final class CountingURLStreamHandler extends URLStreamHandler
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,94, {
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,95,  private final AtomicInteger counter;
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,99,"  public CountingURLStreamHandler(URL realURL, AtomicInteger counter)"
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,100,  {
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,101,   this.counter = counter;
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,106,  protected URLConnection openConnection(URL u) throws IOException
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,107,  {
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,108,   counter.getAndIncrement();
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,109,   return realURL.openConnection();
wicket-core/src/test/java/org/apache/wicket/util/resource/UrlResourceStreamTest.java,110,  }
wicket-util/src/main/java/org/apache/wicket/util/io/Connections.java,131,  else
wicket-util/src/main/java/org/apache/wicket/util/io/Connections.java,132,  {
wicket-util/src/main/java/org/apache/wicket/util/io/Connections.java,133,   connection.getInputStream().close();
wicket-util/src/main/java/org/apache/wicket/util/io/Connections.java,134,  }
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,122,"   throw new WicketRuntimeException(""ByteArrayResource's data cannot be 'null'."");"
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,124,  response.setContentLength(data.length);
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,125,
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,126,  if (response.dataNeedsToBeWritten(attributes))
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,128,   if (filename != null)
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,129,   {
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,130,    response.setFileName(filename);
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,131,    response.setContentDisposition(ContentDisposition.ATTACHMENT);
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,132,   }
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,133,   else
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,134,   {
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,135,    response.setContentDisposition(ContentDisposition.INLINE);
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,136,   }
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,138,   response.setWriteCallback(new WriteCallback()
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,140,    @Override
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,141,    public void writeData(final Attributes attributes)
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,143,     attributes.getResponse().write(data);
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,145,   });
wicket-core/src/main/java/org/apache/wicket/request/resource/ByteArrayResource.java,147,"   configureResponse(response, attributes);"
wicket-core/src/main/java/org/apache/wicket/request/resource/DynamicImageResource.java,171,"   configureResponse(response, attributes);"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/CheckGroupSelector.java,134,"   group.getForm().getMarkupId() + ""','"" + group.getInputName() + ""')"";"
wicket-core/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,68,   final FeedbackMessage message = listItem.getModelObject();
wicket-core/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,69,   message.markRendered();
wicket-core/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java,83,     return getCSSClass(message);
wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java,257,   final String contentType;
wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java,258,   if (Application.exists())
wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java,262,   else
wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java,263,   {
wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java,264,    contentType = resourceStream.getContentType();
wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java,265,   }
wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/autocomplete/AbstractAutoCompleteBehavior.java,144,"   .getParameterValue(""q"")"
wicket-core/src/main/java/org/apache/wicket/resource/header/CssContentHeaderItem.java,19,import java.util.Arrays;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssContentHeaderItem.java,20,import java.util.Collections;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssContentHeaderItem.java,21,
wicket-core/src/main/java/org/apache/wicket/resource/header/CssContentHeaderItem.java,33, private CharSequence css;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssContentHeaderItem.java,34, private String id;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssReferenceHeaderItem.java,37, private ResourceReference reference;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssReferenceHeaderItem.java,38, private String media;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssReferenceHeaderItem.java,39, private PageParameters pageParameters;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssReferenceHeaderItem.java,40, private String condition;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssUrlReferenceHeaderItem.java,33, private String url;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssUrlReferenceHeaderItem.java,34, private String media;
wicket-core/src/main/java/org/apache/wicket/resource/header/CssUrlReferenceHeaderItem.java,35, private String condition;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptContentHeaderItem.java,33, private CharSequence javaScript;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptContentHeaderItem.java,34, private String id;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptReferenceHeaderItem.java,40, private ResourceReference reference;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptReferenceHeaderItem.java,41, private String id;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptReferenceHeaderItem.java,42, private PageParameters pageParameters;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptReferenceHeaderItem.java,43, private boolean defer;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptReferenceHeaderItem.java,44, private String charset;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptUrlReferenceHeaderItem.java,35, private String url;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptUrlReferenceHeaderItem.java,36, private String id;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptUrlReferenceHeaderItem.java,37, private boolean defer;
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptUrlReferenceHeaderItem.java,38, private String charset;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnDomReadyHeaderItem.java,48, private CharSequence javaScript;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnDomReadyHeaderItem.java,57,  this.javaScript = javaScript;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnEventHeaderItem.java,51, private String target;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnEventHeaderItem.java,52, private String event;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnEventHeaderItem.java,53, private CharSequence javaScript;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnEventHeaderItem.java,64,  this.target = target;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnEventHeaderItem.java,65,  this.event = event;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnEventHeaderItem.java,66,  this.javaScript = javaScript;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnLoadHeaderItem.java,47, private CharSequence javaScript;
wicket-core/src/main/java/org/apache/wicket/resource/header/OnLoadHeaderItem.java,56,  this.javaScript = javaScript;
wicket-core/src/main/java/org/apache/wicket/resource/header/StringHeaderItem.java,43, private CharSequence string;
wicket-core/src/main/java/org/apache/wicket/resource/header/StringHeaderItem.java,52,  this.string = string;
wicket-core/src/main/java/org/apache/wicket/Component.java,2684,     response.render(StringHeaderItem.forString(markupHeaderResponse.getBuffer()));
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptHeaderItem.java,210,  String urlWoSessionId = Strings.stripJSessionId(url);
wicket-core/src/main/java/org/apache/wicket/resource/header/JavaScriptHeaderItem.java,211,"  JavaScriptUtils.writeJavaScriptUrl(response, urlWoSessionId, id, defer, charset);"
wicket-core/src/main/java/org/apache/wicket/resource/header/StringHeaderItem.java,53,"  this.string = Args.notEmpty(string, ""string"");"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1821,"  Url url = Url.parse(form.urlFor(IFormSubmitListener.INTERFACE).toString(),"
wicket-core/src/main/java/org/apache/wicket/request/mapper/HomePageMapper.java,89,  final Url url = request.getUrl();
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,595,"  * Convert to object types, returning null if text is null."
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,602,  return (text == null) ? null : toBooleanObject();
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,606,"  * Convert to object types, returning null if text is null."
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,613,  return (text == null) ? null : toCharacter();
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,617,"  * Convert to object types, returning null if text is null."
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,624,  return (text == null) ? null : toDoubleObject();
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,628,"  * Convert to object types, returning null if text is null."
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,635,  return (text == null) ? null : toDuration();
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,639,"  * Convert to object types, returning null if text is null."
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,646,  return (text == null) ? null : toInteger();
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,650,"  * Convert to object types, returning null if text is null."
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,657,  return (text == null) ? null : toLongObject();
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,671,"  * Convert to object types, returning null if text is null."
wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java,678,  return (text == null) ? null : toTime();
wicket-util/src/test/java/org/apache/wicket/util/string/StringValueTest.java,7, *
wicket-core/src/main/java/org/apache/wicket/Component.java,3312,
wicket-core/src/main/java/org/apache/wicket/Component.java,3324,  final RequestListenerInterface listener)
wicket-core/src/main/java/org/apache/wicket/Component.java,3328,"  PageAndComponentProvider provider = new PageAndComponentProvider(page, this);"
wicket-core/src/main/java/org/apache/wicket/Component.java,3355,
wicket-core/src/main/java/org/apache/wicket/Component.java,3365, public final CharSequence urlFor(final RequestListenerInterface listener)
wicket-core/src/main/java/org/apache/wicket/Component.java,3368,"  PageAndComponentProvider provider = new PageAndComponentProvider(page, this);"
wicket-core/src/main/java/org/apache/wicket/behavior/AbstractAjaxBehavior.java,89,"  return getComponent().urlFor(this, rli);"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java,199,   CharSequence url = group.urlFor(IOnChangeListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/form/CheckBox.java,159,   CharSequence url = urlFor(IOnChangeListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/form/DropDownChoice.java,236,"    new PageAndComponentProvider(getPage(), this), IOnChangeListener.INTERFACE));"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,53,import org.apache.wicket.markup.head.JavaScriptHeaderItem;
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,61,import org.apache.wicket.util.upload.FileUploadException;
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,117, * In case of an upload error two resource keys are available to specify error messages: {@code
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,118," * uploadTooLarge} and {@code uploadFailed}, i.e. for a form with id {@code myform} in {@code"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,119, * MyPage.properties}:
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,846,
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,847,  // If the form is stateless page parameters contain all form component
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,848,  // values. We need to remove those otherwise they get appended to action URL
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,849,  final PageParameters parameters = page.getPageParameters();
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,850,  if (parameters != null)
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,851,  {
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,852,"   visitFormComponents(new IVisitor<FormComponent<?>, Void>()"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,853,   {
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,854,    @Override
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,855,"    public void component(final FormComponent<?> formComponent, final IVisit<Void> visit)"
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,856,    {
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,857,     parameters.remove(formComponent.getInputName());
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,858,    }
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,859,   });
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,860,   parameters.remove(hiddenFieldId);
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,861,   if (submittingComponent instanceof AbstractSubmitLink)
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,862,   {
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,863,    AbstractSubmitLink submitLink = (AbstractSubmitLink)submittingComponent;
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,864,    parameters.remove(submitLink.getInputName());
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,865,   }
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,866,  }
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java,1535,  return urlFor(IFormSubmitListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/form/Radio.java,185,   CharSequence url = group.urlFor(IOnChangeListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/form/RadioChoice.java,407,     CharSequence url = urlFor(IOnChangeListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/image/resource/LocalizedImageResource.java,336,   url = component.urlFor(IResourceListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/link/InlineFrame.java,164,  return urlFor(ILinkListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/link/Link.java,325,  return urlFor(ILinkListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/link/ResourceLink.java,144,  return urlFor(IResourceListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/markup/html/pages/RedirectPage.java,72,"  this(page.urlFor(IRedirectListener.INTERFACE), 0);"
wicket-core/src/main/java/org/apache/wicket/markup/html/pages/RedirectPage.java,86,"  this(page.urlFor(IRedirectListener.INTERFACE), waitBeforeRedirectInSeconds);"
wicket-core/src/main/java/org/apache/wicket/request/handler/PageProvider.java,354, private void setPageParameters(PageParameters pageParameters)
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,951,  return link.urlFor(ILinkListener.INTERFACE).toString();
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1821,"  Url url = Url.parse(form.getRootForm().urlFor(IFormSubmitListener.INTERFACE).toString(),"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1822,   Charset.forName(request.getCharacterEncoding()));
wicket-core/src/test/java/org/apache/wicket/BehaviorRequestTest.java,137,"   tag.put(""href"", component.urlFor(this, IBehaviorListener.INTERFACE));"
wicket-core/src/test/java/org/apache/wicket/BehaviorUrlTest.java,134,"   tag.put(""href"", component.urlFor(this, IBehaviorListener.INTERFACE));"
wicket-core/src/test/java/org/apache/wicket/behavior/ImmutableBehaviorIdsTest.java,167,"   tag.put(attr, component.urlFor(this, IBehaviorListener.INTERFACE));"
wicket-extensions/src/main/java/org/apache/wicket/extensions/captcha/kittens/KittenCaptchaPanel.java,209,     CharSequence url = image.urlFor(IResourceListener.INTERFACE);
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1221,   fail(e.getMessage());
wicket-core/src/main/java/org/apache/wicket/markup/MarkupParser.java,172,  filters.add(new RelativePathPrefixHandler());
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,108,"   (tag.getAttributes().get(""wicket:id"") != null))"
wicket-core/src/main/java/org/apache/wicket/markup/MarkupParser.java,159,    filters.add(new WicketMessageTagHandler());
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,100, /** The markup created by reading the markup file */
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,101, private final MarkupResourceStream markup;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,102,
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,118,  this.markup = markup;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,176,
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,177, private String getWicketNamespace()
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,178, {
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,179,  String wicketNamespace;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,180,  if (markup != null)
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,181,  {
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,182,   wicketNamespace = markup.getWicketNamespace();
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,183,  }
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,184,  else {
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,185,   wicketNamespace = MarkupParser.WICKET;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,186,  }
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,187,  return wicketNamespace;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java,188, }
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,53, /** TODO Post 1.2: General: Namespace should not be a constant */
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,54," private final static String WICKET_MESSAGE_ATTRIBUTE_NAME = ""wicket:message"";"
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,55,
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,61, /** singleton instance of {@link AttributeLocalizer} */
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,65,  * Construct.
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,80,   WICKET_MESSAGE_ATTRIBUTE_NAME);
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,94,   tag.addBehavior(new AttributeLocalizer());
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,113,   String expr = tag.getAttributes().getString(WICKET_MESSAGE_ATTRIBUTE_NAME);
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketNamespaceHandler.java,43, /** The markup created by reading the markup file */
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketNamespaceHandler.java,44, private final MarkupResourceStream markup;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketNamespaceHandler.java,45,
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketNamespaceHandler.java,59,  this.markup = markup;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketNamespaceHandler.java,70,    markup.setWicketNamespace(namespace);
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketTagIdentifier.java,48, /** The current markup needed to get the markups namespace */
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketTagIdentifier.java,49, private final MarkupResourceStream markup;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketTagIdentifier.java,50,
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketTagIdentifier.java,59,  this.markup = markup;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketTagIdentifier.java,76,  final String namespace = markup.getWicketNamespace();
wicket-core/src/main/java/org/apache/wicket/markup/resolver/WicketMessageResolver.java,172,   * @param markupFragment
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,27,import org.apache.wicket.markup.MarkupParser;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,60, /**
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,61,  * singleton instance of {@link AttributeLocalizer}
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,62,  * @deprecated Do not use it because it is not aware of the markup namespace
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,63,  */
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,64, @Deprecated
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,65, public static final Behavior ATTRIBUTE_LOCALIZER = new AttributeLocalizer();
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,66,
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,124,  public AttributeLocalizer()
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,125,  {
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,126,"   this(MarkupParser.WICKET+':'+""message"");"
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,127,  }
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketMessageTagHandler.java,128,
wicket-core/src/main/java/org/apache/wicket/request/mapper/MountedMapper.java,388,     handler.getPageParameters());
wicket-core/src/main/java/org/apache/wicket/request/mapper/MountedMapper.java,367,  if (url == null && requestHandler instanceof ListenerInterfaceRequestHandler)
wicket-core/src/main/java/org/apache/wicket/request/mapper/MountedMapper.java,388,     page.getPageParameters());
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,50,
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,51,  for (QueryParameter p : request.getUrl().getQueryParameters())
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,53,"   parameters.add(p.getName(), p.getValue());"
wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java,44,  if (parameters == null)
wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java,45,  {
wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java,46,"   throw new IllegalStateException(""Argument 'parameters' may not be null"");"
wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java,47,  }
wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java,48,  this.parameters = parameters;
wicket-request/src/main/java/org/apache/wicket/request/parameter/CombinedRequestParametersAdapter.java,56,  Set<String> result = new HashSet<String>();
wicket-request/src/main/java/org/apache/wicket/request/parameter/UrlRequestParametersAdapter.java,21,import java.util.HashSet;
wicket-request/src/main/java/org/apache/wicket/request/parameter/UrlRequestParametersAdapter.java,58,  Set<String> result = new HashSet<String>();
wicket-core/src/main/java/org/apache/wicket/request/mapper/CryptoMapper.java,155,  if (encryptedUrl.getSegments().isEmpty() && encryptedUrl.getQueryParameters().isEmpty())
wicket-core/src/main/java/org/apache/wicket/markup/html/image/resource/BlobImageResource.java,66,   Blob blob = getBlob();
wicket-core/src/main/java/org/apache/wicket/markup/html/image/resource/BlobImageResource.java,88,  *
wicket-core/src/main/java/org/apache/wicket/markup/html/image/resource/BlobImageResource.java,91, protected abstract Blob getBlob();
wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/image/resource/ThumbnailImageResource.java,109,"   Attributes dispatchAttributes = new Attributes(attributes.getRequest(), byteResponse);"
wicket-request/src/main/java/org/apache/wicket/request/Url.java,301,"    result.parameters.add(parseQueryParameter(s, charset));"
wicket-request/src/main/java/org/apache/wicket/request/Url.java,321,  if (parts.length == 0)
wicket-request/src/main/java/org/apache/wicket/request/Url.java,322,  {
wicket-request/src/main/java/org/apache/wicket/request/Url.java,323,"   return new QueryParameter("""", """");"
wicket-request/src/main/java/org/apache/wicket/request/Url.java,324,  }
wicket-request/src/main/java/org/apache/wicket/request/Url.java,325,  else if (parts.length == 1)
wicket-request/src/main/java/org/apache/wicket/request/Url.java,326,  {
wicket-request/src/main/java/org/apache/wicket/request/Url.java,327,"   return new QueryParameter("""", decodeParameter(parts[0], charset));"
wicket-request/src/main/java/org/apache/wicket/request/Url.java,328,  }
wicket-request/src/main/java/org/apache/wicket/request/Url.java,329,  else
wicket-request/src/main/java/org/apache/wicket/request/Url.java,330,  {
wicket-request/src/main/java/org/apache/wicket/request/Url.java,331,"   return new QueryParameter(decodeParameter(parts[0], charset), decodeParameter(parts[1],"
wicket-request/src/main/java/org/apache/wicket/request/Url.java,332,    charset));
wicket-request/src/main/java/org/apache/wicket/request/Url.java,333,  }
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java,52,"   Args.notEmpty(key, ""key"");"
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java,53,   this.key = key;
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java,54,   this.value = value;
wicket-request/src/test/java/org/apache/wicket/request/UrlTest.java,202,
wicket-request/src/main/java/org/apache/wicket/request/mapper/AbstractMapper.java,152,  return encoder.decodePageParameters(request.cloneWithUrl(urlCopy));
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/IPageParametersEncoder.java,20,import org.apache.wicket.request.Request;
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/IPageParametersEncoder.java,43,  * @param request
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/IPageParametersEncoder.java,46, PageParameters decodePageParameters(Request request);
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,19,import java.util.List;
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,20,
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,21,import org.apache.wicket.request.IRequestParameters;
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,22,import org.apache.wicket.request.Request;
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,25,import org.apache.wicket.util.string.StringValue;
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,44, public PageParameters decodePageParameters(final Request request)
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,49,  for (String s : request.getUrl().getSegments())
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,54,
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,55,  IRequestParameters requestParameters = request.getRequestParameters();
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,56,  for (String paramName : requestParameters.getParameterNames())
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,58,   List<StringValue> parameterValues = requestParameters.getParameterValues(paramName);
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,59,   for (StringValue paramValue : parameterValues)
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,60,   {
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,61,"    parameters.add(paramName, paramValue);"
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoder.java,62,   }
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java,21,import org.apache.wicket.request.Request;
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java,33, * <strong>Note</strong>: Because of the nature of the encoder it doesn't support POST request parameters.
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java,67, public PageParameters decodePageParameters(Request request)
wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoder.java,71,  for (Iterator<String> segment = request.getUrl().getSegments().iterator(); segment.hasNext();)
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,19,import java.nio.charset.Charset;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,20,import java.util.Arrays;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,21,import java.util.Collections;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,22,import java.util.HashMap;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,23,import java.util.List;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,24,import java.util.Locale;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,25,import java.util.Map;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,26,import java.util.Set;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,27,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,28,import org.apache.wicket.request.IRequestParameters;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,29,import org.apache.wicket.request.Request;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,31,import org.apache.wicket.util.string.StringValue;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,41,  * Tests that PageParametersEncoder decodes both GET and POST parameters
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,45, public void decodePostParameters() throws Exception
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,48,  Request request = new Request()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,49,  {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,50,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,51,   public Url getUrl()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,52,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,53,"    return Url.parse(""idx1/idx2?named1=value1&named2=value2"");"
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,54,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,55,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,56,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,57,   public Url getClientUrl()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,58,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,59,    return null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,60,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,61,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,62,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,63,   public Locale getLocale()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,64,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,65,    return null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,66,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,67,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,68,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,69,   public Charset getCharset()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,70,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,71,    return null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,72,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,74,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,75,   public Object getContainerRequest()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,76,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,77,    return null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,78,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,80,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,81,   public IRequestParameters getPostParameters()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,82,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,83,    return new PostParameters();
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,84,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,85,  };
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,86,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,87,  PageParameters pageParameters = encoder.decodePageParameters(request);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,92,"  assertEquals(""1"", pageParameters.get(""postOne"").toOptionalString());"
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,93,"  assertEquals(""2"", pageParameters.getValues(""postTwo"").get(0).toOptionalString());"
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,94,"  assertEquals(""2.1"", pageParameters.getValues(""postTwo"").get(1).toOptionalString());"
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,95, }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,96,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,97, /**
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,98,  * Mock IRequestParameters that provides static POST parameters
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,99,  */
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,100, private static class PostParameters implements IRequestParameters
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,101, {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,102,"  private final Map<String, List<StringValue>> params = new HashMap<String, List<StringValue>>();"
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,103,  {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,104,"   params.put(""postOne"", Arrays.asList(StringValue.valueOf(""1"")));"
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,105,"   params.put(""postTwo"", Arrays.asList(StringValue.valueOf(""2""), StringValue.valueOf(""2.1"")));"
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,106,  }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,107,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,108,  public Set<String> getParameterNames()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,109,  {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,110,   return params.keySet();
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,111,  }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,112,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,113,  public StringValue getParameterValue(String name)
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,114,  {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,115,   List<StringValue> values = params.get(name);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,116,   return (values != null && !values.isEmpty()) ? values.get(0)
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,117,     : StringValue.valueOf((String)null);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,118,  }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,119,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,120,  public List<StringValue> getParameterValues(String name)
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,121,  {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,122,   List<StringValue> values = params.get(name);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,123,   return values != null ? Collections.unmodifiableList(values) : null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersEncoderTest.java,124,  }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,19,import java.nio.charset.Charset;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,20,import java.util.Locale;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,21,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,22,import org.apache.wicket.request.Request;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,88,  Request request = getRequest(url);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,91,  PageParameters parameters = decoder.decodePageParameters(request);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,106,  Request request = getRequest(url);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,109,  PageParameters parameters = decoder.decodePageParameters(request);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,124,  Request request = getRequest(url);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,127,  PageParameters parameters = decoder.decodePageParameters(request);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,141,  Request request = getRequest(url);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,144,  PageParameters parameters = decoder.decodePageParameters(request);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,159,  Request request = getRequest(url);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,162,  PageParameters parameters = decoder.decodePageParameters(request);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,177,  Request request = getRequest(url);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,180,  PageParameters parameters = decoder.decodePageParameters(request);
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,186,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,187, private Request getRequest(final Url url)
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,188, {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,189,  return new Request()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,190,  {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,191,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,192,   public Url getUrl()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,193,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,194,    return url;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,195,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,196,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,197,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,198,   public Locale getLocale()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,199,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,200,    return null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,201,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,202,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,203,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,204,   public Object getContainerRequest()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,205,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,206,    return null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,207,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,208,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,209,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,210,   public Url getClientUrl()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,211,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,212,    return url;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,213,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,214,
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,215,   @Override
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,216,   public Charset getCharset()
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,217,   {
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,218,    return null;
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,219,   }
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,220,  };
wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/UrlPathPageParametersEncoderTest.java,221, }
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,110,import org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,111,import org.apache.wicket.core.request.handler.IPageProvider;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,112,import org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,113,import org.apache.wicket.core.request.handler.PageAndComponentProvider;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,114,import org.apache.wicket.core.request.handler.PageProvider;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,115,import org.apache.wicket.core.request.handler.RenderPageRequestHandler;
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,980,"  return link.urlFor(ILinkListener.INTERFACE, new PageParameters()).toString();"
wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java,1890,"  while (url.getSegments().size() > 0 && url.getSegments().get(0).equals(""..""))"
wicket-core/src/test/java/org/apache/wicket/markup/html/link/BookmarkablePageLinkTest.java,84,"   ""<html><body><span wicket:id=\""link\"" onclick=\""var win = this.ownerDocument.defaultView || this.ownerDocument.parentWindow; if (win == window) { window.location.href=&#039;bookmarkable/org.apache.wicket.MockPageWithLink?urlEscapeNeeded=someone%27s+%5Eb%25a%26d+pa%22rameter&#039;; } ;return false\""></span></body></html>"","
wicket-core/src/test/java/org/apache/wicket/markup/html/link/MountedPageLinkTest.java,88,"  assertEquals(""wicket/page?0-1.ILinkListener-link"", url);"
wicket-core/src/test/java/org/apache/wicket/markup/html/link/MountedPageLinkTest.java,103,"  assertEquals(""wicket/page?0-1.ILinkListener-link"", url);"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,37,"  assertEquals(""xyz?x=y"", r1.renderUrl(Url.parse(""foo/bar/xyz?x=y"")));"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,38,"  assertEquals(""baz/xyz?x=y"", r1.renderUrl(Url.parse(""foo/bar/baz/xyz?x=y"")));"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,61,"  assertEquals(""a/b/c?x=y"", r1.renderUrl(Url.parse(""a/b/c?x=y"")));"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,71,"  assertEquals(""url?1"", r1.renderUrl(Url.parse(""url?1"")));"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,81,"  assertEquals(""x?1"", r1.renderUrl(Url.parse(""url/x?1"")));"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,103,"  assertEquals(""first-test-page/indexed1/indexed2/indexed3?p1=v1"","
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,150,"  assertEquals(""."", r1.renderUrl(Url.parse("""")));"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,160,"  assertEquals(""."", r1.renderUrl(Url.parse("""")));"
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,165,  *
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,166,  * A Url should not ends with '..' because some web containers do not handle it
wicket-core/src/test/java/org/apache/wicket/request/cycle/UrlRendererTest.java,167,  * properly. Using '../' works better.
wicket-extensions/src/test/java/org/apache/wicket/extensions/markup/html/AjaxLazyLoadPanelTesterTest.java,54,"   ""<img alt=\""Loading...\"" src=\""resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/indicator.gif\""/>"");"
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,236,   String result;
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,237,   if (Strings.isEmpty(renderedUrl))
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,239,"    result = ""."";"
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,241,"   else if (renderedUrl.endsWith(""..""))"
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,244,    result = renderedUrl + '/';
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,246,   else
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,247,   {
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,248,    result = renderedUrl;
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,249,   }
wicket-request/src/main/java/org/apache/wicket/request/UrlRenderer.java,250,   return  result;
wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/WicketLinkTagHandler.java,212,    tag.setId(id);
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,30,import org.apache.wicket.protocol.http.mock.MockHttpServletResponse;
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,31,import org.apache.wicket.util.time.Time;
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,52,"  final String url = ""relative/path"";"
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,72,"   ""<ajax-response><redirect><![CDATA[relative/path]]></redirect></ajax-response>"","
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,89,"  final String url = ""relative/path"";"
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,100,  verify(httpServletResponse).sendRedirect(url);
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,102,
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,104,
wicket-core/src/test/java/org/apache/wicket/protocol/http/servlet/ServletWebResponseTest.java,105,}
wicket-core/src/main/java/org/apache/wicket/Page.java,39,import org.apache.wicket.settings.IRequestCycleSettings.RenderStrategy;
wicket-core/src/main/java/org/apache/wicket/Page.java,41,import org.apache.wicket.core.util.lang.WicketObjects;
wicket-core/src/main/java/org/apache/wicket/Page.java,284,  if (!getFlag(FLAG_IS_DIRTY) &&
wicket-core/src/main/java/org/apache/wicket/Page.java,285,   (
wicket-core/src/main/java/org/apache/wicket/Page.java,286,    isVersioned() && pageManager.supportsVersioning() ||
wicket-core/src/main/java/org/apache/wicket/Page.java,287,
wicket-core/src/main/java/org/apache/wicket/Page.java,288,    // we need to get pageId for new page instances even when the page doesn't need
wicket-core/src/main/java/org/apache/wicket/Page.java,289,"    // versioning, otherwise pages override each other in the page store and back button"
wicket-core/src/main/java/org/apache/wicket/Page.java,290,    // support is broken
wicket-core/src/main/java/org/apache/wicket/Page.java,291,    isInitialization
wicket-core/src/main/java/org/apache/wicket/Page.java,292,   )
wicket-core/src/main/java/org/apache/wicket/Page.java,293,  )
wicket-core/src/main/java/org/apache/wicket/Page.java,1020,  if (getApplication().getRequestCycleSettings().getRenderStrategy() != RenderStrategy.REDIRECT_TO_BUFFER)
wicket-core/src/main/java/org/apache/wicket/Page.java,1021,  {
wicket-core/src/main/java/org/apache/wicket/Page.java,1022,   // don't increment page id for redirect to render and one pass render during rendering
wicket-core/src/main/java/org/apache/wicket/Page.java,1023,   setFreezePageId(true);
wicket-core/src/main/java/org/apache/wicket/Page.java,1024,  }
wicket-core/src/main/java/org/apache/wicket/Page.java,1032,   setFreezePageId(false);
wicket-core/src/main/java/org/apache/wicket/Component.java,2724,      response.markRendered(behavior);
wicket-core/src/test/java/org/apache/wicket/behavior/SharedBehaviorTest.java,23,import org.apache.wicket.markup.html.IHeaderResponse;
wicket-core/src/test/java/org/apache/wicket/behavior/SharedBehaviorTest.java,83,"   response.renderString(""\nRendering header contribution for component with id: "" + component.getId());"

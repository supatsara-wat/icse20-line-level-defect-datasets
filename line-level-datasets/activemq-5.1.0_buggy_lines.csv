File,LineNumber,src
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,96,            waitForShutdown();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,127,                synchronized (shutdown) {
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,128,                    shutdown[0] = true;
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,129,                    shutdown.notify();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,144,        // Stop each broker
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,145,        for (Iterator<BrokerService> i = brokers.iterator(); i.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,146,            BrokerService broker = i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,147,            broker.stop();
activemq-console/src/main/java/org/apache/activemq/console/command/StartCommand.java,148,        }
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,173,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,174,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,476,"            LOG.warn(""Failed to stop broker"");"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,960,             }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1125,            synchronized (this.consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1126,                consumers = new ArrayList<Subscription>(this.consumers);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1127,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1129,            for (MessageReference node : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1130,                Subscription target = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1131,                List<Subscription> targets = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1132,                for (Subscription s : consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1133,"                    if (dispatchSelector.canSelect(s, node)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1134,                        if (!s.isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1135,                            s.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1136,                            target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1137,                            break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1138,                        } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1139,                            if (targets == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1140,                                targets = new ArrayList<Subscription>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1142,                            targets.add(s);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1145,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1146,                if (target == null && targets != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1147,                    // pick the least loaded to add the message too
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1148,                    for (Subscription s : targets) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1149,                        if (target == null
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1150,                                || target.getInFlightUsage() > s
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1151,                                        .getInFlightUsage()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1152,                            target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1155,                    if (target != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1156,                        target.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1157,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1158,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1159,                if (target != null && !strictOrderDispatch && consumers.size() > 1 &&
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1160,                         !dispatchSelector.isExclusiveConsumer(target)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1161,                    synchronized (this.consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1162,                        if( removeFromConsumerList(target) ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1163,                            addToConsumerList(target);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1164,                            consumers = new ArrayList<Subscription>(this.consumers);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1168,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,416,            Set<Integer> inUse = referenceStoreAdapter.getReferenceFileIdsInUse();
activemq-core/src/main/java/org/apache/activemq/command/Message.java,137,        // copying the broker path breaks networks - if a consumer re-uses a
activemq-core/src/main/java/org/apache/activemq/command/Message.java,138,        // consumed
activemq-core/src/main/java/org/apache/activemq/command/Message.java,139,        // message and forwards it on
activemq-core/src/main/java/org/apache/activemq/command/Message.java,140,        // copy.brokerPath = brokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,391,    protected void serviceRemoteCommand(Command command) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,594,                            remoteBroker.oneway(message);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,596,                            dequeueCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,444,            //closing the socket can hang also
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,445,            final CountDownLatch latch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,446,            SOCKET_CLOSE.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,447,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,448,                public void run() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,449,                    try {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,450,                        socket.close();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,451,                    } catch (IOException e) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,452,"                        LOG.debug(""Caught exception closing socket"",e);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,453,                    }finally {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,454,                        latch.countDown();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,457,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,458,            });
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,459,"            latch.await(1,TimeUnit.SECONDS);"
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,31,    private int firstBin = -1;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,57,        boolean answer = true;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,64,            if (value) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,65,            }else {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,66,            }
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,120,            if (firstIndex < 0) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,121,                firstIndex = 0;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,122,            }
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,123,            if (bin >= list.size()) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,124,                list.removeFirst();
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,125,                firstIndex += BitArray.LONG_SIZE;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,126,                list.add(new BitArray());
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,127,                bin = list.size() - 1;
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,146,        if (firstBin < 0) {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,147,            firstBin = 0;
activemq-core/src/test/java/org/apache/activemq/ActiveMQMessageAuditTest.java,70,        for (String id : list) {
activemq-core/src/test/java/org/apache/activemq/ActiveMQMessageAuditTest.java,71,            assertTrue(audit.isDuplicate(id));
activemq-core/src/test/java/org/apache/activemq/ActiveMQMessageAuditTest.java,93,        for (MessageReference msg : list) {
activemq-core/src/test/java/org/apache/activemq/ActiveMQMessageAuditTest.java,94,            assertTrue(audit.isDuplicate(msg));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1065,        synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1066,            messages.addMessageLast(msg);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1067,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,96,    public synchronized boolean isEmpty() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,97,        if(memoryList.isEmpty() && isDiskListEmpty()){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,98,            return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,99,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,100,        for (Iterator<MessageReference> iterator = memoryList.iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,101,            MessageReference node = iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,102,            if (node== QueueMessageReference.NULL_MESSAGE){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,103,                continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,105,            if (!node.isDropped()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,106,                return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,108,            // We can remove dropped references.
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,109,            iterator.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,119,    public synchronized void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,120,        iterating = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,121,        last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,122,        iter = isDiskListEmpty() ? memoryList.iterator() : getDiskList().listIterator();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,125,    public synchronized void release() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,126,        iterating = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,127,        if (flushRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,128,            flushRequired = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,129,            flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,133,    public synchronized void destroy() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,134,        stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,135,        for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,136,            Message node = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,137,            node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,138,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,139,        memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,140,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,141,            getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,145,    public synchronized LinkedList<MessageReference> pageInList(int maxItems) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,146,        LinkedList<MessageReference> result = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,148,        for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,149,            result.add(i.next());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,150,            count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,151,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,152,        if (count < maxItems && !isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,153,            for (Iterator<MessageReference> i = getDiskList().iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,154,                Message message = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,155,                message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,156,                message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,157,                message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,158,                result.add(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,170,    public synchronized void addMessageLast(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,173,                regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,174,                if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,175,                    if (hasSpace() || this.store==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,176,                        memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,177,                        node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,178,                        return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,180,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,181,                if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,183,                        expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,184,                        if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,                        } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,189,                            flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,193,                systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,194,                getDiskList().add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,195,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,198,"                        + "" first to FilePendingMessageCursor "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,211,    public synchronized void addMessageFirst(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,214,                regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,215,                if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,216,                    if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,217,                        memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,218,                        node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,219,                        return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,221,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,222,                if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,224,                        expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,229,                        } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,230,                            flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,234,                systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,235,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,236,                getDiskList().addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,247,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,251,    public synchronized boolean hasNext() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,252,        return iter.hasNext();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,258,    public synchronized MessageReference next() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,259,        Message message = (Message)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,260,        last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,261,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,262,            // got from disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,263,            message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,264,            message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,265,            message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,273,    public synchronized void remove() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,274,        iter.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,275,        if (last != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,276,         last.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,284,    public synchronized void remove(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,285,        if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,286,         node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,287,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,288,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,289,            getDiskList().remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,296,    public synchronized int size() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,297,        return memoryList.size() + (isDiskListEmpty() ? 0 : getDiskList().size());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,303,    public synchronized void clear() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,304,        memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,305,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,306,            getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,308,        last=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,311,    public synchronized boolean isFull() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,312,        // we always have space - as we can persist to disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,313,        return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,327,            synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,348,    protected synchronized void expireOldMessages() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,349,        if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,350,            LinkedList<MessageReference> tmpList = new LinkedList<MessageReference>(this.memoryList);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,351,            this.memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,352,            while (!tmpList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,353,                MessageReference node = tmpList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,354,                if (node.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,355,                    discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,356,                }else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,357,                    memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,358,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,361,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,364,    protected synchronized void flushToDisk() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,365,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,366,        if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,367,            while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,368,                MessageReference node = memoryList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,369,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,370,                getDiskList().addLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,372,            memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,19,import org.apache.activemq.ActiveMQMessageAudit;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,24,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,92,    public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,107,    public synchronized void addMessageFirst(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,162,    public synchronized void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/SslBrokerService.java,93,"            transportFactory.setKeyAndTrustManagers(km, tm, random);"
activemq-core/src/main/java/org/apache/activemq/broker/SslBrokerService.java,94,
activemq-core/src/main/java/org/apache/activemq/broker/SslBrokerService.java,95,            return transportFactory.doBind(brokerURI);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,86,            try {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,87,                remoteTransport = TransportFactory.connect(connectUri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,88,            } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,89,"                LOG.warn(""Could not connect to remote URI: "" + localURIName + "": "" + e.getMessage());"
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,90,"                LOG.debug(""Connection failure exception: "" + e, e);"
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,91,                return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,92,            }
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,95,                localTransport = createLocalTransport();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,96,            } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,97,                ServiceSupport.dispose(remoteTransport);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,98,"                LOG.warn(""Could not connect to local URI: "" + localURIName + "": "" + e.getMessage());"
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,99,"                LOG.debug(""Connection failure exception: "" + e, e);"
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,100,                return;
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,30,import org.apache.activemq.broker.BrokerServiceAware;
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,120,        if (brokerService != null && tf instanceof BrokerServiceAware) {
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,121,            ((BrokerServiceAware)tf).setBrokerService(brokerService);
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,123,        return tf.doBind(location);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,63,public class SslTransportFactory extends TcpTransportFactory implements BrokerServiceAware {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,66,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,67,    // The context used to creat ssl sockets.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,68,    private SSLContext sslContext;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,69,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,70,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,71,    /**
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,72,     * Constructor. Nothing special.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,73,     */
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,74,    public SslTransportFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,75,    }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,76,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,150,    /**
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,151,     * Sets the key and trust managers used in constructed socket factories.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,152,     * Passes given arguments to SSLContext.init(...).
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,153,     *
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,154,     * @param km The sources of authentication keys or null.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,155,     * @param tm The sources of peer authentication trust decisions or null.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,156,     * @param random The source of randomness for this generator or null.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,157,     */
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,158,"    public void setKeyAndTrustManagers(KeyManager[] km, TrustManager[] tm, SecureRandom random) throws KeyManagementException {"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,159,        // Killing old context and making a new one just to be safe.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,160,        try {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,161,"            sslContext = SSLContext.getInstance(""TLS"");"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,162,        } catch (NoSuchAlgorithmException e) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,163,            // This should not happen unless this class is improperly modified.
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,164,"            throw new RuntimeException(""Unknown SSL algorithm encountered."", e);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,165,        }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,166,"        sslContext.init(km, tm, random);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,167,    }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,168,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,169,    public void setBrokerService(BrokerService brokerService) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,170,        SslContext c = brokerService.getSslContext();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,171,        if( sslContext == null && c!=null ) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,172,            try {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,173,"                setKeyAndTrustManagers(c.getKeyManagersAsArray(), c.getTrustManagersAsArray(), c.getSecureRandom());"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,174,            } catch (KeyManagementException e) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,175,                throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,176,            }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,177,        }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,178,    }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,186,    protected ServerSocketFactory createServerSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,187,        if (sslContext == null) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,188,            return SSLServerSocketFactory.getDefault();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,190,            return sslContext.getServerSocketFactory();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,200,    protected SocketFactory createSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,201,        if (sslContext == null) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,202,            return SSLSocketFactory.getDefault();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,204,            return sslContext.getSocketFactory();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,152,    protected ServerSocketFactory createServerSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,156,    protected SocketFactory createSocketFactory() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1065,        messages.addMessageLast(msg);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,24,import java.util.concurrent.locks.ReentrantLock;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,63,    private ReentrantLock lock = new ReentrantLock(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,98,    public boolean isEmpty() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,99,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,100,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,101,            if(memoryList.isEmpty() && isDiskListEmpty()){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,102,                return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,104,            for (Iterator<MessageReference> iterator = memoryList.iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,105,                MessageReference node = iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,106,                if (node== QueueMessageReference.NULL_MESSAGE){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,107,                    continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,108,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,109,                if (!node.isDropped()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,110,                    return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,111,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,112,                // We can remove dropped references.
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,113,                iterator.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,115,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,116,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,126,    public void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,127,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,128,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,129,            iterating = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,130,            last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,131,            iter = isDiskListEmpty() ? memoryList.iterator() : getDiskList().listIterator();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,132,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,133,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,134,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,137,    public void release() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,138,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,139,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,140,            synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,141,                iterating = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,142,                this.notifyAll();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,143,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,144,            if (flushRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,145,                flushRequired = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,146,                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,147,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,148,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,149,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,153,    public void destroy() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,154,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,155,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,156,            stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,157,            for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,158,                Message node = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,159,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,160,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,161,            memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,162,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,163,                getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,164,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,165,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,166,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,170,    public LinkedList<MessageReference> pageInList(int maxItems) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,171,        int count = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,173,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,174,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,175,            for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,176,                result.add(i.next());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,179,            if (count < maxItems && !isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,180,                for (Iterator<MessageReference> i = getDiskList().iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,181,                    Message message = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,182,                    message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,183,                    message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,184,                    message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,185,                    result.add(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,186,                    count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,187,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,189,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,190,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,200,    public void addMessageLast(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,203,                lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,204,                try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,205,                    while (iterating) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,206,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,207,                        synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,208,                            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,209,                                this.wait();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,210,                            } catch (InterruptedException ie) {}
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,211,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,212,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,214,                    regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,216,                        if (hasSpace() || this.store==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,222,                    if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,223,                        if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,224,                            expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,225,                            if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,226,                                memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,227,                                node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,228,                                return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,229,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,230,                                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,231,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,232,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,233,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,234,                    if (systemUsage.getTempUsage().isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,235,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,236,                        systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,237,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,238,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,239,                    getDiskList().add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,240,                } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,241,                    lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,245,"                        + "" last to FilePendingMessageCursor "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,258,    public void addMessageFirst(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,261,                lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,262,                try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,263,                    while (iterating) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,264,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,265,                        synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,266,                            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,267,                                this.wait();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,268,                            } catch (InterruptedException ie) {}
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,269,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,270,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,272,                    regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,280,                    if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,281,                        if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,282,                            expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,283,                            if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,284,                                memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,285,                                node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,286,                                return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,287,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,288,                                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,289,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,290,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,291,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,292,                    if (systemUsage.getTempUsage().isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,293,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,294,                        systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,295,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,296,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,297,                    node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,298,                    getDiskList().addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,299,                } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,300,                    lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,312,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,316,    public boolean hasNext() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,317,        boolean result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,318,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,319,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,320,            result = iter.hasNext();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,321,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,322,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,323,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,324,        return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,330,    public MessageReference next() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,331,        Message message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,332,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,333,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,334,            message = (Message)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,335,            last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,336,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,337,                // got from disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,338,                message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,339,                message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,340,                message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,341,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,342,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,343,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,351,    public void remove() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,352,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,353,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,354,            iter.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,355,            if (last != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,356,                last.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,357,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,358,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,359,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,367,    public void remove(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,368,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,369,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,370,            if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,371,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,372,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,373,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,374,                getDiskList().remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,375,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,376,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,377,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,384,    public int size() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,385,        int result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,386,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,387,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,388,            result = memoryList.size() + (isDiskListEmpty() ? 0 : getDiskList().size());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,389,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,390,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,391,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,392,        return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,398,    public void clear() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,399,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,400,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,401,            memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,402,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,403,                getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,404,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,405,            last=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,406,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,407,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,411,    public boolean isFull() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,412,        boolean result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,413,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,414,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,415,            // we always have space - as we can persist to disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,416,            // TODO: not necessarily true.
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,417,            result = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,418,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,419,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,420,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,421,        return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,435,            lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,436,            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,445,            } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,446,                lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,459,    protected void expireOldMessages() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,460,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,461,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,462,            if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,463,                LinkedList<MessageReference> tmpList = new LinkedList<MessageReference>(this.memoryList);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,464,                this.memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,465,                while (!tmpList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,466,                    MessageReference node = tmpList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,467,                    if (node.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,468,                        discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,469,                    }else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,470,                        memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,471,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,472,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,474,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,475,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,479,    protected void flushToDisk() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,480,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,481,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,482,            if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,483,                while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,484,                    MessageReference node = memoryList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,485,                    node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,486,                    getDiskList().addLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,487,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,488,                memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,490,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,491,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,90,    public void addMessageLast(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,105,    public void addMessageFirst(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,143,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,144,    public synchronized void release() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,145,     nonPersistent.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,146,     persistent.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,147,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,165,    public void reset() {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,327,        getSession(); // .setMessageListener(listener);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,567,        this.transportListener = commandListener;
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,50,        answer.getConfiguration().setBrokerURL(brokerURL);
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,65,    @Override
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,66,    public ActiveMQConfiguration getConfiguration() {
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,67,        return (ActiveMQConfiguration) super.getConfiguration();
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,68,    }
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,69,
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,71,        getConfiguration().setBrokerURL(brokerURL);
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,75,        getConfiguration().setUserName(userName);
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,79,        getConfiguration().setPassword(password);
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,97,        getConfiguration().setUsePooledConnection(usePooledConnection);
activemq-core/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,101,        getConfiguration().setUseSingleConnection(useSingleConnection);
activemq-core/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,121,        if (connectionFactory == null) {
activemq-core/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,122,            connectionFactory = getComponent().getConfiguration().createConnectionFactory();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,697,                                    listenerMutex.wait(2000);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,728,                while(transportListener == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,729,                    try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,730,                        Thread.sleep(100);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,732,                    catch(InterruptedException iEx) {}
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,79,        this.connection.syncSendPacket(this.consumerInfo);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,64,    protected MessageResourceAdapter adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,65,    protected ActiveMQEndpointActivationKey endpointActivationKey;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,66,    protected MessageEndpointFactory endpointFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,67,    protected WorkManager workManager;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,68,    protected boolean transacted;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,69,    protected ActiveMQConnection connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,70,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,73,    private ActiveMQDestination dest;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,75,    private Work connectWork;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,76,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,77,    private long reconnectDelay = INITIAL_RECONNECT_DELAY;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,79,"    public ActiveMQEndpointWorker(final MessageResourceAdapter adapter, ActiveMQEndpointActivationKey key) throws ResourceException {"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,81,        this.adapter = adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,97,                if (!isRunning()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,98,                    return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,99,                }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,100,                if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,101,                    return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,104,                MessageActivationSpec activationSpec = endpointActivationKey.getActivationSpec();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,107,                    connection.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,111,                                reconnect(error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,117,"                        consumer = connection.createDurableConnectionConsumer((Topic)dest, activationSpec.getSubscriptionName(), emptyToNull(activationSpec.getMessageSelector()), serverSessionPool,"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,118,"                                                                              activationSpec.getMaxMessagesPerSessionsIntValue(), activationSpec.getNoLocalBooleanValue());"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,120,"                        consumer = connection.createConnectionConsumer(dest, emptyToNull(activationSpec.getMessageSelector()), serverSessionPool, activationSpec.getMaxMessagesPerSessionsIntValue(),"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,125,"                    LOG.debug(""Fail to to connect: "" + error, error);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,126,                    reconnect(error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,142,    /**
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,143,     * @param s
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,144,     */
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,145,    public static void safeClose(Session s) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,146,        try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,147,            if (s != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,148,                s.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,149,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,150,        } catch (JMSException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,151,            //
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,152,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,153,    }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,154,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,184,"    public synchronized void start() throws WorkException, ResourceException {"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,185,        if (running) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,187,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,190,"        LOG.debug(""Starting"");"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,193,"        LOG.debug(""Started"");"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,199,    public synchronized void stop() throws InterruptedException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,200,        if (!running) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,202,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,212,    private synchronized void connect() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,228,    private synchronized void disconnect() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,234,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,235,    private void reconnect(JMSException error) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,236,"        LOG.debug(""Reconnect cause: "", error);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,237,        long reconnectDelay;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,238,        synchronized (this) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,239,            reconnectDelay = this.reconnectDelay;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,240,            // Only log errors if the server is really down.. And not a temp
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,241,            // failure.
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,242,            if (reconnectDelay == MAX_RECONNECT_DELAY) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,243,"                LOG.error(""Endpoint connection to JMS broker failed: "" + error.getMessage());"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,244,"                LOG.error(""Endpoint will try to reconnect to the JMS broker in "" + (MAX_RECONNECT_DELAY / 1000) + "" seconds"");"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,246,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,247,        try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,248,            disconnect();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,249,            Thread.sleep(reconnectDelay);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,250,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,251,            synchronized (this) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,252,                // Use exponential rollback.
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,253,                this.reconnectDelay *= 2;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,254,                if (this.reconnectDelay > MAX_RECONNECT_DELAY) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,255,                    this.reconnectDelay = MAX_RECONNECT_DELAY;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,256,                }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,257,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,258,            connect();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,259,        } catch (InterruptedException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,260,            //
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,261,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,262,    }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,113,        ActiveMQConnectionFactory connectionFactory = this.connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,114,        if (connectionFactory == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,115,            connectionFactory = createConnectionFactory(getInfo());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,121,            connectionFactory.setClientID(clientId);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,127,"        ActiveMQConnection physicalConnection = (ActiveMQConnection)connectionFactory.createConnection(userName, password);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,321,    public void setConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,322,        this.connectionFactory = connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/MessageResourceAdapter.java,33,interface MessageResourceAdapter extends ResourceAdapter {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,162,                if ( session.isRunning() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,164,                currentBatchSize = 0;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,173,"                log.info(""Endpoint failed to process message. Reason: "" + e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,227,"                        log.warn(""Local transaction had not been commited.  Commiting now."");"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,257,"            log.debug(""Endpoint did not release properly: "" + e, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,262,"            log.debug(""Session did not close properly: "" + e, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,63,"        final ActiveMQSession session = (ActiveMQSession)activeMQAsfEndpointWorker.connection.createSession(activeMQAsfEndpointWorker.transacted, acknowledge);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,191,        if (LOG.isDebugEnabled()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,192,"            LOG.debug(""Session returned to pool: "" + ss);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,193,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,195,        try {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,246,            activeMQAsfEndpointWorker.connection
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,278,    private int closeIdleSessions() {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,318,"                    dest.removeSubscription(context, sub);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,485,        destinationStatistics.setParent(null);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,459,        destinationStatistics.setParent(null);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,20,import java.util.ArrayList;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,22,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,35,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,66,    private final ArrayList<ManagedConnectionProxy> proxyConnections = new ArrayList<ManagedConnectionProxy>();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,67,    private final ArrayList<ConnectionEventListener> listeners = new ArrayList<ConnectionEventListener>();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,84,                    Iterator<ManagedConnectionProxy> iterator = proxyConnections.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,85,                    while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,86,                        ManagedConnectionProxy proxy = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,148,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,149,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,150,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,157,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,158,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,159,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,166,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,167,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,168,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,177,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,178,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,179,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,186,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,187,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,188,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,241,        Iterator<ManagedConnectionProxy> iterator = proxyConnections.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,242,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,243,            ManagedConnectionProxy proxy = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,402,        // Let any active proxy connections know that exception occured.
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,403,        for (Iterator<ManagedConnectionProxy> iter = proxyConnections.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,404,            ManagedConnectionProxy proxy = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,532,"        LOG.debug(""Waking up reconnect task"");"
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,533,        try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,534,            reconnectTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,535,        } catch (InterruptedException e) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,536,            Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,191,"        Scheduler.executePeriodically(cleanupTask, 1000 * 30);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,301,"            throw new IOException(""Could not locate data file "" + filePrefix + ""-"" + item.getDataFileId());"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,311,"            throw new IOException(""Could not locate data file "" + filePrefix + ""-"" + item.getDataFileId());"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,414,            forceRemoveDataFile(dataFile);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,466,"            LOG.debug(""moced data file "" + dataFile + "" to """
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,470,"            LOG.debug(""discarding data file "" + dataFile"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,167,"            this.peristenceAdapter.addInProgressDataFile(this, location.getDataFileId());"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,93,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,99,    private long cleanupInterval = 1000 * 30;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,428,            Set<Integer> inUse = new HashSet<Integer>(referenceStoreAdapter.getReferenceFileIdsInUse());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,429,"            asyncDataManager.consolidateDataFilesNotIn(inUse, inProgress);"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,233,        Location rc = null;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,238,                if (rc == null || rc.compareTo(location) < 0) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,239,                    rc = location;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,247,                if (rc == null || rc.compareTo(location) < 0) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,248,                    rc = location;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTransactionStore.java,251,            return rc;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,237,    public Set<Integer> getReferenceFileIdsInUse() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,238,        return recordReferences.keySet();
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,1,/**
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,2, * Licensed to the Apache Software Foundation (ASF) under one or more
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,3, * contributor license agreements.  See the NOTICE file distributed with
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,4, * this work for additional information regarding copyright ownership.
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,5," * The ASF licenses this file to You under the Apache License, Version 2.0"
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,6," * (the ""License""); you may not use this file except in compliance with"
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,7, * the License.  You may obtain a copy of the License at
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,8, *
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,9, *      http://www.apache.org/licenses/LICENSE-2.0
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,10, *
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,11," * Unless required by applicable law or agreed to in writing, software"
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,12," * distributed under the License is distributed on an ""AS IS"" BASIS,"
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,13," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,14, * See the License for the specific language governing permissions and
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,15, * limitations under the License.
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,16, */
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,17,package org.apache.activemq.bugs;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,18,
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,19,import javax.jms.Connection;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,20,import javax.jms.MessageProducer;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,21,import javax.jms.ObjectMessage;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,22,import javax.jms.Session;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,23,
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,24,public class MessageSender {
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,25,    private MessageProducer producer;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,26,    private Session session;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,27,
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,28,"    public MessageSender(String queueName, Connection connection, boolean useTransactedSession) throws Exception {"
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,29,"        session = useTransactedSession ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,30,        producer = session.createProducer(session.createQueue(queueName));
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,31,    }
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,32,
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,33,    public void send(String payload) throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,34,        ObjectMessage message = session.createObjectMessage();
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,35,        message.setObject(payload);
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,36,        producer.send(message);
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,37,        if (session.getTransacted()) {
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,38,            session.commit();
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,39,        }
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,40,    }
activemq-core/src/test/java/org/apache/activemq/bugs/MessageSender.java,41,}
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,1,/**
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,2, * Licensed to the Apache Software Foundation (ASF) under one or more
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,3, * contributor license agreements.  See the NOTICE file distributed with
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,4, * this work for additional information regarding copyright ownership.
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,5," * The ASF licenses this file to You under the Apache License, Version 2.0"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,6," * (the ""License""); you may not use this file except in compliance with"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,7, * the License.  You may obtain a copy of the License at
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,8, *
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,9, *      http://www.apache.org/licenses/LICENSE-2.0
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,10, *
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,11," * Unless required by applicable law or agreed to in writing, software"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,12," * distributed under the License is distributed on an ""AS IS"" BASIS,"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,13," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,14, * See the License for the specific language governing permissions and
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,15, * limitations under the License.
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,16, */
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,17,package org.apache.activemq.bugs;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,18,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,19,import javax.jms.Connection;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,20,import javax.jms.JMSException;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,21,import javax.jms.Message;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,22,import javax.jms.MessageConsumer;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,23,import javax.jms.MessageListener;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,24,import javax.jms.ObjectMessage;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,25,import javax.jms.Session;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,26,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,27,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,28,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,29,import org.apache.activemq.broker.BrokerService;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,30,import org.apache.commons.logging.Log;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,31,import org.apache.commons.logging.LogFactory;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,32,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,33,/*
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,34, * simulate message flow which cause the following exception in the broker
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,35," * (exception logged by client) <p/> 2007-07-24 13:51:23,624"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,36, * com.easynet.halo.Halo ERROR (LoggingErrorHandler.java: 23) JMS failure
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,37, * javax.jms.JMSException: Transaction 'TX:ID:dmt-53625-1185281414694-1:0:344'
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,38, * has not been started. at
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,39, * org.apache.activemq.broker.TransactionBroker.getTransaction(TransactionBroker.java:230)
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,40, * This appears to be consistent in a MacBook. Haven't been able to replicate it
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,41, * on Windows though
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,42, */
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,43,public class TransactionNotStartedErrorTest extends TestCase {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,44,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,45,    private static final Log LOG = LogFactory.getLog(TransactionNotStartedErrorTest.class);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,46,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,47,    private static int counter = 500;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,48,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,49,    private static int hectorToHaloCtr;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,50,    private static int xenaToHaloCtr;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,51,    private static int troyToHaloCtr;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,52,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,53,    private static int haloToHectorCtr;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,54,    private static int haloToXenaCtr;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,55,    private static int haloToTroyCtr;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,56,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,57,"    private String hectorToHalo = ""hectorToHalo"";"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,58,"    private String xenaToHalo = ""xenaToHalo"";"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,59,"    private String troyToHalo = ""troyToHalo"";"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,60,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,61,"    private String haloToHector = ""haloToHector"";"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,62,"    private String haloToXena = ""haloToXena"";"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,63,"    private String haloToTroy = ""haloToTroy"";"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,64,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,65,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,66,    private BrokerService broker;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,67,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,68,    private Connection hectorConnection;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,69,    private Connection xenaConnection;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,70,    private Connection troyConnection;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,71,    private Connection haloConnection;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,72,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,73,    private final Object lock = new Object();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,74,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,75,    public Connection createConnection() throws JMSException {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,76,"        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(""tcp://localhost:61616"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,77,        return factory.createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,78,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,79,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,80,"    public Session createSession(Connection connection, boolean transacted) throws JMSException {"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,81,"        return connection.createSession(transacted, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,82,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,83,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,84,    public void startBroker() throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,85,        broker = new BrokerService();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,86,        broker.setDeleteAllMessagesOnStartup(true);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,87,        broker.setPersistent(true);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,88,        broker.setUseJmx(true);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,89,"        broker.addConnector(""tcp://localhost:61616"").setName(""Default"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,90,        broker.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,91,"        LOG.info(""Starting broker.."");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,92,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,93,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,94,    public void tearDown() throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,95,        hectorConnection.close();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,96,        xenaConnection.close();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,97,        troyConnection.close();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,98,        haloConnection.close();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,99,        broker.stop();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,100,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,101,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,102,    public void testTransactionNotStartedError() throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,103,        startBroker();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,104,        hectorConnection = createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,105,"        Thread hectorThread = buildProducer(hectorConnection, hectorToHalo);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,106,        Receiver hHectorReceiver = new Receiver() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,107,            public void receive(String s) throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,108,                haloToHectorCtr++;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,109,                if (haloToHectorCtr >= counter) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,110,                    synchronized (lock) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,111,                        lock.notifyAll();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,112,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,113,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,114,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,115,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,116,"        buildReceiver(hectorConnection, haloToHector, false, hHectorReceiver);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,117,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,118,        troyConnection = createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,119,"        Thread troyThread = buildProducer(troyConnection, troyToHalo);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,120,        Receiver hTroyReceiver = new Receiver() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,121,            public void receive(String s) throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,122,                haloToTroyCtr++;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,123,                if (haloToTroyCtr >= counter) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,124,                    synchronized (lock) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,125,                        lock.notifyAll();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,126,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,127,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,128,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,129,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,130,"        buildReceiver(hectorConnection, haloToTroy, false, hTroyReceiver);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,131,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,132,        xenaConnection = createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,133,"        Thread xenaThread = buildProducer(xenaConnection, xenaToHalo);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,134,        Receiver hXenaReceiver = new Receiver() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,135,            public void receive(String s) throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,136,                haloToXenaCtr++;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,137,                if (haloToXenaCtr >= counter) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,138,                    synchronized (lock) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,139,                        lock.notifyAll();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,140,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,141,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,142,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,143,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,144,"        buildReceiver(xenaConnection, haloToXena, false, hXenaReceiver);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,145,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,146,        haloConnection = createConnection();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,147,"        final MessageSender hectorSender = buildTransactionalProducer(haloToHector, haloConnection);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,148,"        final MessageSender troySender = buildTransactionalProducer(haloToTroy, haloConnection);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,149,"        final MessageSender xenaSender = buildTransactionalProducer(haloToXena, haloConnection);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,150,        Receiver hectorReceiver = new Receiver() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,151,            public void receive(String s) throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,152,                hectorToHaloCtr++;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,153,"                troySender.send(""halo to troy because of hector"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,154,                if (hectorToHaloCtr >= counter) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,155,                    synchronized (lock) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,156,                        lock.notifyAll();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,157,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,158,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,159,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,160,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,161,        Receiver xenaReceiver = new Receiver() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,162,            public void receive(String s) throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,163,                xenaToHaloCtr++;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,164,"                hectorSender.send(""halo to hector because of xena"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,165,                if (xenaToHaloCtr >= counter) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,166,                    synchronized (lock) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,167,                        lock.notifyAll();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,168,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,169,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,170,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,171,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,172,        Receiver troyReceiver = new Receiver() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,173,            public void receive(String s) throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,174,                troyToHaloCtr++;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,175,"                xenaSender.send(""halo to xena because of troy"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,176,                if (troyToHaloCtr >= counter) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,177,                    synchronized (lock) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,178,                        lock.notifyAll();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,179,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,180,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,181,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,182,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,183,"        buildReceiver(haloConnection, hectorToHalo, true, hectorReceiver);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,184,"        buildReceiver(haloConnection, xenaToHalo, true, xenaReceiver);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,185,"        buildReceiver(haloConnection, troyToHalo, true, troyReceiver);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,186,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,187,        haloConnection.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,188,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,189,        troyConnection.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,190,        troyThread.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,191,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,192,        xenaConnection.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,193,        xenaThread.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,194,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,195,        hectorConnection.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,196,        hectorThread.start();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,197,        waitForMessagesToBeDelivered();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,198,        // number of messages received should match messages sent
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,199,"        assertEquals(hectorToHaloCtr, counter);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,200,"        LOG.info(""hectorToHalo received "" + hectorToHaloCtr + "" messages"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,201,"        assertEquals(xenaToHaloCtr, counter);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,202,"        LOG.info(""xenaToHalo received "" + xenaToHaloCtr + "" messages"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,203,"        assertEquals(troyToHaloCtr, counter);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,204,"        LOG.info(""troyToHalo received "" + troyToHaloCtr + "" messages"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,205,"        assertEquals(haloToHectorCtr, counter);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,206,"        LOG.info(""haloToHector received "" + haloToHectorCtr + "" messages"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,207,"        assertEquals(haloToXenaCtr, counter);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,208,"        LOG.info(""haloToXena received "" + haloToXenaCtr + "" messages"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,209,"        assertEquals(haloToTroyCtr, counter);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,210,"        LOG.info(""haloToTroy received "" + haloToTroyCtr + "" messages"");"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,211,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,212,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,213,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,214,    protected void waitForMessagesToBeDelivered() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,215,        // let's give the listeners enough time to read all messages
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,216,        long maxWaitTime = counter * 3000;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,217,        long waitTime = maxWaitTime;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,218,        long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,219,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,220,        synchronized (lock) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,221,            boolean hasMessages = true;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,222,            while (hasMessages && waitTime >= 0) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,223,                try {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,224,                    lock.wait(200);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,225,                } catch (InterruptedException e) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,226,                    LOG.error(e);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,227,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,228,                // check if all messages have been received
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,229,                hasMessages = hectorToHaloCtr < counter || xenaToHaloCtr < counter || troyToHaloCtr < counter || haloToHectorCtr < counter || haloToXenaCtr < counter
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,230,                              || haloToTroyCtr < counter;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,231,                waitTime = maxWaitTime - (System.currentTimeMillis() - start);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,232,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,233,        }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,234,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,235,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,236,"    public MessageSender buildTransactionalProducer(String queueName, Connection connection) throws Exception {"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,237,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,238,"        return new MessageSender(queueName, connection, true);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,239,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,240,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,241,"    public Thread buildProducer(Connection connection, final String queueName) throws Exception {"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,242,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,243,"        final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,244,"        final MessageSender producer = new MessageSender(queueName, connection, false);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,245,        Thread thread = new Thread() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,246,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,247,            public synchronized void run() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,248,                for (int i = 0; i < counter; i++) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,249,                    try {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,250,                        producer.send(queueName);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,251,                        if (session.getTransacted()) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,252,                            session.commit();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,253,                        }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,254,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,255,                    } catch (Exception e) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,256,"                        throw new RuntimeException(""on "" + queueName + "" send"", e);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,257,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,258,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,259,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,260,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,261,        return thread;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,262,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,263,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,264,"    public void buildReceiver(Connection connection, final String queueName, boolean transacted, final Receiver receiver) throws Exception {"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,265,"        final Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,266,        MessageConsumer inputMessageConsumer = session.createConsumer(session.createQueue(queueName));
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,267,        MessageListener messageListener = new MessageListener() {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,268,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,269,            public void onMessage(Message message) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,270,                try {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,271,                    ObjectMessage objectMessage = (ObjectMessage)message;
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,272,                    String s = (String)objectMessage.getObject();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,273,                    receiver.receive(s);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,274,                    if (session.getTransacted()) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,275,                        session.commit();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,276,                    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,277,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,278,                } catch (Exception e) {
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,279,                    e.printStackTrace();
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,280,                }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,281,            }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,282,        };
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,283,        inputMessageConsumer.setMessageListener(messageListener);
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,284,    }
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,285,
activemq-core/src/test/java/org/apache/activemq/bugs/TransactionNotStartedErrorTest.java,286,}
activemq-core/src/test/java/org/apache/activemq/perf/AMQStoreDurableTopicTest.java,43,        this.consumerSleepDuration=0;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java,31,        numberOfConsumers = 1;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java,45,        result.setInitialDelay(20000);
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNetworkTest.java,68,                consumers[i].setSleepDuration(consumerSleepDuration);
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,21,
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,26,
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,28,import org.apache.activemq.broker.region.policy.NoSubscriptionRecoveryPolicy;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,31,import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,32,import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,40,        numberOfConsumers = 10;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,41,        numberofProducers = 10;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,42,        //this.consumerSleepDuration=100;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleNonPersistentQueueTest.java,48,        //pp.setTimeToLive(100);
activemq-core/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java,58,    protected long consumerSleepDuration=0;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java,59,
activemq-core/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java,60,    /**
activemq-core/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java,87,                consumers[consumerCount].setSleepDuration(consumerSleepDuration);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,98,    private long checkpointInterval = 1000 * 60;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,378,            Location newMark = null;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,383,                if (mark != null && (newMark == null || newMark.compareTo(mark) < 0)) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,391,                if (mark != null && (newMark == null || newMark.compareTo(mark) < 0)) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,396,                if (newMark != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,145,                    TopicSubAck tsa = ackContainer.get(ref.getAckEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,148,                            StoreEntry entry = ref.getAckEntry();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,25,import java.util.concurrent.locks.Lock;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,26,
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,39,import org.apache.activemq.util.SubscriptionKey;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,149,                            entry = ackContainer.refresh(entry);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1232,"                            LOG.error(""Caught an exception trying to create a JMSException"",e);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,264,    protected ConsumerId getConsumerId() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,271,    protected String getConsumerName() {
activemq-core/src/main/java/org/apache/activemq/advisory/ConsumerEventSource.java,55,    private MessageConsumer consumer;
activemq-core/src/main/java/org/apache/activemq/advisory/ConsumerEventSource.java,70,            consumer = session.createConsumer(advisoryTopic);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DurableSubscriptionView.java,47,        this.subscriptionName = sub.getConsumerInfo().getSubscriptionName();
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionTestSupport.java,114,    public void xtestUnsubscribeSubscription() throws Exception {
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionTestSupport.java,147,    public void xtestInactiveDurableSubscriptionTwoConnections() throws Exception {
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionTestSupport.java,178,    public void xtestInactiveDurableSubscriptionBrokerRestart() throws Exception {
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionTestSupport.java,269,    public void xtestSelectorChange() throws Exception {
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionTestSupport.java,304,    public void xtestDurableSubWorksInNewSession() throws JMSException {
activemq-core/src/test/java/org/apache/activemq/usecases/DurableSubscriptionTestSupport.java,331,    public void xtestDurableSubWorksInNewConnection() throws Exception {
activemq-core/src/test/java/org/apache/activemq/bugs/MissingDataFileTest.java,97,        systemUsage.getMemoryUsage().setLimit(1024 * 10); // Just a few messags
activemq-core/src/test/java/org/apache/activemq/bugs/MissingDataFileTest.java,102,        factory.setCleanupInterval(5000); // every few second
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,133,    public void stop() throws Exception {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,138,                connection.close();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,527,            for (Iterator<ActiveMQSession> i = sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,528,                ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,529,                s.stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,580,            stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,629,
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,630,                    if (asyncConnectionThread != null){
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,631,                     asyncConnectionThread.shutdown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,632,                    }
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,633,
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1316,    protected synchronized void ensureConnectionInfoSent() throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1317,        // Can we skip sending the ConnectionInfo packet??
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1318,        if (isConnectionInfoSentToBroker || closed.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1319,            return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1320,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1321,
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1322,        if (info.getClientId() == null || info.getClientId().trim().length() == 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1323,            info.setClientId(clientIdGenerator.generateId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1324,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1325,        syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1326,
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1327,        this.isConnectionInfoSentToBroker = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1328,        // Add a temp destination advisory consumer so that
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1329,        // We know what the valid temporary destinations are on the
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1330,        // broker without having to do an RPC to the broker.
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1331,
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1332,"        ConsumerId consumerId = new ConsumerId(new SessionId(info.getConnectionId(), -1), consumerIdGenerator.getNextSequenceId());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1333,        if (watchTopicAdvisories) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1334,"            advisoryConsumer = new AdvisoryConsumer(this, consumerId);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/IndexManager.java,67,        return reader.readItem(offset);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,278,            size++;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,280,        if (size >= threshold) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,297,        HashEntry result = getBin(key).remove(entry);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,298,        if (result != null) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,299,            size--;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,300,            return indexManager.getIndex(result.getIndexOffset());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,302,        return null;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,526,        if (bins.length == getMaximumCapacity()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,527,            threshold = Integer.MAX_VALUE;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,528,            return;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,529,        }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,530,"        String backFileName = name + ""-REISZE"";"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,531,"        HashIndex backIndex = new HashIndex(directory,backFileName,indexManager);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,532,        backIndex.setKeyMarshaller(keyMarshaller);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,533,        backIndex.setKeySize(getKeySize());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,534,        backIndex.setNumberOfBins(newCapacity);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,535,        backIndex.setPageSize(getPageSize());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,536,        backIndex.load();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,537,        File backFile = backIndex.file;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,538,        long offset = 0;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,539,        while ((offset + pageSize) <= indexFile.length()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,540,            indexFile.seek(offset);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,541,            HashPage page = getFullPage(offset);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,542,            if (page.isActive()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,543,                for (HashEntry entry : page.getEntries()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,544,                    backIndex.getBin(entry.getKey()).put(entry);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,545,                    backIndex.size++;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,548,            page=null;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,549,            offset += pageSize;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,551,        backIndex.unload();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,552,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,553,        unload();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,554,        IOHelper.deleteFile(file);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,555,"        IOHelper.copyFile(backFile, file);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,556,        IOHelper.deleteFile(backFile);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,557,        setNumberOfBins(newCapacity);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,558,        bins = new HashBin[newCapacity];
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,559,        threshold = calculateThreashold();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,560,        openIndexFile();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,561,        doLoad();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,124,    private int maxReferenceFileLength=AsyncDataManager.DEFAULT_MAX_FILE_LENGTH;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,36,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,314,"            lockUpdateStatement = ""UPDATE "" + getFullLockTableName() + "" SET time = ? WHERE ID = 1"";"
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,283,     * Notifiy the Broker that a dispatch has happened
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,284,     *
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,287,    public void postProcessDispatch(MessageDispatch messageDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,297,        super.postProcessDispatch(messageDispatch);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,200,                            node.getRegionDestination().getDestinationStatistics().getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1076,        if (optimizedDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,944,"            LOG.debug(""Stopped connection: "" + transport.getRemoteAddress());"
activemq-core/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java,134,
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,80,
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,81,        if (++inflightMessageCount >= failureCount) {
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,82,            inflightMessageCount = 0;
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,83,            Thread.sleep(1000);
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,84,            broker.stop();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,21,import java.util.Collections;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,35,
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1155,"                duplexBridge.duplexStart(brokerInfo, info);"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,130,"    public void duplexStart(BrokerInfo localBrokerInfo, BrokerInfo remoteBrokerInfo) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,384,                    ServiceSupport.dispose(DemandForwardingBridgeSupport.this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,536,                    ServiceSupport.dispose(DemandForwardingBridgeSupport.this);
activemq-core/src/test/java/org/apache/activemq/broker/RecoveryBrokerTest.java,238,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,434,                                if (!addConsumerInfo((ConsumerInfo)command)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,435,                                    if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,436,"                                        LOG.debug(""Ignoring ConsumerInfo: "" + command);"
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,37,    protected final int numRestarts = 2;
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,51,"        NetworkConnector networkConnector = broker.addNetworkConnector(""static://tcp://localhost:61617"");"
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,90,"            assertEquals(1, countMbeans(networkedBroker, ""NetworkBridge"", 5000));"
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,310,         * receiving acks for messages not received yey
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,312,        sendToSlave(message);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,88,    protected int preferedFileLength = DEFAULT_MAX_FILE_LENGTH - 1024 * 512;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,471,"            LOG.debug(""moved data file "" + dataFile + "" to """
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,234,"                        removeMessage(ack,location);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1167,                                    || target.getInFlightUsage() > s.getInFlightUsage()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,84,     * @param numberOfBins
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,429,        if (index >= numberOfBins) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,430,            HashBin[] newBins = new HashBin[index+1];
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,431,"            System.arraycopy(this.bins, 0, newBins, 0, this.bins.length);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,432,            this.bins=newBins;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,548,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,40,    public static final int DEFAULT_PAGE_SIZE=100;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,381,            if (destination.isLazyDispatch()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,383,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1137,        if (list != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1138,            List<Subscription> consumers;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1139,            dispatchLock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1140,            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1141,                synchronized (this.consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1142,                    consumers = new ArrayList<Subscription>(this.consumers);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1145,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1146,                for (MessageReference node : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1147,                    Subscription target = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1148,                    List<Subscription> targets = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1149,                    for (Subscription s : consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1150,"                        if (dispatchSelector.canSelect(s, node)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1151,                            if (!s.isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1152,                                s.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1153,                                target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1154,                                break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1155,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1156,                                if (targets == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1157,                                    targets = new ArrayList<Subscription>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1158,                                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1159,                                targets.add(s);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1160,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1161,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1162,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1163,                    if (target == null && targets != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1164,                        // pick the least loaded to add the message too
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1165,                        for (Subscription s : targets) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1166,                            if (target == null
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1167,                                    || target.getPendingQueueSize() > s.getPendingQueueSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1168,                                target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1169,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1170,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1171,                        if (target != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1172,                            target.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1173,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1174,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1175,                    if (target != null && !strictOrderDispatch && consumers.size() > 1 &&
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1176,                            !dispatchSelector.isExclusiveConsumer(target)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1177,                        synchronized (this.consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1178,                            if( removeFromConsumerList(target) ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1179,                                addToConsumerList(target);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1180,                                consumers = new ArrayList<Subscription>(this.consumers);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1181,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1182,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1185,            } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1186,                dispatchLock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,711,                systemUsage.getTempUsage().setLimit(1024 * 1024 * 1024 * 100); // 10 Gb
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,712,                systemUsage.getStoreUsage().setLimit(1024 * 1024 * 1024 * 100); // 100 GB
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,137,            transactionStore = new MemoryTransactionStore();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,92,            transactionStore = new MemoryTransactionStore();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,47,
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,52,    public static class Tx {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,89,            // Do all the message adds.
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,90,            for (Iterator<AddMessageCommand> iter = messages.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,91,                AddMessageCommand cmd = iter.next();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,92,                cmd.run();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,93,            }
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,94,            // And removes..
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,95,            for (Iterator<RemoveMessageCommand> iter = acks.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,96,                RemoveMessageCommand cmd = iter.next();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,97,                cmd.run();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,101,
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,105,        void run() throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,111,        void run() throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,224,                public void run() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,225,"                    destination.addMessage(null, message);"
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,232,
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,249,                public void run() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,250,"                    destination.removeMessage(null, ack);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,244,"//                System.out.println(new Date()+"": Locked pagedInMessages: ""+sub.getConsumerInfo().getConsumerId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,245,//                // Add all the matching messages in the queue to the
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,246,//                // subscription.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,247,//
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,248,//                for (QueueMessageReference node:pagedInMessages.values()){
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,249,//                    if (!node.isDropped() && !node.isAcked() && (!node.isDropped() ||sub.getConsumerInfo().isBrowser())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,250,//                        msgContext.setMessageReference(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,251,"//                        if (sub.matches(node, msgContext)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,252,//                            sub.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,253,//                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,254,//                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,255,//                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,256,//
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,257,//            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,258,            wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,315,            wakeup();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,261,            if (lockKeepAlivePeriod > 0) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,262,                getScheduledThreadPoolExecutor().scheduleAtFixedRate(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,263,                    public void run() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,264,                        databaseLockKeepAlive();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,265,                    }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,266,"                }, lockKeepAlivePeriod, lockKeepAlivePeriod, TimeUnit.MILLISECONDS);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,267,            }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,190,                s.close();
activemq-core/src/test/java/org/apache/activemq/JmsSendReceiveTestSupport.java,88,
activemq-core/src/test/java/org/apache/activemq/JmsSendReceiveTestSupport.java,100,"            producer.send(producerDestination, message);"
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,85,        if (++inflightMessageCount >= failureCount) {
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,86,            inflightMessageCount = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,576,
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,201,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,37,     * The default number of messages to page in to the destination
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,40,    public static final int DEFAULT_PAGE_SIZE=200;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,51,    private int maxPageSize=DEFAULT_PAGE_SIZE;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,231,//            msgContext.setDestination(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,243,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,249,        wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,306,        // Outside of dispatchLock() to maintain the lock hierarchy of
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,307,        // iteratingMutex -> dispatchLock. - see https://issues.apache.org/activemq/browse/AMQ-1878
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,308,        wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1145,"//                System.out.println(getName()+"": dispatching from pending: ""+pagedInPendingDispatch.size());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1240,             PrefetchSubscription ps = (PrefetchSubscription) s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1241,             zeroPrefetch |= ps.getPrefetchSize() == 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1242,             int countBeforeFull = ps.countBeforeFull();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,223,                        } catch (InterruptedException e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,224,                            Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,226,                            // TODO: Need to handle this better.
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,227,                            e.printStackTrace();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,573,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,61,    private int maxPageSize=100;
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,57,    protected static final int MESSAGE_COUNT = 2*BaseDestination.DEFAULT_PAGE_SIZE;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,448,"            BrokerRegistry.getInstance().bind(getBrokerName(), this);"
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,468,
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,105,            // cause multiple
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,106,            // brokers to be started.
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,108,                broker = BrokerRegistry.getInstance().lookup(host);
activemq-core/src/test/java/org/apache/activemq/proxy/ProxyConnectorTest.java,82,            Thread.sleep(1000);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1169,                pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1176,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1193,                    if (!s.isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1194,                        // Dispatch it.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1195,                        s.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1196,"//                        System.out.println(getName()+"" Dispatched to ""+s.getConsumerInfo().getConsumerId()+"", ""+node.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1197,                        target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1198,                        break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1199,                    }
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,43,public abstract class CursorSupport extends TestCase {
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,45,    protected static final int MESSAGE_COUNT = 500;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,46,    protected static final int PREFETCH_SIZE = 50;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,58,    public void XtestSendFirstThenConsume() throws Exception {
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,88,    public void testSendWhilstConaume() throws Exception {
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,153,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1866.java,24,import javax.jms.Destination;
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1866.java,92,    // Failing
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1866.java,98,    // Failing
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1866.java,104,    // Passing
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1866.java,147,            if( i > 3 ) {
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1866.java,148,"                assertTrue(""Consumer 2 should be receiving new messages every second."", c2Counter > 0);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1866.java,207,                        Thread.sleep(sleepingTime);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,217,//            MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,232,            // synchronize with dispatch method so that no new messages are sent
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,233,            // while
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,234,"            // setting up a subscription. avoid out of order messages,"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,235,            // duplicates
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,236,            // etc.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,238,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,245,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,250,                    wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,256,        // Outside of dispatchLock() to maintain the lock hierarchy of
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,257,        // iteratingMutex -> dispatchLock. - see https://issues.apache.org/activemq/browse/AMQ-1878
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,267,            // synchronize with dispatch method so that no new messages are sent
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,268,            // while
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,269,            // removing up a subscription.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,327,"//        System.out.println(getName()+"" send ""+message.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,937,"                             if (rd.subscription.matches(node, msgContext)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,938,                                 rd.subscription.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,952,         boolean result = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,954,             result = !messages.isEmpty();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,961,             result |= !pagedInPendingDispatch.isEmpty();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,967,"                // !messages.isEmpty(), and then if !pagedInPendingDispatch.isEmpty()"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,968,                // then we do a dispatch.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,969,         if (result) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1119,             // Only page in the minimum number of messages which can be dispatched immediately.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1120,"             toPageIn = Math.min(getConsumerMessageCountBeforeFull(), toPageIn);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1161," //              System.out.println(getName()+"": dispatching from pending: ""+pagedInPendingDispatch.size());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1164,"//                System.out.println(getName()+"": new pending list1: ""+pagedInPendingDispatch.size());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1169,"//                System.out.println(getName()+"": dispatching from paged in: ""+list.size());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1175,"//                System.out.println(getName()+"": new pending list2: ""+pagedInPendingDispatch.size());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1203,"                            //System.err.println(getName()+"" Dispatched to ""+s.getConsumerInfo().getConsumerId()+"", ""+node.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,372,"            options.put(""soTimeout"", Integer.valueOf(soTimeout));"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,373,"            options.put(""connectionTimeout"", Integer.valueOf(socketBufferSize));"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,468,        DataFile removed = fileMap.remove(dataFile.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,473,"            LOG.info(""moved data file "" + dataFile + "" to """
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,477,"            LOG.info(""discarding data file "" + dataFile"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,478,"                    + (result ? ""successful "" : ""failed""));"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,29,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,125,"    private Map<AMQMessageStore,Set<Integer>> dataFilesInProgress = new ConcurrentHashMap<AMQMessageStore,Set<Integer>> ();"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,274,"        Scheduler.executePeriodically(periodicCheckpointTask, checkpointInterval);"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,281,"        Scheduler.executePeriodically(periodicCleanupTask, cleanupInterval);"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,429,            for (Set<Integer> set: dataFilesInProgress.values()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,430,                inProgress.addAll(set);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,970,     Set<Integer>set = dataFilesInProgress.get(store);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,971,     if (set == null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,972,         set = new CopyOnWriteArraySet<Integer>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,973,"         dataFilesInProgress.put(store, set);"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,975,     set.add(dataFileId);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,979,        Set<Integer>set = dataFilesInProgress.get(store);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,980,        if (set != null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,981,            set.remove(dataFileId);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,471,        fileMap.remove(dataFile.getFile());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,20,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,21,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,31,import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,35,import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,567,        dispatchValve.increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,578,            MessageEvaluationContext msgContext = context.getMessageEvaluationContext();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,583,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,584,            msgContext.clear();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,58,                Enumeration iter = getBrowser().getEnumeration();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,199,                            node.getRegionDestination().getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,429,
activemq-core/src/test/java/org/apache/activemq/advisory/TempDestDeleteTest.java,106,"        session = connection.createSession(false, 0);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,199,                            if (this.getConsumerInfo().isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,610,                synchronized(deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,611,                    if (!deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,612,                        MessageDispatch md = deliveredMessages.getFirst();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,613,"                        ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,614,                        deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,615,                        ackCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,616,                    }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,617,                }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,759,"                                    MessageAck ack = new MessageAck(md,MessageAck.STANDARD_ACK_TYPE,deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,760,                                    session.sendAck(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,761,                                    ackCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,762,                                    deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,767,"                            MessageAck ack = new MessageAck(md,MessageAck.STANDARD_ACK_TYPE,deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,768,                            session.sendAck(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,769,                            deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,837,            if (deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,838,                return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,839,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,840,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,841,            // Acknowledge the last message.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,842,            MessageDispatch lastMd = deliveredMessages.get(0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,843,"            MessageAck ack = new MessageAck(lastMd, MessageAck.STANDARD_ACK_TYPE, deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,184,                // the
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,185,                // acknowledgment.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,266,                    if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,267,                        LOG
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,268,"                                .debug(""Could not correlate acknowledgment with dispatched message: """
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,269,                                        + ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,270,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,432,        return dispatched.size() - prefetchExtension >= info.getPrefetchSize();
activemq-core/src/test/java/org/apache/activemq/perf/AMQStoreDurableTopicTest.java,32,        AMQPersistenceAdapter adaptor = new AMQPersistenceAdapter();
activemq-core/src/test/java/org/apache/activemq/perf/AMQStoreDurableTopicTest.java,33,        adaptor.setArchiveDataLogs(true);
activemq-core/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java,34,        numberOfConsumers = 4;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java,35,        numberofProducers = 1;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java,58,        result.setInitialDelay(2000);
activemq-core/src/test/java/org/apache/activemq/perf/SimpleQueueTest.java,34,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,471,        return isSlave() || dispatched.size() - prefetchExtension >= info.getPrefetchSize();
activemq-core/src/test/java/org/apache/activemq/advisory/MasterSlaveTempQueueMemoryTest.java,65,"        assertEquals(6, rb.getDestinationMap().size());"
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,40,    private static final int COUNT = 1000;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java,46,"public class PooledConnectionFactoryBean implements FactoryBean, InitializingBean {"
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java,50,    private ConnectionFactory pooledConnectionFactory;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,58,"        addStatistic(""prodcuers"", producers);"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,105,        super.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,106,        enqueues.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,107,        dequeues.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,108,        dispatched.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,109,        inflight.reset();
activemq-core/src/main/java/org/apache/activemq/management/CountStatisticImpl.java,47,        super.reset();
activemq-core/src/main/java/org/apache/activemq/management/CountStatisticImpl.java,48,        counter.set(0);
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,35,        super.reset();
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,36,        current = 0;
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,37,        lowWaterMark = 0;
activemq-core/src/main/java/org/apache/activemq/management/RangeStatisticImpl.java,38,        highWaterMark = 0;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,40,        startTime = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,41,        lastSampleTime = startTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,45,        startTime = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,46,        lastSampleTime = startTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,50,        lastSampleTime = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,63,        return name;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,67,        return unit;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,71,        return description;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,75,        return startTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,79,        return lastSampleTime;
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,98,        buffer.append(unit);
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,101,        buffer.append(startTime);
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,104,        buffer.append(lastSampleTime);
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,106,        buffer.append(description);
activemq-core/src/main/java/org/apache/activemq/management/StatisticImpl.java,108,
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,46,        super.reset();
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,47,        count = 0;
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,48,        maxTime = 0;
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,49,        minTime = 0;
activemq-core/src/main/java/org/apache/activemq/management/TimeStatisticImpl.java,50,        totalTime = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,87,    private List<QueueMessageReference> pagedInPendingDispatch = new ArrayList<QueueMessageReference>(100);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1220,                    if (pagedInPendingDispatch.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1221,                        pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1222,                    } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1223,                        for (QueueMessageReference qmr : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1224,                            if (!pagedInPendingDispatch.contains(qmr)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1225,                                pagedInPendingDispatch.add(qmr);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1226,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1227,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1228,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1240,    private List<QueueMessageReference> doActualDispatch(List<QueueMessageReference> list) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1241,        List<QueueMessageReference> rc = new ArrayList<QueueMessageReference>(list.size());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1249,        for (MessageReference node : list) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,42,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,43,    private final Object sendToActiveMQMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,44,    private final Object sendToStompMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,45,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,79,        synchronized (sendToActiveMQMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,80,            transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,88,        synchronized (sendToStompMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,89,            next.oneway(command);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,21,import java.util.Collection;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,27,import java.util.LinkedHashSet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,89,    private LinkedHashSet<QueueMessageReference> pagedInPendingDispatch = new LinkedHashSet<QueueMessageReference>(100);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,971,                                     pagedInPendingDispatch.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1222,                    pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1234,    private LinkedHashSet<QueueMessageReference> doActualDispatch(Collection<QueueMessageReference> collection) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1235,        LinkedHashSet<QueueMessageReference> rc = new LinkedHashSet<QueueMessageReference>(collection.size());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1243,        for (MessageReference node : collection) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,267,        if (databaseLocker == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,193,"   System.out.println(""is null"");"
activemq-core/src/main/java/org/apache/activemq/broker/region/IndirectMessageReference.java,91,            if (dropped || (lockOwner != null && lockOwner != subscription)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,160,                        pending.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,161,"                        createMessageDispatch(node, node.getMessage());"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,535,            for (MessageReference r : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,536,                if( r.getRegionDestination() == destination ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,537,                    rc.add((QueueMessageReference)r);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,538,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,562,                            pending.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,563,                            if( !isDropped(node) && canDispatch(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,564,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,565,                                // Message may have been sitting in the pending
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,566,                                // list a while waiting for the consumer to ak the message.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,567,                                if (node!=QueueMessageReference.NULL_MESSAGE && node.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,568,                                    //increment number to dispatch
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,569,                                    numberToDispatch++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,570,"                                    node.getRegionDestination().messageExpired(context, this, node);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,571,                                    continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,573,                                dispatch(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,574,                                count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,599,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,600,        // Make sure we can dispatch a message.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,601,        if (canDispatch(node) && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,602,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1066,"        acknowledge(context, sub, ack, reference);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1067,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1072,            context.getTransaction().addSynchronization(new Synchronization() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1074,                public void afterCommit() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1075,                    dropMessage(reference);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1076,                    wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1077,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1079,                public void afterRollback() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1080,                    reference.setAcked(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1081,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1082,            });
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1158,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1159,            int toPageIn = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1160,            if (force) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1161,                toPageIn = getMaxPageSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1162,            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1163,                toPageIn = (getMaxPageSize() + (int) destinationStatistics
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1164,                        .getInflight().getCount())
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1165,                        - pagedInMessages.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1166,"                toPageIn = Math.min(toPageIn, getMaxPageSize());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1167,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1197,                    for(QueueMessageReference ref:result) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1198,"                        pagedInMessages.put(ref.getMessageId(), ref);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1205,        return result;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,83,            WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,98,"            appendParametersToMessage(request, message);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,99,            boolean persistent = isSendPersistent(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,100,            int priority = getSendPriority(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,101,            long timeToLive = getSendTimeToLive(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,102,"            client.send(destination, message, persistent, priority, timeToLive);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,140,            WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,227,                        message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,258,            WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,320,                            message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/WebClient.java,146,        } catch (JMSException e) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,423,                                localBroker.oneway(message);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,609,"                            LOG.trace(""cameFromRemote = ""+cameFromRemote);"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,612,                        if (!message.isResponseRequired() || isDuplex()) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,180,"        LOG.trace(""TCP consumer thread starting"");"
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,98,"        assertEquals(0, countMbeans(networkedBroker, ""NetworkBridge""));"
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,29,import javax.net.ssl.SSLContext;
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,30,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpBufferedOutputStream.java,92,"                out.write(b, off, len);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpBufferedOutputStream.java,106,"            out.write(buffer, 0, count);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,508,"        TcpBufferedOutputStream buffOut = new TcpBufferedOutputStream(socket.getOutputStream(), ioBufferSize);"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpBufferedOutputStream.java,98,                    writeTimestamp = System.currentTimeMillis();
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,76,            public void run() {
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,77,                MessageProducer producer;
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,79,                    producer = clientSession.createProducer(serverDestination);
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,82,                        TemporaryQueue replyTo = clientSession.createTemporaryQueue();
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,83,                        MessageConsumer consumer = clientSession.createConsumer(replyTo);
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,84,                        Message msg = clientSession.createMessage();
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,88,                            clientSession.commit();
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,90,                        Message reply = consumer.receive();
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,92,                            clientSession.commit();
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,101,                } catch (IllegalStateException IgnoredAsCanOcurrDuringShutdown) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,203,                        removeList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,227,                                         // Need to put it back in the front.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,229,"                                             dispatched.add(0, node);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,310,                // a
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,311,                // DLQ message.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,313,                // the
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,314,                // acknowledgment.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,399,                LOG
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,400,"                        .debug(""Acknowledgment out of sync (Normally occurs when failover connection reconnects): """
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,401,                                + ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,445,        if (ack.getMessageCount() != checkCount && ack.isStandardAck()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,574,                            // Synchronize between dispatched list and remove of messageg from pending list
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,642,        // no commit so will auto rollback and get redispatched to redisptachConsumer
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,645,        assertNotNull(redispatchConsumer.receive(1000));
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,38,        } catch ( JMSException expected ) {
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,39,"            assertTrue(""reason is  java.net.UnknownHostException"", expected.getCause() instanceof  java.net.UnknownHostException);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,91,                    if (taskRunner == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,92,"                        taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this, ""ActiveMQ Session: "" + session.getSessionId());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,99,                while (iterate()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,246,"                                            prefetchExtension, index + 1);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,250,                                        prefetchExtension - (index + 1));
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,887,         Thread.sleep(100);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,895,         Thread.sleep(100);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,923,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,924,        StompFrame connect = stompConnection.receive();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,925,        if (!connect.getAction().equals(Stomp.Responses.CONNECTED)) {
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,926,"         throw new Exception (""Not connected"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,927,        }
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,24,import java.security.KeyManagementException;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,25,import java.security.SecureRandom;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,35,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,39,import javax.net.ssl.KeyManager;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,40,import javax.net.ssl.TrustManager;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,41,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,86,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,39, * Implements all the default JDBC operations that are used by the
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,40, * JDBCPersistenceAdapter. <p/> sub-classing is encouraged to override the
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,41, * default implementation of methods to account for differences in JDBC Driver
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,42, * implementations. <p/> The JDBCAdapter inserts and extracts BLOB data using
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,43, * the getBytes()/setBytes() operations. <p/> The databases/JDBC drivers that
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,44, * use this adapter are:
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,54,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,78,"                rs = c.getConnection().getMetaData().getTables(null, null,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,79,"                                                               statements.getFullMessageTableName(),"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,80,"                                                               new String[] {""TABLE""});"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,87,            String[] createStatments = statements.getCreateSchemaStatements();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,96,"                        LOG.debug(""Could not create JDBC tables; The message table already existed."""
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,97,"                                  + "" Failure was: "" + createStatments[i] + "" Message: "" + e.getMessage()"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,98,"                                  + "" SQLState: "" + e.getSQLState() + "" Vendor code: "" + e.getErrorCode());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,101,"                                 + createStatments[i] + "" Message: "" + e.getMessage() + "" SQLState: """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,102,"                                 + e.getSQLState() + "" Vendor code: "" + e.getErrorCode());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,120,            String[] dropStatments = statements.getDropSchemaStatements();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,128,"                    LOG.warn(""Could not drop JDBC tables; they may not exist."" + "" Failure was: """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,129,"                             + dropStatments[i] + "" Message: "" + e.getMessage() + "" SQLState: """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,130,"                             + e.getSQLState() + "" Vendor code: "" + e.getErrorCode());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,147,            s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInMsgsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,155,            s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInAcksStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,168,"    public void doAddMessage(TransactionContext c, MessageId messageID, ActiveMQDestination destination,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,169,"                             byte[] data, long expiration) throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,173,                s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,174,                if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,184,            if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,190,            if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,191,                if (s!=null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,198,"    public void doAddMessageReference(TransactionContext c, MessageId messageID,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,199,"                                      ActiveMQDestination destination, long expirationTime, String messageRef)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,200,"        throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,204,                s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,205,                if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,215,            if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,221,            if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,227,"    public long getBrokerSequenceId(TransactionContext c, MessageId messageID) throws SQLException,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,228,        IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,232,            s = c.getConnection().prepareStatement(statements.getFindMessageSequenceIdStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,250,            s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,267,            s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,284,                s = c.getConnection().prepareStatement(statements.getRemoveMessageStatment());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,285,                if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,290,            if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,296,            if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,302,"    public void doRecover(TransactionContext c, ActiveMQDestination destination,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,303,                          JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,307,            s = c.getConnection().prepareStatement(statements.getFindAllMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,310,            if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,330,"                             String subscriptionName, long seq) throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,334,                s = c.getConnection().prepareStatement(statements.getUpdateLastAckOfDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,335,                if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,343,            if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,349,            if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,356,"                                      String subscriptionName, JDBCMessageRecoveryListener listener)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,357,        throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,363,            s = c.getConnection().prepareStatement(statements.getFindAllDurableSubMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,368,            if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,388,"                                      String subscriptionName, long seq, int maxReturned,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,389,                                      JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,393,            s = c.getConnection().prepareStatement(statements.getFindDurableSubMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,401,            if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,425,"                                                  String clientId, String subscriptionName)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,426,"        throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,431,            s = c.getConnection().prepareStatement(statements.getDurableSubscriberMessageCountStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,447,"     * @see org.apache.activemq.store.jdbc.JDBCAdapter#doSetSubscriberEntry(java.sql.Connection,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,448,"     *      java.lang.Object, org.apache.activemq.service.SubscriptionInfo)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,451,"        throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,458,                s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInMsgsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,470,            s = c.getConnection().prepareStatement(statements.getCreateDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,486,"                                                 String clientId, String subscriptionName)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,487,"        throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,491,            s = c.getConnection().prepareStatement(statements.getFindDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,504,            subscription.setSubscribedDestination(ActiveMQDestination
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,505,"                .createDestination(rs.getString(2), ActiveMQDestination.QUEUE_TYPE));"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,514,"        throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,518,            s = c.getConnection().prepareStatement(statements.getFindAllDurableSubsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,528,                subscription.setSubscribedDestination(ActiveMQDestination
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,529,"                    .createDestination(rs.getString(4), ActiveMQDestination.QUEUE_TYPE));"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,539,"    public void doRemoveAllMessages(TransactionContext c, ActiveMQDestination destinationName)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,540,"        throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,543,            s = c.getConnection().prepareStatement(statements.getRemoveAllMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,547,            s = c.getConnection().prepareStatement(statements.getRemoveAllSubscriptionsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,556,"                                     String subscriptionName) throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,559,            s = c.getConnection().prepareStatement(statements.getDeleteSubscriptionStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,572,"            LOG.debug(""Executing SQL: "" + statements.getDeleteOldMessagesStatement());"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,573,            s = c.getConnection().prepareStatement(statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,582,"    public long doGetLastAckedDurableSubscriberMessageId(TransactionContext c,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,583,"                                                         ActiveMQDestination destination, String clientId,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,584,"                                                         String subscriberName) throws SQLException,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,585,        IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,590,            s = c.getConnection()
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,591,                .prepareStatement(statements.getLastAckedDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,627,            s = c.getConnection().prepareStatement(statements.getFindAllDestinationsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,640,        return batchStatments;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,648,        statements.setUseExternalMessageReferences(useExternalMessageReferences);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,652,        return statements;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,659,"    public byte[] doGetNextDurableSubscriberMessageStatement(TransactionContext c,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,660,"                                                             ActiveMQDestination destination,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,661,"                                                             String clientId, String subscriberName)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,662,"        throws SQLException, IOException {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,666,            s = c.getConnection().prepareStatement(statements.getNextDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,682,        IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,687,            s = c.getConnection().prepareStatement(statements.getDestinationMessageCountStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,701,"                                      int maxReturned, JDBCMessageRecoveryListener listener) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,705,            s = c.getConnection().prepareStatement(statements.getFindNextMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,706,            s.setMaxRows(maxReturned);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,708,"            s.setLong(2, nextSeq);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,711,            if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,717,                        break;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,726,                        break;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,738,"     * Useful for debugging. public void dumpTables(Connection c, String"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,739,"     * destinationName, String clientId, String subscriptionName) throws"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,740,"     * SQLException { printQuery(c, ""Select * from ACTIVEMQ_MSGS"", System.out);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,741,"     * printQuery(c, ""Select * from ACTIVEMQ_ACKS"", System.out);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,742,"     * PreparedStatement s = c.prepareStatement(""SELECT M.ID, D.LAST_ACKED_ID"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,743,"     * FROM "" +""ACTIVEMQ_MSGS M, "" +""ACTIVEMQ_ACKS D "" +""WHERE D.CONTAINER=? AND"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,744,"     * D.CLIENT_ID=? AND D.SUB_NAME=?"" +"" AND M.CONTAINER=D.CONTAINER AND M.ID >"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,745,"     * D.LAST_ACKED_ID"" +"" ORDER BY M.ID""); s.setString(1,destinationName);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,746,"     * s.setString(2,clientId); s.setString(3,subscriptionName);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,749,"     * public void dumpTables(Connection c) throws SQLException { printQuery(c,"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,750,"     * ""Select * from ACTIVEMQ_MSGS"", System.out); printQuery(c, ""Select * from"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,751,"     * ACTIVEMQ_ACKS"", System.out); }"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,753,"     * private void printQuery(Connection c, String query, PrintStream out)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,754,"     * throws SQLException { printQuery(c.prepareStatement(query), out); }"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,756,"     * private void printQuery(PreparedStatement s, PrintStream out) throws"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,757,     * SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,759,     * ResultSet set=null; try { set = s.executeQuery(); ResultSetMetaData
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,760,     * metaData = set.getMetaData(); for( int i=1; i<=
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,761,"     * metaData.getColumnCount(); i++ ) { if(i==1) out.print(""||"");"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,762,"     * out.print(metaData.getColumnName(i)+""||""); } out.println();"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,763,     * while(set.next()) { for( int i=1; i<= metaData.getColumnCount(); i++ ) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,764,"     * if(i==1) out.print(""|""); out.print(set.getString(i)+""|""); }"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,765,     * out.println(); } } finally { try { set.close(); } catch (Throwable
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,766,     * ignore) {} try { s.close(); } catch (Throwable ignore) {} } }
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,768,
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,57,         return existing;
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,60,        // if(!((ActiveMQTempDestination)destination).getConnectionId().equals(context.getConnectionId().getValue())
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,61,        // ) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,75,        // }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,283,        if (destinations.remove(destination) != null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,207,"                            LOG.debug(""Connection established"");"
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,209,                            fanoutHandler.reconnectDelay = 10;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,210,                            fanoutHandler.connectFailures = 0;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,211,                            if (primary == null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,212,                                primary = fanoutHandler;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,213,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,236,            // any newly paged in messages that are not dispatched are added to pagedInPending in iterate()
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,237,            doPageIn(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,239,            synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,240,                RecoveryDispatch rd = new RecoveryDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,241,                rd.messages =  new ArrayList<QueueMessageReference>(pagedInMessages.values());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,242,                rd.subscription = sub;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,243,                recoveries.addLast(rd);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,244,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,245,            if( sub instanceof QueueBrowserSubscription ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,306,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,307,            if (consumers.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,308,                messages.gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,660,        } catch (IOException e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,902,            pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,984,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1274,            if (target == null && interestCount>0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1275,                // This means all subs were full...
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1291,"        //LOG.info(getName()+"" Pending messages:"");"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1292,        //for (MessageReference n : rc) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1293,"       //     LOG.info(getName()+""  - "" + n.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1294,       // }
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,73,            if (result) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,137,        // If we are ccursoring to disk..it's not and issue because it does not block due
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,96,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,278,            MessageAck ack = sub.onStompMessageAck(messageId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,546,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,35, * Keeps track of the STOMP susbscription so that acking is correctly done.
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,49,"    private final LinkedHashMap<String, MessageId> dispatchedMessage = new LinkedHashMap<String, MessageId>();"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,63,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,65,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,68,"                dispatchedMessage.put(message.getJMSMessageID(), message.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,72,"                dispatchedMessage.put(message.getJMSMessageID(), message.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,95,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,99,    synchronized MessageAck onStompMessageAck(String messageId) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,100,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,101,        if (!dispatchedMessage.containsKey(messageId)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,110,            ack.setAckType(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,                String id = (String)entry.getKey();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,                MessageId msgid = (MessageId)entry.getValue();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,119,                    ack.setFirstMessageId(msgid);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,121,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,122,                iter.remove();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,125,                if (id.equals(messageId)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,126,                    ack.setLastMessageId(msgid);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,135,            MessageId msgid = (MessageId)dispatchedMessage.get(messageId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,136,            ack.setMessageID(msgid);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,49,import org.apache.activemq.transport.stomp.Stomp.Headers.Subscribe;
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,941,        StompFrame frame = stompConnection.receive();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,947,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,956,    }
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,957,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,233,                                             // ActiveMQ workaround for AMQ-1730 - Please Ignore next line
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,234,                                                node.incrementRedeliveryCounter();
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,633,"        sendMessages(connection, destination, 1);"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,648,"        // should have re-delivery of 2, one for re-dispatch, one for rollback which is a little too much!"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,649,"        assertEquals(3, msg.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,663,"        sendMessages(connection, destination, 1);"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,678,"        // should have re-delivery of 2, one for re-dispatch, one for rollback which is a little too much!"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,679,"        assertEquals(3, msg.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,55,"        doTestRedelivery(""vm://localhost"", false);"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,59,"        doTestRedelivery(""vm://localhost"", true);"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,105,"        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,138,"        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,171,"        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/test/rollback/CloseRollbackRedeliveryQueueTest.java,58,"        assertEquals(3, message.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/test/rollback/CloseRollbackRedeliveryQueueTest.java,78,"        assertEquals(3, message.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/test/rollback/CloseRollbackRedeliveryQueueTest.java,97,"        assertEquals(3, message.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,237,              firstConsumer = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,238,             }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,239,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,240,             if (consumersBeforeStartsLatch != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,241,              consumersBeforeStartsLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,650,  consumersBeforeStartsLatch = new CountDownLatch(consumersBeforeDispatchStarts);
activemq-core/src/test/java/org/apache/activemq/usecases/MessageGroupDelayedTest.java,112,   for(int i = 0; i < 10; i++) {
activemq-core/src/test/java/org/apache/activemq/usecases/MessageGroupDelayedTest.java,156,"     assertEquals(10, messageCount.get(worker).intValue());"
activemq-core/src/test/java/org/apache/activemq/usecases/MessageGroupDelayedTest.java,157,"     assertEquals(1, messageGroups.get(worker).size());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,290,                doPageIn(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,291,
activemq-core/src/test/java/org/apache/activemq/JmsQueueBrowserTest.java,121,"        assertTrue(""should have received the fisrts message"", enumeration.hasMoreElements());"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,179,                    throw new IOException(ce.getMessage());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,181,                dataIn.close();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,81,            return ((ObjectMessage) message).getObject();
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,66,
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,68,"            NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);"
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,69,            return iterator.nextNode() != null;
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,85,            // We should associated the cachedXPathAPI object with the message
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,86,            // being evaluated
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,87,            // since that should speedup subsequent xpath expressions.
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,89,"            NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);"
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,90,            return iterator.nextNode() != null;
activemq-core/src/test/java/org/apache/activemq/selector/SelectorTest.java,47,"        message.setText(""<root><a key='first'/><b key='second'/></root>"");"
activemq-core/src/test/java/org/apache/activemq/selector/SelectorTest.java,52,
activemq-core/src/test/java/org/apache/activemq/selector/SelectorTest.java,55,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,624,    protected DemandSubscription getDemandSubscription(MessageDispatch md) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,625,        return subscriptionMapByLocalId.get(md.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,626,    }
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,627,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,646,                    //localStartedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,647,                    final MessageDispatch md = (MessageDispatch)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,651,                       // See if this consumer's brokerPath tells us it came from the broker at the other end
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,652,                       // of the bridge. I think we should be making this decision based on the message's
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,653,"                       // broker bread crumbs and not the consumer's? However, the message's broker bread"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,654,"                       // crumbs are null, which is another matter."
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,655,                       boolean cameFromRemote = false;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,664,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,675,                              }
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,676,                            else{
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,677,"                              LOG.info(""Message not forwarded on to remote, because message came from remote"");"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1066,"                LOG.debug(configuration.getBrokerName() + "" removing sub on "" + localBroker + "" from "" + remoteBrokerName + "" :  "" + sub.getRemoteInfo());"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,80,    private CallbackHandler handler;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,81,    private String initialContextFactory;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,82,    private String connectionURL;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,83,    private String connectionUsername;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,84,    private String connectionPassword;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,85,    private String connectionProtocol;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,86,    private String authentication;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,87,    private String userBase;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,88,    private String roleBase;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,89,    private String roleName;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,90,    private String userRoleName;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,92,    private MessageFormat userSearchMatchingFormat;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,93,    private MessageFormat roleSearchMatchingFormat;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,94,    private boolean userSearchSubtreeBool;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,95,    private boolean roleSearchSubtreeBool;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,101,        initialContextFactory = (String)options.get(INITIAL_CONTEXT_FACTORY);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,102,        connectionURL = (String)options.get(CONNECTION_URL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,103,        connectionUsername = (String)options.get(CONNECTION_USERNAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,104,        connectionPassword = (String)options.get(CONNECTION_PASSWORD);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,105,        connectionProtocol = (String)options.get(CONNECTION_PROTOCOL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,106,        authentication = (String)options.get(AUTHENTICATION);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,107,        userBase = (String)options.get(USER_BASE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,108,        String userSearchMatching = (String)options.get(USER_SEARCH_MATCHING);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,109,        String userSearchSubtree = (String)options.get(USER_SEARCH_SUBTREE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,110,        roleBase = (String)options.get(ROLE_BASE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,111,        roleName = (String)options.get(ROLE_NAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,112,        String roleSearchMatching = (String)options.get(ROLE_SEARCH_MATCHING);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,113,        String roleSearchSubtree = (String)options.get(ROLE_SEARCH_SUBTREE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,114,        userRoleName = (String)options.get(USER_ROLE_NAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,115,        userSearchMatchingFormat = new MessageFormat(userSearchMatching);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,116,        roleSearchMatchingFormat = new MessageFormat(roleSearchMatching);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,117,        userSearchSubtreeBool = Boolean.valueOf(userSearchSubtree).booleanValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,118,        roleSearchSubtreeBool = Boolean.valueOf(roleSearchSubtree).booleanValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,134,        String password = new String(((PasswordCallback)callbacks[1]).getPassword());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,135,
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,136,"        if (username == null || """".equals(username) || password == null || """".equals(password)) {"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,137,            return false;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,138,        }
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,199,            if (userRoleName != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,200,                list.add(userRoleName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,206,"            NamingEnumeration results = context.search(userBase, filter, constraints);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,219,            Name baseName = parser.parse(userBase);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,230,            if (userRoleName != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,231,"                roles = addAttributeValues(userRoleName, attrs, roles);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,261,"        if (roleName == null || """".equals(roleName)) {"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,274,"        NamingEnumeration results = context.search(roleBase, filter, constraints);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,281,"            list = addAttributeValues(roleName, attrs, list);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,328,        if (connectionUsername != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,329,"            context.addToEnvironment(Context.SECURITY_PRINCIPAL, connectionUsername);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,334,        if (connectionPassword != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,335,"            context.addToEnvironment(Context.SECURITY_CREDENTIALS, connectionPassword);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,364,        if (context != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,365,            return context;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,366,        }
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,367,
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,370,"            env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,371,"            if (connectionUsername != null || !"""".equals(connectionUsername)) {"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,372,"                env.put(Context.SECURITY_PRINCIPAL, connectionUsername);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,374,"            if (connectionPassword != null || !"""".equals(connectionPassword)) {"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,375,"                env.put(Context.SECURITY_CREDENTIALS, connectionPassword);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,377,"            env.put(Context.SECURITY_PROTOCOL, connectionProtocol);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,378,"            env.put(Context.PROVIDER_URL, connectionURL);"
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,379,"            env.put(Context.SECURITY_AUTHENTICATION, authentication);"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,19,import java.io.File;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,21,import java.net.InetAddress;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,24,import java.util.Properties;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,38,import junit.framework.TestCase;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,40,import org.apache.activemq.jaas.ldap.MutableServerStartupConfiguration;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,41,import org.apache.activemq.jaas.ldap.ServerContextFactory;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,42,import org.apache.ldap.server.configuration.ShutdownConfiguration;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,43,import org.apache.ldap.server.jndi.CoreContextFactory;
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,47,/**
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,48, * @version $Rev: $ $Date: $
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,49, */
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,50,public class LDAPLoginModuleTest extends TestCase {
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,51,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,54,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,55,    public void testNothing() {
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,56,    }
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,57,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,62,"        env.put(Context.PROVIDER_URL, ""ldap://localhost:9389"");"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,69,        // Perform search using URL
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,70,        // NamingEnumeration answer = ctx.search(
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,71,"        // ""ldap://localhost:389/ou=system"", ""(uid=admin)"", null);"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,88,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,89,    public void xtestLogin() throws LoginException {
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,107,"    @SuppressWarnings(""unchecked"")"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,108,    public void setUp() throws Exception {
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,109,        MutableServerStartupConfiguration startup = new MutableServerStartupConfiguration();
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,110,        // put some mandatory JNDI properties here
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,111,"        startup.setWorkingDirectory(new File(""target/ldap""));"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,112,        startup.setAllowAnonymousAccess(true);
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,113,        startup.setLdapPort(9389);
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,114,        startup.setEnableNetworking(true);
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,115,"        startup.setHost(InetAddress.getByName(""localhost""));"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,116,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,117,        Properties env = new Properties();
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,118,        env.putAll(startup.toJndiEnvironment());
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,119,"        env.put(Context.INITIAL_CONTEXT_FACTORY, ServerContextFactory.class.getName());"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,120,"        env.put(Context.PROVIDER_URL, ""ou=system"");"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,121,"        env.put(Context.SECURITY_AUTHENTICATION, ""simple"");"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,122,"        env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,123,"        env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,124,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,125,        //Fire it up
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,126,        new InitialDirContext(env);
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,127,    }
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,128,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,129,"    @SuppressWarnings(""unchecked"")"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,130,    public void tearDown() throws Exception {
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,131,        Properties env = new Properties();
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,132,        env.putAll(new ShutdownConfiguration().toJndiEnvironment());
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,133,"        env.put(Context.INITIAL_CONTEXT_FACTORY, CoreContextFactory.class.getName());"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,134,"        env.put(Context.PROVIDER_URL, ""ou=system"");"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,135,"        env.put(Context.SECURITY_AUTHENTICATION, ""simple"");"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,136,"        env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,137,"        env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);"
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,138,
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,139,        //Shut it down
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,140,        new InitialDirContext(env);
activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java,141,    }
activemq-jaas/src/test/java/org/apache/activemq/jaas/PropertiesLoginModuleTest.java,49,"        System.out.println(""Path to login config: "" + path);"
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,26,import javax.jms.DeliveryMode;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,36,import junit.framework.Test;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,37,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,38,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,39,import org.apache.activemq.CombinationTestSupport;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,40,import org.apache.activemq.broker.BrokerService;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,41,import org.apache.activemq.broker.BrokerTest;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,42,import org.apache.activemq.broker.region.Queue;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,43,import org.apache.commons.logging.Log;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,44,import org.apache.commons.logging.LogFactory;
activemq-core/src/test/java/org/apache/activemq/broker/region/cursors/CursorSupport.java,45,
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,267,        if (options.containsKey(WRITE_TIMEOUT_FILTER)) {
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,268,            transport = new WriteTimeoutFilter(transport);
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,269,            String soWriteTimeout = (String)options.get(WRITE_TIMEOUT_FILTER);
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,270,            if (soWriteTimeout!=null) ((WriteTimeoutFilter)transport).setWriteTimeout(Long.parseLong(soWriteTimeout));
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,271,        }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,109,        return transport;
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,32,"    protected String uriString = ""failover://(tcp://localhost:62001,tcp://localhost:62002)?randomize=false"";"
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,19,import java.net.URI;
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,25,import junit.framework.Test;
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,28,import org.apache.activemq.broker.BrokerFactory;
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,29,import org.apache.activemq.broker.BrokerService;
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,30,import org.apache.activemq.broker.BrokerTest;
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,34,import org.apache.activemq.store.amq.AMQPersistenceAdapter;
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,38,/**
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,39, * Once the wire format is completed we can test against real persistence storage.
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,40, *
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,41, * @version $Revision$
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,42, */
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,48,    class UnderTest extends AMQTransactionStore {
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,49,        public UnderTest() {
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,53,         return inflightTransactions;
activemq-core/src/test/java/org/apache/activemq/broker/store/TransactionStoreTest.java,57,    UnderTest underTest = new UnderTest();
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,43,        ConsumerBean messageList = new ConsumerBean();
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,51,"        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,34, *
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,39,    private Connection connection;
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,45,
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,49,
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,50,    public void testVirtualTopicCreation() throws Exception {
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,51,        if (connection == null) {
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,52,            connection = createConnection();
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,53,        }
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,54,        connection.start();
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,66,
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,70,
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,75,
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,76,"        Session session = connection.createSession(false, ackMode);"
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,84,        MessageProducer producer = session.createProducer(new ActiveMQTopic(getVirtualTopicName()));
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,87,        int total = 10;
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,89,"            producer.send(session.createTextMessage(""message: "" + i));"
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,91,
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,100,
activemq-core/src/test/java/org/apache/activemq/broker/virtual/VirtualTopicPubSubTest.java,107,        if (connection != null) {
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,44,     *
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,62,     *
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,99,     *
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,109,                if (hasReceivedMessages(messageCount)) {
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,110,                    break;
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,111,                }
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,143,     *
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,152,     *
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,80,"        fireAdvisory(context, topic, info);"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,81,"        connections.put(info.getConnectionId(), info);"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,190,        Thread.sleep( 5000 );
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,191,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,101,"    private void sendTextMessage( String queueName, String msg ) throws JMSException, NamingException {"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,119,            message = session.createTextMessage( msg );
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,127,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,128,"            logger.info( ""Message successfully sent to : "" + queue.getQueueName( ) + "" messageid: "" + message.getJMSMessageID( )"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,155,"            sendTextMessage( TEST_QUEUE_NAME, String.valueOf(i) );"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,165,"                        logger.info( ""Received message:"" + message.getJMSMessageID() +  "" with content: "" + ((TextMessage)message).getText() );"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,166,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,167,                        messageCount.incrementAndGet();
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,168,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,187,"            sendTextMessage( TEST_QUEUE_NAME, String.valueOf( i ) );"
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,189,
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,191,        Wait.waitFor(new Wait.Condition() {
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,195,        });
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,429,"            rmiServer = ""localhost:"" + rmiServerPort;"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,431,"        String serviceURL = ""service:jmx:rmi://"" + rmiServer + ""/jndi/rmi://localhost:"" + connectorPort + connectorPath;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,974,        Thread.sleep(100);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,167,            inTx = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,195,            inTx = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DB2JDBCAdapter.java,30,    public DB2JDBCAdapter() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DB2JDBCAdapter.java,31,        batchStatments = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DB2JDBCAdapter.java,32,    }
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1936Test.java,201,"        }, 20*60*1000);"
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,146,
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,147,            // let the peer know that we are disconnecting..
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,148,            try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,149,                oneway(DISCONNECT);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,150,            } catch (Exception ignore) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,151,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,239,                                                prefetchExtension--;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,364,            try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,365,             sub.onStompAbort(activemqTx);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,366,            } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,367,"             throw new ProtocolException(""Transaction abort failed"", false, e);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,368,            }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,191,     // discard all content on the wire before
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,192,     // aborting the transaction
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,193,     try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,194,      StompFrame discarded = this.receive(100);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,195,      while (discarded != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,196,       discarded = this.receive(100);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,197,      }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,198,     } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,199,     }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,102,"    synchronized void onStompAbort(TransactionId transactionId) throws IOException, JMSException {"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,103,     //ack all unacked messages
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,104,     for (MessageDispatch md : dispatchedMessage.values()) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,105,      if (!unconsumedMessage.contains(md)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,106,             MessageAck ack = new MessageAck();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,107,             ack.setDestination(consumerInfo.getDestination());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,108,             ack.setConsumerId(consumerInfo.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,109,             ack.setAckType(MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,110,             ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,111,             ack.setLastMessageId(md.getMessage().getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,112,             ack.setMessageCount(1);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,113,             ack.setTransactionId(transactionId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,114,             protocolConverter.getTransportFilter().sendToActiveMQ(ack);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,             unconsumedMessage.add(md);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,      }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,117,     }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,118,     // redeliver all unconsumed messages
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,119,     for (MessageDispatch md : unconsumedMessage) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,120,      onMessageDispatch(md);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,121,     }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,125,     // ack all messages
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,126,     if (!unconsumedMessage.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,127,      MessageAck ack = new MessageAck();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,128,      ack.setDestination(consumerInfo.getDestination());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,129,      ack.setConsumerId(consumerInfo.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,130,      ack.setAckType(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,131,      ack.setFirstMessageId(unconsumedMessage.getFirst().getMessage().getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,132,      ack.setLastMessageId(unconsumedMessage.getLast().getMessage().getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,133,      ack.setMessageCount(unconsumedMessage.size());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,134,      ack.setTransactionId(transactionId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,135,      protocolConverter.getTransportFilter().sendToActiveMQ(ack);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,136,      // clear lists
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,137,      unconsumedMessage.clear();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,154,         if (transactionId != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,155,          ack.setAckType(MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,156,         } else {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,157,          ack.setAckType(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,158,         }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,171,                 if (!unconsumedMessage.contains(msg))
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,174,                iter.remove();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,981,"        assertEquals(frame3.getBody(), ""message 1"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,985,"        assertEquals(frame4.getBody(), ""message 2"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,988,        StompFrame frame5 = stompConnection.receive();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,989,"        assertEquals(frame5.getBody(), ""message 3"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,990,"        stompConnection.ack(frame5, ""tx2"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,991,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,995,        StompFrame frame6 = stompConnection.receive();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,996,"        assertEquals(frame6.getBody(), ""message 4"");"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,997,"        stompConnection.ack(frame6, ""tx3"");"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,504,        queues.remove(destination);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,69,            Queue regionQueue = (Queue)i.next();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,70,            regionQueue.purge();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,69,        //TODO is this correct? we are ignoring the constructor parameter matchBatchSize
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,70,//        this.nonPersistent.setMaxBatchSize(getMaxBatchSize());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,307,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,468,            if (!isSlave()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,20,import java.util.Iterator;
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,37,
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,45, *
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,51,    private ArrayList<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,61,     *
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,76,        for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,77,            ManagedSessionProxy p = iter.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,78,            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,79,                p.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,80,            } catch (JMSException ignore) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,82,            iter.remove();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,87,     *
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,99,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,109,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,118,"//        ActiveMQSession session = (ActiveMQSession)getConnection().createSession(true, acknowledgeMode);"
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,119,"        ActiveMQSession session = (ActiveMQSession)getConnection().createSession(transacted, acknowledgeMode);"
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,122,        ManagedSessionProxy p = new ManagedSessionProxy(session);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,124,        sessions.add(p);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,129,        for (ManagedSessionProxy p : sessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,130,            p.setUseSharedTxContext(enable);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,135,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,145,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,155,     * @return
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,163,     * @return
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,171,     * @return
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,179,     * @param clientID
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,187,     * @param listener
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,50, * that are of interest of the ActiveMQManagedConnection.
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,59,    public ManagedSessionProxy(ActiveMQSession session) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,77,     * Called by the ActiveMQManagedConnection to invalidate this proxy.
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,79,     * @throws JMSException
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,80,     * @throws JMSException
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,88,     *
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,103,"        LOG.info(""Waiting for message to arrive"");"
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,104,
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,106,
activemq-core/src/test/java/org/apache/activemq/spring/ConsumerBean.java,107,        for (int i = 0; i < 10; i++) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,170,            close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,198,            close();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,834,"                ackLater(md, MessageAck.DELIVERED_ACK_TYPE);"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,162,"        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(""tcp://localhost:61616"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,225,                return 1000 == view.getDispatchCount();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,243,                return 0 == view.getInFlightCount();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,249,"        assertEquals(""prefetch gets back to 0 "", 0, view.getInFlightCount());"
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,26,
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,64,
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,98,        this.bindings = bindings;
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,376,        private Iterator i = bindings.entrySet().iterator();
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,104,                } catch (NamingException e) {
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,109,
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,110,"        treeBindings = new HashMap<String, Object>();"
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,392,"            throw new IllegalStateException(""Cannot prepare a transaction that had not been started: """
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,82,    private class RemoveTransactionAction implements Runnable {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,89,        public void run() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,475,            return TRACKED_RESPONSE_MARKER;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,23,    private Runnable runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,25,    public Tracked(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,26,        this.runnable = runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,29,    public void onResponses() {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,30,        if (runnable != null) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,31,            runnable.run();
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,32,            runnable = null;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,37,        return runnable != null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,158,                        ((Tracked) object).onResponses();
activemq-core/src/test/java/org/apache/activemq/ActiveMQXAConnectionFactoryTest.java,251,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,470,"                for (MessageReference ref : sub.remove(context, this)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,474,                        // only increment redelivery if it was delivered or we
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,476,                        if (lastDeiveredSequenceId == 0
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,477,                                || qmr.getMessageId().getBrokerSequenceId() <= lastDeiveredSequenceId) {
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,810,        assertTrue(msg.getJMSRedelivered());
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,101,                        assertFalse(msg.getJMSRedelivered());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1102,                // Only increase the redelivery delay after the first redelivery..
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1106,                    redeliveryDelay = redeliveryPolicy.getRedeliveryDelay(redeliveryDelay);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,877,                                long redeliveryDelay = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,879,                                    redeliveryDelay = redeliveryPolicy.getRedeliveryDelay(redeliveryDelay);
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,85,    public long getRedeliveryDelay(long previousDelay) {
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,86,        long redeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,89,            redeliveryDelay = initialRedeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,91,            redeliveryDelay = (long) (previousDelay * backOffMultiplier);
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,93,            redeliveryDelay = previousDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,103,            redeliveryDelay += redeliveryDelay * variance;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,106,        return redeliveryDelay;
activemq-core/src/test/java/org/apache/activemq/MessageListenerRedeliveryTest.java,65,        redeliveryPolicy.setInitialRedeliveryDelay(1000);
activemq-core/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java,50,        policy.setInitialRedeliveryDelay(500);
activemq-core/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java,105,        policy.setInitialRedeliveryDelay(500);
activemq-core/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java,106,
activemq-core/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java,306,    }
activemq-core/src/test/java/org/apache/activemq/bugs/AMQ2021Test.java,60,"    String ACTIVEMQ_BROKER_URL = ACTIVEMQ_BROKER_BIND + ""?jms.redeliveryPolicy.maximumRedeliveries=1"";"
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,337,        // if ((flags & TMJOIN) == TMJOIN) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,338,        // // TODO: verify that the server has seen the xid
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,339,        // }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,340,        // if ((flags & TMJOIN) == TMRESUME) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,341,        // // TODO: verify that the xid was suspended.
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,342,        // }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,167,         synchronizations = null;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,337,"        String txSuspendResumeNotSupportMsg = ""The suspend/resume of a transaction """
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,338,"         + ""is not supported. Instead it is recommended that a new JMS session be created."";"
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,339,
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,340,        if ((flags & TMJOIN) == TMJOIN) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,341,         throw new XAException(txSuspendResumeNotSupportMsg);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,343,        }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,344,        if ((flags & TMRESUME) == TMRESUME) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,345,         throw new XAException(txSuspendResumeNotSupportMsg);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,346,        // TODO: verify that the xid was suspended.
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,347,        }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,708,     try {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,709,   return this.connection.syncSendPacket(command);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,710,  } catch (JMSException e) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,711,   if (e.getLinkedException() instanceof InterruptedIOException) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,712,    try {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,713,     Thread.interrupted();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,714,     return this.connection.syncSendPacket(command);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,715,    } finally {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,716,     Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,717,    }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,718,   }
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,719,
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,720,   throw e;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,721,  }
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,28, *
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,29, *
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,207,                // Iff one of the values is null
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,291,     *
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,312,     *
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,354,            if (lc == Byte.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,355,                if (rc == Short.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,356,                    lv = Short.valueOf(((Number)lv).shortValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,357,                } else if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,358,                    lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,359,                } else if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,360,                    lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,361,                } else if (rc == Float.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,362,                    lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,363,                } else if (rc == Double.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,364,                    lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,365,                } else {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,366,                    return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,367,                }
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,368,            } else if (lc == Short.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,369,                if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,370,                    lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,371,                } else if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,372,                    lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,373,                } else if (rc == Float.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,374,                    lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,375,                } else if (rc == Double.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,376,                    lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,377,                } else {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,378,                    return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,379,                }
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,380,            } else if (lc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,381,                if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,382,                    lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,383,                } else if (rc == Float.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,384,                    lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,385,                } else if (rc == Double.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,386,                    lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,387,                } else {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,388,                    return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,389,                }
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,390,            } else if (lc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,391,                if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,392,                    rv = Long.valueOf(((Number)rv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,393,                } else if (rc == Float.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,394,                    lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,395,                } else if (rc == Double.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,396,                    lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,397,                } else {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,398,                    return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,399,                }
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,400,            } else if (lc == Float.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,401,                if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,402,                    rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,403,                } else if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,404,                    rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,405,                } else if (rc == Double.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,406,                    lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,407,                } else {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,408,                    return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,409,                }
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,410,            } else if (lc == Double.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,411,                if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,412,                    rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,413,                } else if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,414,                    rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,415,                } else if (rc == Float.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,416,                    rv = new Float(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,420,            } else {
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,27, *
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,111,        if (jmsDestination == null) {
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,116,
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,120,    }
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,134,
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,136,"     return new String[]{""GET"", ""POST""};"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1091,"/*    public void dumpTables(Connection c, String destinationName, String clientId, String"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1103,    public void dumpTables(Connection c) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1104,"        printQuery(c, ""Select * from ACTIVEMQ_MSGS"", System.out);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1108,"    private void printQuery(Connection c, String query, PrintStream out)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1113,"    private void printQuery(PreparedStatement s, PrintStream out)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1119,            ResultSetMetaData metaData = set.getMetaData();
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseIntactQuiesceTest.java,23,import org.apache.activemq.util.DefaultIOExceptionHandler;
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseIntactQuiesceTest.java,27,public class DbRestartJDBCQueueMasterSlaveLeaseIntactQuiesceTest extends DbRestartJDBCQueueMasterSlaveLeaseIntactTest {
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseIntactQuiesceTest.java,28,    private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveLeaseIntactQuiesceTest.class);
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,49,"        LOG.info(""restart db after lease has expired. While Db is offline, master should stay alive, them lease up for grabs"");"
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,51,            TimeUnit.MILLISECONDS.sleep(3000);
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,59,        if (inflightMessageCount == 0) {
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,62,        // the lock is up for grabs after the expiry
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveLeaseTest.java,64,
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,19,import java.sql.SQLException;
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,24,
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,28,import org.apache.derby.jdbc.EmbeddedDataSource;
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,37,            final EmbeddedDataSource ds = getExistingDataSource();
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,45,                    try {
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,46,                        ds.getConnection().close();
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,47,                    } catch (SQLException ignored) {}
activemq-core/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java,80,"                    LOG.info(""Exception on producer send:"", e);"
activemq-core/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java,34,    protected EmbeddedDataSource sharedDs;
activemq-core/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java,40,        sharedDs = (EmbeddedDataSource) new DataSourceSupport().getDataSource();
activemq-core/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java,100,    protected EmbeddedDataSource getExistingDataSource() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1696,"            LOG.warn(""Async task tunner failed to wakeup "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1882,                if (!fullConsumers.contains(s) && !s.isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1883,"                    if (dispatchSelector.canSelect(s, node) && assignMessageGroup(s, (QueueMessageReference)node) && !((QueueMessageReference) node).isAcked() ) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1884,                        // Dispatch it.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1885,                        s.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1886,                        target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1887,                        break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1888,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1889,                } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1890,                    // no further dispatch of list to a full consumer to
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1891,                    // avoid out of order message receipt
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1892,                    fullConsumers.add(s);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1893,                    if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1894,"                        LOG.trace(""Sub full "" + s);"
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,101,            cs.removeTransactionState(info.getTransactionId());
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,212,    protected void setUp() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,214,        doSetUp(true);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,218,    protected void tearDown() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,226,            consumerBroker.stop();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,235,    protected void doSetUp(boolean deleteAllMessages) throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,350,        policy.setUseCache(false);

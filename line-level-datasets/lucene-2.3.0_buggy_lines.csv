File,LineNumber,src
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,1,/* The following code was generated by JFlex 1.4.1 on 1/16/08 10:31 AM */
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,28, * on 1/16/08 10:31 AM from the specification file
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,29, * <tt>/Volumes/User/grantingersoll/projects/lucene/Lucene-Trunk/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.jflex</tt>
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,428,public static final int ALPHANUM          = 0;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,429,public static final int APOSTROPHE        = 1;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,430,public static final int ACRONYM           = 2;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,431,public static final int COMPANY           = 3;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,432,public static final int EMAIL             = 4;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,433,public static final int HOST              = 5;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,434,public static final int NUM               = 6;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,435,public static final int CJ                = 7;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,436,public static final int INTERNAL_LINK     = 8;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,437,public static final int EXTERNAL_LINK     = 9;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,438,public static final int CITATION          = 10;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,439,public static final int CATEGORY         = 11;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,440,public static final int BOLD     = 12;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,441,public static final int ITALICS     = 13;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,442,public static final int BOLD_ITALICS     = 14;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,443,public static final int HEADING     = 15;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,444,public static final int SUB_HEADING     = 16;
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,445,public static final int EXTERNAL_LINK_URL = 17;
src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java,44,    /** A private instance of the JFlex-constructed scanner */
src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java,45,    private final StandardTokenizerImpl scanner;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,1,/* The following code was generated by JFlex 1.4.1 on 12/18/07 9:22 PM */
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,28, * on 12/18/07 9:22 PM from the specification file
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,29, * <tt>/Volumes/User/grantingersoll/projects/lucene/java/lucene-clean/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.jflex</tt>
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,286,public static final int ALPHANUM          = 0;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,287,public static final int APOSTROPHE        = 1;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,288,public static final int ACRONYM           = 2;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,289,public static final int COMPANY           = 3;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,290,public static final int EMAIL             = 4;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,291,public static final int HOST              = 5;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,292,public static final int NUM               = 6;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,293,public static final int CJ                = 7;
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,299,public static final int ACRONYM_DEP       = 8;
src/java/org/apache/lucene/store/FSDirectory.java,440,"    return new FSIndexInput(new File(directory, name));"
src/java/org/apache/lucene/document/DateTools.java,73,   *  depeding on <code>resolution</code>; using UTC as timezone
src/java/org/apache/lucene/document/DateTools.java,86,   *  depeding on <code>resolution</code>; using UTC as timezone
src/java/org/apache/lucene/analysis/CharArraySet.java,69,"    int code = getHashCode(text, len);"
src/java/org/apache/lucene/analysis/CharArraySet.java,178,"  private int getHashCode(char[] text, int len) {"
src/java/org/apache/lucene/analysis/CharArraySet.java,181,      for (int i=0; i<len; i++) {
src/java/org/apache/lucene/analysis/CharArraySet.java,185,      for (int i=0; i<len; i++) {
src/test/org/apache/lucene/analysis/TestCharArraySet.java,20,import java.io.IOException;
src/test/org/apache/lucene/analysis/TestCharArraySet.java,23,import org.apache.lucene.analysis.StopAnalyzer;
src/test/org/apache/lucene/analysis/TestCharArraySet.java,24,import org.apache.lucene.analysis.CharArraySet;
src/test/org/apache/lucene/analysis/TestCharArraySet.java,28,    public void testRehash() throws Exception {
src/test/org/apache/lucene/analysis/TestCharArraySet.java,29,"      CharArraySet cas = new CharArraySet(0, true);"
src/test/org/apache/lucene/analysis/TestCharArraySet.java,30,      for(int i=0;i<StopAnalyzer.ENGLISH_STOP_WORDS.length;i++)
src/test/org/apache/lucene/analysis/TestCharArraySet.java,31,        cas.add(StopAnalyzer.ENGLISH_STOP_WORDS[i]);
src/test/org/apache/lucene/analysis/TestCharArraySet.java,32,"      assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS.length, cas.size());"
src/test/org/apache/lucene/analysis/TestCharArraySet.java,33,      for(int i=0;i<StopAnalyzer.ENGLISH_STOP_WORDS.length;i++)
src/test/org/apache/lucene/analysis/TestCharArraySet.java,34,        assertTrue(cas.contains(StopAnalyzer.ENGLISH_STOP_WORDS[i]));
src/test/org/apache/lucene/analysis/TestCharArraySet.java,35,    }
src/java/org/apache/lucene/index/DocumentsWriter.java,879,"            // We must ""catch up"" for all docIDs that had no"
src/java/org/apache/lucene/index/DocumentsWriter.java,880,            // vectors before this one
src/java/org/apache/lucene/index/DocumentsWriter.java,881,            for(int i=0;i<docID;i++) {
src/java/org/apache/lucene/index/DocumentsWriter.java,882,              tvx.writeLong(0);
src/java/org/apache/lucene/index/FieldsReader.java,204,      final int docID = startDocID + count + 1;
src/java/org/apache/lucene/index/TermVectorsReader.java,171,      final int docID = startDocID + count + 1;
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,28, *  ({@link #setMaxThreadCount}) at which points merges are
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,29," *  run in the foreground, serially.  This is a simple way"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,30, *  to use concurrency in the indexing process without
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,31, *  having to create and manage application level
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,56,"   *  this many threads running, the merge is returned back"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,57,"   *  to IndexWriter so that it runs in the ""foreground"". */"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,153,"    // pending merges, until its empty:"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,170,"      message(""  consider merge "" + merge.segString(dir));"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,172,      if (merge.isExternal) {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,173,"        message(""    merge involves segments from an external directory; now run in foreground"");"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,174,      } else {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,175,        synchronized(this) {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,176,          if (mergeThreadCount() < maxThreadCount) {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,177,            // OK to spawn a new merge thread to handle this
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,178,            // merge:
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,179,"            final MergeThread merger = getMergeThread(writer, merge);"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,180,            mergeThreads.add(merger);
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,181,"            message(""    launch new thread ["" + merger.getName() + ""]"");"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,182,            merger.start();
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,183,            continue;
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,184,          } else
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,185,"            message(""    too many merge threads running; run merge in foreground"");"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,189,"      // Too many merge threads already running, so we do"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,190,      // this in the foreground of the calling thread
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,288,          mergeThreads.remove(this);
src/java/org/apache/lucene/index/DocumentsWriter.java,153,  private boolean aborting;                       // True while abort is running
src/java/org/apache/lucene/index/DocumentsWriter.java,326,    aborting = true;
src/java/org/apache/lucene/index/DocumentsWriter.java,341,    assert ae == null || aborting;
src/java/org/apache/lucene/index/DocumentsWriter.java,364,        abortedFiles = files();
src/java/org/apache/lucene/index/DocumentsWriter.java,366,        // Discard pending norms:
src/java/org/apache/lucene/index/DocumentsWriter.java,367,        final int numField = fieldInfos.size();
src/java/org/apache/lucene/index/DocumentsWriter.java,368,        for (int i=0;i<numField;i++) {
src/java/org/apache/lucene/index/DocumentsWriter.java,369,          FieldInfo fi = fieldInfos.fieldInfo(i);
src/java/org/apache/lucene/index/DocumentsWriter.java,370,          if (fi.isIndexed && !fi.omitNorms) {
src/java/org/apache/lucene/index/DocumentsWriter.java,371,            BufferedNorms n = norms[i];
src/java/org/apache/lucene/index/DocumentsWriter.java,372,            if (n != null) {
src/java/org/apache/lucene/index/DocumentsWriter.java,373,              n.out.reset();
src/java/org/apache/lucene/index/DocumentsWriter.java,374,              n.reset();
src/java/org/apache/lucene/index/DocumentsWriter.java,383,          } catch (IOException ioe) {
src/java/org/apache/lucene/index/DocumentsWriter.java,390,          } catch (IOException ioe) {
src/java/org/apache/lucene/index/DocumentsWriter.java,397,          } catch (IOException ioe) {
src/java/org/apache/lucene/index/DocumentsWriter.java,406,          } catch (IOException ioe) {
src/java/org/apache/lucene/index/DocumentsWriter.java,411,        // Clear vectors & fields from ThreadStates
src/java/org/apache/lucene/index/DocumentsWriter.java,412,        for(int i=0;i<threadStates.length;i++) {
src/java/org/apache/lucene/index/DocumentsWriter.java,413,          ThreadState state = threadStates[i];
src/java/org/apache/lucene/index/DocumentsWriter.java,414,          if (state.localFieldsWriter != null) {
src/java/org/apache/lucene/index/DocumentsWriter.java,415,            state.localFieldsWriter.close();
src/java/org/apache/lucene/index/DocumentsWriter.java,416,            state.localFieldsWriter = null;
src/java/org/apache/lucene/index/DocumentsWriter.java,418,          state.tvfLocal.reset();
src/java/org/apache/lucene/index/DocumentsWriter.java,419,          state.fdtLocal.reset();
src/java/org/apache/lucene/index/DocumentsWriter.java,425,        docStoreSegment = null;
src/java/org/apache/lucene/index/DocumentsWriter.java,426,        numDocsInStore = 0;
src/java/org/apache/lucene/index/DocumentsWriter.java,427,        docStoreOffset = 0;
src/java/org/apache/lucene/index/DocumentsWriter.java,428,        files = null;
src/java/org/apache/lucene/index/DocumentsWriter.java,429,
src/java/org/apache/lucene/index/DocumentsWriter.java,448,      aborting = false;
src/java/org/apache/lucene/index/DocumentsWriter.java,457,    for(int i=0;i<threadStates.length;i++) {
src/java/org/apache/lucene/index/DocumentsWriter.java,458,      threadStates[i].resetPostings();
src/java/org/apache/lucene/index/DocumentsWriter.java,459,      threadStates[i].numThreads = 0;
src/java/org/apache/lucene/index/DocumentsWriter.java,460,    }
src/java/org/apache/lucene/index/DocumentsWriter.java,462,    numBytesUsed = 0;
src/java/org/apache/lucene/index/DocumentsWriter.java,463,    balanceRAM();
src/java/org/apache/lucene/index/DocumentsWriter.java,464,    bufferIsFull = false;
src/java/org/apache/lucene/index/DocumentsWriter.java,465,    flushPending = false;
src/java/org/apache/lucene/index/DocumentsWriter.java,483,    return aborting;
src/java/org/apache/lucene/index/DocumentsWriter.java,634,      fieldGen = 0;
src/java/org/apache/lucene/index/DocumentsWriter.java,635,      maxPostingsVectors = 0;
src/java/org/apache/lucene/index/DocumentsWriter.java,636,      doFlushAfter = false;
src/java/org/apache/lucene/index/DocumentsWriter.java,1416,            // Add term vectors for this field
src/java/org/apache/lucene/index/DocumentsWriter.java,1417,            boolean success = false;
src/java/org/apache/lucene/index/DocumentsWriter.java,1419,              writeVectors(fieldInfo);
src/java/org/apache/lucene/index/DocumentsWriter.java,1420,              success = true;
src/java/org/apache/lucene/index/DocumentsWriter.java,1421,            } finally {
src/java/org/apache/lucene/index/DocumentsWriter.java,1422,              if (!success) {
src/java/org/apache/lucene/index/DocumentsWriter.java,1423,                // If we hit an exception inside
src/java/org/apache/lucene/index/DocumentsWriter.java,1424,"                // writeVectors, the contents of tvfLocal"
src/java/org/apache/lucene/index/DocumentsWriter.java,1425,"                // can be corrupt, so we must discard all"
src/java/org/apache/lucene/index/DocumentsWriter.java,1426,                // term vectors for this document:
src/java/org/apache/lucene/index/DocumentsWriter.java,1427,                numVectorFields = 0;
src/java/org/apache/lucene/index/DocumentsWriter.java,1428,                tvfLocal.reset();
src/java/org/apache/lucene/index/DocumentsWriter.java,1670,              postingsFreeCount = postingsFreeList.length;
src/java/org/apache/lucene/index/DocumentsWriter.java,1776,        postingsHashMask = newSize-1;
src/java/org/apache/lucene/index/DocumentsWriter.java,1791,            int hashPos = code & postingsHashMask;
src/java/org/apache/lucene/index/DocumentsWriter.java,1797,                hashPos = code & postingsHashMask;
src/java/org/apache/lucene/index/DocumentsWriter.java,2338,    while(!closed && (!state.isIdle || pauseThreads != 0 || flushPending || aborting))
src/java/org/apache/lucene/index/DocumentsWriter.java,2560,    if (aborting) {
src/java/org/apache/lucene/index/DocumentsWriter.java,3008,  private synchronized void getPostings(Posting[] postings) {
src/java/org/apache/lucene/index/DocumentsWriter.java,3022,      numBytesAlloc += (postings.length - numToCopy) * POSTING_NUM_BYTE;
src/java/org/apache/lucene/index/DocumentsWriter.java,3024,      for(int i=numToCopy;i<postings.length;i++)
src/java/org/apache/lucene/index/DocumentsWriter.java,3029,"  private synchronized void recyclePostings(Posting[] postings, int numPostings) {"
src/java/org/apache/lucene/index/DocumentsWriter.java,3031,    // free list
src/java/org/apache/lucene/index/DocumentsWriter.java,3032,    if (postingsFreeCount + numPostings > postingsFreeList.length) {
src/java/org/apache/lucene/index/DocumentsWriter.java,3033,      final int newSize = (int) (1.25 * (postingsFreeCount + numPostings));
src/java/org/apache/lucene/index/DocumentsWriter.java,3034,      Posting[] newArray = new Posting[newSize];
src/java/org/apache/lucene/index/DocumentsWriter.java,3035,"      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);"
src/java/org/apache/lucene/index/DocumentsWriter.java,3036,      postingsFreeList = newArray;
src/java/org/apache/lucene/index/DocumentsWriter.java,3037,    }
src/java/org/apache/lucene/index/DocumentsWriter.java,3040,    numBytesUsed -= numPostings * POSTING_NUM_BYTE;
src/java/org/apache/lucene/index/DocumentsWriter.java,3070,    numBytesUsed -= (end-start) * BYTE_BLOCK_SIZE;
src/java/org/apache/lucene/index/DocumentsWriter.java,3101,    numBytesUsed -= numBlocks * CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;
src/java/org/apache/lucene/index/FieldsReader.java,198,    indexStream.seek(startDocID * 8L);
src/java/org/apache/lucene/index/IndexWriter.java,3701,      if (autoCommit && doCommitBeforeMergeCFS(merge))
src/java/org/apache/lucene/index/IndexWriter.java,3702,"        sync(false, merge.info.sizeInBytes());"
src/java/org/apache/lucene/index/IndexWriter.java,3749,    if (autoCommit)
src/java/org/apache/lucene/index/IndexWriter.java,3750,"      sync(false, merge.info.sizeInBytes());"
src/java/org/apache/lucene/index/DocumentsWriter.java,261,"      infoStream.println(""\ncloseDocStore: "" + flushedFiles.size() + "" files to flush to segment "" + docStoreSegment);"
src/java/org/apache/lucene/index/DocumentsWriter.java,891,            final long tvdPos = tvd.getFilePointer();
src/java/org/apache/lucene/index/DocumentsWriter.java,892,            tvd.writeVInt(0);
src/java/org/apache/lucene/index/DocumentsWriter.java,893,            for(int i=0;i<numDocsInStore-1;i++) {
src/java/org/apache/lucene/index/DocumentsWriter.java,894,              tvx.writeLong(tvdPos);
src/java/org/apache/lucene/index/DocumentsWriter.java,2373,    numDocsInStore++;
src/java/org/apache/lucene/index/TermVectorsReader.java,99,          assert numTotalDocs >= size + docStoreOffset;
src/test/org/apache/lucene/index/TestStressIndexing2.java,41,    Directory dir1 = new RAMDirectory();
src/test/org/apache/lucene/index/TestStressIndexing2.java,43,    Directory dir2 = new RAMDirectory();
src/test/org/apache/lucene/index/TestStressIndexing2.java,68,      Directory dir1 = new RAMDirectory();
src/test/org/apache/lucene/index/TestStressIndexing2.java,69,      Directory dir2 = new RAMDirectory();
src/test/org/apache/lucene/index/TestStressIndexing2.java,90,"    IndexWriter w = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);"
src/test/org/apache/lucene/index/TestStressIndexing2.java,198,"     verifyEquals(r1.document(id1), r2.document(id2));"
src/test/org/apache/lucene/index/TestStressIndexing2.java,341,"            fields.add(new Field(""f0"", getString(1), Field.Store.YES, Field.Index.NO_NORMS));"
src/test/org/apache/lucene/index/TestStressIndexing2.java,344,"            fields.add(new Field(""f1"", getString(0), Field.Store.NO, Field.Index.TOKENIZED));"
src/test/org/apache/lucene/index/TestStressIndexing2.java,347,"            fields.add(new Field(""f2"", getString(0), Field.Store.YES, Field.Index.NO));"
src/test/org/apache/lucene/index/TestStressIndexing2.java,350,"            fields.add(new Field(""f3"", getString(bigFieldSize), Field.Store.YES, Field.Index.TOKENIZED));"
src/java/org/apache/lucene/index/TermInfosWriter.java,114,    if (lastFieldNumber != fieldNumber)
src/java/org/apache/lucene/index/TermInfosWriter.java,115,      return fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));
src/java/org/apache/lucene/index/TermInfosWriter.java,150,"    assert compareToLastTerm(fieldNumber, termText, termTextStart, termTextLength) < 0 || (isIndex && termTextLength == 0 && lastTermTextLength == 0);"
src/java/org/apache/lucene/store/RAMInputStream.java,65,      switchCurrentBuffer();
src/java/org/apache/lucene/store/RAMInputStream.java,74,        switchCurrentBuffer();
src/java/org/apache/lucene/store/RAMInputStream.java,86,  private final void switchCurrentBuffer() throws IOException {
src/java/org/apache/lucene/store/RAMInputStream.java,89,"      throw new IOException(""Read past EOF"");"
src/java/org/apache/lucene/store/RAMInputStream.java,106,      switchCurrentBuffer();
src/java/org/apache/lucene/index/DocumentsWriter.java,1175,    final ByteBlockPool postingsPool = new ByteBlockPool();
src/java/org/apache/lucene/index/DocumentsWriter.java,1176,    final ByteBlockPool vectorsPool = new ByteBlockPool();
src/java/org/apache/lucene/index/DocumentsWriter.java,2989,      buffer = buffers[1+bufferUpto] = getByteBlock();
src/java/org/apache/lucene/index/DocumentsWriter.java,3151,  synchronized byte[] getByteBlock() {
src/java/org/apache/lucene/index/DocumentsWriter.java,3160,    numBytesUsed += BYTE_BLOCK_SIZE;
src/java/org/apache/lucene/analysis/Analyzer.java,29, *  <p>
src/java/org/apache/lucene/analysis/Analyzer.java,30, *  WARNING: You must override one of the methods defined by this class in your
src/java/org/apache/lucene/analysis/Analyzer.java,31, *  subclass or the Analyzer will enter an infinite loop.
src/java/org/apache/lucene/analysis/Analyzer.java,35,    Reader.  Default implementation forwards to tokenStream(Reader) for
src/java/org/apache/lucene/analysis/Analyzer.java,36,    compatibility with older version.  Override to allow Analyzer to choose
src/java/org/apache/lucene/analysis/Analyzer.java,37,    strategy based on document and/or field.  Must be able to handle null
src/java/org/apache/lucene/analysis/Analyzer.java,38,    field name for backward compatibility. */
src/java/org/apache/lucene/index/DocumentsWriter.java,2443,    numDocsInRAM++;
src/java/org/apache/lucene/index/DocumentsWriter.java,2444,
src/java/org/apache/lucene/index/DocumentsWriter.java,2445,    // We must at this point commit to flushing to ensure we
src/java/org/apache/lucene/index/DocumentsWriter.java,2446,"    // always get N docs when we flush by doc count, even if"
src/java/org/apache/lucene/index/DocumentsWriter.java,2447,    // > 1 thread is adding documents:
src/java/org/apache/lucene/index/DocumentsWriter.java,2448,    if (!flushPending && maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH
src/java/org/apache/lucene/index/DocumentsWriter.java,2449,        && numDocsInRAM >= maxBufferedDocs) {
src/java/org/apache/lucene/index/DocumentsWriter.java,2450,      flushPending = true;
src/java/org/apache/lucene/index/DocumentsWriter.java,2451,      state.doFlushAfter = true;
src/java/org/apache/lucene/index/DocumentsWriter.java,2452,    } else
src/java/org/apache/lucene/index/DocumentsWriter.java,2453,      state.doFlushAfter = false;
src/java/org/apache/lucene/index/DocumentsWriter.java,2454,
src/java/org/apache/lucene/index/DocumentsWriter.java,2463,          if (!state.doFlushAfter)
src/java/org/apache/lucene/index/DocumentsWriter.java,2464,            state.doFlushAfter = timeToFlushDeletes();
src/java/org/apache/lucene/index/DocumentsWriter.java,2466,        // Only increment nextDocID on successful init
src/java/org/apache/lucene/index/IndexWriter.java,3591,   *  the synchronized lock on IndexWriter instance. */
src/test/org/apache/lucene/index/TestIndexWriter.java,3184,"      fail(""did not hit exxpected exception"");"
src/java/org/apache/lucene/index/IndexWriter.java,3237,      doAfterFlush();
src/java/org/apache/lucene/index/IndexWriter.java,3238,
src/java/org/apache/lucene/index/FieldsReader.java,238,    if (binary == true) {
src/java/org/apache/lucene/index/FieldsReader.java,243,"        doc.add(new LazyField(fi.name, Field.Store.COMPRESS, toRead, pointer));"
src/java/org/apache/lucene/index/FieldsReader.java,246,"        doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer));"
src/java/org/apache/lucene/index/FieldsReader.java,260,"        f = new LazyField(fi.name, store, toRead, pointer);"
src/java/org/apache/lucene/index/FieldsReader.java,269,"        f = new LazyField(fi.name, store, index, termVector, length, pointer);"
src/java/org/apache/lucene/index/FieldsReader.java,388,"    public LazyField(String name, Field.Store store, int toRead, long pointer) {"
src/java/org/apache/lucene/index/FieldsReader.java,395,"    public LazyField(String name, Field.Store store, Field.Index index, Field.TermVector termVector, int toRead, long pointer) {"
src/java/org/apache/lucene/index/FieldsReader.java,416,      if (fieldsData == null) {
src/java/org/apache/lucene/index/FieldsReader.java,417,        final byte[] b = new byte[toRead];
src/java/org/apache/lucene/index/FieldsReader.java,418,        IndexInput localFieldsStream = getFieldStream();
src/java/org/apache/lucene/index/FieldsReader.java,419,"        //Throw this IO Exception since IndexReader.document does so anyway, so probably not that big of a change for people"
src/java/org/apache/lucene/index/FieldsReader.java,420,        //since they are already handling this exception when getting the document
src/java/org/apache/lucene/index/FieldsReader.java,421,        try {
src/java/org/apache/lucene/index/FieldsReader.java,422,          localFieldsStream.seek(pointer);
src/java/org/apache/lucene/index/FieldsReader.java,423,"          localFieldsStream.readBytes(b, 0, b.length);"
src/java/org/apache/lucene/index/FieldsReader.java,424,          if (isCompressed == true) {
src/java/org/apache/lucene/index/FieldsReader.java,425,            fieldsData = uncompress(b);
src/java/org/apache/lucene/index/FieldsReader.java,426,          } else {
src/java/org/apache/lucene/index/FieldsReader.java,427,            fieldsData = b;
src/java/org/apache/lucene/index/FieldsReader.java,429,          isBinary = true;
src/java/org/apache/lucene/index/FieldsReader.java,430,        } catch (IOException e) {
src/java/org/apache/lucene/index/FieldsReader.java,431,          throw new FieldReaderException(e);
src/java/org/apache/lucene/index/FieldsReader.java,433,      }
src/java/org/apache/lucene/index/FieldsReader.java,434,      return isBinary ? (byte[]) fieldsData : null;
src/java/org/apache/lucene/index/FieldsReader.java,442,      return fieldsData instanceof Reader ? (Reader) fieldsData : null;
src/java/org/apache/lucene/index/FieldsReader.java,445,"    /** The value of the field as a TokesStream, or null.  If null, the Reader value,"
src/java/org/apache/lucene/index/FieldsReader.java,450,      return fieldsData instanceof TokenStream ? (TokenStream) fieldsData : null;
src/java/org/apache/lucene/index/FieldsReader.java,453,
src/java/org/apache/lucene/index/FieldsReader.java,459,      if (fieldsData == null) {
src/java/org/apache/lucene/index/FieldsReader.java,460,        IndexInput localFieldsStream = getFieldStream();
src/java/org/apache/lucene/index/FieldsReader.java,461,        try {
src/java/org/apache/lucene/index/FieldsReader.java,462,          localFieldsStream.seek(pointer);
src/java/org/apache/lucene/index/FieldsReader.java,463,          if (isCompressed) {
src/java/org/apache/lucene/index/FieldsReader.java,464,            final byte[] b = new byte[toRead];
src/java/org/apache/lucene/index/FieldsReader.java,465,"            localFieldsStream.readBytes(b, 0, b.length);"
src/java/org/apache/lucene/index/FieldsReader.java,466,"            fieldsData = new String(uncompress(b), ""UTF-8"");"
src/java/org/apache/lucene/index/FieldsReader.java,467,          } else {
src/java/org/apache/lucene/index/FieldsReader.java,468,            //read in chars b/c we already know the length we need to read
src/java/org/apache/lucene/index/FieldsReader.java,469,            char[] chars = new char[toRead];
src/java/org/apache/lucene/index/FieldsReader.java,470,"            localFieldsStream.readChars(chars, 0, toRead);"
src/java/org/apache/lucene/index/FieldsReader.java,471,            fieldsData = new String(chars);
src/java/org/apache/lucene/index/FieldsReader.java,473,        } catch (IOException e) {
src/java/org/apache/lucene/index/FieldsReader.java,474,          throw new FieldReaderException(e);
src/java/org/apache/lucene/index/FieldsReader.java,477,      return fieldsData instanceof String ? (String) fieldsData : null;
src/test/org/apache/lucene/index/TestFieldsReader.java,23,import org.apache.lucene.search.Similarity;
src/test/org/apache/lucene/index/TestFieldsReader.java,163,      String value = field.stringValue();
src/java/org/apache/lucene/store/FSDirectory.java,637,        super.close();
src/java/org/apache/lucene/store/FSDirectory.java,638,        file.close();
src/java/org/apache/lucene/store/FSDirectory.java,639,        isOpen = false;
src/java/org/apache/lucene/index/LogMergePolicy.java,320,      // Refuse to import a segment that's too large
src/java/org/apache/lucene/index/LogMergePolicy.java,321,      if (info.docCount > maxMergeDocs && info.dir != directory)
src/java/org/apache/lucene/index/LogMergePolicy.java,322,"        throw new IllegalArgumentException(""Segment is too large ("" + info.docCount + "" docs vs max docs "" + maxMergeDocs + "")"");"
src/java/org/apache/lucene/index/LogMergePolicy.java,323,
src/java/org/apache/lucene/index/LogMergePolicy.java,324,      if (size >= maxMergeSize && info.dir != directory)
src/java/org/apache/lucene/index/LogMergePolicy.java,325,"        throw new IllegalArgumentException(""Segment is too large ("" + size + "" vs max size "" + maxMergeSize + "")"");"
src/java/org/apache/lucene/index/LogMergePolicy.java,326,
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,265,    int maxMergeDocs = writer.getMaxMergeDocs();
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,266,    writer.setMaxMergeDocs(99);
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,267,
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,268,    try {
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,269,      // upper bound cannot exceed maxMergeDocs
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,270,      writer.addIndexesNoOptimize(new Directory[] { aux });
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,271,      assertTrue(false);
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,272,    }
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,273,    catch (IllegalArgumentException e) {
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,274,"      assertEquals(100, writer.docCount());"
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,275,"      assertEquals(1, writer.getSegmentCount());"
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,276,    }
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,277,
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,278,    writer.setMaxMergeDocs(maxMergeDocs);
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,1,/* The following code was generated by JFlex 1.4.1 on 1/25/08 6:54 PM */
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,28, * on 1/25/08 6:54 PM from the specification file
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,29, * <tt>/tango/mike/src/lucene.clean/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.jflex</tt>
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,457,public static final String [] TOKEN_TYPES = new String [] {
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,458,"    ""<ALPHANUM>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,459,"    ""<APOSTROPHE>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,460,"    ""<ACRONYM>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,461,"    ""<COMPANY>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,462,"    ""<EMAIL>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,463,"    ""<HOST>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,464,"    ""<NUM>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,465,"    ""<CJ>"","
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,466,"    WikipediaTokenizer.INTERNAL_LINK,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,467,"    WikipediaTokenizer.EXTERNAL_LINK,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,468,"    WikipediaTokenizer.CITATION,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,469,"    WikipediaTokenizer.CATEGORY,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,470,"    WikipediaTokenizer.BOLD,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,471,"    WikipediaTokenizer.ITALICS,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,472,"    WikipediaTokenizer.BOLD_ITALICS,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,473,"    WikipediaTokenizer.HEADING,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,474,"    WikipediaTokenizer.SUB_HEADING,"
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,475,    WikipediaTokenizer.EXTERNAL_LINK_URL
contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.java,476,};
src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java,62,
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,1,/* The following code was generated by JFlex 1.4.1 on 1/25/08 6:54 PM */
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,28, * on 1/25/08 6:54 PM from the specification file
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,29, * <tt>/tango/mike/src/lucene.clean/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.jflex</tt>
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,301,public static final String [] TOKEN_TYPES = new String [] {
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,302,"    ""<ALPHANUM>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,303,"    ""<APOSTROPHE>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,304,"    ""<ACRONYM>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,305,"    ""<COMPANY>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,306,"    ""<EMAIL>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,307,"    ""<HOST>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,308,"    ""<NUM>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,309,"    ""<CJ>"","
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,310,"    ""<ACRONYM_DEP>"""
src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java,311,};
src/test/org/apache/lucene/analysis/TestAnalyzers.java,122,"  // Just a compile time test, to ensure the"
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,435,      doc
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,436,"          .add(new Field(""content"", ""aaa"", Field.Store.NO,"
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,437,              Field.Index.TOKENIZED));
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,445,      doc
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,446,"          .add(new Field(""content"", ""bbb"", Field.Store.NO,"
src/test/org/apache/lucene/index/TestAddIndexesNoOptimize.java,447,              Field.Index.TOKENIZED));
src/java/org/apache/lucene/index/SegmentMerger.java,358,"      assert 4+docCount*8 == directory.fileLength(segment + ""."" + IndexFileNames.FIELDS_INDEX_EXTENSION) :"
src/java/org/apache/lucene/index/SegmentMerger.java,359,"        ""after mergeFields: fdx size mismatch: "" + docCount + "" docs vs "" + directory.fileLength(segment + ""."" + IndexFileNames.FIELDS_INDEX_EXTENSION) + "" length in bytes of "" + segment + ""."" + IndexFileNames.FIELDS_INDEX_EXTENSION;"
src/java/org/apache/lucene/index/SegmentMerger.java,344,"                fieldsWriter.addDocument(reader.document(j, fieldSelectorMerge));"
src/java/org/apache/lucene/index/SegmentMerger.java,361,        // This is most like a bug in Sun JRE 1.6.0_04/_05;
src/java/org/apache/lucene/index/SegmentMerger.java,434,              termVectorsWriter.addAllDocVectors(reader.getTermFreqVectors(docNum));
src/java/org/apache/lucene/index/SegmentMerger.java,447,"    assert 4+mergedDocs*16 == directory.fileLength(segment + ""."" + IndexFileNames.VECTORS_INDEX_EXTENSION) :"
src/java/org/apache/lucene/index/SegmentMerger.java,448,"      ""after mergeVectors: tvx size mismatch: "" + mergedDocs + "" docs vs "" + directory.fileLength(segment + ""."" + IndexFileNames.VECTORS_INDEX_EXTENSION) + "" length in bytes of "" + segment + ""."" + IndexFileNames.VECTORS_INDEX_EXTENSION;"
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,75,  private IndexReader reader;
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,287,    if (IndexReader.isLocked(spellIndex)){
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,288,      IndexReader.unlock(spellIndex);
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,289,    }
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,301,    if (reader == null) {
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,302,      reader = IndexReader.open(spellIndex);
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,303,    }
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,304,"    return reader.docFreq(new Term(F_WORD, word)) > 0;"
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,313,    if (IndexReader.isLocked(spellIndex)){
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,314,      IndexReader.unlock(spellIndex);
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,315,    }
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,316,"    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(),"
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,317,        !IndexReader.indexExists(spellIndex));
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,341,    // close reader so it will be re-opened (and see the new content) when exist()
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,342,    // is called the next time:
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,343,    if (reader != null) {
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,344,      reader.close();
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,345,      reader = null;
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,346,    }
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,398,
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,399,  /**
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,400,   * Closes the internal IndexReader.
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,401,   */
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,402,  protected void finalize() throws Throwable {
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,403,    try {
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,404,      if (reader != null) {
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,405,        reader.close();
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,406,      }
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,407,    } finally {
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,408,      super.finalize();
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,409,    }
contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker.java,410,  }
src/java/org/apache/lucene/queryParser/QueryParser.java,1340,"      jj_la1_0 = new int[] {0x180,0x180,0xe00,0xe00,0x1f69f80,0x48000,0x10000,0x1f69000,0x1348000,0x80000,0x80000,0x10000,0x18000000,0x2000000,0x18000000,0x10000,0x80000000,0x20000000,0x80000000,0x10000,0x80000,0x10000,0x1f68000,};"
src/java/org/apache/lucene/queryParser/QueryParser.java,1343,"      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,};"
src/java/org/apache/lucene/queryParser/QueryParser.java,1492,    boolean[] la1tokens = new boolean[33];
src/java/org/apache/lucene/queryParser/QueryParser.java,1493,    for (int i = 0; i < 33; i++) {
src/java/org/apache/lucene/queryParser/QueryParser.java,1494,      la1tokens[i] = false;
src/java/org/apache/lucene/queryParser/QueryParser.java,1495,    }
src/java/org/apache/lucene/queryParser/QueryParser.java,1512,    for (int i = 0; i < 33; i++) {
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,12,  int AND = 7;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,13,  int OR = 8;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,14,  int NOT = 9;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,15,  int PLUS = 10;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,16,  int MINUS = 11;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,17,  int LPAREN = 12;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,18,  int RPAREN = 13;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,19,  int COLON = 14;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,20,  int STAR = 15;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,21,  int CARAT = 16;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,22,  int QUOTED = 17;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,23,  int TERM = 18;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,24,  int FUZZY_SLOP = 19;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,25,  int PREFIXTERM = 20;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,26,  int WILDTERM = 21;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,27,  int RANGEIN_START = 22;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,28,  int RANGEEX_START = 23;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,29,  int NUMBER = 24;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,30,  int RANGEIN_TO = 25;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,31,  int RANGEIN_END = 26;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,32,  int RANGEIN_QUOTED = 27;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,33,  int RANGEIN_GOOP = 28;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,34,  int RANGEEX_TO = 29;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,35,  int RANGEEX_END = 30;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,36,  int RANGEEX_QUOTED = 31;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,37,  int RANGEEX_GOOP = 32;
src/java/org/apache/lucene/queryParser/QueryParserConstants.java,51,"    ""<token of kind 6>"","
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,48,"         return jjStopAtPos(0, 12);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,49,      case 41:
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,52,"         return jjStartNfaWithStates_3(0, 15, 36);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,54,"         return jjStopAtPos(0, 10);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,55,      case 45:
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,58,"         return jjStopAtPos(0, 14);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,60,"         return jjStopAtPos(0, 22);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,62,"         return jjStopAtPos(0, 16);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,64,"         return jjStopAtPos(0, 23);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,128,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,129,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,135,                     if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,136,                        kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,141,                     if (kind > 6)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,142,                        kind = 6;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,148,                     if (kind > 9)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,149,                        kind = 9;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,153,                     if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,154,                        kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,159,                     if (kind > 20)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,160,                        kind = 20;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,166,                  if (curChar == 38 && kind > 7)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,167,                     kind = 7;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,174,                  if (curChar == 33 && kind > 9)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,175,                     kind = 9;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,178,               case 16:
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,187,                  if (curChar == 34 && kind > 17)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,188,                     kind = 17;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,193,                  if (kind > 19)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,194,                     kind = 19;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,204,                  if (kind > 19)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,205,                     kind = 19;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,209,                  if (curChar == 42 && kind > 20)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,210,                     kind = 20;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,215,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,216,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,220,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,221,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,227,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,228,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,234,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,235,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,239,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,240,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,264,                     if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,265,                        kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,274,                     if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,275,                        kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,282,                     if (kind > 19)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,283,                        kind = 19;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,288,                     if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,289,                        kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,302,                  if (curChar == 68 && kind > 7)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,303,                     kind = 7;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,314,                  if (curChar == 82 && kind > 8)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,315,                     kind = 8;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,322,                  if (curChar == 124 && kind > 8)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,323,                     kind = 8;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,330,                  if (curChar == 84 && kind > 9)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,331,                     kind = 9;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,342,"                  jjAddStates(0, 2);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,344,               case 17:
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,346,                     jjstateSet[jjnewStateCnt++] = 16;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,351,                  if (kind > 19)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,352,                     kind = 19;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,358,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,359,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,365,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,366,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,374,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,375,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,381,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,382,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,388,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,389,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,397,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,398,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,436,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,437,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,443,                     if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,444,                        kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,449,                     if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,450,                        kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,456,"                     jjAddStates(0, 2);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,461,                  if (kind > 21)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,462,                     kind = 21;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,468,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,469,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,476,                  if (kind > 18)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,477,                     kind = 18;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,507,         if ((active0 & 0x20000000L) != 0L)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,509,            jjmatchedKind = 32;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,534,         return jjMoveStringLiteralDfa1_1(0x20000000L);
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,536,"         return jjStopAtPos(0, 30);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,551,         if ((active0 & 0x20000000L) != 0L)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,552,"            return jjStartNfaWithStates_1(1, 29, 6);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,581,                     if (kind > 32)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,582,                        kind = 32;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,587,                     if (kind > 6)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,588,                        kind = 6;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,606,                  if (curChar == 34 && kind > 31)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,607,                     kind = 31;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,612,                  if (kind > 32)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,613,                     kind = 32;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,631,                  if (kind > 32)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,632,                     kind = 32;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,661,                  if (kind > 32)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,662,                     kind = 32;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,712,                  if (kind > 24)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,713,                     kind = 24;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,723,                  if (kind > 24)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,724,                     kind = 24;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,775,         if ((active0 & 0x2000000L) != 0L)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,777,            jjmatchedKind = 28;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,802,         return jjMoveStringLiteralDfa1_2(0x2000000L);
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,804,"         return jjStopAtPos(0, 26);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,819,         if ((active0 & 0x2000000L) != 0L)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,820,"            return jjStartNfaWithStates_2(1, 25, 6);"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,849,                     if (kind > 28)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,850,                        kind = 28;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,855,                     if (kind > 6)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,856,                        kind = 6;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,874,                  if (curChar == 34 && kind > 27)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,875,                     kind = 27;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,880,                  if (kind > 28)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,881,                     kind = 28;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,899,                  if (kind > 28)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,900,                     kind = 28;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,929,                  if (kind > 28)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,930,                     kind = 28;
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,955,"   15, 17, 18, 29, 32, 23, 33, 30, 20, 21, 32, 23, 33, 31, 34, 27,"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,971,""""", null, null, null, null, null, null, null, null, null, ""\53"", ""\55"", ""\50"","
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,972,"""\51"", ""\72"", ""\52"", ""\136"", null, null, null, null, null, ""\133"", ""\173"", null,"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,973,"""\124\117"", ""\135"", null, null, ""\124\117"", ""\175"", null, null, };"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,981,"   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 2, 1, 3,"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,982,"   -1, 3, -1, -1, -1, 3, -1, -1,"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,985,"   0x1ffffff81L,"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,988,"   0x40L,"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,994,public QueryParserTokenManager(CharStream stream)
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,995,{
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,998,"public QueryParserTokenManager(CharStream stream, int lexState)"
src/java/org/apache/lucene/queryParser/QueryParserTokenManager.java,999,{
src/java/org/apache/lucene/index/MultiReader.java,70,    this.subReaders = subReaders;
src/java/org/apache/lucene/store/FSDirectory.java,430,
src/java/org/apache/lucene/store/FSDirectory.java,513,    if (--refCount <= 0) {
src/java/org/apache/lucene/store/RAMDirectory.java,242,
src/java/org/apache/lucene/store/RAMDirectory.java,243,  /**
src/java/org/apache/lucene/store/RAMDirectory.java,244,   * @throws AlreadyClosedException if this IndexReader is closed
src/java/org/apache/lucene/store/RAMDirectory.java,245,   */
src/java/org/apache/lucene/store/RAMDirectory.java,246,  protected final void ensureOpen() throws AlreadyClosedException {
src/java/org/apache/lucene/store/RAMDirectory.java,247,    if (fileMap == null) {
src/java/org/apache/lucene/store/RAMDirectory.java,248,"      throw new AlreadyClosedException(""this RAMDirectory is closed"");"
src/java/org/apache/lucene/store/RAMDirectory.java,249,    }
src/java/org/apache/lucene/store/RAMDirectory.java,250,  }
src/test/org/apache/lucene/index/TestDoc.java,25,import org.apache.lucene.analysis.Analyzer;
src/test/org/apache/lucene/index/TestDoc.java,29,import org.apache.lucene.search.Similarity;
src/test/org/apache/lucene/index/TestDoc.java,118,      directory.close();
src/test/org/apache/lucene/index/TestDoc.java,146,      directory.close();
src/java/org/apache/lucene/index/IndexWriter.java,1621,    boolean doClose;
src/java/org/apache/lucene/index/IndexWriter.java,1626,    if (hitOOM)
src/java/org/apache/lucene/index/IndexWriter.java,1627,      abort();
src/java/org/apache/lucene/index/IndexWriter.java,1628,
src/java/org/apache/lucene/index/IndexWriter.java,1629,    synchronized(this) {
src/java/org/apache/lucene/index/IndexWriter.java,1630,      // Ensure that only one thread actually gets to do the closing:
src/java/org/apache/lucene/index/IndexWriter.java,1631,      if (!closing) {
src/java/org/apache/lucene/index/IndexWriter.java,1632,        doClose = true;
src/java/org/apache/lucene/index/IndexWriter.java,1633,        closing = true;
src/java/org/apache/lucene/index/IndexWriter.java,1634,      } else
src/java/org/apache/lucene/index/IndexWriter.java,1635,        doClose = false;
src/java/org/apache/lucene/index/IndexWriter.java,1637,    if (doClose)
src/java/org/apache/lucene/index/IndexWriter.java,1639,    else
src/java/org/apache/lucene/index/IndexWriter.java,1640,      // Another thread beat us to it (is actually doing the
src/java/org/apache/lucene/index/IndexWriter.java,1641,"      // close), so we will block until that other thread"
src/java/org/apache/lucene/index/IndexWriter.java,1642,      // has finished closing
src/java/org/apache/lucene/index/IndexWriter.java,1643,      waitForClose();
src/java/org/apache/lucene/index/IndexWriter.java,1646,  synchronized private void waitForClose() {
src/java/org/apache/lucene/index/IndexWriter.java,1647,    while(!closed && closing) {
src/java/org/apache/lucene/index/IndexWriter.java,1648,      try {
src/java/org/apache/lucene/index/IndexWriter.java,1649,        wait();
src/java/org/apache/lucene/index/IndexWriter.java,1650,      } catch (InterruptedException ie) {
src/java/org/apache/lucene/index/IndexWriter.java,1651,      }
src/java/org/apache/lucene/index/IndexWriter.java,1679,
src/java/org/apache/lucene/index/IndexWriter.java,1705,        if (!closed) {
src/java/org/apache/lucene/index/IndexWriter.java,1706,          closing = false;
src/java/org/apache/lucene/index/IndexWriter.java,1707,          if (infoStream != null)
src/java/org/apache/lucene/index/IndexWriter.java,1708,"            message(""hit exception while closing"");"
src/java/org/apache/lucene/index/IndexWriter.java,1709,        }
src/java/org/apache/lucene/index/IndexWriter.java,2617,"      throw new IllegalStateException(""abort() can only be called when IndexWriter was opened with autoCommit=false"");"
src/java/org/apache/lucene/index/IndexWriter.java,2619,    boolean doClose;
src/java/org/apache/lucene/index/IndexWriter.java,2620,    synchronized(this) {
src/java/org/apache/lucene/index/IndexWriter.java,2621,
src/java/org/apache/lucene/index/IndexWriter.java,2622,      if (pendingCommit != null) {
src/java/org/apache/lucene/index/IndexWriter.java,2623,        pendingCommit.rollbackCommit(directory);
src/java/org/apache/lucene/index/IndexWriter.java,2624,        deleter.decRef(pendingCommit);
src/java/org/apache/lucene/index/IndexWriter.java,2625,        pendingCommit = null;
src/java/org/apache/lucene/index/IndexWriter.java,2626,        notifyAll();
src/java/org/apache/lucene/index/IndexWriter.java,2627,      }
src/java/org/apache/lucene/index/IndexWriter.java,2629,      // Ensure that only one thread actually gets to do the closing:
src/java/org/apache/lucene/index/IndexWriter.java,2630,      if (!closing) {
src/java/org/apache/lucene/index/IndexWriter.java,2631,        doClose = true;
src/java/org/apache/lucene/index/IndexWriter.java,2632,        closing = true;
src/java/org/apache/lucene/index/IndexWriter.java,2633,      } else
src/java/org/apache/lucene/index/IndexWriter.java,2634,        doClose = false;
src/java/org/apache/lucene/index/IndexWriter.java,2635,    }
src/java/org/apache/lucene/index/IndexWriter.java,2637,    if (doClose) {
src/java/org/apache/lucene/index/IndexWriter.java,2665,      closeInternal(false);
src/java/org/apache/lucene/index/IndexWriter.java,2666,    } else
src/java/org/apache/lucene/index/IndexWriter.java,2667,      waitForClose();
src/java/org/apache/lucene/index/IndexWriter.java,3564,"    // If merge was explicitly aborted, or, if abort() or"
src/java/org/apache/lucene/index/IndexWriter.java,2336,        while(optimizeMergesPending()) {
src/java/org/apache/lucene/index/IndexWriter.java,2337,          doWait();
src/java/org/apache/lucene/index/IndexWriter.java,2338,
src/java/org/apache/lucene/index/FieldsReader.java,61,  private ThreadLocal fieldsStreamTL = new ThreadLocal();
src/java/org/apache/lucene/index/FieldsReader.java,158,      IndexInput localFieldsStream = (IndexInput) fieldsStreamTL.get();
src/java/org/apache/lucene/index/FieldsReader.java,159,      if (localFieldsStream != null) {
src/java/org/apache/lucene/index/FieldsReader.java,160,        localFieldsStream.close();
src/java/org/apache/lucene/index/FieldsReader.java,161,        fieldsStreamTL.set(null);
src/java/org/apache/lucene/index/FieldsReader.java,162,      }
src/java/org/apache/lucene/index/SegmentReader.java,53,  ThreadLocal termVectorsLocal = new ThreadLocal();
src/java/org/apache/lucene/index/SegmentReader.java,619,
src/java/org/apache/lucene/index/TermInfosReader.java,36,  private ThreadLocal threadResources = new ThreadLocal();
src/java/org/apache/lucene/index/TermInfosReader.java,146,    threadResources.set(null);
src/java/org/apache/lucene/index/IndexWriter.java,1678,"    // If any methods have hit OutOfMemoryError, then abort"
src/java/org/apache/lucene/index/IndexWriter.java,1679,"    // on close, in case the internal state of IndexWriter"
src/java/org/apache/lucene/index/IndexWriter.java,1680,    // or DocumentsWriter is corrupt
src/java/org/apache/lucene/index/IndexWriter.java,1681,    if (hitOOM) {
src/java/org/apache/lucene/index/IndexWriter.java,1682,      rollback();
src/java/org/apache/lucene/index/IndexWriter.java,1683,      return;
src/java/org/apache/lucene/index/IndexWriter.java,1684,    }
src/java/org/apache/lucene/index/IndexWriter.java,1685,
src/java/org/apache/lucene/index/IndexWriter.java,1687,    if (shouldClose())
src/java/org/apache/lucene/index/IndexWriter.java,1688,      closeInternal(waitForMerges);
src/java/org/apache/lucene/index/DirectoryIndexReader.java,99,"          reader = SegmentReader.get(readOnly, infos, infos.info(0), closeDirectory);"
src/java/org/apache/lucene/index/DirectoryIndexReader.java,101,"          reader = new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory);"
src/java/org/apache/lucene/index/DirectoryIndexReader.java,103,"          reader = new MultiSegmentReader(directory, infos, closeDirectory, false);"
src/java/org/apache/lucene/index/DirectoryIndexReader.java,110,    if (commit == null)
src/java/org/apache/lucene/index/DirectoryIndexReader.java,111,      return (DirectoryIndexReader) finder.run();
src/java/org/apache/lucene/index/DirectoryIndexReader.java,112,    else {
src/java/org/apache/lucene/index/DirectoryIndexReader.java,113,      if (directory != commit.getDirectory())
src/java/org/apache/lucene/index/DirectoryIndexReader.java,114,"        throw new IOException(""the specified commit does not match the specified Directory"");"
src/java/org/apache/lucene/index/DirectoryIndexReader.java,115,      // This can & will directly throw IOException if the
src/java/org/apache/lucene/index/DirectoryIndexReader.java,116,      // specified commit point has been deleted:
src/java/org/apache/lucene/index/DirectoryIndexReader.java,117,      return (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());
contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java,27,import org.apache.lucene.benchmark.byTask.Benchmark;
contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic.java,715,    final String[] files = benchmark.getRunData().getDirectory().list();
src/java/org/apache/lucene/index/DirectoryIndexReader.java,483,    final String[] files = dir.list();
src/java/org/apache/lucene/index/DirectoryIndexReader.java,484,    if (files == null)
src/java/org/apache/lucene/index/DirectoryIndexReader.java,485,"      throw new IOException(""cannot read directory "" + dir + "": list() returned null"");"
src/java/org/apache/lucene/index/IndexFileDeleter.java,149,    String[] files = directory.list();
src/java/org/apache/lucene/index/IndexFileDeleter.java,150,    if (files == null)
src/java/org/apache/lucene/index/IndexFileDeleter.java,151,"      throw new IOException(""cannot read directory "" + directory + "": list() returned null"");"
src/java/org/apache/lucene/index/IndexFileDeleter.java,309,    String[] files = directory.list();
src/java/org/apache/lucene/index/IndexFileDeleter.java,310,    if (files == null)
src/java/org/apache/lucene/index/IndexFileDeleter.java,311,"      throw new IOException(""cannot read directory "" + directory + "": list() returned null"");"
src/java/org/apache/lucene/index/SegmentInfo.java,623,      String[] allFiles = dir.list();
src/java/org/apache/lucene/index/SegmentInfo.java,624,      if (allFiles == null)
src/java/org/apache/lucene/index/SegmentInfo.java,625,"        throw new IOException(""cannot read directory "" + dir + "": list() returned null"");"
src/java/org/apache/lucene/index/SegmentInfo.java,628,        if (fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {
src/java/org/apache/lucene/index/SegmentInfos.java,132,    String[] files = directory.list();
src/java/org/apache/lucene/index/SegmentInfos.java,133,    return getCurrentSegmentGeneration(files);
src/java/org/apache/lucene/index/SegmentInfos.java,561,            files = directory.list();
src/java/org/apache/lucene/index/SegmentInfos.java,563,            files = fileDirectory.list();
src/java/org/apache/lucene/store/Directory.java,46,"  /** Returns an array of strings, one for each file in the"
src/java/org/apache/lucene/store/Directory.java,47,   * directory.  This method may return null (for example for
src/java/org/apache/lucene/store/Directory.java,48,   * {@link FSDirectory} if the underlying directory doesn't
src/java/org/apache/lucene/store/Directory.java,49,   * exist in the filesystem or there are permissions
src/java/org/apache/lucene/store/Directory.java,50,   * problems).*/
src/java/org/apache/lucene/store/Directory.java,182,      final String[] files = src.list();
src/java/org/apache/lucene/store/Directory.java,183,
src/java/org/apache/lucene/store/Directory.java,184,      if (files == null)
src/java/org/apache/lucene/store/Directory.java,185,"        throw new IOException(""cannot read directory "" + src + "": list() returned null"");"
src/java/org/apache/lucene/store/Directory.java,186,
src/java/org/apache/lucene/store/Directory.java,187,      byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];
src/java/org/apache/lucene/store/Directory.java,188,      for (int i = 0; i < files.length; i++) {
src/java/org/apache/lucene/store/Directory.java,189,        IndexOutput os = null;
src/java/org/apache/lucene/store/Directory.java,190,        IndexInput is = null;
src/java/org/apache/lucene/store/Directory.java,192,          // create file in dest directory
src/java/org/apache/lucene/store/Directory.java,193,          os = dest.createOutput(files[i]);
src/java/org/apache/lucene/store/Directory.java,194,          // read current file
src/java/org/apache/lucene/store/Directory.java,195,          is = src.openInput(files[i]);
src/java/org/apache/lucene/store/Directory.java,196,          // and copy to dest directory
src/java/org/apache/lucene/store/Directory.java,197,          long len = is.length();
src/java/org/apache/lucene/store/Directory.java,198,          long readCount = 0;
src/java/org/apache/lucene/store/Directory.java,199,          while (readCount < len) {
src/java/org/apache/lucene/store/Directory.java,200,            int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;
src/java/org/apache/lucene/store/Directory.java,201,"            is.readBytes(buf, 0, toRead);"
src/java/org/apache/lucene/store/Directory.java,202,"            os.writeBytes(buf, toRead);"
src/java/org/apache/lucene/store/Directory.java,203,            readCount += toRead;
src/java/org/apache/lucene/store/Directory.java,204,          }
src/java/org/apache/lucene/store/Directory.java,206,          // graceful cleanup
src/java/org/apache/lucene/store/Directory.java,207,          try {
src/java/org/apache/lucene/store/Directory.java,208,            if (os != null)
src/java/org/apache/lucene/store/Directory.java,209,              os.close();
src/java/org/apache/lucene/store/Directory.java,210,          } finally {
src/java/org/apache/lucene/store/Directory.java,211,            if (is != null)
src/java/org/apache/lucene/store/Directory.java,212,              is.close();
src/java/org/apache/lucene/store/Directory.java,213,          }
src/java/org/apache/lucene/store/Directory.java,216,      if(closeDirSrc)
src/java/org/apache/lucene/store/Directory.java,217,        src.close();
src/java/org/apache/lucene/store/FSDirectory.java,268,      if (directory.exists() && !directory.isDirectory())
src/java/org/apache/lucene/store/FSDirectory.java,269,"        throw new IOException(directory + "" not a directory"");"
src/java/org/apache/lucene/store/FSDirectory.java,270,
src/java/org/apache/lucene/store/FSDirectory.java,359,"  /** Returns an array of strings, one for each Lucene index file in the directory. */"
src/java/org/apache/lucene/store/RAMDirectory.java,98,"  /** Returns an array of strings, one for each file in the directory. */"
src/test/org/apache/lucene/index/TestBackwardsCompatibility.java,450,        String[] actual = dir.list();
src/test/org/apache/lucene/index/TestDeletionPolicy.java,336,          int preCount = dir.list().length;
src/test/org/apache/lucene/index/TestDeletionPolicy.java,339,          int postCount = dir.list().length;
src/test/org/apache/lucene/index/TestIndexFileDeleter.java,68,    String[] files = dir.list();
src/test/org/apache/lucene/index/TestIndexFileDeleter.java,145,    String[] filesPre = dir.list();
src/test/org/apache/lucene/index/TestIndexFileDeleter.java,152,    String[] files2 = dir.list();
src/test/org/apache/lucene/index/TestIndexReader.java,965,          String[] startFiles = dir.list();
src/test/org/apache/lucene/index/TestIndexReader.java,969,          String[] endFiles = dir.list();
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,1054,      dir1.list();
src/test/org/apache/lucene/index/TestIndexWriter.java,173,        String[] files = dirs[i].list();
src/test/org/apache/lucene/index/TestIndexWriter.java,210,      // String[] files = startDir.list();
src/test/org/apache/lucene/index/TestIndexWriter.java,214,      String[] files = startDir.list();
src/test/org/apache/lucene/index/TestIndexWriter.java,542,      String[] startFiles = dir.list();
src/test/org/apache/lucene/index/TestIndexWriter.java,546,      String[] endFiles = dir.list();
src/test/org/apache/lucene/index/TestIndexWriter.java,711,      String[] files = dir.list();
src/test/org/apache/lucene/index/TestIndexWriter.java,991,        String[] files = dir.list();
src/test/org/apache/lucene/index/TestIndexWriter.java,1279,      int lastNumFile = dir.list().length;
src/test/org/apache/lucene/index/TestIndexWriter.java,1284,        int numFile = dir.list().length;
src/test/org/apache/lucene/index/TestIndexWriterDelete.java,671,      String[] startFiles = dir.list();
src/test/org/apache/lucene/index/TestIndexWriterDelete.java,675,      String[] endFiles = dir.list();
src/test/org/apache/lucene/index/TestIndexWriterMergePolicy.java,242,    String[] files = writer.getDirectory().list();
src/test/org/apache/lucene/index/TestOmitTf.java,200,    final String[] files = dir.list();
contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java,34,import org.apache.lucene.document.Field;
contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java,853,          Info info = getInfo(term.field());
contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java,854,          current = info == null ? null : info.getPositions(term.text());
contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java,855,          hasNext = (current != null);
contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java,856,          cursor = 0;
contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java,870,          int freq = current != null ? numPositions(current) : 0;
contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java,285,
src/java/org/apache/lucene/index/IndexReader.java,799,"   * the term in that document is also provided, for use in search scoring."
src/java/org/apache/lucene/index/MultiSegmentReader.java,22,import java.util.Collections;
src/java/org/apache/lucene/index/MultiSegmentReader.java,534,
src/java/org/apache/lucene/index/MultiSegmentReader.java,604,      if (term == null)
src/java/org/apache/lucene/index/MultiSegmentReader.java,605,        return null;
src/java/org/apache/lucene/index/MultiSegmentReader.java,615,      return reader.termDocs();
src/java/org/apache/lucene/index/ParallelReader.java,526,    public ParallelTermDocs(Term term) throws IOException { seek(term); }
src/java/org/apache/lucene/index/SegmentTermDocs.java,49,    this.deletedDocs = parent.deletedDocs;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,21,import org.apache.lucene.search.Explanation;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,22,import org.apache.lucene.search.Query;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,23,import org.apache.lucene.search.Scorer;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,24,import org.apache.lucene.search.Searcher;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,25,import org.apache.lucene.search.Similarity;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,26,import org.apache.lucene.search.Weight;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,41,
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,42,    final IndexReader reader;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,43,    int id;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,44,    final int maxId;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,47,"    MatchAllScorer(IndexReader reader, Similarity similarity, Weight w) {"
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,49,      this.reader = reader;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,50,      id = -1;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,51,      maxId = reader.maxDoc() - 1;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,60,      return id;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,63,    public boolean next() {
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,64,      while (id < maxId) {
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,65,        id++;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,66,        if (!reader.isDeleted(id)) {
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,67,          return true;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,68,        }
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,69,      }
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,70,      return false;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,77,    public boolean skipTo(int target) {
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,78,      id = target - 1;
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,79,      return next();
src/java/org/apache/lucene/search/MatchAllDocsQuery.java,115,    public Scorer scorer(IndexReader reader) {
src/test/org/apache/lucene/index/TestParallelReader.java,126,    Directory dir2 = getDir1();
src/test/org/apache/lucene/index/TestParallelReader.java,150,    Directory dir2 = getDir1();
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,111,    private final IndexReader reader;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,113,    private final int maxDoc;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,115,    private int doc=-1;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,123,      this.reader = reader;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,124,      this.maxDoc = reader.maxDoc();
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,131,      for(;;) {
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,132,        ++doc;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,133,        if (doc>=maxDoc) {
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,134,          return false;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,135,        }
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,136,        if (reader.isDeleted(doc)) {
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,137,          continue;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,138,        }
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,139,        return true;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,140,      }
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,146,      return doc;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,151,      return qWeight * vals.floatVal(doc);
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,156,      doc=target-1;
src/java/org/apache/lucene/search/function/ValueSourceQuery.java,157,      return next();
contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance.java,103,"        return 1.0f - ((float) p[n] / Math.min(other.length(), sa.length));"
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,28,    assertTrue(d == 1.0f);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,30,    assertTrue(d > 0.66 && d <0.67);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,32,    assertTrue(d > 0.199 && d < 0.201);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,34,    assertTrue(d > 0.749 && d < 0.751);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,36,    assertTrue(d > 0.599 && d < 0.601);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,38,    assertTrue(d > 0.199 && d < 0.201);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,40,    assertTrue(d == 0f);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,43,    assertTrue(d1 < d2);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestLevenshteinDistance.java,46,    assertTrue(d1 > d2);
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java,132,"    assertEquals(1, similar.length);"
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java,140,"    assertEquals(1, similar.length);"
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java,142,
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java,144,"    assertEquals(0, similar.length);"
contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker.java,154,"    assertEquals(1, similar.length);"
src/java/org/apache/lucene/search/spans/TermSpans.java,62,    // are we already at the correct position?
src/java/org/apache/lucene/search/spans/TermSpans.java,63,    if (doc >= target) {
src/java/org/apache/lucene/search/spans/TermSpans.java,64,      return true;
src/java/org/apache/lucene/search/spans/TermSpans.java,65,    }
src/java/org/apache/lucene/search/spans/TermSpans.java,66,
src/test/org/apache/lucene/search/spans/TestBasics.java,20,import org.apache.lucene.util.LuceneTestCase;
src/test/org/apache/lucene/search/spans/TestBasics.java,21,
src/test/org/apache/lucene/search/spans/TestBasics.java,24,import org.apache.lucene.util.English;
src/test/org/apache/lucene/search/spans/TestBasics.java,31,
src/test/org/apache/lucene/search/spans/TestBasics.java,32,import org.apache.lucene.search.*;
src/java/org/apache/lucene/index/CheckIndex.java,614,  public static void main(String[] args) throws IOException {
src/java/org/apache/lucene/index/CheckIndex.java,698,          try {
src/java/org/apache/lucene/index/CheckIndex.java,699,            Thread.sleep(1000);
src/java/org/apache/lucene/index/CheckIndex.java,700,          } catch (InterruptedException ie) {
src/java/org/apache/lucene/index/CheckIndex.java,701,            Thread.currentThread().interrupt();
src/java/org/apache/lucene/index/CheckIndex.java,702,            s--;
src/java/org/apache/lucene/index/CheckIndex.java,703,            continue;
src/java/org/apache/lucene/index/CheckIndex.java,704,          }
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,132,      } catch (InterruptedException e) {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,188,      synchronized(this) {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,189,        while (mergeThreadCount() >= maxThreadCount) {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,190,          if (verbose())
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,191,"            message(""    too many merge threads running; stalling..."");"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,192,          try {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,193,            wait();
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,194,          } catch (InterruptedException ie) {
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,195,            Thread.currentThread().interrupt();
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,197,        }
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,199,        if (verbose())
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,200,"          message(""  consider merge "" + merge.segString(dir));"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,202,        assert mergeThreadCount() < maxThreadCount;
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,204,        // OK to spawn a new merge thread to handle this
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,205,        // merge:
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,206,"        final MergeThread merger = getMergeThread(writer, merge);"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,207,        mergeThreads.add(merger);
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,208,        if (verbose())
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,209,"          message(""    launch new thread ["" + merger.getName() + ""]"");"
src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java,210,        merger.start();
src/java/org/apache/lucene/index/DocumentsWriter.java,512,      } catch (InterruptedException e) {
src/java/org/apache/lucene/index/DocumentsWriter.java,840,      } catch (InterruptedException e) {
src/java/org/apache/lucene/index/DocumentsWriter.java,1086,      } catch (InterruptedException e) {
src/java/org/apache/lucene/index/IndexWriter.java,4150,          try {
src/java/org/apache/lucene/index/IndexWriter.java,4151,
src/java/org/apache/lucene/index/IndexWriter.java,4152,            mergeFinish(merge);
src/java/org/apache/lucene/index/IndexWriter.java,4153,
src/java/org/apache/lucene/index/IndexWriter.java,4154,            if (!success) {
src/java/org/apache/lucene/index/IndexWriter.java,4155,              if (infoStream != null)
src/java/org/apache/lucene/index/IndexWriter.java,4156,"                message(""hit exception during merge"");"
src/java/org/apache/lucene/index/IndexWriter.java,4157,              if (merge.info != null && !segmentInfos.contains(merge.info))
src/java/org/apache/lucene/index/IndexWriter.java,4158,                deleter.refresh(merge.info.name);
src/java/org/apache/lucene/index/IndexWriter.java,4159,            }
src/java/org/apache/lucene/index/IndexWriter.java,4161,"            // This merge (and, generally, any change to the"
src/java/org/apache/lucene/index/IndexWriter.java,4162,"            // segments) may now enable new merges, so we call"
src/java/org/apache/lucene/index/IndexWriter.java,4163,            // merge policy & update pending merges.
src/java/org/apache/lucene/index/IndexWriter.java,4164,            if (success && !merge.isAborted() && !closed && !closing)
src/java/org/apache/lucene/index/IndexWriter.java,4165,"              updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);"
src/java/org/apache/lucene/index/IndexWriter.java,4166,          } finally {
src/java/org/apache/lucene/index/IndexWriter.java,4167,            runningMerges.remove(merge);
src/java/org/apache/lucene/index/IndexWriter.java,4237,        runningMerges.remove(merge);
src/java/org/apache/lucene/index/IndexWriter.java,4703,              continue;
src/java/org/apache/lucene/index/IndexWriter.java,4742,      // NOTE: the callers of this method should in theory
src/java/org/apache/lucene/index/IndexWriter.java,4743,"      // be able to do simply wait(), but, as a defense"
src/java/org/apache/lucene/index/IndexWriter.java,4744,      // against thread timing hazards where notifyAll()
src/java/org/apache/lucene/index/IndexWriter.java,4745,"      // falls to be called, we wait for at most 1 second"
src/java/org/apache/lucene/index/IndexWriter.java,4746,      // and then return so caller can check if wait
src/java/org/apache/lucene/index/IndexWriter.java,4747,      // conditions are satisified:
src/java/org/apache/lucene/index/SegmentInfos.java,616,              } catch (InterruptedException e) {
src/java/org/apache/lucene/index/SegmentInfos.java,617,                // will retry
src/java/org/apache/lucene/search/FilterManager.java,198,        } catch (InterruptedException e) {
src/java/org/apache/lucene/search/FilterManager.java,199,          // just keep going
src/java/org/apache/lucene/search/ParallelMultiSearcher.java,80,        ; // TODO: what should we do with this???
src/java/org/apache/lucene/search/ParallelMultiSearcher.java,133,        ; // TODO: what should we do with this???
src/java/org/apache/lucene/search/TimeLimitedCollector.java,75,      boolean interrupted = false;
src/java/org/apache/lucene/search/TimeLimitedCollector.java,76,      try {
src/java/org/apache/lucene/search/TimeLimitedCollector.java,77,        while( true ) {
src/java/org/apache/lucene/search/TimeLimitedCollector.java,78,          // TODO: Use System.nanoTime() when Lucene moves to Java SE 5.
src/java/org/apache/lucene/search/TimeLimitedCollector.java,79,          time += resolution;
src/java/org/apache/lucene/search/TimeLimitedCollector.java,80,          try {
src/java/org/apache/lucene/search/TimeLimitedCollector.java,81,            Thread.sleep( resolution );
src/java/org/apache/lucene/search/TimeLimitedCollector.java,82,          } catch( final InterruptedException e ) {
src/java/org/apache/lucene/search/TimeLimitedCollector.java,83,            interrupted = true;
src/java/org/apache/lucene/search/TimeLimitedCollector.java,84,          }
src/java/org/apache/lucene/search/TimeLimitedCollector.java,85,        }
src/java/org/apache/lucene/search/TimeLimitedCollector.java,86,      }
src/java/org/apache/lucene/search/TimeLimitedCollector.java,87,      finally {
src/java/org/apache/lucene/search/TimeLimitedCollector.java,88,        if( interrupted ) {
src/java/org/apache/lucene/store/RAMDirectory.java,153,      } catch (InterruptedException e) {}
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,52,  public void testSnapshotDeletionPolicy() throws IOException {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,66,  public void testReuseAcrossWriters() throws IOException {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,101,  private void runTest(Directory dir) throws IOException {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,139,      try {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,140,        Thread.sleep(20);
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,141,      } catch (InterruptedException ie) {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,142,        Thread.currentThread().interrupt();
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,143,      }
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,148,    try {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,149,      t.join();
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,150,    } catch (InterruptedException ie) {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,151,      Thread.currentThread().interrupt();
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,152,    }
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,172,"  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws IOException {"
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,184,"  private void copyFiles(Directory dir, IndexCommit cp) throws IOException {"
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,205,"  private void readFile(Directory dir, String name) throws IOException {"
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,224,      try {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,225,        Thread.sleep(1);
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,226,      } catch (InterruptedException ie) {
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,227,        Thread.currentThread().interrupt();
src/test/org/apache/lucene/TestSnapshotDeletionPolicy.java,228,      }
src/test/org/apache/lucene/index/TestIndexModifier.java,26,import org.apache.lucene.document.Field.Index;
src/test/org/apache/lucene/index/TestIndexModifier.java,27,import org.apache.lucene.document.Field.Store;
src/test/org/apache/lucene/index/TestIndexModifier.java,135,  public void testIndexWithThreads() throws IOException {
src/test/org/apache/lucene/index/TestIndexModifier.java,141,  private void testIndexInternal(int maxWait) throws IOException {
src/test/org/apache/lucene/index/TestIndexModifier.java,158,      try {
src/test/org/apache/lucene/index/TestIndexModifier.java,159,        Thread.sleep(100);
src/test/org/apache/lucene/index/TestIndexModifier.java,160,      } catch (InterruptedException e) {
src/test/org/apache/lucene/index/TestIndexModifier.java,161,        throw new RuntimeException(e);
src/test/org/apache/lucene/index/TestIndexModifier.java,162,      }
src/test/org/apache/lucene/index/TestIndexModifier.java,257,            rand = random.nextInt(maxWait);
src/test/org/apache/lucene/index/TestIndexModifier.java,258,"            //System.out.println(""waiting "" + rand + ""ms"");"
src/test/org/apache/lucene/index/TestIndexModifier.java,260,          } catch (InterruptedException e) {
src/test/org/apache/lucene/index/TestIndexModifier.java,261,            throw new RuntimeException(e);
src/test/org/apache/lucene/index/TestIndexReader.java,753,    public void testLastModified() throws IOException {
src/test/org/apache/lucene/index/TestIndexReader.java,779,          while(true) {
src/test/org/apache/lucene/index/TestIndexReader.java,780,            try {
src/test/org/apache/lucene/index/TestIndexReader.java,781,              Thread.sleep(1000);
src/test/org/apache/lucene/index/TestIndexReader.java,782,              break;
src/test/org/apache/lucene/index/TestIndexReader.java,783,            } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexReader.java,784,              Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexReader.java,785,            }
src/test/org/apache/lucene/index/TestIndexReader.java,786,          }
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,773,              try {
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,774,                synchronized(this) {
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,775,                  wait(1000);
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,776,                }
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,777,              } catch (InterruptedException e) {}
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,792,              try {
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,793,                synchronized(this) {
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,794,                  wait(100);
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,795,                }
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,796,              } catch (InterruptedException e) {}
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,809,      try {
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,810,        wait(15000);
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,811,      } catch(InterruptedException e) {}
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,822,        try {
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,823,          threads[i].join();
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,824,          if (threads[i].error != null) {
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,825,"            String msg = ""Error occurred in thread "" + threads[i].getName() + "":\n"" + threads[i].error.getMessage();"
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,826,            fail(msg);
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,827,          }
src/test/org/apache/lucene/index/TestIndexReaderReopen.java,828,        } catch (InterruptedException e) {}
src/test/org/apache/lucene/index/TestIndexWriter.java,2013,  public void testDocumentsWriterExceptionThreads() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2073,          while (true)
src/test/org/apache/lucene/index/TestIndexWriter.java,2074,            try {
src/test/org/apache/lucene/index/TestIndexWriter.java,2075,              threads[t].join();
src/test/org/apache/lucene/index/TestIndexWriter.java,2076,              break;
src/test/org/apache/lucene/index/TestIndexWriter.java,2077,            } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2078,              Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,2079,            }
src/test/org/apache/lucene/index/TestIndexWriter.java,2131,  public void testVariableSchema() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2252,        while(true) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2253,          try {
src/test/org/apache/lucene/index/TestIndexWriter.java,2254,            t1.join();
src/test/org/apache/lucene/index/TestIndexWriter.java,2255,            break;
src/test/org/apache/lucene/index/TestIndexWriter.java,2256,          } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2257,            Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,2258,          }
src/test/org/apache/lucene/index/TestIndexWriter.java,2259,        }
src/test/org/apache/lucene/index/TestIndexWriter.java,2340,  public void testCloseWithThreads() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2365,        try {
src/test/org/apache/lucene/index/TestIndexWriter.java,2366,          Thread.sleep(100);
src/test/org/apache/lucene/index/TestIndexWriter.java,2367,        } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2368,          Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,2369,        }
src/test/org/apache/lucene/index/TestIndexWriter.java,2382,        while(true) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2383,          try {
src/test/org/apache/lucene/index/TestIndexWriter.java,2384,            // Without fix for LUCENE-1130: one of the
src/test/org/apache/lucene/index/TestIndexWriter.java,2385,            // threads will hang
src/test/org/apache/lucene/index/TestIndexWriter.java,2386,            threads[i].join();
src/test/org/apache/lucene/index/TestIndexWriter.java,2387,            break;
src/test/org/apache/lucene/index/TestIndexWriter.java,2388,          } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2389,            Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,2390,          }
src/test/org/apache/lucene/index/TestIndexWriter.java,2391,        }
src/test/org/apache/lucene/index/TestIndexWriter.java,2441,  public void testImmediateDiskFullWithThreads() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2465,        while(true) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2466,          try {
src/test/org/apache/lucene/index/TestIndexWriter.java,2467,            // Without fix for LUCENE-1130: one of the
src/test/org/apache/lucene/index/TestIndexWriter.java,2468,            // threads will hang
src/test/org/apache/lucene/index/TestIndexWriter.java,2469,            threads[i].join();
src/test/org/apache/lucene/index/TestIndexWriter.java,2470,            break;
src/test/org/apache/lucene/index/TestIndexWriter.java,2471,          } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2472,            Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,2473,          }
src/test/org/apache/lucene/index/TestIndexWriter.java,2474,        }
src/test/org/apache/lucene/index/TestIndexWriter.java,2475,        if (threads[i].isAlive())
src/test/org/apache/lucene/index/TestIndexWriter.java,2476,"          fail(""thread seems to be hung"");"
src/test/org/apache/lucene/index/TestIndexWriter.java,2477,        else
src/test/org/apache/lucene/index/TestIndexWriter.java,2478,"          assertTrue(""hit unexpected Throwable"", threads[i].error == null);"
src/test/org/apache/lucene/index/TestIndexWriter.java,2541,  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2563,      try {
src/test/org/apache/lucene/index/TestIndexWriter.java,2564,        Thread.sleep(10);
src/test/org/apache/lucene/index/TestIndexWriter.java,2565,      } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2566,        Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,2567,      }
src/test/org/apache/lucene/index/TestIndexWriter.java,2573,        while(true) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2574,          try {
src/test/org/apache/lucene/index/TestIndexWriter.java,2575,            threads[i].join();
src/test/org/apache/lucene/index/TestIndexWriter.java,2576,            break;
src/test/org/apache/lucene/index/TestIndexWriter.java,2577,          } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,2578,            Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,2579,          }
src/test/org/apache/lucene/index/TestIndexWriter.java,2580,        }
src/test/org/apache/lucene/index/TestIndexWriter.java,2581,        if (threads[i].isAlive())
src/test/org/apache/lucene/index/TestIndexWriter.java,2582,"          fail(""thread seems to be hung"");"
src/test/org/apache/lucene/index/TestIndexWriter.java,2583,        else
src/test/org/apache/lucene/index/TestIndexWriter.java,2584,"          assertTrue(""hit unexpected Throwable"", threads[i].error == null);"
src/test/org/apache/lucene/index/TestIndexWriter.java,2625,  public void testIOExceptionDuringAbortWithThreads() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2631,  public void testIOExceptionDuringAbortWithThreadsOnlyOnce() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2666,  public void testIOExceptionDuringCloseDocStoreWithThreads() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2671,  public void testIOExceptionDuringCloseDocStoreWithThreadsOnlyOnce() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2706,  public void testIOExceptionDuringWriteSegmentWithThreads() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,2711,  public void testIOExceptionDuringWriteSegmentWithThreadsOnlyOnce() throws IOException {
src/test/org/apache/lucene/index/TestIndexWriter.java,3831,    void joinThreads() {
src/test/org/apache/lucene/index/TestIndexWriter.java,3833,        try {
src/test/org/apache/lucene/index/TestIndexWriter.java,3834,          threads[i].join();
src/test/org/apache/lucene/index/TestIndexWriter.java,3835,        } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,3836,          Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,3837,        }
src/test/org/apache/lucene/index/TestIndexWriter.java,3998,    try {
src/test/org/apache/lucene/index/TestIndexWriter.java,3999,      Thread.sleep(500);
src/test/org/apache/lucene/index/TestIndexWriter.java,4000,    } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,4001,      Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,4002,    }
src/test/org/apache/lucene/index/TestIndexWriter.java,4023,    try {
src/test/org/apache/lucene/index/TestIndexWriter.java,4024,      Thread.sleep(500);
src/test/org/apache/lucene/index/TestIndexWriter.java,4025,    } catch (InterruptedException ie) {
src/test/org/apache/lucene/index/TestIndexWriter.java,4026,      Thread.currentThread().interrupt();
src/test/org/apache/lucene/index/TestIndexWriter.java,4027,    }
src/test/org/apache/lucene/index/TestPayloads.java,478,    public void testThreadSafety() throws IOException {
src/test/org/apache/lucene/index/TestPayloads.java,508,            try {
src/test/org/apache/lucene/index/TestPayloads.java,509,                ingesters[i].join();
src/test/org/apache/lucene/index/TestPayloads.java,510,            } catch (InterruptedException e) {}
src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java,60,  public void test() {
src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java,86,"  public void testTermPositionVectors(final IndexReader reader, int threadCount) {"
src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java,97,      try {
src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java,107,
src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java,108,      }
src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java,109,
src/test/org/apache/lucene/search/TestMultiThreadTermVectors.java,110,      } catch (InterruptedException ie) {}
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,251,  public void testSearchMultiThreaded() {
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,258,  public void testTimeoutMultiThreaded() {
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,262,  private void doTestMultiThreads(final boolean withTimeout) {
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,283,    boolean interrupted = false;
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,285,      try {
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,286,        threadArray[i].join();
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,287,      } catch (InterruptedException e) {
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,288,        interrupted = true;
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,289,      }
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,290,    }
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,291,    if (interrupted) {
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,292,      Thread.currentThread().interrupt();
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,317,        }
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,318,        catch(InterruptedException x) {
src/test/org/apache/lucene/search/TestTimeLimitedCollector.java,319,"          System.out.println(""caught "" + x);"
src/test/org/apache/lucene/store/TestLockFactory.java,329,    public void testStressLocks() throws IOException {
src/test/org/apache/lucene/store/TestLockFactory.java,337,    public void testStressLocksNativeFSLockFactory() throws IOException {
src/test/org/apache/lucene/store/TestLockFactory.java,341,"    public void _testStressLocks(LockFactory lockFactory, String indexDirName) throws IOException {"
src/test/org/apache/lucene/store/TestLockFactory.java,356,            try {
src/test/org/apache/lucene/store/TestLockFactory.java,357,                Thread.sleep(1000);
src/test/org/apache/lucene/store/TestLockFactory.java,358,            } catch (InterruptedException e) {
src/test/org/apache/lucene/store/TestLockFactory.java,359,            }
src/test/org/apache/lucene/index/TestIndexWriter.java,4353,    t.interrupt();
src/java/org/apache/lucene/search/function/DocValues.java,117,  private float minVal;
src/java/org/apache/lucene/search/function/DocValues.java,118,  private float maxVal;
src/java/org/apache/lucene/search/function/DocValues.java,119,  private float avgVal;
src/java/org/apache/lucene/search/function/DocValues.java,122,  private void compute () {
src/java/org/apache/lucene/search/function/DocValues.java,126,    minVal = Float.MAX_VALUE;
src/java/org/apache/lucene/search/function/DocValues.java,127,    maxVal = 0;
src/java/org/apache/lucene/search/function/DocValues.java,138,"      minVal = Math.min(minVal,val);"
src/java/org/apache/lucene/search/function/DocValues.java,139,"      maxVal = Math.max(maxVal,val);"
src/java/org/apache/lucene/search/function/DocValues.java,141,    avgVal = sum / n;
src/java/org/apache/lucene/search/function/DocValues.java,145,   * Optional op.
src/java/org/apache/lucene/search/function/DocValues.java,146,   * Returns the minimum of all values.
src/java/org/apache/lucene/search/function/DocValues.java,148,  public float getMinValue () {
src/java/org/apache/lucene/search/function/DocValues.java,152,
src/java/org/apache/lucene/search/function/DocValues.java,154,   * Optional op.
src/java/org/apache/lucene/search/function/DocValues.java,155,   * Returns the maximum of all values.
src/java/org/apache/lucene/search/function/DocValues.java,157,  public float getMaxValue () {
src/java/org/apache/lucene/search/function/DocValues.java,161,
src/java/org/apache/lucene/search/function/DocValues.java,163,   * Returns the average of all values.
src/java/org/apache/lucene/search/function/DocValues.java,165,  public float getAverageValue () {
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,40,
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,71,"    private String tokenType = ""word"";"
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,108,        int length = 0;
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,110,        /** the position used to create Token */
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,111,        int start = offset;
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,113,        while (true) {
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,153,                    /** convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN */
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,168,"                    } else if (tokenType == ""double"") {"
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,174,"                        tokenType = ""single"";"
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,180,
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,189,"                    tokenType = ""single"";"
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,209,"                        tokenType = ""double"";"
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,211,"                        if (tokenType == ""single"") {"
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,219,"                            tokenType = ""double"";"
contrib/analyzers/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer.java,242,"        return reusableToken.reinit(buffer, 0, length, start, start+length, tokenType);"
src/java/org/apache/lucene/search/spans/SpanOrQuery.java,218,
src/java/org/apache/lucene/search/spans/SpanOrQuery.java,226,
src/java/org/apache/lucene/search/spans/SpanOrQuery.java,227,          return queue.size() != 0;
src/java/org/apache/lucene/search/BooleanQuery.java,472,        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch();
src/java/org/apache/lucene/search/BooleanQuery.java,479,           + getMinimumNumberShouldMatch();
src/test/org/apache/lucene/search/TestWildcard.java,107,    BooleanQuery expected = new BooleanQuery();
lucene/src/java/org/apache/lucene/index/DocumentsWriter.java,1320,        for(int i=start;i<end;i++)
lucene/src/java/org/apache/lucene/index/DocumentsWriter.java,1329,        for(int i=0;i<size;i++)
lucene/src/java/org/apache/lucene/index/DocumentsWriter.java,1331,  }
lucene/src/java/org/apache/lucene/index/DocumentsWriter.java,1361,    for(int i=start;i<end;i++)
lucene/src/java/org/apache/lucene/index/IndexWriter.java,3627,"      return doFlushInternal(flushDocStores, flushDeletes);"
lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter.java,193,      perDoc.perDocTvf.reset();
lucene/src/java/org/apache/lucene/index/DocumentsWriter.java,827,      final DocWriter perDoc = state.consumer.processDocument();
lucene/src/java/org/apache/lucene/index/DocumentsWriter.java,828,
lucene/src/java/org/apache/lucene/index/TermsHashPerField.java,101,    // Cannot use ArrayUtil.shrink because we require power
lucene/src/java/org/apache/lucene/index/TermsHashPerField.java,102,    // of 2:
lucene/src/java/org/apache/lucene/index/TermsHashPerField.java,103,    int newSize = postingsHash.length;
lucene/src/java/org/apache/lucene/index/TermsHashPerField.java,104,    while(newSize >= 8 && newSize/4 > targetSize) {
lucene/src/java/org/apache/lucene/index/TermsHashPerField.java,105,      newSize /= 2;
lucene/src/java/org/apache/lucene/index/TermsHashPerField.java,106,    }
lucene/src/java/org/apache/lucene/index/TermsHashPerField.java,107,

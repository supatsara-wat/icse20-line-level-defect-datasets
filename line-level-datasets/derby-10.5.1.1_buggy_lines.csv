File,LineNumber,src
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,390,                pos.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,460,                pos.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,476,    /**
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,477,"     * Position scan at ""start"" position for a backward scan."
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,478,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,479,     * Positions the scan to the slot just after the first record to be
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,480,"     * returned from the backward scan.  Returns the start page latched, and"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,481,"     * sets ""current_slot"" to the slot number just right of the first slot"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,482,     * to return.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,483,     * <p>
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,484,     *
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,485,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,486,     **/
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,487,    protected void positionAtStartForBackwardScan(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,488,    BTreeRowPosition    pos)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,489,        throws StandardException
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,490, {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,491,  boolean         exact;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,492,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,493,        // This routine should only be called from first next() call //
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,494,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,495,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,496,            SanityManager.ASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,497,                (this.scan_state == SCAN_INIT) ||
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,498,                (this.scan_state == SCAN_HOLD_INIT));
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,499,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,500,            SanityManager.ASSERT(pos.current_rh          == null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,501,            SanityManager.ASSERT(pos.current_positionKey         == null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,502,        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,503,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,504,        // Loop until you can lock the row previous to the first row to be
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,505,"        // returned by the scan, while holding the page latched, without"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,506,"        // waiting.  If you have to wait, drop the latch, wait for the lock -"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,507,        // which makes it likely if you wait for the lock you will loop just
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,508,"        // once, find the same lock satisfies the search and since you already"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,509,        // have the lock it will be granted.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,510,        while (true)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,511,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,512,"            // Find the starting page and row slot, must start at root and"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,513,"            // search either for leftmost leaf, or search for specific key."
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,514,"            ControlRow root = ControlRow.get(this, BTree.ROOTPAGEID);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,515,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,516,            // include search of tree in page visited stats.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,517,            stat_numpages_visited += root.getLevel() + 1;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,518,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,519,            if (init_startKeyValue == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,520,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,521,"                // No start given, position at last slot + 1 of rightmost leaf"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,522,                pos.current_leaf = (LeafControlRow) root.searchRight(this);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,523,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,524,                pos.current_slot = pos.current_leaf.page.recordCount();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,525,                exact     = false;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,526,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,527,            else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,528,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,529,                /*
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,530,                if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,531,                    SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,532,"                        ""Code not ready yet for positioned backward scans."");"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,533,                        */
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,534,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,535,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,536,                if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,537,                    SanityManager.ASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,538,                        (init_startSearchOperator == ScanController.GE) ||
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,539,                        (init_startSearchOperator == ScanController.GT));
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,540,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,541,                // Search for the starting row.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,542,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,543,                SearchParameters sp = new SearchParameters(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,544,"                    init_startKeyValue,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,545,                    ((init_startSearchOperator == ScanController.GE) ?
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,546,                        SearchParameters.POSITION_RIGHT_OF_PARTIAL_KEY_MATCH :
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,547,"                        SearchParameters.POSITION_LEFT_OF_PARTIAL_KEY_MATCH),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,548,"                    init_template, this, false);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,549,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,550,                pos.current_leaf = (LeafControlRow) root.search(sp);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,551,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,552,                pos.current_slot = sp.resultSlot;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,553,                exact     = sp.resultExact;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,554,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,555,"                // The way that backward scans are used, the caller calls next()"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,556,                // to position on the first row.  If the result of the
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,557,                // search that found the starting page and slot was not
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,558,"                // exact, then the page/slot will refer to the row before"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,559,                // the first qualifying row.  The first call to next()
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,560,                // will therefore move to the first (potentially) qualifying
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,561,"                // row.  However, if the search was exact, then we don't"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,562,                // want to move the position on the first call to next.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,563,"                // In that case, by decrementing the slot, the first call"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,564,                // to next will put us back on the starting row.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,565,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,566,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,567,                if (exact)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,568,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,569,                    // the search has found exactly the start position key
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,570,                    if (init_startSearchOperator == ScanController.GE)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,571,                    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,572,                        // insure backward scan returns this row by moving
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,573,                        // slot to one after this row.
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,574,                        pos.current_slot++;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,575,                    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,576,                    else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,577,                    {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,578,                        // no work necessary leave startslot positioned on the
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,579,"                        // row, we will skip this record"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,580,                        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,581,                            SanityManager.ASSERT(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,582,                                init_startSearchOperator == ScanController.GT);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,583,                    }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,584,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,585,                else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,586,                {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,587,"                    // the search positioned one before the start position key,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,588,"                    // move it to one ""after"""
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,589,                    pos.current_slot++;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,590,                }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,591,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,592,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,593,            boolean latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,594,                !this.getLockingPolicy().lockScanRow(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,595,"                    this, this.getConglomerate(), pos,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,596,"                    init_lock_fetch_desc,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,597,"                    pos.current_lock_template,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,598,"                    pos.current_lock_row_loc,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,599,"                    true, init_forUpdate, lock_operation);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,600,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,601,            // special test to see if latch release code works
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,602,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,603,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,604,                latch_released =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,605,                    test_errors(
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,606,"                        this,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,607,"                        ""BTreeScan_positionAtStartPosition"", pos,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,608,"                        this.getLockingPolicy(), pos.current_leaf, latch_released);"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,609,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,610,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,611,            if (latch_released)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,612,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,613,"                // lost latch on pos.current_leaf, search the tree again."
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,614,                pos.current_leaf = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,615,                continue;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,616,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,617,            else
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,618,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,619,"                // success! got all the locks, while holding the latch."
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,620,                break;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,621,            }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,622,        }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,623,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,624,        this.scan_state          = SCAN_INPROGRESS;
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,625,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,626,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,627,            SanityManager.ASSERT(pos.current_leaf != null);
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,628,
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,629,"        // System.out.println(""backward scan end start position: "" +"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,630,"        //       "" current_slot = "" + this.current_slot );"
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,631, }
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,632,
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,52,    private long offset;
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,53,    private long fetchFirst;
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,162,        if (offset > 0) {
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,165,                offset--;
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,167,                if (result != null && offset >= 0) {
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,174,
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,175,            // only skip row first time
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,176,            offset = 0;
java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java,179,            if (fetchFirst != -1 && rowsSeen >= fetchFirst) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,652,     * <b>NOTE:</b> Disabled until the bug is fixed. Remove x from the method
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,653,     * name to enable it.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,655,    public void xtestRepeatedExecution() throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3651,            } catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3736,        } catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3798,            } catch (StandardException t) {
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,818, /**
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,819,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,820,"  When we update a column, it turned into a long column.  Need to change"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,821,  the update to effectively insert a new long column chain.
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,822,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,823,  @exception StandardException Unexpected exception from the implementation
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,824,  */
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,825," protected RecordHandle insertLongColumn(BasePage mainChainPage,"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,826,"   LongColumnException lce, byte insertFlag)"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,830,  // Object[] row = new Object[1];
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,831,  // row[0] = (Object) lce.getColumn();
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,833,  row[0] = lce.getColumn();
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,836,  RecordHandle handle = null;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,837,  RecordHandle prevHandle = null;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,838,  BasePage curPage = mainChainPage;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,839,  BasePage prevPage = null;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,840,  boolean isFirstPage = true;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,841,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,842,  // when inserting a long column startCOlumn is just used
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,876,"   startColumn = owner.getActionSet().actionInsert(t, curPage, slot, recordId,"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,877,"    row, (FormatableBitSet)null, (LogicalUndo) null, insertFlag,"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,878,"    startColumn, true, -1, (DynamicByteArrayOutputStream) null, -1, 100);"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,888,   } else
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1191,   // loose the space.
java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java,851,  Try to checkpoint the database to minimize recovery time.
java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java,852,  The raw store does not guarentee that a checkpoint will indeed have
java/engine/org/apache/derby/iapi/store/raw/RawStoreFactory.java,853,  happened by the time this routine returns.
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,92,"  By default, LOG_SWITCH_INTERVAL is every 100K bytes of log record"
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,97,"  By default, CHECKPOINT_INTERVAL equals LOG_SWITCH_INTERVAL, but user"
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,99,  range of CHECKPOINT_INTERVAL is from 100K to LOG_SWITCH_INTERVAL.
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,104,  @param wait - if true; waits for the checkpoint to completed even if it is being done my an another thread.
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,105,  @return true if checkpoint is successful
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,106,  @exception StandardException - encounter exception while doing checkpoint.
java/engine/org/apache/derby/impl/store/raw/RawStore.java,471,"  logFactory.checkpoint(this, dataFactory, xactFactory, false);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1203,"  logFactory.checkpoint(this, dataFactory, xactFactory,true);"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1480," public boolean checkpoint(RawStoreFactory rsf,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1481,"         DataFactory df,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1482,"         TransactionFactory tf,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1483,         boolean wait)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1487,  if (inReplicationSlavePreMode) {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1488,   // Writing a checkpoing updates the log files and the log.ctrl
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1496,"  boolean done = checkpointWithTran(null, rsf, df, tf);"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1497,
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1498,  //above checpoint call will return 'false'  without
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1499,  //performing the checkpoint if some other  thread is doing checkpoint.
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1500,  //In  cases like backup it is necesary to wait for the
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1501,  //checkpoint to complete before copying the files. 'wait' flag get passed
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1502,  //in as 'true' by  such cases.
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1503,"  //When wait flag is true, we will wait here until the other thread which"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1504,  //is actually doing the the checkpoint completes.
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1505,
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1506,  if(!done && wait)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1507,  {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1508,   synchronized(this)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1509,   {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1510,    //wait until the thread that is doing the checkpoint completes it.
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1511,    while(inCheckpoint)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1512,    {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1513,     try
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1514,     {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1515,      wait();
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1516,     }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1517,     catch (InterruptedException ie)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1518,     {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1519,      throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1520,     }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1521,    }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1522,    done = true;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1523,   }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1524,  }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1529,
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1535," protected boolean checkpointWithTran(RawTransaction cptran,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1536,"          RawStoreFactory rsf,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1537,"          DataFactory df,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1538,          TransactionFactory tf)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1541,  boolean proceed = true;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1542,  LogInstant redoLWM;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1544,"  // we may be called to stop the database after a bad error, make sure"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1553,  synchronized (this)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1554,  {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1555,   // has someone else found a problem in the raw store?
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1556,   if (corrupt != null)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1558,"    throw StandardException.newException(SQLState.LOG_STORE_CORRUPT, corrupt);"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1559,            }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1561,"   // if another checkpoint is in progress, don't do anything"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1562,   if (inCheckpoint == true)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1563,    proceed = false;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1564,   else
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1565,    inCheckpoint = true;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1567,   approxLogLength = endPosition; // current end position
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1569,   // don't return from inside of a sync block
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1570,  }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1577,  // needCPtran == true if we are not supplied with a pre-started transaction
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1597,"    //checkpoint, set the amount of log written from last checkpoint to zero."
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1599,   }else
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1605,    //value of amount of log writtent for this file. Later it will
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1606,    //be subtracted when we switch the log file or while calculating whether
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1607,    //we are due a for checkpoint a flush time.
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,210,                shipALogChunk();
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,760,"        // the default one, abort."
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,761,        if (colon == -1 && !getType().equals(PersistentService.DIRECTORY)) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,239,                rewindStream(csd.getDataOffset());
java/engine/org/apache/derby/iapi/types/SQLClob.java,243,            rewindStream(0);
java/engine/org/apache/derby/iapi/types/SQLClob.java,345,                    rewindStream(read);
java/engine/org/apache/derby/iapi/types/SQLClob.java,689,            rewindStream(hdrLen);
java/engine/org/apache/derby/iapi/types/SQLClob.java,691,            final boolean markSet = stream.markSupported();
java/engine/org/apache/derby/iapi/types/SQLClob.java,693,                stream.mark(MAX_STREAM_HEADER_LENGTH);
java/engine/org/apache/derby/iapi/types/SQLClob.java,710,                    stream.reset();
java/engine/org/apache/derby/iapi/types/SQLClob.java,711,"                    InputStreamUtil.skipFully(stream, hdrInfo.headerLength());"
java/engine/org/apache/derby/iapi/types/SQLClob.java,712,                } else if (stream instanceof Resetable) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,714,                    rewindStream(hdrInfo.headerLength());
java/engine/org/apache/derby/iapi/types/SQLClob.java,766,     * @param pos number of bytes to skip
java/engine/org/apache/derby/iapi/types/SQLClob.java,769,    private void rewindStream(long pos)
java/engine/org/apache/derby/iapi/types/SQLClob.java,772,            ((Resetable)stream).resetStream();
java/engine/org/apache/derby/iapi/types/SQLClob.java,773,"            InputStreamUtil.skipFully(stream, pos);"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,166,"        //DERBY-3745 We want to avoid the timer leaking class loaders, so we make"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,167,        // sure the context class loader is null before we start the MBean
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,168,        // server which will create threads that we want to have a null context
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,169,        // class loader
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,171,        boolean hasGetClassLoaderPerms=false;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,172,        ClassLoader savecl = null;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,173,        try {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,174,            savecl = (ClassLoader)AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,175,               new PrivilegedAction<ClassLoader>() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,176,                public ClassLoader run()  {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,177,                    return Thread.currentThread().getContextClassLoader();
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,178,                }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,179,            });
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,180,            hasGetClassLoaderPerms = true;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,181,        } catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,182,"           // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,183,           // DERBY-3745 fix did not require getClassloader permissions.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,184,"           // We may leak class loaders if we are not able to get this, but"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,185,           // cannot just fail.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,186,        }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,187,        if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,188,            try {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,189,                AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,190,                new PrivilegedAction<Object>() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,191,                    public Object run()  {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,192,                        Thread.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,193,                                                                  currentThread().setContextClassLoader(null);
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,194,                        return null;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,195,                    }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,196,                });
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,197,            } catch (SecurityException se1) {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,198,"                // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,199,                // DERBY-3745 fix did not require setContextClassloader permissions.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,200,"                // We may leak class loaders if we are not able to set this, but"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,201,                // cannot just fail.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,202,            }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,219,        if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,220,            try {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,221,                final ClassLoader tmpsavecl = savecl;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,222,                AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,223,                new PrivilegedAction<Object>() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,224,                    public Object run()  {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,225,                        Thread.currentThread().setContextClassLoader(tmpsavecl);
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,226,                        return null;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,227,                    }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,228,                });
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,229,            } catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,230,"                // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,231,                // DERBY-3745 fix did not require setContextClassloader permissions.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,232,"                // We may leak class loaders if we are not able to set this, but"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,233,                // cannot just fail.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,234,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,161,        // Get the BLOB value length though Blob.length
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,189,        // Get the CLOB value length though Clob.length
java/engine/org/apache/derby/iapi/services/io/FormatableBitSet.java,688,  * @param beyondBit only look at bit that is greater than this bit number
java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java,187, public void updateRow(ExecRow row) throws StandardException;
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,333, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,334,  ((NoPutResultSet)cursor).updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java,515, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,406, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,407,  source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,586, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,587,  source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1101, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1102,  ExecRow newRow = row;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1103,  boolean undoProjection = false;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1115,  if (prRS != null) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1116,   newRow = prRS.doBaseRowProjection(row);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1117,   undoProjection = true;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1118,  }
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1119,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1121,  DataValueDescriptor[] hashRowArray = (DataValueDescriptor[])
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1126,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1132,  if (undoProjection) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1133,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1134,   final DataValueDescriptor[] newRowData = newRow.getRowArray();
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1135,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1136,   // Array of original position in row
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1137,   final int[] origPos = prRS.getBaseProjectMapping();
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1138,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1139,   // We want the row to contain data backed in BackingStoreHashtable
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1140,   final DataValueDescriptor[] backedData =
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1141,    getRowArrayFromHashTable(currentPosition);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1142,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1143,   for (int i=0; i<origPos.length; i++) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1144,    if (origPos[i]>=0) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1145,"     row.setColumn(origPos[i], backedData[i]);"
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1146,    }
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1148,  } else {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1149,   row.setRowArray(getRowArrayFromHashTable(currentPosition));
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,1127, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,560,    source.updateRow(newBaseRow);
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,888,     source.updateRow(newBaseRow);
java/engine/org/apache/derby/iapi/sql/execute/RowChanger.java,173,"  * @returns column no, or -1 if not found or not a base column"
java/demo/nserverdemo/NsSample.java,44, 2. loads the IBM DB2 JDBC Universal driver or derby client JDBC driver
java/demo/nserverdemo/NsSample.java,45,        (default is the derby client JDBC driver)
java/demo/nserverdemo/NsSample.java,69," public static final String DB2_JDBC_UNIVERSAL_DRIVER = new String(""com.ibm.db2.jcc.DB2Driver"");"
java/demo/nserverdemo/NsSample.java,70,"        public static final String DERBY_CLIENT_DRIVER = ""org.apache.derby.jdbc.ClientDriver"";"
java/demo/nserverdemo/NsSample.java,85," private static final String CS_NS_DBURL= ""jdbc:derby:net://localhost:""+NETWORKSERVER_PORT+""/NSSampledb;create=true;retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;"";"
java/demo/nserverdemo/NsSample.java,108,                // Determine which JDBC driver we are using with Derby
java/demo/nserverdemo/NsSample.java,109,                parseArguments(args);
java/demo/nserverdemo/NsSample.java,110,
java/demo/nserverdemo/NsSample.java,173,"  properties.setProperty(""user"",""cloud"");"
java/demo/nserverdemo/NsSample.java,174,"  properties.setProperty(""password"",""scape"");"
java/demo/nserverdemo/NsSample.java,234,    /**
java/demo/nserverdemo/NsSample.java,235,     * Determine which jdbc driver to use by parsing the command line args.
java/demo/nserverdemo/NsSample.java,236,     *  Accepted values:
java/demo/nserverdemo/NsSample.java,237,     *  jccjdbclient   - The DB2 type 4 universal driver
java/demo/nserverdemo/NsSample.java,238,     *  derbyclient    - The Derby network driver (default).
java/demo/nserverdemo/NsSample.java,239,"     *  Note: because this is just a sample, we only care about whether"
java/demo/nserverdemo/NsSample.java,240,"     *  the above values are specified.  If they are not, then we default"
java/demo/nserverdemo/NsSample.java,241,     *  to the Derby network driver.
java/demo/nserverdemo/NsSample.java,242,     */
java/demo/nserverdemo/NsSample.java,243,    private void parseArguments(String[] args)
java/demo/nserverdemo/NsSample.java,244,    {
java/demo/nserverdemo/NsSample.java,245,        int length = args.length;
java/demo/nserverdemo/NsSample.java,246,
java/demo/nserverdemo/NsSample.java,247,        for (int index = 0; index < length; index++)
java/demo/nserverdemo/NsSample.java,248,        {
java/demo/nserverdemo/NsSample.java,249,"            if (args[index].equalsIgnoreCase(""jccjdbcclient""))"
java/demo/nserverdemo/NsSample.java,250,            {
java/demo/nserverdemo/NsSample.java,251,                jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
java/demo/nserverdemo/NsSample.java,252,                url = CS_NS_DBURL;
java/demo/nserverdemo/NsSample.java,253,                break;
java/demo/nserverdemo/NsSample.java,254,"            } else if (args[index].equalsIgnoreCase(""derbyClient""))"
java/demo/nserverdemo/NsSample.java,255,            {
java/demo/nserverdemo/NsSample.java,256,                jdbcDriver = DERBY_CLIENT_DRIVER;
java/demo/nserverdemo/NsSample.java,257,                url = DERBY_CLIENT_URL;
java/demo/nserverdemo/NsSample.java,258,                break;
java/demo/nserverdemo/NsSample.java,259,            }
java/demo/nserverdemo/NsSample.java,260,        }
java/demo/nserverdemo/NsSample.java,261,    }
java/demo/nserverdemo/SimpleNetworkClientSample.java,39, * 1)   loads the DB2 Universal JDBC Driver or the Derby Network Client driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,46," * Before running this program, please make sure that Clouscape Network Server is up"
java/demo/nserverdemo/SimpleNetworkClientSample.java,66, /**
java/demo/nserverdemo/SimpleNetworkClientSample.java,67,  * DB2 JDBC UNIVERSAL DRIVER class names
java/demo/nserverdemo/SimpleNetworkClientSample.java,68,  */
java/demo/nserverdemo/SimpleNetworkClientSample.java,69," private static final String DB2_JDBC_UNIVERSAL_DRIVER = ""com.ibm.db2.jcc.DB2Driver"";"
java/demo/nserverdemo/SimpleNetworkClientSample.java,70," private static final String DB2_JCC_DS = ""com.ibm.db2.jcc.DB2SimpleDataSource"";"
java/demo/nserverdemo/SimpleNetworkClientSample.java,80,  * This URL is for the DB2 JDBC Universal Driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,109,                        // Determine which JDBC driver to use
java/demo/nserverdemo/SimpleNetworkClientSample.java,110,                        parseArguments(args);
java/demo/nserverdemo/SimpleNetworkClientSample.java,208,                // The following is only applicable to the DB2 JDBC driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,209,                if(jdbcDataSource.equals( DB2_JCC_DS))
java/demo/nserverdemo/SimpleNetworkClientSample.java,210,                {
java/demo/nserverdemo/SimpleNetworkClientSample.java,211,   // driver type must be 4 to access Derby Network Server
java/demo/nserverdemo/SimpleNetworkClientSample.java,212,"   Method drivertype = nsDataSource.getMethod(""setDriverType"", methodParams);"
java/demo/nserverdemo/SimpleNetworkClientSample.java,213,   args = new Object[] {new Integer(4)};
java/demo/nserverdemo/SimpleNetworkClientSample.java,214,"   drivertype.invoke(ds, args);"
java/demo/nserverdemo/SimpleNetworkClientSample.java,215,                }
java/demo/nserverdemo/SimpleNetworkClientSample.java,216,
java/demo/nserverdemo/SimpleNetworkClientSample.java,246,"  properties.setProperty(""user"",""cloud"");"
java/demo/nserverdemo/SimpleNetworkClientSample.java,247,"  properties.setProperty(""password"",""scape"");"
java/demo/nserverdemo/SimpleNetworkClientSample.java,289,   /**
java/demo/nserverdemo/SimpleNetworkClientSample.java,290,     * Determine which jdbc driver to use by parsing the command line args.
java/demo/nserverdemo/SimpleNetworkClientSample.java,291,     *  Accepted values:
java/demo/nserverdemo/SimpleNetworkClientSample.java,292,     *  jccjdbclient   - The DB2 type 4 universal driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,293,     *  derbyclient    - The Derby network driver (default).
java/demo/nserverdemo/SimpleNetworkClientSample.java,294,"     *  Note: because this is just a sample, we only care about whether"
java/demo/nserverdemo/SimpleNetworkClientSample.java,295,"     *  the above values are specified.  If they are not, then we default"
java/demo/nserverdemo/SimpleNetworkClientSample.java,296,     *  to the Derby network driver.
java/demo/nserverdemo/SimpleNetworkClientSample.java,297,     */
java/demo/nserverdemo/SimpleNetworkClientSample.java,298,    private void parseArguments(String[] args)
java/demo/nserverdemo/SimpleNetworkClientSample.java,299,    {
java/demo/nserverdemo/SimpleNetworkClientSample.java,300,        int length = args.length;
java/demo/nserverdemo/SimpleNetworkClientSample.java,301,
java/demo/nserverdemo/SimpleNetworkClientSample.java,302,        for (int index = 0; index < length; index++)
java/demo/nserverdemo/SimpleNetworkClientSample.java,303,        {
java/demo/nserverdemo/SimpleNetworkClientSample.java,304,"            if (args[index].equalsIgnoreCase(""jccjdbcclient""))"
java/demo/nserverdemo/SimpleNetworkClientSample.java,305,            {
java/demo/nserverdemo/SimpleNetworkClientSample.java,306,
java/demo/nserverdemo/SimpleNetworkClientSample.java,307,                jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
java/demo/nserverdemo/SimpleNetworkClientSample.java,308,                jdbcDataSource = DB2_JCC_DS;
java/demo/nserverdemo/SimpleNetworkClientSample.java,309,                url = CS_NS_DBURL;
java/demo/nserverdemo/SimpleNetworkClientSample.java,310,                break;
java/demo/nserverdemo/SimpleNetworkClientSample.java,311,"            } else if (args[index].equalsIgnoreCase(""derbyClient""))"
java/demo/nserverdemo/SimpleNetworkClientSample.java,312,            {
java/demo/nserverdemo/SimpleNetworkClientSample.java,313,                jdbcDriver = DERBY_CLIENT_DRIVER;
java/demo/nserverdemo/SimpleNetworkClientSample.java,314,                jdbcDataSource = DERBY_CLIENT_DS;
java/demo/nserverdemo/SimpleNetworkClientSample.java,315,                url = DERBY_CLIENT_URL;
java/demo/nserverdemo/SimpleNetworkClientSample.java,316,                break;
java/demo/nserverdemo/SimpleNetworkClientSample.java,317,            }
java/demo/nserverdemo/SimpleNetworkClientSample.java,318,        }
java/demo/nserverdemo/SimpleNetworkClientSample.java,319,    }
java/demo/simple/SimpleApp.java,75,     *    <li><code>jccjdbcclient</code> - will use the DB2 Universal JDBC
java/demo/simple/SimpleApp.java,76,"     *        network client driver, also known as JCC, to access the Network"
java/demo/simple/SimpleApp.java,77,     *        Server. This driver is not part of the Derby distribution.</li>
java/demo/simple/SimpleApp.java,104,"     * creating a table in the database, and inserting, updating and retreiving"
java/demo/simple/SimpleApp.java,105,     * some data. Some of the retreived data is then verified (compared) against
java/demo/simple/SimpleApp.java,111,     * doing shutdown unless you know that noone else needs to access the
java/demo/simple/SimpleApp.java,257,            int number; // street number retreived from the database
java/demo/simple/SimpleApp.java,332,"                    // To shut down a specific database only, but keeep the"
java/demo/simple/SimpleApp.java,475,"     * @param args JDBC connection framework, either ""embedded"", ""derbyclient"""
java/demo/simple/SimpleApp.java,476,"     *        or ""jccjdbcclient"". Only the first argument will be considered,"
java/demo/simple/SimpleApp.java,477,     *        the rest will be ignored.
java/demo/simple/SimpleApp.java,482,"            if (args[0].equalsIgnoreCase(""jccjdbcclient""))"
java/demo/simple/SimpleApp.java,483,            {
java/demo/simple/SimpleApp.java,484,"                framework = ""jccjdbc"";"
java/demo/simple/SimpleApp.java,485,"                driver = ""com.ibm.db2.jcc.DB2Driver"";"
java/demo/simple/SimpleApp.java,486,"                protocol = ""jdbc:derby:net://localhost:1527/"";"
java/demo/simple/SimpleApp.java,487,            }
java/demo/simple/SimpleApp.java,488,"            else if (args[0].equalsIgnoreCase(""derbyclient""))"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,635,        suite.addTest(tests[NOAUTHENTICATION]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,638,        suite.addTest(tests[AUTHENTICATION]);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,152,"    String systemHome = System.getProperty(Property.SYSTEM_HOME_PROPERTY,""."");"
java/engine/org/apache/derby/impl/services/bytecode/GClass.java,75,"  File classFile = new File(dir,filename);"
java/engine/org/apache/derby/impl/services/bytecode/GClass.java,79,
java/engine/org/apache/derby/impl/services/bytecode/GClass.java,81,   FileOutputStream fis = new FileOutputStream(classFile);
java/engine/org/apache/derby/impl/services/bytecode/GClass.java,82,"   fis.write(bytecode.getArray(),"
java/engine/org/apache/derby/impl/services/bytecode/GClass.java,84,   fis.flush();
java/engine/org/apache/derby/impl/services/bytecode/GClass.java,88,   fis.close();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,36,import org.apache.derby.iapi.services.compiler.LocalField;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1674,  /* Declare the field and load it with the current row */
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1675,"  LocalField field = ecb.newFieldDeclaration(Modifier.PRIVATE, ClassName.ExecRow);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1679,        userExprFun.putField( field );
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1701,            userExprFun.getField(field); // instance
java/engine/org/apache/derby/iapi/types/SQLClob.java,105,   return new SQLClob(getString());
java/engine/org/apache/derby/iapi/types/SQLClob.java,121,  return new SQLClob();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,200,        return new CleanDatabaseTestSetup(suite) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,220,                for (int i=0; i < 600; i++) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,710,"                // We read too much data, reset and position on the first byte"
java/engine/org/apache/derby/iapi/types/SQLClob.java,711,                // of the user data.
java/engine/org/apache/derby/iapi/types/SQLClob.java,712,                // First see if we set a mark on the stream and can reset it.
java/engine/org/apache/derby/iapi/types/SQLClob.java,713,"                // If not, try using the Resetable interface."
java/engine/org/apache/derby/iapi/types/SQLClob.java,715,"                    // Stream is not a store Resetable one, use mark/reset"
java/engine/org/apache/derby/iapi/types/SQLClob.java,716,                    // functionality instead.
java/engine/org/apache/derby/iapi/types/SQLClob.java,719,                } else if (in instanceof Resetable) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,720,                    // We have a store stream.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,569,                    String value = ov == null ? null : ov.toString();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,570,"                    ref.add(new StringRefAddr(propertyName, value));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,109,"            // At this point, the directly created xads should be matching the looked up one."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,114,            else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,115,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,116,"                // DERBY-3669; with DerbyNetClient, the original and looked-up"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,117,"                // xadatasource are not the same...So, compare piece by piece:"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,118,"                // When fixed, rest of else can be replaced by uncommenting"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,119,                // next line
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,120,"                //assertEquals(xads,ads);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,121,                String[] orgprops = getPropertyBeanList(xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,122,                String[] bindprops = getPropertyBeanList(ads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,123,"                assertEquals(orgprops.length, bindprops.length);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,124,                // following is actually checked in DataSourceReferenceTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,125,                for (int i=0;i<orgprops.length;i++){
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,126,"                    assertEquals(orgprops[i], bindprops[i]);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,127,                }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,128,"                // We have the same properties, now compare the values"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,129,"                assertEqualPropValues(xads,ads, orgprops);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,131,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,139,    public void assertEqualPropValues(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,140,"            XADataSource orgds, XADataSource lookedupds, String[] props)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,141,    throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,142,        for (int i=0;i<props.length;i++){
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,143,"            if (JDBCDataSource.getBeanProperty(orgds, props[i]) != null &&"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,144,"                    JDBCDataSource.getBeanProperty(lookedupds, props[i]) != null)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,145,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,146,                assertEquals(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,147,"                        JDBCDataSource.getBeanProperty(orgds, props[i]),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,148,"                        JDBCDataSource.getBeanProperty(lookedupds, props[i])"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,149,                );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,150,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,151,            else {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,152,"                if (JDBCDataSource.getBeanProperty(lookedupds,props[i]) != null)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,153,                {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,154,"                    assertNull(JDBCDataSource.getBeanProperty(orgds,props[i]));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,155,                }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,156,                else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,157,                {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,158,"                    assertNull(JDBCDataSource.getBeanProperty(orgds,props[i]));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,159,"                    assertNull(JDBCDataSource.getBeanProperty(lookedupds,props[i]));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,160,                }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,161,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,162,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,163,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XAJNDITest.java,164,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,563,
java/drda/org/apache/derby/impl/drda/Database.java,73,
java/drda/org/apache/derby/impl/drda/Database.java,83, boolean forXA = false;
java/drda/org/apache/derby/impl/drda/Database.java,84,
java/drda/org/apache/derby/impl/drda/Database.java,339,   * Close the connection and clean up the statement table
java/drda/org/apache/derby/impl/drda/Database.java,358,    if (! forXA)
java/drda/org/apache/derby/impl/drda/XADatabase.java,60,  forXA = true;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,412,
java/testing/org/apache/derbyTesting/unitTests/junit/AssertFailureTest.java,100,"              ""supported on JVM 1.4)\n"";"
java/testing/org/apache/derbyTesting/unitTests/junit/AssertFailureTest.java,102,"            assertEquals(""String not correct."", expected, s);"
java/testing/org/apache/derbyTesting/unitTests/junit/AssertFailureTest.java,128,"                ""supported on JVM 1.4)\n"";"
java/testing/org/apache/derbyTesting/unitTests/junit/AssertFailureTest.java,130,"            assertEquals(""String not correct."", expected, s);"
java/testing/org/apache/derbyTesting/junit/XATestUtil.java,82,"            JDBC.assertFullResultSet(rs, expectedRows);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java,57,
java/tools/org/apache/derby/impl/tools/ij/Main.java,117,                        in1 = new FileInputStream(file);
java/tools/org/apache/derby/impl/tools/ij/Main.java,122,                    } catch (FileNotFoundException e) {
java/testing/org/apache/derbyTesting/system/mailjdbc/tasks/Backup.java,40,"  conn = DbTasks.getConnection(""BACKUP"", ""Backup"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,205,        // DERBY-4244 (START)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,206,"        // Without these lines, this test fails a few lines later when"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,207,        // it makes yet another attempt to add column c2 to table t0. This
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,208,"        // bug is logged as DERBY-4244. When that problem is fixed, this"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,209,        // section could be removed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,210,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,211,"        st.executeUpdate(""drop table t0"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,212,        st.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,213,"                ""create table t0(c1 int not null constraint p1 primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,214,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,215,        // DERBY-4244 (END)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,216,
java/client/org/apache/derby/client/am/Lob.java,403,        if(!isValid_ || transactionID_ != agent_.connection_.getTransactionID())
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1488,"                assertSQLState(""XJ215"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1489,"                println(""Expected Exception: You cannot invoke other """
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1490,"                        + ""java.sql.Clob/java.sql.Blob methods after calling the """
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1491,"                        + ""free() method or after the Blob/Clob's transaction has"""
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1492,"                        + "" been committed or rolled back."");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1557,"                assertSQLState(""XJ215"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1558,"                println(""Expected Exception: You cannot invoke other """
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1559,"                        + ""java.sql.Clob/java.sql.Blob methods after calling the """
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1560,"                        + ""free() method or after the Blob/Clob's transaction has"""
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1561,"                        + "" been committed or rolled back."");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,61,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,128, public final void close() throws SQLException
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,130,  getStatement().close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,183,"        s.executeUpdate(""insert into APP.foo values (1)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,187,"        s.executeUpdate(""insert into APP.foo values (2)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,191,"        s.executeUpdate(""insert into APP.foo values (3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,195,"        s.executeUpdate(""insert into APP.foo values (4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,258,"        ResultSet rs = s.executeQuery(""select * from APP.foo"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,385,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,400,"        s.executeUpdate(""insert into APP.foo values (2001)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,412,"        s.executeUpdate(""insert into APP.foo values (2002)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,426,"        s.executeUpdate(""insert into APP.foo values (2003)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,465,"        s.executeQuery(""select * from APP.foo where A >= 2000"").close();"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,476,"        ResultSet rs = s.executeQuery(""select * from APP.foo where A >= 2000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,536,"        s.executeUpdate(""insert into APP.foo values (2005)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,539,"        s.executeUpdate(""insert into APP.foo values (2006)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,541,"        s.executeUpdate(""insert into APP.foo values (2007)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,558,"        rs = s.executeQuery(""select * from APP.foo where A >= 2000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,574,"        s.executeUpdate(""delete from app.foo"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,575,"        rs = s.executeQuery(""select * from APP.foo"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,585,"        rs = s.executeQuery(""select * from APP.foo where A >= 2000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,626,"        s.executeUpdate(""delete from APP.foo"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,627,"        rs = s.executeQuery(""select * from APP.foo where A >= 2000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,641,"        rs = s.executeQuery(""select * from APP.foo where A >= 2000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,673,"        checkHeldRS(conn, sdh, sdh.executeQuery(""select * from app.foo""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,674,"        PreparedStatement psdh = conn.prepareStatement(""SELECT * FROM APP.FOO"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,676,"                .prepareStatement(""DELETE FROM APP.FOO WHERE A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,685,"        checkHeldRS(conn, shh, shh.executeQuery(""select * from app.foo""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,686,"        PreparedStatement pshh = conn.prepareStatement(""SELECT * FROM APP.FOO"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,690,"                ""DELETE FROM APP.FOO WHERE A < -99"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,702,"        checkHeldRS(conn, sch, sch.executeQuery(""select * from app.foo""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,703,"        PreparedStatement psch = conn.prepareStatement(""SELECT * FROM APP.FOO"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,707,"                ""DELETE FROM APP.FOO WHERE A < -99"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,720,"        checkHeldRS(conn, sdc, sdc.executeQuery(""select * from app.foo""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,721,"        PreparedStatement psdc = conn.prepareStatement(""SELECT * FROM APP.FOO"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,723,"                .prepareStatement(""DELETE FROM APP.FOO WHERE A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,732,"        checkHeldRS(conn, shc, shc.executeQuery(""select * from app.foo""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,733,"        PreparedStatement pshc = conn.prepareStatement(""SELECT * FROM APP.FOO"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,737,"                ""DELETE FROM APP.FOO WHERE A < -99"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,749,"        checkHeldRS(conn, scc, scc.executeQuery(""select * from app.foo""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,750,"        PreparedStatement pscc = conn.prepareStatement(""SELECT * FROM APP.FOO"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,754,"                ""DELETE FROM APP.FOO WHERE A < -99"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,765,"        ResultSet rs = sdh.executeQuery(""SELECT * FROM APP.FOO"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,776,"        rs = sdh.executeQuery(""SELECT * FROM APP.FOO"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,786,"        sdh.executeUpdate(""DELETE FROM APP.FOO where A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,787,"        shh.executeUpdate(""DELETE FROM APP.FOO where A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,788,"        sch.executeUpdate(""DELETE FROM APP.FOO where A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,795,"        openRS.add(sdh.executeQuery(""SELECT * FROM APP.FOO""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,796,"        openRS.add(shh.executeQuery(""SELECT * FROM APP.FOO""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,797,"        openRS.add(sch.executeQuery(""SELECT * FROM APP.FOO""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,811,"        sdc.executeUpdate(""DELETE FROM APP.FOO where A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,812,"        shc.executeUpdate(""DELETE FROM APP.FOO where A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,813,"        scc.executeUpdate(""DELETE FROM APP.FOO where A < -99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,817,"        openRS.add(sdc.executeQuery(""SELECT * FROM APP.FOO""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,818,"        openRS.add(shc.executeQuery(""SELECT * FROM APP.FOO""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,819,"        openRS.add(scc.executeQuery(""SELECT * FROM APP.FOO""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,866,"                    ""SELECT * FROM APP.FOO"", ResultSet.TYPE_FORWARD_ONLY,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,91,        suite.addTest(InternationalConnectSimpleDSTest.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,120,
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,190," private String encryptKey(byte[] secretKey, byte[] bootPassword)"
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,218,"  return org.apache.derby.iapi.util.StringUtil.toHexString(result, 0, result.length);"
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,752,"  String encryptedKey = encryptKey(secretKey, bootPassword);"
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,756,  int verifyKey = digest(secretKey);
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,3, * Derby - Class org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,222,"        // bug DERBY-3710 - with encryptionKeyLength=192,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,223,        // we cannot connect after a shutdown. Works fine with 128 and 256.
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,224,"        // the if is to workaround DERBY-3710, can be removed when it's fixed."
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,225,"        if (!encryptionKeyLength.equals(""192""))"
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,226,            shutdown(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,235,        // Shutdown the database.
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,236,        // the if is to workaround DERBY-3710
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,237,"        if (!encryptionKeyLength.equals(""192""))"
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,238,            shutdown(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,250,        // workaround DERBY-3710; otherwise the db was shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,251,        // in the method runMismatchKeyLength.
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,252,"        if (encryptionKeyLength.equals(""192""))"
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,253,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,254,            attributes = new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,255,"               {(""encryptionKeyLength="" + encryptionKeyLength),"
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,256,"                 ""bootPassword=Thursday""};"
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,257,            shutdown(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,258,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,270,        // in place) except with length 192 if we've done a shutdown.
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,275,            // workaround DERBY-3710
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,276,"            if (!encryptionKeyLength.equals(""192""))"
java/testing/org/apache/derbyTesting/functionTests/tests/store/EncryptionAESTest.java,277,                shutdown(dbName);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,4060,"    null,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,427,        /* DERBY-4282  after fixing the issue DERBY-4282 this commented
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,428,         * part can be uncomment
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,429,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,430,        PreparedStatement ps_c1 = prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,431,"            ""select * from t1 where c2 = 2 for update of c1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,432,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,433,        ResultSet c1 = ps_c1.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,434,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,435,        //c1.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,436,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,437,        expRS=new String[][]{
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,438,"            {""2"",""2""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,439,        };
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,440,"        JDBC.assertFullResultSet(c1, expRS);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,441,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,444,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,445,"        assertUpdateCount(st, 1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,446,"            ""update t1 set c1 = c1 where current of c1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,447,        //setAutoCommit(true);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,448,        // this update should fail
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,451,"            ""update t1 set c1 = c1 + 1 where current of c1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,452,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,453,        c1.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,454,        ps_c1.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,455,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,456,        PreparedStatement ps_c2 = prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,457,"            ""select * from t1 where c1 = 2 for update of c2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,458,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,459,        ResultSet c2 = ps_c2.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,460,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,461,        c2.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,462,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,463,        expRS=new String[][]{
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,464,"            {""2"",""2""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,465,        };
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,466,"        JDBC.assertFullResultSet(c2, expRS);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,467,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,468,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,470,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,471,"        assertUpdateCount(st, 1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,472,"            ""update t1 set c2 = c2 where current of c2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,475,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,477,"            ""update t1 set c2 = c2 + 1 where current of c2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,478,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,479,        c2.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,480,        ps_c2.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,481,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,482,        PreparedStatement ps_c3 = prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,483,"            ""select * from t1 where c1 = 2 for update of c1, c2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,484,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,485,        ResultSet c3 = ps_c3.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,486,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,487,        c3.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,488,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,489,        expRS=new String[][]{
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,490,"            {""2"",""2""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,491,        };
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,492,"        JDBC.assertFullResultSet(c3, expRS);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,493,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,496,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,498,"            ""update t1 set c2 = c1, c1 = c2 where current of c3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,501,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,503,"            ""update t1 set c2 = c2 + 1, c1 = c1 + 3 where current of c3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,506,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,508,"            ""update t1 set c2 = c1 + 3, c1 = c2 + 3 where current of c3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,526,        c3.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,527,        ps_c3.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,528,*/
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CheckConstraintTest.java,895,}
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1806,            throw newSQLException(SQLState.CANNOT_CLOSE_ACTIVE_CONNECTION);
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,141,  /*
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,142,  ** Load up the sorter because we have something to sort.
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,143,  */
java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java,144,  scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,161,  /* If this is an in-order group by then we do not need the sorter.
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,162,   * (We can do the aggregation ourselves.)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,163,   * We save a clone of the first row so that subsequent next()s
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,164,   * do not overwrite the saved row.
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,165,   */
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,166,  if (isInSortedOrder)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,167,  {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,168,   currSortedRow = getNextRowFromRS();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,169,   if (currSortedRow != null)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,171,    currSortedRow = (ExecIndexRow) currSortedRow.getClone();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,172,    initializeVectorAggregation(currSortedRow);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,174,  }
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,175,  else
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,176,  {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,177,   /*
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,178,   ** Load up the sorter
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,179,   */
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,180,   scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,146,     isOpen = true;
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,148,  leftRow = leftResultSet.getNextRowCore();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,149,  if (leftRow != null)
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,150,  {
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,151,   openRight();
java/engine/org/apache/derby/impl/sql/execute/JoinResultSet.java,152,   rowsSeenLeft++;
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,111,        isOpen = true;
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,113,        rightSource.openCore();
java/engine/org/apache/derby/impl/sql/execute/SetOpResultSet.java,114,        rightInputRow = rightSource.getNextRowCore();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,250,  /* If this is an in-order distinct then we do not need the sorter.
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,251,   * (We filter out the duplicate rows ourselves.)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,252,   * We save a clone of the first row so that subsequent next()s
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,253,   * do not overwrite the saved row.
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,254,   */
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,255,  if (isInSortedOrder && distinct)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,256,  {
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,257,   currSortedRow = getNextRowFromRS();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,258,   if (currSortedRow != null)
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,260,    currSortedRow = (ExecRow) currSortedRow.getClone();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,262,  }
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,263,  else
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,264,  {
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,265,   /*
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,266,   ** Load up the sorter.
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,267,   */
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,268,   scanController = loadSorter();
java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java,269,   sorted = true;
java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java,102,        isOpen = true;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicatePushdownTest.java,1373,"        assertTrue(""Expected Table Scan ResultSet for T3"", p.usedTableScan(""T3""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicatePushdownTest.java,1374,"        assertTrue(""Expected Hash Join"",p.usedHashJoin());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicatePushdownTest.java,1688,"        assertTrue(""Expected hash join"", p.usedHashJoin());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicatePushdownTest.java,1730,"        assertTrue(""Expected hash join"", p.usedHashJoin());"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,630,   }
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,638,   if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,639,    cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,640,   else
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,641,    cachedDest.setToNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,644,   if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,645,    cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,646,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,353,  int     whichCol;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,354,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,355,  if (desiredTypes == null) { desiredTypes = fetchResultTypes( resultDescription ); }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,356,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,370,                    normalizedCol = normalizeColumn
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,371,"                        ( desiredTypes[i - 1], sourceRow, i, normalizedRow.getColumn(i), resultDescription );"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,386,    private  DataTypeDescriptor[]    fetchResultTypes( ResultDescription desc )
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,387,        throws StandardException
java/client/org/apache/derby/client/am/Statement.java,2322,"        String delims = ""\t\n\r\f=? ("";"
java/client/org/apache/derby/client/am/Statement.java,2323,        java.util.StringTokenizer tokenizer = null;
java/client/org/apache/derby/client/am/Statement.java,2324,        String firstToken = null;
java/client/org/apache/derby/client/am/Statement.java,2325,
java/client/org/apache/derby/client/am/Statement.java,2326,"        // See if the statement starts with a comment; if so, move"
java/client/org/apache/derby/client/am/Statement.java,2327,        // past the comment and get the first token of the actual
java/client/org/apache/derby/client/am/Statement.java,2328,"        // statement to be executed.  Note: must use ""startsWith"""
java/client/org/apache/derby/client/am/Statement.java,2329,        // when looking for the comment delimiters instead of
java/client/org/apache/derby/client/am/Statement.java,2330,"        // ""equals"" because there may not be whitespace between the"
java/client/org/apache/derby/client/am/Statement.java,2331,"        // the delimiter and the comment itself, ex ""--my comment""."
java/client/org/apache/derby/client/am/Statement.java,2332,"        if (sql.trim().startsWith(""--"")) {"
java/client/org/apache/derby/client/am/Statement.java,2333,
java/client/org/apache/derby/client/am/Statement.java,2334,            // Read each line of the statement until we find a
java/client/org/apache/derby/client/am/Statement.java,2335,            // line that is NOT a comment.
java/client/org/apache/derby/client/am/Statement.java,2336,            int lastEndLine = -1;
java/client/org/apache/derby/client/am/Statement.java,2337,"            String endline = ""\n\r\f"";"
java/client/org/apache/derby/client/am/Statement.java,2338,"            tokenizer = new java.util.StringTokenizer(sql, endline, true);"
java/client/org/apache/derby/client/am/Statement.java,2339,            while (tokenizer.hasMoreTokens()) {
java/client/org/apache/derby/client/am/Statement.java,2340,                firstToken = tokenizer.nextToken();
java/client/org/apache/derby/client/am/Statement.java,2341,                if (endline.indexOf(firstToken) != -1)
java/client/org/apache/derby/client/am/Statement.java,2342,"                // this is some sort of newline (""\n"", ""\r"", or ""\f"")."
java/client/org/apache/derby/client/am/Statement.java,2343,"                    lastEndLine = sql.indexOf(firstToken, lastEndLine+1);"
java/client/org/apache/derby/client/am/Statement.java,2344,"                else if (!firstToken.trim().startsWith(""--""))"
java/client/org/apache/derby/client/am/Statement.java,2345,                    break;
java/client/org/apache/derby/client/am/Statement.java,2346,            }
java/client/org/apache/derby/client/am/Statement.java,2348,"            if (firstToken.startsWith(""--"")) {"
java/client/org/apache/derby/client/am/Statement.java,2349,            // entire statement was just one or more comments; pass it as
java/client/org/apache/derby/client/am/Statement.java,2350,            // a query to the server and let the server deal with it.
java/client/org/apache/derby/client/am/Statement.java,2351,                sqlMode_ = isQuery__;
java/client/org/apache/derby/client/am/Statement.java,2352,                return;
java/client/org/apache/derby/client/am/Statement.java,2353,            }
java/client/org/apache/derby/client/am/Statement.java,2354,            else {
java/client/org/apache/derby/client/am/Statement.java,2355,            // we have a non-comment line; get a tokenizer for the
java/client/org/apache/derby/client/am/Statement.java,2356,            // statement beginning at the start of this line.
java/client/org/apache/derby/client/am/Statement.java,2357,                tokenizer = new java.util.StringTokenizer(
java/client/org/apache/derby/client/am/Statement.java,2358,"                    sql.substring(lastEndLine+1), delims);"
java/client/org/apache/derby/client/am/Statement.java,2359,            }
java/client/org/apache/derby/client/am/Statement.java,2361,        }
java/client/org/apache/derby/client/am/Statement.java,2362,        else {
java/client/org/apache/derby/client/am/Statement.java,2363,"        // there aren't any leading comments, so just get the first token"
java/client/org/apache/derby/client/am/Statement.java,2364,        // in the SQL statement.
java/client/org/apache/derby/client/am/Statement.java,2365,"            tokenizer = new java.util.StringTokenizer(sql, delims);"
java/client/org/apache/derby/client/am/Statement.java,2366,        }
java/client/org/apache/derby/client/am/Statement.java,2368,        if (!tokenizer.hasMoreTokens()) {
java/client/org/apache/derby/client/am/Statement.java,2369,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Statement.java,2370,"                new ClientMessageId(SQLState.NO_TOKENS_IN_SQL_TEXT), sql);"
java/client/org/apache/derby/client/am/Statement.java,2373,        sqlUpdateMode_ = 0;
java/client/org/apache/derby/client/am/Statement.java,2374,        firstToken = tokenizer.nextToken();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java,57,        return TestConfiguration.embeddedSuite(CommentTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java,134,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CommentTest.java,139,    {
java/engine/org/apache/derby/impl/sql/compile/FromList.java,387, /**
java/engine/org/apache/derby/impl/sql/compile/FromList.java,388,  * Returns true if any Outer joins present. Used to set Nullability
java/engine/org/apache/derby/impl/sql/compile/FromList.java,389,  *
java/engine/org/apache/derby/impl/sql/compile/FromList.java,390,  * @return True if has any outer joins. False otherwise.
java/engine/org/apache/derby/impl/sql/compile/FromList.java,391,  */
java/engine/org/apache/derby/impl/sql/compile/FromList.java,392, public boolean hasOuterJoins()
java/engine/org/apache/derby/impl/sql/compile/FromList.java,393,    throws StandardException
java/engine/org/apache/derby/impl/sql/compile/FromList.java,394, {
java/engine/org/apache/derby/impl/sql/compile/FromList.java,395,  FromTable fromTable;
java/engine/org/apache/derby/impl/sql/compile/FromList.java,396,
java/engine/org/apache/derby/impl/sql/compile/FromList.java,397,  int size = size();
java/engine/org/apache/derby/impl/sql/compile/FromList.java,398,  for (int index = 0; index < size; index++)
java/engine/org/apache/derby/impl/sql/compile/FromList.java,399,  {
java/engine/org/apache/derby/impl/sql/compile/FromList.java,400,   fromTable = (FromTable) elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/FromList.java,401,   if (fromTable instanceof HalfOuterJoinNode)
java/engine/org/apache/derby/impl/sql/compile/FromList.java,402,    return true;
java/engine/org/apache/derby/impl/sql/compile/FromList.java,403,  }
java/engine/org/apache/derby/impl/sql/compile/FromList.java,404,
java/engine/org/apache/derby/impl/sql/compile/FromList.java,405,  return false;
java/engine/org/apache/derby/impl/sql/compile/FromList.java,406, }
java/engine/org/apache/derby/impl/sql/compile/FromList.java,407,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,644,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,645,  /* Fix nullability in case of any outer joins in the fromList */
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,646,  if (fromList.hasOuterJoins())
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,647,   resultColumns.setNullability(true);
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,50,"  * NULL.  If more than 4 input values, call this multiple times to"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,80,"  if (v2 != null && judge.lessThan(v2, minVal).equals(true))"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,82,"  if (v3 != null && judge.lessThan(v3, minVal).equals(true))"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,84,"  if (v4 != null && judge.lessThan(v4, minVal).equals(true))"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,92,"  * NULL.  If more than 4 input values, call this multiple times to"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,122,"  if (v2 != null && judge.greaterThan(v2, maxVal).equals(true))"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,124,"  if (v3 != null && judge.greaterThan(v3, maxVal).equals(true))"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,126,"  if (v4 != null && judge.greaterThan(v4, maxVal).equals(true))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java,33,import junit.framework.TestSuite;
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,564,
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1314,"     //Numeric types are comparable to numeric types, boolean types and to"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1315,  //comparable user types
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1317,      return (compareWithTypeID.isNumericTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1318,              compareWithTypeID.isBooleanTypeId());
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1338,"  //Booleans are comparable to Boolean, string, numeric and to"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1339,  //comparable user types
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1342,        compareWithTypeID.isStringTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1343,        compareWithTypeID.isNumericTypeId());
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,286,       (otherType.isBooleanTypeId()) ||
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,320,  if ((otherType.isNumericTypeId()) ||
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,321,   (otherType.isBooleanTypeId()))
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,322,   return true;
java/engine/org/apache/derby/impl/sql/compile/BitTypeCompiler.java,64,     otherType.isBooleanTypeId() ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,55,  int otherJDBCTypeId = otherType.getJDBCTypeId();
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,56,
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,57,  if ((otherJDBCTypeId == Types.DATE) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,58,   (otherJDBCTypeId == Types.TIME) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,59,   (otherJDBCTypeId == Types.TIMESTAMP))
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,60,  {
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,61,   return false;
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,62,  }
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,63,
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,64,  return true;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,55,            return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,78,            // no automatic conversions at store time--but string
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,81,            return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,55,   // or CLOB.
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,58,    return (otherType.isStringTypeId());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,438,"         rs = s.executeQuery(""select count(*) from SYS.SYSCONGLOMERATES where CAST(CONGLOMERATENAME AS VARCHAR(128))='IX' and ISINDEX=1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,450,"         rs = s.executeQuery(""select count(*) from SYS.SYSCONGLOMERATES where CAST(CONGLOMERATENAME AS VARCHAR(128))='IX' and ISINDEX=1"");"
java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java,242,"    ""\n\tType: ""+type;"
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,171,   newArray[i] = origArray[i].getClone();
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,458,     SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,459,"      ""col["" + colid + ""]  is null"");"
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,549,        for (int i = 0; i < columnOrdering.length; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,5261,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,5439,}
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1691,   if (resultColumn.isGenerated())
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,307,  * Set the type of each parameter in the result column list for this table constructor.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,317,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,318,"   SanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,319,"    ""More columns in ResultColumnList than in base table"");"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,320,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,321,  /* Look for ? parameters in the result column list */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,322,  int rclSize = resultColumns.size();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,323,  for (int index = 0; index < rclSize; index++)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,324,  {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,325,   ResultColumn rc = (ResultColumn) resultColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,326,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,327,   ValueNode re = rc.getExpression();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,328,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,329,   if (re.requiresTypeFromContext())
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,330,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,331,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,332,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,333,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,334,    /*
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,335,    ** We found a ? - set its type to the type of the
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,336,    ** corresponding column of the target table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,337,    */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,338,    re.setType(typeCol.getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,339,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,340,   else if (re instanceof CharConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,341,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,342,    // Character constants are of type CHAR (fixed length string).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,343,    // This causes a problem (beetle 5160) when multiple row values are provided
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,344,    // as constants for insertion into a variable length string column.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,345,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,346,    // This issue is the query expression
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,347,"    // VALUES 'abc', 'defghi'"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,348,"    // has type of CHAR(6), ie. the length of largest row value for that column."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,349,    // This is from the UNION defined behaviour.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,350,    // This causes strings with less than the maximum length to be blank padded
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,351,    // to that length (CHAR semantics). Thus if this VALUES clause is used to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,352,"    // insert into a variable length string column, then these blank padded values"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,353,"    // are inserted, which is not what is required ..."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,354,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,355,"    // BECAUSE, when the VALUES is used as a table constructor SQL standard says the"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,356,    // types of the table constructor's columns are set by the table's column types.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,357,"    // Thus, in this case, each of those string constants should be of type VARCHAR"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,358,    // (or the matching string type for the table).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,359,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,360,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,361,"    // This is only an issue for fixed length character (CHAR, BIT) string or"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,362,    // binary consraints being inserted into variable length types.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,363,    // This is because any other type's fundemental literal value is not affected
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,364,"    // by its data type. E.g. Numeric types such as INT, REAL, BIGINT, DECIMAL etc."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,365,    // do not have their value modifed by the union since even if the type is promoted
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,366,"    // to a higher type, its fundemental value remains unchanged."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,367,"    // values (1.2, 34.4567, 234.47) will be promoted to"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,368,"    // values (1.2000, 34.4567, 234.4700)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,369,    // but their numeric value remains the same.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,370,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,371,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,372,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,373,    // The fix is to change the base type of the table constructor's value to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,374,"    // match the column type. Its length can be left as-is, because there is"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,375,    // still a normailzation step when the value is inserted into the table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,376,    // That will set the correct length and perform truncation checks etc.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,377,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,378,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,379,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,380,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,381,    TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,382,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,383,    if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,384,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,385,     if (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,386,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,387,      int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,388,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,389,"      re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,390,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,391,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,392,    else if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,393,     if (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,394,     // then we're trying to cast a char literal into a
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,395,     // variable bit column.  We can't change the base
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,396,     // type of the table constructor's value from char
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,397,"     // to bit, so instead, we just change the base type"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,398,"     // of that value from char to varchar--that way,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,399,     // no padding will be added when we convert to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,400,     // bits later on (Beetle 5306).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,401,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,402,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,403,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,404,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,405,     else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,406,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,407,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,408,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,409,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,410,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,411,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,412,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,413,   else if (re instanceof BitConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,414,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,415,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,416,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,417,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,418,    TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,419,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,420,    if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,421,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,422,"     // NOTE: Don't bother doing this if the column type is BLOB,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,423,     // as we don't allow bit literals to be inserted into BLOB
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,424,     // columns (they have to be explicitly casted first); beetle 5266.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,425,     if ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,426,      (colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,427,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,428,      int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,429,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,430,"      re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,431,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,432,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,433,    else if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,434,     if (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,435,     // then we're trying to cast a bit literal into a
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,436,     // variable char column.  We can't change the base
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,437,     // type of the table constructor's value from bit
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,438,"     // to char, so instead, we just change the base"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,439,"     // type of that value from bit to varbit--that way,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,440,     // no padding will be added when we convert to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,441,     // char later on.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,442,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,443,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,444,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,445,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,446,     else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,447,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,448,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,449,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,450,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,451,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,452,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,453,  }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,26,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,29,import org.apache.derby.iapi.sql.compile.OptimizableList;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,31,import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,41,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,42,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,43,import org.apache.derby.iapi.sql.Row;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,46,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,58,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,59,import java.util.Properties;
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,163,        if (dvdStream == null)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,164,        {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,180,        }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,181,        else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,182,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,352,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1607,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1608,   ResultColumnList newSelectList = prnRSN.getResultColumns().copyListAndObjects();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1609,   newSelectList.removeGeneratedGroupingColumns();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1610,"   newSelectList.genVirtualColumnNodes(prnRSN, prnRSN.getResultColumns());"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1614,"      newSelectList,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,2246,}
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,298,  /* Replace any DEFAULTs with the associated tree */
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,299,"  resultSet.replaceDefaults(targetTableDescriptor, targetColumnList);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3867,  * Replace any DEFAULTs with the associated tree for the default.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3874," void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1766, /**
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1767,  * Replace any DEFAULTs with the associated tree for the default.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1768,  *
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1769,  * @param ttd The TableDescriptor for the target table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1770,  * @param tcl The RCL for the target table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1771,  *
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1772,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1773,  */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1774," void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1775,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1776, {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1777,  // Only subclasses with something to do override this.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1778, }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,856,  * Replace any DEFAULTs with the associated tree for the default.
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,857,  *
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,858,  * @param ttd The TableDescriptor for the target table.
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,859,  * @param tcl The RCL for the target table.
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,860,  *
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,861,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,863," void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,866,"  resultColumns.replaceDefaults(ttd, tcl);"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,689, /**
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,557, /**
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,558,  * Replace any DEFAULTs with the associated tree for the default.
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,559,  *
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,560,  * @param ttd The TableDescriptor for the target table.
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,561,  * @param tcl The RCL for the target table.
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,562,  *
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,563,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,564,  */
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,565," void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)"
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,566,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,567, {
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,568,"  childResult.replaceDefaults(ttd, tcl);"
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,569, }
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,570,
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,931, /**
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,932,  * Replace any DEFAULTs with the associated tree for the default.
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,933,  *
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,934,  * @param ttd The TableDescriptor for the target table.
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,935,  * @param tcl The RCL for the target table.
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,936,  *
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,937,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,938,  */
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,939," void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,940,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,941, {
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,942,"  leftResultSet.replaceDefaults(ttd, tcl);"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,943,"  rightResultSet.replaceDefaults(ttd, tcl);"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,944, }
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,945,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ColumnDefaultsTest.java,147,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ColumnDefaultsTest.java,405,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java,90,
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,171,
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,172,   // DERBY-4413 shows that the value for a generated column will be
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,173,"   // null as the result set is computed as part of an INSERT INTO, so"
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,174,   // accept a null also.
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,175,   newArray[i] =
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,176,    (origArray[i] != null ? origArray[i].getClone() : null);
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,129,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,130, /**
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,131,    Determine whether a column is used for ordering or not.
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,132, **/
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,133, private boolean isOrderingColumn[];
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,134,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,464,     if (!isOrderingColumn[colid]) {
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,465,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,466,      // DERBY-4413 shows that the value for a generated
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,467,      // column will be null as the result set is computed as
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,468,"      // part of an INSERT INTO, so accept a null also."
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,469,      // This column would not be part of the sort key.
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,470,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,471,      continue;
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,472,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,473,     } else {
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,474,"      SanityManager.THROWASSERT(""col["" + colid + ""] is null"");"
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,475,     }
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,565,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,566,  if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,567,   isOrderingColumn = new boolean[template.length];
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,568,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,569,   for (int i = 0; i < isOrderingColumn.length; i++) {
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,570,    isOrderingColumn[i] = false;
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,571,   }
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,572,  }
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,573,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,574,  for (int i = 0; i < columnOrdering.length; i++)
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,579,
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,580,   if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,581,    isOrderingColumn[columnOrderingMap[i]] = true;
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,582,   }
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,585,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1691,   if (resultColumn.isGenerated() || resultColumn.isGeneratedForUnmatchedColumnInInsert())
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,950,  synchronized(this)
java/engine/org/apache/derby/iapi/sql/conn/Authorizer.java,61,    public static final int PRIV_TYPE_COUNT = 8;
java/engine/org/apache/derby/iapi/sql/conn/Authorizer.java,62,
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,185,"     unresolvedColumns = tryRole(lcc, dd, forGrant,"
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,186,"            r, unresolvedColumns);"
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,195,   TableDescriptor td = getTableDescriptor(dd);
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,381,"  * Given the set of yet unresolved column permissions, try to use"
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,382,"  * the supplied role r to resolve them. After this is done, return"
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,383,  * the set of columns still unresolved. If the role is used for
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,384,"  * anything, record a dependency."
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,391,  * @param unresolvedColumns the set of columns yet unaccounted for
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,396,"          String r,"
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,397,          FormatableBitSet unresolvedColumns)
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,410,
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,411,  for(int i = unresolvedColumns.anySetBit();
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,412,   i >= 0;
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,413,   i = unresolvedColumns.anySetBit(i)) {
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,414,
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,415,   if(permittedColumns != null && permittedColumns.get(i)) {
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,416,    unresolvedColumns.clear(i);
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,417,   }
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,418,  }
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,419,
java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java,420,  return unresolvedColumns;
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,744,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesConferredPrivilegesTest.java,66,"    private final static String[] users = {""test_dbo"", ""DonaldDuck""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesConferredPrivilegesTest.java,258,    public void testConferredPrivileges() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesConferredPrivilegesTest.java,2043,        assertSelectPrivilege
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesConferredPrivilegesTest.java,2044,"            (hasPrivilege, c, schema, table, columns, NOCOLUMNPERMISSION);"
java/client/org/apache/derby/client/am/PreparedStatement.java,1003,
java/client/org/apache/derby/client/am/PreparedStatement.java,1423,                if (x instanceof String) {
java/client/org/apache/derby/client/am/PreparedStatement.java,3072,        /*
java/client/org/apache/derby/client/am/PreparedStatement.java,3073,"        static SqlException throwLangDataTypeSetException( LogWriter logWriter,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3074,"                                                           int valType,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3075,                                                           int paramType)
java/client/org/apache/derby/client/am/PreparedStatement.java,3076,
java/client/org/apache/derby/client/am/PreparedStatement.java,3077,            throws SqlException{
java/client/org/apache/derby/client/am/PreparedStatement.java,3078,
java/client/org/apache/derby/client/am/PreparedStatement.java,3079,"            throw new SqlException( logWriter,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3080,"                                    new ClientMessageId(SQLState.LANG_DATA_TYPE_SET_MISMATCH) ,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3081,                                    new Object[]{
java/client/org/apache/derby/client/am/PreparedStatement.java,3082,"                                        Types.getTypeString(valType),"
java/client/org/apache/derby/client/am/PreparedStatement.java,3083,                                        Types.getTypeString(paramType)
java/client/org/apache/derby/client/am/PreparedStatement.java,3084,"                                    },"
java/client/org/apache/derby/client/am/PreparedStatement.java,3085,                                    (Throwable) null);
java/client/org/apache/derby/client/am/PreparedStatement.java,3086,        }
java/client/org/apache/derby/client/am/PreparedStatement.java,3087,        */
java/client/org/apache/derby/client/am/PreparedStatement.java,3088,
java/client/org/apache/derby/client/net/DssConstants.java,25,    static final int MAX_DSS_LEN = 32767;
java/client/org/apache/derby/client/net/NetStatementReply.java,2079,    // FORMAT FOR SQLAM >= 7
java/client/org/apache/derby/client/net/NetStatementReply.java,2080,    //   SQLUDTXTYPE; PROTOCOL TYPE I4; ENVLID 0X02; Length Override 4
java/client/org/apache/derby/client/net/NetStatementReply.java,2081,    //   SQLUDTRDB; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2082,    //   SQLUDTSCHEMA_m; PROTOCOL TYPE VCM; ENVLID 0X3E; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2083,    //   SQLUDTSCHEMA_s; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2084,    //   SQLUDTNAME_m; PROTOCOL TYPE VCM; ENVLID 0X3E; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2085,    //   SQLUDTNAME_s; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2087,                                int columnNumber) throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,2088,        if (readFastUnsignedByte() == CodePoint.NULLDATA) {
java/client/org/apache/derby/client/net/NetStatementReply.java,2089,            return;
java/client/org/apache/derby/client/net/Request.java,1609,"        System.arraycopy(bytes, 0, bytes_, offset_, bytes.length);"
java/client/org/apache/derby/client/net/Request.java,1610,        offset_ += bytes.length;
java/client/org/apache/derby/client/net/Typdef.java,428,        /* 0x50 Empties */
java/client/org/apache/derby/client/net/Typdef.java,429,"        null,"
java/client/org/apache/derby/client/net/Typdef.java,430,        /* 0x51 Empties */
java/client/org/apache/derby/client/net/Typdef.java,431,"        null,"
java/client/org/apache/derby/client/net/Typdef.java,768,"        0x00, // 0x50 Empties"
java/client/org/apache/derby/client/net/Typdef.java,769,"        0x00, // 0x51 Empties"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4836,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6600,"   int drdaType = FdocaConstants.mapJdbcTypeToDrdaType(colType,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7031,"      drdaType = FdocaConstants.mapJdbcTypeToDrdaType(stmt.getOutputParamType(i),true,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7355,"                nullable,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7357,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7469,  writer.writeByte(CodePoint.NULLDATA);
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,135," protected static int mapJdbcTypeToDrdaType(int jdbcType, boolean nullable,"
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,198,    drdaType = DRDAConstants.DRDA_TYPE_NLONG;
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,199,    outlen[0] = LONGVARCHAR_MAX_LEN;
java/drda/org/apache/derby/impl/drda/SQLTypes.java,133," static protected int mapJdbcTypeToDB2SqlType (int jdbctype, boolean nullable,"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,143,"   FdocaConstants.mapJdbcTypeToDrdaType(jdbctype,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,179,     return DRDAConstants.DB2_SQLTYPE_LONG + nullAddVal;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,140,        else { return doubleQuote( schemaName ) + '.' + doubleQuote( unqualifiedName ); }
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,186,        switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,258,        return formatId;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,313,        switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,444,"                        SanityManager.THROWASSERT(""Unexpected formatId "" + formatId);"
java/engine/org/apache/derby/iapi/reference/DRDAConstants.java,144,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends OutputStream {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,37,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38, private static int INITIAL_SIZE = 4096;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,39,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40, private byte[] buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41, private int  position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,42, private int  used;  // how many bytes are used
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,43, private int  beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,44,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,45, public DynamicByteArrayOutputStream() {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,46,  this(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,47, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,48,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,49, public DynamicByteArrayOutputStream(int size) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,50,  super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,51,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,52,  buf = new byte[size];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,53, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,54,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,55, public DynamicByteArrayOutputStream(byte[] data) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,56,  super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,57,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,58,  buf = data;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,59, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,60,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,61, public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,62,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,63,  byte[] cbuf = toBeCloned.getByteArray();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,64,  buf = new byte[cbuf.length];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,65,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,66,"  write(cbuf, 0, cbuf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,67,  position = toBeCloned.getPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,68,  used = toBeCloned.getUsed();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,69,  beginPosition = toBeCloned.getBeginPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,70, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,71,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,72, /*
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,73,  * OutputStream methods
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,74,  */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,75, public void write(int b)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,76, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,77,  if (position >= buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,78,   expandBuffer(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,79,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,80,  buf[position++] = (byte) b;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,81,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,82,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,83,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,84, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,85,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,86," public void write(byte[] b, int off, int len)"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,87, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,88,  if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,89,   expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,90,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,91,"  System.arraycopy(b, off, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,92,  position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,93,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,94,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,95,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,96, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,97,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,98," void writeCompleteStream(InputStream dataIn, int len) throws IOException"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,99, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,100,  if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,101,   expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,102,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,103,"  org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,104,  position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,105,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,106,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,107,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,108, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,109,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,110, public void close()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,111, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,112,  buf = null;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,113,  reset();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,114, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,115,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,116, /*
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,117,  * Specific methods
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,118,  */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,119,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,120, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,121,  Reset the stream for reuse
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,122, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,123, public void reset()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,124, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,125,  position = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,126,  beginPosition = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,127,  used = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,128, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,129,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,130, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,131,  Get a reference to the byte array stored in the byte array output
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,132,  stream. Note that the byte array may be longer that getPosition().
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,133,  Bytes beyond and including the current poistion are invalid.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,134, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,135, public byte[] getByteArray()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,136, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,137,  return buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,138, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,139,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,140, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,141,  Get the number of bytes that was used.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,142, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,143, public int getUsed()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,144, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,145,  return used;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,146, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,147,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,148, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,149,  Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,150, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,151, public int getPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,152, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,153,  return position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,154, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,155,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,156, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,157,  Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,158, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,159, public int getBeginPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,160, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,161,  return beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,162, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,163,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,164, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,165,  Set the position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,166,  It is up to the caller to make sure the stream has no gap of garbage in
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,167,  it or useful information is not left out at the end because the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,168,  does not remember anything about the previous position.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,169, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,170, public void setPosition(int newPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,171, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,172,  if (newPosition > position)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,173,  {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,174,   if (newPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,175,    expandBuffer(newPosition - buf.length);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,176,  }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,177,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,178,  position = newPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,179,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,180,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,181,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,182,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,183,  return ;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,184, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,185,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,186, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,187,  Set the begin position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,188,"  If the newBeginPosition is larger than the stream itself,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,189,"  then, the begin position is not set."
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,190, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,191, public void setBeginPosition(int newBeginPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,192, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,193,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,194,  if (newBeginPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,195,   return;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,196,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,197,  beginPosition = newBeginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,198, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,199,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,200, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,201,  Shrink the buffer left by the amount given. Ie.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,202,  bytes from 0 to amountToShrinkBy are thrown away
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,203, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,204, public void discardLeft(int amountToShrinkBy) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,205,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,206,"  System.arraycopy(buf, amountToShrinkBy, buf, 0,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,207,   used - amountToShrinkBy);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,208,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,209,  position -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,210,  used -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,211, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,212,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,213, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,214,  Expand the buffer by at least the number of bytes requested in minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,215,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,216,"  To optimize performance and reduce memory copies and allocation, we have a staged buffer"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,217,  expansion.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,218,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,219,  <UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,220,  <LI> buf.length < 128k - increase by 4k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,221,  <LI> buf.length < 1Mb - increase by 128k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,222,  <LI> otherwise increase by 1Mb.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,223,  </UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,224,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,225,"  In all cases, if minExpansion is greater than the value about then the buffer will"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,226,  be increased by minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,227, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,228, private void expandBuffer(int minExtension)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,229, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,230,  if (buf.length < (128 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,231,   if (minExtension < INITIAL_SIZE)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,232,    minExtension = INITIAL_SIZE;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,233,  } else if (buf.length < (1024 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,234,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,235,   if (minExtension < (128 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,236,    minExtension = (128 * 1024);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,237,  } else {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,238,   if (minExtension < (1024 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,239,    minExtension = 1024 * 1024;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,240,  }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,241,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,242,  int newsize = buf.length + minExtension;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,243,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,244,  byte[] newbuf = new byte[newsize];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,245,"  System.arraycopy(buf, 0, newbuf, 0, buf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,246,  buf = newbuf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,247, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,248,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,31,public final class InputStreamUtil {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,32,    private static final int SKIP_FRAGMENT_SIZE = Integer.MAX_VALUE;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,33,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,34, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,35,"  Read an unsigned byte from an InputStream, throwing an EOFException"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,36,  if the end of the input is reached.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,37,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,38,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,39,  @exception EOFException if the end of the stream is reached
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,40,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,41,  @see DataInput#readUnsignedByte
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,42,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,43, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,44, public static int readUnsignedByte(InputStream in) throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,45,  int b = in.read();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,46,  if (b < 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,47,   throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,48,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,49,  return b;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,50, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,51,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,52, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,53,  Read a number of bytes into an array.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,54,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,55,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,56,  @exception EOFException if the end of the stream is reached
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,57,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,58,  @see DataInput#readFully
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,59,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,60, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,61," public static void readFully(InputStream in, byte b[],"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,62,"                                 int offset,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,63,                                 int len) throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,64, {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,65,  do {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,66,"   int bytesRead = in.read(b, offset, len);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,67,   if (bytesRead < 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,68,    throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,69,   len -= bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,70,   offset += bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,71,  } while (len != 0);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,72, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,73,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,74,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,75, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,76,  Read a number of bytes into an array.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,77,        Keep reading in a loop until len bytes are read or EOF is reached or
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,78,        an exception is thrown. Return the number of bytes read.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,79,"        (InputStream.read(byte[],int,int) does not guarantee to read len bytes"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,80,         even if it can do so without reaching EOF or raising an exception.)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,81,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,82,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,83, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,84," public static int readLoop(InputStream in,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,85,"                                byte b[],"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,86,"                                int offset,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,87,                                int len)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,88,        throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,89, {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,90,        int firstOffset = offset;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,91,  do {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,92,"   int bytesRead = in.read(b, offset, len);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,93,   if (bytesRead <= 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,94,                break;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,95,   len -= bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,96,   offset += bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,97,  } while (len != 0);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,98,        return offset - firstOffset;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,99, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,100,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,101,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,102,"     * Skips until EOF, returns number of bytes skipped."
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,103,     * @param is
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,104,     *      InputStream to be skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,105,     * @return
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,106,     *      number of bytes skipped in fact.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,107,     * @throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,108,     *      if IOException occurs. It doesn't contain EOFException.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,109,     * @throws NullPointerException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,110,     *      if the param 'is' equals null.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,111,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,112,    public static long skipUntilEOF(InputStream is) throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,113,        if(is == null)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,114,            throw new NullPointerException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,115,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,116,        long bytes = 0;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,117,        while(true){
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,118,"            long r = skipPersistent(is, SKIP_FRAGMENT_SIZE);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,119,            bytes += r;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,120,            if(r < SKIP_FRAGMENT_SIZE)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,121,                return bytes;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,122,        }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,123,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,124,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,125,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,126,"     * Skips requested number of bytes,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,127,     * throws EOFException if there is too few bytes in the stream.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,128,     * @param is
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,129,     *      InputStream to be skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,130,     * @param skippedBytes
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,131,"     *      number of bytes to skip. if skippedBytes <= zero, do nothing."
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,132,     * @throws EOFException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,133,     *      if EOF meets before requested number of bytes are skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,134,     * @throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,135,     *      if IOException occurs. It doesn't contain EOFException.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,136,     * @throws NullPointerException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,137,     *      if the param 'is' equals null.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,138,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,139,"    public static void skipFully(InputStream is, long skippedBytes)"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,140,    throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,141,        if(is == null)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,142,            throw new NullPointerException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,143,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,144,        if(skippedBytes <= 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,145,            return;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,146,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,147,"        long bytes = skipPersistent(is, skippedBytes);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,148,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,149,        if(bytes < skippedBytes)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,150,            throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,151,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,152,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,153,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,154,     * Tries harder to skip the requested number of bytes.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,155,     * <p>
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,156,"     * Note that even if the method fails to skip the requested number of bytes,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,157,"     * it will not throw an exception. If this happens, the caller can be sure"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,158,     * that end-of-stream has been reached.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,159,     *
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,160,     * @param in byte stream
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,161,     * @param bytesToSkip the number of bytes to skip
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,162,     * @return The number of bytes skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,163,     * @throws IOException if reading from the stream fails
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,164,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,165,"    public static final long skipPersistent(InputStream in, long bytesToSkip)"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,166,    throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,167,        long skipped = 0;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,168,        while (skipped < bytesToSkip) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,169,            long skippedNow = in.skip(bytesToSkip - skipped);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,170,            if (skippedNow == 0) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,171,                if (in.read() == -1) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,172,"                    // EOF, return what we have and leave it up to caller to"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,173,                    // decide what to do about it.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,174,                    break;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,175,                } else {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,176,                    skippedNow = 1; // Added to count below.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,177,                }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,178,            }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,179,            skipped += skippedNow;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,180,        }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,181,        return skipped;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,182,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,183,}
java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java,204,    size = (w > 0 ? w : 15);
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,42,        /*
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,43,        ** public statics from 3.0 version of java.sql.ParameterMetaData
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,44,        */
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,45,        public static final int PARAMETER_NO_NULLS = ParameterMetaData.parameterNoNulls;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,46,        public static final int PARAMETER_NULLABLE = ParameterMetaData.parameterNullable;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,47,        public static final int PARAMETER_NULLABLE_UNKNOWN = ParameterMetaData.parameterNullableUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,48,        public static final int PARAMETER_MODE_UNKNOWN = ParameterMetaData.parameterModeUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,49,        public static final int PARAMETER_MODE_IN = ParameterMetaData.parameterModeIn;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,50,        public static final int PARAMETER_MODE_IN_OUT = ParameterMetaData.parameterModeInOut;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,51,        public static final int PARAMETER_MODE_OUT = ParameterMetaData.parameterModeOut;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,17,   See the License for the specific language governing permissions and
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1476,    public void testGetColumnsReadOnly() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1490,    public void testGetColumnsModify() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1749,    throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1801,    public static void crossCheckGetColumnRowAndResultSetMetaData(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1803,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1832,        else if (dmdColumnType == Types.JAVA_OBJECT && usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1045,            pingServer(5); // Wait for the server to come up in a reasonable time....
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1176,     * @param iterations How many times to try pinging the server to see if it is running.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1177,     * Sleeps <CODE>SLEEP_TIME_MILLIS</CODE> between tries.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1181,    private void pingServer( int iterations )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1185,"        ping( new NetworkServerControl(), iterations );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1189,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1190,"  private void ping( NetworkServerControl controller, int iterations )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1208,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1209,"        System.out.println( ""Server did not come up: "" + finalException.getMessage() );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1,/*
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,91,        TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(UDTTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,197,"             ""select getCurrencyCode( totalPrice ), getAmount( totalPrice ), getTimeInstant( totalPrice ) from orders"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,200,"                 { ""USD"" ,         ""9.99000"" ,        ""2009-10-16 14:24:43.0"" },"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,516,"  dropSchemaObject( conn, TABLE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,530,"  dropSchemaObject( conn, FUNCTION, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,544,"  dropSchemaObject( conn, PROCEDURE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,556," protected static void dropSchemaObject( Connection conn, String genus, String objectName )"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,561,"   ps = prepare( conn, ""drop "" + genus + "" "" + objectName );"
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,3,   Derby - Class org.apache.derby.shared.common.io.DynamicByteArrayOutputStream
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,22,package org.apache.derby.shared.common.io;
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,23,
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,24,import org.apache.derby.shared.common.sanity.SanityManager;
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,3,   Derby - Class org.apache.derby.shared.common.io.InputStreamUtil
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,22,package org.apache.derby.shared.common.io;
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,31,public class InputStreamUtil {
java/client/org/apache/derby/client/net/Request.java,26,import org.apache.derby.shared.common.io.DynamicByteArrayOutputStream;
java/client/org/apache/derby/client/net/Request.java,28,import org.apache.derby.shared.common.sanity.SanityManager;
java/client/org/apache/derby/client/net/Request.java,1625,        // should not be called if val is null
java/client/org/apache/derby/client/net/Request.java,1626,        if ( val == null )
java/client/org/apache/derby/client/net/Request.java,1627,        {
java/client/org/apache/derby/client/net/Request.java,1628,"            SanityManager.THROWASSERT( ""UDT is null"" );"
java/client/org/apache/derby/client/net/Request.java,1629,        }
java/client/org/apache/derby/client/net/Request.java,1630,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends org.apache.derby.shared.common.io.DynamicByteArrayOutputStream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,37,{
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38, public DynamicByteArrayOutputStream() { super(); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,39, public DynamicByteArrayOutputStream(int size) { super( size ); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40, public DynamicByteArrayOutputStream(byte[] data) { super( data ); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41, public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) { super( toBeCloned ); }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,31,public final class InputStreamUtil extends org.apache.derby.shared.common.io.InputStreamUtil
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,32,{}
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7527,"  * @param elemNum column number we are returning (in case of result set), or,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,699,"        goodStatement( conn, ""create table t_10_a( a price_09_a )\n"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,708,"             ""\""APP\"".\""PRICE_09_A\"""","
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1106,        if ( val == null )
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1107,        {
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1108,"            SanityManager.THROWASSERT( ""UDT is null"" );"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,297,  @param reuseResult Whether or not to reuse the result row.
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,270,  int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1420,  int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1459,   *  arg8: reuseResult - whether or not the result row can be reused
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1460,"   *      (ie, will it always be the same)"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1461,   *  arg9: doesProjection - does this node do a projection
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1462,   *  arg10: estimated row count
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1463,   *  arg11: estimated cost
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1464,   *  arg12: close method
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1465,   */
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1600,"     ClassName.NoPutResultSet, 10);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3502, int[] mapSourceColumns()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3504,  int[]   mapArray = new int[size()];
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3524,     mapArray[index] = vcn.getSourceColumn().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3539,     mapArray[index] = cr.getSource().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3548,  return mapArray;
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,223,"   constantRestriction, mapRefItem,"
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,503,"    result.setColumn(index + 1, sourceRow.getColumn(projectMapping[index]));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,34,import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,395,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,396,"        final Statement stmt = createStatement(ResultSet.TYPE_FORWARD_ONLY,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,398,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,399,        final ResultSet rs =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,400,"            stmt.executeQuery(""SELECT * FROM "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,403,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,405,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,407,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,410,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,411,"            assertEquals(""Unexpected value in val column"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,413,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,418,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,422,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,432,"    private void verifyBlob(final int expectedVal,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,433,"                            final int expectedSize,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,434,                            final Blob blob)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,441,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,444,"                assertEquals(""Unexpected value in stream at position "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,470,"        println(""Setup of: "" + getName());"
java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java,62,   throws StandardException
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,203,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,204,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,205,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,226,  else
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,227,  {
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,228,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,229,  }
java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java,78,"  lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java,79,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,888,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,889,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,890,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,911,  else
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,912,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,913,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,914,  }
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,110,  /* Get or re-use the row changer.
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,111,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,112,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,113,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,114,   */
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,115,  if (! firstExecute)
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,116,  {
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,117,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,118,  }
java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java,119,
java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java,46,  *
java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java,47,  *  @exception StandardException Standard Derby error policy.
java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java,50,   throws StandardException
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,65, NoPutResultSet[] subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,87,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,105,
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,106,  StatementContext sc = lcc.getStatementContext();
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,107,"  sc.setTopResultSet(this, (NoPutResultSet[]) null);"
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,108,
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,109,  // Pick up any materialized subqueries
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,110,  subqueryTrackingArray = sc.getSubqueryTrackingArray();
java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java,43,  *
java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java,44,  *  @exception StandardException Standard Derby error policy.
java/engine/org/apache/derby/impl/sql/execute/SetTransactionResultSet.java,47,   throws StandardException
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,304,   * NOTE: We need to set ourself as the top result set
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,305,   * if this is not the 1st execution.  (Done in constructor
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,306,   * for 1st execution.)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,327,  else
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,328,  {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,329,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,330,  }
java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java,79,  if (!firstExecute)
java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java,80,"   lcc.getStatementContext().setTopResultSet(this, subqueryTrackingArray);"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,237,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,242,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,252,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,256,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,179,    /**
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,180,     * Reopen the stream.
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,181,     */
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,182,    public void reopen()
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,183,            throws IOException {
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,184,        this.closed = false;
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,185,        reset();
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,186,    }
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,187,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,36,import junit.framework.*;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,37,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,38,import org.apache.derbyTesting.functionTests.util.DerbyJUnitTest;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,39,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,670,"  checkRows( rs, types, rows, casts );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,671,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,751, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,752, // Verify that we select the values we
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,753, // originally inserted into a table.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,754, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,755," private void checkRows( ResultSet rs, TypeDescriptor[] types, Object[][] rows, List casts )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,756,  throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,757, {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,758,  int     rowCount = rows.length;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,759,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,760,  for ( int i = 0; i < rowCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,761,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,762,   rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,763,"   checkRow( rs, types, rows[ i ], casts );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,764,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,765, }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,766,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,767, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,768, // Verify that we select the values we
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,769, // originally inserted into a row.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,770, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,771," private void checkRow( ResultSet rs, TypeDescriptor[] types, Object[] row, List casts )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,772,  throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,773, {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,774,  int    typeCount = types.length;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,775,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,776,  for ( int i = 0; i < typeCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,777,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,778,   TypeDescriptor type = types[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,779,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,780,   if ( getServerVersion().atLeast( type.getDerbyVersion() ) )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,781,   {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,782,    String columnName = type.getDerbyTypeName();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,783,    Object expectedValue = row[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,784,"    Object actualValue = getColumn( rs, columnName, type );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,785,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,786,"    println( ""Comparing column "" + columnName + "": "" + expectedValue + "" to "" + actualValue );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,787,"    compareObjects( columnName, expectedValue, actualValue );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,788,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,789,"    checkCoercions( rs, columnName, type, casts );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,790,   }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,791,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,792, }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,793,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,794, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,795, // Verify all legal jdbc coercions of a data value.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,796, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,797," private void checkCoercions( ResultSet rs, String columnName, TypeDescriptor type, List casts )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,798,  throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,799, {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,800,  T_CN  coercionDesc = COERCIONS[ getCoercionIndex( type.getJdbcType() ) ];
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,801,  boolean[] coercions = coercionDesc.getCoercions();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,802,  int   count = coercions.length;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,803,  int   legalCoercions = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,804,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,805,"  println( ""Checking coercions for "" + columnName );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,806,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,807,  for ( int i = 0; i < count; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,808,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,809,   if ( coercions[ i ] )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,810,   {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,811,    legalCoercions++;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,813,    int  jdbcType = COERCIONS[ i ].getJdbcType();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,814,"    Object retval = getColumn( rs, columnName, jdbcType );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,816,    if ( casts != null ) { casts.add( retval ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,818,"    println( ""\t"" + jdbcType + "":\t"" + retval );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,819,   }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,821,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,822,"  // finally, try getObject()"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,824,  Object objval = rs.getObject( columnName );
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,825,"  if ( objval == null ) { println( ""\tgetObject() = null"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,826,  else
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,827,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,828,   StringBuffer buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,829,"   buffer.append( ""\tgetObject() = "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,830,   buffer.append( objval.getClass().getName() );
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,831,"   buffer.append( ""( "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,832,   buffer.append( objval );
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,833,"   buffer.append( "" )"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,834,   println( buffer.toString() );
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,835,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,836, }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,837,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,903, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,904, // Add a row of null columns.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,905, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,906, private Object[][] makeRows( Object[][] rows )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,907, {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,908,  int   count = rows.length;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,909,  int   columns = rows[0].length;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,910,  Object[][] result = new Object[ count + 1 ][];
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,911,  int   idx = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,912,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,913,  result[ idx++ ] = makeNullRow( columns );
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,914,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,915,  for ( int i = 0; i < count; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,916,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,917,   result[ idx++ ] = rows[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,918,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,919,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,920,  return result;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,921, }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,922,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,952, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,953, // Lookup TypeDescriptors by jdbc type
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,954, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,955, private TypeDescriptor getType( int jdbcType )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,956, {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,957,  int   count = ALL_TYPES.length;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,958,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,959,  for ( int i = 0; i < count; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,960,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,961,   TypeDescriptor type = ALL_TYPES[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,962,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,963,   if ( type.getJdbcType() == jdbcType ) { return type; }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,964,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,965,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,966,  return null;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,967, }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,968,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1170, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1171, // Logic for verifying that a value was stuffed correctly.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1172, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1173," private void checkParameter( ResultSet rs, int param, Object value )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1174,  throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1175, {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1176,  Object     actualValue;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1177,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1178,  if ( value == null )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1179,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1180,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1181,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1182,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1183,"  println( ""Checking "" + value.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1184,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1185,  if ( value instanceof Boolean ) {  actualValue = new Boolean( rs.getBoolean( param ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1186,  else if ( value instanceof Byte ) { actualValue = new Byte( rs.getByte( param ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1187,  else if ( value instanceof Short ) { actualValue = new Short( rs.getShort( param ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1188,  else if ( value instanceof Integer ) { actualValue = new Integer( rs.getInt( param ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1189,  else if ( value instanceof Long ) { actualValue = new Long( rs.getLong( param ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1190,  else if ( value instanceof Float ) { actualValue = new Float( rs.getFloat( param ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1191,  else if ( value instanceof Double ) { actualValue = new Double( rs.getDouble( param ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1192,  else if ( value instanceof String ) { actualValue = rs.getString( param ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1193,  else if ( value instanceof BigDecimal ) { actualValue = rs.getBigDecimal( param ); }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1194,  else
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1195,  {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1196,   actualValue = rs.getObject( param );
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1197,  }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1198,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1199,  assertTrue( value.equals( actualValue ) );
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1200, }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1201,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1202,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1225, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1226," // Get a data value from a procedure's output arg, given its type."
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1227, //
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1228," private Object getOutArg( CallableStatement cs, int arg, TypeDescriptor type )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1229,  throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1230, {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1231,  int   jdbcType = type.getJdbcType();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1233,"  return getOutArg( cs, arg, jdbcType );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1234, }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,754,     * @param columnIndex the index of the column to check
java/client/org/apache/derby/client/am/ResultSet.java,30,import org.apache.derby.shared.common.i18n.MessageUtil;
java/client/org/apache/derby/client/am/ResultSet.java,207,
java/client/org/apache/derby/client/am/ResultSet.java,208,    private boolean[] streamUsedFlags_;
java/client/org/apache/derby/client/am/ResultSet.java,296,
java/client/org/apache/derby/client/am/ResultSet.java,297, unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,1122,        useStream(column);
java/client/org/apache/derby/client/am/ResultSet.java,1153,        useStream(column);
java/client/org/apache/derby/client/am/ResultSet.java,1204,        useStream(column);
java/client/org/apache/derby/client/am/ResultSet.java,2099, resetRowsetFlags();
java/client/org/apache/derby/client/am/ResultSet.java,2100, unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,2140,    unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,2192,    unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,2247, unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,2364, unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,2447,
java/client/org/apache/derby/client/am/ResultSet.java,2448, unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,2574,
java/client/org/apache/derby/client/am/ResultSet.java,2575, unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,3694,
java/client/org/apache/derby/client/am/ResultSet.java,3695,         unuseStreams();
java/client/org/apache/derby/client/am/ResultSet.java,3696,
java/client/org/apache/derby/client/am/ResultSet.java,5489,    void useStream(int columnIndex) throws SqlException {
java/client/org/apache/derby/client/am/ResultSet.java,5490,
java/client/org/apache/derby/client/am/ResultSet.java,5491, if(streamUsedFlags_[columnIndex - 1]){
java/client/org/apache/derby/client/am/ResultSet.java,5492,"     throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/ResultSet.java,5493,            new ClientMessageId(SQLState.LANG_STREAM_RETRIEVED_ALREADY));
java/client/org/apache/derby/client/am/ResultSet.java,5494, }
java/client/org/apache/derby/client/am/ResultSet.java,5495,
java/client/org/apache/derby/client/am/ResultSet.java,5496, streamUsedFlags_[columnIndex - 1] = true;
java/client/org/apache/derby/client/am/ResultSet.java,5501,    private void unuseStreams(){
java/client/org/apache/derby/client/am/ResultSet.java,5502,
java/client/org/apache/derby/client/am/ResultSet.java,5503, if(streamUsedFlags_ == null){
java/client/org/apache/derby/client/am/ResultSet.java,5504,     streamUsedFlags_ = new boolean[ resultSetMetaData_.columns_ ];
java/client/org/apache/derby/client/am/ResultSet.java,5505,     return;
java/client/org/apache/derby/client/am/ResultSet.java,5506, }
java/client/org/apache/derby/client/am/ResultSet.java,5507,
java/client/org/apache/derby/client/am/ResultSet.java,5508, for(int i = 0;
java/client/org/apache/derby/client/am/ResultSet.java,5509,     i < streamUsedFlags_.length;
java/client/org/apache/derby/client/am/ResultSet.java,5510,     i ++){
java/client/org/apache/derby/client/am/ResultSet.java,5511,
java/client/org/apache/derby/client/am/ResultSet.java,5512,     streamUsedFlags_[i] = false;
java/client/org/apache/derby/client/am/ResultSet.java,5513,
java/client/org/apache/derby/client/am/ResultSet.java,5514, }
java/client/org/apache/derby/client/am/ResultSet.java,5515,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,206,     * Indicates which columns have already been fetched
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,207,     * as a stream for a row. Created on-demand by a getXXXStream call.
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,209,    private boolean[] streamUsedFlags;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,511,   // Clear the indication of which columns were fetched as streams.
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,512,   if (streamUsedFlags != null)
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,513,"       Arrays.fill(streamUsedFlags, false);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,1128,      useStream(columnIndex);
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,1241,      useStream(columnIndex);
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4550,     * Mark a column as already having a stream accessed from it.
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4551,"     * If the stream was already accessed, then throw an exception."
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4552,     * @param columnIndex
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4553,     * @throws SQLException
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4555,    final void useStream(int columnIndex) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4556,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4557,     if (streamUsedFlags == null)
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4558,      streamUsedFlags = new boolean[getMetaData().getColumnCount()];
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4559,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4560,     else if (streamUsedFlags[columnIndex - 1])
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4561,         throw newSQLException(SQLState.LANG_STREAM_RETRIEVED_ALREADY);
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4562,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4563,     streamUsedFlags[columnIndex - 1] = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,425,            if (origRS.getClob(1) != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,427,"                        getStreamCheckSum(origRS.getClob(1).getAsciiStream()),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,430,"                        getStreamCheckSum(origRS.getClob(1).getAsciiStream()),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,30,import java.sql.Connection;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,123,        long new_length = rs3.getBlob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,129,        InputStream lStream = rs3.getBlob(1).getBinaryStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,172,        long new_length = rs3.getBlob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,177,        InputStream lStream = rs3.getBlob(1).getBinaryStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,219,        long new_length = rs3.getClob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,224,        InputStream lStream = rs3.getClob(1).getAsciiStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,267,        long new_length = rs3.getClob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,272,        InputStream lStream = rs3.getClob(1).getAsciiStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,309,        long new_length = rs3.getClob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,314,        Reader lStream = rs3.getClob(1).getCharacterStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,347,        long new_length = rs3.getClob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,351,        Reader lStream = rs3.getClob(1).getCharacterStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,386,        long new_length = rs3.getClob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,390,        Reader lStream = rs3.getClob(1).getCharacterStream();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,428,        long new_length = rs3.getClob(1).length();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,429,        Clob fish = rs3.getClob(1);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobStreamsTest.java,432,        Reader lStream = rs3.getClob(1).getCharacterStream();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java,2061,                    actualValue = squeezeString(  rs.getBlob( column ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java,2062,                    actualValueByName = squeezeString(  rs.getBlob( columnName ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java,2065,                    actualValue = squeezeString(  rs.getClob( column ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java,2066,                    actualValueByName = squeezeString(  rs.getClob( columnName ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,4521,            int len = (int)rs.getClob(sqlType).length();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,4525,"                    rs.getClob(sqlType).getSubString(1, len).trim());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,4543,            long len = rs.getBlob(sqlType).length();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,4546,"                    Arrays.equals(rs.getBlob(sqlType).getBytes(1, (int)len),"
java/client/org/apache/derby/client/net/NetDatabaseMetaData.java,132,        return supportsSessionDataCaching_;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java,42,                return suite;
java/client/org/apache/derby/client/net/NetConnection.java,1301,"        extnam_ = ""derbydnc"" + java.lang.Thread.currentThread().getName();"
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,685,    activation.clearIndexScanInfo();
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1565,"                assertSQLState(""XN017"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1566,                // rollback the bad insert.
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1567,                rollback();
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,529, /**
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,530,         * Return the executable name for spawning java commands.
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,531,         * This will be <path to j9>/j9  for j9 jvms.
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,532,  * @return full path to java executable.
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,533,         */
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,534,         public static final String getJavaExecutableName() {
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,535,"             String vmname = getSystemProperty(""com.ibm.oti.vm.exe"");"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,536,             if (vmname == null)
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,537,"                 vmname = getSystemProperty(""java.home"") + File.separator + ""bin"" +"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,538,"                 File.separator +""java"";"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,539,             return vmname;
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,540,         }
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,541,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,542,
java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java,3, * Derby - Class org.apache.derbyTesting.functionTests.util.DatabasePropertyTestSetup
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,46, * Testing for FileLocks that prevent Derby Double Boot.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,48," * For Sun phoneME, test that the property {@code"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,78,"     * Creates a suite with two testcases, with and without some extra"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,79,     * system properties.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,81,     * @return The test suite with both English and German locales.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,175,            // Create a socket so we know when subprogram has booted.  Since we
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,176,"            // run this test only in embedded mode, (re)use derby server port."
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,178,            parentService.setSoTimeout(60000); // max we wait is 60s
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,122,"        // FIXME: I tried to use the DatabasePropertyTestSetup.singleProperty,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,123,"        // but for some reason it failed to do the job, no matter where in the"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,124,        // decorator stack in decorateTest I placed it. Should be investigated
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,125,        // so this manual set/reset code of the property can be removed.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,126,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,34,* <p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,35, * You can verify this subprogram by invoking it directly as:
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,36, * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,37, * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,38, * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname>}
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,39, * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,41,import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,105,"        test = TestConfiguration.singleUseDatabaseDecorator(test, dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,106,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,107,        test = SecurityManagerSetup.noSecurityManager(test);
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,108,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,109,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,110,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,111,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,112,    String oldPropValue = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,114,    protected void setUp() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,115,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,116,        super.setUp();
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,117,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,118,"        // For phoneMe, we won't see DATA_MULTIPLE_JBMS_ON_DB, but instead we"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,119,        // can check that we get DATA_MULTIPLE_JBMS_FORCE_LOCK if we set
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,120,        // derby.database.forceDatabaseLock.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,121,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,123,"            // Can't use the DatabasePropertyTestSetup.singleProperty, since"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,124,"            // that method sets a database property (not a system property),"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,125,            // and the minion is the one creating the database here. An
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,126,            // alternative would be to let minion set it.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,127,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,128,            oldPropValue =
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,129,"                System.getProperty(""derby.database.forceDatabaseLock"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,130,"            System.setProperty(""derby.database.forceDatabaseLock"", ""true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,132,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,133,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,134,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,135,    protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,136,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,137,        if (JDBC.vmSupportsJSR169()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,138,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,139,            if (oldPropValue != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,140,"                System.setProperty(""derby.database.forceDatabaseLock"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,141,                                   oldPropValue);
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,142,            } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,143,                // FIXME: Java 1.5 only: improve code when we move to that
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,144,                // source level.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,145,"                // System.clearProperty(""derby.database.forceDatabaseLock"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,146,"                System.setProperty(""derby.database.forceDatabaseLock"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,147,"                                   ""false"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,148,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,151,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,153,        super.tearDown();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,853,    tableNumber = ft.getTableNumber();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,854,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,855,    {
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,856,"     SanityManager.ASSERT(tableNumber != -1,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,857,"      ""tableNumber not expected to be -1"");"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,858,    }
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,869,    ResultColumn ftRC =
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,870,     ft.getResultColumns().getResultColumn(columnName);
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,872,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,873,    {
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,874,"     SanityManager.ASSERT(ftRC != null,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,875,"      ""Failed to find column '"" + columnName + ""' in the "" +"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,876,"      ""RCL for '"" + ft.getTableName() + ""'."");"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2376,   ** Check type compatability.  We want to make sure that
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2377,   ** the types are assignable in either direction
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2378,   ** and they are comparable.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2381,   if (
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2382,"    !thisExpr.getTypeCompiler().storable(otherTypeId, cf) &&"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2383,"    !otherExpr.getTypeCompiler().storable(thisTypeId, cf))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,324,     * <li>Add a new bad implicit cast to test_06_implicitCasts()</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,498,"     * Test that values are implicitly cast to boolean according to the rules in the SQL Standard,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,499,"     * part 2, section 6.12 (<cast specification>), general rule 20. Other than booleans themselves,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,500,     * the only legal casts are from string types to boolean. The following transformations are applied
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,501,     * to the strings:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,502,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,503,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,504,     * <ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,505,     * <li>Trim whitespace off the string</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,506,"     * <li>Then apply the rules in section 5.3 (<literal>). This means that the trimmed string must be 'TRUE', 'FALSE', or 'UNKNOWN', regardless of case.</li>"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,507,"     * <li>Otherwise, raise an exception.</li>"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,508,     * </ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,509,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,510,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,511,"     * See <a href=""https://issues.apache.org/jira/browse/DERBY-4658"">DERBY-4658</a>."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,514,    public void test_06_implicitCasts() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,518,"        vetGoodImplicitCastFromString( conn, ""'true'"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,519,"        vetGoodImplicitCastFromString( conn, ""'false'"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,520,"        vetGoodImplicitCastFromString( conn, ""'TRUE'"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,521,"        vetGoodImplicitCastFromString( conn, ""'FALSE'"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,522,"        vetGoodImplicitCastFromString( conn, ""' true '"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,523,"        vetGoodImplicitCastFromString( conn, ""' false '"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,524,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,525,"        vetGoodImplicitCastFromString( conn, ""cast (null as char( 10 ) )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,526,"        vetGoodImplicitCastFromString( conn, ""cast (null as clob )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,527,"        vetGoodImplicitCastFromString( conn, ""cast (null as long varchar )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,528,"        vetGoodImplicitCastFromString( conn, ""cast (null as varchar( 10 ) )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,529,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,530,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as char( 10 ) )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,531,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as clob )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,532,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as long varchar)"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,533,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as varchar( 10 ) )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,534,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,535,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as char( 10 ) )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,536,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as clob )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,537,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as long varchar)"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,538,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as varchar( 10 ) )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,539,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,540,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""'neither'"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,541,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,542,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as char(10))"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,543,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as clob)"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,544,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as long varchar)"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,545,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as varchar(10))"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,546,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,549,        // char type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,551,        // clob type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,557,        // long varchar type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,563,        // varchar type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,567,"    private void vetGoodImplicitCastFromString( Connection conn, String text, Boolean booleanValue ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,568,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,569,        String expectedValue = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,570,        if ( booleanValue != null ) { expectedValue = booleanValue.toString(); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,571,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,572,        assertResults
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,573,            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,574,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,575,"             makeImplicitCast( text ),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,576,             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,577,             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,578,"                 { expectedValue },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,579,"             },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,580,             false
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,581,             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,582,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,583,    private String makeImplicitCast( String text )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,584,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,585,        return
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,586,"            ""select isindex from sys.sysconglomerates where conglomeratename = 'foo'\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,587,"            ""union\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,588,"            ""values ( "" + text + "" )\n"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,589,    }
java/engine/org/apache/derby/iapi/types/SQLDate.java,474,                valueString = parser.getTrimmedString();
java/engine/org/apache/derby/iapi/types/SQLDate.java,510,            valueString = parser.checkEnd();
java/engine/org/apache/derby/iapi/types/SQLDate.java,544,            valueString = dateStr;
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,522,            valueString = parser.getTrimmedString();
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,536,            valueString = timestampStr;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1607,        // See DERBY-3856 - there's a diff between Embedded and DerbyNetClient
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1608,        // in how the cast returns the following...
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1609,        if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1610,"            JDBC.assertFullResultSet(rs, new String[][] { { ""1970-01-01"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1612,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1613,"            JDBC.assertFullResultSet(rs, new String[][] { { ""1970-01-01"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1614,"                ""2003-03-05-17.05.43.111111"" } }, true);"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,551,  /* The operand for this aggregate node was initialized at bind
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,552,   * time. Between then and now it's possible that certain changes
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,553,   * have been made to the query tree which affect this operand. In
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,554,"   * particular, if the operand was pointing to a result column in"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,555,   * a JoinNode and then that JoinNode was flattened during pre-
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,556,"   * processing, all of the references to that JoinNode--including"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,557,   * this aggregate's operand--need to be updated to reflect the
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,558,   * fact that the Join Node no longer exists. So check to see if
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,559,"   * the operand is a column reference, and if so, make a call to"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,560,   * remap it to its underlying expression. If nothing has happened
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,561,   * then this will be a no-op; but if something has changed to void
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,562,"   * out the result column to which the operand points, the result"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,563,"   * column will be marked ""redundant"" and the following call should"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,564,   * remap as appropriate. DERBY-3880.
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,565,   */
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,566,  if (operand instanceof ColumnReference)
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,567,  {
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,568,   ((ColumnReference)operand).remapColumnReferencesToExpressions();
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,569,  }
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,570,
java/engine/org/apache/derby/impl/sql/compile/FromList.java,717,          GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/FromList.java,760,              gbl);
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,494,       GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,1431,       GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1425,       GroupByList gbl)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1090,           groupByList);
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,73,  *
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,76, void rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,261,  {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,262,   /* Has the activation class changed or has the activation been
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,263,    * invalidated? */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,264,   if (gc != ps.getActivationClass() || !ac.isValid())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,265,   {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,267,                GeneratedClass newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,268,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,269,    if (gc != ps.getActivationClass()) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,270,     // ensure the statement is valid by rePreparing it.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,271,     // DERBY-3260: If someone else reprepares the statement at
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,272,"     // the same time as we do, there's a window between the"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,273,     // calls to rePrepare() and getActivationClass() when the
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,274,"     // activation class can be set to null, leading to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,275,"     // NullPointerException being thrown later. Therefore,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,276,     // synchronize on ps to close the window.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,277,     synchronized (ps) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,278,      ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,279,      newGC = ps.getActivationClass();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,280,     }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,281,    } else {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,282,"     // Reuse the generated class, we just want a new activation"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,283,     // since the old is no longer valid.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,284,     newGC = gc;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,286,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,287,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,288,    /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,289,"    ** If we get here, it means the Activation has been invalidated"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,290,    ** or the PreparedStatement has been recompiled.  Get a new
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,291,    ** Activation and check whether the parameters are compatible.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,292,"    ** If so, transfer the parameters from the old Activation to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,293,"    ** the new one, and make that the current Activation.  If not,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,294,    ** throw an exception.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,295,    */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,296,    BaseActivation  newAC = (BaseActivation) newGC.newInstance(lcc);
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,297,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,298,    DataTypeDescriptor[] newParamTypes = ps.getParameterTypes();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,299,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,300,    /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,301,    ** Link the new activation to the prepared statement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,302,    */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,303,"    newAC.setupActivation(ps, ac.getScrollable());"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,304,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,305,"    newAC.setParameters(ac.getParameterValueSet(), paramTypes);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,306,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,307,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,308,    /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,309,    ** IMPORTANT
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,310,    **
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,311,    ** Copy any essential state from the old activation
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,312,    ** to the new activation. This must match the state
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,313,    ** setup in EmbedStatement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,314,"    ** singleExecution, cursorName, holdability, maxRows."
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,315,    */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,316,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,317,    if (ac.isSingleExecution())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,318,     newAC.setSingleExecution();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,319,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,320,    newAC.setCursorName(ac.getCursorName());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,321,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,322,    newAC.setResultSetHoldability(ac.getResultSetHoldability());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,323,    if (ac.getAutoGeneratedKeysResultsetMode()) //Need to do copy only if auto generated mode is on
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,324,"     newAC.setAutoGeneratedKeysResultsetInfo(ac.getAutoGeneratedKeysColumnIndexes(),"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,325,     ac.getAutoGeneratedKeysColumnNames());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,326,    newAC.setMaxRows(ac.getMaxRows());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,327,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,328,    // break the link with the prepared statement
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,329,"    ac.setupActivation(null, false);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,330,    ac.close();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,331,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,332,    /* Remember the new class information */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,333,    ac = newAC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,334,    gc = newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,335,    paramTypes = newParamTypes;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,226, public void rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,230,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,231,   if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,232,"    SanityManager.ASSERT(ps == this, ""ps != this"");"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,250,    rePrepare(lcc);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,175,   for (;;) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,176,
java/engine/org/apache/derby/impl/sql/GenericStatement.java,177,    if (foundInCache) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,178,     if (preparedStmt.referencesSessionSchema()) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,192,    if (!preparedStmt.compilingStatement) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,193,     break;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,194,    }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,195,
java/engine/org/apache/derby/impl/sql/GenericStatement.java,196,    try {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,197,     preparedStmt.wait();
java/engine/org/apache/derby/impl/sql/GenericStatement.java,198,    } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,199,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,200,    }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,545,    preparedStmt.notifyAll();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,890,                    columnNumberBeforeFlattening);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,328,"    public ResultColumn getResultColumn(int tableNumber, int columnNumber)"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,350,"                            // Found matching (t,c) within this top resultColumn"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,351,                            resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,352,                            return resultColumn;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,353,
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,73,  * @return the re-prepared statement (may be a new PreparedStatement)
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,76, PreparedStatement rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,261,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,262,  /* Has the activation class changed or has the activation been
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,263,   * invalidated? */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,264,  if (gc != ps.getActivationClass() || !ac.isValid())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,266,         GeneratedClass newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,267,         ExecPreparedStatement newPS;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,268,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,269,   if (gc != ps.getActivationClass()) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,270,    // ensure the statement is valid by rePreparing it.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,271,    // DERBY-3260: If someone else reprepares the statement at
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,272,"    // the same time as we do, there's a window between the"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,273,    // calls to rePrepare() and getActivationClass() when the
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,274,"    // activation class can be set to null, leading to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,275,"    // NullPointerException being thrown later. Therefore,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,276,    // synchronize on ps to close the window.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,277,    synchronized (ps) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,278,     newPS = (ExecPreparedStatement) ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,279,     newGC = newPS.getActivationClass();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,280,    }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,281,   }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,282,   else
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,284,    newGC = gc;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,285,    newPS = ps;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,286,   }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,288,   /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,289,"   ** If we get here, it means the Activation has been invalidated"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,290,   ** or the PreparedStatement has been recompiled.  Get a new
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,291,   ** Activation and check whether the parameters are compatible.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,292,"   ** If so, transfer the parameters from the old Activation to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,293,"   ** the new one, and make that the current Activation.  If not,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,294,   ** throw an exception.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,295,   */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,296,   BaseActivation newAC = (BaseActivation) newGC.newInstance(lcc);
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,297,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,298,   DataTypeDescriptor[] newParamTypes = newPS.getParameterTypes();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,299,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,300,   /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,301,   ** Link the new activation to the prepared statement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,302,   */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,303,"   newAC.setupActivation(newPS, ac.getScrollable());"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,304,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,305,"   newAC.setParameters(ac.getParameterValueSet(), paramTypes);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,306,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,307,   /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,308,   ** IMPORTANT
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,309,   **
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,310,   ** Copy any essential state from the old activation
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,311,   ** to the new activation. This must match the state
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,312,   ** setup in EmbedStatement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,313,"   ** singleExecution, cursorName, holdability, maxRows."
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,314,   */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,315,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,316,   if (ac.isSingleExecution())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,317,    newAC.setSingleExecution();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,318,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,319,   newAC.setCursorName(ac.getCursorName());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,320,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,321,   newAC.setResultSetHoldability(ac.getResultSetHoldability());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,322,   if (ac.getAutoGeneratedKeysResultsetMode()) //Need to do copy only if auto generated mode is on
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,323,"    newAC.setAutoGeneratedKeysResultsetInfo(ac.getAutoGeneratedKeysColumnIndexes(),"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,324,      ac.getAutoGeneratedKeysColumnNames());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,325,   newAC.setMaxRows(ac.getMaxRows());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,326,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,327,   // break the link with the prepared statement
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,328,"   ac.setupActivation(null, false);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,329,   ac.close();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,330,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,331,   /* Remember the new class information */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,332,   ac = newAC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,333,   gc = newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,334,   ps = newPS;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,335,   paramTypes = newParamTypes;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,226, public PreparedStatement rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,230,   return ps;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,231,  }
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,233,  return this;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,250,    PreparedStatement ps = rePrepare(lcc);
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,251,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,252,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,253,"     SanityManager.ASSERT(ps == this, ""ps != this"");"
java/engine/org/apache/derby/impl/sql/GenericStatement.java,174,   for (;;)
java/engine/org/apache/derby/impl/sql/GenericStatement.java,175,   {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,176,    if (preparedStmt.compilingStatement)
java/engine/org/apache/derby/impl/sql/GenericStatement.java,177,    {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,178,     preparedStmt = new GenericPreparedStatement(this);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,179,     break;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,180,    }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,182,    if (foundInCache)
java/engine/org/apache/derby/impl/sql/GenericStatement.java,183,    {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,184,     if (preparedStmt.referencesSessionSchema())
java/engine/org/apache/derby/impl/sql/GenericStatement.java,185,     {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,199,    break;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,328,"     * cf. DERBY-4695, we can remove this parameter."
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,355,                        if (ft.getTableNumber() == tableNumber &&
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,356,                                rc.getColumnPosition() == columnNumber) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,357,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,358,"                            // Found matching (t,c) within this top"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,359,                            // resultColumn. Now do sanity check that column
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,360,                            // name is correct. Remove when DERBY-4695 is
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,361,                            // fixed.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,362,                            if (columnName.equals(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,363,                                        vcn.getSourceColumn().getName())) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,364,                                resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,365,                                return resultColumn;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,366,                            } else {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,367,                                if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,368,                                    SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,369,"                                        false,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,370,"                                        ""wrong (tn,cn) for column "" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,371,                                        columnName +
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,372,"                                        "" found: this pair points to "" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,373,                                        vcn.getSourceColumn().getName());
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,375,"                                // Fall back on column name based lookup,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,376,                                // cf. DERBY-4679. See ColumnReference#
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,377,                                // remapColumnReferencesToExpressions
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,378,                                return null;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,392,                            resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,393,                            return resultColumn;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1893,        ResultSet rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1894,            s.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1895,"                ""select distinct t1.ITEM_ID, t1.state_id, t1.JZ_DISCRIMINATOR from "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1896,"                ""((((((select * from ABSTRACT_INSTANCE z1 where z1.JZ_DISCRIMINATOR = 238) t1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1897,"                ""      left outer join LAB_RESOURCE_OPERATINGSYSTEM j1 on (t1.ITEM_ID = j1.JZ_PARENT_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1898,"                ""     left outer join ABSTRACT_INSTANCE t2 on (j1.ITEM_ID = t2.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1899,"                ""    left outer join OPERATING_SYSTEM_SOFTWARE_INSTALL j2 on (t2.ITEM_ID = j2.JZ_PARENT_ID))"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1900,"                ""   left outer join ABSTRACT_INSTANCE t3 on (j2.ITEM_ID = t3.ITEM_ID) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1901,"                ""  inner join FAMILY t5 on (t2.FAMILY_ITEM_ID = t5.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1902,"                "" inner join FAMILY t7 on (t1.FAMILY_ITEM_ID = t7.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1903,"                ""where (t3.FAMILY_ITEM_ID IN('_5VetVWTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1904,"                ""      (t5.ROOT_ITEM_ID = '_5ZDlwWTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1905,"                ""      (t7.ROOT_ITEM_ID ='_5nN9mmTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1906,"                ""      (t1.VISIBILITY = 0))"");"
java/engine/org/apache/derby/iapi/types/SQLChar.java,3023,        this.localeFinder = localeFinder;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1096,"        doXATempTableD4731Work(true, XATestUtil.getXid(997, 9, 49));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1101,     * DERBY-XXXX Temp tables with XA transactions
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1109,    public void xtestXATempTableDXXXX_Assert()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1112,"          doXATempTableD4731Work(false, XATestUtil.getXid(998, 10, 50));"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,631,  getCompilerContext().pushCurrentPrivType( Authorizer.NULL_PRIV);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,655,"    bindRowScopedExpression(nodeFactory, getContextManager(),"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,656,"        targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,657,"        sourceRCL,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,658,        checkConstraints);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,663,   getCompilerContext().popCurrentPrivType();
java/client/org/apache/derby/jdbc/ClientDataSource.java,28,import org.apache.derby.client.am.ClientMessageId;
java/client/org/apache/derby/jdbc/ClientDataSource.java,31,import org.apache.derby.client.net.NetConnection;
java/client/org/apache/derby/jdbc/ClientDataSource.java,33,import org.apache.derby.shared.common.error.ExceptionUtil;
java/client/org/apache/derby/jdbc/ClientDataSource.java,165,"        return getConnection(getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientDataSource.java,188,"            updateDataSourceValues(tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientDataSource.java,189,            return ClientDriver.getFactory().newNetConnection
java/client/org/apache/derby/jdbc/ClientDataSource.java,190,"                    ((NetLogWriter) dncLogWriter, user,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,191,"                    password, this, -1, false);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,25,import javax.sql.DataSource;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,29,import org.apache.derby.client.ClientXAConnection;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,65,"        return getXAConnection(getUser(), getPassword());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,179,        //DISABLED until DERBY-4067 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,180,        //suite.addTest(new J2EEDataSourceTest(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,181,"        //        ""testClientMessageTextConnectionAttribute""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2892,                    // Skip trace 3 and 5 until DERBY-2468/DERBY-4067 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2893,                    if (i == 3 || i == 5)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2894,                        continue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2895,                    else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2896,                    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2897,"                        assertTrue(""Doesn't exist"", traceFile.exists());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2898,"                        assertTrue(""Delete failed"", traceFile.delete());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2899,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2916,     * NOTE: DISABLED until DERBY-4067 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1119,     * Will throw an error in network server when attempt is made to
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1120,     * access the global temporary table after the end and commit.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1126,    public void xtestXATempTableD4743()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1188,            // is temp table empty after the commit?
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1189,"            rs = s.executeQuery(""SELECT count(*) FROM SESSION.t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1190,"            JDBC.assertFullResultSet(rs, new String[][] {{""0""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1191,            rs.close();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,67,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,68,    /** Static counter for connection ids */
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,69,    private static int idCounter = 0;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,70,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,71,    /** The id for this connection.  */
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,72,    private int connectionId;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,73,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,108,    private synchronized int nextId()
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,109,    {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,110,        return idCounter++;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,111,    }
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,112,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,115,        connectionId = nextId();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,116,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,563,"                ""(ID = "" + connectionId + ""), "" +"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,884,                if (pos - 1 > length())
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,885,                    throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,886,"                            SQLState.BLOB_POSITION_TOO_LARGE, new Long(pos));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,887,                if (pos < 1)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,888,                    throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,889,"                        SQLState.BLOB_BAD_POSITION, new Long(pos));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,890,"                control.write (bytes, offset, len, pos - 1);"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,891,            }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,892,            else {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,893,                control = new LOBStreamControl (getEmbedConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,894,"                control.copyData (myStream, length());"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,901,        }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,902,        catch (IOException e) {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,903,            throw Util.setStreamFailure (e);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,904,        }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,905,        catch (StandardException se) {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,906,            throw Util.generateCsSQLException (se);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,166,            suite.addTest(BlobSetBytesBoundaryTest.suite());
java/client/org/apache/derby/client/am/Blob.java,472,        if (len + offset > bytes.length) {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,901,        if (len + offset > bytes.length) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobSetBytesBoundaryTest.java,93,
java/client/org/apache/derby/client/net/EncodedInputStream.java,215,    protected void finalize() throws IOException {
java/client/org/apache/derby/client/net/EncodedInputStream.java,216,  close();
java/client/org/apache/derby/client/net/EncodedInputStream.java,217,    }
java/client/org/apache/derby/client/net/EncodedInputStream.java,218,
java/client/org/apache/derby/client/net/EncodedInputStream.java,219,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,24,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,28,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,30,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,31,import org.apache.derby.iapi.sql.compile.NodeFactory;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,33,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,34,import org.apache.derby.iapi.util.ReuseFactory;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,35,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,242,            if( SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,243,"                SanityManager.ASSERT( addedColumnOffset >= 0,"
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,244,"                                      ""Order by expression was not pulled into the result column list"");"
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,245,            resolveAddedColumn(target);
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,246,  if (resultCol == null)
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,247,   throw StandardException.newException(SQLState.LANG_UNION_ORDER_BY);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,260, /**
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,261,"  * This method determines if (1) the query is a LOJ, and (2) if the LOJ is a candidate for"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,262,"  * reordering (i.e., linearization).  The condition for LOJ linearization is:"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,263,"  * 1. only LOJ in the fromList, i.e., no INNER, no FULL JOINs, no ROJs"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,264,"  * 2. ON clause must be equality join between left and right operands and in CNF (i.e., AND is allowed)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,265,  */
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,290,  // This is a very simple LOJ of base tables. Do nothing.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,295,"  // Recursively check if we can reordering LOJ, and build the table"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,303,  {// left operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,318,  {// right operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,322,  // It is much easier to do LOJ reordering if there is no ROJ.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,332,  // Build the data structure for testing/doing LOJ reordering.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,333,  // Fill in the table references on row-preserving and null-producing sides.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,334,  // It may be possible that either operand is a complex view.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,335,  JBitSet    NPReferencedTableMap; // Null-producing
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,336,  JBitSet    RPReferencedTableMap; // Row-preserving
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,346,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,347,"  // Check if the predicate is equality predicate in CNF (i.e., AND only)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,348,  // and left/right column references must come from either operand.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,349,"  // That is, we don't allow:"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,350,  // 1. A=A
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,351,  // 2. 1=1
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,352,  // 3. B=C where both B and C are either from left or right operand.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,353,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,354,"  // we probably need to make the joinClause ""left-deep"" so that we can"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,355,  // walk it easier.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,356,  BinaryRelationalOperatorNode equals;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,357,  ValueNode leftCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,358,  ValueNode rightCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,359,  AndNode   and;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,360,  ValueNode left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,361,  ValueNode vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,362,  while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,364,   and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,365,   left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,367,"   // Make sure that this is an equijoin of the form ""C = D"" where C"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,368,   // and D references tables from both left and right operands.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,369,   if (left instanceof RelationalOperator &&
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,370,    ((ValueNode)left).isBinaryEqualsOperatorNode())
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,371,   {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,372,    equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,373,    leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,374,    rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,376,    if (!( leftCol instanceof ColumnReference && rightCol instanceof ColumnReference))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,377,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,379,    boolean refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,380,    boolean leftOperandCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,382,    if (RPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,383,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,384,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,385,     leftOperandCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,386,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,387,    else if (NPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,388,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,389,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,390,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,392,    if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,393,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,395,    refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,396,    if (leftOperandCheck == false && RPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,397,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,398,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,399,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,400,    else if (leftOperandCheck == true && NPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,401,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,402,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,403,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,405,    if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,406,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,407,   }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,408,   else return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,410,   vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,411,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,413,  // Check if the logical right resultset is a composite inner and as such
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,414,  // that this current LOJ can be pushed through it.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,415,  boolean       push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,416,  // logical right operand is another LOJ... so we may be able to push the
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,417,  // join
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,418,  if (logicalRightResultSet instanceof HalfOuterJoinNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,419,  {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,420,   // get the Null-producing operand of the child
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,421,   JBitSet  logicalNPRefTableMap = ((HalfOuterJoinNode)logicalRightResultSet).LOJgetNPReferencedTables(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,422,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,423,   // does the current LOJ join predicate reference
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,424,"   // logicalNPRefTableMap?  If not, we can push the current"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,425,   // join.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,426,   vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,427,   push = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,428,   while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,429,   {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,430,    and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,431,    left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,432,    equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,433,    leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,434,    rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,435,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,436,    if (logicalNPRefTableMap.get(((ColumnReference)leftCol).getTableNumber()) ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,437,     logicalNPRefTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,438,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,439,     push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,440,     break;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,441,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,443,    vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,444,   }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,445,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,447,  // Push the current LOJ into the next level
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,448,  if (push)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,449,  {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,450,"   // For safety, check the JoinNode data members: they should null or"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,451,   // empty list before we proceed.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,452,   if (super.subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,453,    ((JoinNode)logicalRightResultSet).subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,454,    super.joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,455,    ((JoinNode)logicalRightResultSet).joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,456,    super.usingClause != null ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,457,    ((JoinNode)logicalRightResultSet).usingClause != null)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,458,    return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,459,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,460,   anyChange = true; // we are reordering the LOJs.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,461,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,462,   ResultSetNode tmp = logicalLeftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,463,"   ResultSetNode LChild, RChild;"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,464,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,465,   //            this LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,466,   //            /      \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,467,   //  logicalLeftRS   LogicalRightRS
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,468,   //                   /     \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,469,   //                LChild  RChild
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,470,   // becomes
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,471,   //
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,472,   //               this LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,473,   //               /      \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,474,   //     LogicalRightRS   RChild
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,475,   //           /     \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,476,   // logicalLeftRS   LChild  <<<  we need to be careful about this order
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,477,"   //                              as the ""LogicalRightRS may be a ROJ"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,478,   //
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,479,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,480,   // handle the lower level LOJ node
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,481,   LChild = ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,482,   RChild = ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,483,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,484,   ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet = LChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,485,   ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet  = tmp;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,486,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,487,   // switch the ON clause
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,488,   vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,489,   joinClause   = ((HalfOuterJoinNode)logicalRightResultSet).joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,490,   ((HalfOuterJoinNode)logicalRightResultSet).joinClause = vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,491,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,492,   // No need to switch HalfOuterJoinNode data members for now because
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,493,   // we are handling only LOJ.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,494,   // boolean local_rightOuterJoin = rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,495,   // boolean local_transformed    = transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,496,   // rightOuterJoin = ((HalfOuterJoinNode)logicalRightResultSet).rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,497,   // transformed    = ((HalfOuterJoinNode)logicalRightResultSet).transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,498,   // ((HalfOuterJoinNode)logicalRightResultSet).rightOuterJoin = local_rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,499,   // ((HalfOuterJoinNode)logicalRightResultSet).transformed    = local_transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,500,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,501,   FromList localFromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,502,"                   C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,503,"                   getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,504,                   getContextManager());
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,506,   // switch LOJ nodes: by handling the current LOJ node
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,507,   leftResultSet  = logicalRightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,508,   rightResultSet = RChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,510,   // rebuild the result columns and re-bind column references
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,511,   ((HalfOuterJoinNode)leftResultSet).resultColumns = null;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,512,   ((JoinNode)leftResultSet).bindResultColumns(localFromList); // localFromList is empty
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,514,"   // left operand must be another LOJ, try again until a fixpoint"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,515,   boolean localChange = ((HalfOuterJoinNode)leftResultSet).LOJ_reorderable(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,517,   // rebuild the result columns and re-bind column references for 'this'
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,518,   return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,519,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,521,  return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,522, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,1,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,55,        suite.addTest(TestConfiguration.defaultSuite(OuterJoinTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,2177,    public void TestdDerby5659() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,2611, }
java/testing/org/apache/derbyTesting/junit/JDBC.java,1456,
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,134,    // DERBY-2109: shutdown command now transmits user credentials
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,135, private final static int PROTOCOL_VERSION = 2;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1477,  return row[rsNumber].getColumn(colId);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,38,import org.apache.derby.iapi.services.sanity.SanityManager;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,134, private final static int PROTOCOL_VERSION = 1;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,132, // command protocol version - you need to increase this number each time
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,133, // the command protocol changes
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,134,    // DERBY-2109: shutdown command now transmits user credentials
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,135, private final static int PROTOCOL_VERSION = 2;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1031,            writeCommandHeader(COMMAND_SHUTDOWN);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1032,            // DERBY-2109: transmit user credentials for System Privileges check
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1033,            writeLDString(userArg);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1034,            writeLDString(passwordArg);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1035,            send();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1036,            readResult();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1615,   if (version <= 0 || version > PROTOCOL_VERSION)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1648,     // DERBY-2109: receive user credentials for shutdown
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1649,     // System Privileges check
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1650,     userArg = reader.readCmdString();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1651,     passwordArg = reader.readCmdString();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2615,  * Write command header consisting of command header string and protocol
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2616,  * version and command
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2626,   commandOs.writeByte((byte)((PROTOCOL_VERSION & 0xf0) >> 8 ));
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2627,   commandOs.writeByte((byte)(PROTOCOL_VERSION & 0x0f));
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1277,
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,396,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,472,                 if (sz == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,484,                    pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,550,                return control.getInputStream(0);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,558,                    pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,565,"                    return new UpdatableBlobStream (this,"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,566,"                            new AutoPositioningStream (this, myStream, this));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,615,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,627,                    if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,632,"                        if (checkMatch(pattern, pos))"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,634,                        else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,709,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,724,                if (b == null || b.length < 1)  // the 'empty' blob
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,732,                    if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,737,"                        if (checkMatch(pattern, pos))"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,739,                        else
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,338,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,350,                    if (readCount == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,458,                                if (!seenOneCharacter)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,473,                                if (firstPosition == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,491,            } // End outer for loop
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,492,        } // End synchronized block
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1245,   LanguageConnectionContext lcc = tr.getLcc();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2015,    getLanguageConnection().setReadOnly(readOnly);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2109,    getLanguageConnection().setIsolationLevel(iLevel);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2842,    getLanguageConnection().resetFromPool();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2879,     (XATransactionController) getLanguageConnection().getTransactionExecute();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2894,     getLanguageConnection().internalCommit(false /* don't commitStore again */);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2921,       getLanguageConnection().xaCommit(onePhase);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2945,       getLanguageConnection().xaRollback();
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2316,    getLanguageConnectionContext().getDataDictionary().checkVersion(
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3555,    s = getEmbedConnection().prepareMetaDataStatement(queryText);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,147,   } catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,148,      throw handleException(t);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,149,   }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,462,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,582,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,600,     LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4013,    if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4025,"    return new EmbedBlob(dvd, getEmbedConnection());"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4067,    if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4077,"                return new EmbedClob(getEmbedConnection(), dvd);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4514,   try {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4522,     LanguageConnectionContext lcc = getEmbedConnection()
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4523,       .getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4535,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1317,         } catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,344,
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,27,import java.util.WeakHashMap;
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,116, ColumnDescriptorList  columnDescriptorList;
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,122, /**
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,123,  * referencedColumnMap is thread local (since DERBY-2861)
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,124,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,125,  * It contains a weak hash map keyed by the the TableDescriptor
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,126,"  * and the value is the actual referencedColumnMap bitmap.  So,"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,127,  * each thread has a weak hash map it uses to find the appropriate
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,128,  * referencedColumnMap for 'this' TableDescriptor.
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,129,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,130,"  * Since the hash map is weak, when the TableDescriptor is no"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,131,  * longer referenced the hash entry can be garbage collected (it
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,132,"  * is the *key* of a weak hash map that is weak, not the value)."
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,133,  */
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,134, private static ThreadLocal referencedColumnMap = new ThreadLocal() {
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,135,   protected Object initialValue() {
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,136,    // Key: TableDescriptor
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,137,    // Value: FormatableBitSet
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,138,    return new WeakHashMap();
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,139,   }
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,140,  };
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,141,
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,143,  WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,145,  return (FormatableBitSet) (map.get(this));
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,151,  WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,152,"  map.put(this, newReferencedColumnMap);"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,305,
java/client/org/apache/derby/client/net/Request.java,320,    } catch (java.io.IOException e) {
java/client/org/apache/derby/client/net/Request.java,327,"                    new ClientMessageId(SQLState.NET_IOEXCEPTION_ON_READ),"
java/client/org/apache/derby/client/net/Request.java,362,  } catch (java.io.IOException e) {
java/client/org/apache/derby/client/net/Request.java,367,"                       SQLState.NET_IOEXCEPTION_ON_STREAMLEN_VERIFICATION),"
java/client/org/apache/derby/client/net/Request.java,466,        } catch (java.io.IOException e) {
java/client/org/apache/derby/client/net/Request.java,472,"                                 new ClientMessageId(SQLState.NET_IOEXCEPTION_ON_READ),"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1606,"    String NET_IOEXCEPTION_ON_READ                                  = ""XN014.S"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1608,"    String NET_IOEXCEPTION_ON_STREAMLEN_VERIFICATION                = ""XN016.S"";"
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,66,"     * status flag is presumably off alread, but we reset it here"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1562,  long pageNumber;  // the page number of the new page
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1570,  long startSearch = lastAllocatedPage;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1635,     allocPage =
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1636,"                        findAllocPageForAdd(allocHandle, ntt, startSearch);"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2018,  synchronized(allocCache)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2019,  {
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2020,"   if (pagenum <= allocCache.getLastPageNumber(handle, firstAllocPageNumber) &&"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2021,"    allocCache.getPageStatus(handle, pagenum, firstAllocPageNumber) == AllocExtent.ALLOCATED_PAGE)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2022,    retval = true;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2023,  }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,180,      throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,480,  synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,482,"   // committed and dropped, do nothing."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,483,   // This file container has already been stubbified
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,484,   if (getCommittedDropState()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,485,    clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,486,    return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,487,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,489,"   // The container is about to change, need to wait till it is really"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,490,   // changed.  We are in the predirty state only for the duration
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,491,   // where the log record that changed the container has been sent to
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,492,   // the log and before the change actually happened.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,493,   while(preDirty == true)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,494,   {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,495,    waited = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,496,    try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,497,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,498,     wait();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,499,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,500,    catch (InterruptedException ie)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,501,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,502,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,503,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,504,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,506,   if (waited)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,507,   {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,508,    // someone else may have stubbified this while we waited
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,509,    if (getCommittedDropState())
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,510,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,511,     clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,512,     return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,513,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,514,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,517,   if (forRemove) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,519,    //    removeFile()
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,520,    //    clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,522,   } else if (isDirty()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,523,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,524,    try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,525,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,526,     // Cannot get the alloc page and write it out
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,527,"     // because in order to do so, the alloc page will need to"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,528,     // find this container object.  But this container object
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,529,     // is in the middle of being cleaned and may not be
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,530,     // 'found' and we will hang.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,531,     //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,532,"     // Instead, just clobber the container info, which is"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,533,     // checksum'ed seperately from the alloc page
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,534,     //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,535,                    writeRAFHeader(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,536,"                        getIdentity(),"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,537,"                        fileData,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,538,"           false,  // don't create, container exists"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,539,           true);  // syncfile
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,540,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,541,     clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,542,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,543,    } catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,544,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,545,     throw dataFactory.markCorrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,546,                        StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,547,"                            SQLState.FILE_CONTAINER_EXCEPTION, ioe,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,548,                            getIdentity() != null ?
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,549,"                               getIdentity().toString() : ""unknown"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,550,"                            ""clean"", fileName));"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,551,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,552,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,553,  }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,862,            return AccessController.doPrivileged( this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1037,                            throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,41, * RAFContainer4 overrides a few methods in RAFContainer in an attempt to use
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,42, * FileChannel from Java 1.4's New IO framework to issue multiple IO operations
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,43, * to the same file concurrently instead of strictly serializing IO operations
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,44, * using a mutex on the container object.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,78,    /**
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,82,    private int iosInProgress = 0;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,164,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,194,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,202,"        // If this is the first alloc page, there may be another thread"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,203,        // accessing the container information in the borrowed space on the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,204,"        // same page. In that case, we synchronize the entire method call, just"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,205,"        // like RAFContainer.readPage() does, in order to avoid conflicts. For"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,206,"        // all other pages it is safe to skip the synchronization, since"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,207,        // concurrent threads will access different pages and therefore don't
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,208,        // interfere with each other.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,209,        if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,210,            synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,211,"                readPage0(pageNumber, pageData);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,214,"            readPage0(pageNumber, pageData);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,218,"    private void readPage0(long pageNumber, byte[] pageData)"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,224,                SanityManager.ASSERT(!getCommittedDropState());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,244,"                readFull(pageBuf, ioChannel, pageOffset);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,256,                pageNumber != FIRST_ALLOC_PAGE_NUMBER)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,270,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,279,"        // If this is the first alloc page, there may be another thread"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,280,        // accessing the container information in the borrowed space on the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,281,"        // same page. In that case, we synchronize the entire method call, just"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,282,"        // like RAFContainer.writePage() does, in order to avoid conflicts. For"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,283,"        // all other pages it is safe to skip the synchronization, since"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,284,        // concurrent threads will access different pages and therefore don't
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,285,        // interfere with each other.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,286,        if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,287,            synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,288,"                writePage0(pageNumber, pageData, syncPage);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,291,"            writePage0(pageNumber, pageData, syncPage);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,362,"                            SanityManager.DEBUG_PRINT(""RAFContainer4"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,363,"                                ""Write to a dropped and closed container discarded."");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,413,"        } else { // iochannel was not initialized, fall back to original method."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,420,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,441,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,454,            ByteBuffer buffer =
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,455,                    ByteBuffer.allocate(AllocPage.MAX_BORROWED_SPACE);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,456,"            readFull(buffer, ioChannel, offset);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,457,            return buffer.array();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,481,            try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,482,"                if (srcChannel.read(dstBuffer,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,484,                        throw new EOFException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,485,"                            ""Reached end of file while attempting to read a """
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,486,"                            + ""whole page."");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,487,                }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,488,            } catch (ClosedByInterruptException e) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,489,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,490,"                    SQLState.FILE_IO_INTERRUPTED, e);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,511,"            throws IOException, StandardException"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,514,            try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,515,"                dstChannel.write(srcBuffer, position + srcBuffer.position());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,516,            } catch (ClosedByInterruptException e) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,517,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,518,"                    SQLState.FILE_IO_INTERRUPTED, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,2,  Class org.apache.derbyTesting.functionTests.tests.store.Derby151Test
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,40,public class Derby151Test extends BaseJDBCTestCase
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,43,    public Derby151Test(String name)
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,59,            suite.addTestSuite(Derby151Test.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,68,"        TestSuite suite = new TestSuite(""Derby151Test"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,73,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,75,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,77,"            baseSuite(""Derby151Test:embedded""));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,81,"                baseSuite(""Derby151Test:c/s"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,91,"        stmt.executeUpdate(""CREATE TABLE d151(x int primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,102,"        stmt.executeUpdate(""DROP TABLE d151"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,111,    public static void d151() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,116,"            insert = c.prepareStatement(""insert into d151 values (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,118,            for (int i = 0; i < 10000; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,121,                Thread.currentThread().interrupt();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,138,    public void testD151 () throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,141,"            ""create procedure D151 () MODIFIES SQL DATA "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,143,"            "".tests.store.Derby151Test.d151' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,146,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,147,"            s.executeUpdate(""call D151()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,149,"            // We were not able to prokove any error, but that should not fail"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,150,            // the test; the results here may depend on VMs possibly.  So just
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,151,            // report this fact in verbose mode:
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,153,"            println(""Not able to test fix for DERBY-151: No interrupt seen"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,154,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,155,"            assertSQLState(""XSDG9"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,156,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,60,        suite.addTest(Derby151Test.suite());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,901, synchronized boolean openContainer(ContainerKey newIdentity)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,908,            boolean success = AccessController.doPrivileged(this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,909,            if (success) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,910,                currentIdentity = newIdentity;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,911,            }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,924,        {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,718,"            // Another interrupted thread got to do the cleanup before us, so"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,811,                        } catch (Exception newE) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,813,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,814,                            if (InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,815,"                                        ""RAF: isInterrupted during recovery"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,816,"                                        threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,817,                                        hashCode())) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,818,                                continue;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,819,                            } else {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,820,                                // Something else failed - shutdown happening?
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,821,                                synchronized(giveUpIOm) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,822,                                    // Make sure other threads will give up and
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,823,"                                    // throw, too."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,824,                                    giveUpIO = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,825,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,826,                                    if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,827,                                        debugTrace(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,828,"                                            ""can't resurrect container: "" +"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,829,                                            newE);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,830,                                    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,841,                threadsInPageIO++;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,82,    private Object channelCleanupMonitor = new Object();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,665,"                        // Max 60s, then give up, probably way too long anyway,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,718,"     * @return true if we did it, false if we saw someone else do it and"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,884,                SanityManager.ASSERT(Thread.currentThread().holdsLock(this));
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,886,                SanityManager.ASSERT(!Thread.currentThread().holdsLock(this));
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1068,        boolean beforeOpen = srcChannel.isOpen();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1069,        boolean beforeInterrupted = Thread.currentThread().isInterrupted();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1070,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1108,        boolean beforeOpen = dstChannel.isOpen();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1109,        boolean beforeInterrupted = Thread.currentThread().isInterrupted();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1110,
java/engine/org/apache/derby/iapi/util/InterruptDetectedException.java,38,"        super(""nospc.U"");"
java/engine/org/apache/derby/impl/services/locks/ActiveLock.java,122,    throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,599,                            // ending wait because of lock timeout.
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,601,                            if (deadlockTrace)
java/engine/org/apache/derby/impl/services/locks/LockSet.java,349,                        // If we were not woken by another then we have
java/engine/org/apache/derby/impl/services/locks/LockSet.java,350,                        // timed out. Either deadlock out or timeout
java/engine/org/apache/derby/impl/services/locks/LockSet.java,410,                            // ending wait because of lock timeout.
java/engine/org/apache/derby/impl/services/locks/LockSet.java,412,                            if (deadlockTrace)
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1007,        StatementContext localStatementContext = getLanguageConnectionContext().getStatementContext();
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,593,
java/engine/org/apache/derby/impl/sql/GenericStatement.java,199,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2353,      // make sure we are not stuck in frozen state if we
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2354,      // caught an interrupt exception and the calling
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2355,                        // thread may not have a chance to call unfreeze
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2356,      isFrozen = false;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2357,      freezeSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2358,
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2359,      throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2402,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1686,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,566,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,589,     inClean = false;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,590,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,573,                                Thread.sleep(500); // 0.5s
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,317,                        InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,318,"                            ""interrupt while waiting to gain entry"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,319,"                            threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,320,                            hashCode());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,520,                        InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,521,"                            ""interrupt while waiting to gain entry"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,522,"                            threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,523,                            hashCode());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,836,"                // again! No need, we have already taken note, pal!"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,34,import java.io.InterruptedIOException;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,516,"      //do nothing, let the flush request to complete."
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,517,      //because it possible that other thread which is
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,518,"      //currently might have completed this request also ,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,519,"      //if exited  on interrupt and throw exception, can not"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,520,      //be sure whether this transaction is COMMITTED ot not.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,679,                {   //does not matter weather I get interrupted or not
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,718,                        // do nothing
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1525, protected boolean checkpointWithTran(
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1604,                                throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2026,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2988,                        // do nothing
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3949,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4011,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4213,                    //does not matter weather I get interrupted or not
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4977,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1071,     * @exception StandardException if interrupted while waiting for a
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1072,     *           backup  to complete.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1075,        throws StandardException
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1087,                            throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1136,  * @exception StandardException if interrupted or a runtime exception occurs
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1139,  throws StandardException
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1154,       // make sure we are not stuck in the backup state
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1155,                            // if we caught an interrupt exception and the
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1156,                            // calling thread may not have a chance to clear
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1157,                            // the in backup state.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1158,
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1159,       inBackup = false;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1160,       backupSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1161,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,224,                //Interrupt the log shipping thread.
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,225,                return;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,474,            try {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,475,                // Wait for the pong response message
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,476,                receivePongSemaphore.wait(DEFAULT_PING_TIMEOUT);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,477,            } catch (InterruptedException ex) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,503,                        sendPingSemaphore.wait();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,512,            } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,269,"        // Interrupt recovery: If this thread holds a monitor on ""this"" (when"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,270,        // RAFContainer#clean calls getEmbryonicPage via writeRAFHEader) or
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,271,"        // ""allocCache"" (e.g. FileContainer#newPage, #pageValid) we cannot grab"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,272,"        // channelCleanupMonitor lest another thread is one doing recovery,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,273,        // since the recovery thread will try to grab both those monitors
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,274,"        // during container resurrection.  So, just forge ahead in stealth mode"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,275,        // (i.e. the recovery thread doesn't see us). If we see
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,277,"        // retry from RAFContainer (""this"") or FileContainer (""allocCache"")"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,278,        // after having released the relevant monitor.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,489,"        // Interrupt recovery: If this thread holds a monitor ""allocCache"""
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,490,"        // (e.g. FileContainer#newPage, #pageValid) we cannot grab"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,491,"        // channelCleanupMonitor lest another thread is one doing recovery,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,492,        // since the recovery thread will try to grab both those monitors
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,493,"        // during container resurrection.  So, just forge ahead in stealth mode"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,494,        // (i.e. the recovery thread doesn't see us). If we see
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,496,"        // retry from FileContainer (""allocCache"") after having released the"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,497,        // relevant monitor.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,38, *   Test to reproduce and verify fix for DERBY-151.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,50,    protected static Test baseSuite(String name)
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,54,        if (JDBC.vmSupportsJDBC3()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,55,            // We need a JDBC level that supports DriverManager in order
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,56,            // to run tests that access the database from a stored procedure
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,57,            // using DriverManager and jdbc:default:connection.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,58,            // DriverManager is not supported with JSR169.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,60,            suite.addTestSuite(InterruptResilienceTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,61,            return new CleanDatabaseTestSetup(suite);
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,62,        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,63,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,64,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,69,"        TestSuite suite = new TestSuite(""InterruptResilienceTest"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,74,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,81,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,84,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,85,"            baseSuite(""InterruptResilienceTest:embedded""));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,86,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,87,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,88,            TestConfiguration.clientServerDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,89,"                baseSuite(""InterruptResilienceTest:c/s"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,91,        return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,97,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,99,"        stmt.executeUpdate(""CREATE TABLE irt(x int primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,110,"        stmt.executeUpdate(""DROP TABLE irt"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,118,    // thread.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,119,    public static void irt() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,126,"            insert = c.prepareStatement(""insert into irt values (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,130,"            // running with debug flag ""RAF4Recovery""."
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,140,"                insert.setInt(1, i);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,143,                if (Thread.interrupted()) { // test and reset
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,144,                    seen++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,145,"                    // println(ff() + ""interrupt seen"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,146,                } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,147,"                    // println(ff() + ""interrupt lost"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,148,                    lost++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,149,                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,150,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,164,"            println(""interrupts recovered: "" + seen);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,165,"            println(""interrupts lost: "" + lost + "" ("" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,166,"                    (lost * 100.0/(seen + lost)) + ""%)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,170,    public void testIRT () throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,173,"            ""create procedure IRT () MODIFIES SQL DATA "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,175,"            "".tests.store.InterruptResilienceTest.irt' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,179,"        s.executeUpdate(""call IRT()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,184,    // private static String ff() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,185,    //     return Thread.currentThread().getName();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,186,    // }
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,432,
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,136,
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1536,    Connection openDefaultConnection()
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,443,     * @param tc
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,241,     * flag to allow safe operation during execution.  Called when operations
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,242,     * will be be prematurely terminated due to the interrupt.
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,244,"     * If an interrupt status flag was seen, we set it back ON here and throw"
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,245,     * session level SQLState.CONN_INTERRUPT.
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,248,     * @throws StandardException (SQLState.CONN_INTERRUPT)
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,76,            // new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,77,            // TestConfiguration.singleUseDatabaseDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,81,            // new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,82,            // TestConfiguration.singleUseDatabaseDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,354,        public SQLException e; // if any seen
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,374,                PreparedStatement s = c.prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,377,"                    ""insert into mtTab values (?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,388,                        ResultSet rs = s.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,389,                        rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,390,                        if (interrupted()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,391,                            interruptsSeen++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,392,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,393,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,394,"                        assertEquals(""wrong row content"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,395,"                                     candidate, rs.getLong(1));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,397,                        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,404,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,405,                        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,423,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,466,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,467,"                Class.forName(""org.apache.derby.jdbc.EmbeddedDriver"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,468,            } catch (ClassNotFoundException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,469,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,510,
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2160,     newLogFile = null;
java/client/org/apache/derby/client/am/Statement.java,2451,"                        tokenFound = ""/"";"
java/client/org/apache/derby/client/am/Statement.java,2454,                        idx = idx++;
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,151,"  return super.getFromTableByName(name, schemaName, exactMatch);"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,117,  * cursor specification. This variant is used by InsertNode.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4917,   if (referencedCols != null){
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1387,    // change triggers to refer to columns in new positions
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1402,   //If the trigger under consideration already got dropped through
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1403,"   //the referencedCols loop above, then move to next trigger"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1406,   //None of the triggers use column being dropped as a trigger
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1407,   //column. Check if the column being dropped is getting used
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1408,   //inside the trigger action through REFERENCING clause.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1410,   if (referencedColsInTriggerAction == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1411,    continue;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1412,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1413,"   int refColInTriggerActionLen = referencedColsInTriggerAction.length, j;"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1414,   boolean changedColPositionInTriggerAction = false;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1415,   for (j = 0; j < refColInTriggerActionLen; j++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1416,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1417,    if (referencedColsInTriggerAction[j] > droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1419,     changedColPositionInTriggerAction = true;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1421,    else if (referencedColsInTriggerAction[j] == droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1423,     if (cascade)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1425,                        trd.drop(lcc);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1426,      activation.addWarning(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1427,       StandardException.newWarning(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1428,"                                SQLState.LANG_TRIGGER_DROPPED,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1429,"                                trd.getName(), td.getName()));"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1430,     }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1431,     else
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1432,"     { // we'd better give an error if don't drop it,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1433,      // otherwise there would be unexpected behaviors
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1434,      throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1435,"                            SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1436,"                            dm.getActionString(DependencyManager.DROP_COLUMN),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1437,"                            columnName, ""TRIGGER"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1438,                            trd.getName() );
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1440,     break;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1580,"  dd.dropColumnDescriptor(td.getUUID(), columnName, tc);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2259,"        // inside the trigger action. DERBY-4887. Currently, Derby does not"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2260,        // look at the columns being used inside the trigger action unless
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2261,        // they are being used through the REFERENCING clause and hence does
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2262,        // not catch the trigger dependencies
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2264,        //Following is not going to be caught by the information available
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2265,        //in systriggers even in 10.7 and higher. We only keep the information
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2266,        //about the columns used through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2270,        //Following will be caught because of the information available in
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2271,        //systriggers in 10.7 and higher because we keep the information
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2272,        //about the columns used through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2279,        // We got an error because Derby detected the dependency on
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2280,        // atdc_12_trigger_2
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2295,        // the 2 triggers should have been dropped as a result of cascade but
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2296,        // only one gets dropped. Derby does not recognize the dependency of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2297,        // trigger action column where the column is not getting referenced
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2298,        // through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2299,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2300,            st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2301,"                    "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2302,"                    ""triggername = 'ATDC_12_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2303,"            JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_12_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2308,"        // action. Currently, Derby does not look at the columns being used"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2309,        // inside the trigger action and hence does not catch the trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2310,        // dependency unless they are being referenced through REFERENCING
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2311,"        // clause. Similarly, drop column cascade should drop this table"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2312,        // level trigger because it is using the colunm in it's trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2313,        // action but Derby does not catch that. DERBY-4887.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2351,        // following is not the right behavior. Derby should have dropped
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2352,        // all the 6 triggers but it drops only 3. Other 3 didn't get
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2353,        // dropped because Derby does not recognize the dependency of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2354,        // trigger action column where the column is not getting referenced
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2355,        // through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2358,        // the triggers should have been dropped as a result of cascade but
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2359,        // Derby does not recognize the dependency of trigger action column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2361,            st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2362,"            "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2363,"            ""triggername in ('ATDC_13_TRIGGER_1', ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2364,"            ""'ATDC_13_TRIGGER_2', 'ATDC_13_TRIGGER_3')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2365,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_13_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2366,"             {""ATDC_13_TRIGGER_2""}, {""ATDC_13_TRIGGER_3""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2368,        // Another test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2407,        // following is not the right behavior. we should have gotten an error
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2408,        // because column being dropped is getting used in a trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,157,     * Make sure that DERBY-4998 changes do not break backward compatibility.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,159,     * It creates triggers in old release with trigger action columns getting
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,160,     * used through the REFERENCING clause. Those triggers in soft upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,161,"     * mode, post soft upgrade mode and hard upgrade mode do not get detected"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,162,"     * by ALTER TABLE DROP COLUMN because prior to 10.7, we did not keep"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,163,     * information about trigger action columns getting used through the
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,164,     * REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,176,         //Create 2 tables for each of the upgrade phases which are
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,177,         //a)soft upgrade b)post soft upgrade and c)hard upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,178,"         //For each of the upgrade phase, one table will be used for"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,182,         //Following 2 tables and triggers are for soft upgrade mode check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,183,"         s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,184,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,185,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,186,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,187,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,188,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,189,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,190,"              ""ON DERBY4998_SOFT_UPGRADE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,191,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,192,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,193,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,194,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,195,"            s.execute(""CREATE TABLE DERBY4998_soft_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,196,"            s.execute(""INSERT INTO DERBY4998_soft_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,197,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,198,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,199,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,200,"            s.execute(""CREATE TRIGGER DERBY4998_soft_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,201,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,202,"              ""ON DERBY4998_soft_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,203,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,204,"                    ""SELECT oldt.c11 from DERBY4998_soft_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,205,"            s.executeUpdate(""UPDATE DERBY4998_soft_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,206,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,207,         //Following 2 tables and triggers are for post-soft upgrade mode
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,208,            //check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,209,"            s.execute(""CREATE TABLE DERBY4998_postsoft_upgrade_restrict(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,210,"            s.execute(""INSERT INTO DERBY4998_postsoft_upgrade_restrict VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,211,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,212,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,213,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,214,"            s.execute(""CREATE TRIGGER DERBY4998_postsoft_upgrade_restrict_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,215,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,216,"              ""ON DERBY4998_postsoft_upgrade_restrict REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,217,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,218,"                    ""SELECT oldt.c11 from DERBY4998_postsoft_upgrade_restrict"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,219,"            s.executeUpdate(""UPDATE DERBY4998_postsoft_upgrade_restrict SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,220,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,221,"            s.execute(""CREATE TABLE DERBY4998_postsoft_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,222,"            s.execute(""INSERT INTO DERBY4998_postsoft_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,223,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,224,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,225,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,226,"            s.execute(""CREATE TRIGGER DERBY4998_postsoft_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,227,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,228,"              ""ON DERBY4998_postsoft_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,229,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,230,"                    ""SELECT oldt.c11 from DERBY4998_postsoft_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,231,"            s.executeUpdate(""UPDATE DERBY4998_postsoft_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,232,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,233,         //Following 2 tables and triggers are for hard upgrade mode check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,234,"            s.execute(""CREATE TABLE DERBY4998_hard_upgrade_restrict(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,235,"            s.execute(""INSERT INTO DERBY4998_hard_upgrade_restrict VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,236,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,237,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,238,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,239,"            s.execute(""CREATE TRIGGER DERBY4998_hard_upgrade_restrict_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,240,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,241,"              ""ON DERBY4998_hard_upgrade_restrict REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,242,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,243,"                    ""SELECT oldt.c11 from DERBY4998_hard_upgrade_restrict"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,244,"            s.executeUpdate(""UPDATE DERBY4998_hard_upgrade_restrict SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,245,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,246,"            s.execute(""CREATE TABLE DERBY4998_hard_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,247,"            s.execute(""INSERT INTO DERBY4998_hard_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,248,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,249,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,250,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,251,"            s.execute(""CREATE TRIGGER DERBY4998_hard_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,252,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,253,"              ""ON DERBY4998_hard_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,254,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,255,"                    ""SELECT oldt.c11 from DERBY4998_hard_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,256,"            s.executeUpdate(""UPDATE DERBY4998_hard_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,260,         //The tables created with 10.6 and prior versions will exhibit
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,261,         //incorrect behavoir
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,262,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,263,"           ""DERBY4998_SOFT_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,264,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,265,"           ""DERBY4998_SOFT_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,266,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,267,"         //Even though we are in soft upgrade mode using Derby 10.7 release,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,268,         //newly created triggers will still not keep track of trigger
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,269,         //action columns referenced through REFERENCING clause because
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,270,         //that will break the backward compatibility when this db gets
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,271,         //used with earlier Derby version again after soft upgrade.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,272,         //Show this with an example
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,273,"            s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,274,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,275,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,276,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,277,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,278,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,279,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,280,"              ""ON DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,281,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,282,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,283,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,284,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,285,"           ""DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,286,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,287,"            s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,288,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,289,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,290,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,291,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,292,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,293,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,294,"              ""ON DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,295,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,296,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,297,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,298,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,299,"           ""DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,305,         //The tables created with 10.6 and prior versions will continue to
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,306,         //exhibit incorrect behavoir
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,307,"         incorrectBehaviorForDropColumn(""DERBY4998_POSTSOFT_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,308,"           ""DERBY4998_POSTSOFT_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,309,"         incorrectBehaviorForDropColumn(""DERBY4998_POSTSOFT_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,310,"           ""DERBY4998_POSTSOFT_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,311,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,316,"            s.execute(""CREATE TABLE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,317,"            s.execute(""INSERT INTO DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,318,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,319,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,320,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,321,"            s.execute(""CREATE TRIGGER DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,322,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,323,"              ""ON DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,324,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,325,"                    ""SELECT oldt.c11 from DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,326,"            s.executeUpdate(""UPDATE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,327,"         incorrectBehaviorForDropColumn(""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,328,"           ""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,330,"            s.execute(""CREATE TABLE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,331,"            s.execute(""INSERT INTO DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,332,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,333,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,334,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,335,"            s.execute(""CREATE TRIGGER DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,336,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,337,"              ""ON DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,338,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,339,"                    ""SELECT oldt.c11 from DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,340,"            s.executeUpdate(""UPDATE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,341,"         incorrectBehaviorForDropColumn(""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,342,"           ""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,343,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,346,         //The tables created with 10.6 and prior versions will exhibit
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,347,"         //incorrect behavior. Even though the database is at 10.7 level,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,348,         //the triggers created with prior Derby releases did not keep
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,349,         //track of trigger action columns referenced through REFERENCING
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,350,         //clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,351,"         incorrectBehaviorForDropColumn(""DERBY4998_HARD_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,352,"           ""DERBY4998_HARD_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,353,"         incorrectBehaviorForDropColumn(""DERBY4998_HARD_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,354,"           ""DERBY4998_HARD_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,356,         //Create 2 new tables now that the database has been upgraded to
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,357,         //10.7 Notice that newly created tables will be able to detect
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,359,"         //This is because starting 10.7, for new triggers, we have"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,360,         //started keeping track of trigger action columns referenced
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,361,         //through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,362,"            s.execute(""CREATE TABLE DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,363,"            s.execute(""INSERT INTO DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,364,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,365,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,366,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,367,"            s.execute(""CREATE TRIGGER DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,368,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,369,"              ""ON DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,370,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,371,"                    ""SELECT oldt.c11 from DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,372,"            s.executeUpdate(""UPDATE DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,374,"              "" alter table DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,378,"            ""triggername='DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_TR1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,380,"              new String[][]{{""DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_TR1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,381,"            s.execute(""CREATE TABLE DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,382,"            s.execute(""INSERT INTO DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,383,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,384,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,385,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,386,"            s.execute(""CREATE TRIGGER DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,387,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,388,"              ""ON DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,389,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,390,"                    ""SELECT oldt.c11 from DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,391,"            s.executeUpdate(""UPDATE DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,392,"            s.executeUpdate(""alter table DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,397,"                    ""triggername='DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE_TR1'""));"
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,61,"     * don't have lcc, e.g. during database creation."
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,274,                // do nothing
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,350,                    // do nothing
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2617,     * Puts the current thread to sleep and sets the interrupt flag of the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2618,     * thread if an {@code InterruptedException} is thrown while sleeping.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2620,     * <em>NOTE</em>: This method does not guarantee that the thread sleeps at
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2626,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2627,            Thread.sleep(millis);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2628,        } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2629,            // Set the interrupt flag of the thread to allow code higher up the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2630,            // stack to detect the interruption.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2631,            Thread.currentThread().interrupt();
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,962,            // Set the interrupt flag again.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,963,            Thread.currentThread().interrupt();
java/engine/org/apache/derby/impl/services/monitor/TopService.java,190,     return false;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,205,        synchronized (receiveSemaphore) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,206,            try {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,207,                receiveSemaphore.wait(DEFAULT_MESSAGE_RESPONSE_TIMEOUT);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,208,            } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/services/monitor/TopService.java,31,import org.apache.derby.iapi.util.InterruptStatus;
java/engine/org/apache/derby/impl/services/monitor/TopService.java,191,                    InterruptStatus.setInterrupted();
java/engine/org/apache/derby/impl/services/monitor/TopService.java,31,// import org.apache.derby.iapi.util.InterruptStatus;
java/engine/org/apache/derby/impl/services/monitor/TopService.java,191,                    // InterruptStatus.setInterrupted();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2213,"        st.executeUpdate(""create table atdc_6 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2220,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2221,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2222,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2223,"                ""triggername='ATDC_6_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2224,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_6_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2237,"        st.executeUpdate(""create table atdc_11 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2244,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2245,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2246,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2247,"                ""triggername='ATDC_11_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2248,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_11_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2260,"        st.executeUpdate(""create table atdc_12 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2274,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2275,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2276,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2277,"                ""triggername in ('ATDC_12_TRIGGER_1', 'ATDC_12_TRIGGER_2')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2278,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_12_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2295,"        st.executeUpdate(""create table atdc_13 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2320,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2321,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2322,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2323,"                ""triggername in ('ATDC_13_TRIGGER_1', ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2324,"                ""'ATDC_13_TRIGGER_2', 'ATDC_13_TRIGGER_3',"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2325,"                ""'ATDC_13_TRIGGER_4', 'ATDC_13_TRIGGER_5',"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2326,"                ""'ATDC_13_TRIGGER_6')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2327,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_13_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2376,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2383,"        st.executeUpdate(""create table atdc_14_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2384,"        st.executeUpdate(""create table atdc_14_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2385,"        st.executeUpdate(""insert into atdc_14_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2386,"        st.executeUpdate(""insert into atdc_14_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2396,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2397,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2398,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2399,"                ""triggername = 'ATDC_14_TRIGGER_1' "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2400,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_14_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2407,"        st.executeUpdate(""create table atdc_14_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2408,"        st.executeUpdate(""create table atdc_14_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2409,"        st.executeUpdate(""insert into atdc_14_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2410,"        st.executeUpdate(""insert into atdc_14_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2431,"        st.executeUpdate(""create table atdc_15_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2432,"        st.executeUpdate(""create table atdc_15_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2433,"        st.executeUpdate(""insert into atdc_15_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2434,"        st.executeUpdate(""insert into atdc_15_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2435,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2436,"            st.executeQuery("" select * from atdc_15_tab1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2437,"        JDBC.assertFullResultSet(rs, new String[][]{{""1"",""11""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2438,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2439,"            st.executeQuery("" select * from atdc_15_tab2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2440,"        JDBC.assertFullResultSet(rs, new String[][]{{""1"",""11""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2462,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1804,    newCC.setCurrentDependent(td);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1805,    stmtnode.bindStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2300,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2301,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2302,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountBeforeCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2303,"  //      st.executeUpdate(""drop table ATDC_12"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2350,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2351,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2352,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountBeforeCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2353,"    //    st.executeUpdate(""drop table ATDC_13"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2393,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2394,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2395,"  //              numberOfRowsInSysdepends(st),sysdependsRowCountAfterCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2396,"    //    st.executeUpdate(""drop table ATDC_13"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2473,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2474,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should not change"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2475,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountAfterCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2484,"//        st.executeUpdate(""drop table ATDC_15_TAB2"");"
java/engine/org/apache/derby/impl/jdbc/Util.java,328,"  return newEmbedSQLException(SQLState.SET_STREAM_FAILURE,"
java/engine/org/apache/derby/impl/jdbc/Util.java,329,"   new Object[] {msg},"
java/engine/org/apache/derby/impl/jdbc/Util.java,330,                StandardException.getSeverityFromIdentifier(SQLState.SET_STREAM_FAILURE));
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,76,
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,170,    Lock waitingLock = (Lock) waiters.get(space);
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,171,    if (waitingLock == null) {
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,172,"     // end of the road, no deadlock in this path"
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,173,     // pop items until the previous Stack
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,174,     rollback(chain);
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,175,     continue outer;
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,176,    }
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,177,
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,178,    // Is a LockControl or another ActiveLock
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,179,    Object waitOn = waiters.get(waitingLock);
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,180,    if (waitOn instanceof LockControl) {
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,182,     LockControl waitOnControl = (LockControl) waitOn;
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,184,     // This lock control may have waiters but no
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,185,     // one holding the lock. This is true if lock
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,186,     // has just been released but the waiters haven't
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,187,"     // woken up, or they are trying to get the synchronization we hold."
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,189,     if (waitOnControl.isUnlocked()) {
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,190,"      // end of the road, no deadlock in this path"
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,191,      // pop items until the previous Stack
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,192,      rollback(chain);
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,193,      continue outer;
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,194,     }
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,196,     chain.push(waitOnControl.getGrants());
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,198,     continue outer;
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,199,    } else {
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,200,     // simply waiting on another waiter
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,201,     space = waitingLock.getCompatabilitySpace();
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,202,    }
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,203,  }
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,77,"    SanityManager.THROWASSERT(""still on observr list "" + this);"
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,80,  if (arg.equals(RawTransaction.COMMIT) || arg.equals(RawTransaction.ABORT)) {
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,86,"     xact.dropStreamContainer(identity.getSegmentId(), identity.getContainerId());"
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,41, Code to support deadlock detection.
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,42,*/
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,50,  * <BR>
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,56,  * <p>
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,57,  * Would be nice to get a better high level description of deadlock
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,58,  * search.
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,62,  * to satisfy the syncronization requirements of
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,110,    // all done
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,138,
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,139,     // We could be seeing a situation here like
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,143,"     // In this case it's not a deadlock, although it"
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,144,     // depends on the locking policy of the Lockable. E.g.
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,145,     // Granted T1(latch)
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,146,     // Waiting T1(latch)
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,147,     //  is a deadlock.
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,148,     //
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,200,
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,211,"                            // We're behind another waiter in the queue, but we"
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,212,"                            // request compatible locks, so we'll get the lock"
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,213,                            // too once it gets it. Since we're not actually
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,214,"                            // blocked by the waiter, skip it and see what's"
java/engine/org/apache/derby/impl/services/locks/Deadlock.java,215,                            // blocking it instead.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1347,             try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1349,"                 // OK not to force WAL here, in fact, this operation preceeds the"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1350,                 // creation of the log record to ensure sufficient space.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1352,                 dataFactory.writeInProgress();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1353,                 try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1354,                 {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1355,"                     fileData = file.getRandomAccessFile( ""rw"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1356,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1357,                 finally
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1358,                 {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1359,                     dataFactory.writeFinished();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1360,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1362,                 // This container format specifies that the first page is an
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1363,                 // allocation page and the container information is stored
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1364,                 // within it.  The allocation page needs to be somewhat
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1365,                 // formatted because if the system crashed after the create
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1366,"                 // container log operation is written, it needs to be well"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1367,                 // formed enough to get the container information back out of
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1368,                 // it.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1369,                 //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1370,                 // Don't try to go thru the page cache here because the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1371,                 // container object cannot be found in the container cache at
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1372,"                 // this point yet.  However, if we use the page cache to store"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1373,"                 // the first allocation page, then in order to write itself"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1374,"                 // out, it needs to ask the container to do so, which is going"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1375,                 // to create a deadlock.  The allocation page cannot write
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1376,                 // itself out without going thru the container because it
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1377,                 // doesn't know where its offset is.  Here we effectively
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1378,                 // hardwire page 0 at offset 0 of the container file to be
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1379,                 // the first allocation page.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1380,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1381,                 // create an embryonic page - if this is not a temporary
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1382,"                 // container, synchronously write out the file header."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1383,                 writeRAFHeader(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1384,"                     actionIdentity, fileData, true,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1385,                     (actionIdentity.getSegmentId() !=
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1388,             } catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1390,"                 // only thrown by the RandomeAccessFile constructor,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1391,                 // so the file won't exist
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1392,"                 throw StandardException.newException( SQLState.FILE_CREATE, se, file);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1394,             } catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1396,                 boolean fileDeleted;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1397,                 try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1398,                     fileDeleted = privRemoveFile(file);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1399,                 } catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1400,"                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, se.toString());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1401,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1403,                 if (!fileDeleted) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1404,"                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, ioe.toString());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1405,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1407,"                 throw StandardException.newException( SQLState.FILE_CREATE, ioe, file);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,665,            // Assert and clear thread's flag:
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,667,            assertTrue(Thread.interrupted());
java/client/org/apache/derby/client/am/Lob.java,262,"                        typeDesc,"
java/client/org/apache/derby/client/am/Lob.java,263,                        ioe
java/client/org/apache/derby/client/am/Lob.java,262,"                            ioe,"
java/client/org/apache/derby/client/am/Lob.java,263,                            typeDesc
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,771,
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,785,
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,786,"        // Now that we are up and running, register any MBeans"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,787,        ManagementService mgmtService = ((ManagementService)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,788,                Monitor.getSystemModule(Module.JMX));
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,789,
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,790,        final Object versionMBean = mgmtService.registerMBean(
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,791,                           new Version(
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,792,"                                   getNetProductVersionHolder(),"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,793,"                                   SystemPermission.SERVER),"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,794,"                           VersionMBean.class,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,795,"                           ""type=Version,jar=derbynet.jar"");"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,796,        final Object networkServerMBean = mgmtService.registerMBean(
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,797,"                            new NetworkServerMBeanImpl(this),"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,798,"                            NetworkServerMBean.class,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,799,"                            ""type=NetworkServer"");"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,800,
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,78,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,79,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,80,import org.apache.derby.impl.sql.compile.FromSubquery;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2307,    fsq.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,661, /**
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,662,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,663,  */
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,664, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,665, {
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,666,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,667,  subquery.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,668, }
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,669,
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,213, /**
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,214,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,215,  */
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,216, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,217, {
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,218,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,219,  if (javaNode != null)
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,220,   javaNode.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,221, }
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,222,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,550,"  * Triggers, constraints and views get executed with their definer's"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,551,  * privileges and they can exist in the system only if their definers'
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,552,"  * still have all the privileges to creeate them. Based on this, any"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,555,"  * At compile time, we wil make sure that we do not collect the privilege"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,559, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1364, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1365,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1366,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1367, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1368, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1369,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1370,  if (expression != null)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1371,   expression.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1372, }
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1373,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2781,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2782, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2783,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2784,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2785, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2786, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2787,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2788,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2789,  int size = size();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2790,  for (int index = 0; index < size; index++)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2791,   ((ResultColumn) elementAt(index)).disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2792, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,482, /**
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,483,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,484,  */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,485, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,486, {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,487,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,488,  if (resultColumns != null)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,489,   resultColumns.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,490, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,491,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,27,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,37,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,38,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2265, /**
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2266,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2267,  */
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2268, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2269, {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2270,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2271,  int fromListSize = fromList.size();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2272,  for( int i = 0; i < fromListSize; i++)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2273,   ((FromTable) fromList.elementAt(i)).disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2274, }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2275,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,761,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1349,"     ResultSet rs = dm.getTablePrivileges(null, schema.toUpperCase(), table.toUpperCase());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1351,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java,248,"    private static boolean lessThan( int[] left, int[] right )"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1080,"    //bug 4579 - if the statement is invalid, regenerate the metadata info"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1081,    if (preparedStatement.isValid() == false)
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1082,    {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1083,"     //need to revalidate the statement here, otherwise getResultDescription would"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1084,     //still have info from previous valid statement
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1085,     preparedStatement.rePrepare(lcc);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1086,     rMetaData = null;
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1087,    }
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1092,    if (gcDuringGetMetaData == null || gcDuringGetMetaData.equals(execp.getActivationClass().getName()) == false)
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1093,    {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1094,     rMetaData = null;
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1095,     gcDuringGetMetaData = execp.getActivationClass().getName();
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1096,    }
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1097,    if (rMetaData == null)
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1098,    {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1099,     ResultDescription resd = preparedStatement.getResultDescription();
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1100,     if (resd != null)
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1101,     {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1102,"      // Internally, the result description has information"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1103,"      // which is used for insert, update and delete statements"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1104,"      // Externally, we decided that statements which don't"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1105,"      // produce result sets such as insert, update and delete"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1106,      // should not return ResultSetMetaData.  This is enforced
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1107,      // here
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1108,      String statementType = resd.getStatementType();
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1109,"      if (statementType.equals(""INSERT"") ||"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1110,"        statementType.equals(""UPDATE"") ||"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1111,"        statementType.equals(""DELETE""))"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1112,       rMetaData = null;
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1113,      else
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1114,          rMetaData = newEmbedResultSetMetaData(resd);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1115,     }
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1116,    }
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,681,    return ps;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,118,        // DERBY-2402 Client does not report added columns.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,119,        // Take out check when DERBY-2402 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,120,        if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,121,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,122,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,125,"        assertEquals(2, rsmd.getColumnCount());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,131,        // ResultSetMetaData for select * after alter table and
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,132,        // executeQuery.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,133,"        s.executeUpdate(""alter table bug4579 add column c13 int"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,134,        ResultSet rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,203,        if (usingEmbedded()) // client/server doesn't keep cursor open.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,204,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,205,            rs = pSt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,206,"            JDBC.assertColumnNames(rs, new String[]{""C1"", ""C2""});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,207,"            JDBC.assertFullResultSet(rs, new String[][]{"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,208,"                        {""1"", null},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,209,"                        {""2"", null}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,210,                    });
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,211,        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,212,            rs = pSt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,213,"            JDBC.assertColumnNames(rs, new String[]{""C1""});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,214,"            JDBC.assertFullResultSet(rs, new String[][]{{""1""}, {""2""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,215,        }
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,984,   mb.push(!sourceCTI.variableLength() || isNumber);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,460,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,29,import org.apache.derby.iapi.sql.compile.TypeCompiler;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,37,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,45,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,46,import org.apache.derby.iapi.services.loader.ClassInspector;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,57,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,58,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,59,import org.apache.derby.catalog.UUID;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,1537,"                ""APP"", ""EMPTY_TABLE"", emptyFileName, ""|"", ""``"", null, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,164,"                  ""create function EMC.GETARTICLE(path VARCHAR(40)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2409,"             ""    b char( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2412,"             ""    e varchar( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2423,"             ""    b char( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2426,"             ""    e varchar( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2529,"             ""create table t_atac_3( a varchar( 5 ), b varchar( 5 ) generated always as ( upper( a )  ) )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2534,"             ""create table t_atac_4( a varchar( 5 ) for bit data,  b varchar( 5 ) for bit data generated always as ( a )  )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java,643,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java,691,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java,2047,"            + ""'extinout/t1.dat' , '\\a', '\\', null) "");"
java/client/org/apache/derby/client/net/EncodedInputStream.java,26,import java.io.ByteArrayOutputStream;
java/client/org/apache/derby/client/net/EncodedInputStream.java,213,
java/client/org/apache/derby/client/net/EncodedInputStream.java,214,
java/client/org/apache/derby/client/net/EncodedInputStream.java,215,    static class PublicBufferOutputStream extends ByteArrayOutputStream{
java/client/org/apache/derby/client/net/EncodedInputStream.java,216,
java/client/org/apache/derby/client/net/EncodedInputStream.java,217,  PublicBufferOutputStream(int size){
java/client/org/apache/derby/client/net/EncodedInputStream.java,218,   super(size);
java/client/org/apache/derby/client/net/EncodedInputStream.java,219,  }
java/client/org/apache/derby/client/net/EncodedInputStream.java,221,  public byte[] getBuffer(){
java/client/org/apache/derby/client/net/EncodedInputStream.java,222,   return buf;
java/client/org/apache/derby/client/net/EncodedInputStream.java,223,  }
java/client/org/apache/derby/client/net/EncodedInputStream.java,224,
java/client/org/apache/derby/client/net/EncodedInputStream.java,225,    }
java/client/org/apache/derby/client/net/Request.java,1430,            DynamicByteArrayOutputStream dbaos = new DynamicByteArrayOutputStream();
java/client/org/apache/derby/client/net/Request.java,1431,            ObjectOutputStream oos = new ObjectOutputStream( dbaos );
java/client/org/apache/derby/client/net/Request.java,1435,            buffer = dbaos.getByteArray();
java/client/org/apache/derby/client/net/Request.java,1436,            length = dbaos.getUsed();
java/engine/org/apache/derby/diag/SpaceTable.java,150,            conglomTable[i] = new ConglomInfo(
java/engine/org/apache/derby/diag/SpaceTable.java,151,"                cds[i].getConglomerateNumber(),"
java/engine/org/apache/derby/diag/SpaceTable.java,152,"                cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/engine/org/apache/derby/diag/SpaceTable.java,153,                cds[i].isIndex());
java/engine/org/apache/derby/diag/SpaceTable.java,230,  String str = conglomInfo.getConglomName();
java/engine/org/apache/derby/diag/SpaceTable.java,350,"    public ConglomInfo(long conglomId, String conglomName, boolean isIndex)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,155,        String [] expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,157,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,162,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,171,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,172,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,173,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,178,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,191,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,192,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,193,"             ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,198,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,210,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,211,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,212,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,217,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,228,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,229,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,230,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,238,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,239,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,240,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,248,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,249,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,250,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,261,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,262,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,263,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,281,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,282,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,283,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,288,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,300,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,301,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,302,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,312,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,313,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,314,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,346,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,347,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,348,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,349,"        JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,353,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,362,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,363,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,364,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,365,"        JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,369,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/engine/org/apache/derby/diag/SpaceTable.java,137,   schemaName = lcc.getCurrentSchemaName();
java/engine/org/apache/derby/diag/SpaceTable.java,139,"        // if schemaName is null, it gets the default schema"
java/engine/org/apache/derby/diag/SpaceTable.java,140,"        SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true);"
java/engine/org/apache/derby/diag/SpaceTable.java,141,"        TableDescriptor td = dd.getTableDescriptor(tableName,sd, tc);"
java/engine/org/apache/derby/diag/SpaceTable.java,142,        if (td == null)  // table does not exist
java/engine/org/apache/derby/diag/SpaceTable.java,144,            conglomTable = new ConglomInfo[0];   // make empty conglom table
java/engine/org/apache/derby/diag/SpaceTable.java,145,            return;
java/engine/org/apache/derby/diag/SpaceTable.java,147,        ConglomerateDescriptor[] cds = td.getConglomerateDescriptors();
java/engine/org/apache/derby/diag/SpaceTable.java,156,"                 cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,1433,"  * index, the size of the return array is 1."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7036,"  * index, the size of the return array is 1."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7052,  /* Use UUIDStringOrderable in both start and stop positions for scan */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7053,  UUIDStringOrderable = getIDValueAsCHAR(uuid);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7054,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7055,  /* Set up the start/stop position for the scan */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7056,  ExecIndexRow keyRow = exFactory.getIndexableRow(1);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7057,"  keyRow.setColumn(1, UUIDStringOrderable);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7058,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7061,  getDescriptorViaIndex(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7062,"      SYSCONGLOMERATESRowFactory.SYSCONGLOMERATES_INDEX1_ID,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7063,"      keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7064,"      (ScanQualifier [][]) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7065,"      ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7066,"      (TupleDescriptor) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7067,"      cdl,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7068,      false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,167,        String [] allColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,168,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,169,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING"", ""TABLEID"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,170,        String [] expColNames = allColNames;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,329,"        JDBC.assertColumnNames(rs, allColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,342,"        JDBC.assertColumnNames(rs, allColNames);"
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,24,import java.util.Properties;
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,34,"    Only the put(), keys() and getProperty() methods are supported"
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,63,
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,64,  Properties p = new Properties();
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,65,
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,66,  if (write != null) {
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,67,
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,68,   for (Enumeration e = write.propertyNames(); e.hasMoreElements(); ) {
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,69,    String key = (String) e.nextElement();
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,70,"    p.put(key, write.getProperty(key));"
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,71,   }
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,72,  }
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,73,
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,74,  if (read != null) {
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,75,   for (Enumeration e = read.propertyNames(); e.hasMoreElements(); ) {
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,76,    String key = (String) e.nextElement();
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,77,"    p.put(key, read.getProperty(key));"
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,78,   }
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,79,  }
java/engine/org/apache/derby/iapi/util/DoubleProperties.java,80,  return p.keys();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SQLAuthorizationPropTest.java,3,* Derby - Class org.apache.derbyTesting.functionTests.lang.SQLAuthorizationPropTest
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,324,            } catch (StandardException se) {
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,325,                // We get here when SlaveController#stopSlave has been
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,326,"                // called, or if a fatal exception has been thrown."
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,327,                handleShutdown(se);
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,328,            }
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,884,            // FROM list of the current query block. See DERBY-5579.
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,886,            if ( isDerbyStyleTableFunction )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,887,            {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,888,                int referencedTableNumber = ref.getTableNumber();
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,890,                for ( int i = 0; i < fromListParam.size(); i++ )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,891,                {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,892,                    FromTable   fromTable = (FromTable) fromListParam.elementAt( i );
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,894,                    if ( referencedTableNumber == fromTable.getTableNumber() )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,888,
java/client/org/apache/derby/client/am/LogicalStatementEntity.java,234,        return ((org.apache.derby.client.am.Statement) getPhysStmt())
java/client/org/apache/derby/client/am/LogicalStatementEntity.java,235,                .isWrapperFor(iface);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,120,"        suite.addTest(baseSuite(""ClosedObjectTest:embedded""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,121,        suite.addTest(TestConfiguration.clientServerDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,122,"            baseSuite(""ClosedObjectTest:client"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,134,    private static Test baseSuite(String name)  {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,135,        TestSuite topSuite = new TestSuite(name);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,144,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,145,            TestSuite poolSuite = new TestSuite(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,146,"                    ""ClosedObjectTest ConnectionPoolDataSource"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,147,            PoolDataSourceDecorator poolDecorator =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,148,                new PoolDataSourceDecorator(poolSuite);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,149,            topSuite.addTest(poolDecorator);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,150,"            fillDataSourceSuite(poolSuite, poolDecorator);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,151,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,158,        return topSuite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,758,        public PoolDataSourceDecorator(Test test) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1637,    cc = getLanguageConnectionContext().
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1638,      getTransactionCompile().openConglomerate(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1639,"       conglomerateId,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1640,"                            false,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1641,"       0,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1642,"       TransactionController.MODE_RECORD,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1643,       TransactionController.ISOLATION_READ_COMMITTED);
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,721,  columnNumber = source.getColumnPosition();
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,464,  if(!expression.isConstantExpression()){
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,465,   return false;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,466,  }
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,467,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,468,  return expression.getConstantValueAsObject() instanceof Integer;
java/engine/org/apache/derby/iapi/types/SQLDouble.java,445,  setValue(bigDecimal.doubleValue());
java/engine/org/apache/derby/iapi/types/SQLDouble.java,446,
java/engine/org/apache/derby/iapi/types/SQLReal.java,401,  // infinity values which should throw an exception in setValue(double).
java/engine/org/apache/derby/iapi/types/SQLReal.java,402,  setValue(bigDecimal.floatValue());
java/engine/org/apache/derby/iapi/types/SQLReal.java,403,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4761,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4762,        // Uncomment when DERBY-5546 is fixed:
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4763,"        // assertUpdateState(rs, ""F04"", bdSmallestPosDoubleValue, ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4764,"        // assertUpdateState(rs, ""F04"", bdSmallestNegDoubleValue, ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4765,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4805,            //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4806,            // Uncomment when DERBY-5546 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4807,"            // assertUpdateState(rs, dfCols[i],"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4808,"            //     bdSmallestPosDoubleValue.divide(BigDecimal.TEN), ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4809,"            // assertUpdateState(rs, dfCols[i],"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4810,"            //     bdSmallestNegDoubleValue.divide(BigDecimal.TEN), ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,23,import java.io.UnsupportedEncodingException;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,24,import java.sql.Date;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,129,     * @throws UnsupportedEncodingException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,131,"    protected void setUp() throws UnsupportedEncodingException, SQLException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,142,     * identifer that encodes the time value. The values are then
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,149,     * @throws UnsupportedEncodingException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,151,"    public void testInertTime() throws SQLException, UnsupportedEncodingException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,645,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,646,        // Check the TIME portion is set to the same as tv
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,647,"        assertTimeEqual(tv, tsv);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,648,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,823,"        cal.set(1970, Calendar.JANUARY, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,825,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,826,"        cal.set(Calendar.HOUR_OF_DAY, hour);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,827,"        cal.set(Calendar.MINUTE, min);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,828,"        cal.set(Calendar.SECOND, sec);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,829,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,830,        Time to =  new Time(cal.getTime().getTime());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,848,        // JDK 1.3 can't call this!
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,849,        // cal.setTimeInMillis(t);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,850,        cal.setTime(new Date(t));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,853,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,854,        Time to =  new Time(cal.getTime().getTime());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,871,        cal.clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,872,        // JDK 1.3 can't call this!
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,873,        // cal.setTimeInMillis(t);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,874,        cal.setTime(Time.valueOf(s));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,875,"        cal.set(1970, Calendar.JANUARY, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,876,"        cal.set(Calendar.MILLISECOND, 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,877,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,878,        Time to =  new Time(cal.getTime().getTime());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,879,        assertTime1970(to);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,880,        return to;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,941,        cal.setTime(new java.util.Date(d));
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,41, /**
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,42,"  * Tell whether sorting is required for this RequiredRowOrdering,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,43,  * given a RowOrdering.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,44,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,45,  * @param rowOrdering The order of rows in question
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,46,  * @param optimizableList The current join order being considered by
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,47,  *    the optimizer. We need to look into this to determine if the outer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,48,  *    optimizables are single row resultset if the order by column is
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,49,  *    on an inner optimizable and that inner optimizable is not a one
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,50,  *    row resultset. DERBY-3926
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,51,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,52,"  * @return SORT_REQUIRED if sorting is required,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,53,  *   ELIMINATE_DUPS if no sorting is required but duplicates
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,54,  *       must be eliminated (i.e. the rows are in
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,55,"  *       the right order but there may be duplicates),"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,56,  *   NOTHING_REQUIRED is no operation is required
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,57,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,58,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,59,  */
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,60," int sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList)"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,61, throws StandardException;
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,63, /**
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,64,"  * Tell whether sorting is required for this RequiredRowOrdering,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,65,"  * given a RowOrdering representing a partial join order, and"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,66,  * a bit map telling what tables are represented in the join order.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,67,  * This is useful for reducing the number of cases the optimizer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,68,  * has to consider.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,69,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,70,  * @param rowOrdering The order of rows in the partial join order
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,71,  * @param tableMap  A bit map of the tables in the partial join order
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,72,  * @param optimizableList The current join order being considered by
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,73,  *    the optimizer. We need to look into this to determine if the outer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,74,  *    optimizables are single row resultset if the order by column is
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,75,  *    on an inner optimizable and that inner optimizable is not a one
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,76,  *    row resultset. DERBY-3926
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,77,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,78,"  * @return SORT_REQUIRED if sorting is required,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,79,  *   ELIMINATE_DUPS if no sorting is required by duplicates
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,80,  *       must be eliminated (i.e. the rows are in
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,81,"  *       the right order but there may be duplicates),"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,82,  *   NOTHING_REQUIRED is no operation is required
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,83,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,84,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,85,  */
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,86," int sortRequired(RowOrdering rowOrdering, JBitSet tableMap,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,87,   OptimizableList optimizableList)
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,88,   throws StandardException;
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,459,"    ""referencedColumns: "" + referencedColumns + ""\n"" +"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,85,  */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,142," // when we ""pull"" it.  If the latest complete join order was the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1768,"       bestRowOrdering, optimizableList) =="
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1769,        RequiredRowOrdering.NOTHING_REQUIRED)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2211,"              assignedTableMap,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2212,              optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2340,"              assignedTableMap,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2341,              optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,428, /**
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,429,  * @see RequiredRowOrdering#sortRequired
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,430,  *
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,431,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,432,  */
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,433," public int sortRequired(RowOrdering rowOrdering,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,434,   OptimizableList optimizableList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,435, {
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,436,"  return sortRequired(rowOrdering, (JBitSet) null, optimizableList);"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,437, }
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,439, /**
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,440,  * @see RequiredRowOrdering#sortRequired
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,441,  *
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,442,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,443,  */
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,444," public int sortRequired(RowOrdering rowOrdering,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,445,"   JBitSet tableMap,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,446,   OptimizableList optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,447,    throws StandardException
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,448, {
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,577,     for (int i=0; i < optimizableList.size(); i++)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,579,      //Get one outer optimizable at a time from the join
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,580,      //order
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,581,      Optimizable considerOptimizable =
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,582,       optimizableList.getOptimizable(i);
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,583,      //If we have come across the optimizable for the order
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,584,"      //by column in the join order, then we do not need to"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,585,      //look at the inner optimizables in the join order. As
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,586,"      //long as the outer optimizables are one row resultset,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,587,      //we are fine to consider sort avoidance.
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/_Suite.java,62,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java,45,public final class ImportExportProcedureTest extends BaseJDBCTestCase {
java/engine/org/apache/derby/impl/jdbc/Util.java,331,"  return newEmbedSQLException(SQLState.JAVA_EXCEPTION,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1333,                continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,605,    String refTableName = fromTable.getTableName().getTableName();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,631,    if (refTableName.equals(baseTableName))
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,745,                6);
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,71,  * @return The minimum value of the 4.
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,78,             int judgeUserJDBCTypeId)
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,84,"            judge = new TypeId(judgeTypeFormatId, null).getNull();"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,134,             int judgeUserJDBCTypeId)
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,138,  if (judgeUserJDBCTypeId == -1)
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,139,"   judge =  new TypeId(judgeTypeFormatId, null).getNull();"
java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java,140,  else
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,216,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,217,  {
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,218,"   SanityManager.ASSERT(dummySubqueryList.size() == 0,"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,219,"    ""dummySubqueryList.size() is expected to be 0"");"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,220,  }
java/shared/org/apache/derby/shared/common/reference/SQLState.java,985,"     String LANG_AGGREGATE_IN_GROUPBY_LIST                              = ""42Y26"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,373,  st.close();
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,168,                    return Thread.currentThread().getContextClassLoader();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,24,import java.io.BufferedReader;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,26,import java.io.FileInputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,28,import java.io.InputStreamReader;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,184,"        suite.addTest( decorateTest( true,  false, null, null, RUNNING_SECURITY_NOT_BOOTED ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,185,"        suite.addTest( decorateTest( true,  true, null, null, RUNNING_SECURITY_NOT_BOOTED ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,186,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,328,        if (!_unsecureSet) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,329,            assertWarningDerby6619();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,330,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,510,    private void assertWarningDerby6619() throws IOException {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,512,"                getSystemProperty(""user.dir"") + File.separator + ""derby.log"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,513,"        if (!DerbyNetAutoStartTest.checkLog(logFileName, expected6619)) {"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,514,"            fail(""Expected warning on derby.log cf DERBY-6619"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java,90,            UpgradeClassLoader.setThreadLoader(loader);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java,157,            UpgradeClassLoader.setThreadLoader(previousLoader);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,94,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,95,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,96,     * Force this thread to use a specific class loader.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,97,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,98,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,99,    public static void setThreadLoader(final ClassLoader which) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,100,        AccessController.doPrivileged(new PrivilegedAction<Void>() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,101,            public Void run() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,102,                java.lang.Thread.currentThread().setContextClassLoader(which);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,103,              return null;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,104,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,105,        });
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,106,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,107,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,108,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,109,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,110,     * Retrieve the class loader currently being used by this thread.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,111,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,112,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,113,    public static ClassLoader getThreadLoader() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,114,        return AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,115,                new PrivilegedAction<ClassLoader>() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,116,            public ClassLoader run() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,117,                return Thread.currentThread().getContextClassLoader();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,118,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,119,        });
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,120,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,121,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,525,        UpgradeClassLoader.setThreadLoader( version.getClassLoader() );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,814,        UpgradeClassLoader.setThreadLoader( version.getClassLoader() );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,833,        UpgradeClassLoader.setThreadLoader( softwareVersion.getClassLoader() );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,974,        if ( _originalClassLoader.get() == null ) { _originalClassLoader.set( UpgradeClassLoader.getThreadLoader() ); }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,978,        UpgradeClassLoader.setThreadLoader( (ClassLoader) _originalClassLoader.get() );
java/testing/org/apache/derbyTesting/junit/BaseTestSetup.java,45,    public final void run(TestResult result)
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,178,                    if (cl == ClassLoader.getSystemClassLoader()) {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,179,                        // If the context class loader is the same as the
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,180,"                        // system class loader, we are not worried that the"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,181,                        // timer thread will lead a class loader. (The
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,182,                        // system class loader will stay in memory for the
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,184,                        // that the timer thread keeps a reference to it.)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,26,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,236,  lcc.popTriggerExecutionContext(this);
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,242,  for (Enumeration<java.sql.ResultSet> e = resultSetVector.elements();
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,243,    e.hasMoreElements(); )
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,244,  {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,245,   java.sql.ResultSet rs = e.nextElement();
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,246,   try
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,247,   {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,248,    rs.close();
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,249,   } catch (SQLException se) {}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StalePlansTest.java,56,"        props.setProperty(""derby.language.stalePlanCheckInterval"", ""10"");"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,115,"        ""    <p> <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\"">db-derby-{0}-bin.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,116,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\"">db-derby-{0}-bin.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,118,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\"">db-derby-{0}-lib.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,119,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\"">db-derby-{0}-lib.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,124,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\"">db-derby-{0}-src.zip</a>  [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,125,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\"">db-derby-{0}-src.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.md5\"">MD5</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n"";"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,115,"        ""    <p> <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\"">db-derby-{0}-bin.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,116,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\"">db-derby-{0}-bin.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,118,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\"">db-derby-{0}-lib.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,119,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\"">db-derby-{0}-lib.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,124,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\"">db-derby-{0}-src.zip</a>  [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,125,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\"">db-derby-{0}-src.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.sha-512\"">SHA-512</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n"";"

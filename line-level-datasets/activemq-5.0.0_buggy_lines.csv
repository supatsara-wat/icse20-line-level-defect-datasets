File,LineNumber,src
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,130,"                        addMessage(message, location);"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,156,        try {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,157,            asyncWriteTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,158,        } catch (InterruptedException e) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,159,            throw new InterruptedIOException();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,236,        if (data == null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,50,"    private Map<SubscriptionKey, MessageId> ackedLastAckLocations = new HashMap<SubscriptionKey, MessageId>();"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,51,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,161,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,162,        }
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,163,        try {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,164,            asyncWriteTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,165,        } catch (InterruptedException e) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,166,            throw new InterruptedIOException();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,448,"            LOG.info(""Kaha Store using data directory "" + directory);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,451,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,504,            System.getProperties().remove(getPropertyKey());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,513,        // Is replaceAll() needed? Should test without it.
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,115,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,821,    }
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,56,    private static final Log LOG = LogFactory.getLog(KahaPersistenceAdapter.class);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,90,        Store store = getStateStore();
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,46,            list.add(new BitArray());
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,47,        BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,48,        brokerFactory.afterPropertiesSet();
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,49,        master = brokerFactory.getBroker();
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,50,        brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,51,        brokerFactory.afterPropertiesSet();
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,52,        slave = brokerFactory.getBroker();
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,53,        master.start();
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,54,        slave.start();
activemq-core/src/test/java/org/apache/activemq/broker/ft/QueueMasterSlaveTest.java,41,        messageCount = 10000;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,153,
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,164,"        LOG.info(""AMQStore starting using directory: "" + directory);"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,165,        this.directory.mkdirs();
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,79,"        ThreadPoolExecutor rc = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,397,                    if (configuration.isDuplex() || createdByDuplex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,572,                        if (!message.isResponseRequired()) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,28,    private static final class SchedulerTimerTask extends TimerTask {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,29,  private final Runnable task;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,30,
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,31,  private SchedulerTimerTask(Runnable task) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,32,   this.task = task;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,33,  }
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,34,
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,35,  public void run() {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,36,   task.run();
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,37,  }
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,38, }
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,37,
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,65,"                LOG.debug(""""+(now-lastRunTime)+"" ms elapsed since last read check."");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,83,"            LOG.trace(""A send is in progress"");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,88,"            LOG.trace(""No message sent since last write check, sending a KeepAliveInfo"");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,89,            // TODO: use a thread pool for this..
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,90,"            Thread thread = new Thread(""ActiveMQ: Activity Generator: ""+next.getRemoteAddress()) {"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,98,            };
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,99,            thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,100,            thread.start();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,102,"            LOG.trace(""Message sent since last write check, resetting flag"");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,110,"            LOG.trace(""A receive is in progress"");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,113,
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,115,"            LOG.debug(""No message received since last read check for "" + toString() + ""! Throwing InactivityIOException."");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,118,"            Thread thread = new Thread(""ActiveMQ: Inactivity Handler: ""+next.getRemoteAddress()) {"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,122,            };
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,123,            thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,124,            thread.start();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,127,"            LOG.trace(""Message received since last read check, resetting flag: "");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,153,            commandReceived.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,195,"        long l = Math.min(localWireFormatInfo.getMaxInactivityDuration(), remoteWireFormatInfo.getMaxInactivityDuration());"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,196,        if (l > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,198,"            Scheduler.executePeriodically(writeChecker, l / 2);"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,199,"            Scheduler.executePeriodically(readChecker, l);"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,208,            Scheduler.cancel(readChecker);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,209,            Scheduler.cancel(writeChecker);
activemq-core/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java,50,    protected int numberofProducers = 2;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java,167,        int avgRate = totalRate / producers.length;
activemq-core/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java,168,"        System.out.println(""Avg producer rate = "" + avgRate + "" msg/sec | Total rate = "" + totalRate + "", sent = "" + totalCount);"
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,118,        return getContext().isSlave();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,146,                if (low > size()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,147,"                    LOG.info(""SIZE() "" + size() + "" low = "" + low);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,148,                }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,192,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,211,        pageToUse.begin();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,212,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,65,    private int pageCacheSize = 1;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPageInfo.java,91,            page = hashIndex.getFullPage(id);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,28,import javax.jms.Destination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,97,    protected ResponseHandler createResponseHandler(StompFrame command) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,99,        // A response may not be needed.
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,103,                    StompFrame sc = new StompFrame();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,104,                    sc.setAction(Stomp.Responses.RECEIPT);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,105,"                    sc.setHeaders(new HashMap<String, String>(1));"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,106,"                    sc.getHeaders().put(Stomp.Headers.Response.RECEIPT_ID, receiptId);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,107,                    transportFilter.sendToStomp(sc);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,163,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,164,            // Let the stomp client know about any protocol errors.
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,165,            ByteArrayOutputStream baos = new ByteArrayOutputStream();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,166,"            PrintWriter stream = new PrintWriter(new OutputStreamWriter(baos, ""UTF-8""));"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,167,            e.printStackTrace(stream);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,168,            stream.close();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,169,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,170,"            HashMap<String, String> headers = new HashMap<String, String>();"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,171,"            headers.put(Stomp.Headers.Error.MESSAGE, e.getMessage());"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,172,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,173,            final String receiptId = command.getHeaders().get(Stomp.Headers.RECEIPT_REQUESTED);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,174,            if (receiptId != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,175,"                headers.put(Stomp.Headers.Response.RECEIPT_ID, receiptId);"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,176,            }
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,177,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,178,"            StompFrame errorMessage = new StompFrame(Stomp.Responses.ERROR, headers, baos.toByteArray());"
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,179,            sendToStomp(errorMessage);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,180,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,181,            if (e.isFatal()) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,182,                getTransportFilter().onException(e);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,396,    protected void onStompConnect(StompFrame command) throws ProtocolException {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,433,
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,487,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompConnection.java,33,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompConnection.java,35,"        stompSocket = new Socket(host, port);"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,42,import org.apache.activemq.transport.reliable.UnreliableUdpTransportTest;
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,49,"    protected String bindAddress = ""stomp://localhost:0"";"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,52,    private TransportConnector connector;
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,57,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,59,        broker = new BrokerService();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,60,        broker.setPersistent(false);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,61,
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,62,        connector = broker.addConnector(bindAddress);
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,68,        connection = cf.createConnection();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,75,        URI connectUri = connector.getConnectUri();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,76,"        stompConnection.open(""127.0.0.1"", connectUri.getPort());"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,80,        return new Socket();
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,120,"        String connectFrame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n"" + ""request-id: 1\n"" + ""\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,133,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,158,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,177,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,198,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,225,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,245,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,274,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,308,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,346,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,368,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,392,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,429,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,453,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompTest.java,489,"        String frame = ""CONNECT\n"" + ""login: brianm\n"" + ""passcode: wombats\n\n"" + Stomp.NULL;"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,304,        for (Iterator i = container.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,305,            ConsumerMessageRef ref = (ConsumerMessageRef)i.next();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,306,            if (ref != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,307,                TopicSubAck tsa = ackContainer.get(ref.getAckEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,308,                if (tsa != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,309,                    if (tsa.decrementCount() <= 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,310,                        ackContainer.remove(ref.getAckEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,311,                        messageContainer.remove(tsa.getMessageEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,312,                    } else {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,313,"                        ackContainer.update(ref.getAckEntry(), tsa);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,81,                broker = BrokerFactory.createBroker(new URI(brokerXmlConfig));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,82,                broker.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,83,            } catch (Throwable e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,84,"                throw new ResourceAdapterInternalException(""Failed to startup an embedded broker: "" + brokerXmlConfig + "", due to: "" + e, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,85,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,179,        if (broker != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,180,            ServiceSupport.dispose(broker);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,181,            broker = null;
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,140,"            fireAdvisory(context, topic, info);"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,285,                    count += dest.getDestinationStatistics().getConsumers()
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,286,                            .getCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,61,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,74,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,75,    final Broker broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,76,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,78,    private final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,80,    private final SystemUsage systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,81,    private final MemoryUsage memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,83,    private final LinkedList<MessageReference> pagedInMessages = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,86,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,87,    private int garbageSize;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,88,    private int garbageSizeBeforeCollection = 1000;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,90,    private final MessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,93,    private int maximumPagedInMessages = garbageSizeBeforeCollection * 2;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,107,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,110,        this.broker = broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,111,        this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,112,        this.systemUsage=systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,113,"        this.memoryUsage = new MemoryUsage(systemUsage.getMemoryUsage(), destination.toString());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,114,        this.memoryUsage.setUsagePortion(1.0f);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,115,        this.store = store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,123,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,124,        // Let the store know what usage manager we are using so that he can
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,125,        // flush messages to disk
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,126,        // when usage gets high.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,127,        if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,128,            store.setMemoryUsage(memoryUsage);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,129,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,130,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,131,        // let's copy the enabled property from the parent DestinationStatistics
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,132,        this.destinationStatistics.setEnabled(parentStats.isEnabled());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,133,        destinationStatistics.setParent(parentStats);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,135,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,207,        maximumPagedInMessages += sub.getConsumerInfo().getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,208,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,242,            for (Iterator<MessageReference> i = pagedInMessages.iterator(); i
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,266,        maximumPagedInMessages -= sub.getConsumerInfo().getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,312,                for (Iterator<MessageReference> i = pagedInMessages.iterator(); i
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,496,    public void dropEvent() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,497,        dropEvent(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,498,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,499,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,500,    public void dropEvent(boolean skipGc) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,501,        // TODO: need to also decrement when messages expire.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,502,        destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,503,        synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,504,            garbageSize++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,505,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,506,        if (!skipGc && garbageSize > garbageSizeBeforeCollection) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,507,            gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,508,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,509,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,510,            taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,511,        } catch (InterruptedException e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,512,"            log.warn(""Task Runner failed to wakeup "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,513,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,514,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,515,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,516,    public void gc() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,517,        synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,518,            for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,519,                // Remove dropped messages from the queue.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,520,                QueueMessageReference node = (QueueMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,521,                if (node.isDropped()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,522,                    garbageSize--;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,523,                    i.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,524,                    continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,525,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,526,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,527,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,528,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,529,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,592,    public String getDestination() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,593,        return destination.getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,594,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,595,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,596,    public MemoryUsage getBrokerMemoryUsage() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,597,        return memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,598,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,599,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,600,    public DestinationStatistics getDestinationStatistics() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,601,        return destinationStatistics;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,602,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,603,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,635,    public String getName() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,636,        return getActiveMQDestination().getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,637,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,638,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,655,    public MessageStore getMessageStore() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,656,        return store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,657,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,658,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,667,            for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,739,    public void purge() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,740,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,741,        pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,743,        synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,744,            ConnectionContext c = createConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,745,            for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,747,                    QueueMessageReference r = (QueueMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,755,"                        acknowledge(c, null, ack, r);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,756,                        r.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,757,                        dropEvent(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,762,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,763,            // Run gc() by hand. Had we run it in the loop it could be
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,764,            // quite expensive.
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,765,            gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,766,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,802,        pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,803,        int counter = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,804,        synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,805,            ConnectionContext c = createConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,806,            for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,807,                IndirectMessageReference r = (IndirectMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,808,"                if (filter.evaluate(c, r)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,809,"                    removeMessage(c, r);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,810,                    if (++counter >= maximumMessages && maximumMessages > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,811,                        break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,812,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,816,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,817,        return counter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,853,        pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,854,        int counter = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,855,        synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,856,            for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,857,                MessageReference r = i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,859,                    r.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,860,                    try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,861,                        Message m = r.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,862,"                        BrokerSupport.resend(context, m, dest);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,863,                        if (++counter >= maximumMessages && maximumMessages > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,864,                            break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,866,                    } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,867,                        r.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,871,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,872,        return counter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,903,"    public int moveMatchingMessagesTo(ConnectionContext context, MessageReferenceFilter filter, ActiveMQDestination dest, int maximumMessages) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,904,        pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,905,        int counter = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,906,        synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,907,            for (Iterator<MessageReference> i = pagedInMessages.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,908,                IndirectMessageReference r = (IndirectMessageReference)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,917,                            if (++counter >= maximumMessages && maximumMessages > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,918,                                break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,926,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,927,        return counter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,940,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,979,"        acknowledge(c, null, ack, r);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,980,        r.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,981,        dropEvent();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1011,        final int toPageIn = maximumPagedInMessages - pagedInMessages.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1039,                pagedInMessages.addAll(result);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,49,"    protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,52,"        q.acknowledge(context, this, ack, n);"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,53,
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,57,            node.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,58,            queue.dropEvent();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,63,                    node.drop();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,64,                    queue.dropEvent();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,21,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,51,import org.apache.activemq.store.MessageStore;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,58,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,72,    protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,74,    protected final Valve dispatchValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,75,    // this could be NULL! (If an advisory)
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,76,    protected final TopicMessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,77,    private final SystemUsage systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,78,    private final MemoryUsage memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,79,
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,95,    private final Broker broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,99,        this.broker = broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,100,        this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,101,        this.store = store; // this could be NULL! (If an advisory)
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,102,        this.systemUsage=systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,103,"        this.memoryUsage = new MemoryUsage(systemUsage.getMemoryUsage(), destination.toString());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,104,        this.memoryUsage.setUsagePortion(1.0f);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,113,        // Let the store know what usage manager we are using so that he can
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,114,        // flush messages to disk
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,115,        // when usage gets high.
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,116,        if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,117,            store.setMemoryUsage(memoryUsage);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,118,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,119,
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,120,        // let's copy the enabled property from the parent DestinationStatistics
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,121,        this.destinationStatistics.setEnabled(parentStats.isEnabled());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,122,        this.destinationStatistics.setParent(parentStats);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,177,        if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,178,"            store.deleteSubscription(key.clientId, key.subscriptionName);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,197,            if (store == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,205,"            SubscriptionInfo info = store.lookupSubscription(clientId, subscriptionName);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,211,"                    store.deleteSubscription(clientId, subscriptionName);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,225,"                store.addSubsciption(info,subscription.getConsumerInfo().isRetroactive());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,231,"                store.recoverSubscription(clientId, subscriptionName, new MessageRecoveryListener() {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,398,        if (store != null && message.isPersistent()
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,405,"            store.addMessage(context, message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,449,        if (store != null && node.isPersistent()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,451,"            store.acknowledge(context, dsub.getClientId(), dsub.getSubscriptionName(), node.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,456,        if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,457,            store.removeAllMessages(context);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,466,        return store != null ? store.getMessage(messageId) : null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,490,            if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,491,                store.recover(new MessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,530,    public MemoryUsage getBrokerMemoryUsage() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,531,        return memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,532,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,533,
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,534,    public DestinationStatistics getDestinationStatistics() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,535,        return destinationStatistics;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,536,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,537,
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,538,    public ActiveMQDestination getActiveMQDestination() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,539,        return destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,540,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,541,
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,542,    public String getDestination() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,543,        return destination.getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,544,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,570,    public MessageStore getMessageStore() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,571,        return store;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,572,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,573,
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,582,    public String getName() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,583,        return getActiveMQDestination().getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,584,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,585,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,34,"    public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,36,        for (Iterator iter = consumers.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,37,            Subscription sub = (Subscription)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,39,            // Don't deliver to browsers
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,40,            if (sub.getConsumerInfo().isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,41,                continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,42,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,43,            // Only dispatch to interested subscriptions
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,44,"            if (!sub.matches(node, msgContext)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,45,                continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,47,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,48,            sub.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/SimpleDispatchPolicy.java,49,            count++;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,598,                if (!deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,599,                    MessageDispatch md = deliveredMessages.getFirst();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,600,"                    ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,601,                    deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,602,                    ackCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,715,            deliveredMessages.addFirst(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,733,                if (!deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,734,                    if (optimizeAcknowledge) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,735,"                        if (deliveryingAcknowledgements.compareAndSet(false, true)) {"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,736,                            ackCounter++;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,737,                            if (ackCounter >= (info.getCurrentPrefetchSize() * .65)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,738,"                                MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE,"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,739,                                                                deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,740,                                session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,741,                                ackCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,742,                                deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,744,                            deliveryingAcknowledgements.set(false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,746,                    } else {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,747,"                        MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, deliveredMessages"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,748,                            .size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,749,                        session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,750,                        deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,815,        if (deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,816,            return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,817,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,818,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,819,        // Acknowledge the last message.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,820,        MessageDispatch lastMd = deliveredMessages.get(0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,821,"        MessageAck ack = new MessageAck(lastMd, MessageAck.STANDARD_ACK_TYPE, deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,822,        if (session.isTransacted()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,823,            session.doStartTransaction();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,824,            ack.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,825,        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,826,        session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,827,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,828,        // Adjust the counters
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,829,        deliveredCounter -= deliveredMessages.size();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,830,"        additionalWindowSize = Math.max(0, additionalWindowSize - deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,831,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,832,        if (!session.isTransacted()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,833,            deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,838,        deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,848,                    for (int i = 0; (i < deliveredMessages.size()) && (i < ackCounter); i++) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,849,                        // ensure we don't filter this as a duplicate
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,850,                        MessageDispatch md = deliveredMessages.removeLast();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,851,"                        session.connection.rollbackDuplicate(this, md.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,855,            if (deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,856,                return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,857,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,858,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,859,            // Only increase the redlivery delay after the first redelivery..
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,860,            MessageDispatch lastMd = deliveredMessages.getFirst();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,861,            if (lastMd.getMessage().getRedeliveryCounter() > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,862,                redeliveryDelay = redeliveryPolicy.getRedeliveryDelay(redeliveryDelay);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,863,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,864,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,865,            for (Iterator iter = deliveredMessages.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,866,                MessageDispatch md = (MessageDispatch)iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,867,                md.getMessage().onMessageRolledBack();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,868,            }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,869,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,870,            if (redeliveryPolicy.getMaximumRedeliveries() != RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,871,                && lastMd.getMessage().getRedeliveryCounter() > redeliveryPolicy.getMaximumRedeliveries()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,872,                // We need to NACK the messages so that they get sent to the
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,873,                // DLQ.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,874,                // Acknowledge the last message.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,875,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,876,"                MessageAck ack = new MessageAck(lastMd, MessageAck.POSION_ACK_TYPE, deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,877,                session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,878,                // ensure we don't filter this as a duplicate
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,879,"                session.connection.rollbackDuplicate(this, lastMd.getMessage());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,880,                // Adjust the window size.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,881,"                additionalWindowSize = Math.max(0, additionalWindowSize - deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,882,                redeliveryDelay = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,883,            } else {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,884,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,885,"                MessageAck ack = new MessageAck(lastMd, MessageAck.REDELIVERED_ACK_TYPE, deliveredMessages.size());"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,886,                session.asyncSendPacket(ack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,887,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,888,                // stop the delivery of messages.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,889,                unconsumedMessages.stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,890,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,893,                    unconsumedMessages.enqueueFirst(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,895,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,896,                if (redeliveryDelay > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,897,                    // Start up the delivery again a little later.
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,898,                    Scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,899,                        public void run() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,900,                            try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,901,                                if (started.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,902,                                    start();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,904,                            } catch (JMSException e) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,905,                                session.connection.onAsyncException(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,907,                        }
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,908,"                    }, redeliveryDelay);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,909,                } else {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,910,                    start();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,912,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,914,            deliveredCounter -= deliveredMessages.size();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,915,            deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,292,
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,97,        return destination.getBrokerMemoryUsage().getPercentUsage();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,101,        return destination.getBrokerMemoryUsage().getLimit();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,105,        destination.getBrokerMemoryUsage().setLimit(limit);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,124,    public final MemoryUsage getBrokerMemoryUsage() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,56,    MemoryUsage getBrokerMemoryUsage();
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,84,    public MemoryUsage getBrokerMemoryUsage() {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,85,        return next.getBrokerMemoryUsage();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,22,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,36,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,50,"    public DurableTopicSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info, boolean keepDurableSubsActive)"
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,51,        throws InvalidSelectorException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,323,            destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,349,                                    destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,439,                            destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,59,import org.apache.activemq.store.PersistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,60,import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,291,                                    destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,397,                        destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,233,"                sub = new DurableTopicSubscription(broker, usageManager, context, info, keepDurableSubsActive);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,234,                ActiveMQDestination destination = info.getDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,70,            queue.getBrokerMemoryUsage().setLimit(memoryLimit);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,94,            topic.getBrokerMemoryUsage().setLimit(memoryLimit);
activemq-core/src/main/java/org/apache/activemq/command/Message.java,574,            this.memoryUsage=regionDestination.getBrokerMemoryUsage();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,148,"    protected void acknowledge(ConnectionContext context, MessageId messageId,"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,154,"        if (topicReferenceStore.acknowledgeReference(context, clientId,"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,155,"                subscriptionName, messageId)) {"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,156,            MessageAck ack = new MessageAck();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,157,            ack.setLastMessageId(messageId);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,73,"    public void addMessageReference(final ConnectionContext context, final MessageId messageId,"
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,255,                        callback.run();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,96,    public int getMemoryPercentageUsed() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,112,    public int getStorePercentageUsed() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,117,    public long getTmpLimit() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,121,    public int getTmpPercentageUsed() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,129,    public void setTmpLimit(long limit) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,175,        return broker.getTemporaryTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerViewMBean.java,64,    int getMemoryPercentageUsed();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerViewMBean.java,70,    int getStorePercentageUsed();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerViewMBean.java,76,    int getTmpPercentageUsed();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerViewMBean.java,78,    long getTmpLimit();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerViewMBean.java,80,    void setTmpLimit(long limit);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,96,    public int getMemoryPercentageUsed() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,297,    public float getMemoryLimitPortion() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,309,    public void setMemoryLimitPortion(float value) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationViewMBean.java,130,    int getMemoryPercentageUsed();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationViewMBean.java,146,    float getMemoryLimitPortion();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationViewMBean.java,152,    void setMemoryLimitPortion(float value);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,142,    public final String getDestination() {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,143,        return destination.getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,144,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,145,
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,79,"                return new Queue(broker.getRoot(), destination, memoryManager, null, destinationStatistics, taskRunnerFactory, broker.getTempDataStore()) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,93,"                Queue queue = new Queue(broker.getRoot(), destination, memoryManager, store, destinationStatistics, taskRunnerFactory, broker.getTempDataStore());"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,130,"                entry.configure(queue, broker.getTempDataStore());"
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,55,"        this.pending = new StoreDurableSubscriberCursor(context.getClientId(), info.getSubscriptionName(), broker.getTempDataStore(), info.getPrefetchSize(), this);"
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,221,    public String getSubscriptionName() {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,222,        return subscriptionKey.getSubscriptionName();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,223,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,224,
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,230,    public String getClientId() {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,231,        return subscriptionKey.getClientId();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,232,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,233,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,98,"    public Queue(Broker broker, ActiveMQDestination destination, final SystemUsage systemUsage, MessageStore store, DestinationStatistics parentStats,"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,99,"                 TaskRunnerFactory taskFactory, Store tmpStore) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,102,        if (destination.isTemporary() || tmpStore==null ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,105,"            this.messages = new StoreQueueCursor(this, tmpStore);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,321,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,325,"            broker.messageExpired(context, message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,419,            message.setRegionDestination(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,681,                        MessageAck ack = new MessageAck();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,682,                        ack.setAckType(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,683,                        ack.setDestination(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,684,                        ack.setMessageID(r.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,685,"                        removeMessage(c, null, r, ack);"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,712,"    LOG.warn(""Failed to send ""+node+"" to dead letter queue"");"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,715,"   LOG.warn(""Failed to pass expired message to dead letter queue"",e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,44,"        return new Queue(broker.getRoot(), destination, usageManager, null, destinationStatistics, taskRunnerFactory, null) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,187,            String clientId = subscription.getClientId();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,188,            String subscriptionName = subscription.getSubscriptionName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,438,"            topicStore.acknowledge(context, dsub.getClientId(), dsub.getSubscriptionName(), node.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,71,        Store tempDataStore = broker.getTempDataStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,72,        if (tempDataStore != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,73,"            this.matched = new FilePendingMessageCursor(matchedName, tempDataStore);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,74,        } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,43,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,45,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,50,    private Iterator iter;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,61,"    public FilePendingMessageCursor(String name, Store store) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,63,        this.store = store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,160,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,161,            regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,162,            if (isSpaceInMemoryList()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,163,                memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,164,                node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,165,            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,166,                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,167,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,169,                getDiskList().addLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,171,        } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,172,            throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,182,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,183,            regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,184,            if (isSpaceInMemoryList()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,185,                memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,186,                node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,187,            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,193,        } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,194,            throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,274,"    public void onUsageChanged(Usage usage, int oldPercentUsage, int newPercentUsage) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,279,                    flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,280,                    flushRequired = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,315,                e.printStackTrace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,97,        if (cacheEnabled && !isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,32,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,61,"    public StoreDurableSubscriberCursor(String clientId, String subscriberName, Store store, int maxBatchSize, Subscription subscription) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,65,"        this.nonPersistent = new FilePendingMessageCursor(clientId + subscriberName, store);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,38,    private Store tmpStore;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,50,"    public StoreQueueCursor(Queue queue, Store tmpStore) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,52,        this.tmpStore = tmpStore;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,61,"            nonPersistent = new FilePendingMessageCursor(queue.getDestination(), tmpStore);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingDurableSubscriberMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingDurableSubscriberMessageStoragePolicy.java,39,     * @param tmpStorage
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingDurableSubscriberMessageStoragePolicy.java,43,"    public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingDurableSubscriberMessageStoragePolicy.java,44,"        return new FilePendingMessageCursor(name, tmpStorage);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingQueueMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingQueueMessageStoragePolicy.java,36,     * @param tmpStore
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingQueueMessageStoragePolicy.java,41,"    public PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingQueueMessageStoragePolicy.java,42,"        return new FilePendingMessageCursor(""PendingCursor:"" + queue.getName(), tmpStore);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,35,     * @param tmpStorage
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,41,"    public PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage,"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,42,                                                                  int maxBatchSize) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/FilePendingSubscriberMessageStoragePolicy.java,43,"        return new FilePendingMessageCursor(""PendingCursor:"" + name, tmpStorage);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy.java,36,     * @param tmpStorage
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingDurableSubscriberMessageStoragePolicy.java,40,"    PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy.java,35,     * @param tmpStore
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingQueueMessageStoragePolicy.java,38,"    PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy.java,20,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy.java,34,     * @param tmpStorage
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PendingSubscriberMessageStoragePolicy.java,38,"    PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage, int maxBatchSize);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,28,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,61,"    public void configure(Queue queue, Store tmpStore) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,73,"            PendingMessageCursor messages = pendingQueuePolicy.getQueuePendingMessageCursor(queue, tmpStore);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,124,"            subscription.setMatched(pendingSubscriberPolicy.getSubscriberPendingMessageCursor(name, broker.getTempDataStore(), maxBatchSize));"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,129,        String clientId = sub.getClientId();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,130,        String subName = sub.getSubscriptionName();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,133,"            PendingMessageCursor cursor = pendingDurableSubscriberPolicy.getSubscriberPendingMessageCursor(clientId, subName, broker.getTempDataStore(), prefetch, sub);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingDurableSubscriberMessageStoragePolicy.java,40,     * @param tmpStorage
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingDurableSubscriberMessageStoragePolicy.java,44,"    public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingDurableSubscriberMessageStoragePolicy.java,45,"        return new StoreDurableSubscriberCursor(clientId, name, tmpStorage, maxBatchSize, sub);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingQueueMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingQueueMessageStoragePolicy.java,36,     * @param tmpStore
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingQueueMessageStoragePolicy.java,41,"    public PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/StorePendingQueueMessageStoragePolicy.java,42,"        return new StoreQueueCursor(queue, tmpStore);"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingDurableSubscriberMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingDurableSubscriberMessageStoragePolicy.java,35,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingDurableSubscriberMessageStoragePolicy.java,38,     * @param tmpStorage
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingDurableSubscriberMessageStoragePolicy.java,42,"    public PendingMessageCursor getSubscriberPendingMessageCursor(String clientId, String name, Store tmpStorage, int maxBatchSize, Subscription sub) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingQueueMessageStoragePolicy.java,22,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingQueueMessageStoragePolicy.java,36,     * @param tmpStore
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingQueueMessageStoragePolicy.java,39,"    public PendingMessageCursor getQueuePendingMessageCursor(Queue queue, Store tmpStore) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingSubscriberMessageStoragePolicy.java,21,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingSubscriberMessageStoragePolicy.java,35,     * @param tmpStorage
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingSubscriberMessageStoragePolicy.java,41,"    public PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage,"
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/VMPendingSubscriberMessageStoragePolicy.java,42,                                                                  int maxBatchSize) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,130,        boolean pendingEmpty = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,131,        synchronized(pendingLock) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,132,            pendingEmpty = pending.isEmpty();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,133,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,134,        enqueueCounter++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,135,        if (optimizedDispatch && !isFull() && pendingEmpty && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,136,            dispatch(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,137,        } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,138,            optimizePrefetch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,139,            synchronized(pendingLock) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,140,                if (pending.isEmpty() && LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,141,"                    LOG.debug(""Prefetch limit."");"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,142,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,143,                pending.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,144,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,145,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,146,            dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,147,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,148,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,514,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,515,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,523,                if(pending != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,524,                   synchronized(pendingLock) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,525,                        pending.dispatched(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,526,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,527,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,248,    public void dispatched(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,250,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,268,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,269,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,33,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,54,    private boolean storeMayHaveMoreMessages = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,78,            safeFillBatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,107,            storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,114,            storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,171,            }else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,172,                this.storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,211,            this.storeMayHaveMoreMessages = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,213,        while (this.batchList.isEmpty() && this.storeMayHaveMoreMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,214,            this.storeMayHaveMoreMessages = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,218,                this.storeMayHaveMoreMessages=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,243,            storeMayHaveMoreMessages = true;
activemq-core/src/test/java/org/apache/activemq/bugs/JmsDurableTopicSlowReceiveTest.java,42,    static final int NMSG = 100;
activemq-core/src/main/java/org/apache/activemq/pool/ConnectionPool.java,76,        });
activemq-core/src/main/java/org/apache/activemq/pool/ConnectionPool.java,221,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,179,"            LOG.warn(""Transport failed, attempting to automatically reconnect due to: "" + e, e);"
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,188,            reconnectTask.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,616,
activemq-core/src/main/java/org/apache/activemq/ActiveMQInputStream.java,177,        if (eosReached) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQInputStream.java,185,        if (eosReached) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,97,        buffer[count++] = (byte)b;
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,123,        try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,124,            ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,125,"            msg.writeBytes(buffer, 0, count);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,126,"            send(msg, false);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,127,        } catch (JMSException e) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,128,            throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,130,        count = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,140,                String key = (String)iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQOutputStream.java,150,            msg.setGroupSequence((int)messageSequence);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,184,     * @param toMesage the message to add the properties to
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,187,"    public static void copyProperties(Message fromMessage, Message toMesage) throws JMSException {"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,188,        toMesage.setJMSMessageID(fromMessage.getJMSMessageID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,189,        toMesage.setJMSCorrelationID(fromMessage.getJMSCorrelationID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,190,        toMesage.setJMSReplyTo(transformDestination(fromMessage.getJMSReplyTo()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,191,        toMesage.setJMSDestination(transformDestination(fromMessage.getJMSDestination()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,192,        toMesage.setJMSDeliveryMode(fromMessage.getJMSDeliveryMode());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,193,        toMesage.setJMSRedelivered(fromMessage.getJMSRedelivered());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,194,        toMesage.setJMSType(fromMessage.getJMSType());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,195,        toMesage.setJMSExpiration(fromMessage.getJMSExpiration());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,196,        toMesage.setJMSPriority(fromMessage.getJMSPriority());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,197,        toMesage.setJMSTimestamp(fromMessage.getJMSTimestamp());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,204,"            toMesage.setObjectProperty(name, obj);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,42," * @openwire:marshaller code=""23"""
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,85,        ActiveMQMessage msg = (ActiveMQMessage)o;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,119,     *
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,144,     *
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,262,        this.setPriority((byte)priority);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,293,"                Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,302,"                String rc = (String)TypeConversionSupport.convert(value, String.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,311,"                Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,320,"                String rc = (String)TypeConversionSupport.convert(value, String.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,324,                ((ActiveMQMessage)message).setJMSCorrelationID(rc);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,329,"                Long rc = (Long)TypeConversionSupport.convert(value, Long.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,333,                ((ActiveMQMessage)message).setJMSExpiration(rc.longValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,338,"                Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,342,                ((ActiveMQMessage)message).setJMSPriority(rc.intValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,347,"                Boolean rc = (Boolean)TypeConversionSupport.convert(value, Boolean.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,351,                ((ActiveMQMessage)message).setJMSRedelivered(rc.booleanValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,356,"                ActiveMQDestination rc = (ActiveMQDestination)TypeConversionSupport.convert(value, ActiveMQDestination.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,360,                ((ActiveMQMessage)message).setReplyTo(rc);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,365,"                Long rc = (Long)TypeConversionSupport.convert(value, Long.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,369,                ((ActiveMQMessage)message).setJMSTimestamp(rc.longValue());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,374,"                String rc = (String)TypeConversionSupport.convert(value, String.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,378,                ((ActiveMQMessage)message).setJMSType(rc);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,399,        if (setter != null) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,412,            Map.Entry entry = (Map.Entry)iter.next();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,416,"            setObjectProperty((String)entry.getKey(), entry.getValue());"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,421,
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,424,
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,454,"        Boolean rc = (Boolean)TypeConversionSupport.convert(value, Boolean.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,466,"        Byte rc = (Byte)TypeConversionSupport.convert(value, Byte.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,478,"        Short rc = (Short)TypeConversionSupport.convert(value, Short.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,490,"        Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,502,"        Long rc = (Long)TypeConversionSupport.convert(value, Long.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,514,"        Float rc = (Float)TypeConversionSupport.convert(value, Float.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,526,"        Double rc = (Double)TypeConversionSupport.convert(value, Double.class);"
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,543,"        String rc = (String)TypeConversionSupport.convert(value, String.class);"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,80,    private int lockKeepAlivePeriod;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,501,    public int getLockKeepAlivePeriod() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,505,    public void setLockKeepAlivePeriod(int lockKeepAlivePeriod) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,181,                            node.getRegionDestination()
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,182,                                    .getDestinationStatistics().getDequeues()
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,183,                                    .increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,592,"    protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference node) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,593,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,123,    /**
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,124,     * @param queue
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,125,     * @param string
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,126,     * @param b
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,127,     * @return
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,128,     */
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,129,"    private TaskRunner DedicatedTaskRunner(Queue queue, String string, boolean b) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,130,        // TODO Auto-generated method stub
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,131,        return null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,132,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,133,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,194,                consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,244,                consumers.remove(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1002,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1014,                    if (target != null
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1015,                            && !dispatchSelector.isExclusiveConsumer(target)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1016,                        consumers.remove(target);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1017,                        consumers.add(target);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,368,                        if (broker.isExpired(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,369,                            message.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,370,"                            broker.messageExpired(getContext(), message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,371,                            dequeueCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,140,    public boolean isEmpty(Destination destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,178,    public void addRecoveredMessage(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,265,    public void setMaxProducersToAudit(int maxProducersToAudit) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,275,    public void setMaxAuditDepth(int maxAuditDepth) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,295,    public void setUseCache(boolean useCache) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,309,    public void dispatched(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,235,    public void setUseCache(boolean useCache) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,382,    /**
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,383,"     * @org.apache.xbean.Property propertyEditor=""org.apache.activemq.util.MemoryPropertyEditor"""
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,384,     */
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,387,    }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,88,"     this(new File(IOHelper.toFileSystemSafeName(name)), mode, new AtomicLong());"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,96,"     this(new File(IOHelper.toFileSystemSafeName(name)), mode, storeSize);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,194,"        return doesMapContainerExist(id, DEFAULT_CONTAINER_NAME);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,206,"        return getMapContainer(id, DEFAULT_CONTAINER_NAME);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,235,"        deleteMapContainer(id, DEFAULT_CONTAINER_NAME);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,264,"        return doesListContainerExist(id, DEFAULT_CONTAINER_NAME);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,276,"        return getListContainer(id, DEFAULT_CONTAINER_NAME);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,306,"        deleteListContainer(id, DEFAULT_CONTAINER_NAME);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,453,            DataManager defaultDM = getDataManager(DEFAULT_CONTAINER_NAME);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,454,"            rootIndexManager = getIndexManager(defaultDM, DEFAULT_CONTAINER_NAME);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,565,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,566,    public synchronized boolean isUseAsyncDataManager() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,567,        return useAsyncDataManager;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,568,    }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,569,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,570,    public synchronized void setUseAsyncDataManager(boolean useAsyncWriter) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,571,        this.useAsyncDataManager = useAsyncWriter;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,572,    }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,573,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,574,    /**
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,575,     * @return
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,576,     * @see org.apache.activemq.kaha.Store#size()
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,577,     */
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,578,    public long size(){
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,579,        return storeSize.get();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,580,    }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,581,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndex.java,24,import org.apache.activemq.kaha.impl.container.MapContainerImpl;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndex.java,33,public class VMIndex implements Index {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,126,    void put(HashEntry newEntry) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,128,            boolean replace = false;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,39,public class HashIndex implements Index {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,241,        getBin(key).put(entry);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,257,        return result != null ? indexManager.getIndex(result.getIndexOffset()) : null;
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,58,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,851,    protected DemandSubscription createDemandSubscription(ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,858,        DemandSubscription result = new DemandSubscription(info);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,859,        result.getLocalInfo().setPriority(ConsumerInfo.NETWORK_CONSUMER_PRIORITY);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,431,        AMQTopicMessageStore store = (AMQTopicMessageStore)topics.get(destinationName);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,268,    protected synchronized Store getStore() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,270,"            theStore = StoreFactory.open(getStoreDirectory(), ""rw"",storeSize);"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,271,            theStore.setMaxDataFileLength(maxDataFileLength);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaPersistenceAdapter.java,272,            theStore.setPersistentIndex(isPersistentIndex());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,62,    private static final Integer INDEX_VERSION = new Integer(3);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,168,"            MapContainer messageContainer = getMapReferenceContainer(destination, ""topic-data"");"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,169,"            MapContainer subsContainer = getSubsMapContainer(destination.toString() + ""-Subscriptions"", ""blob"");"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,170,"            ListContainer<TopicSubAck> ackContainer = store.getListContainer(destination.toString(), ""topic-acks"");"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,364,
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,365,
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,121,"        MapContainer container = store.getMapContainer(getSubscriptionContainerName(getSubscriptionKey(clientId, subscriptionName)));"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,167,
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,171,"   String clientId, String subscriptionName, MessageId messageId)"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,172,   throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,173,"  String key = getSubscriptionKey(clientId, subscriptionName);"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,174,  lock.lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,175,  try {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,176,      TopicSubContainer container = subscriberMessages.get(key);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,177,      if (container != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,178,                ConsumerMessageRef ref = container.remove(messageId);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,179,                if (ref != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,180,                    TopicSubAck tsa = ackContainer.get(ref.getAckEntry());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,181,                    if (tsa != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,182,                        if (tsa.decrementCount() <= 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,183,                            StoreEntry entry = ref.getAckEntry();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,184,                            entry = ackContainer.refresh(entry);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,185,                            ackContainer.remove(entry);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,186,                            ReferenceRecord rr = messageContainer.get(messageId);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,187,                            if (rr != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,188,                                entry = tsa.getMessageEntry();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,189,                                entry = messageContainer.refresh(entry);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,190,                                messageContainer.remove(entry);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,191,                                removeInterest(rr);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,192,                            }
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,193,                        } else {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,194,
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,195,"                            ackContainer.update(ref.getAckEntry(), tsa);"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,196,                        }
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,197,                    }
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,198,                }
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,199,            }
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,200,  }finally {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,201,      lock.unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,202,  }
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,355,        store.deleteMapContainer(containerName);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,77,"    public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,94,"    public void deleteSubscription(String clientId, String subscriptionName) {"
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,100,"    public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,107,    public void delete() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,126,"    public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned, MessageRecoveryListener listener) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,43,        if (map.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,44,            lastBatch = null;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,48,    int size() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,84,    private long reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,88,    private boolean backup=false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,98,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,100,        reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,117,"        }, ""ActiveMQ Failover Worker: "" + System.identityHashCode(this));"
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,66,            valid = valid || (c == '_') || (c == '-') || (c == '.')
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,67,                    || (c == '/') || (c == '\\');
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,78,        if (result.length() > MAX_FILE_NAME_LENGTH) {
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,79,"            result = result.substring(0,MAX_FILE_NAME_LENGTH);"
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,81,        return rc.toString();
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,83,
activemq-core/src/main/java/org/apache/activemq/util/IOHelper.java,129,"        MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty(""MaximumFileNameLength"",""200"")).intValue();"
activemq-core/src/test/java/org/apache/activemq/broker/RecoveryBrokerTest.java,50,    public void testWildCardSubscriptionPreservedOnRestart() throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,88,"    private final ConcurrentHashMap<ActiveMQTopic, AMQMessageStore> topics = new ConcurrentHashMap<ActiveMQTopic, AMQMessageStore>();"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,269,        Iterator<AMQMessageStore> iterator = queues.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,270,        while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,271,            AMQMessageStore ms = iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,274,        iterator = topics.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,275,        while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,276,            final AMQTopicMessageStore ms = (AMQTopicMessageStore)iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,347,            Iterator<AMQMessageStore> iterator = queues.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,348,            while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,349,                final AMQMessageStore ms = iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,355,            iterator = topics.values().iterator();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,356,            while (iterator.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,357,                final AMQTopicMessageStore ms = (AMQTopicMessageStore)iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,433,        AMQTopicMessageStore store = (AMQTopicMessageStore)topics.get(destinationName.getPhysicalName());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1433,        Broker regionBroker = createRegionBroker();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1491,"            destinationFactory = new DestinationFactoryImpl(getProducerSystemUsage(), getTaskRunnerFactory(), getPersistenceAdapter());"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,129,"        return new ManagedTempQueueRegion(this, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTempQueueRegion.java,37,"    public ManagedTempQueueRegion(ManagedRegionBroker regionBroker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTempQueueRegion.java,39,"        super(regionBroker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTempQueueRegion.java,40,        this.regionBroker = regionBroker;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,36,    protected final SystemUsage systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,37,    protected final MemoryUsage memoryUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,51,     * @param systemUsage
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,54,"    public BaseDestination(Broker broker,MessageStore store,ActiveMQDestination destination, SystemUsage systemUsage,DestinationStatistics parentStats) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,55,        this.broker=broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,58,        this.systemUsage=systemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,59,"        this.memoryUsage = new MemoryUsage(systemUsage.getMemoryUsage(), destination.toString());"
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,60,        this.memoryUsage.setUsagePortion(1.0f);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,61,        // Let the store know what usage manager we are using so that he can
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,62,        // flush messages to disk when usage gets high.
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,63,        if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,64,            store.setMemoryUsage(this.memoryUsage);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,65,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,75,    public abstract void initialize() throws Exception;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,47,    protected final SystemUsage memoryManager;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,52,"    public DestinationFactoryImpl(SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,53,        this.memoryManager = memoryManager;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,79,"                return new Queue(broker.getRoot(), destination, memoryManager, null, destinationStatistics, taskRunnerFactory) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,93,"                Queue queue = new Queue(broker.getRoot(), destination, memoryManager, store, destinationStatistics, taskRunnerFactory);"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,100,"            return new Topic(broker.getRoot(), destination, null, memoryManager, destinationStatistics, taskRunnerFactory) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFactoryImpl.java,116,"            Topic topic = new Topic(broker.getRoot(), destination, store, memoryManager, destinationStatistics, taskRunnerFactory);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,35,import org.apache.activemq.broker.Broker;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,68,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,109,"    public Queue(Broker broker, final ActiveMQDestination destination, final SystemUsage systemUsage,MessageStore store,DestinationStatistics parentStats,"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,111,"        super(broker, store, destination,systemUsage, parentStats);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,133,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,85,    private BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,164,"        return new TempQueueRegion(this, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,20,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,22,import org.apache.activemq.broker.Connection;
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,38,"    public TempQueueRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,48,"        return new Queue(broker.getRoot(), destination, usageManager, null, destinationStatistics, taskRunnerFactory) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,90,"    public Topic(Broker broker, ActiveMQDestination destination, TopicMessageStore store, SystemUsage systemUsage, DestinationStatistics parentStats,"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,92,"        super(broker, store, destination,systemUsage, parentStats);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,117,                if (idleSessions.size() == 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,118,"                    throw new JMSException(""Endpoint factory did not allows to any endpoints."");"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,48,    private List<ServerSessionImpl> idleSessions = new ArrayList<ServerSessionImpl>();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,49,    private List<ServerSessionImpl> activeSessions = new ArrayList<ServerSessionImpl>();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,50,    private AtomicBoolean closing = new AtomicBoolean(false);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,103,
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,105,        synchronized (idleSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,106,            if (idleSessions.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,107,                ss = idleSessions.remove(idleSessions.size() - 1);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,108,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,111,            synchronized (activeSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,112,                activeSessions.add(ss);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,113,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,114,            if (LOG.isDebugEnabled()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,115,"                LOG.debug(""Using idle session: "" + ss);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,116,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,119,
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,120,        synchronized (activeSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,121,            // Are we at the upper limit?
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,122,            if (activeSessions.size() >= maxSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,123,                // then reuse the already created sessions..
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,124,                // This is going to queue up messages into a session for
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,125,                // processing.
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,126,                return getExistingServerSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,127,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,128,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,129,
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,131,        // We may not be able to create a session due to the container
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,132,        // restricting us.
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,133,        if (ss == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,134,            synchronized (activeSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,135,                if (activeSessions.isEmpty()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,136,                    throw new JMSException(
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,137,"                            ""Endpoint factory did not allow creation any endpoints."");"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,139,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,141,            return getExistingServerSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,142,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,143,        synchronized (activeSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,144,            activeSessions.add(ss);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,154,     * @param messageDispatch
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,155,     *            the message to dispatch
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,156,     * @throws JMSException
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,158,    private void dispatchToSession(MessageDispatch messageDispatch)
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,159,            throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,160,
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,161,        ServerSession serverSession = getServerSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,162,        Session s = serverSession.getSession();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,163,        ActiveMQSession session = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,164,        if (s instanceof ActiveMQSession) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,165,            session = (ActiveMQSession) s;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,166,        } else if (s instanceof ActiveMQQueueSession) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,167,            session = (ActiveMQSession) s;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,168,        } else if (s instanceof ActiveMQTopicSession) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,169,            session = (ActiveMQSession) s;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,170,        } else {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,171,            activeMQAsfEndpointWorker.connection
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,172,                    .onAsyncException(new JMSException(
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,173,"                            ""Session pool provided an invalid session type: """
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,174,                                    + s.getClass()));
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,176,        session.dispatch(messageDispatch);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,177,        serverSession.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,183,    private ServerSession getExistingServerSession() {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,204,        synchronized(activeSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,206,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,207,        synchronized(idleSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,216,        synchronized(activeSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,236,        closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,240,        while (getActiveSessionSize() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,242,"                LOG.debug(""Active Sessions = "" + getActiveSessionSize());"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,252,            closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,255,
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,257,    private void closeIdleSessions() {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,258,        synchronized(idleSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,259,            for (Iterator<ServerSessionImpl> iter = idleSessions.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,260,                ServerSessionImpl ss = iter.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,273,
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,280,
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,281,    private int getActiveSessionSize() {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,282,        synchronized(activeSessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,283,            return activeSessions.size();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,284,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,285,    }
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,83,    public void doConsume(Command command) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,549,        checkClosed();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,550,
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,665,            deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,117,"        return new ConnectionPool(connection, getPoolFactory(), transactionManager);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,607,"    public ByteSequence read(Location location) throws IOException, IllegalStateException {"
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,501,    public DataStructure readCommand(Location location) throws IOException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,1,/**
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,22,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,25,import javax.jms.Connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,26,import javax.jms.ConnectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,36,import org.apache.activemq.ActiveMQConnectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,48, *
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,51,// TODO Why do we implement our own session pool?
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,52,"// TODO This doesn't work, since nobody will be setting the connection factory"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,53,// (because nobody is able to). Just use the WebClient?
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,55,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,58,    private ConnectionFactory connectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,59,    private Connection connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,60,    private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,61,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,62,    public Connection getConnection() throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,63,        if (connection == null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,64,            connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,65,            connection.start();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,66,        }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,67,        return connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,68,    }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,69,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,70,    public void setConnection(Connection connection) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,71,        this.connection = connection;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,72,    }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,73,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,74,    public ConnectionFactory getConnectionFactory() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,75,        if (connectionFactory == null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,76,"            String uri = getServletContext().getInitParameter(""org.apache.activemq.brokerURL"");"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,77,            if (uri != null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,78,                connectionFactory = new ActiveMQConnectionFactory(uri);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,79,            } else {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,80,"                throw new IllegalStateException(""missing ConnectionFactory in QueueBrowserServlet"");"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,81,            }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,82,        }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,83,        return connectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,84,    }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,85,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,86,    public void setConnectionFactory(ConnectionFactory connectionFactory) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,87,        this.connectionFactory = connectionFactory;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,88,    }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,89,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,93,        Session session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,95,            session = borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,100,            String selector = getSelector(request);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,101,"            QueueBrowser browser = session.createBrowser(queue, selector);"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,102,            MessageRenderer renderer = getMessageRenderer(request);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,103,"            configureRenderer(request, renderer);"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,104,"            renderer.renderMessages(request, response, browser);"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,105,        } catch (JMSException e) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,107,        } finally {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,108,            returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,118,            return (MessageRenderer)factoryFinder.newInstance(style);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,119,        } catch (IllegalAccessException e) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,121,        } catch (InstantiationException e) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,123,        } catch (ClassNotFoundException e) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,130,        for (Enumeration iter = request.getParameterNames(); iter.hasMoreElements();) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,131,            String name = (String)iter.nextElement();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,137,    protected Session borrowSession() throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,138,        Session answer = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,139,        synchronized (sessions) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,140,            if (sessions.isEmpty()) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,141,                answer = createSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,142,            } else {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,143,                answer = sessions.removeLast();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,144,            }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,145,        }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,146,        return answer;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,147,    }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,148,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,149,    protected void returnSession(Session session) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,150,        if (session != null) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,151,            synchronized (sessions) {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,152,                sessions.add(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,153,            }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,154,        }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,155,    }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,156,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,157,    protected Session createSession() throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,158,"        return getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,159,    }
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,160,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,180,"        System.out.println(""destination uri = "" + uri);"
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,181,
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseServlet.java,184,
activemq-web/src/main/java/org/apache/activemq/web/view/RssMessageRenderer.java,118,"        String link = request.getRequestURI() + ""/"" + title;"
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1583,"            throw new JMSException(""Cannot publish to a deleted Destination: "" + destination);"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,199,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,196,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,433,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,421,        long si = sequenceGenerator.getNextSequenceId();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,422,        message.getMessageId().setBrokerSequenceId(si);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,109,        ((SSLServerSocket)this.serverSocket).setWantClientAuth(wantClientAuth);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,110,        ((SSLServerSocket)this.serverSocket).setNeedClientAuth(needClientAuth);
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,55,            final boolean wantClientAuth = (i & 0x1) == 1;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,56,            final boolean needClientAuth = (i & 0x2) == 1;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,57,
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,58,            final int expectedWantStatus = wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,59,            final int expectedNeedStatus = needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,60,
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,61,"            createAndBindTransportServer(wantClientAuth, needClientAuth, """");"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,62,
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,63,"            assertEquals(""Created ServerSocket did not have correct wantClientAuth status."", sslServerSocket.getWantClientAuthStatus(), expectedWantStatus);"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,64,
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,65,"            assertEquals(""Created ServerSocket did not have correct needClientAuth status."", sslServerSocket.getNeedClientAuthStatus(), expectedNeedStatus);"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,66,        }
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,71,            final boolean wantClientAuth = (i & 0x1) == 1;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,72,            final boolean needClientAuth = (i & 0x2) == 1;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,74,            final int expectedWantStatus = wantClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,75,            final int expectedNeedStatus = needClientAuth ? StubSSLServerSocket.TRUE : StubSSLServerSocket.FALSE;
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,77,"            String options = ""wantClientAuth="" + (wantClientAuth ? ""true"" : ""false"") + ""&needClientAuth="" + (needClientAuth ? ""true"" : ""false"");"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,79,"            createAndBindTransportServer(wantClientAuth, needClientAuth, options);"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,81,"            assertEquals(""Created ServerSocket did not have correct wantClientAuth status."", sslServerSocket.getWantClientAuthStatus(), expectedWantStatus);"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,83,"            assertEquals(""Created ServerSocket did not have correct needClientAuth status."", sslServerSocket.getNeedClientAuthStatus(), expectedNeedStatus);"
activemq-core/src/test/java/org/apache/activemq/transport/tcp/SslTransportServerTest.java,84,        }
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,501,    public synchronized DataStructure readCommand(Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,295,    DataFile getDataFile(Location item) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,305,    File getFile(Location item) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,417,"    public void consolidateDataFilesNotIn(Set<Integer> inUse, Integer lastFile) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,82,            listener.recoverMessageReference(id);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,83,            return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,24,
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,28,
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,47,    protected Destination destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,56,"    public AbstractSubscription(Broker broker, Destination destination,ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {"
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,58,        this.destination=destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,22,
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,33,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,52,"    public DurableTopicSubscription(Broker broker, Destination dest,SystemUsage usageManager, ConnectionContext context, ConsumerInfo info, boolean keepDurableSubsActive)"
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,54,"        super(broker,dest,usageManager, context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,59,        if (dest != null && dest.getMessageStore() != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,60,            TopicMessageStore store = (TopicMessageStore)dest.getMessageStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,61,            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,62,"                this.enqueueCounter=store.getMessageCount(subscriptionKey.getClientId(),subscriptionKey.getSubscriptionName());"
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,63,            } catch (IOException e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,64,"                JMSException jmsEx = new JMSException(""Failed to retrieve eunqueueCount from store ""+ e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,65,                jmsEx.setLinkedException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,66,                throw jmsEx;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,67,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,68,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,69,"    public PrefetchSubscription(Broker broker,Destination destination, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info, PendingMessageCursor cursor) throws InvalidSelectorException {"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,70,"        super(broker,destination, context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,75,"    public PrefetchSubscription(Broker broker,Destination destination, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,76,"        this(broker,destination,usageManager,context, info, new VMPendingMessageCursor());"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,171,"    public  void acknowledge(final ConnectionContext context,final MessageAck ack) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,353,        if (callDispatchMatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,20,
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,22,
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,36,"    public QueueBrowserSubscription(Broker broker,Destination destination, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info)"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,38,"        super(broker,destination,usageManager, context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,49,        Destination dest = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,50,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,51,"            dest = lookup(context, info.getDestination());"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,52,        } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,53,"            JMSException jmsEx = new JMSException(""Failed to retrieve destination from region ""+ e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,54,            jmsEx.setLinkedException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,55,            throw jmsEx;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,56,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,58,"            return new QueueBrowserSubscription(broker,dest,usageManager, context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueRegion.java,60,"            return new QueueSubscription(broker, dest,usageManager,context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,20,
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,23,
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,31,import org.apache.activemq.transaction.Synchronization;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,40,"    public QueueSubscription(Broker broker, Destination destination,SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,41,"        super(broker,destination,usageManager, context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,53,        Destination dest=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,54,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,55,"            dest = lookup(context, info.getDestination());"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,56,        } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,57,"            JMSException jmsEx = new JMSException(""Failed to retrieve destination from region ""+ e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,58,            jmsEx.setLinkedException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,59,            throw jmsEx;
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,60,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,62,"            return new QueueBrowserSubscription(broker,dest,usageManager,context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueueRegion.java,64,"            return new QueueSubscription(broker,dest, usageManager,context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempTopicRegion.java,50,
activemq-core/src/main/java/org/apache/activemq/broker/region/TempTopicRegion.java,51,"            Destination dest = lookup(context, info.getDestination());"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempTopicRegion.java,52,"            TopicSubscription answer = new TopicSubscription(broker, dest,context, info, usageManager);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,231,        Destination dest=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,232,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,233,"            dest = lookup(context, destination);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,234,        } catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,235,"            JMSException jmsEx = new JMSException(""Failed to retrieve destination from region ""+ e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,236,            jmsEx.setLinkedException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,237,            throw jmsEx;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,238,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,248,"                sub = new DurableTopicSubscription(broker,dest, usageManager, context, info, keepDurableSubsActive);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,262,"            TopicSubscription answer = new TopicSubscription(broker, dest,context, info, usageManager);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,23,import java.util.concurrent.atomic.AtomicInteger;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,25,
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,27,
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,68,"    public TopicSubscription(Broker broker, Destination destination,ConnectionContext context, ConsumerInfo info, SystemUsage usageManager) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,69,"        super(broker, destination,context, info);"
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,43,    public Destination intercept(Destination destination) {
activemq-core/src/test/java/org/apache/activemq/advisory/TempDestLoadTest.java,59,        //there should be 3 destinations - advisories -
activemq-core/src/test/java/org/apache/activemq/advisory/TempDestLoadTest.java,60,        //1 for the connection + 2 generic ones
activemq-core/src/test/java/org/apache/activemq/advisory/TempDestLoadTest.java,61,        assertTrue(rb.getDestinationMap().size()==3);
activemq-core/src/test/java/org/apache/activemq/advisory/TempDestLoadTest.java,81,        //there should be 3 destinations - advisories -
activemq-core/src/test/java/org/apache/activemq/advisory/TempDestLoadTest.java,82,        //1 for the connection + 2 generic ones
activemq-core/src/test/java/org/apache/activemq/advisory/TempDestLoadTest.java,83,        assertTrue(rb.getDestinationMap().size()==3);
activemq-core/src/test/java/org/apache/activemq/advisory/TempQueueMemoryTest.java,89,        assertTrue(rb.getDestinationMap().size()==7);
activemq-core/src/test/java/org/apache/activemq/broker/virtual/MirroredQueueTest.java,24,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,33,
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,43,    private int maxPageSize=100;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,30,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,33,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,752,        int count = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,754,        List<MessageReference> list = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,758,                list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,770,                count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,772,        } while (count < this.destinationStatistics.getMessages().getCount());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,811,        List<MessageReference> list = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,815,                list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,820,                    r.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,868,        int count = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,869,        List<MessageReference> list = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,873,                list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,875,            for (MessageReference ref : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,892,                count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,894,        } while (count < this.destinationStatistics.getMessages().getCount());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1068,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1073,
activemq-core/src/test/java/org/apache/activemq/JmsQueueBrowserTest.java,46,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,21,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,32,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,35,import org.apache.activemq.advisory.TempDestDeleteTest;
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,59,    protected int messageCount = 10;
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,96,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,97,"        assertTrue(""Should have at least one message in the queue: "" + queueViewMBeanName, queue.getQueueSize() > 0);"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,117,"        assertEquals(""Should have same number of messages in the queue: "" + queueViewMBeanName, queueSize, queueSize);"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,124,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,125,"        assertTrue(""Should have at least one message in the queue: "" + queueViewMBeanName, queue.getQueueSize() > 0);"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,126,
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,168,"        assertEquals(""Queue size"", 10, proxy.getQueueSize());"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,175,"        assertEquals(""Queue size"", 10, proxy.getQueueSize());"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,181,"        assertEquals(""Queue size"", 9, proxy.getQueueSize());"
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,300,        answer.setEnableStatistics(true);
activemq-core/src/test/java/org/apache/activemq/broker/jmx/MBeanTest.java,312,        for (int i = 0; i < messageCount; i++) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,47,            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,48,                final Destination mirrorDestination = getMirrorDestination(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,49,                if (mirrorDestination != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,50,                    return new DestinationFilter(destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,51,"                        public void send(ProducerBrokerExchange context, Message message) throws Exception {"
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,52,                            message.setDestination(mirrorDestination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,53,"                            mirrorDestination.send(context, message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,54,
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,55,                            if (isCopyMessage()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,56,                                message = message.copy();
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,58,                            message.setDestination(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,59,"                            super.send(context, message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,60,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,61,                    };
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,63,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,64,            catch (Exception e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/MirroredQueue.java,65,"                LOG.error(""Failed to lookup the mirror destination for: "" + destination + "". Reason: "" + e, e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,26,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,32,import org.apache.activemq.broker.region.QueueMessageReference;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,21,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,22,import org.apache.commons.logging.Log;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,23,import org.apache.commons.logging.LogFactory;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,31,    private static final transient Log LOG = LogFactory.getLog(HashBin.class);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,36,    private List<HashPageInfo> hashPages = new ArrayList<HashPageInfo>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,65,        return (int)id;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,68,    int getId() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,72,    void setId(int id) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,76,    boolean isEmpty() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,80,    int getMaximumEntries() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,84,    void setMaximumEntries(int maximumEntries) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,88,    int size() {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,92,"    HashPageInfo addHashPageInfo(long id, int size) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,96,        hashPages.add(info);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,101,    public HashEntry find(HashEntry key) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,125,    boolean put(HashEntry newEntry) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,154,    HashEntry remove(HashEntry entry) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,194,            for (HashPageInfo page : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,207,            while(pageNo >= hashPages.size()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,208,                HashPage hp = hashIndex.createPage(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,209,"                addHashPageInfo(hp.getId(), 0);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,210,            }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,211,            pageToUse = hashPages.get(pageNo);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,212,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,225,            hashPages.remove(page);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,242,        return maximumEntries * hashPages.size();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,248,        int pageNo = 0;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,249,        for (HashPageInfo page : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,254,            pageNo++;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,256,        result = hashPages.get(pageNo);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,264,        for (HashPageInfo page : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,280,"            doOverFlow(hashPages.indexOf(info)+1, entry);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,284,"    private void doOverFlow(int pageNo, HashEntry entry) throws IOException {"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,286,        if (pageNo >= hashPages.size()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,291,            info = hashPages.get(pageNo);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,298,"            doOverFlow(pageNo+1, overflowed);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,306,"        String str = ""["" + hashPages.size()+""]"";"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,307,        for (HashPageInfo page : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,315,        for (HashPageInfo info : hashPages) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashBin.java,316,            info.end();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashPageInfo.java,26,class HashPageInfo {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,62,    private static final Integer INDEX_VERSION = new Integer(5);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,355,        StringBuffer buffer = new StringBuffer(subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,356,"        return buffer.append("":"").append(destination.getQualifiedName()).append(TOPIC_SUB_NAME).toString();"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,80,    protected final Log log;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,117,"        this.log = LogFactory.getLog(getClass().getName() + ""."" + destination.getPhysicalName());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,177,"                                    log.fatal(""Failed to add message to cursor"", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,409,                    if (log.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,410,"                        log.debug(""Expired message: "" + message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,625,"            log.error(""caught an exception browsing "" + this, e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,636,"                    log.error(""caught an exception browsing "" + this, e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,658,"                        log.error(""caught an exception brwsing "" + this, e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,689,"                        log.error(""got an exception retrieving message "" + messageId);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,960,"                 log.error(""Failed to page in more queue messages "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1071,"                log.warn(""Task Runner failed to wakeup "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueue.java,72,"            log.debug("" changed ownership of "" + this + "" to ""+ tempDest.getConnectionId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueue.java,87,"                log.error(""Failed to page in more queue messages "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempQueue.java,94,"                log.warn(""Task Runner failed to wakeup "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/TempTopic.java,64,"            log.debug("" changed ownership of "" + this + "" to ""+ tempDest.getConnectionId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,68,    protected final Log log;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,93,"        this.log = LogFactory.getLog(getClass().getName() + ""."" + destination.getPhysicalName());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,349,"                        log.warn(""Waiting for space to send  transacted message - transaction elements = "" + size + "" need more space to commit. Message = "" + message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,356,                    if (log.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,357,"                        log.debug(""Expired message: "" + message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,504,"            log.warn(""Failed to browse Topic: "" + getActiveMQDestination().getPhysicalName(), e);"
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,130,            }
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,131,        }
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,132,
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,133,        synchronized (runable) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,134,            if (shutdown) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,135,                queued = false;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,137,                return;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,138,            }
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,140,            // If we could not iterate all the items
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,141,            // then we need to re-queue.
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,142,            if (!done) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,143,                queued = true;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,144,            }
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,146,            if (queued) {
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,147,                executor.execute(runable);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,88,    public RandomAccessFile openRandomAccessFile(boolean appender) throws IOException {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,100,    public void closeRandomAccessFile(RandomAccessFile file) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,40,    private PreparedStatement statement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,52,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,101,            PreparedStatement statement = connection.prepareStatement(statements.getLockUpdateStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,105,                return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,110,        return false;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,268,"                 READ_CHECK_TIMER = new Timer(""InactivityMonitor ReadCheck"");"
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,269,"                 WRITE_CHECK_TIMER = new Timer(""InactivityMonitor WriteCheck"");"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,285,"                    IntrospectionSupport.getProperties(this, props, null);"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,286,"                    props.setProperty(""networkTTL"", String.valueOf(configuration.getNetworkTTL()));"
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,62,"            if (name.startsWith(""get"") && params.length == 0 && type != null && isSettableType(type)) {"
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,75,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,76,"                    name = name.substring(3, 4).toLowerCase() + name.substring(4);"
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1821,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1846,                connector.setDurableDestinations(getBroker().getDurableDestinations());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1065,        synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1066,            messages.addMessageLast(msg);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1067,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,96,    public synchronized boolean isEmpty() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,97,        if(memoryList.isEmpty() && isDiskListEmpty()){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,98,            return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,99,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,100,        for (Iterator<MessageReference> iterator = memoryList.iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,101,            MessageReference node = iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,102,            if (node== QueueMessageReference.NULL_MESSAGE){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,103,                continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,105,            if (!node.isDropped()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,106,                return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,108,            // We can remove dropped references.
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,109,            iterator.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,119,    public synchronized void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,120,        iterating = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,121,        last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,122,        iter = isDiskListEmpty() ? memoryList.iterator() : getDiskList().listIterator();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,125,    public synchronized void release() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,126,        iterating = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,127,        if (flushRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,128,            flushRequired = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,129,            flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,133,    public synchronized void destroy() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,134,        stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,135,        for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,136,            Message node = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,137,            node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,138,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,139,        memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,140,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,141,            getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,145,    public synchronized LinkedList<MessageReference> pageInList(int maxItems) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,146,        LinkedList<MessageReference> result = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,148,        for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,149,            result.add(i.next());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,150,            count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,151,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,152,        if (count < maxItems && !isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,153,            for (Iterator<MessageReference> i = getDiskList().iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,154,                Message message = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,155,                message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,156,                message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,157,                message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,158,                result.add(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,170,    public synchronized void addMessageLast(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,173,                regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,174,                if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,175,                    if (hasSpace() || this.store==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,176,                        memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,177,                        node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,178,                        return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,180,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,181,                if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,183,                        expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,184,                        if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,                        } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,189,                            flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,193,                systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,194,                getDiskList().add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,195,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,198,"                        + "" first to FilePendingMessageCursor "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,211,    public synchronized void addMessageFirst(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,214,                regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,215,                if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,216,                    if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,217,                        memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,218,                        node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,219,                        return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,221,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,222,                if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,224,                        expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,229,                        } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,230,                            flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,234,                systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,235,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,236,                getDiskList().addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,247,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,251,    public synchronized boolean hasNext() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,252,        return iter.hasNext();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,258,    public synchronized MessageReference next() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,259,        Message message = (Message)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,260,        last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,261,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,262,            // got from disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,263,            message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,264,            message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,265,            message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,273,    public synchronized void remove() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,274,        iter.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,275,        if (last != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,276,         last.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,284,    public synchronized void remove(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,285,        if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,286,         node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,287,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,288,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,289,            getDiskList().remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,296,    public synchronized int size() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,297,        return memoryList.size() + (isDiskListEmpty() ? 0 : getDiskList().size());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,303,    public synchronized void clear() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,304,        memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,305,        if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,306,            getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,308,        last=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,311,    public synchronized boolean isFull() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,312,        // we always have space - as we can persist to disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,313,        return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,327,            synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,348,    protected synchronized void expireOldMessages() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,349,        if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,350,            LinkedList<MessageReference> tmpList = new LinkedList<MessageReference>(this.memoryList);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,351,            this.memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,352,            while (!tmpList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,353,                MessageReference node = tmpList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,354,                if (node.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,355,                    discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,356,                }else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,357,                    memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,358,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,361,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,364,    protected synchronized void flushToDisk() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,365,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,366,        if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,367,            while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,368,                MessageReference node = memoryList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,369,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,370,                getDiskList().addLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,372,            memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,19,import org.apache.activemq.ActiveMQMessageAudit;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,24,import org.apache.activemq.kaha.Store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,92,    public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,107,    public synchronized void addMessageFirst(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,162,    public synchronized void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1065,        messages.addMessageLast(msg);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,24,import java.util.concurrent.locks.ReentrantLock;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,63,    private ReentrantLock lock = new ReentrantLock(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,98,    public boolean isEmpty() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,99,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,100,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,101,            if(memoryList.isEmpty() && isDiskListEmpty()){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,102,                return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,104,            for (Iterator<MessageReference> iterator = memoryList.iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,105,                MessageReference node = iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,106,                if (node== QueueMessageReference.NULL_MESSAGE){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,107,                    continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,108,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,109,                if (!node.isDropped()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,110,                    return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,111,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,112,                // We can remove dropped references.
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,113,                iterator.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,115,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,116,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,126,    public void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,127,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,128,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,129,            iterating = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,130,            last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,131,            iter = isDiskListEmpty() ? memoryList.iterator() : getDiskList().listIterator();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,132,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,133,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,134,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,137,    public void release() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,138,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,139,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,140,            synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,141,                iterating = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,142,                this.notifyAll();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,143,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,144,            if (flushRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,145,                flushRequired = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,146,                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,147,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,148,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,149,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,153,    public void destroy() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,154,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,155,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,156,            stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,157,            for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,158,                Message node = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,159,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,160,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,161,            memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,162,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,163,                getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,164,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,165,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,166,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,170,    public LinkedList<MessageReference> pageInList(int maxItems) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,171,        int count = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,173,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,174,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,175,            for (Iterator<MessageReference> i = memoryList.iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,176,                result.add(i.next());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,179,            if (count < maxItems && !isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,180,                for (Iterator<MessageReference> i = getDiskList().iterator(); i.hasNext() && count < maxItems;) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,181,                    Message message = (Message)i.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,182,                    message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,183,                    message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,184,                    message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,185,                    result.add(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,186,                    count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,187,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,189,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,190,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,200,    public void addMessageLast(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,203,                lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,204,                try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,205,                    while (iterating) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,206,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,207,                        synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,208,                            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,209,                                this.wait();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,210,                            } catch (InterruptedException ie) {}
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,211,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,212,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,214,                    regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,216,                        if (hasSpace() || this.store==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,222,                    if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,223,                        if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,224,                            expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,225,                            if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,226,                                memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,227,                                node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,228,                                return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,229,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,230,                                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,231,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,232,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,233,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,234,                    if (systemUsage.getTempUsage().isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,235,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,236,                        systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,237,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,238,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,239,                    getDiskList().add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,240,                } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,241,                    lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,245,"                        + "" last to FilePendingMessageCursor "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,258,    public void addMessageFirst(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,261,                lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,262,                try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,263,                    while (iterating) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,264,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,265,                        synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,266,                            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,267,                                this.wait();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,268,                            } catch (InterruptedException ie) {}
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,269,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,270,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,272,                    regionDestination = node.getMessage().getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,280,                    if (!hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,281,                        if (isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,282,                            expireOldMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,283,                            if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,284,                                memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,285,                                node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,286,                                return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,287,                            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,288,                                flushToDisk();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,289,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,290,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,291,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,292,                    if (systemUsage.getTempUsage().isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,293,                        lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,294,                        systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,295,                        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,296,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,297,                    node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,298,                    getDiskList().addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,299,                } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,300,                    lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,312,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,316,    public boolean hasNext() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,317,        boolean result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,318,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,319,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,320,            result = iter.hasNext();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,321,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,322,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,323,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,324,        return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,330,    public MessageReference next() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,331,        Message message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,332,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,333,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,334,            message = (Message)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,335,            last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,336,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,337,                // got from disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,338,                message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,339,                message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,340,                message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,341,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,342,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,343,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,351,    public void remove() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,352,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,353,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,354,            iter.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,355,            if (last != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,356,                last.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,357,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,358,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,359,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,367,    public void remove(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,368,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,369,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,370,            if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,371,                node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,372,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,373,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,374,                getDiskList().remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,375,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,376,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,377,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,384,    public int size() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,385,        int result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,386,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,387,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,388,            result = memoryList.size() + (isDiskListEmpty() ? 0 : getDiskList().size());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,389,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,390,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,391,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,392,        return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,398,    public void clear() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,399,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,400,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,401,            memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,402,            if (!isDiskListEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,403,                getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,404,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,405,            last=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,406,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,407,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,411,    public boolean isFull() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,412,        boolean result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,413,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,414,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,415,            // we always have space - as we can persist to disk
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,416,            // TODO: not necessarily true.
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,417,            result = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,418,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,419,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,420,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,421,        return result;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,435,            lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,436,            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,445,            } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,446,                lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,459,    protected void expireOldMessages() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,460,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,461,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,462,            if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,463,                LinkedList<MessageReference> tmpList = new LinkedList<MessageReference>(this.memoryList);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,464,                this.memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,465,                while (!tmpList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,466,                    MessageReference node = tmpList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,467,                    if (node.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,468,                        discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,469,                    }else {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,470,                        memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,471,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,472,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,474,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,475,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,479,    protected void flushToDisk() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,480,        lock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,481,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,482,            if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,483,                while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,484,                    MessageReference node = memoryList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,485,                    node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,486,                    getDiskList().addLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,487,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,488,                memoryList.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,490,        } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,491,            lock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,90,    public void addMessageLast(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,105,    public void addMessageFirst(MessageReference node) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,143,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,144,    public synchronized void release() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,145,     nonPersistent.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,146,     persistent.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,147,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,165,    public void reset() {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,327,        getSession(); // .setMessageListener(listener);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,356,                if (!consumerExchange.getConnectionContext().isNetworkConnection()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,357,"                    throw new IllegalArgumentException(""The subscription does not exist: "" + ack.getConsumerId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,358,                }else {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,79,        this.connection.syncSendPacket(this.consumerInfo);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,64,    protected MessageResourceAdapter adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,65,    protected ActiveMQEndpointActivationKey endpointActivationKey;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,66,    protected MessageEndpointFactory endpointFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,67,    protected WorkManager workManager;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,68,    protected boolean transacted;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,69,    protected ActiveMQConnection connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,70,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,73,    private ActiveMQDestination dest;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,75,    private Work connectWork;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,76,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,77,    private long reconnectDelay = INITIAL_RECONNECT_DELAY;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,79,"    public ActiveMQEndpointWorker(final MessageResourceAdapter adapter, ActiveMQEndpointActivationKey key) throws ResourceException {"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,81,        this.adapter = adapter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,97,                if (!isRunning()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,98,                    return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,99,                }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,100,                if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,101,                    return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,104,                MessageActivationSpec activationSpec = endpointActivationKey.getActivationSpec();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,107,                    connection.start();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,111,                                reconnect(error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,117,"                        consumer = connection.createDurableConnectionConsumer((Topic)dest, activationSpec.getSubscriptionName(), emptyToNull(activationSpec.getMessageSelector()), serverSessionPool,"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,118,"                                                                              activationSpec.getMaxMessagesPerSessionsIntValue(), activationSpec.getNoLocalBooleanValue());"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,120,"                        consumer = connection.createConnectionConsumer(dest, emptyToNull(activationSpec.getMessageSelector()), serverSessionPool, activationSpec.getMaxMessagesPerSessionsIntValue(),"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,125,"                    LOG.debug(""Fail to to connect: "" + error, error);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,126,                    reconnect(error);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,142,    /**
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,143,     * @param s
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,144,     */
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,145,    public static void safeClose(Session s) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,146,        try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,147,            if (s != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,148,                s.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,149,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,150,        } catch (JMSException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,151,            //
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,152,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,153,    }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,154,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,184,"    public synchronized void start() throws WorkException, ResourceException {"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,185,        if (running) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,187,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,190,"        LOG.debug(""Starting"");"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,193,"        LOG.debug(""Started"");"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,199,    public synchronized void stop() throws InterruptedException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,200,        if (!running) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,202,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,212,    private synchronized void connect() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,228,    private synchronized void disconnect() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,234,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,235,    private void reconnect(JMSException error) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,236,"        LOG.debug(""Reconnect cause: "", error);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,237,        long reconnectDelay;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,238,        synchronized (this) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,239,            reconnectDelay = this.reconnectDelay;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,240,            // Only log errors if the server is really down.. And not a temp
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,241,            // failure.
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,242,            if (reconnectDelay == MAX_RECONNECT_DELAY) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,243,"                LOG.error(""Endpoint connection to JMS broker failed: "" + error.getMessage());"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,244,"                LOG.error(""Endpoint will try to reconnect to the JMS broker in "" + (MAX_RECONNECT_DELAY / 1000) + "" seconds"");"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,246,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,247,        try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,248,            disconnect();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,249,            Thread.sleep(reconnectDelay);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,250,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,251,            synchronized (this) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,252,                // Use exponential rollback.
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,253,                this.reconnectDelay *= 2;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,254,                if (this.reconnectDelay > MAX_RECONNECT_DELAY) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,255,                    this.reconnectDelay = MAX_RECONNECT_DELAY;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,256,                }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,257,            }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,258,            connect();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,259,        } catch (InterruptedException e) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,260,            //
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,261,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,262,    }
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,113,        ActiveMQConnectionFactory connectionFactory = this.connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,114,        if (connectionFactory == null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,115,            connectionFactory = createConnectionFactory(getInfo());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,121,            connectionFactory.setClientID(clientId);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,127,"        ActiveMQConnection physicalConnection = (ActiveMQConnection)connectionFactory.createConnection(userName, password);"
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,321,    public void setConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,322,        this.connectionFactory = connectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/MessageResourceAdapter.java,33,interface MessageResourceAdapter extends ResourceAdapter {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,162,                if ( session.isRunning() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,164,                currentBatchSize = 0;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,173,"                log.info(""Endpoint failed to process message. Reason: "" + e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,227,"                        log.warn(""Local transaction had not been commited.  Commiting now."");"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,257,"            log.debug(""Endpoint did not release properly: "" + e, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,262,"            log.debug(""Session did not close properly: "" + e, e);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,63,"        final ActiveMQSession session = (ActiveMQSession)activeMQAsfEndpointWorker.connection.createSession(activeMQAsfEndpointWorker.transacted, acknowledge);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,191,        if (LOG.isDebugEnabled()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,192,"            LOG.debug(""Session returned to pool: "" + ss);"
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,193,        }
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,195,        try {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,246,            activeMQAsfEndpointWorker.connection
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,278,    private int closeIdleSessions() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,20,import java.util.ArrayList;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,22,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,35,
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,66,    private final ArrayList<ManagedConnectionProxy> proxyConnections = new ArrayList<ManagedConnectionProxy>();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,67,    private final ArrayList<ConnectionEventListener> listeners = new ArrayList<ConnectionEventListener>();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,84,                    Iterator<ManagedConnectionProxy> iterator = proxyConnections.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,85,                    while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,86,                        ManagedConnectionProxy proxy = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,148,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,149,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,150,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,157,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,158,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,159,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,166,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,167,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,168,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,177,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,178,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,179,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,186,        Iterator<ConnectionEventListener> iterator = listeners.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,187,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,188,            ConnectionEventListener l = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,241,        Iterator<ManagedConnectionProxy> iterator = proxyConnections.iterator();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,242,        while (iterator.hasNext()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,243,            ManagedConnectionProxy proxy = iterator.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,402,        // Let any active proxy connections know that exception occured.
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,403,        for (Iterator<ManagedConnectionProxy> iter = proxyConnections.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,404,            ManagedConnectionProxy proxy = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,23,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,50,    private LinkedList<PendingMessageCursor> storePrefetches = new LinkedList<PendingMessageCursor>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,325,            storePrefetches.addLast(storePrefetches.removeFirst());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/IndexManager.java,67,        return reader.readItem(offset);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,278,            size++;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,280,        if (size >= threshold) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,297,        HashEntry result = getBin(key).remove(entry);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,298,        if (result != null) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,299,            size--;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,300,            return indexManager.getIndex(result.getIndexOffset());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,302,        return null;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,526,        if (bins.length == getMaximumCapacity()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,527,            threshold = Integer.MAX_VALUE;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,528,            return;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,529,        }
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,530,"        String backFileName = name + ""-REISZE"";"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,531,"        HashIndex backIndex = new HashIndex(directory,backFileName,indexManager);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,532,        backIndex.setKeyMarshaller(keyMarshaller);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,533,        backIndex.setKeySize(getKeySize());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,534,        backIndex.setNumberOfBins(newCapacity);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,535,        backIndex.setPageSize(getPageSize());
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,536,        backIndex.load();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,537,        File backFile = backIndex.file;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,538,        long offset = 0;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,539,        while ((offset + pageSize) <= indexFile.length()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,540,            indexFile.seek(offset);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,541,            HashPage page = getFullPage(offset);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,542,            if (page.isActive()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,543,                for (HashEntry entry : page.getEntries()) {
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,544,                    backIndex.getBin(entry.getKey()).put(entry);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,545,                    backIndex.size++;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,548,            page=null;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,549,            offset += pageSize;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,551,        backIndex.unload();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,552,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,553,        unload();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,554,        IOHelper.deleteFile(file);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,555,"        IOHelper.copyFile(backFile, file);"
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,556,        IOHelper.deleteFile(backFile);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,557,        setNumberOfBins(newCapacity);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,558,        bins = new HashBin[newCapacity];
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,559,        threshold = calculateThreashold();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,560,        openIndexFile();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java,561,        doLoad();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,124,    private int maxReferenceFileLength=AsyncDataManager.DEFAULT_MAX_FILE_LENGTH;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,36,
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,283,     * Notifiy the Broker that a dispatch has happened
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,284,     *
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,287,    public void postProcessDispatch(MessageDispatch messageDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,297,        super.postProcessDispatch(messageDispatch);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,200,                            node.getRegionDestination().getDestinationStatistics().getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1076,        if (optimizedDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,944,"            LOG.debug(""Stopped connection: "" + transport.getRemoteAddress());"
activemq-core/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java,134,
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,80,
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,81,        if (++inflightMessageCount >= failureCount) {
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,82,            inflightMessageCount = 0;
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,83,            Thread.sleep(1000);
activemq-core/src/test/java/org/apache/activemq/broker/ft/TransactedTopicMasterSlaveTest.java,84,            broker.stop();
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,310,         * receiving acks for messages not received yey
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,312,        sendToSlave(message);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,80,    private boolean fanOutQueues;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,66,        CompositeData compositData = URISupport.parseComposite(location);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,67,"        Map<String, String> parameters = new HashMap<String, String>(compositData.getParameters());"
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,70,        DiscoveryAgent discoveryAgent = DiscoveryAgentFactory.createDiscoveryAgent(compositData.getComponents()[0]);
activemq-core/src/test/java/org/apache/activemq/transport/fanout/FanoutTransportBrokerTest.java,60,"        addCombinationValues(""destination"", new Object[] {new ActiveMQTopic(""TEST"")});"
activemq-core/src/test/java/org/apache/activemq/transport/fanout/FanoutTransportBrokerTest.java,196,"        URI fanoutURI = new URI(""fanout://static://("" + connector.getServer().getConnectURI() + "","" + ""mock://"" + remoteConnector.getServer().getConnectURI() + "")"");"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,372,"            options.put(""soTimeout"", Integer.valueOf(soTimeout));"
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,373,"            options.put(""connectionTimeout"", Integer.valueOf(socketBufferSize));"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,260,"        if (started.compareAndSet(false, true)) {"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,272,            this.inetAddress = InetAddress.getByName(discoveryURI.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,273,"            this.sockAddress = new InetSocketAddress(this.inetAddress, discoveryURI.getPort());"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgent.java,274,            mcast = new MulticastSocket(discoveryURI.getPort());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,31,    //See AMQ-1489. There's something wrong here but it is difficult to tell what.
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,32,    //It looks like to actually set the discovery URI you have to use something like
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,33,"    //<transportConnector uri=""..."" discoveryUri=""multicast://239.3.7.0:37000?discoveryURI=multicast://239.3.7.0:37000"" />"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,34,    // or
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,35,"    //<networkConnector name=""..."" uri=""multicast://239.3.7.0:37000?discoveryURI=multicast://239.3.7.0:37000"">"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,39,            Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,40,            MulticastDiscoveryAgent rc = new MulticastDiscoveryAgent();
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,41,            rc.setGroup(uri.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,42,
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,43,            // allow the discoveryURI to be set via a query argument on the URI
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,44,            // ?discoveryURI=someURI
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,45,"            IntrospectionSupport.setProperties(rc, options);"
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,46,            return rc;
activemq-core/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,321,        inboundBridges.add(bridge);
activemq-core/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,325,        outboundBridges.add(bridge);
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,95,"                    c.setDiscoveryUri(new URI(""multicast://"" + finalGroup));"
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,96,"                    service.addNetworkConnector(""multicast://"" + finalGroup);"
activemq-core/src/test/java/org/apache/activemq/JmsMultipleBrokersTestSupport.java,132,"            transport.setDiscoveryUri(new URI(""multicast://"" + groupName));"
activemq-core/src/test/java/org/apache/activemq/JmsMultipleBrokersTestSupport.java,133,"            broker.addNetworkConnector(""multicast://"" + groupName);"
activemq-core/src/test/java/org/apache/activemq/broker/BrokerServiceTest.java,57,"        NetworkConnector connector = service.addNetworkConnector(""multicast://group-""+System.currentTimeMillis());"
activemq-core/src/test/java/org/apache/activemq/broker/BrokerServiceTest.java,69,"        NetworkConnector connector = service.addNetworkConnector(""multicast://group-""+System.currentTimeMillis());"
activemq-core/src/test/java/org/apache/activemq/network/NetworkLoadTest.java,206,"        transportConnector.setDiscoveryUri(new URI(""multicast://""+groupId));"
activemq-core/src/test/java/org/apache/activemq/network/NetworkLoadTest.java,210,"        networkConnector.setUri(new URI(""multicast://""+groupId));"
activemq-core/src/test/java/org/apache/activemq/transport/TopicClusterTest.java,115,"        connector.setDiscoveryUri(new URI(""multicast://""+groupId));"
activemq-core/src/test/java/org/apache/activemq/transport/TopicClusterTest.java,116,"        container.addNetworkConnector(""multicast://""+groupId);"
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportBrokerTest.java,137,"        return ""multicast://""+groupName;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,143,"        sendUri = ""discovery:multicast://""+groupId;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,144,"        recvUri = ""discovery:multicast://""+groupId;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,150,"        sendUri = ""discovery:multicast://""+groupId;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,151,"        recvUri = ""discovery:multicast://""+groupId;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,157,"        sendUri = ""failover:(discovery:multicast://""+groupId+"")"";"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,158,"        recvUri = ""failover:(discovery:multicast://""+groupId+"")"";"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,164,"        sendUri = ""failover:(discovery:multicast://""+groupId+"")"";"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,165,"        recvUri = ""failover:(discovery:multicast://""+groupId+"")"";"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,171,"        sendUri = ""discovery:multicast://""+groupId;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,172,"        recvUri = ""discovery:multicast://""+groupId;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,178,"        sendUri = ""discovery:multicast://""+groupId;"
activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java,179,"        recvUri = ""discovery:multicast://""+groupId;"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,87,    private List<QueueMessageReference> pagedInPendingDispatch = new ArrayList<QueueMessageReference>(100);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1220,                    if (pagedInPendingDispatch.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1221,                        pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1222,                    } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1223,                        for (QueueMessageReference qmr : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1224,                            if (!pagedInPendingDispatch.contains(qmr)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1225,                                pagedInPendingDispatch.add(qmr);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1226,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1227,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1228,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1240,    private List<QueueMessageReference> doActualDispatch(List<QueueMessageReference> list) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1241,        List<QueueMessageReference> rc = new ArrayList<QueueMessageReference>(list.size());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1249,        for (MessageReference node : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,21,import java.util.Collection;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,27,import java.util.LinkedHashSet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,89,    private LinkedHashSet<QueueMessageReference> pagedInPendingDispatch = new LinkedHashSet<QueueMessageReference>(100);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,971,                                     pagedInPendingDispatch.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1222,                    pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1234,    private LinkedHashSet<QueueMessageReference> doActualDispatch(Collection<QueueMessageReference> collection) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1235,        LinkedHashSet<QueueMessageReference> rc = new LinkedHashSet<QueueMessageReference>(collection.size());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1243,        for (MessageReference node : collection) {
activemq-core/src/main/java/org/apache/activemq/broker/region/IndirectMessageReference.java,91,            if (dropped || (lockOwner != null && lockOwner != subscription)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,160,                        pending.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,161,"                        createMessageDispatch(node, node.getMessage());"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,535,            for (MessageReference r : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,536,                if( r.getRegionDestination() == destination ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,537,                    rc.add((QueueMessageReference)r);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,538,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,562,                            pending.remove();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,563,                            if( !isDropped(node) && canDispatch(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,564,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,565,                                // Message may have been sitting in the pending
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,566,                                // list a while waiting for the consumer to ak the message.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,567,                                if (node!=QueueMessageReference.NULL_MESSAGE && node.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,568,                                    //increment number to dispatch
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,569,                                    numberToDispatch++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,570,"                                    node.getRegionDestination().messageExpired(context, this, node);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,571,                                    continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,573,                                dispatch(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,574,                                count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,599,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,600,        // Make sure we can dispatch a message.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,601,        if (canDispatch(node) && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,602,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1066,"        acknowledge(context, sub, ack, reference);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1067,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1072,            context.getTransaction().addSynchronization(new Synchronization() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1074,                public void afterCommit() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1075,                    dropMessage(reference);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1076,                    wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1077,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1079,                public void afterRollback() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1080,                    reference.setAcked(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1081,                }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1082,            });
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1158,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1159,            int toPageIn = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1160,            if (force) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1161,                toPageIn = getMaxPageSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1162,            } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1163,                toPageIn = (getMaxPageSize() + (int) destinationStatistics
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1164,                        .getInflight().getCount())
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1165,                        - pagedInMessages.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1166,"                toPageIn = Math.min(toPageIn, getMaxPageSize());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1167,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1197,                    for(QueueMessageReference ref:result) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1198,"                        pagedInMessages.put(ref.getMessageId(), ref);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1205,        return result;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,83,            WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,98,"            appendParametersToMessage(request, message);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,99,            boolean persistent = isSendPersistent(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,100,            int priority = getSendPriority(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,101,            long timeToLive = getSendTimeToLive(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,102,"            client.send(destination, message, persistent, priority, timeToLive);"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,140,            WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,227,                        message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,258,            WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,320,                            message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/WebClient.java,146,        } catch (JMSException e) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,423,                                localBroker.oneway(message);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,609,"                            LOG.trace(""cameFromRemote = ""+cameFromRemote);"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,612,                        if (!message.isResponseRequired() || isDuplex()) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,180,"        LOG.trace(""TCP consumer thread starting"");"
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,98,"        assertEquals(0, countMbeans(networkedBroker, ""NetworkBridge""));"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,203,                        removeList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,227,                                         // Need to put it back in the front.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,229,"                                             dispatched.add(0, node);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,310,                // a
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,311,                // DLQ message.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,313,                // the
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,314,                // acknowledgment.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,399,                LOG
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,400,"                        .debug(""Acknowledgment out of sync (Normally occurs when failover connection reconnects): """
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,401,                                + ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,445,        if (ack.getMessageCount() != checkCount && ack.isStandardAck()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,574,                            // Synchronize between dispatched list and remove of messageg from pending list
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,642,        // no commit so will auto rollback and get redispatched to redisptachConsumer
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,645,        assertNotNull(redispatchConsumer.receive(1000));
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,38,        } catch ( JMSException expected ) {
activemq-core/src/test/java/org/apache/activemq/transport/discovery/DiscoveryTransportNoBrokerTest.java,39,"            assertTrue(""reason is  java.net.UnknownHostException"", expected.getCause() instanceof  java.net.UnknownHostException);"
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,602,"            return journal.write(toPacket(wireFormat.marshal(command)), sync);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,233,                                             // ActiveMQ workaround for AMQ-1730 - Please Ignore next line
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,234,                                                node.incrementRedeliveryCounter();
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,633,"        sendMessages(connection, destination, 1);"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,648,"        // should have re-delivery of 2, one for re-dispatch, one for rollback which is a little too much!"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,649,"        assertEquals(3, msg.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,663,"        sendMessages(connection, destination, 1);"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,678,"        // should have re-delivery of 2, one for re-dispatch, one for rollback which is a little too much!"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,679,"        assertEquals(3, msg.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,55,"        doTestRedelivery(""vm://localhost"", false);"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,59,"        doTestRedelivery(""vm://localhost"", true);"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,105,"        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,138,"        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,171,"        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://localhost"");"
activemq-core/src/test/java/org/apache/activemq/test/rollback/CloseRollbackRedeliveryQueueTest.java,58,"        assertEquals(3, message.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/test/rollback/CloseRollbackRedeliveryQueueTest.java,78,"        assertEquals(3, message.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/test/java/org/apache/activemq/test/rollback/CloseRollbackRedeliveryQueueTest.java,97,"        assertEquals(3, message.getLongProperty(""JMSXDeliveryCount""));"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,319,                        node.incrementRedeliveryCounter();
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,73,        final int nbMessages = 10;
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,74,"        final String destinationName = ""Destination"";"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,75,
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,182,    public void testRedeliveryOnSessionCloseWithNoRollback() throws Exception {
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,184,        ConnectionFactory connectionFactory =
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,189,"        populateDestination(nbMessages, destinationName, connection);"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,193,"            Map<String, Boolean> rolledback = new ConcurrentHashMap<String, Boolean>();"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,194,            while (received.get() < nbMessages) {
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,195,"                Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,201,"                    if (msg != null && rolledback.put(msg.getText(), Boolean.TRUE) != null) {"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,202,"                        LOG.info(""Received message "" + msg.getText() + "" ("" + received.getAndIncrement() + "")"" + msg.getJMSMessageID());"
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,203,                        assertTrue(msg.getJMSRedelivered());
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,204,                        session.commit();
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,205,                    }
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,143,            assertNotNull(remoteConsumer.receive(500));
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,118,"            MarshallingSupport.writeUTF8(dataOut, text);"
activemq-core/src/test/java/org/apache/activemq/openwire/DataFileGeneratorTestSupport.java,108,
activemq-core/src/test/java/org/apache/activemq/openwire/DataFileGeneratorTestSupport.java,109,"        assertBeansEqual("""", new HashSet<Object>(), expected, actual);"
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,66,
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,68,"            NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);"
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,69,            return iterator.nextNode() != null;
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,85,            // We should associated the cachedXPathAPI object with the message
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,86,            // being evaluated
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,87,            // since that should speedup subsequent xpath expressions.
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,89,"            NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);"
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,90,            return iterator.nextNode() != null;
activemq-core/src/test/java/org/apache/activemq/selector/SelectorTest.java,47,"        message.setText(""<root><a key='first'/><b key='second'/></root>"");"
activemq-core/src/test/java/org/apache/activemq/selector/SelectorTest.java,52,
activemq-core/src/test/java/org/apache/activemq/selector/SelectorTest.java,55,
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,438,"                     IntrospectionSupport.getProperties(configuration, props, null);"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,439,                     excludedDestinations = configuration.getExcludedDestinations().toArray(new ActiveMQDestination[configuration.getExcludedDestinations().size()]);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,440,                     staticallyIncludedDestinations = configuration.getStaticallyIncludedDestinations().toArray(new ActiveMQDestination[configuration.getStaticallyIncludedDestinations().size()]);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,441,                     dynamicallyIncludedDestinations = configuration.getDynamicallyIncludedDestinations().toArray(new ActiveMQDestination[configuration.getDynamicallyIncludedDestinations().size()]);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,443,"                     LOG.error(""Error mapping remote destinations"", t);"
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,881,        DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,886,                if (filter instanceof org.apache.activemq.filter.SimpleDestinationFilter) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,889,                        filter = newFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,893,                if (match != null && filter.matches(match)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,902,                if (filter instanceof org.apache.activemq.filter.SimpleDestinationFilter) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,905,                        filter = newFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,909,                if (match != null && filter.matches(match)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,24,import org.apache.tools.ant.taskdefs.condition.IsReference;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,195,"                            messageExpired(createConnectionContext(), message);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,419,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,519,                            //message not added to stats yet
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,520,                            //destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,541, public void gc(){
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,542, }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,694,    public Message[] browse() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,695,        int count = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,698,            pageInMessages(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,699,            synchronized (this.pagedInPendingDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,700,                for (Iterator<QueueMessageReference> i = this.pagedInPendingDispatch
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,701,                        .iterator(); i.hasNext()
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,702,                        && count < getMaxBrowsePageSize();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,703,                    l.add(i.next().getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,704,                    count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,706,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,707,            if (count < getMaxBrowsePageSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,709,                    for (Iterator<QueueMessageReference> i = this.pagedInMessages
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,710,                            .values().iterator(); i.hasNext()
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,711,                            && count < getMaxBrowsePageSize();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,712,                        Message m = i.next().getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,713,                        if (l.contains(m) == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,714,                            l.add(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,715,                            count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,716,                        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,717,                    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,719,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,720,            if (count < getMaxBrowsePageSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,721,                synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,722,                    try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,723,                        messages.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,724,                        while (messages.hasNext()
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,725,                                && count < getMaxBrowsePageSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,726,                            MessageReference node = messages.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,727,                            messages.rollback(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,728,                            if (node != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,729,                                Message m = node.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,730,                                if (l.contains(m) == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,731,                                    l.add(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,732,                                    count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,736,                    } finally {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,737,                        messages.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,742,"            LOG.error(""Problem retrieving message in browse() "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,744,        return l.toArray(new Message[l.size()]);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1193,"    public void messageExpired(ConnectionContext context,MessageReference reference) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1194,"        messageExpired(context,null,reference);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1200,        destinationStatistics.getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1206,        synchronized(pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1207,            pagedInMessages.remove(reference.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1208,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1289,"                                messageExpired(createConnectionContext(), ref);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1315,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,82,        if (deadLetterStrategy != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,83,            queue.setDeadLetterStrategy(deadLetterStrategy);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,84,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,107,        if (deadLetterStrategy != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,108,            topic.setDeadLetterStrategy(deadLetterStrategy);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,109,        }
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,245,        if (newPercentUsage >= 80) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,246,"            LOG.warn(""Memory usage is now over 80%!"");"
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,22,import java.util.Vector;
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,31,import javax.jms.ExceptionListener;
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,32,import javax.jms.JMSException;
activemq-core/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,88,        Thread.sleep(1000);
activemq-core/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,92,        /*################### CURRENT EXPECTED FAILURE ####################*/
activemq-core/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,93,        // The messages expire and should be reaped but they're not currently
activemq-core/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,94,        // reaped until there is an active consumer placed on the queue
activemq-core/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,95,"        assertEquals(""Incorrect count: "" + view.getInFlightCount(), 0, view.getInFlightCount());"
activemq-core/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,96,
activemq-core/src/test/java/org/apache/activemq/bugs/MessageExpirationReaperTest.java,107,        browser.getEnumeration();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,46, public ActiveMQDestination destination;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,87,      consumer.receive(1000);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,120,"        assertEquals(""Wrong inFlightCount: "" + view.getInFlightCount(), view.getDispatchCount() - view.getDequeueCount(), view.getInFlightCount());"
activemq-core/src/test/java/org/apache/activemq/broker/BrokerTestSupport.java,56,import org.apache.commons.logging.Log;
activemq-core/src/test/java/org/apache/activemq/broker/BrokerTestSupport.java,57,import org.apache.commons.logging.LogFactory;
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,36,    public int deliveryMode;
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,38,    public byte destinationType;
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,69,    public void XtestMessagesWaitingForUssageDecreaseExpire() throws Exception {
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,214,    public void xinitCombosForTestMessagesInSubscriptionPendingListExpire() {
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,215,"        addCombinationValues(""deliveryMode"", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});"
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,216,"        addCombinationValues(""destinationType"", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TOPIC_TYPE),"
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,217,"                                                              Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE), Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)});"
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,218,    }
activemq-core/src/test/java/org/apache/activemq/broker/MessageExpirationTest.java,219,
activemq-core/src/main/java/org/apache/activemq/broker/region/IndirectMessageReference.java,72,"        return ""Message "" + message.getMessageId() + "" dropped="" + dropped + "" locked="" + (lockOwner != null);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,306,                    if( node.isExpired() ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,307,"                        node.getRegionDestination().messageExpired(context, this, node);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,555,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,556,            // TODO Dispatched messages should be decremented from Inflight stat
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,557,            // Here is a potential problem concerning Inflight stat:
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,558,            // Messages not already committed or rolled back may not be removed from dispatched list at the moment
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,559,            // Except if each commit or rollback callback action comes before remove of subscriber.
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,560,"            rc.addAll(pending.remove(context, destination));"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,664,                node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,667,        if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,668,"            LOG.trace(info.getDestination().getPhysicalName() + "" dispatched: "" + message.getMessageId());"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,669,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,208,"                            messageExpired(createConnectionContext(), null, message, false);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,555,"        LOG.info(""expiring messages..."");"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,556,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,558,        List<Message> l = new AbstractList<Message>() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,576,"        doBrowse(true, l, getMaxBrowsePageSize());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,753,"                        messageExpired(connectionContext, ref, false);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,761,"                    messageExpired(connectionContext, ref, false);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,774,"                                                createMessageReference(node.getMessage()), false);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1252,"    public void messageExpired(ConnectionContext context,MessageReference reference, boolean dispatched) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1253,"        messageExpired(context,null,reference, dispatched);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1257,"        messageExpired(context, subs, reference, true);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1258,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1259,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1260,"    public void messageExpired(ConnectionContext context,Subscription subs, MessageReference reference, boolean dispatched) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1264,        if (dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1265,            destinationStatistics.getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1266,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1352,"                                messageExpired(createConnectionContext(), ref, false);"
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,692,"       message.setProperty(""originalExpiration"",new Long("
activemq-core/src/test/java/org/apache/activemq/bugs/DurableConsumerTest.java,280,        assertTrue(exceptions.isEmpty());
activemq-core/src/test/java/org/apache/activemq/command/ActiveMQMapMessageTest.java,357,        try {
activemq-core/src/test/java/org/apache/activemq/command/ActiveMQMapMessageTest.java,358,"        mapMessage.getString(""String"");"
activemq-core/src/test/java/org/apache/activemq/command/ActiveMQMapMessageTest.java,359,"        fail(""Should throw a Null pointer"");"
activemq-core/src/test/java/org/apache/activemq/command/ActiveMQMapMessageTest.java,360,        }catch(NullPointerException e){
activemq-core/src/test/java/org/apache/activemq/command/ActiveMQMapMessageTest.java,361,
activemq-core/src/test/java/org/apache/activemq/command/ActiveMQMapMessageTest.java,362,        }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,37,import org.apache.activemq.command.ActiveMQTopic;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,41,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,42,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,63,  broker = new BrokerService();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,64,"  broker.setBrokerName(""localhost"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,65,"  broker.setDataDirectory(""data/"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,66,  broker.setUseJmx(true);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,67,  broker.deleteAllMessages();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,68,"  broker.addConnector(""tcp://localhost:61616"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,69,  broker.start();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,70,  broker.waitUntilStarted();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,71, }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,129,"        //assertEquals(""Wrong inFlightCount: "" + view.getInFlightCount(), view.getDispatchCount() - view.getDequeueCount(), view.getInFlightCount());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,149,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,150,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,151,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,60, protected void setUp() throws Exception {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,61,  broker = new BrokerService();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,62,"  broker.setBrokerName(""localhost"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,63,"  broker.setDataDirectory(""data/"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,64,  broker.setUseJmx(true);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,65,  broker.setDeleteAllMessagesOnStartup(true);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,66,"  broker.addConnector(""tcp://localhost:61616"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,67,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,68,  PolicyMap policyMap = new PolicyMap();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,69,  PolicyEntry defaultEntry = new PolicyEntry();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,70,  defaultEntry.setExpireMessagesPeriod(expiryPeriod);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,71,  defaultEntry.setMaxExpirePageSize(200);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,72,  // so memory is not consumed by DLQ turn if off
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,73,  defaultEntry.setDeadLetterStrategy(null);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,74,  defaultEntry.setMemoryLimit(200*1000);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,75,  policyMap.setDefaultEntry(defaultEntry);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,78,  broker.start();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,79,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,80,  broker.waitUntilStarted();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,81, }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,82,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,83, public void testExpiredMessages() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,225,                            if (!this.getConsumerInfo().isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,226,                                node.getRegionDestination().getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,227,                            }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,241,                                                node.getRegionDestination().getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,290,                        node.getRegionDestination().getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,306,                    if (hasNotAlreadyExpired(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,307,                        if (node.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,309,                            dispatched.remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,310,                            node.getRegionDestination().getDestinationStatistics().getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,312,                    } else {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,313,                        // already expired
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,315,                        node.getRegionDestination().getDestinationStatistics().getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,376,                        node.getRegionDestination().getDestinationStatistics()
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,377,                                .getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,378,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,421,    private boolean hasNotAlreadyExpired(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,422,        boolean hasNotExpired = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,423,        try {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,424,            hasNotExpired = node.getMessage().getProperty(RegionBroker.ORIGINAL_EXPIRATION) == null;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,425,        } catch (IOException e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,426,"            LOG.warn(""failed to determine value message property "" + RegionBroker.ORIGINAL_EXPIRATION + "" for "" + node, e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,427,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,428,        return hasNotExpired;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,429,    }
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,430,
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,613,"                                        node.getRegionDestination().messageExpired(context, this, node);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,763,"                        messageExpired(connectionContext, ref);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,771,"                    messageExpired(connectionContext, ref);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,808,            if (broker.isExpired(ref)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1267,        if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1271,        destinationStatistics.getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,667,        return messageReference.isExpired();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,682,    if(message!=null&&node.getRegionDestination()!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,691,       long expiration=message.getExpiration();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,692,       message.setExpiration(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,693,"       message.setProperty(ORIGINAL_EXPIRATION,new Long("
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,694,               expiration));
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,614,    public boolean isExpired() {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,615,        long expireTime = this.getExpiration();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,616,        if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,617,            return true;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,618,        }
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,619,        return false;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,620,    }
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,621,
activemq-core/src/main/java/org/apache/activemq/command/Message.java,438,        long expireTime = getExpiration();
activemq-core/src/main/java/org/apache/activemq/command/Message.java,439,        if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
activemq-core/src/main/java/org/apache/activemq/command/Message.java,440,            return true;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,442,        return false;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,110,                 while (i++ < 30000) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,126,        Thread.sleep(2000);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,127,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,128,        DestinationViewMBean view = createView(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,132,"        assertEquals(""got what did not expire"", received.get(), view.getDequeueCount() - view.getExpiredCount());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,134,        long expiry = System.currentTimeMillis() + 30000;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,135,        while (view.getInFlightCount() > 0 && System.currentTimeMillis() < expiry) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,136,            Thread.sleep(500);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,137,        }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,138,"        LOG.info(""Stats: received: ""  + received.get() + "", enqueues: "" + view.getDequeueCount() + "", dequeues: "" + view.getDequeueCount()"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,140,"        assertEquals(""Wrong inFlightCount: "", 0, view.getInFlightCount());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,50,    private static final int expiryPeriod = 1000;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,84,        defaultEntry.setExpireMessagesPeriod(expiryPeriod);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,85,        defaultEntry.setMaxExpirePageSize(200);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,109,  producer.setTimeToLive(100);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,113,"  Thread producingThread = new Thread(""Producing Thread"") {"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,133,  final long expiry = System.currentTimeMillis() + 20*1000;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,134,  while (producingThread.isAlive() && expiry > System.currentTimeMillis()) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,135,      producingThread.join(1000);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,136,  }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,137,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,138,"  assertTrue(""producer completed within time "", !producingThread.isAlive());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,140,  Thread.sleep(3*expiryPeriod);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,141,        DestinationViewMBean view = createView(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,142,"        assertEquals(""All sent have expired "", sendCount, view.getExpiredCount());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,144,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,145,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,147,    public void testExpiredMessagesWitVerySlowConsumer() throws Exception {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,156,        final long sendCount = 1001;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,179,"        Thread producingThread = new Thread(""Producing Thread"") {"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,199,        final long expiry = System.currentTimeMillis() + 20*1000;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,200,        while (producingThread.isAlive() && expiry > System.currentTimeMillis()) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,201,            producingThread.join(1000);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,202,        }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,203,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,204,"        assertTrue(""got one message"", receivedOneCondition.await(10, TimeUnit.SECONDS));"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,205,"        assertTrue(""producer completed within time "", !producingThread.isAlive());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,206,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,207,"        Thread.sleep(2 * Math.max(ttl, expiryPeriod));"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,208,        DestinationViewMBean view = createView(destination);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,210,"        assertEquals(""all dispatched up to default prefetch "", 1000, view.getDispatchCount());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,211,"        assertEquals(""All sent save one have expired "", sendCount, view.getExpiredCount());"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,216,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,217,"        Thread.sleep(Math.max(ttl, expiryPeriod));"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,218,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,219,"        assertEquals(""all sent save one have expired "", sendCount, view.getExpiredCount());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,190,"            scheduler.executePeriodically(expireMessagesTask, getExpireMessagesPeriod());"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,48,        if (n.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,49,            if (!broker.isExpired(n)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,50,"                LOG.info(""ignoring ack "" + ack + "", for already expired message: "" + n);"
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,51,                return;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,52,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,53,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,685,            long expiration=message.getExpiration();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,686,            message.setExpiration(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,711,          if (node.getRegionDestination().getActiveMQDestination().isTopic()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,712,              // message may be inflight to other subscriptions so do not modify
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,713,              message = message.copy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,714,          }
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,715,       if(!message.isPersistent()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,730,"       BrokerSupport.resend(context,message,"
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,310,                                        getDestinationStatistics().getExpired().increment();
activemq-core/src/main/java/org/apache/activemq/command/Message.java,91,    private transient boolean expired;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,342,        if (this.expiration > 0) {
activemq-core/src/main/java/org/apache/activemq/command/Message.java,343,            expired = false;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,344,        }
activemq-core/src/main/java/org/apache/activemq/command/Message.java,442,        if (!expired) {
activemq-core/src/main/java/org/apache/activemq/command/Message.java,443,            long expireTime = getExpiration();
activemq-core/src/main/java/org/apache/activemq/command/Message.java,444,            if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
activemq-core/src/main/java/org/apache/activemq/command/Message.java,445,                expired = true;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,446,            }
activemq-core/src/main/java/org/apache/activemq/command/Message.java,447,        }
activemq-core/src/main/java/org/apache/activemq/command/Message.java,448,        return expired;
activemq-core/src/main/java/org/apache/activemq/util/BrokerSupport.java,42,        Message message = originalMessage.copy();
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,52, BrokerService broker;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,53, Connection connection;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,54, Session session;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,55, MessageProducer producer;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,56, MessageConsumer consumer;
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,57," public ActiveMQDestination destination = new ActiveMQQueue(""test"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,106,
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,111,                 while (i++ < 10000) {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,165, public void initCombosForTestRecoverExpiredMessages() {
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,269,"   name = new ObjectName(domain + "":BrokerName=localhost,Type=Queue,Destination=test"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesTest.java,271,"   name = new ObjectName(domain + "":BrokerName=localhost,Type=Topic,Destination=test"");"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,189,        if (getExpireMessagesPeriod() > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,190,"            scheduler.schedualPeriodically(expireMessagesTask, getExpireMessagesPeriod());"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,191,        }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,192,
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,645,"        LOG.info(toString() + "", canceling expireMessagesTask"");"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,80,"        fireAdvisory(context, topic, info);"
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,81,"        connections.put(info.getConnectionId(), info);"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,429,"            rmiServer = ""localhost:"" + rmiServerPort;"
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,431,"        String serviceURL = ""service:jmx:rmi://"" + rmiServer + ""/jndi/rmi://localhost:"" + connectorPort + connectorPath;"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,72,"        broker.setDataDirectory(""data/"");"
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,79,        defaultEntry.setOptimizedDispatch(true);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,141,        });
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,141,"        }, 5*1000l);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1269,        wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1300,        }else {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1301,            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1302,                taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1303,            } catch (InterruptedException e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1304,"                LOG.warn(""Task Runner failed to wakeup "", e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1305,            }
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1394,                        wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1606,            try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1607,                this.taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1608,            } catch (InterruptedException e) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1609,"                LOG.warn(getName() + "" failed to wakeup task runner on usageChange: "" + e);"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1610,            }
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,79,        //defaultEntry.setOptimizedDispatch(true);
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,78,        // TODO Optimize dispatch makes this test hang
activemq-core/src/test/java/org/apache/activemq/usecases/ExpiredMessagesWithNoConsumerTest.java,79,        defaultEntry.setOptimizedDispatch(true);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,20,import java.util.Iterator;
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,37,
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,45, *
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,51,    private ArrayList<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,61,     *
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,76,        for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,77,            ManagedSessionProxy p = iter.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,78,            try {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,79,                p.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,80,            } catch (JMSException ignore) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,82,            iter.remove();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,87,     *
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,99,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,109,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,118,"//        ActiveMQSession session = (ActiveMQSession)getConnection().createSession(true, acknowledgeMode);"
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,119,"        ActiveMQSession session = (ActiveMQSession)getConnection().createSession(transacted, acknowledgeMode);"
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,122,        ManagedSessionProxy p = new ManagedSessionProxy(session);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,124,        sessions.add(p);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,129,        for (ManagedSessionProxy p : sessions) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,130,            p.setUseSharedTxContext(enable);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,135,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,145,     * @param transacted Whether session is transacted
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,155,     * @return
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,163,     * @return
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,171,     * @return
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,179,     * @param clientID
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,187,     * @param listener
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,50, * that are of interest of the ActiveMQManagedConnection.
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,59,    public ManagedSessionProxy(ActiveMQSession session) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,77,     * Called by the ActiveMQManagedConnection to invalidate this proxy.
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,79,     * @throws JMSException
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,80,     * @throws JMSException
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,88,     *
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,362,"                LOG.warn(""Ack for non existent subscription, ack:"" + ack);"
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,363,                throw new IllegalArgumentException(
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/AMQTxMarshaller.java,58,        dataOut.writeInt(list.size());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1911,            slaveStartSignal.await();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2108,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2135,}
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,703,    stampAsExpired(message);
activemq-core/src/test/java/org/apache/activemq/broker/ft/MasterSlaveSlaveDieTest.java,56,"        master.addConnector(""tcp://localhost:0"");"
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,29,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,30,
activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java,35,public class DuplexNetworkMBeanTest extends TestCase {
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,23,import javax.jms.MessageConsumer;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,32,import junit.framework.TestCase;
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,33,
activemq-core/src/test/java/org/apache/activemq/network/NetworkBrokerDetachTest.java,42,public class NetworkBrokerDetachTest extends TestCase {
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,84,        Thread.sleep(2000);
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,113,        Thread.sleep(1000);
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,117,            assertNotNull(consumer1.receive(500));
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,118,            assertNotNull(consumer2.receive(500));
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,121,        assertNull(consumer1.receive(500));
activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java,122,        assertNull(consumer2.receive(500));
activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportWaitForTest.java,60,"                        fail(""unexpected exception:"" + e);"
activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportWaitForTest.java,73,"        assertTrue(""has got connection"", gotConnection.await(200, TimeUnit.MILLISECONDS));"
activemq-core/src/test/java/org/apache/activemq/usecases/MultiBrokersMultiClientsTest.java,69,"         assertConsumersConnect(""Broker"" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 30000);"
activemq-core/src/test/java/org/apache/activemq/usecases/MultiBrokersMultiClientsTest.java,120,"         assertConsumersConnect(""Broker"" + i, dest, (BROKER_COUNT-1)+CONSUMER_COUNT, 30000);"
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,133,                    if (transport == null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,437,        if (command.getDataStructureType() == ConsumerInfo.DATA_STRUCTURE_TYPE) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,470,"                for (MessageReference ref : sub.remove(context, this)) {"
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,474,                        // only increment redelivery if it was delivered or we
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,476,                        if (lastDeiveredSequenceId == 0
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,477,                                || qmr.getMessageId().getBrokerSequenceId() <= lastDeiveredSequenceId) {
activemq-core/src/test/java/org/apache/activemq/JMSConsumerTest.java,810,        assertTrue(msg.getJMSRedelivered());
activemq-core/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java,101,                        assertFalse(msg.getJMSRedelivered());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,121,            //see https://issues.apache.org/activemq/browse/AMQ-2103
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,122,            this.text=null;
activemq-core/src/test/java/org/apache/activemq/openwire/DataFileGeneratorTestSupport.java,109,"        assertBeansEqual("""", new HashSet<Object>(), expected, actual);"
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,665,
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,124,    @Override
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,125,    public void afterMarshall(WireFormat wireFormat) throws IOException {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,126,        super.afterMarshall(wireFormat);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,127,        //see https://issues.apache.org/activemq/browse/AMQ-2103
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,128,        // and https://issues.apache.org/activemq/browse/AMQ-2966
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,129,        this.text=null;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,131,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1642,    protected void stopAllConnectors(ServiceStopper stopper) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2066,    protected void startAllConnectors() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2333,
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2335,        ioExceptionHandler.setBrokerService(this);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,91,"                                    + "" while trying to handle this excpetion: """
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,492,        TransactionContext answer = new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,622,"            LOG.warn(""Failure occured while stopping broker"");"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,49,    public TransactionContext(DataSource dataSource) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,50,        this.dataSource = dataSource;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,63,                throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,25,public class DefaultIOExceptionHandler implements IOExceptionHandler {
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,39,
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,52,        new Thread() {
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,57,"                    LOG.warn(""Failure occured while stopping broker"", e);"
activemq-core/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsTest.java,52,"        session = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsTest.java,53,"        receiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);"
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2061,     *                asynchronously. The default value is false.
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,781,     *                asynchronously. The default value is false.
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,33, *
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,34, *
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,43,    private boolean inTx;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,71,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,150,"                    LOG.warn(""Close failed: "" + e.getMessage(), e);"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,162,        inTx = true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,41,    private volatile boolean inTx;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,163,        connection = getConnection();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,164,        // only mark in tx if we could get a connection
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,212,    protected void setUp() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,214,        doSetUp(true);
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,218,    protected void tearDown() throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,226,            consumerBroker.stop();
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,235,    protected void doSetUp(boolean deleteAllMessages) throws Exception {
activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java,350,        policy.setUseCache(false);

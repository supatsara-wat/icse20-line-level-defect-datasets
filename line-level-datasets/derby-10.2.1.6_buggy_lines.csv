File,LineNumber,src
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,153,            if( requiredPermissionsList != null && ! requiredPermissionsList.isEmpty() &&
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,156,                for( Iterator iter = requiredPermissionsList.iterator();
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,157,                     iter.hasNext();)
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,159,"                    ((StatementPermission) iter.next()).check( lcc, authorizationId, false);"
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,160,                }
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,162,  }
java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java,163, }
java/testing/org/apache/derbyTesting/functionTests/harness/j9_foundation.java,131, protected void setSecurityProps()
java/testing/org/apache/derbyTesting/functionTests/harness/j9_foundation.java,132, {
java/testing/org/apache/derbyTesting/functionTests/harness/j9_foundation.java,133,"  System.out.println(""Note: J9 (foundation) tests do not run with security manager"");"
java/testing/org/apache/derbyTesting/functionTests/harness/j9_foundation.java,134, }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,60,        suite.addTest(DataSourcePropertiesTest.suite());
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,159,"      bcon.getLeftOperand().getTypeServices(),"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,223,
java/engine/org/apache/derby/impl/store/raw/RawStore.java,224,  //save the service properties to a file if we are doing a restore from
java/engine/org/apache/derby/impl/store/raw/RawStore.java,227,   //copy the jar files.etc from backup if they don't exist
java/engine/org/apache/derby/impl/store/raw/RawStore.java,229,   ((UpdateServiceProperties)properties).saveServiceProperties();
java/engine/org/apache/derby/impl/store/raw/RawStore.java,267,  //save the service properties to a file if we are doing a restore from
java/engine/org/apache/derby/impl/store/raw/RawStore.java,268,  if(restoreFromBackup !=null)
java/engine/org/apache/derby/impl/store/raw/RawStore.java,270,   //copy the jar files.etc from backup if they don't exist
java/engine/org/apache/derby/impl/store/raw/RawStore.java,271,   restoreRemainingFromBackup(restoreFromBackup);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,276,
java/engine/org/apache/derby/impl/store/raw/RawStore.java,978, //copies the files from the backup that does not need
java/engine/org/apache/derby/impl/store/raw/RawStore.java,979, //any special handling like jars.
java/engine/org/apache/derby/impl/store/raw/RawStore.java,980, private void restoreRemainingFromBackup(String backupPath) throws StandardException
java/engine/org/apache/derby/impl/store/raw/RawStore.java,982,  /**
java/engine/org/apache/derby/impl/store/raw/RawStore.java,983,   *copy the files from the backup except the ones that we already
java/engine/org/apache/derby/impl/store/raw/RawStore.java,984,   *copied in the boot methods(like log directory and data segments)
java/engine/org/apache/derby/impl/store/raw/RawStore.java,985,   *AND Service.properties file which we create last to
java/engine/org/apache/derby/impl/store/raw/RawStore.java,986,   *indicate the end of copy from backup.
java/engine/org/apache/derby/impl/store/raw/RawStore.java,987,   */
java/engine/org/apache/derby/impl/store/raw/RawStore.java,988,
java/engine/org/apache/derby/impl/store/raw/RawStore.java,989,  File backuploc = new File(backupPath);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,990,  String[] fromList = privList(backuploc);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,991,  for(int i =0 ; i < fromList.length ; i++)
java/engine/org/apache/derby/impl/store/raw/RawStore.java,992,  {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,993,   StorageFile toFile = storageFactory.newStorageFile( fromList[i]);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,994,   if(privExists(toFile) ||
java/engine/org/apache/derby/impl/store/raw/RawStore.java,995,      fromList[i].equals(PersistentService.PROPERTIES_NAME)){
java/engine/org/apache/derby/impl/store/raw/RawStore.java,996,    continue;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,997,   }
java/engine/org/apache/derby/impl/store/raw/RawStore.java,999,"   File fromFile = new File(backuploc, fromList[i]);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1000,   if(privIsDirectory(fromFile))
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1001,   {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1002,"    if (!privCopyDirectory(fromFile, toFile)){"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1003,     throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1005,"                         fromFile, toFile);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1006,    }
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1007,   }else{
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1008,"    if (!privCopyFile(fromFile, toFile)){"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1009,     throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1010,"                         SQLState.UNABLE_TO_COPY_FILE_FROM_BACKUP,"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1011,"                         fromFile, toFile);"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1012,    }
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,927,        && other.rightOperand.isEquivalent(rightOperand));
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,52,     * This method sets the stack trace of the newly created exception to the
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,53,     * root cause of the original Throwable.
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,74,"  SQLException ex = new SQLException(message, sqlState, severity, t);"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,101,        if (t != null) {
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,102,            ex.setStackTrace (t.getStackTrace ());
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,103,        }
java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java,285,   return other.getValue().compare(getValue()) == 0;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,39,    private static String[][] TABLES = {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,48,"            "" lbv long varchar for bit data, dc decimal(5,2))""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,466,
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,48,public class UpdateLoader {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,64," public UpdateLoader(String classpath, DatabaseClasses parent, boolean verbose, boolean normalizeToUpper)"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,84,"  String[][] elements = IdUtil.parseDbClassPath(classpath, normalizeToUpper);"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,86,  int jarCount = elements.length;
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,89,  for (int i = 0; i < jarCount; i++) {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,90,"   jarList[i] = new JarLoader(this, elements[i], vs);"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,91,  }
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,92,
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,106," public Class loadClass(String className, boolean resolve)"
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,157, public InputStream getResourceAsStream(String name) {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,204, public synchronized void modifyClasspath(String classpath)
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,217, public synchronized void modifyJar(boolean reload) throws StandardException {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,281, public void close() {
java/engine/org/apache/derby/impl/services/reflect/UpdateLoader.java,300, public int getClassLoaderVersion() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java,81," String[] tabsToDrop = {""tab1"", ""t1"", ""t1copy"", ""t2""};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java,131,
java/engine/org/apache/derby/catalog/SystemProcedures.java,930,"            (purgeRows == 1),"
java/engine/org/apache/derby/catalog/SystemProcedures.java,931,"            (defragementRows == 1),"
java/engine/org/apache/derby/catalog/SystemProcedures.java,932,            (truncateEnd == 1));
java/engine/org/apache/derby/impl/sql/GenericParameter.java,334,    return value.getString();
java/engine/org/apache/derby/impl/sql/GenericParameter.java,338,"    return ""unexpected exception from getString() - "" + se;"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,798,   initSlotTable();
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2171, private void initSlotTable()
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2215,"                            SQLState.DATA_CORRUPT_PAGE, getPageId()));"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2279,"                    SQLState.DATA_CORRUPT_PAGE, ioe, getPageId()));"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2871,   rc.setExpression(rc.getExpression().remapColumnReferencesToExpressions());
java/client/org/apache/derby/client/am/SectionManager.java,55,    public static byte[] holdPKGNAMCBytes = null;
java/client/org/apache/derby/client/am/SectionManager.java,56,    public static byte[] noHoldPKGNAMCBytes = null;
java/build/org/apache/derbyBuild/MessageBuilder.java,555,"        String       displayText = replaceSpecialChars( plugInArgs( rawText, args ) );"
java/build/org/apache/derbyBuild/MessageBuilder.java,646,"            cookedArgs[ i ] = ""&lt;"" + rawArgs[ i ] + ""&gt;"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2637,"                    ""has been closed"", ioe.getMessage());"
java/build/org/apache/derbyBuild/MessageBuilder.java,87,"        "" \""../../derby/docs/trunk/src/dtd/reference.dtd\"">\n"";"
java/build/org/apache/derbyBuild/MessageBuilder.java,110,"        ""the corresponding text in MessageBuilder.\n"" +"
java/build/org/apache/derbyBuild/MessageBuilder.java,209,"            _pw.println( ""<"" + tag + "" "" + attributes + "" />"");"
java/build/org/apache/derbyBuild/MessageBuilder.java,236,"            _pw.println( ""<"" + tag + "" "" + attributes + "" >"");"
java/build/org/apache/derbyBuild/MessageBuilder.java,282,"            _pw.print( ""<"" + tag + "" "" + attributes + "" >"");"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,310,    protected String serializeToString(String xmlAsText)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,313,        ArrayList aList = new ArrayList();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,314,        aList.add(dBuilder.parse(
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,315,            new InputSource(new StringReader(xmlAsText))));
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,310,    protected String serializeToString(final String xmlAsText)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,313,        final ArrayList aList = new ArrayList();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,323,        java.security.AccessController.doPrivileged(
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,324,            new java.security.PrivilegedExceptionAction()
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,325,            {
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,326,                public Object run() throws Exception
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,328,                    aList.add(dBuilder.parse(
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,329,                        new InputSource(new StringReader(xmlAsText))));
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,330,                    return null;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,331,                }
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,332,            });
java/engine/org/apache/derby/iapi/types/Like.java,671,"  * clauses.  It can if the pattern is non-null, of length > 0 and"
java/engine/org/apache/derby/iapi/types/Like.java,681,  if (pattern == null || (pattern.length() == 0))
java/engine/org/apache/derby/iapi/types/Like.java,874,  * (NOTE: This may be null if the pattern is an empty string.)
java/engine/org/apache/derby/iapi/types/Like.java,891,  if (pattern.length() == 0)
java/engine/org/apache/derby/iapi/types/Like.java,892,  {
java/engine/org/apache/derby/iapi/types/Like.java,893,"   // pattern is """""
java/engine/org/apache/derby/iapi/types/Like.java,894,   return null;
java/engine/org/apache/derby/iapi/types/Like.java,895,  }
java/engine/org/apache/derby/iapi/types/Like.java,896,
java/engine/org/apache/derby/iapi/types/Like.java,914,"   * """"    null"
java/engine/org/apache/derby/iapi/types/Like.java,937,  // Pattern starts with wildcard.
java/engine/org/apache/derby/iapi/store/access/FileResource.java,108,   Get the File handle to a file resource. In some situations
java/engine/org/apache/derby/iapi/store/access/FileResource.java,109,   higher level code can make optimisations if it can access
java/engine/org/apache/derby/iapi/store/access/FileResource.java,110,"   a file as a File, rather than an output stream. If this call"
java/engine/org/apache/derby/iapi/store/access/FileResource.java,111,   returns null then the resouce is not accessable as a file
java/engine/org/apache/derby/iapi/store/access/FileResource.java,112,   (e.g. the database is in a zip file).
java/engine/org/apache/derby/iapi/store/access/FileResource.java,117,"   @return A File object representing the file, or null if"
java/engine/org/apache/derby/iapi/store/access/FileResource.java,118,   the resource is not accessable as a file.
java/engine/org/apache/derby/iapi/store/access/FileResource.java,122, /**
java/engine/org/apache/derby/iapi/store/access/FileResource.java,123,   Get the file resource as a stream.
java/engine/org/apache/derby/iapi/store/access/FileResource.java,124,
java/engine/org/apache/derby/iapi/store/access/FileResource.java,125,   @exception IOException some io error occured
java/engine/org/apache/derby/iapi/store/access/FileResource.java,126,   @exception FileNotFoundException file does not exist.
java/engine/org/apache/derby/iapi/store/access/FileResource.java,127, */
java/engine/org/apache/derby/iapi/store/access/FileResource.java,128," public InputStream getAsStream(String name, long generationId)"
java/engine/org/apache/derby/iapi/store/access/FileResource.java,129,  throws IOException;
java/engine/org/apache/derby/iapi/store/access/FileResource.java,130,
java/engine/org/apache/derby/impl/db/BasicDatabase.java,804,"  Object f = fr.getAsFile(externalName, generationId);"
java/engine/org/apache/derby/impl/db/BasicDatabase.java,809,"   return fr.getAsStream(externalName, generationId);"
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,24,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,26,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,29,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,30,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,31,import org.apache.derby.iapi.store.access.FileResource;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,32,import org.apache.derby.iapi.store.raw.Transaction;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,34,import org.apache.derby.iapi.store.access.DatabaseInstant;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,36,
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,37,import org.apache.derby.io.StorageFactory;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,38,import org.apache.derby.io.WritableStorageFactory;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,40,import org.apache.derby.io.StorageRandomAccessFile;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,41,
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,42,import java.io.InputStream;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,43,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,44,import java.io.FileNotFoundException;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,45,import java.io.IOException;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,46,import java.security.AccessController;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,47,import java.security.PrivilegedAction;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,48,import java.security.PrivilegedActionException;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,49,import java.security.PrivilegedExceptionAction;
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,213, /**
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,214,   @see FileResource#getAsStream
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,215,   @exception IOException trouble accessing file.
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,216,   */
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,217," public InputStream getAsStream(String name, long generationId)"
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,218,   throws IOException
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,219, {
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,220,"        return getAsFile(name, generationId).getInputStream();"
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,221, }
java/engine/org/apache/derby/impl/store/raw/data/RFResource.java,222,
java/engine/org/apache/derby/iapi/services/loader/JarReader.java,33,  Load the contents of a Jarfile. The return is either
java/engine/org/apache/derby/iapi/services/loader/JarReader.java,34,  an java.io.InputStream representing the contents of the JarFile
java/engine/org/apache/derby/iapi/services/loader/JarReader.java,35,  or a java.io.File representing the location of the file.
java/engine/org/apache/derby/iapi/services/loader/JarReader.java,36,  If the jar does not exist an exception is thrown.
java/engine/org/apache/derby/iapi/services/loader/JarReader.java,38," Object readJarFile(String schemaName, String sqlName)"
java/engine/org/apache/derby/impl/db/BasicDatabase.java,793," public Object readJarFile(String schemaName, String sqlName)"
java/engine/org/apache/derby/impl/db/BasicDatabase.java,811,"  StorageFile f = fr.getAsFile(externalName, generationId);"
java/engine/org/apache/derby/impl/db/BasicDatabase.java,812,  if (f instanceof java.io.File)
java/engine/org/apache/derby/impl/db/BasicDatabase.java,813,   return f;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,814,
java/engine/org/apache/derby/impl/db/BasicDatabase.java,815,  try {
java/engine/org/apache/derby/impl/db/BasicDatabase.java,816,   return f.getInputStream();
java/engine/org/apache/derby/impl/db/BasicDatabase.java,817,  } catch (java.io.IOException ioe) {
java/engine/org/apache/derby/impl/db/BasicDatabase.java,818,"            throw StandardException.newException(SQLState.LANG_FILE_ERROR, ioe, ioe.toString());"
java/engine/org/apache/derby/impl/db/BasicDatabase.java,819,  }
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,80, // Initialize the class loader so it knows if it
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,81, // is loading from a ZipFile or an InputStream
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,84,  Object zipData = load();
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,88,   if (zipData instanceof File) {
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,89,                jar = new JarFile((File) zipData);
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,93,"            // Jar is only accessible as an INputStream,"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,94,            // which means we need to re-open the stream for
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,95,            // each access. Thus we close the stream now as we have
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,96,            // no further use for it.
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,97,   if (zipData instanceof InputStream) {
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,98,    isStream = true;
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,99,    try {
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,100,     ((InputStream) zipData).close();
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,101,    } catch (IOException ioe) {
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,102,    }
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,103,    return;
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,104,   }
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,106,   if (vs != null)
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,107,"    vs.println(MessageService.getTextMessage(MessageId.CM_LOAD_JAR_EXCEPTION, getJarName(), ioe));"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,111,  setInvalid();
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,115,  Handle all requests to the top-level loader.
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,116,
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,117,  @exception ClassNotFoundException Class can not be found
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,118, */
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,167,"    return loadClassData((InputStream) load(),"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,191,"   return getRawStream((InputStream) load(), name);"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,290, private Object load() {
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,291,
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,292,  String[] dbJarName = name;
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,293,
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,294,  String schemaName = dbJarName[IdUtil.DBCP_SCHEMA_NAME];
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,295,  String sqlName = dbJarName[IdUtil.DBCP_SQL_JAR_NAME];
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,296,
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,297,"  // don't need a connection, just call the code directly"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,298,  try {
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,299,"   return updateLoader.getJarReader().readJarFile(schemaName, sqlName);"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,300,  } catch (StandardException se) {
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,301,   if (vs != null)
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,302,"    vs.println(MessageService.getTextMessage(MessageId.CM_LOAD_JAR_EXCEPTION, getJarName(), se));"
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,303,   return null;
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,304,  }
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,305,
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,306, }
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,307,
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,414,  // colmap[x] == y means that column x in the target table
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,415,  // maps to column y in the source result set.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,416,  // colmap[x] == -1 means that column x in the target table
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,417,  // maps to its default value.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,418,  // both colmap indexes and values are 0-based.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,420,"  /* if the list is in order and complete, we don't have to change"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,421,"   * the tree. If it is not, then we call RSN.enhanceRCLForInsert()"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,422,   * which will either
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,423,"   * (reorder and/or ""enhance"" the source RCL within the same RSN) or"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,424,   * (generate and return a PRN with a new reordered/enhanced RCL above
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,425,"   * the existing RSN).  This way, RSN's that understand how to do projections"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,426,   * can avoid the additional PRN while those that do not will get one.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,427,   */
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,428,  /* NOTE - javascope gives confusing branch coverage info here.  By
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,429,"   * breaking apart the following if condition, I have verified that"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,430,   * we test all cases.  (Jerry 7/17/97)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,431,   */
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,432,  if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,433,  {
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,434,   // one thing we do know is that all of the resultsets underneath
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,435,   // us have their resultColumn names filled in with the names of
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,436,   // the target table columns.  That makes generating the mapping
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,437,"   // ""easier"" -- we simply generate the names of the target table columns"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,438,"   // that are included.  For the missing columns, we generate default"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,439,   // value expressions.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,440,
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,441,"   resultSet = resultSet.enhanceRCLForInsert(numTableColumns, colMap,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,442,"               dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,443,"               targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,444,  }
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,445,
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,446,  if (resultSet instanceof UnionNode)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,447,  {
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,448,"   // If we are inserting a number of rows in VALUES clause, we need to"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,449,   // examine each row for 'autoincrement'.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,450,   resultColumnList.checkAutoincrementUnion(resultSet);
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,451,  }
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,452,  else resultColumnList.checkAutoincrement(resultSet.getResultColumns());
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2255, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2256,"  * If the resultset is a UnionNode (e.g., multi-rows in VALUES clause), we recursively call itself."
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2257,  * checkAutoincrement() will set ColumnDescriptor for autoincrement columns.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2258,"  * This way, all ColumnDescriptor of all rows will be set properly."
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2259,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2260, public void checkAutoincrementUnion(ResultSetNode rs)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2261,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2262, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2263,  ResultSetNode lrs = ((TableOperatorNode)rs).getLeftResultSet();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2264,  ResultSetNode rrs = ((TableOperatorNode)rs).getRightResultSet();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2265,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2266,  if (lrs instanceof UnionNode)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2267,  {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2268,   this.checkAutoincrementUnion(lrs);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2269,  }
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2270,  else
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2271,  {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2272,   this.checkAutoincrement(lrs.getResultColumns());
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2273,  }
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2274,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2275,  if (rrs instanceof UnionNode)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2276,  {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2277,   this.checkAutoincrementUnion(rrs);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2278,  }
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2279,  else
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2280,  {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2281,   this.checkAutoincrement(rrs.getResultColumns());
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2282,  }
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2283, }
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2284,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1047,  * matches the target RCL.  Those RSNs whose generate() method does
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1048,"  * not handle projects will insert a PRN, with a new RCL which matches"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1049,"  * the target RCL, above the current RSN."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1059,  *
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1060,  * @return ResultSetNode The new top of the tree
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1064," public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1075,  int numResultSetColumns = resultColumns.size();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1101,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1102,  return this;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,886, /**
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,887,  * This ResultSet is the source for an Insert.  The target RCL
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,888,  * is in a different order and/or a superset of this RCL.  In most cases
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,889,  * we will reorder and/or add defaults to the current RCL so that is
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,890,  * matches the target RCL.  Those RSNs whose generate() method does
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,891,"  * not handle projects will insert a PRN, with a new RCL which matches"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,892,"  * the target RCL, above the current RSN."
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,893,  * NOTE - The new or enhanced RCL will be fully bound.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,894,  *
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,895,  * @param numTargetColumns # of columns in target RCL
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,896,  * @param colMap   int array representation of correspondence between
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,897,  *       RCLs - colmap[i] = -1 -> missing in current RCL
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,898,  *           colmap[i] = j -> targetRCL(i) <-> thisRCL(j+1)
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,899,  * @param dataDictionary DataDictionary to use
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,900,"  * @param targetTD   TableDescriptor for target if the target is not a VTI, null if a VTI"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,901,"     * @param targetVTI         Target description if it is a VTI, null if not a VTI"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,902,  *
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,903,  * @return ResultSetNode The new top of the tree
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,904,  *
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,905,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,906,  */
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,907," public ResultSetNode enhanceRCLForInsert(int numTargetColumns, int[] colMap,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,908,"            DataDictionary dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,909,"            TableDescriptor targetTD,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,910,                                             FromVTI targetVTI)
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,911,   throws StandardException
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,912, {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,913,  // our newResultCols are put into the bound form straight away.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,914,  ResultColumnList newResultCols =
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,915,        (ResultColumnList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,916,"            C_NodeTypes.RESULT_COLUMN_LIST,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,917,            getContextManager());
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,918,  int numResultSetColumns = resultColumns.size();
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,919,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,920,  /* Create a massaged version of the source RCL.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,921,"   * (Much simpler to build new list and then assign to source,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,922,   * rather than massage the source list in place.)
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,923,   */
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,924,  for (int index = 0; index < numTargetColumns; index++)
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,925,  {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,926,   ResultColumn newResultColumn;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,927,   ResultColumn oldResultColumn;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,928,   ColumnReference newColumnReference;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,929,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,930,   if (colMap[index] != -1)
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,931,   {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,932,"    // getResultColumn uses 1-based positioning, so offset the colMap entry appropriately"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,933,    oldResultColumn = resultColumns.getResultColumn(colMap[index]+1);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,934,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,935,    newColumnReference = (ColumnReference) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,936,"            C_NodeTypes.COLUMN_REFERENCE,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,937,"            oldResultColumn.getName(),"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,938,"            null,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,939,            getContextManager());
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,940,    /* The ColumnReference points to the source of the value */
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,941,    newColumnReference.setSource(oldResultColumn);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,942,"    // colMap entry is 0-based, columnId is 1-based."
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,943,    newColumnReference.setType(oldResultColumn.getExpressionType());
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,944,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,945,"    // Source of an insert, so nesting levels must be 0"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,946,    newColumnReference.setNestingLevel(0);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,947,    newColumnReference.setSourceLevel(0);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,948,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,949,    // because the insert already copied the target table's
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,950,"    // column descriptors into the result, we grab it from there."
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,951,"    // alternatively, we could do what the else clause does,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,952,    // and look it up in the DD again.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,953,    newResultColumn = (ResultColumn) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,954,"      C_NodeTypes.RESULT_COLUMN,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,955,"      oldResultColumn.getType(),"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,956,"      newColumnReference,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,957,      getContextManager());
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,958,   }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,959,   else
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,960,   {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,961,"    newResultColumn = genNewRCForInsert(targetTD, targetVTI, index + 1, dataDictionary);"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,962,   }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,963,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,964,   newResultCols.addResultColumn(newResultColumn);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,965,  }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,966,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,967,  /* The generated ProjectRestrictNode now has the ResultColumnList
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,968,   * in the order that the InsertNode expects.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,969,"   * NOTE: This code here is an exception to several ""rules"":"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,970,   *  o  This is the only ProjectRestrictNode that is currently
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,971,   *     generated outside of preprocess().
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,972,   *     o  The UnionNode is the only node which is not at the
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,973,   *     top of the query tree which has ColumnReferences under
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,974,   *     its ResultColumnList prior to expression push down.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,975,   */
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,976,  return (ResultSetNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,977,"         C_NodeTypes.PROJECT_RESTRICT_NODE,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,978,"         this,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,979,"         newResultCols,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,980,"         null,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,981,"         null,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,982,"         null,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,983,"         null,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,984,"         tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,985,         getContextManager());
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,986, }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,987,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,631,        setContextClassLoader(jarURL);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,638,            setContextClassLoader(null);
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1813,  * the passed in default schema as the default schema
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,847,                    // workaround for a jikes bug. Can't directly reference a
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,848,                    // double with a value of 12.0 in this classfile.
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,849,                    double baseIndexUsage = 1.0;
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,850,                    perRowUsage += ( baseIndexUsage + 11 );
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,188,     StatementContext sc = lcc.getStatementContext();
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,189,     sc.cleanupOnError(e);
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,194,"    lcc.popStatementContext(lcc.getStatementContext(), e);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2499,"   ti.updateRow(keyRow, curRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2500,"     SYSCOLPERMSRowFactory.TABLEID_INDEX_NUM,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,211,        // Bug DERBY-2243 - return value is indicating support
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,212,"        // level of the SQL engine, so should be consistent."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,213,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,214,            assertFalse(dmd.supportsANSI92EntryLevelSQL());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,215,        else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,216,            assertTrue(dmd.supportsANSI92EntryLevelSQL());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,246,"        // Bug DERBY-2244, order by with expressions was added by DERBY-134"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,247,        assertFalse(dmd.supportsExpressionsInOrderBy());
java/tools/org/apache/derby/impl/tools/ij/util.java,57, private static boolean HAVE_BIG_DECIMAL;
java/tools/org/apache/derby/impl/tools/ij/util.java,60,  boolean haveBigDecimal;
java/tools/org/apache/derby/impl/tools/ij/util.java,62,"   Class.forName(""java.math.BigDecimal"");"
java/tools/org/apache/derby/impl/tools/ij/util.java,63,   haveBigDecimal = true;
java/tools/org/apache/derby/impl/tools/ij/util.java,65,   haveBigDecimal = false;
java/tools/org/apache/derby/impl/tools/ij/util.java,67,  HAVE_BIG_DECIMAL = haveBigDecimal;
java/tools/org/apache/derby/impl/tools/ij/util.java,650,     if (util.HAVE_BIG_DECIMAL)
java/tools/org/apache/derby/impl/tools/ij/util.java,663,      // an integral type.
java/tools/org/apache/derby/impl/tools/ij/util.java,664,      switch (ps.getMetaData().getColumnType(c))
java/tools/org/apache/derby/impl/tools/ij/util.java,665,      {
java/tools/org/apache/derby/impl/tools/ij/util.java,666,      case Types.BIGINT:
java/tools/org/apache/derby/impl/tools/ij/util.java,667,"       ps.setLong(c, rs.getLong(c));"
java/tools/org/apache/derby/impl/tools/ij/util.java,668,          break;
java/tools/org/apache/derby/impl/tools/ij/util.java,669,      case Types.INTEGER:
java/tools/org/apache/derby/impl/tools/ij/util.java,670,      case Types.SMALLINT:
java/tools/org/apache/derby/impl/tools/ij/util.java,671,      case Types.TINYINT:
java/tools/org/apache/derby/impl/tools/ij/util.java,672,"       ps.setInt(c, rs.getInt(c));"
java/tools/org/apache/derby/impl/tools/ij/util.java,673,       break;
java/tools/org/apache/derby/impl/tools/ij/util.java,674,      default:
java/tools/org/apache/derby/impl/tools/ij/util.java,675,"       ps.setString(c,rs.getString(c));"
java/tools/org/apache/derby/impl/tools/ij/util.java,676,          break;
java/tools/org/apache/derby/impl/tools/ij/util.java,677,      }
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,616,  return false;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,734,  return false;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2398,"  in SYSCOLPERMS and expand the ""COLUMNS"" column in SYSCOLPERMS to"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2399,  accomodate the newly added column to the tableid*/
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2414,         int currentLength = columns.getLength();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2415,         columns.grow(currentLength+1);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,676,"  * Currently, column privileges are not repaired when"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,677,"  * dropping a column. This is bug DERBY-1909, and for the"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,678,  * time being we simply reject DROP COLUMN if it is specified
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,679,  * when sqlAuthorization is true (that check occurs in the
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,680,"  * parser, not here). When DERBY-1909 is fixed:"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,681,  *  - Update this comment
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,682,  *  - Remove the check in dropColumnDefinition() in the parser
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,683,  *  - consolidate all the tests in altertableDropColumn.sql
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,684,  *    back into altertable.sql and remove the separate
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,685,  *    altertableDropColumn files
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,686,  *
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,449,"   +  ""GETCURRENTCONNECTION,INDEX,INSTANCEOF,METHOD,NEW,OFF,PROPERTIES,PUBLICATION,RECOMPILE,"""
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,450,"   +  ""REFRESH,RENAME,RUNTIMESTATISTICS,STATEMENT,STATISTICS,TIMING,WAIT"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1383,"          Types.CHAR, Types.CHAR, Types.CLOB, Types.DATE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1385,"          Types.INTEGER, Types.LONGVARBINARY, Types.LONGVARCHAR, Types.LONGVARCHAR,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1388,"          Types.VARCHAR, Types.VARCHAR"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1413,"            // National types not supported, ignore them"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1414,            // DERBY-2258
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1415,"            if (typeName.indexOf(""NATIONAL"") != -1)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1416,                continue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1417,"            if (typeName.indexOf(""NVARCHAR"") != -1)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1418,                continue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1419,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1471,                precision = 32762; // BUG DERBY-2260
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1480,            assertFalse(rs.wasNull());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1528,                searchable = DatabaseMetaData.typePredBasic; // BUG DERBY-2259
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1531,                searchable = DatabaseMetaData.typeSearchable; // BUG DERBY-2259
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1536,                searchable = // DatabaseMetaData.typePredNone;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1537,                    DatabaseMetaData.typePredChar; // BUG DERBY-2259
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1886,"            // National types not supported, ignore them"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1887,            // DERBY-2258
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1888,"            if (typeName.indexOf(""NATIONAL"") != -1)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1889,                continue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1890,"            if (typeName.indexOf(""NVARCHAR"") != -1)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1891,                continue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1892,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1893,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1488,     /* TO DO : currently this asserts fails
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1489,      corrects the condition for assert if any change is required
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1490,      or remove the assert
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1491,     */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1492,            //assertFalse(rs.wasNull());
java/client/org/apache/derby/client/am/PreparedStatement.java,2264,            parameterMetaData_.clientParamtertype_ = (int[]) parameterTypeList.get(i);
java/client/org/apache/derby/client/am/PreparedStatement.java,2265,            parameters_ = (Object[]) batch_.get(i);
java/client/org/apache/derby/client/am/PreparedStatement.java,2266,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,95, *      (fails with NullPointerException with NetworkServer. See DERBY-2112
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,1020,    // try prepared statement batch with just no settable parameters.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,1023,        // TODO: analyze & implement for NetworkServer when DERBY-2112 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,1024,        // test fails with NullPointerException with NetworkServer
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,1025,        // see DERBY-2112
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,1026,        if (!usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,1027,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java,1652,}
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,587,"                    fileName = traceDirectory + ""/"" + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,589,"                    fileName = traceDirectory + ""/"" + traceFile + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,103,"        System.out.println(""type=""+type);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,185,"        ps = prepareStatement(""INSERT INTO T_MAIN(V) VALUES (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,186,"        ps.setObject(1, getRandomValue(r, jdbcType), jdbcType);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,192,"        ps = prepareStatement(""INSERT INTO T_MAIN(V) VALUES (?), (?), (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,193,"        ps.setObject(1, getRandomValue(r, jdbcType), jdbcType);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,194,"        ps.setObject(2, getRandomValue(r, jdbcType), jdbcType);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,195,"        ps.setObject(3, getRandomValue(r, jdbcType), jdbcType);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,251,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,252,     * For character types a String object is returned.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,253,     * For binary types a byte[] is returned.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,256,"    public static Object getRandomValue(Random r, int jdbcType)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,299,"            return randomString(r, r.nextInt(32701));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,302,"            return randomBinary(r, r.nextInt(32701));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,305,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,184,        // Can't directly insert into XML columns from JDBC.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,186,            return; // temp
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,237,   else
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,373,       columnInfo[ix].action == ColumnInfo.MODIFY_COLUMN_DEFAULT_INCREMENT)
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,73,
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,74, /**
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,75,"  Attempt to revalidate the dependent. For prepared statements,"
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,76,  this could go through its dependencies and check that they
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,77,"  are up to date; if not, it would recompile the statement."
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,78,  Any failure during this attempt should throw
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,79,  DependencyStatementException.unableToRevalidate().
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,80,
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,81,  @param lcc  The LanguageConnectionContext
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,82,
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,83,  @exception StandardException thrown if unable to make it valid
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,84,  */
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,85, void makeValid(LanguageConnectionContext lcc)
java/engine/org/apache/derby/iapi/sql/depend/Dependent.java,86,  throws StandardException;
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,646,
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,647, /**
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,648,     * Attempt to revalidate the dependent. Meaningless
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,649,  * for constraints.
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,650,  */
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,651, public void makeValid(LanguageConnectionContext lcc)
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,652, {
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,653, }
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,253,
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,254, /**
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,255,     * Attempt to revalidate the dependent. Meaningless
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,256,  * for defaults.
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,257,  */
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,258, public void makeValid(LanguageConnectionContext lcc)
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,259, {
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,260, }
java/engine/org/apache/derby/iapi/sql/dictionary/DefaultDescriptor.java,261,
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1025, /**
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1026,"     * Attempt to revalidate the dependent. For prepared statements,"
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1027,  * this could go through its dependencies and check that they
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1028,"  * are up to date; if not, it would recompile the statement."
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1029,  * Any failure during this attempt should throw
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1030,  * StandardException.unableToRevalidate().
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1031,  *
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1032,  * @exception StandardException thrown if unable to make it valid
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1033,  */
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1034, public final synchronized void makeValid(LanguageConnectionContext lcc)
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1035,  throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1036, {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1037,  if (valid)
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1038,  {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1039,   return;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1040,  }
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1041,  prepareAndRelease(lcc);
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1042,
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1043,"  updateSYSSTATEMENTS(lcc, RECOMPILE, null);"
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1044,
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1045, }
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1046,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,717, /**
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,718,     * Attempt to revalidate the dependent. Meaningless
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,719,  * for a trigger.
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,720,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,721,  * @param  lcc the language connection context
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,722,  */
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,723, public void makeValid(LanguageConnectionContext lcc)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,724, {
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,725, }
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,726,
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,365, /**
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,366,"  Attempt to revalidate the dependent. For prepared statements,"
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,367,  this could go through its dependencies and check that they
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,368,"  are up to date; if not, it would recompile the statement."
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,369,  Any failure during this attempt should throw
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,370,  StandardException.unableToRevalidate().
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,371,
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,372,  @exception StandardException thrown if unable to make it valid
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,373,  */
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,374, public void makeValid(LanguageConnectionContext lcc)
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,375,  throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,376, {
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,377, }
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,378,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,209,  if (!upToDate())
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,210,      makeValid(lcc);
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,760, /**
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,761,"  Attempt to revalidate the dependent. For prepared statements,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,762,  this could go through its dependencies and check that they
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,763,"  are up to date; if not, it would recompile the statement."
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,764,  Any failure during this attempt should throw
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,765,  StandardException.unableToRevalidate().
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,766,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,767,  @exception StandardException thrown if unable to make it valid
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,768,  */
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,769, public void makeValid(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,770,  throws StandardException
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,771, {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,772,  PreparedStatement ps;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,773,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,774,  // REMIND: will want to go through dependency list
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,775,"  // and check if we can make it valid just on faith,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,776,  // i.e. when it was marked 'possibly invalid' due
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,777,  // to a rollback or some similar action.
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,778,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,779,"  // this ends up calling makeValid(qt, ac) below:"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,780,  ps = statement.prepare(lcc);
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,781,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,782,"   SanityManager.ASSERT(ps == this, ""ps != this"");"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,783, }
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,784,
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,172,  if ((preStmt!=null) && (! preStmt.upToDate())) {
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,173,   preStmt.makeValid(getLanguageConnectionContext()); // need to have the query tree
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,174,"   if (! preStmt.isValid()) // can't make it valid, say not found"
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,175,    preStmt = null;
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,41," extends Dependent, Provider"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,723,   if (!alreadyInvalid)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,724,   {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,725,"    dm.invalidateFor(this, action, lcc);"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,726,   }
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,727,
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,168,  // and create a dependency on it
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,171,  if (preStmt!=null) {
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,172,   preStmt.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,173,  }
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,189,  getCompilerContext().createDependency(preStmt);
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,190,
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,326,"   throw StandardException.newException(SQLState.LANG_CURSOR_CLOSED, cursorName);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CurrentOfTest.java,177,"   assertStatementError(""XCL07"", delete);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CurrentOfTest.java,184,"   assertStatementError(""XCL07"", delete);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CurrentOfTest.java,285,"  assertStatementError(""XCL07"", update);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,527,"            String sqlState = usingEmbedded() ? ""24000"" : ""XCL07"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,1861,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,1862,"            assertFalse(""FAIL - row not found"", rs.next());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,1868,"            String sqlState = usingEmbedded() ? ""24000"" : ""XCL07"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,1945,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,1946,"            assertFalse(""FAIL - row not found"", rs.next());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdatableResultSetTest.java,1951,"            String sqlState = usingEmbedded() ? ""24000"" : ""XCL07"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1666,            case Types.DECIMAL:
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1667,            case Types.NUMERIC:
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1668,                maxScale = 32767; // 31; BUG DERBY-2262
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1669,                break;
java/engine/org/apache/derby/impl/sql/depend/BasicDependency.java,81, protected Provider provider;
java/engine/org/apache/derby/impl/sql/depend/BasicDependency.java,82, protected Dependent dependent;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,24,import org.apache.derby.catalog.Dependable;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,25,import org.apache.derby.catalog.DependableFinder;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,28,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,29,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,30,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,31,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,33,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,36,import org.apache.derby.impl.sql.compile.CreateViewNode;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,37,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,39,import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,41,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,42,import org.apache.derby.iapi.sql.depend.DependencyManager;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,48,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,49,import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,54,import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,55,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,56,import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,58,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,59,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,60,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,61,import org.apache.derby.iapi.services.io.FormatableBitSet;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,62,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,63,import org.apache.derby.iapi.reference.MessageId;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,64,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,65,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,66,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,67,import java.util.Hashtable;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,68,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,69,import java.util.ListIterator;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,70,import java.util.List;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,1372,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,1373, private DataDictionary dataDictionary = null;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,1374, protected Hashtable dependents = new Hashtable();
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,1375, protected Hashtable providers = new Hashtable();
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,171,  }
java/engine/org/apache/derby/iapi/types/DataType.java,979,   * NOTE: We've ensured that the IN list and the left all have
java/engine/org/apache/derby/iapi/types/DataType.java,980,   * the same precedence at compile time.  If we don't enforce
java/engine/org/apache/derby/iapi/types/DataType.java,981,   * the same precendence then
java/engine/org/apache/derby/iapi/types/DataType.java,982,   * we could get the wrong result when doing a binary search.
java/engine/org/apache/derby/iapi/types/DataType.java,990,"    retval = equals(left, inList[mid]);"
java/engine/org/apache/derby/iapi/types/DataType.java,995,"    BooleanDataValue goLeft = greaterThan(inList[mid], left);"
java/engine/org/apache/derby/iapi/types/DataType.java,1015,"   retval = equals(left, inList[index]);"
java/engine/org/apache/derby/iapi/types/DataType.java,1024,"    BooleanDataValue stop = greaterThan(inList[index], left);"
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,39,
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,225,"     * are not an exact match, we use the left operand's type"
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,226,"     * as the ""judge"", assuming that they are compatible, as"
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,227,     * also the case with DB2.
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,229,    TypeId judgeTypeId = leftOperand.getTypeServices().getTypeId();
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,230,"    DataValueDescriptor judgeODV = null;  //no judge, no argument"
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,234,     judgeODV = (DataValueDescriptor) judgeTypeId.getNull();
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,237,    // Sort the list in ascending order
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,247,     * are the same value.
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,254,    if (((judgeODV == null) && (minODV.compare(maxODV) == 0)) ||
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,255,     ((judgeODV != null)
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,256,"      && judgeODV.equals(minODV, maxODV).equals(true)))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,89,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,110,"        s.executeUpdate(""CREATE PROCEDURE TRIGGER_LOG_INFO("" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,111,"                ""O VARCHAR(255)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,112,"                ""NO SQL PARAMETER STYLE JAVA LANGUAGE JAVA "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,113,"                ""EXTERNAL NAME "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,114,"                ""'"" + getClass().getName() + "".logTriggerInfo'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,130,            if (r.nextInt(2) == 0)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,132,            else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,170,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,171,        TRIGGER_INFO.set(new ArrayList());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,172,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,173,        // Check ordering with a single row.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,174,"        s.execute(""INSERT INTO T VALUES 1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,175,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,176,"        int fireCount = assertFiringOrder(""INSERT"", 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,177,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,178,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,179,"        s.execute(""UPDATE T SET ID = 2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,181,"        fireCount += assertFiringOrder(""UPDATE"", 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,182,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,184,"        s.execute(""DELETE FROM T"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,185,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,186,"        fireCount += assertFiringOrder(""DELETE"", 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,187,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,188,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,189,"        assertEquals(""All triggers fired?"", triggerCount, fireCount);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,191,        // and now with multiple rows
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,192,"        s.execute(""INSERT INTO T VALUES 1,2,3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,193,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,194,"        fireCount = assertFiringOrder(""INSERT"", 3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,195,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,196,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,197,"        s.execute(""UPDATE T SET ID = 2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,198,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,199,"        fireCount += assertFiringOrder(""UPDATE"", 3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,200,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,201,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,202,"        s.execute(""DELETE FROM T"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,203,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,204,"        fireCount += assertFiringOrder(""DELETE"", 3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,205,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,206,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,207,        // cannot assume row triggers were created so can only
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,208,        // say that at least all the triggers were fired.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,209,"        assertTrue(""Sufficient triggers fired?"", fireCount >= triggerCount);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,210,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,211,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,212,        // and then with no rows
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,213,"        assertTableRowCount(""T"", 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,214,"        s.execute(""INSERT INTO T SELECT ID FROM T"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,215,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,216,"        fireCount = assertFiringOrder(""INSERT"", 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,217,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,218,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,219,"        s.execute(""UPDATE T SET ID = 2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,220,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,221,"        fireCount += assertFiringOrder(""UPDATE"", 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,222,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,223,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,224,"        s.execute(""DELETE FROM T"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,225,        commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,226,"        fireCount += assertFiringOrder(""DELETE"", 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,227,        ((List) TRIGGER_INFO.get()).clear();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,228,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,229,"        // can't assert anthing about fireCount, could be all row triggers."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,230,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,232,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,302,
java/engine/org/apache/derby/impl/load/ImportReadData.java,833,    if (totalCharsSoFar != -1) {
java/engine/org/apache/derby/impl/load/ImportReadData.java,843,"        returnStringArray[upperLimit] = new String(currentToken,"
java/engine/org/apache/derby/impl/load/Import.java,43, private String inputFileName;
java/engine/org/apache/derby/impl/load/Import.java,53,                  boolean lobsInExtFile) throws SQLException
java/engine/org/apache/derby/impl/load/Import.java,162," private static void performImport(Connection connection,"
java/engine/org/apache/derby/impl/load/Import.java,163,"                                      String schemaName,"
java/engine/org/apache/derby/impl/load/Import.java,164,"                                      String insertColumnList,"
java/engine/org/apache/derby/impl/load/Import.java,165,"                                      String columnIndexes,"
java/engine/org/apache/derby/impl/load/Import.java,166,"                                      String tableName,"
java/engine/org/apache/derby/impl/load/Import.java,167,"                                      String inputFileName,"
java/engine/org/apache/derby/impl/load/Import.java,168,"                                      String  columnDelimiter,"
java/engine/org/apache/derby/impl/load/Import.java,169,"                                      String characterDelimiter,"
java/engine/org/apache/derby/impl/load/Import.java,170,"                                      String codeset,"
java/engine/org/apache/derby/impl/load/Import.java,171,"                                      short replace,"
java/engine/org/apache/derby/impl/load/Import.java,172,                                      boolean lobsInExtFile)
java/engine/org/apache/derby/impl/load/Import.java,174, {
java/engine/org/apache/derby/impl/load/Import.java,175,
java/engine/org/apache/derby/impl/load/Import.java,176,  if (connection == null)
java/engine/org/apache/derby/impl/load/Import.java,177,   throw LoadError.connectionNull();
java/engine/org/apache/derby/impl/load/Import.java,178,
java/engine/org/apache/derby/impl/load/Import.java,179,
java/engine/org/apache/derby/impl/load/Import.java,180,
java/engine/org/apache/derby/impl/load/Import.java,181,  if (tableName == null)
java/engine/org/apache/derby/impl/load/Import.java,182,   throw LoadError.entityNameMissing();
java/engine/org/apache/derby/impl/load/Import.java,183,
java/engine/org/apache/derby/impl/load/Import.java,184,
java/engine/org/apache/derby/impl/load/Import.java,185,"  ColumnInfo columnInfo = new ColumnInfo(connection , schemaName ,"
java/engine/org/apache/derby/impl/load/Import.java,186,"              tableName, insertColumnList,"
java/engine/org/apache/derby/impl/load/Import.java,187,"              columnIndexes, COLUMNNAMEPREFIX);"
java/engine/org/apache/derby/impl/load/Import.java,188,
java/engine/org/apache/derby/impl/load/Import.java,189,  /* special handling of single quote delimiters
java/engine/org/apache/derby/impl/load/Import.java,190,   * Single quote should be writeen with an extra quote otherwise sql will
java/engine/org/apache/derby/impl/load/Import.java,191,   * throw syntac error.
java/engine/org/apache/derby/impl/load/Import.java,192,   * i.e  to recognize a quote  it has to be appended with extra  quote ('')
java/engine/org/apache/derby/impl/load/Import.java,193,   */
java/engine/org/apache/derby/impl/load/Import.java,194,"  if(characterDelimiter!=null && characterDelimiter.equals(""'""))"
java/engine/org/apache/derby/impl/load/Import.java,195,"   characterDelimiter = ""''"";"
java/engine/org/apache/derby/impl/load/Import.java,196,"  if(columnDelimiter !=null && columnDelimiter.equals(""'""))"
java/engine/org/apache/derby/impl/load/Import.java,197,"   columnDelimiter = ""''"";"
java/engine/org/apache/derby/impl/load/Import.java,198,
java/engine/org/apache/derby/impl/load/Import.java,199,
java/engine/org/apache/derby/impl/load/Import.java,200,"  StringBuffer sb = new StringBuffer(""new "");"
java/engine/org/apache/derby/impl/load/Import.java,201,"  sb.append(""org.apache.derby.impl.load.Import"");"
java/engine/org/apache/derby/impl/load/Import.java,202,"  sb.append(""("") ;"
java/engine/org/apache/derby/impl/load/Import.java,203,"  sb.append( (inputFileName !=null ? ""'"" + inputFileName + ""'"" : null));"
java/engine/org/apache/derby/impl/load/Import.java,204,"  sb.append("","") ;"
java/engine/org/apache/derby/impl/load/Import.java,205,"  sb.append( (columnDelimiter !=null ? ""'"" + columnDelimiter + ""'"" : null));"
java/engine/org/apache/derby/impl/load/Import.java,206,"  sb.append("","") ;"
java/engine/org/apache/derby/impl/load/Import.java,207,"  sb.append( (characterDelimiter !=null ? ""'"" + characterDelimiter + ""'"" : null));"
java/engine/org/apache/derby/impl/load/Import.java,208,"  sb.append("","") ;"
java/engine/org/apache/derby/impl/load/Import.java,209,"  sb.append( (codeset !=null ? ""'"" + codeset + ""'"" : null));"
java/engine/org/apache/derby/impl/load/Import.java,210,"  sb.append("", "");"
java/engine/org/apache/derby/impl/load/Import.java,211,        sb.append( columnInfo.getExpectedNumberOfColumnsInFile());
java/engine/org/apache/derby/impl/load/Import.java,212,"        sb.append("", "");"
java/engine/org/apache/derby/impl/load/Import.java,213,"        sb.append( ""'"" + columnInfo.getExpectedVtiColumnTypesAsString() + ""'"");"
java/engine/org/apache/derby/impl/load/Import.java,214,"        sb.append("", "");"
java/engine/org/apache/derby/impl/load/Import.java,215,        sb.append(lobsInExtFile);
java/engine/org/apache/derby/impl/load/Import.java,216,"  sb.append("" )"") ;"
java/engine/org/apache/derby/impl/load/Import.java,217,
java/engine/org/apache/derby/impl/load/Import.java,218,  String importvti = sb.toString();
java/engine/org/apache/derby/impl/load/Import.java,219,
java/engine/org/apache/derby/impl/load/Import.java,220,  // delimit the table and schema names with quotes.
java/engine/org/apache/derby/impl/load/Import.java,221,  // because they might have been  created as quoted
java/engine/org/apache/derby/impl/load/Import.java,222,"  // identifiers(for example when reserved words are used, names are quoted)"
java/engine/org/apache/derby/impl/load/Import.java,223,
java/engine/org/apache/derby/impl/load/Import.java,224,  // Import procedures are to be called with case-senisitive names.
java/engine/org/apache/derby/impl/load/Import.java,225,"  // Incase of delimited table names, they need to be passed as defined"
java/engine/org/apache/derby/impl/load/Import.java,226,"  // and when they are not delimited, they need to be passed in upper"
java/engine/org/apache/derby/impl/load/Import.java,227,"  // case, because all undelimited names are stored in the upper case"
java/engine/org/apache/derby/impl/load/Import.java,228,  // in the database.
java/engine/org/apache/derby/impl/load/Import.java,229,
java/engine/org/apache/derby/impl/load/Import.java,230,"  String entityName = (schemaName == null ? ""\""""+ tableName + ""\"""" :"
java/engine/org/apache/derby/impl/load/Import.java,231,"        ""\"""" + schemaName + ""\"""" + ""."" + ""\"""" + tableName + ""\"""");"
java/engine/org/apache/derby/impl/load/Import.java,232,
java/engine/org/apache/derby/impl/load/Import.java,233,  String insertModeValue;
java/engine/org/apache/derby/impl/load/Import.java,234,  if(replace > 0)
java/engine/org/apache/derby/impl/load/Import.java,235,"   insertModeValue = ""replace"";"
java/engine/org/apache/derby/impl/load/Import.java,236,  else
java/engine/org/apache/derby/impl/load/Import.java,237,"   insertModeValue = ""bulkInsert"";"
java/engine/org/apache/derby/impl/load/Import.java,238,
java/engine/org/apache/derby/impl/load/Import.java,239,  String cNamesWithCasts = columnInfo.getColumnNamesWithCasts();
java/engine/org/apache/derby/impl/load/Import.java,240,  String insertColumnNames = columnInfo.getInsertColumnNames();
java/engine/org/apache/derby/impl/load/Import.java,241,  if(insertColumnNames !=null)
java/engine/org/apache/derby/impl/load/Import.java,242,"   insertColumnNames = ""("" + insertColumnNames + "") "" ;"
java/engine/org/apache/derby/impl/load/Import.java,243,  else
java/engine/org/apache/derby/impl/load/Import.java,244,"   insertColumnNames = """";"
java/engine/org/apache/derby/impl/load/Import.java,245,"  String insertSql = ""INSERT INTO "" + entityName +  insertColumnNames +"
java/engine/org/apache/derby/impl/load/Import.java,246,"   "" --DERBY-PROPERTIES insertMode="" + insertModeValue + ""\n"" +"
java/engine/org/apache/derby/impl/load/Import.java,247,"   "" SELECT "" + cNamesWithCasts + "" from "" +"
java/engine/org/apache/derby/impl/load/Import.java,248,"   importvti + "" AS importvti"" ;"
java/engine/org/apache/derby/impl/load/Import.java,249,
java/engine/org/apache/derby/impl/load/Import.java,250,  //prepare the import statement to hit any errors before locking the table
java/engine/org/apache/derby/impl/load/Import.java,251,  PreparedStatement ips = connection.prepareStatement(insertSql);
java/engine/org/apache/derby/impl/load/Import.java,252,
java/engine/org/apache/derby/impl/load/Import.java,253,"  //lock the table before perfoming import, because there may"
java/engine/org/apache/derby/impl/load/Import.java,254,  //huge number of lockes aquired that might have affect on performance
java/engine/org/apache/derby/impl/load/Import.java,255,  //and some possible dead lock scenarios.
java/engine/org/apache/derby/impl/load/Import.java,256,  Statement statement = connection.createStatement();
java/engine/org/apache/derby/impl/load/Import.java,257,"  String lockSql = ""LOCK TABLE "" + entityName + "" IN EXCLUSIVE MODE"";"
java/engine/org/apache/derby/impl/load/Import.java,258,  statement.executeUpdate(lockSql);
java/engine/org/apache/derby/impl/load/Import.java,259,
java/engine/org/apache/derby/impl/load/Import.java,260,  //execute the import operaton.
java/engine/org/apache/derby/impl/load/Import.java,261,  ips.executeUpdate();
java/engine/org/apache/derby/impl/load/Import.java,262,  statement.close();
java/engine/org/apache/derby/impl/load/Import.java,263,  ips.close();
java/engine/org/apache/derby/impl/load/Import.java,264,
java/engine/org/apache/derby/impl/load/Import.java,265, }
java/engine/org/apache/derby/impl/load/Import.java,266,
java/engine/org/apache/derby/impl/load/Import.java,274,}
java/engine/org/apache/derby/impl/load/Import.java,275,
java/engine/org/apache/derby/impl/load/Import.java,276,
java/engine/org/apache/derby/impl/load/Import.java,277,
java/engine/org/apache/derby/impl/load/Import.java,278,
java/engine/org/apache/derby/impl/load/Import.java,279,
java/engine/org/apache/derby/impl/load/Import.java,280,
java/engine/org/apache/derby/impl/load/Import.java,281,
java/engine/org/apache/derby/impl/load/Import.java,282,
java/engine/org/apache/derby/impl/load/Import.java,283,
java/engine/org/apache/derby/impl/load/Import.java,284,
java/engine/org/apache/derby/impl/load/Import.java,285,
java/engine/org/apache/derby/impl/load/Import.java,286,
java/engine/org/apache/derby/impl/load/Import.java,287,
java/engine/org/apache/derby/impl/load/Import.java,288,
java/engine/org/apache/derby/impl/load/Import.java,289,
java/engine/org/apache/derby/impl/load/Import.java,290,
java/engine/org/apache/derby/impl/load/Import.java,291,
java/engine/org/apache/derby/impl/load/Import.java,292,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,261,"             assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,271,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,281,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,229,"             assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,241,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,253,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,435,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0P"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java,170,"   assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"" : ""XIE0E"", e);"
java/client/org/apache/derby/client/am/Connection.java,188,"         databaseName_ = databaseName_ + "";"" + connAtrrs;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,680,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/JDBCHarnessJavaTest.java,52,"            // ""dataSourceReference"", TODO: investigate failure/convert"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,104,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,106,            suite.addTest(DataSourceReferenceTest.suite());
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,680,                //if (shutdownDatabase != null )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,106,     // Test hits nullPointerException with jdk16; commenting out until resolved
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,107,            //suite.addTest(DataSourceReferenceTest.suite());
java/engine/org/apache/derby/iapi/types/SQLBlob.java,170,    /**
java/engine/org/apache/derby/iapi/types/SQLBlob.java,171,     * Gets a trace representation of the BLOB for debugging.
java/engine/org/apache/derby/iapi/types/SQLBlob.java,172,     *
java/engine/org/apache/derby/iapi/types/SQLBlob.java,173,     * @return a trace representation of the BLOB.
java/engine/org/apache/derby/iapi/types/SQLBlob.java,174,     */
java/engine/org/apache/derby/iapi/types/SQLBlob.java,175,    public final String getTraceString() throws StandardException {
java/engine/org/apache/derby/iapi/types/SQLBlob.java,176,        // Check if the value is SQL NULL.
java/engine/org/apache/derby/iapi/types/SQLBlob.java,177,        if (isNull()) {
java/engine/org/apache/derby/iapi/types/SQLBlob.java,178,"            return ""NULL"";"
java/engine/org/apache/derby/iapi/types/SQLBlob.java,179,        }
java/engine/org/apache/derby/iapi/types/SQLBlob.java,180,
java/engine/org/apache/derby/iapi/types/SQLBlob.java,181,        // Check if we have a stream.
java/engine/org/apache/derby/iapi/types/SQLBlob.java,182,        if (getStream() != null) {
java/engine/org/apache/derby/iapi/types/SQLBlob.java,183,"            return (""BLOB("" + getStream().toString() + "")"");"
java/engine/org/apache/derby/iapi/types/SQLBlob.java,184,        }
java/engine/org/apache/derby/iapi/types/SQLBlob.java,185,
java/engine/org/apache/derby/iapi/types/SQLBlob.java,186,"        return (""BLOB("" + getLength() + "")"");"
java/engine/org/apache/derby/iapi/types/SQLBlob.java,187,    }
java/engine/org/apache/derby/iapi/types/SQLBlob.java,188,
java/engine/org/apache/derby/iapi/types/SQLClob.java,232,"            return (""CLOB("" + getStream().toString() + "")"");"
java/engine/org/apache/derby/iapi/types/SQLClob.java,235,"        return (""CLOB("" + getLength() + "")"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,38,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,173,"        assertShutdownOK(dbName, ""APP"", (""APP"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,535,"            assertShutdownOK(dbName, ""APP"", (""APP"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,585,"        assertShutdownOK(dbName, ""APP"", ""APP"" + PASSWORD_SUFFIX);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,619,"        assertShutdownOK(dbName, ""APP"", ""APP"" + PASSWORD_SUFFIX);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,748,    protected void assertShutdownOK(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,749,"        String dbName, String user, String password)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,750,    throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,751,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,752,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,753,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,754,            DataSource ds = JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,755,"            JDBCDataSource.setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,756,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,757,"                ds.getConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,758,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,759,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,760,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,761,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,762,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,764,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,765,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,766,            ClientDataSource ds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,767,                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,768,"            ds.setConnectionAttributes(""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,769,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,770,"                ds.getConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,771,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,772,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,773,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,774,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,775,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,786,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,787,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,788,            DataSource ds = JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,789,"            JDBCDataSource.setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,790,"            JDBCDataSource.setBeanProperty(ds, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,791,"            JDBCDataSource.setBeanProperty(ds, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,792,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,793,                ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,794,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,795,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,796,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,797,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,798,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,799,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,800,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,801,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,802,            ClientDataSource ds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,803,                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,804,            ds.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,805,"                    ""shutdown=true;user="" + user + "";password=""+password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,806,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,807,                ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,808,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,809,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,810,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,811,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,812,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,820,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,821,        // with DerbyNetClient there is no Datasource setShutdownDatabase method
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,822,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,823,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,824,            DataSource ds = JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,825,"            JDBCDataSource.setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,826,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,827,"                ds.getConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,828,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,829,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,830,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,831,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,832,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,833,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,834,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,835,            ClientDataSource ds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,836,                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,837,"            ds.setConnectionAttributes(""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,838,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,839,"                ds.getConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,840,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,841,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,842,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,843,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,851,        // with DerbyNetClient there is no Datasource setShutdownDatabase
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,852,        // method so can't use the same setBeanProperty as with embedded
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,853,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,854,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,855,            DataSource ds = JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,856,"            JDBCDataSource.setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,857,"            JDBCDataSource.setBeanProperty(ds, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,858,"            JDBCDataSource.setBeanProperty(ds, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,859,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,860,                ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,861,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,862,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,863,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,864,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,865,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,866,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,867,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,868,            ClientDataSource ds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,869,                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,870,            ds.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,871,"                ""shutdown=true;user="" + user + "";password=""+password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,872,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,873,                ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,874,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,875,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,876,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,877,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,892,            DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,894,"            JDBCDataSource.setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,895,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,896,"                ds.getConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,897,"                fail(""expected system shutdown resulting in XJ015 error"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,898,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,899,"                // expect XJ015, system shutdown, on successful shutdown"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,900,"                assertSQLState(""XJ015"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,901,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,903,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,905,"            // ds.setShutdown is not currently suppported by client, so we need"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,906,            // to use ds.setConnectionAttributes.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,912,            ClientDataSource ds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,913,                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,914,"            ds.setConnectionAttributes(""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,915,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,916,"                ds.getConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,917,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,918,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,919,                // expect XJ015 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,920,"                assertSQLState(""XJ015"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,921,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,930,            DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,932,"            JDBCDataSource.setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,933,"            JDBCDataSource.setBeanProperty(ds, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,934,"            JDBCDataSource.setBeanProperty(ds, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,935,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,936,                ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,937,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,938,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,939,"                assertSQLState(expectedError, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,940,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,942,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,944,            ClientDataSource ds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,945,                (ClientDataSource)JDBCDataSource.getDataSource(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,946,"            // note: with network server, you cannot set the databaseName"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,951,"            // also, we need to use setConnectionAttributes."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,952,            ds.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,953,"                ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,954,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,955,                ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,956,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,957,"                ds.getConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,958,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,959,"                assertSQLState(expectedError, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,960,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,963,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,61,"        TestSuite suite = new TestSuite(""DSCreateShutdownTest"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,81,        // only 4 dbs (in addition to defaultdb) should actually get
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,82,"        // created, but just in case..."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,169,        // check that shutting down using Attributes works
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,176,        dbName = composeDatabaseName(ADDITIONAL_DBS[0]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,183,        dbName = composeDatabaseName(ADDITIONAL_DBS[1]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,193,"            composeDatabaseName(ADDITIONAL_DBS[2]),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,196,"            composeDatabaseName(ADDITIONAL_DBS[3]),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,201,        assertConflictedSettersOK(composeDatabaseName(ADDITIONAL_DBS[4]));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,284,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,315,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,382,"        assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[5]),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,385,"        assertConSetOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[6]),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,387,"        assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[7]),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,390,"        assertSetConOK(DBNotFoundState, composeDatabaseName(ADDITIONAL_DBS[8]),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,392,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,400,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,419,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DSCreateShutdownDBTest.java,432,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,26,import java.util.Properties;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,33,import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,34,import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,158,    protected void assertShutdownOK(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,161,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,162,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,163,            pds = J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,164,"            JDBCDataSource.setBeanProperty(pds, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,165,"            JDBCDataSource.setBeanProperty(pds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,166,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,167,"                pds.getPooledConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,168,"                fail (""expected a failed shutdown connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,169,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,170,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,171,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,172,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,174,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,175,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,176,            ClientConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,177,                (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,178,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,179,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,180,"            pds.setConnectionAttributes(""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,181,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,182,"                pds.getPooledConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,183,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,184,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,185,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,186,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,187,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,194,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,195,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,196,            pds = J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,197,"            JDBCDataSource.setBeanProperty(pds, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,198,"            JDBCDataSource.setBeanProperty(pds, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,199,"            JDBCDataSource.setBeanProperty(pds, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,200,"            JDBCDataSource.setBeanProperty(pds, ""shutdownDatabase"",""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,201,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,202,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,203,"                fail (""expected a failed shutdown connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,204,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,205,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,206,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,207,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,208,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,209,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,210,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,211,            ClientConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,212,                (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,213,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,214,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,215,            pds.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,216,"                ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,217,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,218,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,219,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,220,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,221,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,222,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,223,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,231,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,232,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,233,            pds = J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,234,"            JDBCDataSource.setBeanProperty(pds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,235,"            JDBCDataSource.setBeanProperty(pds, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,236,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,237,"                pds.getPooledConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,238,"                fail(""expected failed shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,239,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,240,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,241,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,242,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,243,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,244,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,245,            ClientConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,246,                (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,247,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,248,"            pds.setConnectionAttributes(""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,249,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,250,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,251,"                pds.getPooledConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,252,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,253,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,254,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,255,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,263,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,264,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,265,            pds = J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,266,"            JDBCDataSource.setBeanProperty(pds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,267,"            JDBCDataSource.setBeanProperty(pds, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,268,"            JDBCDataSource.setBeanProperty(pds, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,269,"            JDBCDataSource.setBeanProperty(pds, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,270,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,271,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,272,"                fail(""expected failed shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,273,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,274,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,275,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,276,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,277,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,278,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,279,            ClientConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,280,                (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,281,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,282,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,283,            pds.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,284,"                    ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,285,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,286,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,287,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,288,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,289,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,290,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,297,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,298,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,299,            pds = J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,300,"            JDBCDataSource.clearStringBeanProperty(pds, ""databaseName"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,301,"            JDBCDataSource.setBeanProperty(pds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,302,"            JDBCDataSource.setBeanProperty(pds, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,303,"            JDBCDataSource.setBeanProperty(pds, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,304,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,305,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,306,"                fail(""expected system shutdown resulting in XJ015 error"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,307,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,308,"                // expect XJ015, system shutdown, on successful shutdown"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,309,"                assertSQLState(""XJ015"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,310,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,311,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,312,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,313,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,314,            ClientConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,315,                (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,316,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,317,            // current client/server code interprets shutdown with an
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,318,            // empty databaseName string as a system shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,319,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,320,"            // Client does not support *ds*.setShutdown(), use set Conn Attrs"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,321,            pds.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,322,"                    ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,323,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,324,"                pds.getPooledConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,325,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,326,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,327,                // expect XJ015 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,328,"                assertSQLState(""XJ015"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,329,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,336,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,337,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,338,            pds = J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,339,"            JDBCDataSource.clearStringBeanProperty(pds, ""databaseName"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,340,"            JDBCDataSource.setBeanProperty(pds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,341,"            JDBCDataSource.setBeanProperty(pds, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,342,"            JDBCDataSource.setBeanProperty(pds, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,343,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,344,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,345,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,346,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,347,"                assertSQLState(expectedError, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,348,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,349,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,350,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,351,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,352,            ClientConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,353,                (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,354,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,355,            // current client/server code interprets shutdown with an
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,356,            // empty databaseName string as a system shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,357,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,358,"            // Client does not support *ds*.setShutdown(), use set Conn Attrs"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,359,            pds.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,360,"                    ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,361,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,362,"                pds.getPooledConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,363,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,364,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,365,"                assertSQLState(expectedError, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,366,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,371,        // can't rely on junit framework automatic methods for they'll
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,372,        // default the user / password which need to remain empty
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,374,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,375,            ClientConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,376,                new ClientConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,377,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,378,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,379,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,380,"                fail(""expected connection to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,381,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,382,"                assertSQLState(""08004"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,383,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,384,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,385,        else if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,386,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,387,            EmbeddedConnectionPoolDataSource pds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,388,                new EmbeddedConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,389,            pds.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,390,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,391,                pds.getPooledConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,392,"                fail(""expected connection to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,393,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,394,"                assertSQLState(""08004"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolDSAuthenticationTest.java,395,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,26,import java.util.Properties;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,32,import org.apache.derby.jdbc.ClientXADataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,33,import org.apache.derby.jdbc.EmbeddedXADataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,154,    protected void assertShutdownOK(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,155,"        String dbName, String user, String password)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,156,    throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,157,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,158,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,159,            xads = J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,160,"            JDBCDataSource.setBeanProperty(xads, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,161,            JDBCDataSource.setBeanProperty(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,162,"                xads, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,163,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,164,"                xads.getXAConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,165,"                fail (""expected a failed shutdown connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,166,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,167,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,168,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,169,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,171,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,172,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,173,            ClientXADataSource xads =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,174,                (ClientXADataSource)J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,175,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,176,"            xads.setConnectionAttributes(""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,177,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,178,"                xads.getXAConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,179,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,180,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,181,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,182,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,183,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,190,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,191,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,192,            xads = J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,193,"            JDBCDataSource.setBeanProperty(xads, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,194,            JDBCDataSource.setBeanProperty(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,196,"            JDBCDataSource.setBeanProperty(xads, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,197,"            JDBCDataSource.setBeanProperty(xads, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,198,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,199,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,200,"                fail (""expected a failed shutdown connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,201,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,202,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,203,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,204,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,205,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,206,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,207,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,208,            ClientXADataSource xads =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,209,                (ClientXADataSource)J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,210,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,211,            xads.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,212,"                ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,213,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,214,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,215,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,216,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,217,                // expect 08006 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,218,"                assertSQLState(""08006"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,219,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,227,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,228,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,229,            xads = J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,230,"            JDBCDataSource.setBeanProperty(xads, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,231,"            JDBCDataSource.setBeanProperty(xads, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,232,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,233,"                xads.getXAConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,234,"                fail(""expected failed shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,235,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,236,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,237,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,238,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,239,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,240,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,241,            ClientXADataSource xads =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,242,                (ClientXADataSource)J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,243,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,244,"            xads.setConnectionAttributes(""shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,245,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,246,"                xads.getXAConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,247,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,248,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,249,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,250,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,258,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,259,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,260,            xads = J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,261,"            JDBCDataSource.setBeanProperty(xads, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,262,"            JDBCDataSource.setBeanProperty(xads, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,263,"            JDBCDataSource.setBeanProperty(xads, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,264,"            JDBCDataSource.setBeanProperty(xads, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,265,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,266,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,267,"                fail(""expected failed shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,268,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,269,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,270,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,271,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,272,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,273,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,274,            ClientXADataSource xads =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,275,                (ClientXADataSource)J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,276,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,277,            xads.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,278,"                ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,279,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,280,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,281,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,282,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,283,"                assertSQLState(expectedSqlState, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,284,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,291,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,292,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,293,            xads = J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,294,            JDBCDataSource.setBeanProperty(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,296,"            JDBCDataSource.setBeanProperty(xads, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,297,"            JDBCDataSource.setBeanProperty(xads, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,298,"            JDBCDataSource.setBeanProperty(xads, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,299,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,300,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,301,"                fail(""expected system shutdown resulting in XJ015 error"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,302,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,303,"                // expect XJ015, system shutdown, on successful shutdown"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,304,"                assertSQLState(""XJ015"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,305,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,306,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,307,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,308,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,309,            ClientXADataSource xads =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,310,                (ClientXADataSource)J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,311,            // current client/server code interprets shutdown with an
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,312,            // empty databaseName string as a system shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,313,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,314,"            // Client does not support *ds*.setShutdown(), use set Conn Attrs"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,315,            xads.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,316,"                ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,317,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,318,"                xads.getXAConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,319,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,320,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,321,                // expect XJ015 on successful shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,322,"                assertSQLState(""XJ015"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,323,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,330,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,331,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,332,            xads = J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,333,            JDBCDataSource.setBeanProperty(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,335,"            JDBCDataSource.setBeanProperty(xads, ""databaseName"", dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,336,"            JDBCDataSource.setBeanProperty(xads, ""user"", user);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,337,"            JDBCDataSource.setBeanProperty(xads, ""password"", password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,338,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,339,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,340,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,341,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,342,"                assertSQLState(expectedError, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,343,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,344,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,345,        else if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,346,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,347,            ClientXADataSource xads =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,348,                (ClientXADataSource)J2EEDataSource.getXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,349,            // current client/server code interprets shutdown with an
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,350,            // empty databaseName string as a system shutdown
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,351,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,352,"            // Client does not support *ds*.setShutdown(), use set Conn Attrs"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,353,            xads.setConnectionAttributes(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,354,"                ""shutdown=true;user="" + user + "";password="" + password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,355,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,356,"                xads.getXAConnection(user, password);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,357,"                fail(""expected shutdown to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,358,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,359,"                assertSQLState(expectedError, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,360,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,365,        // can't rely on junit framework automatic methods for they'll
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,366,        // default the user / password which need to remain empty
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,368,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,369,            ClientXADataSource xads = new ClientXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,370,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,371,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,372,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,373,"                fail(""expected connection to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,374,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,375,"                assertSQLState(""08004"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,376,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,377,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,378,        else if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,379,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,380,            EmbeddedXADataSource xads = new EmbeddedXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,381,            xads.setDatabaseName(dbName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,382,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,383,                xads.getXAConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,384,"                fail(""expected connection to fail"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,385,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,386,"                assertSQLState(""08004"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XADSAuthenticationTest.java,387,            }
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,224,        // commenting out until such time as setShutdownDatabase is
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,225,        // supported by client
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,226,"        //setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,227,"        setBeanProperty(ds, ""connectionAttributes"", ""shutdown=true"");"
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,234,"            // here too, commenting out until setShutdownDatabase is"
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,235,            // supported by client
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,236,"            //clearStringBeanProperty(ds, ""shutdownDatabase"");"
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,237,"            clearStringBeanProperty(ds, ""connectionAttributes"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1144,  if (isClosed())
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1145,      return;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1146,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1147,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1148,  if (rootConnection == this)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1149,  {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1150,   /* Throw error to match DB2/JDBC if a tran is pending in non-autocommit mode */
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1151,   if (!autoCommit && !transactionIsIdle()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1152,    throw newSQLException(SQLState.LANG_INVALID_TRANSACTION_STATE);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1153,   }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1154,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1155,   close(exceptionClose);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1157,  else
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1158,   setInactive(); // nested connection
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1177,     setupContextStack();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1178,     try {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1179,      tr.rollback();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1180,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1181,      // Let go of lcc reference so it can be GC'ed after
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1182,"      // cleanupOnError, the tr will stay around until the"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1183,"      // rootConnection itself is GC'ed, which is dependent"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1184,      // on how long the client program wants to hold on to
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1185,      // the Connection object.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1188,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1189,     } catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1190,      throw handleException(t);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1191,     } finally {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1192,      restoreContextStack();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1214,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1215,   setInactive();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1216,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1611,  if (rootConnection == this)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1612,  {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1614,   if (!isClosed())
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1615,       close(exceptionClose);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,202,        return TestConfiguration.defaultSuite(DatabaseMetaDataTest.class);
java/client/org/apache/derby/client/am/DateTime.java,481,"            return new java.sql.Timestamp(0, 0, 1, hour, minute, second, 0);"
java/client/org/apache/derby/client/am/DateTime.java,482,        } else {
java/client/org/apache/derby/client/am/DateTime.java,483,            recyclableTimestamp.setYear(0);
java/client/org/apache/derby/client/am/DateTime.java,484,            recyclableTimestamp.setMonth(0);
java/client/org/apache/derby/client/am/DateTime.java,485,            recyclableTimestamp.setDate(1);
java/client/org/apache/derby/client/am/DateTime.java,486,            recyclableTimestamp.setHours(hour);
java/client/org/apache/derby/client/am/DateTime.java,487,            recyclableTimestamp.setMinutes(minute);
java/client/org/apache/derby/client/am/DateTime.java,488,            recyclableTimestamp.setSeconds(second);
java/client/org/apache/derby/client/am/DateTime.java,489,            recyclableTimestamp.setNanos(0);
java/client/org/apache/derby/client/am/DateTime.java,490,            return recyclableTimestamp;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,78,        // Once DERBY-889 is fixed the methods should be renamed
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,79,        // and these lines removed so they are added under the default mechanism.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,80,"        suite.addTest(new TimeHandlingTest(""derby889testInertTime""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,81,"        suite.addTest(new TimeHandlingTest(""derby889testCurrentTime""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,82,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,152,     * Once DERBY-889 is fixed this test should be renamed so that it
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,153,     * loses the prefix derby889 (and the specific adding of this test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,154,     * in the suite() method removed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,158,"    public void derby889testInertTime() throws SQLException, UnsupportedEncodingException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,255,     * Once DERBY-889 is fixed this test should be renamed so that it
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,256,     * loses the prefix derby889 (and the specific adding of this test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,257,     * in the suite() method removed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,261,"    public void derby889testCurrentTime() throws SQLException, InterruptedException"
java/client/org/apache/derby/client/am/SQLExceptionFactory40.java,75,        } else if (sqlState.startsWith(SQLState.AUTHORIZATION_PREFIX)) {
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,83,        } else if (sqlState.startsWith(SQLState.AUTHORIZATION_PREFIX)) {
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1366," String AUTHORIZATION_PREFIX=""28"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1368," String AUTH_DATABASE_CONNECTION_REFUSED                            = ""04501.C"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1373," String AUTH_INVALID_AUTHORIZATION_PROPERTY                         = ""28501"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1375," String AUTH_USER_IN_READ_AND_WRITE_LISTS                           = ""28503"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1376," String AUTH_DUPLICATE_USERS                                        = ""28504"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1377," String AUTH_INTERNAL_BAD_UUID                                      = ""28505"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1378," String AUTH_NO_TABLE_PERMISSION                                    = ""28506"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1379," String AUTH_NO_TABLE_PERMISSION_FOR_GRANT                          = ""28507"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1380," String AUTH_NO_COLUMN_PERMISSION                                   = ""28508"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1381," String AUTH_NO_COLUMN_PERMISSION_FOR_GRANT                         = ""28509"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1382," String AUTH_NO_EXECUTE_PERMISSION                                  = ""2850A"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1383," String AUTH_NO_EXECUTE_PERMISSION_FOR_GRANT                        = ""2850B"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1384," String AUTH_NOT_OWNER                                              = ""2850C"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1385," String AUTH_NO_ACCESS_NOT_OWNER                                    = ""2850D"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1386," String AUTH_NOT_DATABASE_OWNER                                     = ""2850E"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1387," String AUTH_GRANT_REVOKE_NOT_ALLOWED                               = ""2850F"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1388," String AUTH_NO_OBJECT_PERMISSION                                   = ""2850G"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1389," String AUTH_SHUTDOWN_NOT_DB_OWNER                                  = ""2850H.C"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1390," String AUTH_ENCRYPT_NOT_DB_OWNER                                   = ""2850I.C"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1391," String AUTH_HARD_UPGRADE_NOT_DB_OWNER                              = ""2850J.C"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1561,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,168,"        assertShutdownFail(""2850H"", dbName, ""dan"", (""dan"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,169,"        assertShutdownWOUPFail(""2850H"", dbName, ""dan"", (""dan"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,170,"        assertShutdownFail(""2850H"", dbName, ""system"", ""admin"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,171,"        assertShutdownWOUPFail(""2850H"", dbName, ""system"", ""admin"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,200,"        assertShutdownFail(""2850H"", dbName, ""francois"", (""francois"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,206,"        assertConnectionFail(""04501"", dbName, ""dan"", (""dan"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,207,"        assertShutdownFail(""04501"", dbName, ""dan"", (""dan"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,217,"        assertShutdownFail(""2850H"", dbName, ""dan"", (""dan"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,219,"        assertShutdownFail(""04501"", dbName, ""APP"", (""APP"" + PASSWORD_SUFFIX));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,236,"        assertConnectionFail(""04501"", dbName, ""system"", ""admin"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,241,"        assertShutdownFail(""04501"", dbName, ""system"", ""admin"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,530,"            assertShutdownFail(""2850H"", dbName, zeus, apollo);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,533,"            assertShutdownFail(""2850H"", dbName, apollo, zeus);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,634,"        assertStatementError(""28503"", setDBP);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,299,"                               ""2850H"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,309,"                               ""2850H"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,581,"        vetAttempt(user, e, ""2850I"", ""(re)encryption"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java,718,"        vetAttempt(user, e, ""2850J"", ""hard upgrade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,99,"        rs = s.executeQuery(""select * from SYSCS_DIAG.Error_messages where SEVERITY >= 40000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,102,"        {{""XBM0N"",""JDBC Driver registration with java.sql.DriverManager failed. See next exception for details. "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,103,"            {""XSTB5"",""Creating database with logging disabled encountered unexpected problem."",""50000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,104,"            {""XSDG2"",""Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,105,"            {""28502"",""The user name '{0}' is not valid. "",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,106,"            {""0A000"",""The DRDA command {0} is not currently implemented.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,107,"            {""XSLAP"",""Database at {0} is at version {1}. Beta databases cannot be upgraded,"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,108,"            {""57017"",""There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,109,"            {""XBM0Q"",""File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,110,"            {""XSLA0"",""Cannot flush the log file to disk {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,111,"            {""08003"",""The underlying physical connection is stale or closed."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,112,"            {""08003"",""Lob method called after connection was closed"",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,113,"            {""08003"",""getConnection() is not valid on a closed PooledConnection."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,114,"            {""XBM01"",""Startup failed due to an exception. See next exception for details. "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,115,"            {""XSDG5"",""Database is not in create mode when createFinished is called."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,116,"            {""XJ081"",""Conflicting create/restore/recovery attributes specified."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,117,"            {""XJ028"",""The URL '{0}' is not properly formed."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,118,"            {""XSLAS"",""Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,119,"            {""08006"",""Database '{0}' shutdown."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,120,"            {""XSLAC"",""Database at {0} have incompatible format with the current version of software, it may have been created by or upgraded by a later version."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,121,"            {""XBM0T"",""Ambiguous sub-protocol for database name {0}.   "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,122,"            {""XSLA3"",""Log Corrupted, has invalid data in the log stream."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,123,"            {""2850H"",""User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,124,"            {""XSDG8"",""Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct. "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,125,"            {""XSDB0"",""Unexpected exception on in-memory page {0}"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,126,"            {""XSLAF"",""A Read Only database was created with dirty data buffers."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,127,"            {""XSLA6"",""Cannot recover the database."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,128,"            {""XBM0G"",""Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path. "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,129,"            {""XBM07"",""Startup failed. Boot password must be at least 8 bytes long."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,130,"            {""XJ040"",""Failed to start database '{0}', see the next exception for details."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,131,"            {""XSDB3"",""Container information cannot change once written: was {0}, now {1}"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,132,"            {""XSLAI"",""Cannot log the checkpoint log record"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,133,"            {""XBM0Z"",""Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct. "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,134,"            {""XBM0J"",""Directory {0} already exists."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,135,"            {""58015"",""The DDM object 0x{0} is not supported.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,136,"            {""XSDB6"",""Another instance of Derby may have already booted the database {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,137,"            {""XSLAL"",""log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,138,"            {""XBM0M"",""Error creating instance of authentication scheme class {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,139,"            {""XSDG1"",""Page {0} could not be written to disk, please check if disk is full."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,140,"            {""XSDB9"",""Stream container {0} is corrupt."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,141,"            {""08004"",""The connection was refused because the database {0} was not found."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,142,"            {""08004"",""Connection authentication failure occurred.  Reason: {0}."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,143,"            {""XSLAO"",""Recovery failed unexpected problem {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,144,"            {""XBM0P"",""Service provider is read-only. Operation not permitted. "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,145,"            {""XJ049"",""Conflicting create attributes specified."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,146,"            {""XSLAR"",""Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct. "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,147,"            {""XSLAB"",""Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,148,"            {""XBM0S"",""Unable to rename file '{0}' to '{1}'"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,149,"            {""XSLA2"",""System will shutdown, got I/O Exception while accessing log file."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,150,"            {""XBM03"",""Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,151,"            {""XSDG7"",""Directory {0} could not be removed during restore. Please make sure that permissions are correct."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,152,"            {""XSLAE"",""Control file at {0} cannot be written or updated."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,153,"            {""XSLA5"",""Cannot read log stream for some reason to rollback transaction {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,154,"            {""08001"",""A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,155,"            {""08001"",""Password can not be null."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,156,"            {""08001"",""User id can not be null."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,157,"            {""08001"",""Password length ({0}) is outside the range of 1 to {1}."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,158,"            {""XBM06"",""Startup failed. An encrypted database cannot be accessed without the correct boot password.  "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,159,"            {""08004"",""Connection refused : {0}"",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,160,"            {""08001"",""User id length ({0}) is outside the range of 1 to {1}."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,161,"            {""08003"",""No current connection."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,162,"            {""08001"",""Unable to open stream on socket: '{0}'."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,163,"            {""2850J"",""User '{0}' cannot hard upgrade database '{1}'. Only the database owner can perform this operation."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,164,"            {""08001"",""SocketException: '{0}'"",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,165,"            {""08001"",""{0} : Error connecting to server {1} on port {2} with message {3}."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,166,"            {""08000"",""Connection closed by unknown interrupt."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,167,"            {""08001"",""Required Derby DataSource property {0} not set."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,168,"            {""XSDB2"",""Unknown container format at container {0} : {1}"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,169,"            {""XSLAH"",""A Read Only database is being updated."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,170,"            {""XBM0Y"",""Backup database directory {0} not found. Please make sure that the specified backup path is right."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,171,"            {""XSLA8"",""Cannot rollback transaction {0}, trying to compensate {1} operation with {2}"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,172,"            {""XBM0I"",""Directory {0} cannot be removed."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,173,"            {""58014"",""The DDM command 0x{0} is not supported.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,174,"            {""XSTB0"",""An exception was thrown during transaction abort."",""50000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,175,"            {""XSDB5"",""Log has change record on page {0}, which is beyond the end of the container."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,176,"            {""XSLAK"",""Database has exceeded largest log file number {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,177,"            {""XBM0L"",""Specified authentication scheme class {0} does implement the authentication interface {1}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,178,"            {""58017"",""The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,179,"            {""XSTB3"",""Cannot abort transaction because the log manager is null, probably due to an earlier error."",""50000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,180,"            {""XSDG0"",""Page {0} could not be read from disk."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,181,"            {""XSDB8"",""WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The db2j.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,182,"            {""XSLAN"",""Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,183,"            {""XXXXX"",""Normal database session close."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,184,"            {""XSTB6"",""Cannot substitute a transaction table with another while one is already in use."",""50000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,185,"            {""XSDG3"",""Meta-data for Container {0} could not be accessed"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,186,"            {""58009"",""A network protocol error was encountered and the connection has been terminated: {0}"",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,187,"            {""XJ015"",""Derby system shutdown."",""50000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,188,"            {""XCW00"",""Unsupported upgrade from '{0}' to '{1}'."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,189,"            {""XSLAQ"",""cannot create log file at directory {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,190,"            {""04501"",""Database connection refused."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,191,"            {""XSLAA"",""The store has been marked for shutdown by an earlier exception."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,192,"            {""XBM0R"",""Unable to remove File {0}.  "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,193,"            {""XSLA1"",""Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,194,"            {""XJ004"",""Database '{0}' not found."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,195,"            {""XBM02"",""Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,196,"            {""XSDG6"",""Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,197,"            {""XSLAT"",""The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,198,"            {""XSLAD"",""log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,199,"            {""XSLA4"",""Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.  "",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,200,"            {""XBM05"",""Startup failed due to missing product version information for {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,201,"            {""58010"",""A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server. "",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,202,"            {""2850I"",""User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,203,"            {""XSDBA"",""Attempt to allocate object {0} failed."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,204,"            {""XSDB1"",""Unknown page format at page {0}"",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,205,"            {""XJ05B"",""JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,206,"            {""XBM0X"",""Supplied territory description '{0}' is invalid, expecting ln[_CO[_variant]]\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,207,"            {""XSLA7"",""Cannot redo operation {0} in the log."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,208,"            {""XBM0H"",""Directory {0} cannot be created."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,209,"            {""XBM08"",""Could not instantiate {0} StorageFactory class {1}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,210,"            {""XJ041"",""Failed to create database '{0}', see the next exception for details."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,211,"            {""58009"",""Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,212,"            {""58009"",""Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,213,"            {""58009"",""Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,214,"            {""58009"",""Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,215,"            {""58009"",""Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,216,"            {""58009"",""An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,217,"            {""58009"",""A communications error has been detected: {0}."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,218,"            {""58009"",""SocketException: '{0}'"",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,219,"            {""08006"",""An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,220,"            {""XSDB4"",""Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,221,"            {""58009"",""Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,222,"            {""XJ213"",""The traceLevel connection property does not have a valid format for a number."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,223,"            {""58009"",""Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,224,"            {""58009"",""Network protocol exception: SECTKN was not returned.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,225,"            {""58009"",""Network protocol exception: invalid FDOCA LID.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,226,"            {""58009"",""Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,227,"            {""58009"",""Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,228,"            {""58009"",""Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,229,"            {""XSLAJ"",""The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,230,"            {""58009"",""Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,231,"            {""58009"",""Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,232,"            {""58009"",""Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,233,"            {""58009"",""The connection was terminated because the encoding is not supported."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,234,"            {""58009"",""Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,235,"            {""08001"",""A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,236,"            {""08001"",""A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,237,"            {""08001"",""A connection could not be established because the security token is larger than the maximum allowed by the network protocol."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,238,"            {""XBM0K"",""Unknown sub-protocol for database name {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,239,"            {""58016"",""The DDM parameter 0x{0} is not supported.  The connection has been terminated."",""40000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,240,"            {""XSTB2"",""Cannot log transaction changes, maybe trying to write to a read only database."",""50000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,241,"            {""XSDB7"",""WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,242,"            {""XSLAM"",""Cannot verify database format at {1} due to IOException."",""45000""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,139,"        assertStatementError(""2850C"", st_barConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,142,"        assertStatementError(""2850C"", st_barConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,145,"        assertStatementError(""2850C"", st_barConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,148,"        assertStatementError(""2850C"", st_barConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,151,"        assertStatementError(""2850C"", st_barConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,317,"        assertStatementError(""2850F"", st_satConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,320,"        assertStatementError(""2850F"", st_satConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,401,"        assertStatementError(""2850D"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,404,"        assertStatementError(""2850D"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,407,"        assertStatementError(""2850D"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,410,"        assertStatementError(""2850D"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,413,"        assertStatementError(""2850D"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,418,"        assertStatementError(""2850D"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,429,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,432,"        assertStatementError(""28506"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,435,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,438,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,460,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,471,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,483,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,502,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,522,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,535,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,542,"        assertStatementError(""28508"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,556,"        assertStatementError(""28506"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,560,"        assertStatementError(""28506"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,598,"        assertStatementError(""28506"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,602,"        assertStatementError(""28506"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,682,"        assertStatementError(""2850A"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,685,"        assertStatementError(""2850A"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,738,"        assertStatementError(""2850A"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,741,"        assertStatementError(""2850A"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,795,"        assertStatementError(""2850E"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,798,"        assertStatementError(""2850E"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,801,"        assertStatementError(""2850E"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,807,"        assertStatementError(""2850E"", st_CONNECTION0,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,874,"        assertStatementError(""2850E"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,877,"        assertStatementError(""2850E"", st_swiperConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,886,"        assertStatementError(""2850E"", st_monicaConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,983,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,986,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,989,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,992,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,995,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1001,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1004,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1065,"        assertStatementError(""2850A"", cSt);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1071,"        assertStatementError(""2850A"", cSt);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1073,"        assertStatementError(""2850A"", st_samConnection,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1205,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1216,"        assertStatementError(""28508"", st_mamta4,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1301,"        assertStatementError(""28508"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1309,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1330,"        assertStatementError(""28508"", st_mamta4,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1491,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1498,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1505,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1516,"        assertStatementError(""2850G"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1523,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1528,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1535,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1544,"        assertStatementError(""2850G"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1551,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1633,"        assertStatementError(""2850A"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1739,"        assertStatementError(""28508"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,1744,"        assertStatementError(""28508"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,2028,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,2035,"        assertStatementError(""2850G"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,2043,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,2071,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,2460,"        assertStatementError(""2850G"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,2494,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,2998,"        assertStatementError(""2850G"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,3003,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,3978,"        assertStatementError(""28506"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4001,"        assertStatementError(""28506"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4168,"        assertStatementError(""28506"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4390,"        assertStatementError(""2850G"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4401,"        assertStatementError(""28508"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4413,"        assertStatementError(""28508"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4448,"        assertStatementError(""2850G"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4473,"        assertStatementError(""28508"", st_mamta4,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4542,"        assertStatementError(""28506"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4547,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4552,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,4819,"        assertStatementError(""28506"", st_mamta2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5635,"        assertStatementError(""2850F"", st_mamta1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5638,"        assertStatementError(""2850F"", st_mamta1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5641,"        assertStatementError(""2850F"", st_mamta1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5644,"        assertStatementError(""2850F"", st_mamta1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5655,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5658,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5661,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5664,"        assertStatementError(""2850F"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5704,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5707,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5736,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5739,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5766,"        assertStatementError(""2850C"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,5771,"        assertStatementError(""2850G"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6068,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6100,"        assertStatementError(""28508"", st_mamta3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6198,"         assertSQLState(""28508"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6246,"         assertSQLState(""28508"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6556,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6592,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6628,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6836,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6966,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6971,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6976,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6981,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6986,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6992,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6998,"        assertStatementError(""2850D"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7003,"        assertStatementError(""2850D"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7009,"        assertStatementError(""2850C"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7017,"        assertStatementError(""2850C"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7025,"        assertStatementError(""2850C"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7031,"        assertStatementError(""2850C"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7036,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7044,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7050,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7058,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7063,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7068,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7073,"        assertStatementError(""2850A"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7175,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7226,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7255,"        assertStatementError(""2850A"", st_user3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7418,"        assertStatementError(""28508"", st_user3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7423,"        assertStatementError(""28508"", st_user3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7507,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7512,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7526,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7551,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7556,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7569,"        assertStatementError(""2850E"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7579,"        assertStatementError(""2850E"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7582,"        assertStatementError(""2850E"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7592,"        assertStatementError(""2850E"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7619,"        assertStatementError(""2850D"", st_user5,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7637,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7712,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7801,"        assertStatementError(""2850G"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7808,"        assertStatementError(""28508"", st_user3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7881,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,7936,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8081,"        assertStatementError(""2850A"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8110,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8116,"        assertStatementError(""2850F"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8133,"        assertStatementError(""2850A"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8173,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8176,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8179,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8182,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8185,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8188,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8191,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8194,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8197,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8200,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8203,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8206,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8209,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8212,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8215,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8218,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8221,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8224,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8227,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8230,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8233,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8236,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8239,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8242,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8245,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8248,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8251,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8254,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8257,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8260,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8263,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8266,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8269,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8272,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8275,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8278,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8281,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8284,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8287,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8290,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8293,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8296,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8299,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8302,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8305,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8308,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8311,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8314,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8317,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8320,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8323,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8326,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8329,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8332,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8335,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8338,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8341,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8344,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8347,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8350,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8353,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8356,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8359,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8362,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8365,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8368,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8371,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8374,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8377,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8380,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8383,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8386,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8389,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8392,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8395,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8398,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8415,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8419,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8423,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8430,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8436,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8442,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8449,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8453,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8457,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8461,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8559,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8564,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8569,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8575,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8583,"        assertStatementError(""2850A"", cSt3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8585,"        assertStatementError(""2850A"", st_user3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8607,"        assertStatementError(""2850A"", st_user3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8653,"        assertStatementError(""2850D"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8712,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8719,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8724,"        assertStatementError(""28506"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8739,"        assertStatementError(""28508"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8996,"        assertStatementError(""2850D"", st_user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9029,"        assertStatementError(""28508"", pSt2);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9066,"        assertStatementError(""28508"", pSt2);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9087,"        assertStatementError(""2850F"", st_user1,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9313,"        assertStatementError(""2850G"", st_user4,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9316,"        assertStatementError(""2850G"", st_user4,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9319,"        assertStatementError(""2850G"", st_user4,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9322,"        assertStatementError(""2850G"", st_user4,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9327,"        assertStatementError(""28508"", st_user5,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9330,"        assertStatementError(""28508"", st_user5,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9333,"        assertStatementError(""28508"", st_user5,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,9336,"        assertStatementError(""28508"", st_user5,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,753,"         assertSQLState(""2850C"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,758,"         assertSQLState(""2850F"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,763,"         assertSQLState(""2850C"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,768,"         assertSQLState(""2850C"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1017,"       assertSQLState(""28508"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1049,"       assertSQLState(""28506"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1099,"       assertSQLState(""28508"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1161,"           assertSQLState(""28508"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1208,"           assertSQLState(""28508"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1246,"       assertSQLState(""28506"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1286,"           assertSQLState(""2850A"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1319,"    assertSQLState(""2850A"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,245,"        String          reservedToDBO = ""2850A"";"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1966,"  s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2043,     * @param tablePattern a table name
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2053,"  String tablePattern,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2058,"  return doGetBestRowId(catalogPattern, schemaPattern, tablePattern,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2069,"  String schemaPattern, String tablePattern, int scope,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2072,"  return doGetBestRowId(catalogPattern, schemaPattern, tablePattern,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2086,"  String schemaPattern, String tablePattern, int scope,"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2101,  if (tablePattern == null)
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2102,  {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2103,"   tablePattern = ""%"";"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2104,  }
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2119,"   ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2148,"   ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2178,"   ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2206,"   ps.setString(3,tablePattern);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2272,"  s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2333,"  s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2410,"  s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2488,"  s.setString(3, swapNull(table));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2733,"  s.setString(3, swapNull(table));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java,416,"   ""call sysibm.sqlforeignkeys (null, null, null, null, null, null, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/odbc_metadata.java,422,"   ""call sysibm.sqlforeignkeys (null, null, null, null, null, null, "" +"
java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java,396,"                                    false, // do not hold"
java/engine/org/apache/derby/iapi/store/access/DiskHashtable.java,439,                scan.fetch( row);
java/engine/org/apache/derby/iapi/store/access/TransactionController.java,928,    boolean              skipNullKeyColumns)
java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java,299,     skipNullKeyColumns);
java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java,86,  boolean     skipNullKeyColumns)
java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java,100,            false /* Do not keep the hash table after a commit. */);
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,1370,    boolean              skipNullKeyColumns)
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,1394,    skipNullKeyColumns));
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java,68,scan_state    - a scan has 3 possible states:
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java,69,"                SCAN_INIT, SCAN_INPROGRESS, SCAN_DONE"
java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java,155,"            boolean collect_runtimestats, boolean skipNullKeyColumns)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,3,   Derby - Class org.apache.derbyTesting.functionTests.tests.lang.bug4356
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,44,    private static PreparedStatement joinStmt;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,45,    private static PreparedStatement distinctStmt;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,65,            joinStmt =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,66,"              conn.prepareStatement( ""select ta.ca1, ta.ca2, tb.cb2 from ta, tb where ca1 = cb1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,67,            distinctStmt =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,68,"              conn.prepareStatement( ""select distinct ca1 from ta"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,69,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,105,            System.exit(0);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,110,            System.exit(1);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,177,"        runJoin( conn, maxColValue, dupVals);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,178,"        runDistinct( conn, maxColValue, dupVals);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,179,"        runCursor( conn, maxColValue, dupVals);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,182,"    private static void runJoin( Connection conn, int maxColValue, String[][][] dupVals)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,185,"        System.out.println( ""Running join"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,187,        ResultSet rs = joinStmt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,299,"    private static void runDistinct( Connection conn, int maxColValue, String[][][] dupVals)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,302,"        System.out.println( ""Running distinct"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,303,        ResultSet rs = distinctStmt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,304,"        checkAllCa1( rs, false, false, maxColValue, dupVals, ""DISTINCT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,394,                if( holdOverCommit)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,395,                {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,421,"    private static void runCursor( Connection conn, int maxColValue, String[][][] dupVals)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,424,"        System.out.println( ""Running scroll insensitive cursor"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,425,        DatabaseMetaData dmd = conn.getMetaData();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,426,        boolean holdOverCommit = dmd.supportsOpenCursorsAcrossCommit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,434,                                        ResultSet.CONCUR_READ_ONLY);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SpillHash.java,436,"        checkAllCa1( rs, true, holdOverCommit, maxColValue, dupVals, ""scroll insensitive cursor"");"
java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java,1018,"                false,         // don't maintain runtime statistics"
java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java,1019,    false);   // don't skip null key columns
java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java,1107,    false);   // don't skip null key columns
java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java,1108,
java/client/org/apache/derby/client/am/Cursor.java,98,    java.sql.Date recyclableDate_ = null;
java/client/org/apache/derby/client/am/Cursor.java,99,    java.sql.Time recyclableTime_ = null;
java/client/org/apache/derby/client/am/Cursor.java,100,    java.sql.Timestamp recyclableTimestamp_ = null;
java/client/org/apache/derby/client/am/Cursor.java,514,"                recyclableDate_,"
java/client/org/apache/derby/client/am/Cursor.java,530,"                    recyclableTime_,"
java/client/org/apache/derby/client/am/Cursor.java,543,        return org.apache.derby.client.am.DateTime.timestampBytesToTimestamp(
java/client/org/apache/derby/client/am/Cursor.java,546,"                recyclableTimestamp_,"
java/client/org/apache/derby/client/am/Cursor.java,560,"                    recyclableTimestamp_,"
java/client/org/apache/derby/client/am/Cursor.java,574,"                    recyclableTimestamp_,"
java/client/org/apache/derby/client/am/Cursor.java,588,"                    recyclableDate_,"
java/client/org/apache/derby/client/am/Cursor.java,602,"                    recyclableTime_,"
java/client/org/apache/derby/client/am/DateTime.java,59,     * @param recyclableDate
java/client/org/apache/derby/client/am/DateTime.java,66,"                                                      java.sql.Date recyclableDate,"
java/client/org/apache/derby/client/am/DateTime.java,92,                (((int) date.charAt(yearIndx + 3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,93,                1900;
java/client/org/apache/derby/client/am/DateTime.java,102,        if (recyclableDate == null) {
java/client/org/apache/derby/client/am/DateTime.java,103,"            return new java.sql.Date(year, month, day);"
java/client/org/apache/derby/client/am/DateTime.java,104,        } else {
java/client/org/apache/derby/client/am/DateTime.java,105,            recyclableDate.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,106,            recyclableDate.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,107,            recyclableDate.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,108,            return recyclableDate;
java/client/org/apache/derby/client/am/DateTime.java,109,        }
java/client/org/apache/derby/client/am/DateTime.java,118,     * @param recyclableTime
java/client/org/apache/derby/client/am/DateTime.java,125,"                                                      java.sql.Time recyclableTime,"
java/client/org/apache/derby/client/am/DateTime.java,147,        if (recyclableTime == null) {
java/client/org/apache/derby/client/am/DateTime.java,148,"            return new java.sql.Time(hour, minute, second);"
java/client/org/apache/derby/client/am/DateTime.java,149,        } else {
java/client/org/apache/derby/client/am/DateTime.java,150,            recyclableTime.setHours(hour);
java/client/org/apache/derby/client/am/DateTime.java,151,            recyclableTime.setMinutes(minute);
java/client/org/apache/derby/client/am/DateTime.java,152,            recyclableTime.setSeconds(second);
java/client/org/apache/derby/client/am/DateTime.java,153,            return recyclableTime;
java/client/org/apache/derby/client/am/DateTime.java,154,        }
java/client/org/apache/derby/client/am/DateTime.java,163,     * @param recyclableTimestamp
java/client/org/apache/derby/client/am/DateTime.java,170,"                                                                     java.sql.Timestamp recyclableTimestamp,"
java/client/org/apache/derby/client/am/DateTime.java,184,                (((int) timestamp.charAt(3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,185,                1900;
java/client/org/apache/derby/client/am/DateTime.java,210,        if (recyclableTimestamp == null) {
java/client/org/apache/derby/client/am/DateTime.java,211,"            return new java.sql.Timestamp(year, month, day, hour, minute, second, fraction * 1000);"
java/client/org/apache/derby/client/am/DateTime.java,212,        } else {
java/client/org/apache/derby/client/am/DateTime.java,213,            recyclableTimestamp.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,214,            recyclableTimestamp.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,215,            recyclableTimestamp.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,216,            recyclableTimestamp.setHours(hour);
java/client/org/apache/derby/client/am/DateTime.java,217,            recyclableTimestamp.setMinutes(minute);
java/client/org/apache/derby/client/am/DateTime.java,218,            recyclableTimestamp.setSeconds(second);
java/client/org/apache/derby/client/am/DateTime.java,219,            recyclableTimestamp.setNanos(fraction * 1000);
java/client/org/apache/derby/client/am/DateTime.java,220,            return recyclableTimestamp;
java/client/org/apache/derby/client/am/DateTime.java,221,        }
java/client/org/apache/derby/client/am/DateTime.java,392,     * @param recyclableTimestamp
java/client/org/apache/derby/client/am/DateTime.java,399,"                                                                java.sql.Timestamp recyclableTimestamp,"
java/client/org/apache/derby/client/am/DateTime.java,419,                (((int) date.charAt(yearIndx + 3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,420,                1900;
java/client/org/apache/derby/client/am/DateTime.java,429,        if (recyclableTimestamp == null) {
java/client/org/apache/derby/client/am/DateTime.java,430,"            return new java.sql.Timestamp(year, month, day, 0, 0, 0, 0);"
java/client/org/apache/derby/client/am/DateTime.java,431,        } else {
java/client/org/apache/derby/client/am/DateTime.java,432,            recyclableTimestamp.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,433,            recyclableTimestamp.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,434,            recyclableTimestamp.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,435,            recyclableTimestamp.setHours(0);
java/client/org/apache/derby/client/am/DateTime.java,436,            recyclableTimestamp.setMinutes(0);
java/client/org/apache/derby/client/am/DateTime.java,437,            recyclableTimestamp.setSeconds(0);
java/client/org/apache/derby/client/am/DateTime.java,438,            recyclableTimestamp.setNanos(0);
java/client/org/apache/derby/client/am/DateTime.java,439,            return recyclableTimestamp;
java/client/org/apache/derby/client/am/DateTime.java,440,        }
java/client/org/apache/derby/client/am/DateTime.java,450,     * @param recyclableTimestamp
java/client/org/apache/derby/client/am/DateTime.java,458,"                                                                java.sql.Timestamp recyclableTimestamp,"
java/client/org/apache/derby/client/am/DateTime.java,483,        java.util.Date today = new java.util.Date();
java/client/org/apache/derby/client/am/DateTime.java,484,        if (recyclableTimestamp == null) {
java/client/org/apache/derby/client/am/DateTime.java,485,            recyclableTimestamp = new java.sql.Timestamp(today.getTime());
java/client/org/apache/derby/client/am/DateTime.java,486,        }
java/client/org/apache/derby/client/am/DateTime.java,487,        else {
java/client/org/apache/derby/client/am/DateTime.java,488,            recyclableTimestamp.setTime(today.getTime());
java/client/org/apache/derby/client/am/DateTime.java,489,        }
java/client/org/apache/derby/client/am/DateTime.java,490,        recyclableTimestamp.setHours(hour);
java/client/org/apache/derby/client/am/DateTime.java,491,        recyclableTimestamp.setMinutes(minute);
java/client/org/apache/derby/client/am/DateTime.java,492,        recyclableTimestamp.setSeconds(second);
java/client/org/apache/derby/client/am/DateTime.java,493,        recyclableTimestamp.setNanos(0);
java/client/org/apache/derby/client/am/DateTime.java,494,        return recyclableTimestamp;
java/client/org/apache/derby/client/am/DateTime.java,504,     * @param recyclableDate
java/client/org/apache/derby/client/am/DateTime.java,511,"                                                           java.sql.Date recyclableDate,"
java/client/org/apache/derby/client/am/DateTime.java,525,                (((int) timestamp.charAt(3)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,526,                1900;
java/client/org/apache/derby/client/am/DateTime.java,535,        if (recyclableDate == null) {
java/client/org/apache/derby/client/am/DateTime.java,536,"            return new java.sql.Date(year, month, day);"
java/client/org/apache/derby/client/am/DateTime.java,537,        } else {
java/client/org/apache/derby/client/am/DateTime.java,538,            recyclableDate.setYear(year);
java/client/org/apache/derby/client/am/DateTime.java,539,            recyclableDate.setMonth(month);
java/client/org/apache/derby/client/am/DateTime.java,540,            recyclableDate.setDate(day);
java/client/org/apache/derby/client/am/DateTime.java,541,            return recyclableDate;
java/client/org/apache/derby/client/am/DateTime.java,542,        }
java/client/org/apache/derby/client/am/DateTime.java,552,     * @param recyclableTime
java/client/org/apache/derby/client/am/DateTime.java,559,"                                                           java.sql.Time recyclableTime,"
java/client/org/apache/derby/client/am/DateTime.java,578,        if (recyclableTime == null) {
java/client/org/apache/derby/client/am/DateTime.java,579,"            return new java.sql.Time(hour, minute, second);"
java/client/org/apache/derby/client/am/DateTime.java,580,        } else {
java/client/org/apache/derby/client/am/DateTime.java,581,            recyclableTime.setYear(hour);
java/client/org/apache/derby/client/am/DateTime.java,582,            recyclableTime.setMonth(minute);
java/client/org/apache/derby/client/am/DateTime.java,583,            recyclableTime.setDate(second);
java/client/org/apache/derby/client/am/DateTime.java,584,            return recyclableTime;
java/client/org/apache/derby/client/am/DateTime.java,171,        year =
java/client/org/apache/derby/client/am/DateTime.java,175,                (((int) timestamp.charAt(3)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,177,        month =
java/client/org/apache/derby/client/am/DateTime.java,179,                (((int) timestamp.charAt(6)) - zeroBase) -
java/client/org/apache/derby/client/am/DateTime.java,180,                1;
java/client/org/apache/derby/client/am/DateTime.java,181,        day =
java/client/org/apache/derby/client/am/DateTime.java,183,                (((int) timestamp.charAt(9)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,184,        hour =
java/client/org/apache/derby/client/am/DateTime.java,186,                (((int) timestamp.charAt(12)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,187,        minute =
java/client/org/apache/derby/client/am/DateTime.java,189,                (((int) timestamp.charAt(15)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,190,        second =
java/client/org/apache/derby/client/am/DateTime.java,192,                (((int) timestamp.charAt(18)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,193,        fraction =
java/client/org/apache/derby/client/am/DateTime.java,201,        Calendar cal = getCleanCalendar(recyclableCal);
java/client/org/apache/derby/client/am/DateTime.java,202,"        cal.set(year, month, day, hour, minute, second);"
java/client/org/apache/derby/client/am/DateTime.java,203,        java.sql.Timestamp ts = new java.sql.Timestamp(cal.getTimeInMillis());
java/client/org/apache/derby/client/am/DateTime.java,204,        ts.setNanos(fraction * 1000);
java/client/org/apache/derby/client/am/DateTime.java,205,        return ts;
java/client/org/apache/derby/client/am/DateTime.java,532,    throws  UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,533,"        int hour, minute, second;"
java/client/org/apache/derby/client/am/DateTime.java,534,
java/client/org/apache/derby/client/am/DateTime.java,537,        int zeroBase = ((int) '0');
java/client/org/apache/derby/client/am/DateTime.java,539,        hour =
java/client/org/apache/derby/client/am/DateTime.java,540,                10 * (((int) timestamp.charAt(11)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,541,                (((int) timestamp.charAt(12)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,542,        minute =
java/client/org/apache/derby/client/am/DateTime.java,543,                10 * (((int) timestamp.charAt(14)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,544,                (((int) timestamp.charAt(15)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,545,        second =
java/client/org/apache/derby/client/am/DateTime.java,546,                10 * (((int) timestamp.charAt(17)) - zeroBase) +
java/client/org/apache/derby/client/am/DateTime.java,547,                (((int) timestamp.charAt(18)) - zeroBase);
java/client/org/apache/derby/client/am/DateTime.java,549,        Calendar cal = getCleanCalendar(recyclableCal);
java/client/org/apache/derby/client/am/DateTime.java,550,"        cal.set(1970, Calendar.JANUARY, 1, hour, minute, second);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,706,        // DERBY-1816 java.sql.Time values from TIMESTAMP
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,707,        // colummns lose their precision with client.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,708,        if (!usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimeHandlingTest.java,709,"            assertTimeEqual(tv, tsv);"
java/engine/org/apache/derby/iapi/error/StandardException.java,446,  if ((t instanceof SQLException) &&
java/engine/org/apache/derby/iapi/error/StandardException.java,447,      !(t instanceof EmbedSQLException))
java/engine/org/apache/derby/iapi/error/StandardException.java,466,  if (t instanceof EmbedSQLException) {
java/engine/org/apache/derby/iapi/error/StandardException.java,467,   EmbedSQLException csqle = (EmbedSQLException) t;
java/engine/org/apache/derby/iapi/error/StandardException.java,468,   if (csqle.isSimpleWrapper()) {
java/engine/org/apache/derby/iapi/error/StandardException.java,469,    Throwable wrapped = csqle.getCause();
java/engine/org/apache/derby/iapi/error/StandardException.java,517,   if (t instanceof EmbedSQLException) {
java/engine/org/apache/derby/iapi/error/StandardException.java,518,    detailMessage = ((EmbedSQLException) t).toString();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4407,"  return TransactionResourceImpl.wrapInSQLException((SQLException) null, thrownException);"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java,136,"            super.getSQLException(message, messageId, next, severity, t, args);"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,345,"   return wrapInSQLException((SQLException) null, thrownException);"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,358,"   throw wrapInSQLException((SQLException) null, t);"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,364," public static final SQLException wrapInSQLException(SQLException sqlException, Throwable thrownException) {"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,367,   return sqlException;
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,380,   nextSQLException = Util.generateCsSQLException(se);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,381,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,382,"   wrapInSQLException(nextSQLException, se.getCause());"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,388,   // special case some java exceptions that have nested exceptions themselves
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,389,   Throwable nestedByJVM = null;
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,390,   if (thrownException instanceof ExceptionInInitializerError) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,391,    nestedByJVM = ((ExceptionInInitializerError) thrownException).getException();
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,392,   } else if (thrownException instanceof java.lang.reflect.InvocationTargetException) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,393,    nestedByJVM = ((java.lang.reflect.InvocationTargetException) thrownException).getTargetException();
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,394,   }
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,395,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,396,   if (nestedByJVM != null) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,397,"    wrapInSQLException(nextSQLException, nestedByJVM);"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,398,   }
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,399,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,400,  }
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,401,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,402,  if (sqlException != null) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,403,   sqlException.setNextException(nextSQLException);
java/engine/org/apache/derby/impl/jdbc/Util.java,235,"   new Object[] {name, msg}, ExceptionSeverity.NO_APPLICABLE_SEVERITY, t);"
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,774,                TransactionResourceImpl.wrapInSQLException(
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,775,"                (SQLException) null, se));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,238,"            //--- Bug DERBY-1629 -- in JDK 1.6 you only get 38001, not 38000"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,239,            if (!JDBC.vmSupportsJDBC4())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,240,            {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,241,"                assertSQLState(""38000"", se);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,242,                se = se.getNextException();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,243,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,628,        /* Currently BaseJDBCTestCase.assertSQLState() is unable
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,629,"         * to find nested SQLSTATEs with 1.6 JVMs, so we have to"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,630,         * check for the top-level SQLSTATE in that case.  When
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,631,"         * that changes the ""JDBC.vmSupportsJDBC4()"" call can be"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,632,         * removed from the following line.  DERBY-1440.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,633,         */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,634,"        assertStatementError(JDBC.vmSupportsJDBC4() ? ""38000"" : ""42X62"", cSt);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,352,        /* Currently BaseJDBCTestCase.assertSQLState() is unable
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,353,"         * to find nested SQLSTATEs with 1.6 JVMs, so we have to"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,354,         * check for the top-level SQLSTATE in that case.  When
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,355,"         * that changes the ""JDBC.vmSupportsJDBC4()"" call can be"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,356,         * removed from the following line.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,357,         */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,358,"        assertStatementError(JDBC.vmSupportsJDBC4() ? ""38000"" : ""42Z71"", cSt);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java,363,"        assertStatementError(JDBC.vmSupportsJDBC4() ? ""38000"" : ""42Z71"", cSt);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,198,        /* Currently BaseJDBCTestCase.assertSQLState() is unable
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,199,"         * to find nested SQLSTATEs with 1.6 JVMs, so we have to"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,200,         * check for the top-level SQLSTATE in that case.  When
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,201,"         * that changes the ""JDBC.vmSupportsJDBC4()"" call can be"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,202,         * removed from the following assertSQLState() calls.
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,203,         * (DERBY-1440)
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,204,         */
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,205,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,209,"             assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0J"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,216,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0J"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,261,"             assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,271,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java,281,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,229,"             assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,241,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,253,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"": ""XIE0N"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,378,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,379,        /* Currently BaseJDBCTestCase.assertSQLState() is unable
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,380,"         * to find nested SQLSTATEs with 1.6 JVMs, so we have to"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,381,         * check for the top-level SQLSTATE in that case.  When
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,382,"         * that changes the ""JDBC.vmSupportsJDBC4()"" call can be"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,383,         * removed from the following assertSQLState() calls.
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,384,         * (DERBY-1440)
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,385,         */
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,386,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,391,"             assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0J"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,398,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"": ""XIE0J"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java,435,"            assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"": ""XIE0P"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java,94,            // DERBY-1440: JDBC 4 client driver doesn't include nested exception SQLStates
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java,95,"   assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"" : ""XIE04"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java,104,            // DERBY-1440: JDBC 4 client driver doesn't include nested exception SQLStates
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java,105,"   assertSQLState(JDBC.vmSupportsJDBC4() ? ""38000"" : ""XIE05"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java,169,   // DERBY-1440: JDBC 4 client driver doesn't include nested exception SQLStates
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java,170,"   assertSQLState(JDBC.vmSupportsJDBC4() ? ""XIE0R"" : ""XIE0E"", e);"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,130, /*
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,162, /*
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,190, /*
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,202, /*
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,228, /*
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,287, /*
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,363,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,369,  SQLException nextSQLException;
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,370,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,372,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,373,   // server side JDBC can end up with a SQLException in the nested stack
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,374,   nextSQLException = (SQLException) thrownException;
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,376,  else if (thrownException instanceof StandardException) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,381,                nextSQLException = Util.generateCsSQLException(se);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,382,            } else {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,383,"                nextSQLException = Util.seeNextException(se.getMessageId(),"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,384,"                        se.getArguments(), wrapInSQLException(se.getCause()));"
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,387,  } else {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,388,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,389,   nextSQLException = Util.javaException(thrownException);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,390,
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,391,  }
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,393,  return nextSQLException;
java/client/org/apache/derby/client/am/ExceptionFormatter.java,160,"            printWriter.println(header + "" SqlErrmcTokens = "" + Utils.getStringFromStrings(sqlca.getSqlErrmcTokens()));"
java/client/org/apache/derby/client/am/SqlException.java,254,
java/client/org/apache/derby/client/am/SqlException.java,256,        this.sqlca_ = sqlca;
java/client/org/apache/derby/client/am/SqlException.java,401,            cachedMessage_ = message_ = ((Sqlca) sqlca_).getJDBCMessage();
java/client/org/apache/derby/client/am/SqlException.java,427,
java/client/org/apache/derby/client/am/SqlException.java,428,        if (sqlca_ == null) {
java/client/org/apache/derby/client/am/SqlException.java,429,            return sqlstate_;
java/client/org/apache/derby/client/am/SqlException.java,430,        } else {
java/client/org/apache/derby/client/am/SqlException.java,431,            return sqlca_.getSqlState();
java/client/org/apache/derby/client/am/SqlException.java,432,        }
java/client/org/apache/derby/client/am/SqlException.java,441,        if (sqlca_ == null) {
java/client/org/apache/derby/client/am/SqlException.java,442,            return errorcode_;
java/client/org/apache/derby/client/am/SqlException.java,443,        } else {
java/client/org/apache/derby/client/am/SqlException.java,444,            return sqlca_.getSqlCode();
java/client/org/apache/derby/client/am/SqlException.java,445,        }
java/client/org/apache/derby/client/am/SqlException.java,508,"            return new SqlException(logWriter, sqlca_); // server error"
java/client/org/apache/derby/client/am/Sqlca.java,34,    private String sqlErrmc_;       // A string with all error tokens delimited by sqlErrmcDelimiter
java/client/org/apache/derby/client/am/Sqlca.java,35,    protected String[] sqlErrmcTokens_; // A string array with each element
java/client/org/apache/derby/client/am/Sqlca.java,51,"    //public static final String sqlErrmcDelimiter = ""\u00FF"";"
java/client/org/apache/derby/client/am/Sqlca.java,52,"    private static final String sqlErrmcDelimiter__ = "";"";"
java/client/org/apache/derby/client/am/Sqlca.java,59,    private String cachedMessage;
java/client/org/apache/derby/client/am/Sqlca.java,79,        // sqlErrmc string is dependent on sqlErrmcTokens array having been built
java/client/org/apache/derby/client/am/Sqlca.java,80,        if (sqlErrmcTokens_ == null) {
java/client/org/apache/derby/client/am/Sqlca.java,81,            getSqlErrmcTokens();
java/client/org/apache/derby/client/am/Sqlca.java,82,        }
java/client/org/apache/derby/client/am/Sqlca.java,84,        // sqlErrmc will be build only if sqlErrmcTokens has been build.
java/client/org/apache/derby/client/am/Sqlca.java,86,        if (sqlErrmcTokens_ == null) {
java/client/org/apache/derby/client/am/Sqlca.java,91,        if (sqlErrmcTokens_.length == 0) {
java/client/org/apache/derby/client/am/Sqlca.java,99,        for (indx = 0; indx < sqlErrmcTokens_.length - 1; indx++) {
java/client/org/apache/derby/client/am/Sqlca.java,100,            buffer.append(sqlErrmcTokens_[indx]);
java/client/org/apache/derby/client/am/Sqlca.java,104,        buffer.append(sqlErrmcTokens_[indx]);
java/client/org/apache/derby/client/am/Sqlca.java,111,    synchronized public String[] getSqlErrmcTokens() {
java/client/org/apache/derby/client/am/Sqlca.java,112,        if (sqlErrmcTokens_ != null) {
java/client/org/apache/derby/client/am/Sqlca.java,113,            return sqlErrmcTokens_;
java/client/org/apache/derby/client/am/Sqlca.java,115,
java/client/org/apache/derby/client/am/Sqlca.java,116,        // processSqlErrmcTokens handles null sqlErrmcBytes_ case
java/client/org/apache/derby/client/am/Sqlca.java,117,        sqlErrmcTokens_ = processSqlErrmcTokens(sqlErrmcBytes_);
java/client/org/apache/derby/client/am/Sqlca.java,118,        return sqlErrmcTokens_;
java/client/org/apache/derby/client/am/Sqlca.java,173,    synchronized public String getMessage() throws SqlException {
java/client/org/apache/derby/client/am/Sqlca.java,175,        if (cachedMessage != null) {
java/client/org/apache/derby/client/am/Sqlca.java,176,            return cachedMessage;
java/client/org/apache/derby/client/am/Sqlca.java,180,            return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,189,"                cs.setIntX(1, getSqlCode());"
java/client/org/apache/derby/client/am/Sqlca.java,191,"                cs.setShortX(2, (short) ((getSqlErrmc() != null) ? getSqlErrmc().length() : 0));"
java/client/org/apache/derby/client/am/Sqlca.java,192,"                // SQLErrmc: SQL error message tokens as a String (delimited by semicolon "";"")."
java/client/org/apache/derby/client/am/Sqlca.java,193,"                cs.setStringX(3, getSqlErrmc());"
java/client/org/apache/derby/client/am/Sqlca.java,206,"                cs.setStringX(12, getSqlState());"
java/client/org/apache/derby/client/am/Sqlca.java,223,                    cachedMessage = message;
java/client/org/apache/derby/client/am/Sqlca.java,228,                    return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,242,    public synchronized String getJDBCMessage() {
java/client/org/apache/derby/client/am/Sqlca.java,246,                return getMessage();
java/client/org/apache/derby/client/am/Sqlca.java,251,                return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,254,            return getUnformattedMessage();
java/client/org/apache/derby/client/am/Sqlca.java,258,    private String getUnformattedMessage() {
java/client/org/apache/derby/client/am/Sqlca.java,259,"        return ""DERBY SQL error: SQLCODE: "" + getSqlCode() + "", SQLSTATE: "" + getSqlState() + "", SQLERRMC: "" + getSqlErrmc();"
java/client/org/apache/derby/client/am/Sqlca.java,294,    private String[] processSqlErrmcTokens(byte[] tokenBytes) {
java/client/org/apache/derby/client/am/Sqlca.java,296,            return null;
java/client/org/apache/derby/client/am/Sqlca.java,302,            return new String[0];
java/client/org/apache/derby/client/am/Sqlca.java,307,            java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
java/client/org/apache/derby/client/am/Sqlca.java,308,            java.util.LinkedList tokens = new java.util.LinkedList();
java/client/org/apache/derby/client/am/Sqlca.java,309,
java/client/org/apache/derby/client/am/Sqlca.java,310,            // parse the error message tokens
java/client/org/apache/derby/client/am/Sqlca.java,311,            for (int index = 0; index < length - 1; index++) {
java/client/org/apache/derby/client/am/Sqlca.java,312,
java/client/org/apache/derby/client/am/Sqlca.java,313,                // non-delimiter - continue to write into buffer
java/client/org/apache/derby/client/am/Sqlca.java,314,                if (tokenBytes[index] != -1)  // -1 is the delimiter '\xFF'
java/client/org/apache/derby/client/am/Sqlca.java,315,                {
java/client/org/apache/derby/client/am/Sqlca.java,316,                    buffer.write(tokenBytes[index]);
java/client/org/apache/derby/client/am/Sqlca.java,317,                }
java/client/org/apache/derby/client/am/Sqlca.java,318,
java/client/org/apache/derby/client/am/Sqlca.java,319,                // delimiter - convert current token and add to list
java/client/org/apache/derby/client/am/Sqlca.java,320,                else {
java/client/org/apache/derby/client/am/Sqlca.java,321,"                    tokens.add(bytes2String(buffer.toByteArray(), 0, buffer.size()));"
java/client/org/apache/derby/client/am/Sqlca.java,322,                    buffer.reset();
java/client/org/apache/derby/client/am/Sqlca.java,323,                }
java/client/org/apache/derby/client/am/Sqlca.java,324,            }
java/client/org/apache/derby/client/am/Sqlca.java,325,
java/client/org/apache/derby/client/am/Sqlca.java,326,            int lastIndex = length - 1;
java/client/org/apache/derby/client/am/Sqlca.java,327,"            // check for last byte not being a delimiter, i.e. part of last token"
java/client/org/apache/derby/client/am/Sqlca.java,328,            if (tokenBytes[lastIndex] != -1) {
java/client/org/apache/derby/client/am/Sqlca.java,329,                // write the last byte
java/client/org/apache/derby/client/am/Sqlca.java,330,                buffer.write(tokenBytes[lastIndex]);
java/client/org/apache/derby/client/am/Sqlca.java,331,                // convert the last token and add to list
java/client/org/apache/derby/client/am/Sqlca.java,332,"                tokens.add(bytes2String(buffer.toByteArray(), 0, buffer.size()));"
java/client/org/apache/derby/client/am/Sqlca.java,334,
java/client/org/apache/derby/client/am/Sqlca.java,335,            // last byte is delimiter implying an empty String for last token
java/client/org/apache/derby/client/am/Sqlca.java,336,            else {
java/client/org/apache/derby/client/am/Sqlca.java,337,"                // convert current token, if one exists, and add to list"
java/client/org/apache/derby/client/am/Sqlca.java,338,                if (lastIndex != 0) {
java/client/org/apache/derby/client/am/Sqlca.java,339,"                    tokens.add(bytes2String(buffer.toByteArray(), 0, buffer.size()));"
java/client/org/apache/derby/client/am/Sqlca.java,340,                }
java/client/org/apache/derby/client/am/Sqlca.java,341,                // last token is an empty String
java/client/org/apache/derby/client/am/Sqlca.java,342,"                tokens.add("""");"
java/client/org/apache/derby/client/am/Sqlca.java,343,            }
java/client/org/apache/derby/client/am/Sqlca.java,344,
java/client/org/apache/derby/client/am/Sqlca.java,345,            // create the String array and fill it with tokens.
java/client/org/apache/derby/client/am/Sqlca.java,346,            String[] tokenStrings = new String[tokens.size()];
java/client/org/apache/derby/client/am/Sqlca.java,347,
java/client/org/apache/derby/client/am/Sqlca.java,348,            java.util.Iterator iterator = tokens.iterator();
java/client/org/apache/derby/client/am/Sqlca.java,349,            for (int i = 0; iterator.hasNext(); i++) {
java/client/org/apache/derby/client/am/Sqlca.java,350,                tokenStrings[i] = (String) iterator.next();
java/client/org/apache/derby/client/am/Sqlca.java,351,            }
java/client/org/apache/derby/client/am/Sqlca.java,352,
java/client/org/apache/derby/client/am/Sqlca.java,353,            return tokenStrings;
java/client/org/apache/derby/client/am/Sqlca.java,355,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,240,            // Client does not get chained exceptions
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,241,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,242,"                assertSQLState(""38001"", se);"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,569,            if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,570,            {
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,571,                /* For chained exceptions the Derby Client just concatenates
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,572,                 * them into the exception message.  So search the message
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,573,"                 * for the desired SQLSTATE.  This isn't ideal, but it"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,574,                 * should work...
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,575,                 */
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,576,                if (exception.getMessage().
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,577,"                    indexOf(""SQLSTATE: "" + expected) == -1)"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,578,                {
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,579,                    throw e;
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,580,                }
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,581,            }
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,582,            else if (usingDerbyNet())
java/client/org/apache/derby/client/am/Diagnosable.java,27,    public java.lang.Throwable getThrowable();
java/client/org/apache/derby/client/am/Diagnosable.java,28,
java/client/org/apache/derby/client/am/ExceptionFormatter.java,39,                java.lang.Throwable throwable = null;
java/client/org/apache/derby/client/am/ExceptionFormatter.java,40,                try {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,41,                    throwable = ((Diagnosable) e).getThrowable();
java/client/org/apache/derby/client/am/ExceptionFormatter.java,42,                } catch (java.lang.NoSuchMethodError doNothing) {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,43,                }
java/client/org/apache/derby/client/am/ExceptionFormatter.java,188,
java/client/org/apache/derby/client/am/ExceptionFormatter.java,189,            if (!((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
java/client/org/apache/derby/client/am/ExceptionFormatter.java,190,                    (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
java/client/org/apache/derby/client/am/ExceptionFormatter.java,191,"                    (org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // If not jre 1.4 or above, we need to print the cause if there is one"
java/client/org/apache/derby/client/am/ExceptionFormatter.java,192,"                // For jre 1.4 or above, e.printStackTrace() will print the cause automatically"
java/client/org/apache/derby/client/am/ExceptionFormatter.java,193,                if (e instanceof Diagnosable) {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,194,                    java.lang.Throwable throwable = null;
java/client/org/apache/derby/client/am/ExceptionFormatter.java,195,                    try {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,196,                        throwable = ((Diagnosable) e).getThrowable();
java/client/org/apache/derby/client/am/ExceptionFormatter.java,197,                    } catch (java.lang.NoSuchMethodError doNothing) {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,198,                    }
java/client/org/apache/derby/client/am/ExceptionFormatter.java,199,                    if (throwable != null) {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,200,"                        printWriter.print(""Caused by: "");"
java/client/org/apache/derby/client/am/ExceptionFormatter.java,201,                        if (throwable instanceof java.sql.SQLException) {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,202,                            throwable.printStackTrace(printWriter);
java/client/org/apache/derby/client/am/ExceptionFormatter.java,203,                        } else {
java/client/org/apache/derby/client/am/ExceptionFormatter.java,204,"                            printTrace(throwable, printWriter, header);"
java/client/org/apache/derby/client/am/ExceptionFormatter.java,205,                        }
java/client/org/apache/derby/client/am/ExceptionFormatter.java,206,                    }
java/client/org/apache/derby/client/am/ExceptionFormatter.java,207,                }
java/client/org/apache/derby/client/am/ExceptionFormatter.java,208,            }
java/client/org/apache/derby/client/am/SqlException.java,27,import org.apache.derby.iapi.services.info.JVMInfo;
java/client/org/apache/derby/client/am/SqlException.java,318,     * Set the cause of this exception based on its type and
java/client/org/apache/derby/client/am/SqlException.java,319,     * the current runtime version of Java
java/client/org/apache/derby/client/am/SqlException.java,321,    protected void setThrowable(Throwable throwable)
java/client/org/apache/derby/client/am/SqlException.java,323,        throwable_ = throwable;
java/client/org/apache/derby/client/am/SqlException.java,324,
java/client/org/apache/derby/client/am/SqlException.java,325,"        // If the throwable is a SQL exception, use nextException rather"
java/client/org/apache/derby/client/am/SqlException.java,326,        // than chained exceptions
java/client/org/apache/derby/client/am/SqlException.java,335,        else if ( throwable != null )
java/client/org/apache/derby/client/am/SqlException.java,336,        {
java/client/org/apache/derby/client/am/SqlException.java,337,            // Set up a string indicating the cause if the current runtime
java/client/org/apache/derby/client/am/SqlException.java,338,            // doesn't support the initCause() method.  This is then used
java/client/org/apache/derby/client/am/SqlException.java,339,            // by getMessage() when it composes the message string.
java/client/org/apache/derby/client/am/SqlException.java,340,            if (JVMInfo.JDK_ID < JVMInfo.J2SE_14 )
java/client/org/apache/derby/client/am/SqlException.java,341,            {
java/client/org/apache/derby/client/am/SqlException.java,342,"                causeString_ = "" "" +"
java/client/org/apache/derby/client/am/SqlException.java,343,"                    getMessageUtil().getTextMessage(CAUSED_BY_EXCEPTION_ID)  + "" "" +"
java/client/org/apache/derby/client/am/SqlException.java,344,"                    throwable.getClass() + "": "" + throwable.getMessage();"
java/client/org/apache/derby/client/am/SqlException.java,345,            }
java/client/org/apache/derby/client/am/SqlException.java,346,            else
java/client/org/apache/derby/client/am/SqlException.java,347,            {
java/client/org/apache/derby/client/am/SqlException.java,348,                initCause(throwable);
java/client/org/apache/derby/client/am/SqlException.java,349,            }
java/client/org/apache/derby/client/am/SqlException.java,350,        }
java/client/org/apache/derby/client/am/SqlException.java,380,
java/client/org/apache/derby/client/am/SqlException.java,381,"        // If we're in a runtime that supports chained exceptions, set the cause"
java/client/org/apache/derby/client/am/SqlException.java,382,        // of the SQLException to be this SqlException.  Otherwise the stack
java/client/org/apache/derby/client/am/SqlException.java,383,        // trace is lost.
java/client/org/apache/derby/client/am/SqlException.java,384,         if (JVMInfo.JDK_ID >= JVMInfo.J2SE_14 )
java/client/org/apache/derby/client/am/SqlException.java,385,        {
java/client/org/apache/derby/client/am/SqlException.java,386,            sqle.initCause(this);
java/client/org/apache/derby/client/am/SqlException.java,387,        }
java/client/org/apache/derby/client/am/SqlException.java,413,    public java.lang.Throwable getThrowable() {
java/client/org/apache/derby/client/am/SqlException.java,414,        return throwable_;
java/client/org/apache/derby/client/am/SqlException.java,415,    }
java/client/org/apache/derby/client/am/SqlException.java,416,
java/client/org/apache/derby/client/am/SqlWarning.java,25,import org.apache.derby.iapi.services.info.JVMInfo;
java/client/org/apache/derby/client/am/SqlWarning.java,99,"        // If we're in a runtime that supports chained exceptions, set the cause"
java/client/org/apache/derby/client/am/SqlWarning.java,100,        // of the SQLWarning to be this SqlWarning.
java/client/org/apache/derby/client/am/SqlWarning.java,101,         if (JVMInfo.JDK_ID >= JVMInfo.J2SE_14 )
java/client/org/apache/derby/client/am/SqlWarning.java,102,        {
java/client/org/apache/derby/client/am/SqlWarning.java,103,            sqlw.initCause(this);
java/client/org/apache/derby/client/am/SqlWarning.java,104,        }
java/client/org/apache/derby/client/am/XaException.java,26,    java.lang.Throwable throwable_ = null;
java/client/org/apache/derby/client/am/XaException.java,39,        throwable_ = throwable;
java/client/org/apache/derby/client/am/XaException.java,40,        if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
java/client/org/apache/derby/client/am/XaException.java,41,                (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
java/client/org/apache/derby/client/am/XaException.java,42,"                (org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause"
java/client/org/apache/derby/client/am/XaException.java,43,            initCause(throwable);
java/client/org/apache/derby/client/am/XaException.java,44,        }
java/client/org/apache/derby/client/am/XaException.java,61,        throwable_ = throwable;
java/client/org/apache/derby/client/am/XaException.java,62,        if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
java/client/org/apache/derby/client/am/XaException.java,63,                (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
java/client/org/apache/derby/client/am/XaException.java,64,"                (org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause"
java/client/org/apache/derby/client/am/XaException.java,65,            initCause(throwable);
java/client/org/apache/derby/client/am/XaException.java,66,        }
java/client/org/apache/derby/client/am/XaException.java,81,        throwable_ = throwable;
java/client/org/apache/derby/client/am/XaException.java,82,        if (((org.apache.derby.client.am.Configuration.jreLevelMajor == 1) &&
java/client/org/apache/derby/client/am/XaException.java,83,                (org.apache.derby.client.am.Configuration.jreLevelMinor >= 4)) ||
java/client/org/apache/derby/client/am/XaException.java,84,"                (org.apache.derby.client.am.Configuration.jreLevelMajor > 1)) { // jre 1.4 or above, init the cause"
java/client/org/apache/derby/client/am/XaException.java,85,            initCause(throwable);
java/client/org/apache/derby/client/am/XaException.java,86,        }
java/client/org/apache/derby/client/am/XaException.java,96,    public java.lang.Throwable getThrowable() {
java/client/org/apache/derby/client/am/XaException.java,97,        return throwable_;
java/client/org/apache/derby/client/am/XaException.java,98,    }
java/client/org/apache/derby/client/am/XaException.java,99,
java/client/org/apache/derby/client/am/XaException.java,108,"        XaException xae = new XaException(logWriter, this.getThrowable(), getMessage()); // client error"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SqlExceptionTest.java,76,     * rather than as a chained exception
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SqlExceptionTest.java,86,        assertNull(javae.getCause().getCause());
java/engine/org/apache/derby/impl/services/reflect/JarLoader.java,105,    jar = new JarFile((File) installedJar);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,84,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,85,"          suite.addTest(new DatabaseClassLoadingTest(""testJarHandling""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,86,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,87,"          suite.addTest(new DatabaseClassLoadingTest(""testWithNoInstalledJars""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,88,"          suite.addTest(new DatabaseClassLoadingTest(""testWithNoClasspath""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,90,          suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,91,                SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,92,"                        new DatabaseClassLoadingTest(""testSetClasspath"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,93,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,94,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,95,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,96,"                new DatabaseClassLoadingTest(""testAddContact"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,97,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,98,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,99,"                new DatabaseClassLoadingTest(""testGetResource"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,100,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,101,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,102,"                   new DatabaseClassLoadingTest(""testAlterTable"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,103,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,104,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,105,"                   new DatabaseClassLoadingTest(""testClassPathRollback"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,106,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,107,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,108,"                   new DatabaseClassLoadingTest(""testReplaceJar"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,109,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,110,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,111,"                   new DatabaseClassLoadingTest(""testReplacedClass"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,112,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,113,"                   new DatabaseClassLoadingTest(""testSecondJar"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,114,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,115,"                   new DatabaseClassLoadingTest(""testSignedJar"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,116,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,117,"           suite.addTest(new DatabaseClassLoadingTest(""testCreateDatabaseJar""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,118,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,119,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,120,"                   new DatabaseClassLoadingTest(""testHackedJarReplacedClass"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,121,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,122,"                   new DatabaseClassLoadingTest(""testInvalidJar"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,123,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,124,"                   new DatabaseClassLoadingTest(""testRemoveJar"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,125,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,126,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,127,"                   new DatabaseClassLoadingTest(""testLoadJavaClassIndirectly"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,128,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,129,"                   new DatabaseClassLoadingTest(""testLoadJavaClassDirectly"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,130,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,131,"                   new DatabaseClassLoadingTest(""testLoadJavaClassDirectly2"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,132,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,133,"                   new DatabaseClassLoadingTest(""testLoadJavaClassDirectly3"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,134,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,135,"                   new DatabaseClassLoadingTest(""testLoadDerbyClassIndirectly"")));"
java/client/org/apache/derby/client/am/Clob.java,103,"    //""US-ASCII"", ""UTF-8"", or ""UnicodeBigUnmarked"""
java/client/org/apache/derby/client/am/Clob.java,114,"        if (encoding.equals(""US-ASCII"")) {"
java/client/org/apache/derby/client/am/Clob.java,144,"     * @param encoding encoding to use for characters. Only ""US-ASCII"" is"
java/client/org/apache/derby/client/am/Clob.java,153,"        if (encoding.equals(""US-ASCII"")) {"
java/client/org/apache/derby/client/am/Clob.java,1007,"                    new java.io.InputStreamReader(asciiStream_, ""US-ASCII"");"
java/client/org/apache/derby/client/am/Clob.java,1012,"                ""US-ASCII"", ""CharacterStream"", e);"
java/client/org/apache/derby/client/am/ClobOutputStream.java,70,"        String str = new String(b, ""US-ASCII"");"
java/client/org/apache/derby/client/am/Cursor.java,1044,"                    return new java.io.ByteArrayInputStream(getCHAR(column).getBytes(""US-ASCII""));"
java/client/org/apache/derby/client/am/Cursor.java,1053,"                    return new java.io.ByteArrayInputStream(getVARCHAR(column).getBytes(""US-ASCII""));"
java/client/org/apache/derby/client/am/PreparedStatement.java,1098,"                setInput(parameterIndex, new Clob(agent_, x, ""US-ASCII"", (int)length));"
java/client/org/apache/derby/client/am/PreparedStatement.java,2573,"                setInput(parameterIndex, new Clob(agent_, x, ""US-ASCII""));"
java/client/org/apache/derby/client/am/ResultSet.java,3043,"                updateColumn(column, agent_.crossConverters_.setObjectFromCharacterStream(resultSetMetaData_.types_[column - 1], x, ""US-ASCII"", length));"
java/client/org/apache/derby/client/am/ResultSet.java,5566,"                            ""US-ASCII"","
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,159," private boolean shouldCast(ValueNode newNode, ValueNode oldNode)"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,160, throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,161, {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,162,"  return shouldCast(newNode.getTypeServices(), oldNode.getTypeServices());"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,163, }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,164,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,165," private boolean shouldCast(DataTypeDescriptor newType, ValueNode oldNode)"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,166, throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,167, {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,168,"  return shouldCast(newType, oldNode.getTypeServices());"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,169, }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,170,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,171," private boolean shouldCast(ValueNode newNode, DataTypeDescriptor oldType)"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,172, throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,173, {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,174,"  return shouldCast(newNode.getTypeServices(), oldType);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,175, }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,176,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,299,"  // check if the ""then"" node is NULL"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,300,"  if (isNullNode(thenNode) && shouldCast(castType, thenNode)) {"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,302,  // otherwise recurse if it's a conditional
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,304,"   recastNullNodes(((ConditionalNode)thenNode).thenElseList, castType);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,306,"  // check if the ""else node is NULL"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,307,"  if (isNullNode(elseNode) && shouldCast(castType, elseNode)) {"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,309,  // otherwise recurse if it's a conditional
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,311,"   recastNullNodes(((ConditionalNode)elseNode).thenElseList, castType);"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,516,  if (logWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,518,   synchronized (logWriter) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,519,    e.printStackTrace(logWriter);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,527,  if (cloudscapeLogWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,529,   synchronized(cloudscapeLogWriter) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,530,    e.printStackTrace(cloudscapeLogWriter);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,546,  if (logWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,548,   synchronized(logWriter) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,549,    logWriter.println(msg);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,553,  if (cloudscapeLogWriter != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,554,   synchronized(cloudscapeLogWriter)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,3,   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc.TestDbMetaData
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,128,"            ""SPECIFIC_NAME"" });"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,135,"        { null, ""APP"", ""DUMMY1"", ""java.some.func"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,136,"        { null, ""APP"", ""DUMMY2"", ""java.some.func"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,137,"        { null, ""APP"", ""DUMMY3"", ""java.some.func"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,138,"        { null, ""APP"", ""DUMMY4"", ""java.some.func"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,141,"          GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,144,"          ""SYSCS_GET_DATABASE_PROPERTY"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,147,"          ""SYSCS_GET_RUNTIMESTATISTICS"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,150,"              ""SYSCS_GET_USER_ACCESS"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,153,"          ""BLOBCREATELOCATOR"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,156,"          ""BLOBGETBYTES"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,159,"          ""BLOBGETLENGTH"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,162,"          ""BLOBGETPOSITIONFROMBYTES"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,165,"          ""BLOBGETPOSITIONFROMLOCATOR"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,168,"          ""CLOBCREATELOCATOR"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,171,"          ""CLOBGETLENGTH"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,174,"          ""CLOBGETPOSITIONFROMLOCATOR"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,177,"          ""CLOBGETPOSITIONFROMSTRING"", GENERIC_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java,180,"          ""CLOBGETSUBSTRING"", GENERIC_NAME },"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1733,  //eg if getTables is called to only look for table types 'S' and
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1734,"  //'A', then 'S' will be used for first ? in TABLETYPE IN (?, ?, ?, ?)"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1735,"  //'A' will be used for second ? in TABLETYPE IN (?, ?, ?, ?) and"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1736,  //NULL will be used for third and fourth ?s in
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1738,"  //If the user hasn't asked for any specific table types, then the"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1739,"  //""else"" statement below will kick in. When the control comes to"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1740,"  //""else"" statement, it means that the user wants to see all the"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1741,"  //table types supported by Derby. And hence, we simply set first"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1742,"  //? to 'T', second ? to 'S', third ? to 'V' and fourth ? to 'A'."
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1743,"  //When a new table type is added to Derby in future, we will have"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1744,"  //to do another setString for that in the ""else"" statement for that"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1745,  //new table type.
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1746,  if (types != null  &&  types.length >= 1) {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1747,   int i=0;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1748,   final int numberOfTableTypesInDerby = 4;
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1749,   for (; i<types.length; i++){
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1750,    /*
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1751,     * Let's assume for now that the table type first char
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1752,     * corresponds to JBMS table type identifiers.
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1753,     *
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1754,     * The reason I have i+4 is because there are already 3 ?s in
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1755,     * the getTables sql before the ?s in the IN clause. Hence
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1756,     * setString for table types should be done starting 4th
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1757,     * parameter.
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1758,     */
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1759,"    s.setString(i+4, types[i].substring(0, 1));"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1760,   }
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1761,   for (; i<numberOfTableTypesInDerby; i++) {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1762,"    s.setNull(i+4, Types.CHAR);"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1763,   }
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1764,  } else {
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1765,"   s.setString(4, ""T"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1766,"   s.setString(5, ""S"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1767,"   s.setString(6, ""V"");"
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,1768,"   s.setString(7, ""A"");"
java/testing/org/apache/derbyTesting/junit/JDBC.java,69,     * just synonyms. Need work around for DERBY-1790 where
java/testing/org/apache/derbyTesting/junit/JDBC.java,70,     * passing a table type of SYNONYM fails.
java/testing/org/apache/derbyTesting/junit/JDBC.java,73,"        new String[] {""AA_DERBY-1790-SYNONYM""};"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4685,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4690,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4748,"                        setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4759,"                        setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4770,"                        setAsCharacterStream(ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8364,"    private static void setAsCharacterStream(PreparedStatement ps,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8373,
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,667,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,76,              dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,83,              dumpExpectedSQLExceptions(e);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/statementJdbc20.java,127,              dumpExpectedSQLExceptions(e);
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,173,   DirContext ctx = new InitialDirContext(env);
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,192, /**
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,356,    try {
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,357,"     initDirContextEnv.put(""com.sun.naming.ldap.trace.ber"","
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,358,"        new java.io.FileOutputStream(""CloudLDAP.out""));"
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,359,    } catch (java.io.IOException ie) {}
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,392,  DirContext ctx = new InitialDirContext(env);
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,401,"                                    fos = privNewFileOutputStream(""DerbyLDAP.out"");"
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,402,                                } catch (Exception e) {
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,403,                                    // If file creation fails do not stop execution.
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,413, /**
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,414,     * Construct a new FileOutputStream in a privilege block.
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,415,     *
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,416,  * @param fileName Filename to create
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,417,  * @return
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,418,  * @throws IOException
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,419,  */
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,420, private FileOutputStream privNewFileOutputStream(final String fileName) throws IOException{
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,421,     try {
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,422,            return ((FileOutputStream)AccessController.doPrivileged(
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,423,                        new PrivilegedExceptionAction() {
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,424,"                            public Object run() throws SecurityException, java.io.IOException {"
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,425,                                return new  FileOutputStream(fileName);
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,426,                            }
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,427,                        }));
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,428,        } catch (PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,429,            throw (SecurityException)pae.getException();
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,430,        }
java/engine/org/apache/derby/impl/jdbc/authentication/LDAPAuthenticationSchemeImpl.java,431,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,54,"        {""APP"",""dan"",""kreg"",""jeff"",""ames"",""jerry"",""francois"",""jamie"",""howardR""};"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,795,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,796,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,797,"    // DB2 LUW does not support Java object types for SMALLINT, INTEGER, BIGINT, REAL, DOUBLE"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,798,    // and these are the only types that can map to a primitive or an object type according
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,799,    // to SQL part 13. So always map to the primitive type. We can not use the getPrimitiveSignature()
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,800,    // as it (incorrectly but historically always has) maps a DECIMAL to a double.
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,801,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,802,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,814,        switch (returnType.getJDBCTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,815,        case java.sql.Types.SMALLINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,816,        case java.sql.Types.INTEGER:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,817,        case java.sql.Types.BIGINT:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,818,        case java.sql.Types.REAL:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,819,        case java.sql.Types.DOUBLE:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,820,         TypeCompiler tc = getTypeCompiler(returnTypeId);
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,821,         requiredType = tc.getCorrespondingPrimitiveTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,822,         if (!routineInfo.calledOnNullInput() && routineInfo.getParameterCount() != 0)
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,823,         {
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,824,          promoteName = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,825,         }
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,826,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,827,         break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,828,        default:
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,829,         requiredType = returnTypeId.getCorrespondingJavaTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,830,         break;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,831,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2807,"        st.execute(""create table brit13 (i int not null, j int not null, k """
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2808,"                + ""int, unique (i,j))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2844,        // not used unless DERBY-3182 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2845,        // String [][] expRSK =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2846,"        //    {""2"", ""K"", ""4"", ""INTEGER"", ""4"", null, ""10"", ""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2901,        // DERBY-3182: we aren't handling nullOk flag correctly we
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2902,"        // just drop nullable cols, we should skip an answer that"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2903,        // has nullable cols in it instead and look for another one.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2904,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2905,"        // result: columns i, j (WRONG) the correct answer is k:"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2906,        // the non-null columns of the table
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,736,  ClientThread clientThread =
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,759,  // Need to interrupt the memcheck thread if it is sleeping.
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,760,  if (mc != null)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,761,   mc.interrupt();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,762,
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,763,  //interrupt client thread
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,764,  clientThread.interrupt();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,765,
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,780,     ((DRDAConnThread)threadList.get(i)).close();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,781,     ((DRDAConnThread)threadList.get(i)).interrupt();
java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java,234,    serverThread.interrupt();
java/engine/org/apache/derby/iapi/services/context/ContextService.java,560,     active.interrupt();
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,108, ValueNode firstNonParameterNode;//The generated method will generate code to call coalesce on this non-parameter argument
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,155,    firstNonParameterNode = (ValueNode) argumentsList.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,282,"  firstNonParameterNode.generateExpression(acb, mb); //coalesce will be called on this non-parameter argument"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,414,"   printLabel(depth, ""argumentsList: "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java,1134,    }
java/engine/org/apache/derby/iapi/jdbc/ConnectionContext.java,24,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,568,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4392,  A dynamic result set was created in a procedure by a nested connection.
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4399,  this.owningStmt = owningStmt;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4400,  this.localConn = owningStmt.getEmbedConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1275,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1276,     resultsToWrap.finish(); // Don't need the result set any more
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1556,   if (param[0] == null)
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1557,    continue;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1558,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1560,   param[0] = null;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1561,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1562,   // ignore non-Derby result sets or results sets from another connection
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1563,   if (!(rs instanceof EmbedResultSet))
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1564,    continue;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1565,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1566,   EmbedResultSet lrs = (EmbedResultSet) rs;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1567,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1568,   if (lrs.getEmbedConnection().rootConnection != getEmbedConnection().rootConnection)
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1569,    continue;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1571,   // ignore closed result sets.
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1572,   if (lrs.isClosed)
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1573,    continue;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1575,   lrs.setDynamicResultSet(this);
java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java,27,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java,30," * Call the specified expression, ignoring the return, if any."
java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java,31, *
java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java,58,  close();
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1622,     * <P>
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1623,     * if b
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,860,     ** loss of precision.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,862,     if (newCost < 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,863,      newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,878,       newCost = recoverCostFromProposedJoinOrder();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,961,         recoverCostFromProposedJoinOrder();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1277, private double recoverCostFromProposedJoinOrder()
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1283,   recoveredCost +=
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1284,    optimizableList.getOptimizable(proposedJoinOrder[i])
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1285,     .getBestAccessPath().getCostEstimate().getEstimatedCost();
java/client/org/apache/derby/client/am/SectionManager.java,187,"        positionedUpdateCursorNameToResultSet_.put(cursorName, resultSet);"
java/client/org/apache/derby/client/am/SectionManager.java,191,        ResultSet rs = (ResultSet) positionedUpdateCursorNameToResultSet_.get(cursorName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java,57,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,259,    ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,260,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,268,    GeneratedClass  newGC = ps.getActivationClass();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,269,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,340, // my conneciton handle is being closed
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,341, public synchronized void notifyClose()
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,342, {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,343,  // tell my listeners I am closed
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,344,  if (eventListener != null && eventListener.size() > 0)
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,345,  {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,346,   ConnectionEvent closeEvent = new ConnectionEvent(this);
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,348,   for (Enumeration e = eventListener.elements();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,349,     e.hasMoreElements(); )
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,350,   {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,351,    ConnectionEventListener l =
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,352,     (ConnectionEventListener)e.nextElement();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,353,    l.connectionClosed(closeEvent);
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,354,   }
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,355,  }
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,356, }
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,434,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,438, public boolean closingConnection() throws SQLException {
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,439,  notifyClose();
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,420,  }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,196,            TestConfiguration.defaultSuite(DatabaseMetaDataTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,740,"                true, true, true, true, nullval, true, nullval,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,758,"                true, true, true, true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,770,"                true, true, true, true, true, true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1906,"        // DERBY-2307 Nullablity is wrong for columns 1,7,9 (1-based)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1913,"                true, true, true, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1914,"                true, true, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2300,"          true, false, false, true, // TABLE_SCHEM cannot be NULL in Derby"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2301,"          true, true, true, true,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2902,"                true, false, false, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2903,"                true, false, false, false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3221,"                    false, true, false, true, false, false, false, false};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3325,"        boolean [] nullability = {true,false,false,false,true,true,true,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3394,"        boolean [] nullability = {true,false,false,true,true,true,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3559,"        boolean [] nullability = {true,false,false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3560,"            true,true,true,true,true,false,true,true,true,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,3731,"        boolean [] nullability = {true,false,false,false,true,false};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4000,"            boolean [] nullability = {true,false,false,false,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4001,"                true,false,false,false,true,true,true,false,false,true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4259,"                true, false, false, true, true, true, true, true, false};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4261,"                true, false, false, true, true, true, true, true};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4326,"                true, false, true, true, true, true, true, true, true, false//};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4329,"                true, false, false, false, false, true, false, false, true, true,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4330,"                true, false, true, true, true, true, true, true, true//};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,196,            TestConfiguration.embeddedSuite(DatabaseMetaDataTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,740,"                true, true, false, true, nullval, true, nullval,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,742,"                nullval, nullval, true, true, true, true, true"
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,420,  Notify listners that connection is closed.
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,425,  //DERBY-2142 - Null out the connection handle BEFORE notifying listeners.
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,459,
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1087,"  methodCall.categorize(referencedTableMap, false);"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1089,  // Create the dependency map
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1091,  for (int index = 0; index < numTables; index++)
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1092,  {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1093,   if ((index != tableNumber) && referencedTableMap.get(index))
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1094,   {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1095,    dependencyMap.set(index);
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1096,   }
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1097,  }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,599,   int nextOptimizable = 0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,740,    nextOptimizable = proposedJoinOrder[joinPosition] + 1;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,741,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,758,     /* Check to make sure that all of the next optimizable's
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,759,      * dependencies have been satisfied.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,761,     if (nextOptimizable < numOptimizables)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,763,      Optimizable nextOpt =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,764,        optimizableList.getOptimizable(nextOptimizable);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,765,      if (! (nextOpt.legalJoinOrder(assignedTableMap)))
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,767,       if (optimizerTrace)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,769,"        trace(SKIPPING_JOIN_ORDER, nextOptimizable, 0, 0.0, null);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,771,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,772,       /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,773,       ** If this is a user specified join order then it is illegal.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,774,       */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,775,       if ( ! optimizableList.optimizeJoinOrder())
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,776,       {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,777,        if (optimizerTrace)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,778,        {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,779,"         trace(ILLEGAL_USER_JOIN_ORDER, 0, 0, 0.0, null);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,780,        }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,781,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,782,        throw StandardException.newException(SQLState.LANG_ILLEGAL_FORCED_JOIN_ORDER);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,783,       }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,784,       continue;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,786,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,787,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,788,     if (! found)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,789,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,790,      break;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,791,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,792,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,793,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,794,   }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,795,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,796,   /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,797,   ** We are going to try an optimizable at the current join order
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,798,   ** position.  Is there one already at that position?
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,799,   */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,800,   if (proposedJoinOrder[joinPosition] >= 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,801,   {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,802,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,803,    ** We are either going to try another table at the current
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,804,"    ** join order position, or we have exhausted all the tables"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,805,"    ** at the current join order position.  In either case, we"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,806,    ** need to pull the table at the current join order position
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,807,    ** and remove it from the join order.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,808,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,809,    Optimizable pullMe =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,810,     optimizableList.getOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,811,           proposedJoinOrder[joinPosition]);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,812,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,813,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,814,    ** Subtract the cost estimate of the optimizable being
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,815,    ** removed from the total cost estimate.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,816,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,817,"    ** The total cost is the sum of all the costs, but the total"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,818,    ** number of rows is the number of rows returned by the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,819,    ** innermost optimizable.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,820,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,821,    double prevRowCount;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,822,    double prevSingleScanRowCount;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,823,    int prevPosition = 0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,824,    if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,825,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,826,     prevRowCount = outermostCostEstimate.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,827,     prevSingleScanRowCount = outermostCostEstimate.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,828,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,829,    else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,830,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,831,     prevPosition = proposedJoinOrder[joinPosition - 1];
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,832,     CostEstimate localCE =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,833,      optimizableList.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,834,       getOptimizable(prevPosition).
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,835,        getBestAccessPath().
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,836,         getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,837,     prevRowCount = localCE.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,838,     prevSingleScanRowCount = localCE.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,839,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,840,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,841,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,842,"    ** If there is no feasible join order, the cost estimate"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,843,    ** in the best access path may never have been set.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,844,"    ** In this case, do not subtract anything from the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,845,"    ** current cost, since nothing was added to the current"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,846,    ** cost.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,847,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,848,    double newCost = currentCost.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,849,    double pullCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,850,    CostEstimate pullCostEstimate =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,851,        pullMe.getBestAccessPath().getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,852,    if (pullCostEstimate != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,853,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,854,     pullCost = pullCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,855,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,856,     newCost -= pullCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,857,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,858,     /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,859,     ** It's possible for newCost to go negative here due to
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,860,     ** loss of precision--but that should ONLY happen if the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,861,     ** optimizable we just pulled was at position 0.  If we
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,862,"     ** have a newCost that is <= 0 at any other time, then"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,863,     ** it's the result of a different kind of precision loss--
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,864,"     ** namely, the estimated cost of pullMe was so large that"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,865,     ** we lost the precision of the accumulated cost as it
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,866,     ** existed prior to pullMe. Then when we subtracted
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,867,"     ** pullMe's cost out, we ended up setting newCost to zero."
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,868,     ** That's an unfortunate side effect of optimizer cost
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,869,     ** estimates that grow too large. If that's what happened
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,870,"     ** here,try to make some sense of things by adding up costs"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,871,     ** as they existed prior to pullMe...
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,872,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,873,     if (newCost <= 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,874,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,875,      if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,876,       newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,877,      else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,878,       newCost = recoverCostFromProposedJoinOrder(false);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,879,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,880,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,882,"    /* If we are choosing a new outer table, then"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,883,     * we rest the starting cost to the outermostCost.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,884,     * (Thus avoiding any problems with floating point
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,885,     * accuracy and going negative.)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,886,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,887,    if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,888,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,889,     if (outermostCostEstimate != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,890,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,891,      newCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,892,     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,893,     else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,894,     {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,895,      newCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,897,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,899,    currentCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,900,"     newCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,901,"     prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,902,     prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,903,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,904,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,905,    ** Subtract from the sort avoidance cost if there is a
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,906,    ** required row ordering.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,907,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,908,    ** NOTE: It is not necessary here to check whether the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,909,"    ** best cost was ever set for the sort avoidance path,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,910,    ** because it considerSortAvoidancePath() would not be
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,911,    ** set if there cost were not set.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,912,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,913,    if (requiredRowOrdering != null)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,914,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,915,     if (pullMe.considerSortAvoidancePath())
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,917,      AccessPath ap = pullMe.getBestSortAvoidancePath();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,918,      double    prevEstimatedCost = 0.0d;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,919,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,920,      /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,921,      ** Subtract the sort avoidance cost estimate of the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,922,      ** optimizable being removed from the total sort
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,923,      ** avoidance cost estimate.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,924,      **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,925,"      ** The total cost is the sum of all the costs, but the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,926,      ** total number of rows is the number of rows returned
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,927,      ** by the innermost optimizable.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,928,      */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,929,      if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,930,      {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,931,       prevRowCount = outermostCostEstimate.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,932,       prevSingleScanRowCount = outermostCostEstimate.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,933,"       /* If we are choosing a new outer table, then"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,934,        * we rest the starting cost to the outermostCost.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,935,        * (Thus avoiding any problems with floating point
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,936,        * accuracy and going negative.)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,937,        */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,938,       prevEstimatedCost = outermostCostEstimate.getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,939,      }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,940,      else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,942,       CostEstimate localCE =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,943,        optimizableList.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,944,         getOptimizable(prevPosition).
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,945,          getBestSortAvoidancePath().
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,946,           getCostEstimate();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,947,       prevRowCount = localCE.rowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,948,       prevSingleScanRowCount = localCE.singleScanRowCount();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,949,       prevEstimatedCost = currentSortAvoidanceCost.getEstimatedCost() -
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,950,             ap.getCostEstimate().getEstimatedCost();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,953,"      // See discussion above for ""newCost""; same applies here."
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,954,      if (prevEstimatedCost <= 0.0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,956,       if (joinPosition == 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,957,        prevEstimatedCost = 0.0;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,958,       else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,960,        prevEstimatedCost =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,961,         recoverCostFromProposedJoinOrder(true);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,963,      }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,965,      currentSortAvoidanceCost.setCost(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,966,"       prevEstimatedCost,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,967,"       prevRowCount,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,968,       prevSingleScanRowCount);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,969,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,970,      /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,971,      ** Remove the table from the best row ordering.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,972,      ** It should not be necessary to remove it from
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,973,"      ** the current row ordering, because it is"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,974,      ** maintained as we step through the access paths
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,975,      ** for the current Optimizable.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,976,      */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,977,      bestRowOrdering.removeOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,978,             pullMe.getTableNumber());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,980,      /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,981,"      ** When removing a table from the join order,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,982,      ** the best row ordering for the remaining outer tables
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,983,      ** becomes the starting point for the row ordering of
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,984,      ** the current table.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,985,      */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,986,      bestRowOrdering.copy(currentRowOrdering);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,988,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,989,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,990,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,991,    ** Pull the predicates at from the optimizable and put
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,992,    ** them back in the predicate list.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,993,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,994,    ** NOTE: This is a little inefficient because it pulls the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,995,"    ** single-table predicates, which are guaranteed to always"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,996,    ** be pushed to the same optimizable.  We could make this
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,997,    ** leave the single-table predicates where they are.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,998,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,999,    pullMe.pullOptPredicates(predicateList);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1000,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1001,    /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1002,    ** When we pull an Optimizable we need to go through and
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1003,    ** load whatever best path we found for that Optimizable
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1004,    ** with respect to this OptimizerImpl.  The reason is that
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1005,    ** we could be pulling the Optimizable for the last time
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1006,"    ** (before returning false), in which case we want it (the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1007,    ** Optimizable) to be holding the best access path that it
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1008,    ** had at the time we found bestJoinOrder.  This ensures
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1009,    ** that the access path which is generated and executed for
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1010,    ** the Optimizable matches the the access path decisions
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1011,    ** made by this OptimizerImpl for the best join order.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1012,    **
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1013,    ** NOTE: We we only reload the best plan if it's necessary
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1014,    ** to do so--i.e. if the best plans aren't already loaded.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1015,    ** The plans will already be loaded if the last complete
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1016,"    ** join order we had was the best one so far, because that"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1017,"    ** means we called ""rememberAsBest"" on every Optimizable"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1018,"    ** in the list and, as part of that call, we will run through"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1019,    ** and set trulyTheBestAccessPath for the entire subtree.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1020,"    ** So if we haven't tried any other plans since then,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1021,    ** we know that every Optimizable (and its subtree) already
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1022,    ** has the correct best plan loaded in its trulyTheBest
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1023,    ** path field.  It's good to skip the load in this case
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1024,    ** because 'reloading best plans' involves walking the
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1025,"    ** entire subtree of _every_ Optimizable in the list, which"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1026,    ** can be expensive if there are deeply nested subqueries.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1027,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1028,    if (reloadBestPlan)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1029,"     pullMe.updateBestPlanMap(FromTable.LOAD_PLAN, this);"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1031,    /* Mark current join position as unused */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1032,    proposedJoinOrder[joinPosition] = -1;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1121,    /* Clear the assigned table map for the previous position
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1122,     * NOTE: We need to do this here to for the dependency tracking
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1123,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1124,    if (joinPosition >= 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1125,    {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1126,     Optimizable pullMe =
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1127,      optimizableList.getOptimizable(
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1128,           proposedJoinOrder[joinPosition]);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1129,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1130,     /*
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1131,     ** Clear the bits from the table at this join position.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1132,     ** This depends on them having been set previously.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1133,     ** NOTE: We need to do this here to for the dependency tracking
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1134,     */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1135,     assignedTableMap.xor(pullMe.getReferencedTableMap());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1136,    }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1137,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1195,   /* Set the assigned table map to be exactly the tables
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1196,    * in the current join order.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1197,    */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1198,   assignedTableMap.clearAll();
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1199,   for (int index = 0; index <= joinPosition; index++)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1200,   {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1201,    assignedTableMap.or(optimizableList.getOptimizable(proposedJoinOrder[index]).getReferencedTableMap());
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1202,   }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1203,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,620,     * Test that a PooledConnection can be reused during the close
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,621,     * event raised by the closing of its logical connection.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,628,     // TEMP - seems to fail on network client
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,629,     if (!usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,630,      return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,631,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1152,"                    return Main.getTextMessage(""SIF01.V"", cls, se.getMessage());"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,303,  boolean duplicate = false;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,304,        long conglomId = 0;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,305,
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,316,"   /* For an index to be considered a duplicate of already existing index, the"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,317,    * following conditions have to be satisfied:
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,323,    */
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,325,   if ((bcps.length == baseColumnPositions.length) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,326,       (irg.isUnique() || !unique) &&
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,327,    indexType.equals(irg.indexType()))
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,336,   if (j == baseColumnPositions.length) // duplicate
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,352,    //Duplicate indexes share the physical conglomerate underneath
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,354,    indexRowGenerator = cd.getIndexDescriptor();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,356,    //Duplicate indexes will have unqiue logical conglomerate UUIDs.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,358,    duplicate = true;
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,365,   * entry into SYSCONGLOMERATES.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,368,  if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,419,  if (! duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,530,"   /* now that we got indexTemplateRow, done for duplicate index"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,532,   if (duplicate)
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,649,  // Create a conglomerate descriptor with the conglomId filled in and
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,650,  // add it.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,653,  ConglomerateDescriptor cgd =
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,654,"   ddg.newConglomerateDescriptor(conglomId, indexName, true,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,655,"            indexRowGenerator, isConstraint,"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,656,"            conglomerateUUID, td.getUUID(), sd.getUUID() );"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,658,"  dd.addDescriptor(cgd, sd, DataDictionary.SYSCONGLOMERATES_CATALOG_NUM, false, tc);"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,660,  // add newly added conglomerate to the list of conglomerate descriptors
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,661,  // in the td.
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,662,  ConglomerateDescriptorList cdl = td.getConglomerateDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,663,  cdl.add(cgd);
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,673,"     new StatisticsDescriptor(dd, dd.getUUIDFactory().createUUID(),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,674,"            cgd.getUUID(), td.getUUID(), ""I"", new StatisticsImpl(numRows, c[i]),"
java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java,675,            i + 1);
java/testing/org/apache/derbyTesting/junit/JDBC.java,526,     * Assert that the statement has no more results. Logic taken
java/testing/org/apache/derbyTesting/junit/JDBC.java,527,     * from javadoc for java.sql.Statement.getMoreResults.
java/testing/org/apache/derbyTesting/junit/JDBC.java,533,        Assert.assertTrue((s.getMoreResults() == false)
java/testing/org/apache/derbyTesting/junit/JDBC.java,534,                && (s.getUpdateCount() == -1));
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,351,     * @param lcc
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,352,     * @param td
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,355," public void drop(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,356,         TableDescriptor td)
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,357, throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,358, {
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,645,"    public void drop(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,646,            boolean clearDependencies)
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,647,        throws StandardException
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,692,"                        conglomDescs[i].drop(lcc, table);"
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,381,     if (dd.getConglomerateDescriptors(getConglomerateNumber()).length == 1)
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,386,         /* Drop the conglomerate */
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,388,        }
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,389,
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,399,     /* TODO: DERBY-3299 incremental development; just return null
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,400,      * for now.
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,401,      */
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,402,     return null;
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,404,
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,609,"   drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,875,"            cd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,885,"   cd.drop(lcc, false);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,903,"                    fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1756,"     cd.drop(activation.getLanguageConnectionContext(), td);"
java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java,230,"        conDesc.drop(lcc, !cascadeOnRefKey);"
java/engine/org/apache/derby/impl/sql/execute/DropConstraintConstantAction.java,246,"    fkcd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/DropIndexConstantAction.java,174,"  cd.drop(lcc, td);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,315,"   cd.drop(lcc, true);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,346,"   cd.drop(lcc, false);"
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,369,"     fkcd.drop(lcc, true);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java,99,"        ""views"","
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,943,     * and throws a SQLException with the expected state.
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,949,     * @param sqlState expected sql state.
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,953,"    public static void assertStatementError(String sqlState,"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,959,"            fail(""Expected error '"" + sqlState +"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,960,"                ""' but no error was thrown."");"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,962,"            assertSQLState(sqlState, se);"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,952,     * @param sqlStates[]  expected sql state.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,472,   if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,576,   if (columnName.equals( resultColumn.getName()) )
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java,38," public BrokeredCallableStatement(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java,39,"  super(control, jdbcLevel, sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement30.java,38," public BrokeredCallableStatement30(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement30.java,39,"  super(control, jdbcLevel, sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,37,"    public BrokeredCallableStatement40(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException{"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,38,"        super(control,jdbcLevel,sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,450,"  return new BrokeredStatement(statementControl, getJDBCLevel());"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,550, int getJDBCLevel() { return 2;}
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,551,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,192,"  return new BrokeredPreparedStatement30(statementControl, getJDBCLevel(), sql, generatedKeys);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,195,"  return new BrokeredCallableStatement30(statementControl, getJDBCLevel(), sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,198, int getJDBCLevel() { return 3;}
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,199,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,260,"            return new BrokeredStatement40(statementControl, getJDBCLevel());"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,268,"            return new BrokeredPreparedStatement40(statementControl, getJDBCLevel(), sql, generatedKeys);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,276,"            return new BrokeredCallableStatement40(statementControl, getJDBCLevel(), sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,298,    final int getJDBCLevel() { return 4;}
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,299,
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java,44,"    public BrokeredPreparedStatement(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java,46,"        super(control, jdbcLevel);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement30.java,33," public BrokeredPreparedStatement30(BrokeredStatementControl control, int jdbcLevel, String sql, Object generatedKeys) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement30.java,34,"  super(control, jdbcLevel, sql);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,35,"    public BrokeredPreparedStatement40(BrokeredStatementControl control, int jdbcLevel, String sql, Object generatedKeys) throws SQLException {"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,36,"        super(control, jdbcLevel, sql,generatedKeys);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,53, final int jdbcLevel;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,64,"    BrokeredStatement(BrokeredStatementControl control, int jdbcLevel) throws SQLException"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,67,  this.jdbcLevel = jdbcLevel;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,490,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,491,  if (jdbcLevel == 2)
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,492,"   newStatement = conn.createStatement(resultSetType, resultSetConcurrency);"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,493,  else
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,494,"   newStatement = conn.createStatement(resultSetType, resultSetConcurrency,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,34,     * @param jdbcLevel int
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,39,"    BrokeredStatement40(BrokeredStatementControl control, int jdbcLevel)"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,41,"        super(control, jdbcLevel);"
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,212,                    throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,213,"                         SQLState.LANG_MODIFY_COLUMN_EXISTING_CONSTRAINT, name);"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,1073,"                throw StandardException.newException(SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS, colName);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2604,    if (errorMsg.equals(SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY))
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2607,"      SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY,"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1304," String LANG_NULL_DATA_IN_PRIMARY_KEY                             = ""X0Y63.S"";"
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,218,   if (addedColumnOffset >= 0 &&
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,219,     target instanceof SelectNode &&
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,220,     ( (SelectNode)target ).hasDistinct())
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,221,    throw StandardException.newException(SQLState.LANG_DISTINCT_ORDER_BY_EXPRESSION);
java/client/org/apache/derby/client/net/Request.java,196,        // save the length position and skip
java/client/org/apache/derby/client/net/Request.java,197,        // note: the length position is saved so it can be updated
java/client/org/apache/derby/client/net/Request.java,198,        // with a different value later.
java/client/org/apache/derby/client/net/Request.java,200,        // always turn on chaining flags... this is helpful for lobs...
java/client/org/apache/derby/client/net/Request.java,201,        // these bytes will get rest if dss lengths are finalized.
java/client/org/apache/derby/client/net/Request.java,205,        // insert the manditory 0xD0 and the dssType
java/client/org/apache/derby/client/net/Request.java,215,        // write the request correlation id
java/client/org/apache/derby/client/net/Request.java,824,    // signal the completion of a Dss Layer A object. The length of
java/client/org/apache/derby/client/net/Request.java,825,    // dss object will be calculated based on the difference between the
java/client/org/apache/derby/client/net/Request.java,826,"    // start of the dss, saved on the beginDss call, and the current"
java/client/org/apache/derby/client/net/Request.java,827,    // offset into the buffer which marks the end of the data.  In the event
java/client/org/apache/derby/client/net/Request.java,828,"    // the length requires the use of continuation Dss headers, one for each 32k"
java/client/org/apache/derby/client/net/Request.java,829,"    // chunk of data, the data will be shifted and the continuation headers"
java/client/org/apache/derby/client/net/Request.java,830,    // will be inserted with the correct values as needed.
java/client/org/apache/derby/client/net/Request.java,831,"    // Note: In the future, we may try to optimize this approach"
java/client/org/apache/derby/client/net/Request.java,832,    // in an attempt to avoid these shifts.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,630,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,631,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,632,     * Verifies error messages priviously generated.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,633,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,634,    private void verifyError() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,635,        Statement stmt = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,636,"        PreparedStatement ps = prepareStatement(""select text "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,637,"                                    ""from errormessage where state = ?"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,638,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,639,"            stmt.execute(""alter table t1 alter column i null"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,640,"            fail (""expected error while setting primary key "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,641,"                    ""column to nullable"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,642,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,643,"            assertSQLState(""expected state 42Z20"", ""42Z20"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,644,"            ps.setString(1, e.getSQLState());"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,645,            ResultSet rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,646,            rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,647,"            assertEquals(""error message mismatch"", rs.getString(1),"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,648,                                    e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,649,            rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,650,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,651,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,652,"            stmt.execute(""alter table t1 add constraint  uidx "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,653,"                    ""unique(j)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,654,"            fail (""expected error while creating unique constraint "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,655,"                    ""over nullable column"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,656,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,657,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,658,"            assertSQLState(""expected state 42831"", ""42831"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,659,"            ps.setString(1, e.getSQLState());"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,660,            ResultSet rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,661,            rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,662,"            assertEquals(""error message mismatch"", rs.getString(1),"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,663,                                    e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,664,            rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,665,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,666,        stmt.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,667,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,668,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,669,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,670,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,671,     * Generates error messages and stores in a table.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,672,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,673,    private void prepareTable() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,674,        Statement stmt = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,675,"        stmt.executeUpdate(""create table errormessage (state varchar (6), "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,676,"                                            ""text varchar (200))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,677,"        PreparedStatement ps = prepareStatement(""insert into errormessage "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,678,"                    ""(state, text) values (?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,679,"        stmt.executeUpdate(""create table t1 (i integer primary key, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,680,"                                                            ""j integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,681,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,682,"            stmt.execute(""alter table t1 alter column i null"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,683,"            fail (""expected error while setting primary key "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,684,"                    ""column to nullable"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,685,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,686,"            assertSQLState(""expected state 42Z20"", ""42Z20"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,687,"            ps.setString(1, e.getSQLState());"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,688,"            ps.setString(2, e.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,689,            ps.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,690,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,691,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,692,"            stmt.execute(""alter table t1 add constraint  uidx "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,693,"                    ""unique(j)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,694,"            fail (""expected error while creating unique constraint "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,695,"                    ""over nullable column"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,696,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,697,"            assertSQLState(""expected state 42831"", ""42831"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,698,"            ps.setString(1, e.getSQLState());"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,699,"            ps.setString(2, e.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,700,            ps.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,701,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,702,        stmt.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,703,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,704,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,705,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,706,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,707,     * check if error message generated during soft upgrade is
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,708,     * same as privious version.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,709,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,710,    public void testErrorMessage () throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,711,        switch (getPhase()) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,712,            case PH_CREATE:
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,713,                prepareTable();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,714,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,715,            case PH_SOFT_UPGRADE:
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,716,                verifyError();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,717,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,718,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_4.java,719,    }
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,200,                synchronized(this) {
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,201,                    shippingInterval = calculateSIfromFI();
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,202,                    if (shippingInterval != -1) {
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,203,                        wait(shippingInterval);
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,305,        synchronized(this) {
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,309,            notify();
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,365,            synchronized (this) {
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,366,                notify();
java/client/org/apache/derby/client/ClientPooledConnection.java,371,     * Used by <code>LogicalConnection.close</code> when it disassociates itself
java/client/org/apache/derby/client/ClientPooledConnection.java,372,     * from the pooled connection.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,173,        // Due to a bug following cannot be run for client - DERBY-3379
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,174,"        // To run this fixture with client, add to getClientSuite(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,175,"        // when DERBY-3379 is fixed, remove from here (and client) and"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,176,        // move to baseSuite.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,177,"        suite.addTest(new J2EEDataSourceTest(""testPooledReuseOnClose""));"
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,420,        int buffers = logBuffer.DEFAULT_NUMBER_LOG_BUFFERS;
java/engine/org/apache/derby/impl/store/replication/master/MasterController.java,311,            transmitter.sendMessage(mesg);
java/engine/org/apache/derby/impl/store/replication/master/MasterController.java,312,            ack = transmitter.readMessage();
java/engine/org/apache/derby/impl/store/replication/master/MasterController.java,317,        } catch (ClassNotFoundException cnfe) {
java/engine/org/apache/derby/impl/store/replication/master/MasterController.java,318,            handleFailoverFailure(cnfe);
java/engine/org/apache/derby/impl/store/replication/master/MasterController.java,465,"            transmitter = new ReplicationMessageTransmit(slavehost, slaveport);"
java/engine/org/apache/derby/impl/store/replication/master/MasterController.java,513,                    transmitter = new ReplicationMessageTransmit
java/engine/org/apache/derby/impl/store/replication/master/MasterController.java,514,"                            (slavehost, slaveport);"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,372,     * or a connection failure occurs.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,387,        return (ReplicationMessage)socketConn.readMessage();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,66,"    public ReplicationMessageTransmit(String hostName, int portNumber)"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,67,    throws UnknownHostException {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,123,        //The reads on the InputStreams obtained from the socket on the
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,124,        //transmitter should not hang indefinitely. Use the timeout
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,125,        //used for the connection establishment here to ensure that the
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,126,        //reads timeout after the timeout period mentioned for the
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,127,        //connection.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,128,        s.setSoTimeout(timeout_);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,132,        //send the initiate message and receive acknowledgment
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,133,        sendInitiatorAndReceiveAck(synchOnInstant);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,165,     * Used to read a replication message sent by the slave. This method
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,166,     * would wait on the connection from the slave until a message is received
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,167,     * or a connection failure occurs.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,168,     *
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,169,     * @return the reply message.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,171,     * @throws ClassNotFoundException Class of a serialized object cannot
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,172,     *                                be found.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,174,     * @throws IOException 1) if an exception occurs while reading from the
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,175,     *                        stream.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,178,    public ReplicationMessage readMessage() throws
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,179,"        ClassNotFoundException, IOException {"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,181,        return (ReplicationMessage)socketConn.readMessage();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,208,    private void sendInitiatorAndReceiveAck(long synchOnInstant)
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,215,        sendMessage(initiatorMsg);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,216,        verifyMessageAck(readMessage());
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,222,        sendMessage(initiatorMsg);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,223,        verifyMessageAck(readMessage());
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,239,    private void verifyMessageAck(ReplicationMessage ack)
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,243,        if (ack.getType() == ReplicationMessage.TYPE_ACK) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,244,            return;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,245,        } else if (ack.getType() == ReplicationMessage.TYPE_ERROR) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,247,            String exception[] = (String[])ack.getMessage();
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,79,    private volatile boolean connectedToMaster = false;
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,269,        if (!forcedStop && connectedToMaster){
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,277,        if (connectedToMaster){
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,342,            connectedToMaster = true;
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,372,        connectedToMaster = false;
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1780,"    String REPLICATION_CONNECTION_EXCEPTION                        = ""XRE04"";"
java/engine/org/apache/derby/impl/sql/compile/VerifyAggregateExpressionsVisitor.java,85,    throw StandardException.newException(SQLState.LANG_INVALID_GROUPED_SELECT_LIST);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,232,"                ""42Y30"", ""select c1+c2, sum(c3) from test group by c1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,234,"                ""42Y30"", ""select c1,c2, sum(c3) from test group by c1+c2,c1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,236,"                ""42Y30"", ""select c1+c2, sum(c3) from test group by 1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,242,"                ""42Y30"", ""select c1 as c2, sum(c3) from test group by c2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,244,"                ""42Y30"", ""select c1+(c2+c3), sum(c3) from test group by c3, (c1+c2)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,486,"                ""42Y30"", ""select c1+1, count(*) from test group by c1+2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,490,"                ""42Y30"", ""select (cast (c as char(2))), count(*) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,495,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,500,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,506,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,509,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,512,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,515,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,518,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,524,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByExpressionTest.java,527,"                ""42Y30"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,237,"        assertStatementError(""42Y30"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,247,"        assertStatementError(""42Y30"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,250,"        assertStatementError(""42Y30"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,253,"        assertStatementError(""42Y30"", st,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1544,"        assertStatementError(""42Y30"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1546,"        assertStatementError(""42Y30"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1548,"        assertStatementError(""42Y30"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,1700,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1525,      false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1566,      false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8045,"  * @param list  The list to build, if supplied.  If null, then caller expects"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8046,  *     a single descriptor
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8070,  TransactionController tc;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8073,  // Get the current transaction controller
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8074,  tc = getTransactionCompile();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8075,
java/engine/org/apache/derby/impl/sql/execute/CreateSchemaConstantAction.java,103,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,82,    @param activation activation
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,83,    @param schemaName name of the schema
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,95,  TransactionController tc = activation.getLanguageConnectionContext().getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,99,            ConstantAction csca
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,102,            try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,103,                csca.executeConstantAction(activation);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,104,            } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,105,                if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,106,                    .equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,107,"                    // Ignore ""Schema already exists"". Another thread has"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,108,                    // probably created it after we checked for it
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,109,                } else {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,110,                    throw se;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,111,                }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,112,            }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,113,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,677,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,678,// /* FOR TESTING
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,679,// *****************************************************
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,680,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,681,   private static byte[] holder = new byte[8];
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,682, private static  ArrayOutputStream aos = new ArrayOutputStream(holder);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,683, private static  DataOutput out = new DataOutputStream(aos);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,684,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,685, private static  ArrayInputStream ais = new ArrayInputStream(holder);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,686, private static  DataInput in = new DataInputStream(ais);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,687, private static  InputStream in_stream = ais;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,688,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,689,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,690,"    private static short checkInt(int i, short oldLength) throws IOException {"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,691,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,692,  aos.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,693,"  int length = CompressedNumber.writeInt(out, i);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,694,  if (length != oldLength) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,695,"   System.out.println(""changing length to "" + length + "" at value "" + i + "" 0x"" + Integer.toHexString(i));"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,696,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,697,   oldLength = (short) length;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,698,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,699,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,700,  int writtenBytes = aos.getPosition();
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,701,  if (writtenBytes != length) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,702,"   System.out.println(""MISMATCH written bytes  expected "" + length + "" got "" + writtenBytes);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,703,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,704,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,705,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,706,  if (length != CompressedNumber.sizeInt(i)) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,707,"   System.out.println(""MISMATCH sizeInt() bytes  expected "" + length + "" got "" + CompressedNumber.sizeInt(i));"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,708,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,709,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,710,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,711,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,712,  int value = CompressedNumber.readInt(in);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,713,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,714,"   System.out.println(""MISMATCH value readInt(DataInput) expected "" + i + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,715,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,716,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,717,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,718,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,719,  value = ais.readCompressedInt();
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,720,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,721,"   System.out.println(""MISMATCH value readInt(DataInput) expected "" + i + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,722,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,723,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,724,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,725,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,726,  value = CompressedNumber.readInt(in_stream);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,727,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,728,"   System.out.println(""MISMATCH value in readInt(InputStream) expected "" + i + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,729,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,730,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,731,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,732,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,733,"  value = CompressedNumber.readInt(holder, 0);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,734,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,735,   System.out.println(
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,736,"                ""MISMATCH frome readInt(byte[], offset) value expected "" +"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,737,"                i + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,738,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,739,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,740,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,741,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,742,  int skipLength = CompressedNumber.skipInt(in);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,743,  if (skipLength != length) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,744,"   System.out.println(""MISMATCH skip length expected "" + length + "" got "" + skipLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,745,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,746,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,747,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,748,"        int value_plus_int_length = readIntAndReturnIntPlusOverhead(holder, 0);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,749,        if (value_plus_int_length != (length + i + 1)) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,750,"   System.out.println(""MISMATCH readIntAndReturnIntPlusOverhead() return expected "" + (length + i) + "" got "" + value_plus_int_length);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,751,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,752,        }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,753,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,754,  int skipPosition = ais.getPosition();
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,755,  if (skipPosition != length) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,756,"   System.out.println(""MISMATCH skip position expected "" + length + "" got "" + skipPosition);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,757,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,758,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,759,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,760,  return oldLength;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,761, }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,762,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,763,"    private static short checkLong(long i, short oldLength) throws IOException {"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,764,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,765,  aos.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,766,"  int length = CompressedNumber.writeLong(out, i);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,767,  if (length != oldLength) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,768,"   System.out.println(""changing length to "" + length + "" at value "" + i + "" 0x"" + Long.toHexString(i));"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,769,   oldLength = (short) length;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,770,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,771,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,772,  int writtenBytes = aos.getPosition();
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,773,  if (writtenBytes != length) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,774,"   System.out.println(""MISMATCH written bytes  expected "" + length + "" got "" + writtenBytes);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,775,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,776,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,777,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,778,  if (length != CompressedNumber.sizeLong(i)) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,779,"   System.out.println(""MISMATCH sizeLong() bytes  expected "" + length + "" got "" + CompressedNumber.sizeLong(i));"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,780,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,781,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,782,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,783,"  long value = CompressedNumber.readLong(holder, 0);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,784,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,785,   for (int j = 0; j < 8; j++) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,786,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,787,    System.out.println(Integer.toHexString((int) holder[j]));
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,788,   }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,789,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,790,   System.out.println(
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,791,"                ""MISMATCH in readLong(byte[], offset) value expected "" +"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,792,"                Long.toHexString(i) + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,793,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,794,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,795,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,796,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,797,  value = CompressedNumber.readLong(in_stream);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,798,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,799,   for (int j = 0; j < 8; j++) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,800,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,801,    System.out.println(Integer.toHexString((int) holder[j]));
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,802,   }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,803,"   System.out.println(""MISMATCH value in readLong(InputStream) expected "" + Long.toHexString(i) + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,804,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,805,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,806,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,807,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,808,  value = ais.readCompressedLong();
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,809,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,810,   for (int j = 0; j < 8; j++) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,811,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,812,    System.out.println(Integer.toHexString((int) holder[j]));
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,813,   }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,814,"   System.out.println(""MISMATCH value in readLong(InputStream) expected "" + Long.toHexString(i) + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,815,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,816,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,817,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,818,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,819,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,820,  value = CompressedNumber.readLong(in);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,821,  if (value != i) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,822,   for (int j = 0; j < 8; j++) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,823,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,824,    System.out.println(Integer.toHexString((int) holder[j]));
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,825,   }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,826,"   System.out.println(""MISMATCH value in readLong(DataInput) expected "" + Long.toHexString(i) + "" got "" + value);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,827,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,828,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,829,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,830,  ais.setPosition(0);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,831,  int skipLength = CompressedNumber.skipLong(in);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,832,  if (skipLength != length) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,833,"   System.out.println(""MISMATCH skip length expected "" + length + "" got "" + skipLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,834,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,835,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,836,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,837,  int skipPosition = ais.getPosition();
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,838,  if (skipPosition != length) {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,839,"   System.out.println(""MISMATCH skip position expected "" + length + "" got "" + skipPosition);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,840,   System.exit(1);
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,841,  }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,842,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,843,  return oldLength;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,844, }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,845,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,846, public static void main(String[] args) throws IOException {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,847,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,848,  short oldLength = -1;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,849,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,850,"  System.out.println(""** Testing Int"");"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,851,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,852,"  oldLength = checkInt(0, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,853,"  oldLength = checkInt(1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,854,"  oldLength = checkInt(2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,855,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,856,"  oldLength = checkInt(0x3f - 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,857,"  oldLength = checkInt(0x3f - 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,858,"  oldLength = checkInt(0x3f - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,859,"  oldLength = checkInt(0x3f - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,860,"  oldLength = checkInt(0x3f    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,861,"  oldLength = checkInt(0x3f + 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,862,"  oldLength = checkInt(0x3f + 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,863,"  oldLength = checkInt(0x3f + 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,864,"  oldLength = checkInt(0x3f + 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,865,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,866,"  oldLength = checkInt(0x3f80 - 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,867,"  oldLength = checkInt(0x3f80 - 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,868,"  oldLength = checkInt(0x3f80 - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,869,"  oldLength = checkInt(0x3f80 - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,870,"  oldLength = checkInt(0x3f80    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,871,"  oldLength = checkInt(0x3f80 + 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,872,"  oldLength = checkInt(0x3f80 + 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,873,"  oldLength = checkInt(0x3f80 + 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,874,"  oldLength = checkInt(0x3f80 + 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,875,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,876,"  oldLength = checkInt(0x3fff - 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,877,"  oldLength = checkInt(0x3fff - 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,878,"  oldLength = checkInt(0x3fff - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,879,"  oldLength = checkInt(0x3fff - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,880,"  oldLength = checkInt(0x3fff    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,881,"  oldLength = checkInt(0x3fff + 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,882,"  oldLength = checkInt(0x3fff + 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,883,"  oldLength = checkInt(0x3fff + 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,884,"  oldLength = checkInt(0x3fff + 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,885,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,886,"  oldLength = checkInt(Integer.MAX_VALUE - 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,887,"  oldLength = checkInt(Integer.MAX_VALUE - 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,888,"  oldLength = checkInt(Integer.MAX_VALUE - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,889,"  oldLength = checkInt(Integer.MAX_VALUE - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,890,"  oldLength = checkInt(Integer.MAX_VALUE    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,891,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,892,        oldLength = -1;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,893,        for (int i = 0; i < 0xf0000; i++)
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,894,        {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,895,"            oldLength = checkInt(i, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,896,        }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,897,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,898,        // takes 30 minutes to run.
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,899,        //
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,900,        // for (int i = 0; i < Integer.MAX_VALUE; i++)
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,901,        // {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,902,        // if (i % 0x00800000 == 0)
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,903,"        // System.out.println(""checking: "" + i);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,904,        //
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,905,"        // oldLength = checkInt(i, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,906,        // }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,907,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,908,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,909,"  System.out.println(""** Testing Long"");"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,910,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,911,        oldLength = -1;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,912,        for (int i = 0; i < 0xf0000; i++)
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,913,        {
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,914,"            oldLength = checkLong(i, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,915,        }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,916,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,917,  oldLength = -1;
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,918,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,919,"  oldLength = checkLong(0, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,920,"  oldLength = checkLong(1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,921,"  oldLength = checkLong(2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,922,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,923,"  oldLength = checkLong(0x3fff - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,924,"  oldLength = checkLong(0x3fff - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,925,"  oldLength = checkLong(0x3fff    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,926,"  oldLength = checkLong(0x3fff + 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,927,"  oldLength = checkLong(0x3fff + 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,928,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,929,"  oldLength = checkLong(0x3fffffff - 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,930,"  oldLength = checkLong(0x3fffffff - 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,931,"  oldLength = checkLong(0x3fffffff - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,932,"  oldLength = checkLong(0x3fffffff - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,933,"  oldLength = checkLong(0x3fffffff    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,934,"  oldLength = checkLong(0x3fffffff + 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,935,"  oldLength = checkLong(0x3fffffff + 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,936,"  oldLength = checkLong(0x3fffffff + 3, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,937,"  oldLength = checkLong(0x3fffffff + 4, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,938,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,939,"  oldLength = checkLong(0x70000000 - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,940,"  oldLength = checkLong(0x70000000 - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,941,"  oldLength = checkLong(0x70000000    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,942,"  oldLength = checkLong(0x70000000 + 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,943,"  oldLength = checkLong(0x70000000 + 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,944,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,945,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,946,"  oldLength = checkLong(Long.MAX_VALUE - 2, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,947,"  oldLength = checkLong(Long.MAX_VALUE - 1, oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,948,"  oldLength = checkLong(Long.MAX_VALUE    , oldLength);"
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,949,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,950,
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,951, }
java/engine/org/apache/derby/iapi/services/io/CompressedNumber.java,952,// ********************************************************/
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,3,   Derby - Class org.apache.derbyTesting.unitTests.CompressedNumberTest
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,75,            checkLong(dataToTest[i]);
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,80,        for (int i = 0; i < 0xf0000; i++){
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,81,            checkLong(i);
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,102,            checkInt(dataToTest[i]);
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,108,             checkInt(i);
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,113,//             checkInt(i);
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,124,    private void checkInt(int i) throws IOException {
java/testing/org/apache/derbyTesting/unitTests/junit/CompressedNumberTest.java,167,    private void checkLong(long l) throws IOException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java,68,"        ""case"","
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,637,   (action != DependencyManager.SET_TRIGGERS_DISABLE)
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,302,     } else if (statPerm instanceof StatementSchemaPermission
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,303,       || statPerm instanceof StatementRoutinePermission)
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,305,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,6067,
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,166,
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,26,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,138,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java,69,"        ""constantExpression"","
java/engine/org/apache/derby/iapi/types/SQLBinary.java,1056,"       ""XX-RESOLVE-XX"","
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,74,"    private void testBlobLength(boolean lengthless) throws SQLException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,82,        LoopingAlphabetStream stream = new LoopingAlphabetStream(LONG_BLOB_LENGTH);
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,98,"            ps.setBinaryStream(2, stream,LONG_BLOB_LENGTH);"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,99,        ps.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,171,        testBlobLength(false);
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,186,        testBlobLength(true);
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2082,"  // DERBY-3745 We want to avoid the thread leaking class loaders,"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2083,  // so we make the context class loader null before we create the
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2084,  // thread.
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2085,  ClassLoader savecl = null;
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2086,  boolean hasGetClassLoaderPerms = false;
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2087,  try {
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2088,   savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2089,   hasGetClassLoaderPerms = true;
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2090,  }  catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2091,"   // ignore security exception. Earlier versions of Derby, before"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2092,   // the DERBY-3745 fix did not require getClassLoader permissions.
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2093,   // We may leak class loaders if we are not able to get the
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2094,"   // class loader, but we cannot just fail."
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2095,  }
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2096,  if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2097,   PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2098,"         Thread.currentThread(), null);"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2100,  if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2101,   PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2102,"         Thread.currentThread(), savecl);"
java/engine/org/apache/derby/iapi/types/SQLChar.java,558,    public int  getLength() throws StandardException
java/engine/org/apache/derby/iapi/types/SQLChar.java,559,    {
java/engine/org/apache/derby/iapi/types/SQLChar.java,562,
java/engine/org/apache/derby/iapi/types/SQLChar.java,564,        return (tmpString == null) ?
java/engine/org/apache/derby/iapi/types/SQLChar.java,565,            0 : tmpString.length();
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2083,  // DERBY-3745.  setContextClassLoader for thread to null to avoid
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2084,  // leaking class loaders.
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2085,  PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2086,"         t, null);"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2087,
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,52, /**
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,107,   // DERBY-48: This operation creates a schema and we don't
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,108,   // want to hold a lock for SYSSCHEMAS for the duration of
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,109,"   // the user transaction, so we perform the creation in a"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,110,   // nested transaction if possible.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,111,   TransactionController useTc    = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,112,   TransactionController nestedTc = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,114,   try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,115,    nestedTc = tc.startNestedUserTransaction(false);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,116,    useTc = nestedTc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,117,   } catch (StandardException e) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,118,    if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,119,     SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,120,"      ""Unexpected: not able to start nested transaction "" +"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,121,"      ""to auto-create schema"", e);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,123,    useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,124,   }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,126,"   // Try max twice: if nested transaction times out, try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,127,   // again in the outer transaction because it may be a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,128,"   // self-lock, that is, the outer transaction may hold some"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,129,   // lock(s) that make the nested transaction attempt to set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,130,   // a write lock time out.  Trying it again in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,131,   // transaction will then succeed. If the reason is some
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,132,"   // other transaction barring us, trying again in the outer"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,133,   // transaction will possibly time out again.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,134,   //
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,135,"   // Also, if creating a nested transaction failed, only try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,136,   // once in the outer transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,137,   while (true) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,138,    try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,139,"     csca.executeConstantAction(activation, useTc);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,140,    } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,141,     if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,142,      // We don't test for SQLState.DEADLOCK or
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,143,      // .LOCK_TIMEOUT_LOG here because a) if it is a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,144,"      // deadlock, it may be better to expose it, and b)"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,145,      // LOCK_TIMEOUT_LOG happens when the app has set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,146,"      // derby.locks.deadlockTrace=true, in which case we"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,147,      // don't want to mask the timeout.  So in both the
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,148,      // latter cases we just throw.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,149,      if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,151,"       // clean up after use of nested transaction,"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,152,       // then try again in outer transaction
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,153,       useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,155,       continue;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,157,     } else if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,161,      break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,162,     }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,163,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,164,"     // We got an non-expected exception, either in"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,165,     // the nested transaction or in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,166,     // transaction; we had better pass that on
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,167,     if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,168,      nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,170,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,171,     throw se;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,173,    break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,176,   // We either succeeded or got LANG_OBJECT_ALREADY_EXISTS.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,177,   // Clean up if we did this in a nested transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,178,   if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,179,    nestedTc.commit();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,180,    nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,181,   }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java,211,    protected void  tearDown() throws Exception {
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,505,  * @param schemaName
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,104,            CreateSchemaConstantAction csca
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,105,"                = new CreateSchemaConstantAction(schemaName, (String) null);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,109,    // DERBY-48: This operation creates the user's initial default
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,110,    // schema and we don't want to hold a lock for SYSSCHEMAS for
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,111,"    // the duration of the user transaction, so we perform the"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,112,    // creation in a nested transaction if possible.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,113,    TransactionController useTc    = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,114,    TransactionController nestedTc = null;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,115,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,116,    try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,117,     nestedTc = tc.startNestedUserTransaction(false);
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,118,     useTc = nestedTc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,119,    } catch (StandardException e) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,120,     if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,121,      SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,122,"       ""Unexpected: not able to start nested transaction "" +"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,123,"       ""to auto-create schema"", e);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,124,     }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,125,     useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,126,    }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,127,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,128,"    // Try max twice: if nested transaction times out, try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,129,    // again in the outer transaction because it may be a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,130,"    // self-lock, that is, the outer transaction may hold some"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,131,    // lock(s) that make the nested transaction attempt to set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,132,    // a write lock time out.  Trying it again in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,133,    // transaction will then succeed. If the reason is some
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,134,"    // other transaction barring us, trying again in the outer"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,135,    // transaction will possibly time out again.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,136,    //
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,137,"    // Also, if creating a nested transaction failed, only try"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,138,    // once in the outer transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,139,    while (true) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,140,     try {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,141,"      csca.executeConstantAction(activation, useTc);"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,142,     } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,143,      if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,144,       // We don't test for SQLState.DEADLOCK or
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,145,       // .LOCK_TIMEOUT_LOG here because a) if it is a
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,146,"       // deadlock, it may be better to expose it, and b)"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,147,       // LOCK_TIMEOUT_LOG happens when the app has set
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,148,"       // derby.locks.deadlockTrace=true, in which case we"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,149,       // don't want to mask the timeout.  So in both the
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,150,       // latter cases we just throw.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,151,       if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,152,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,153,"        // clean up after use of nested transaction,"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,154,        // then try again in outer transaction
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,155,        useTc = tc;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,156,        nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,157,        continue;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,158,       }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,159,      } else if (se.getMessageId()
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,160,            .equals(SQLState.LANG_OBJECT_ALREADY_EXISTS)) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,161,"       // Ignore ""Schema already exists"". Another thread has"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,162,       // probably created it after we checked for it
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,163,       break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,164,      }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,165,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,166,"      // We got an non-expected exception, either in"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,167,      // the nested transaction or in the outer
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,168,      // transaction; we had better pass that on
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,169,      if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,170,       nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,171,      }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,172,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,173,      throw se;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,174,     }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,175,     break;
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,176,    }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,177,
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,178,    // We either succeeded or got LANG_OBJECT_ALREADY_EXISTS.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,179,    // Clean up if we did this in a nested transaction.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,180,    if (useTc == nestedTc) {
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,181,     nestedTc.commit();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,182,     nestedTc.destroy();
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,183,    }
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,185,    // create the schema in the user transaction always
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java,224,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LazyDefaultSchemaCreationTest.java,237,
java/engine/org/apache/derby/impl/sql/execute/CreateConstraintConstantAction.java,332,"     (activation, conDesc, null);"
java/engine/org/apache/derby/impl/sql/execute/CreateConstraintConstantAction.java,375,"    storeConstraintDependenciesOnPrivileges(activation, conDesc, referencedConstraint.getTableId());"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,269,  *  where as constraints only depend on REFERENCES privilege on a table.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,285,  *
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,289,"   Activation activation, Dependent dependent, UUID refTableUUID)"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,290, throws StandardException
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,302,"   //Now, it is time to add into dependency system, constraint's"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,303,   //dependency on REFERENCES privilege. If the REFERENCES privilege is
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,304,"   //revoked from the constraint owner, the constraint will get"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,305,   //dropped automatically.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,333,     //We know that we are working with a REFERENCES
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,334,     //privilege. Find all the PermissionDescriptors for
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,335,     //this privilege and make constraint depend on it
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,336,     //through dependency manager.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,337,     //The REFERENCES privilege could be defined at the
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,338,     //table level or it could be defined at individual
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,339,"     //column levels. In addition, individual column"
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,340,     //REFERENCES privilege could be available at the
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,341,     //user level or PUBLIC level.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,378,     //We have found the REFERENCES privilege for all the
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,379,     //columns in foreign key constraint and we don't
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,380,     //need to go through the rest of the privileges
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,381,     //for this sql statement.
java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java,382,     break;
java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java,29,import org.apache.derby.iapi.util.PrivilegedThreadOps;
java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java,49,"  Thread daemonThread = Monitor.getMonitor().getDaemonThread(daemon, name, false);"
java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java,52,  PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
java/engine/org/apache/derby/impl/services/daemon/SingleThreadDaemonFactory.java,53,"         daemonThread, null);"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,44,import org.apache.derby.iapi.util.PrivilegedThreadOps;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,171,        ClassLoader savecl = null;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,174,            savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,183,            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,184,"                          currentThread(), null);"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,202,"            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.currentThread(),"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,203,                    savecl);
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,59,import org.apache.derby.iapi.util.PrivilegedThreadOps;
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,278,"  Thread dontGCthread = getDaemonThread(dontGC, ""antiGC"", true);"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,281,  PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,282,"      dontGCthread, null);"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,26,import org.apache.derby.iapi.util.PrivilegedThreadOps;
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,70,            savecl = PrivilegedThreadOps.getContextClassLoader(
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,71,                    Thread.currentThread());
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,80,            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,81,"                    Thread.currentThread(), null);"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,84,            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,85,"                    Thread.currentThread(), savecl);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java,85,"        ""precedence"","
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,175,               new PrivilegedAction() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,176,                public Object run()  {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,190,                new PrivilegedAction() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,223,                new PrivilegedAction() {
java/engine/org/apache/derby/iapi/types/SQLBinary.java,1056,"       ""(Binary data value not displayed)"","
java/client/org/apache/derby/client/am/Sqlca.java,393,"                states[i] = tokens[i].substring(0, 5);"
java/client/org/apache/derby/client/am/Sqlca.java,394,                tokens[i] = tokens[i].substring(6);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6008,   sqlerrmc = buildTokenizedSqlerrmc((EmbedSQLException) se);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6060, private String buildTokenizedSqlerrmc(EmbedSQLException se) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6064,   String messageId = se.getMessageId();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6065,   // arguments are variable part of a message
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6066,   Object[] args = se.getArguments();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6067,   for (int i = 0; args != null &&  i < args.length; i++)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6068,    sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6069,   sqlerrmc += messageId;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6070,   se = (EmbedSQLException) se.getNextException();
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,273,"  sb.append("" : "");"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6052,  * for a Derby SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/MessageBundleTest.java,143,"                System.err.println(""ERROR: Message id "" + sqlStateId +"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/MessageBundleTest.java,144,"                    "" in SQLState.java was not found in"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/MessageBundleTest.java,145,"                    "" messages_en.properties"");"
java/engine/org/apache/derby/iapi/sql/Activation.java,593,  * Return the current SQL session context for all immediately
java/engine/org/apache/derby/iapi/sql/Activation.java,594,  * nested connections stemming from the call or function
java/engine/org/apache/derby/iapi/sql/Activation.java,595,  * invocation of the statement corresponding to this activation.
java/engine/org/apache/derby/iapi/sql/Activation.java,597, public SQLSessionContext getNestedSQLSessionContext();
java/engine/org/apache/derby/iapi/sql/Activation.java,600,"  * This activation is created in a dynamic call context, remember"
java/engine/org/apache/derby/iapi/sql/Activation.java,601,  * its caller's activation.
java/engine/org/apache/derby/iapi/sql/Activation.java,602,  *
java/engine/org/apache/derby/iapi/sql/Activation.java,603,  * @param a The caller's activation
java/engine/org/apache/derby/iapi/sql/Activation.java,605, public void setCallActivation(Activation a);
java/engine/org/apache/derby/iapi/sql/Activation.java,608,"  * This activation is created in a dynamic call context, get its"
java/engine/org/apache/derby/iapi/sql/Activation.java,609,  * caller's activation.
java/engine/org/apache/derby/iapi/sql/Activation.java,613, public Activation getCallActivation();
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,96,  * Execute the PreparedStatement and return results.
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,104,   * @param rollbackParentContext True if 1) the statement context is
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,105,"  *  NOT a top-level context, AND 2) in the event of a statement-level"
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,106,"  *  exception, the parent context needs to be rolled back, too."
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,117,"                      boolean rollbackParentContext,"
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,122,"  Simple form of execute(). Creates a new single use activation and executes it,"
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,123,  but also passes rollbackParentContext parameter (see above).
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,124, */
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,125,"    ResultSet execute(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,126,"                      boolean rollbackParentContext,"
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,127,                      long timeoutMillis)
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,474,"  * the SQLSessionContext stack to the initial default, presumably"
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1140,  * Create a new SQL session context for the current activation
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1141,  * on the basis of the existing SQL session context (logical
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1142,"  * session context analogue to call stack push, i.e. this happens"
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1143,  * when a stored procedure or function that can contain SQL is
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1144,"  * invoked. Called from generated code, see"
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1145,  * StaticMethodCallNode#generateSetupNestedSessionContext.
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1146,  *
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1158,  * Create a fresh SQLSessionContext
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3630,"                        ps.execute(act, true, 0L);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3705,"            org.apache.derby.iapi.sql.ResultSet rs = ps.execute(act, true, 0L);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3770,"                        ps.execute(act, true, 0L);"
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1235,"                ResultSet resultsToWrap = ps.execute(a,"
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1236,"                                                     false,"
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1237,                                                     timeoutMillis);
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,100,final class GenericActivationHolder implements Activation
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,102, BaseActivation   ac;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,583, public SQLSessionContext getNestedSQLSessionContext() {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,584,  return ac.getNestedSQLSessionContext();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,587, public void setCallActivation(Activation a) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,588,  ac.setCallActivation(a);
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,591, public Activation getCallActivation() {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,592,  return ac.getCallActivation();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,243,  Activation callingAct = null;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,247,"   // if not null, callingAct represents the activation of"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,248,   // a calling statement and this activation corresponds to
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,249,   // a statement inside a stored procedure or function
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,250,   callingAct = stmctx.getActivation();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,253,  ac.setCallActivation(callingAct);
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,258,"    public ResultSet execute(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,259,"                             boolean rollbackParentContext,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,260,                             long timeoutMillis)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,265,"  return execute(a, rollbackParentContext, timeoutMillis);"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,280,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,281,"    public ResultSet execute(Activation activation,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,282,"                             boolean rollbackParentContext,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,283,                             long timeoutMillis)
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1847,  return getCurrentSQLSessionContext(a.getCallActivation()).
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1848,   getDefaultSchema();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1911,  Activation caller = a.getCallActivation();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1912,
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1917,  getCurrentSQLSessionContext(caller).setDefaultSchema(sd);
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1928,  Activation caller = activation.getCallActivation();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1932,  while (caller != null) {
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1933,   SQLSessionContext ssc = caller.getNestedSQLSessionContext();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,1943,   caller = caller.getCallActivation();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3268,  getCurrentSQLSessionContext(a.getCallActivation()).
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3269,   setRole(role);
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3277,  return getCurrentSQLSessionContext(a.getCallActivation()).
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3278,   getRole();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3288,  String role = getCurrentSQLSessionContext(a.getCallActivation()).
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3289,   getRole();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3338,  * Return the current SQL session context based on caller
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3340,"  * @param caller the activation of the caller, if any, of the"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3341,  * current activation
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3343, private SQLSessionContext getCurrentSQLSessionContext(Activation caller) {
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3346,  if (caller == null ) {
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3350,   // inside a nested SQL session context (stored
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3351,"   // procedure/function), the SQL session context is"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3352,   // maintained in the activation of the caller
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3353,   curr = caller.getNestedSQLSessionContext();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3389,  SQLSessionContext sc = a.getNestedSQLSessionContext();
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3405,"  // Since the statement is an invocation, it will now be"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3406,  // associated with the pushed SQLSessionContext (and no longer
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3407,  // just share that of its caller (or top).  The statement
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3408,  // contexts of nested connection statements will inherit sc so
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3409,  // the SQL session context is available when nested statements
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3410,"  // are compiled (and executed, for the most part).  However,"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3411,"  // for dynamic result sets, the relevant statement context"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3412,  // (originating result set) is no longer available for
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3413,"  // execution time references to the SQL session context, so we"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3414,"  // rely on the activation of the caller for accessing it,"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3415,  // cf. e.g. overload variants of
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3416,  // getDefaultSchema/setDefaultSchema.  If such nested
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3417,"  // connections themselves turn out to be invocations, they in"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3418,  // turn get a new SQLSessionContext associated with them etc.
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3424,"  * Get the value of topLevelSSC, possibly initializing it first."
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3427, private SQLSessionContext getTopLevelSQLSessionContext() {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3104,"  ResultSet rs = ps.execute(lcc, true, 0L);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3125,"  ResultSet rs = ps.execute(lcc, false, 0L);"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,176,  * The 'callActivation' of an activation of a statement executing in
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,179,  * A non-null 'callActivation' represents the activation of the
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,180,  * calling statement.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,182,"  * That is, if we are executing an SQL statement ('this'"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,183,  * activation) inside a stored procedure or function in a nested
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,184,"  * connection, then 'callActivation' will be non-null."
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,185,  *
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,186,  * 'callActivation' is set when this activation is created (@see
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,190,"  * by code generated for the call, after parsameters are evaluated"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,194, private Activation callActivation;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,197,"  * The SQL session context of a call is kept here. Also, @see"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,198,  * BaseActivation#callActivation.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,199,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,200,"  * A nested execution maintains its session context,"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,201,"  * nestedSQLSessionContext, in the activation of the calling"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,202,  * statement's activation ('this'). While not inside a stored
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,203,"  * procedure or function, SQL session state state is held by the"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,204,  * LanguageConnectionContext.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,206, private SQLSessionContext nestedSQLSessionContext;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1382,  * Return the current SQL session context for all immediately
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1383,  * nested connections stemming from the call or function
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1384,  * invocation of the statement corresponding to this activation.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1386, public SQLSessionContext getNestedSQLSessionContext() {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1388,  if (nestedSQLSessionContext == null) {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1389,   nestedSQLSessionContext = lcc.createSQLSessionContext();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1392,  return nestedSQLSessionContext;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1396,"  * This activation is created in a dynamic call context, remember"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1397,  * its caller's activation.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1399,  * @param a The caller's activation
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1401, public void setCallActivation(Activation a) {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1402,  callActivation = a;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1406,"  * This activation is created in a dynamic call context, get its"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1407,  * caller's activation.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1409,  * @return The caller's activation
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1411, public Activation getCallActivation() {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1412,  return callActivation;
java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java,291,"   rs = ps.execute(lcc, false, 0L);"
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,159,"                ResultSet rs = ps.execute(spsActivation, false, 0L);"
java/testing/org/apache/derbyTesting/junit/JDBC.java,767,     * be null to indicate SQL NULL. The comparision is make
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,266,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,278,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,290,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,301,        expectError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,346,"    private void    expectError( String sqlState, String query )"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1189,        * null in a join case (See Beetle 4423)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1192,       if (accessPath == null)
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,120,  return defaultText;
java/engine/org/apache/derby/iapi/sql/compile/C_NodeTypes.java,234,    static final int FINAL_VALUE = ROW_NUMBER_COLUMN_NODE;
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,380,  if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,382,   /* In order to check the validity of the check constraints
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,390,   FromList fromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,391,"         C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,392,"         getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,393,         getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,394,   FromBaseTable table = (FromBaseTable)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,395,         getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,396,"          C_NodeTypes.FROM_BASE_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,397,"          getObjectName(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,398,"          null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,399,"          null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,400,"          null,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,401,          getContextManager());
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,402,   fromList.addFromTable(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,403,"   fromList.bindTables(dd,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,404,       (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,405,"        C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,406,"        getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,407,        getContextManager()));
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,408,   tableElementList.appendNewColumnsToRCL(table);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,411,    * the check constraints.
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,413,   tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,414,
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,421,  if (numCheckConstraints > 0)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,423,   /* In order to check the validity of the check constraints
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,431,   FromList fromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,432,"         C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,433,"         getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,434,         getContextManager());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,435,   // DERBY-3043: To avoid a no-such-schema error when
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,436,"   // binding the check constraint, ensure that the"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,437,   // table we bind against has a schema name specified.
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,438,"   // If it doesn't, fill in the schema name now."
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,439,   //
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,440,   TableName newTN = getObjectName();
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,441,   if (newTN.getSchemaName() == null)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,442,    newTN.setSchemaName(getSchemaDescriptor().getSchemaName());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,443,   FromBaseTable table = (FromBaseTable)
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,444,         getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,445,"          C_NodeTypes.FROM_BASE_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,446,"          newTN,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,447,"          null,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,448,"          null,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,449,"          null,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,450,          getContextManager());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,451,   table.setTableNumber(0);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,452,   fromList.addFromTable(table);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,453,   table.setResultColumns((ResultColumnList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,454,"            C_NodeTypes.RESULT_COLUMN_LIST,"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,455,            getContextManager()));
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,456,   tableElementList.appendNewColumnsToRCL(table);
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,459,    * the check constraints.
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,461,   tableElementList.bindAndValidateCheckConstraints(fromList);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1160,  return (TableName) getNodeFactory().getNode
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1165,    getContextManager()
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,200,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,213,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,844, /**
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,845,"   * Bind time logic. Raises an error if this ValueNode, once compiled, returns"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,846,   * unstable results AND if we're in a context where unstable results are
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,847,   * forbidden.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,848,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,849,   * Called by children who may NOT appear in the WHERE subclauses of ADD TABLE clauses.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,850,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,851,"   * @param fragmentType Type of fragment as a String, for inclusion in error messages."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,852,   * @param fragmentBitMask Type of fragment as a bitmask of possible fragment types
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,853,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,854,   * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,855,   */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,856," public void checkReliability( String fragmentType, int fragmentBitMask )"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,857,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,858, {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,859,"  // if we're in a context that forbids unreliable fragments, raise an error"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,860,  if ( ( getCompilerContext().getReliability() & fragmentBitMask ) != 0 )
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,861,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,862,            throwReliabilityException( fragmentType );
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,863,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,864, }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,865,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,866, /**
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,867,"   * Bind time logic. Raises an error if this ValueNode, once compiled, returns"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,868,   * unstable results AND if we're in a context where unstable results are
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,869,   * forbidden.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,870,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,871,   * Called by children who may NOT appear in the WHERE subclauses of ADD TABLE clauses.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,872,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,873,   * @param fragmentBitMask Type of fragment as a bitmask of possible fragment types
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,874,"   * @param fragmentType Type of fragment as a String, to be fetch for the error message."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,875,   *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,876,   * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,877,   */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,878," public void checkReliability( int fragmentBitMask, String fragmentType )"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,879,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,880, {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,881,"  // if we're in a context that forbids unreliable fragments, raise an error"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,882,  if ( ( getCompilerContext().getReliability() & fragmentBitMask ) != 0 )
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,883,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,884,            String fragmentTypeTxt = MessageService.getTextMessage( fragmentType );
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,885,            throwReliabilityException( fragmentTypeTxt );
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,886,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,887, }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,888,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,889,    /**
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,890,     * Common code for the 2 checkReliability functions.  Always throws StandardException.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,891,     *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,892,"     * @param fragmentType Type of fragment as a string, for inclusion in error messages."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,893,"     * @exception StandardException        Throws an error, always."
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,894,     */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,895,    private void throwReliabilityException( String fragmentType ) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,896,    {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,897,        String sqlState;
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,898,  /* Error string somewhat dependent on operation due to different
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,899,   * nodes being allowed for different operations.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,900,   */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,901,  if (getCompilerContext().getReliability() == CompilerContext.DEFAULT_RESTRICTION)
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,902,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,903,            sqlState = SQLState.LANG_INVALID_DEFAULT_DEFINITION;
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,904,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,905,  else
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,906,  {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,907,            sqlState = SQLState.LANG_UNRELIABLE_QUERY_FRAGMENT;
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,908,  }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,909,"  throw StandardException.newException(sqlState, fragmentType);"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,910,    }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,911,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,324,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,325,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,326,    //     * Verify basic parse/bind logic for declaring generated columns.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,327,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,328,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,329,    //    public  void    test_004_basicParser()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,330,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,331,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,332,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,333,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,334,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,335,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,336,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,337,"    //             ""create function f_parse_deterministic( a int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,338,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,339,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,340,"    //             ""deterministic\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,341,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,342,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,343,"    //             ""external name 'java.lang.Math.abs'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,344,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,345,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,346,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,347,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,348,"    //             ""create function f_parse_non_deterministic( a int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,349,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,350,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,351,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,352,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,353,"    //             ""external name 'java.lang.Math.abs'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,354,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,355,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,356,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,357,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,358,"    //             ""create table t_parse_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,359,"    //             ""(\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,360,"    //             ""   a int,\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,361,"    //             ""   b int generated always as ( f_parse_deterministic( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,362,"    //             ""   c int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,363,"    //             "")"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,364,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,365,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,366,    //        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,367,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,368,"    //             UNSTABLE_RESULTS,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,369,"    //             ""create table t_parse_shouldFail\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,370,"    //             ""(\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,371,"    //             ""   a int,\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,372,"    //             ""   b int generated always as ( f_parse_non_deterministic( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,373,"    //             ""   c int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,374,"    //             "")\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,375,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,376,    //    }
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,152,"    colDef.append("" DEFAULT "");"
java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java,153,    colDef.append(rs.getString(2));
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,71,  @param rawStoreFactory - the raw store
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,77," public void recover(RawStoreFactory rawStoreFactory,"
java/engine/org/apache/derby/iapi/store/raw/log/LogFactory.java,78,"      DataFactory dataFactory,"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,334,"  logFactory.recover(this, dataFactory, xactFactory);"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,412,        // use this only after recovery is finished
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,669,"    RawStoreFactory     rsf,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,676,"   SanityManager.ASSERT(rsf != null, ""raw store factory == null"");"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,682,  rawStoreFactory = rsf;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,892,"                        rsf,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1213,"     tf.rollbackAllTransactions(recoveryTransaction, rsf);"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1252,                tf.handlePreparedXacts(rsf);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1304,"      if (needCheckpoint && !checkpoint(rsf, df, tf, false))"
java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java,83," public void recover(RawStoreFactory rawStoreFactory,"
java/engine/org/apache/derby/impl/store/raw/log/ReadOnly.java,84,"      DataFactory dataFactory,"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,117," ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,206," ResultSet getUpdateResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,207,         GeneratedMethod checkGM)
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,480,   if (checkConstraints != null)
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,482,"    bindCheckConstraint(nodeFactory,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,497,  * Binds an already parsed check constraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,502,  * @param checkConstraint  Parsed query tree for check constraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,506, void bindCheckConstraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,511,  ValueNode   checkConstraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,516,  TableName targetTableName =
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,517,"      makeTableName(targetTableDescriptor.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,518,           targetTableDescriptor.getName());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,519,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,521,"  /* We now have the check constraints as a query tree.  Now, we prepare"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,523,   * generated code for the check constraints will be evaluated against the
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,530,   *     (This allows the ColumnReferences in the check constraint
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,534,   * the constraint against the source RCL but against a temp
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,543,       getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,551,    getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,556,  checkConstraint = checkConstraint.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,416,"    targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,435,   /* Get and bind all constraints on the table */
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,539,   FromVTI targetVTI)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,587,"      targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,810,"  *   ResultSetFactory.getInsertResultSet(resultSet.generate(ps), this )"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,843,   // arg 2 generate code to evaluate CHECK CONSTRAINTS
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,846,"   mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, ""getInsertResultSet"", ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,152,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,165,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,175,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,181,   this.expression = (ValueNode) arg2;
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,358,  expression = getNullNode(getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,588,"  expression = expression.bindExpression(fromList, subqueryList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,589,         aggregateVector);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,693,
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,717,            expression = getNullNode(bindingRC.getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,825,"  expression = expression.preprocess(numTables, outerFromList,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,827,             outerPredicateList);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1515,   expression = (ValueNode)expression.accept(v);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,611,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,977,"    //System.out.println(""    streamStorable=true"");"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1191,   else
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,4168, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1149,                    // Generate the tree for the default
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1150,                    String defaultText = defaultInfo.getDefaultText();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1151,                    ValueNode defaultTree = parseDefault(defaultText);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1152,                    defaultTree = defaultTree.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1153,"                        getFromList(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1154,"                        (SubqueryList) null,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1155,                        (Vector) null);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1156,                    newResultColumn = (ResultColumn) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1157,"                        C_NodeTypes.RESULT_COLUMN,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1158,"                        defaultTree.getTypeServices(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1159,"                        defaultTree,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1160,                        getContextManager());
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,38,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1334, {
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,70," public ResultSet getInsertResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,76,"  return new InsertResultSet(source, checkGM, activation );"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,142," public ResultSet getUpdateResultSet(NoPutResultSet source,"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,143,          GeneratedMethod checkGM)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,257,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,311,  heapConglom = constants.conglomId;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,447,"    // if we have a check constraint, we have"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,450,    if (checkGM != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,462,       evaluateCheckConstraints();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,380,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,381,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,382,    //     * Verify basic insert behavior for generated columns.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,383,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,384,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,385,    //    public  void    test_005_basicInsert()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,386,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,387,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,388,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,389,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,390,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,391,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,392,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,393,"    //             ""create table t_insert_1( a int,  b int  default 1, c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,394,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,395,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,396,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,397,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,398,"    //             ""create table t_insert_2( a int,  b int  generated always as( -a ) check ( b < 0 ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,399,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,400,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,401,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,402,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,403,"    //             ""create unique index t_insert_2_b on t_insert_2( b )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,404,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,405,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,406,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,407,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,408,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,409,"    //             ""insert into t_insert_1( a, c ) values ( 100, 1000 ), ( 200, 2000 ), ( 300, 3000 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,410,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,411,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,412,    //        // insert one row
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,413,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,414,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,415,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,416,"    //             ""insert into t_insert_2( a, c ) values ( 2, 200 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,417,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,418,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,419,    //        // insert multiple rows
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,420,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,421,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,422,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,423,"    //             ""insert into t_insert_2( a, c ) values ( 1, 100 ), ( 3, 300 ), ( 4, 400 ), ( 5, 500 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,424,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,425,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,426,    //        // insert by selecting from another table
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,427,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,428,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,429,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,430,"    //             ""insert into t_insert_2( a, c ) select a, c from t_insert_1"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,431,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,432,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,433,    //        // insert using a default clause on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,434,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,435,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,436,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,437,"    //             ""insert into t_insert_2( a, b ) values ( 6, default )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,438,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,439,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,440,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,441,    //        // Verify that all of the expected rows are in the table having the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,442,    //        // generated column.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,443,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,444,    //        assertResults
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,445,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,446,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,447,"    //             ""select * from t_insert_2 order by a"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,448,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,449,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,450,"    //                 { ""1"" ,         ""-1"" ,        ""100"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,451,"    //                 { ""2"" ,         ""-2"" ,        ""200"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,452,"    //                 { ""3"" ,         ""-3"" ,        ""300"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,453,"    //                 { ""4"" ,         ""-4"" ,        ""400"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,454,"    //                 { ""5"" ,         ""-5"" ,        ""500"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,455,"    //                 { ""6"" ,         ""-6"" ,        null },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,456,"    //                 { ""100"",        ""-100"" ,      ""1000"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,457,"    //                 { ""200"" ,       ""-200"" ,      ""2000"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,458,"    //                 { ""300"" ,       ""-300"" ,      ""3000"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,459,"    //             },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,460,    //             false
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,461,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,462,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,463,    //        // fails trying to override a generation clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,464,    //        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,465,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,466,"    //             CANT_OVERRIDE_GENERATION_CLAUSE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,467,"    //             ""insert into t_insert_2( a, b ) values ( 7, 70 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,468,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,469,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,470,    //        // fails on a violation of the check constraint on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,471,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,472,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,473,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,474,"    //             CONSTRAINT_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,475,"    //             ""insert into t_insert_2( a ) values ( -8 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,476,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,477,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,478,    //        // fails because it violates the unique index on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,479,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,480,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,481,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,482,"    //             ILLEGAL_DUPLICATE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,483,"    //             ""insert into t_insert_2( a ) values ( 2 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,484,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,485,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,486,    //    }
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,207," ResultSet getUpdateResultSet(NoPutResultSet source, GeneratedMethod checkGM)"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,29,
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,450,          afterColumns);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,557,"    if (hasCheckConstraints(dataDictionary, targetTableDescriptor))"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,596,"                                                hasTriggers ? resultColumnList : afterColumns,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,821,"            generateCheckConstraints( checkConstraints, acb, mb ); // arg 2"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,828,"                              ClassName.ResultSet, 4);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,832,"                              ClassName.ResultSet, 2);"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,876,  ResultColumnList updateColumnList
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,887,"  FormatableBitSet columnMap = UpdateNode.getUpdateReadMap(baseTable,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,888,"   updateColumnList, conglomVector, relevantCdl, relevantTriggers, needsDeferredProcessing );"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,943,  boolean[]     needsDeferredProcessing
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1140,
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,142," public ResultSet getUpdateResultSet(NoPutResultSet source, GeneratedMethod checkGM)"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,158,"  return new UpdateResultSet(source, checkGM, activation);"
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,187,"  return new UpdateResultSet(source, checkGM, activation,"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,114,"  this(source, checkGM , activation, activation.getConstantAction(),null);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,136,"  this(source, checkGM , activation,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,488,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,489,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,490,    //     * Verify basic update behavior for generated columns.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,491,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,492,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,493,    //    public  void    test_006_basicUpdate()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,494,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,495,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,496,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,497,    //        int             counter;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,498,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,499,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,500,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,501,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,502,"    //             ""create function f_minus\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,503,"    //             ""(\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,504,"    //             ""    a int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,505,"    //             "")\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,506,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,507,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,508,"    //             ""deterministic\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,509,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,510,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,511,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.minus'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,512,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,513,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,514,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,515,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,516,"    //             ""create function f_readMinusCounter()\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,517,"    //             ""returns int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,518,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,519,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,520,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,521,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.readMinusCounter'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,522,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,523,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,524,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,525,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,526,"    //             ""create table t_update_1( a int,  b int  generated always as( f_minus(a) ) check ( b < 0 ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,527,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,528,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,529,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,530,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,531,"    //             ""create unique index t_update_1_b on t_update_1( b )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,532,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,533,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,534,    //        counter = readMinusCounter( conn );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,535,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,536,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,537,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,538,"    //             ""insert into t_update_1( a, c ) values ( 1, 100 ), ( 2, 200 ), ( 3, 300 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,539,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,540,"    //        assertEquals( counter + 3, readMinusCounter( conn ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,541,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,542,    //        counter = readMinusCounter( conn );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,543,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,544,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,545,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,546,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,547,"    //             ""set a = a + 10 where a > 1\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,548,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,549,"    //        assertEquals( counter + 2, readMinusCounter( conn ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,550,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,551,    //        // you can use the DEFAULT keyword to set a generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,552,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,553,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,554,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,555,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,556,"    //             ""set a = a + 10, b = default where c = 300\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,557,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,558,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,559,    //        // fails trying to override a generation clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,560,    //        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,561,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,562,"    //             CANT_OVERRIDE_GENERATION_CLAUSE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,563,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,564,"    //             ""set a = a + 10, b = -3 where c = 300\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,565,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,566,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,567,    //        // fails on a violation of the check constraint on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,568,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,569,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,570,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,571,"    //             CONSTRAINT_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,572,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,573,"    //             ""set a = -100\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,574,"    //             ""where a = 1\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,575,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,576,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,577,    //        // fails because it violates the unique index on the generated column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,578,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,579,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,580,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,581,"    //             ILLEGAL_DUPLICATE,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,582,"    //             ""update t_update_1\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,583,"    //             ""set a = 12\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,584,"    //             ""where a = 1\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,585,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,586,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,587,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,588,    //        // Verify that all of the expected rows are in the table having the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,589,    //        // generated column.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,590,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,591,    //        assertResults
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,592,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,593,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,594,"    //             ""select * from t_update_1 order by c"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,595,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,596,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,597,"    //                 { ""1"" ,         ""-1"" ,        ""100"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,598,"    //                 { ""12"" ,         ""-12"" ,        ""200"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,599,"    //                 { ""23"" ,         ""-23"" ,        ""300"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,600,"    //             },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,601,    //             false
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,602,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,603,    //    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,604,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,605,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,606,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,607,    //     * Verify basic trigger interaction with generated columns
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,608,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,609,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,610,    //    public  void    test_007_basicTriggers()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,611,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,612,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,613,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,614,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,615,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,616,    //        // Setup schema for test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,617,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,618,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,619,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,620,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,621,"    //             ""create function triggerReports()\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,622,"    //             ""returns TABLE\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,623,"    //             ""  (\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,624,"    //             ""     contents varchar( 100 )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,625,"    //             ""  )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,626,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,627,"    //             ""parameter style DERBY_JDBC_RESULT_SET\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,628,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,629,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.triggerReport'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,630,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,631,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,632,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,633,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,634,"    //             ""create procedure clearTriggerReports\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,635,"    //             ""()\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,636,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,637,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,638,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,639,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.clearTriggerReports'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,640,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,641,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,642,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,643,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,644,"    //             ""create procedure report_proc\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,645,"    //             ""( tag varchar( 40 ), a int, b int, c int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,646,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,647,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,648,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,649,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.showValues'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,650,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,651,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,652,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,653,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,654,"    //             ""create procedure wide_report_proc\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,655,"    //             ""( tag varchar( 40 ), old_a int, old_b int, old_c int, new_a int, new_b int, new_c int )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,656,"    //             ""language java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,657,"    //             ""parameter style java\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,658,"    //             ""no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,659,"    //             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.showValues'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,660,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,661,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,662,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,663,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,664,"    //             ""create table t1_trig( a int, b int generated always as ( f_minus(a) ), c int )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,665,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,666,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,667,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,668,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,669,"    //             ""create trigger t1_trig_before_insert_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,670,"    //             ""no cascade before insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,671,"    //             ""referencing new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,672,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,673,"    //             ""call report_proc( 'before_insert_row_trigger', ar.a, ar.b, ar.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,674,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,675,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,676,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,677,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,678,"    //             ""create trigger t1_trig_after_insert_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,679,"    //             ""after insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,680,"    //             ""referencing new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,681,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,682,"    //             ""call report_proc( 'after_insert_row_trigger', ar.a, ar.b, ar.c ) \n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,683,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,684,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,685,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,686,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,687,"    //             ""create trigger t1_trig_before_update_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,688,"    //             ""no cascade before update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,689,"    //             ""referencing old as br new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,690,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,691,"    //             ""call wide_report_proc( 'before_update_row_trigger', br.a, br.b, br.c, ar.a, ar.b, ar.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,692,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,693,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,694,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,695,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,696,"    //             ""create trigger t1_trig_after_update_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,697,"    //             ""after update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,698,"    //             ""referencing old as br new as ar\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,699,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,700,"    //             ""call wide_report_proc( 'after_update_row_trigger', br.a, br.b, br.c, ar.a, ar.b, ar.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,701,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,702,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,703,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,704,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,705,"    //             ""create trigger t1_trig_before_delete_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,706,"    //             ""no cascade before delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,707,"    //             ""referencing old as br\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,708,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,709,"    //             ""call report_proc( 'before_delete_row_trigger', br.a, br.b, br.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,710,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,711,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,712,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,713,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,714,"    //             ""create trigger t1_trig_after_delete_row_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,715,"    //             ""after delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,716,"    //             ""referencing old as br\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,717,"    //             ""for each row\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,718,"    //             ""call report_proc( 'after_delete_row_trigger', br.a, br.b, br.c )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,719,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,720,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,721,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,722,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,723,"    //             ""create trigger t1_trig_before_insert_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,724,"    //             ""no cascade before insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,725,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,726,"    //             ""call report_proc( 'before_insert_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,727,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,728,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,729,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,730,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,731,"    //             ""create trigger t1_trig_after_insert_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,732,"    //             ""after insert on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,733,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,734,"    //             ""call report_proc( 'after_insert_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,735,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,736,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,737,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,738,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,739,"    //             ""create trigger t1_trig_before_update_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,740,"    //             ""no cascade before update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,741,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,742,"    //             ""call report_proc( 'before_update_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,743,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,744,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,745,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,746,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,747,"    //             ""create trigger t1_trig_before_delete_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,748,"    //             ""no cascade before delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,749,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,750,"    //             ""call report_proc( 'before_delete_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,751,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,752,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,753,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,754,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,755,"    //             ""create trigger t1_trig_after_update_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,756,"    //             ""after update on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,757,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,758,"    //             ""call report_proc( 'after_update_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,759,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,760,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,761,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,762,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,763,"    //             ""create trigger t1_trig_after_delete_statement_trigger\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,764,"    //             ""after delete on t1_trig\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,765,"    //             ""for each statement\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,766,"    //             ""call report_proc( 'after_delete_statement_trigger', -1, -1, -1 )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,767,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,768,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,769,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,770,    //        // Now run the tests.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,771,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,772,    //        assertTriggerStatus
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,773,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,774,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,775,"    //             ""insert into t1_trig( a ) values ( 1 ), ( 2 ), ( 3 )"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,776,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,777,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,778,"    //                 { ""before_insert_row_trigger: [ 1, -1, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,779,"    //                 { ""before_insert_row_trigger: [ 2, -2, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,780,"    //                 { ""before_insert_row_trigger: [ 3, -3, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,781,"    //                 { ""before_insert_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,782,"    //                 { ""after_insert_row_trigger: [ 1, -1, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,783,"    //                 { ""after_insert_row_trigger: [ 2, -2, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,784,"    //                 { ""after_insert_row_trigger: [ 3, -3, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,785,"    //                 { ""after_insert_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,786,    //             }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,787,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,788,    //        assertTriggerStatus
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,789,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,790,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,791,"    //             ""update t1_trig set a = a + 10"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,792,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,793,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,794,"    //                 { ""before_update_row_trigger: [ 1, -1, null, 11, -11, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,795,"    //                 { ""before_update_row_trigger: [ 2, -2, null, 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,796,"    //                 { ""before_update_row_trigger: [ 3, -3, null, 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,797,"    //                 { ""before_update_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,798,"    //                 { ""after_update_row_trigger: [ 1, -1, null, 11, -11, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,799,"    //                 { ""after_update_row_trigger: [ 2, -2, null, 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,800,"    //                 { ""after_update_row_trigger: [ 3, -3, null, 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,801,"    //                 { ""after_update_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,802,    //             }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,803,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,804,    //        assertTriggerStatus
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,805,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,806,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,807,"    //             ""delete from t1_trig where a > 11"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,808,    //             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,809,    //             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,810,"    //                 { ""before_delete_row_trigger: [ 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,811,"    //                 { ""before_delete_row_trigger: [ 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,812,"    //                 { ""before_delete_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,813,"    //                 { ""after_delete_row_trigger: [ 12, -12, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,814,"    //                 { ""after_delete_row_trigger: [ 13, -13, null ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,815,"    //                 { ""after_delete_statement_trigger: [ -1, -1, -1 ]"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,816,    //             }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,817,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,818,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,819,    //    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,821,    //    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,822,    //     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,823,    //     * Verify basic interaction of foreign keys with generated columns
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,824,    //     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,825,    //     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,826,    //    public  void    test_008_basicForeignKeys()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,827,    //        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,828,    //    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,829,    //        Connection  conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,830,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,831,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,832,    //        // Setup schema for test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,833,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,834,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,835,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,836,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,837,"    //             ""create table t1_for( a int, b int generated always as ( f_minus(a) ) primary key, c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,838,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,839,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,840,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,841,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,842,"    //             ""create table t2_for( a int, b int references t1_for( b ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,843,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,844,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,845,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,846,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,847,"    //             ""create table t3_for( a int, b int primary key, c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,848,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,849,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,850,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,851,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,852,"    //             ""create table t4_for( a int, b int generated always as ( f_minus(a) ) references t3_for( b ), c int )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,853,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,854,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,855,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,856,    //        // Initial data.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,857,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,858,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,859,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,860,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,861,"    //             ""insert into t1_for( a ) values ( 1 ), ( 2 ), ( 3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,862,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,863,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,864,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,865,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,866,"    //             ""insert into t2_for( b ) values ( -1 ), ( -3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,867,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,868,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,869,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,870,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,871,"    //             ""insert into t3_for( b ) values ( 1 ), ( 2 ), ( 3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,872,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,873,    //        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,874,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,875,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,876,"    //             ""insert into t4_for( a ) values ( -1 ), ( -2 ), ( -3 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,877,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,878,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,879,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,880,    //        // Let's violate some foreign keys.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,881,    //        //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,882,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,883,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,884,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,885,"    //             FOREIGN_KEY_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,886,"    //             ""update t1_for set a = a + 10 where a = 1"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,887,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,888,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,889,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,890,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,891,"    //             FOREIGN_KEY_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,892,"    //             ""update t4_for set a = a + 10 where a = -1"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,893,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,894,    //        expectExecutionError
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,895,    //            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,896,"    //             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,897,"    //             FOREIGN_KEY_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,898,"    //             ""insert into t4_for( a ) values ( -4 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,899,    //             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,900,    //    }
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,400,   if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses(fromList); }
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,441,   if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses(fromList); }
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,662, void bindAndValidateGenerationClauses(FromList fromList)
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,692,      generationClauseNode = cdn.getGenerationClauseNode();
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,129,                   NON_DETERMINISTIC_ILLEGAL
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1505,            throwReliabilityException( fragmentType );
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1528,            throwReliabilityException( fragmentTypeTxt );
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1538,    private void throwReliabilityException( String fragmentType ) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1550,            sqlState = SQLState.LANG_NON_DETERMINISTIC_GENERATION_CLAUSE;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3902,    if (defaultInfo != null)
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,383,  if ( (numCheckConstraints > 0) || (numGenerationClauses > 0) )
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,401,"            { tableElementList.bindAndValidateGenerationClauses(fromList, baseTable.makeColumnMap( baseTable.getGeneratedColumns() ) ); }"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,425,  if ( (numCheckConstraints > 0) || (numGenerationClauses > 0) )
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,442,"   if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses(fromList, new FormatableBitSet() ); }"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,806,                int         referencedColumnID = referencedColumns[ i ];
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,811,            }   // end of loop through referenced columns
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,814,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,68,"    private static  final   String  MISPLACED_SELECT = ""42X01"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1428,"             MISPLACED_SELECT,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1438,"             MISPLACED_SELECT,"
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,457,   if (!isAutoincrement)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,262,"            evaluateGenerationClauses( generationClauses, activation, sourceResultSet, execRow );"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,984,"            evaluateGenerationClauses( generationClauses, activation, sourceResultSet, row );"
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,593,      ExecRow           newRow
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,107,  /*
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,108,"    An update row, for an update statement which sets n columns; i.e"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,109,"       UPDATE tab set x,y,z=.... where ...;"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,110,"    has,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,111,"    before values of x,y,z after values of x,y,z and rowlocation."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,112,"    need only normalize after values of x,y,z."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,113,"    i.e insead of starting at index = 1, I need to start at index = 4."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,114,    also I needn't normalize the last value in the row.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,115, */
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,116,  startCol = (forUpdate) ? ((numCols - 1)/ 2) + 1 : 1;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,306,  if (desiredTypes == null)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,307,  {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,308,   desiredTypes = new DataTypeDescriptor[numCols];
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,309,   for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,310,   {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,311,    DataTypeDescriptor dtd = resultDescription.getColumnDescriptor(whichCol).getType();
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,312,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,313,    desiredTypes[whichCol - 1] = dtd;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,314,   }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,316,  }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,318,  for (whichCol = 1; whichCol <= numCols; whichCol++)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,320,   DataValueDescriptor sourceCol = sourceRow.getColumn(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,325,    if (whichCol < startCol)
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,326,     normalizedCol = sourceCol;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,328,     try {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,329,      normalizedCol =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,330,"      desiredTypes[whichCol - 1].normalize(sourceCol,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,331,         normalizedRow.getColumn(whichCol));
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,332,     } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,333,      // Catch illegal null insert and add column info
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,334,      if (se.getMessageId().startsWith(SQLState.LANG_NULL_INTO_NON_NULL))
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,335,      {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,336,       ResultColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,337,        resultDescription.getColumnDescriptor(whichCol);
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,338,       throw
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,339,"        StandardException.newException(SQLState.LANG_NULL_INTO_NON_NULL,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,340,                  columnDescriptor.getName());
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,341,      }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,342,      //just rethrow if not LANG_NULL_INTO_NON_NULL
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,343,      throw se;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,344,     }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,345,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,346,"    normalizedRow.setColumn(whichCol, normalizedCol);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,451,"            evaluateGenerationClauses( generationClauses, activation, source, row );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1639,"             ""   a  char( 20 ),\n"" +"
java/engine/org/apache/derby/catalog/DefaultInfo.java,37,"  * If this default is a generation clause, then return the 1-based ids of"
java/engine/org/apache/derby/catalog/DefaultInfo.java,40, public int[] getReferencedColumnIDs();
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,58,    private int[]                   referencedColumnIDs;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,89,         int[]    referencedColumnIDs
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,92,        if ( referencedColumnIDs == null ) { referencedColumnIDs = new int[0]; }
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,96,  this.referencedColumnIDs = referencedColumnIDs;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,108,  * @see DefaultInfo#getReferencedColumnIDs
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,110, public int[] getReferencedColumnIDs()
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,112,  return referencedColumnIDs;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,147,            referencedColumnIDs = new int[ count ];
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,148,            for ( int i = 0; i < count; i++ ) { referencedColumnIDs[ i ] = in.readInt(); }
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,168,            int count = referencedColumnIDs.length;
java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java,170,            for ( int i = 0; i < count; i++ ) { out.writeInt( referencedColumnIDs[ i ] ); }
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,771,
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,778,"                ( generationClauseNode.getExpressionText(), generationClauseColumnReferences );"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,802,            int[]   referencedColumns = cdn.getDefaultInfo().getReferencedColumnIDs();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,803,            int     count = referencedColumns.length;
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,807,                int         referencedColumnID = referencedColumns[ i ];
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1044,"        addGeneratedColumnPrecursors( affectedGeneratedColumns, columnMap );"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1073,"        ColumnDescriptorList    affectedGeneratedColumns,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1074,  FormatableBitSet        columnMap
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1083,            int[]                       mentionedColumns = gc.getDefaultInfo().getReferencedColumnIDs();
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1131,            int[]                       mentionedColumns = defaultInfo.getReferencedColumnIDs();
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1132,            int                         mentionedColumnCount = mentionedColumns.length;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1142,                ColumnDescriptor    mentionedColumn = baseTable.getColumnDescriptor( mentionedColumns[ mcIdx ] );
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1143,                String                      mentionedColumnName = mentionedColumn.getColumnName();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,502,"     dropColumnFromTable(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1410,  * @param   ix    the index of the column specfication in the ALTER
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1414," private void dropColumnFromTable(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1415,          int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1423,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1424,  ColumnDescriptor columnDescriptor =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1425,   td.getColumnDescriptor(columnInfo[ix].name);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1426,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1427,"  // We already verified this in bind, but do it again"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1428,  if (columnDescriptor == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1429,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1430,   throw
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1431,    StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1432,"                    SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1433,"                    columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1434,                    td.getQualifiedName());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1435,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1438,  ColumnDescriptorList tab_cdl = td.getColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1439,  int size = tab_cdl.size();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1442,  if (size == 1)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1447,"                    ""THE *LAST* COLUMN "" + columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1453,  boolean cascade = (behavior == StatementType.DROP_CASCADE);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1504,"                            columnInfo[ix].name, ""TRIGGER"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1576,"                        columnInfo[ix].name, ""CONSTRAINT"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1660,"  dd.dropColumnDescriptor(td.getUUID(), columnInfo[ix].name, tc);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1011,"             new int[] {},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1017,"             new int[] { 1 },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1023,"             new int[] { 1, 3 },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2494,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2495,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2496,    // MINIONS
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2497,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2498,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2499,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2500,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2501,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2502,     * Run good DDL.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2503,     * @throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2504,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2505,"    private void    goodStatement( Connection conn, String ddl ) throws SQLException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2506,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2507,"        PreparedStatement    ps = chattyPrepare( conn, ddl );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2508,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2509,        ps.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2510,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2511,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2512,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2513,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2514,     * Prepare a statement and report its sql text.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2515,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2516,"    private PreparedStatement   chattyPrepare( Connection conn, String text )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2517,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2518,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2519,"        println( ""Preparing statement:\n\t"" + text );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2520,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2521,        return conn.prepareStatement( text );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2522,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2523,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2524,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2525,"     * Assert that the statement text, when compiled, raises an exception"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2526,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2527,"    private void    expectCompilationError( String sqlState, String query )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2528,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2529,"        println( ""\nExpecting "" + sqlState + "" when preparing:\n\t"" + query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2530,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2531,"        assertCompileError( sqlState, query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2532,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2533,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2535,"     * Assert that the statement text, when executed, raises an error."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2537,"    private void    expectExecutionError( Connection conn, String sqlState, String query )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2540,"        println( ""\nExpecting "" + sqlState + "" when executing:\n\t""  );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2541,"        PreparedStatement   ps = chattyPrepare( conn, query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2542,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2543,"        assertStatementError( sqlState, ps );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2544,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2546,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2547,     * Assert that triggers fire correctly
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2548,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2549,"    private void assertTriggerStatus( Connection conn, String query, String[][] rows )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2550,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2551,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2555,"             ""call clearTriggerReports()\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2560,             query
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2562,"        PreparedStatement   ps = chattyPrepare( conn, ""select * from table( triggerReports() ) s"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2563,        ResultSet                   rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2564,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2565,"        assertResults( rs, rows, true );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2566,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2567,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2568,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2569,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2570,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2571,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2572,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2573,     * Assert whether a routine is expected to be DETERMINISTIC.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2574,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2575,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2576,"    public  void    assertDeterministic( Connection conn, String routineName, boolean isDeterministic )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2577,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2578,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2579,        PreparedStatement   ps = conn.prepareStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2581,"             ""select a.aliasinfo\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2582,"             ""from sys.sysaliases a\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2583,"             ""where alias =  ?"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2585,"        ps.setString( 1, routineName );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2586,        ResultSet               rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2587,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2588,        rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2589,        RoutineAliasInfo    rai = (RoutineAliasInfo) rs.getObject( 1 );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2590,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2591,"        assertEquals( isDeterministic, rai.isDeterministic() );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2592,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2593,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2594,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2595,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2596,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2597,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2598,     * Assert that the statement returns the correct results.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2599,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2600,"    private void assertResults( Connection conn, String query, String[][] rows, boolean trimResults )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2601,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2602,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2603,"        PreparedStatement   ps = chattyPrepare( conn, query );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2604,        ResultSet                   rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2606,"        assertResults( rs, rows, trimResults );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2608,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2609,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2610,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2612,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2613,     * Assert that the ResultSet returns the desired rows.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2673,"        ( Connection conn, String tableName, String columnName, int[] expectedReferenceColumns, String expectedDefaultText )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2679,"            ( StringUtil.stringify( expectedReferenceColumns ), StringUtil.stringify( di.getReferencedColumnIDs() ) );"
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,347,   defaultInfo = (DefaultInfoImpl)cd.getDefaultInfo();
java/shared/org/apache/derby/shared/common/reference/SQLState.java,904,"    String LANG_CASCADED_GEN_COL_DROP                                     = ""42XA7"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,3477,    public static   int minus( int a )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,3481,        return -a;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,343,"  dropJDBCMetadataSPSes(tc, false);"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,344,  bootingDictionary.createSystemSps(tc);
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,453,   bootingDictionary.clearSPSPlans();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,488,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,489, /**
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,490,  * Drop all jdbc metadata spses.  This
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,491,  * it to ensure that we don't have any problems
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,492,  * with old metadata queries that have outdated
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,493,  * query text (the plans are always cleared out
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,494,  * on upgrade time).
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,495,  *
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,496,  * @param tc the xact
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,497,"  * @param removeSYSIBMonly if <code>true</code>, remove stored"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,498,"  * prepared statements in the SYSIBM schema only; otherwise,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,499,  * remove stored prepared statements in all system schemas
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,500,  * (including SYSIBM)
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,501,  *
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,502,  * @exception StandardException  Standard Derby error policy.
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,503,  */
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,504," protected void dropJDBCMetadataSPSes(TransactionController tc, boolean removeSYSIBMonly)"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,505,  throws StandardException
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,506, {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,507,  for (java.util.Iterator it = bootingDictionary.getAllSPSDescriptors().iterator(); it.hasNext(); )
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,508,  {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,509,   SPSDescriptor spsd = (SPSDescriptor) it.next();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,510,   SchemaDescriptor sd = spsd.getSchemaDescriptor();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,511,"   // need to compare the name, old SYSIBM is not built-in"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,512,   boolean isSYSIBM = sd.getSchemaName().equals(SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME);
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,513,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,514,   // don't drop statements in non-system schemas
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,515,   if (!sd.isSystemSchema() && !isSYSIBM) {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,516,    continue;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,517,   }
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,518,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,519,   // don't drop statements outside the SYSIBM schema if
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,520,   // we're told not to
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,521,   if (removeSYSIBMonly && !isSYSIBM) {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,522,    continue;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,523,   }
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,524,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,525,"   bootingDictionary.dropSPSDescriptor(spsd, tc);"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,526,"   bootingDictionary.dropDependentsStoredDependencies(spsd.getUUID(),"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,527,                  tc);
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,528,  }
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,529, }
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,530,
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,433, public int genColumnInfos(ColumnInfo[] colInfos)
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,444,"        null, null, null, null, null,"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,458,    /* Remember how many constraints that we've seen */
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,32,
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,25,
java/engine/org/apache/derby/iapi/util/StringUtil.java,499,     * Turn an array of ints into a printable string.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1589,      // generate statements of the form
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1590,"   // fieldX.setColumn(columnNumber, (DataValueDescriptor) columnExpr);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1591,   // and add them to exprFun.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1602,                continue;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1639, public MethodBuilder generateGenerationClauses
java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java,152,"        return ""GENERATED ALWAYS( "" + _expressionText + "" )"";"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,754,   // bind the check condition
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,755,   // verify that it evaluates to a boolean
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,769,    ProviderList prevAPL = cc.getCurrentAuxiliaryProviderList();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,823,    // Restore the previous AuxiliaryProviderList
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,824,    cc.setCurrentAuxiliaryProviderList(prevAPL);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,42,import org.apache.derby.iapi.sql.compile.C_NodeTypes;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,579,     /* Get and bind all check constraints on the columns
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,580,      * being updated.  We want to bind the check constraints against
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,592,   * Compute the generation clauses on the current row in order to fill in computed columns.
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,69,        // First ensure that we are running in english locale; the output
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,70,"        // master has been created in that locale, and thus, running in any"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,71,        // other locale will fail.
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,72,"        if (!getSystemProperty(""user.language"").equalsIgnoreCase(""en""))"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,73,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,74,
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,97,"     * Needs input encoding Cp850, or we get a syntax error on connecting to"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java,68,        // First ensure that we are running in english locale; the output
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java,69,"        // master has been created in that locale, and thus, running in any"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java,70,        // other locale will fail.
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java,71,"        if (!getSystemProperty(""user.language"").equalsIgnoreCase(""en""))"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java,72,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java,105,        super(localizedTest);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ToolScripts.java,136,"        super(toolTest, null /* default encoding */, user);"
java/testing/org/apache/derbyTesting/functionTests/util/CanonTestCase.java,47,"    final String outputEncoding = ""US-ASCII"";"
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,37,
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,49,  super(script);
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,50,"  inputEncoding = ""US-ASCII"";"
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,51,  user = null;
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,63,        super(script);
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,64,        inputEncoding = encoding;
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,65,  user = null;
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,74,"     * @param encoding   Run using encoding if not null, else use ""US-ASCII""."
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,77,"    public ScriptTestCase(String script, String encoding, String user)"
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,79,        super(script);
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,81,  if (encoding != null) {
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,82,   inputEncoding = encoding;
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,83,  } else {
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,84,"   inputEncoding = ""US-ASCII"";"
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,85,  }
java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java,162,    outputEncoding);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3909,                // in a NULL literal as a placeholder.
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,77,    private int                             firstColumn = -1;
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,78,    private int[]                           generatedColumnPositions; // 1-based positions
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,79,    private DataValueDescriptor[]  normalizedGeneratedValues; // one for  each slot in generatedColumnPositions
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,666,   * Construct support for normalizing generated columns.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,295,"  * Normalize a row.  For now, this means calling constructors through"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,302,"  * In the future, this mechanism will be extended to do type conversions,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,303,  * as well.  I didn't implement type conversions yet because it looks
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,304,"  * like a lot of work, and we needed char and varchar right away."
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,305,  *
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,335,"  * Normalize a row.  For now, this means calling constructors through"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,336,"  * the type services to normalize a type to itself.  For example,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,337,"  * if you're putting a char(30) value into a char(15) column, it"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,338,"  * calls a SQLChar constructor with the char(30) value, and the"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,339,  * constructor truncates the value and makes sure that no non-blank
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,340,  * characters are truncated.
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,341,  *
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,342,"  * In the future, this mechanism will be extended to do type conversions,"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,343,  * as well.  I didn't implement type conversions yet because it looks
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,344,"  * like a lot of work, and we needed char and varchar right away."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,1505,     * generation clause can be assigned to.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2256,"             ""    a char( 10 ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/concateTests.java,891,   //ERROR 22001: A truncation error was encountered trying to shrink VARCHAR () FOR BIT DATA 'XX-RESOLVE-XX' to length 32672.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,102,        return new CleanDatabaseTestSetup( suite );
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,284,  // We are reclaiming row space or long column.  First get an xlock on the
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,285,  // head row piece.
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,336,    (StoredPage)containerHdl.getPageNoWait(headPageId);
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,337,
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,340,"    // Cannot get page no wait, try again later."
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,342,    if (work.incrAttempts() < 3)
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,343,     return Serviceable.REQUEUE;
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,344,    else
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,345,     return Serviceable.DONE;
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,347,
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,64,"    public void testMultiThreadedUpdate() throws SQLException,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,78,"                                updateString, key);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,103,"            String updateString, int key) throws SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,64,"    public void testMultiThreadedUpdate(final boolean lockTable) throws SQLException,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,72,            final int key = i + 1;
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,125,        testMultiThreadedUpdate(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,137,        testMultiThreadedUpdate(true);
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,57,     * Two threads simultaneously updating a table. Thread 1 updates row 1 with
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,58,"     * a long value (>32K) Thread 2 updates row with a short clob (""hello"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,59,     * NUMALLOCATEDPAGES should be only 3 after each does 500 updates
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,98,        Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,101,"        ResultSet rs = s.executeQuery(""SELECT NUMALLOCATEDPAGES FROM """
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,102,"                + "" new org.apache.derby.diag.SpaceTable('APP','CLOBTAB') t"""
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,103,"                + "" WHERE CONGLOMERATENAME = 'CLOBTAB'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,105,                + expectedNumAllocated } });
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,512,  Open container shared no wait
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,518,  ContainerHandle containerHdl = tran.openContainer
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,519,"   (containerId, rlock,"
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,520,    ContainerHandle.MODE_FORUPDATE |
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,521,    ContainerHandle.MODE_LOCK_NOWAIT);
java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java,522,
java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java,177,"        int actualLength = (int) Math.min(len, maxPos - pos);"
java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java,204,        updateIfRequired();
java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java,205,"        int actualLength = (int) Math.min(b.length, maxPos - pos);"
java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java,206,"        int retValue = stream.read(b, 0, actualLength);"
java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java,207,        if (retValue > 0)
java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java,208,            pos += retValue;
java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java,209,        return retValue;
java/client/org/apache/derby/client/am/Lob.java,320,     *         d) pos + length > (length of LOB)
java/client/org/apache/derby/client/am/Lob.java,334,        if (length > (this.length() - pos)) {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,999,        if (length > (this.length() - pos)) {
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,710,        if (length > (this.length() - pos)) {
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,115,        this.alphabet = alphabet;
java/client/org/apache/derby/client/am/Blob.java,647,     * the number of bytes in the <code>Blob</code> or if pos + length is
java/client/org/apache/derby/client/am/Blob.java,648,     * greater than the number of bytes in the <code>Blob</code>
java/client/org/apache/derby/client/am/Clob.java,878,     * characters in the <code>Clob</code> or if pos + length is greater than
java/client/org/apache/derby/client/am/Clob.java,879,     * the number of
java/client/org/apache/derby/client/am/Clob.java,880,     * characters in the <code>Clob</code>
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,980,     *      the number of bytes in the <code>Blob</code> or if pos + length is
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,981,     *      greater than the number of bytes in the <code>Blob</code>
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,688,     * characters in the <code>Clob</code> or if pos + length is greater than
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,689,     * the number of
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,690,     * characters in the <code>Clob</code>
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,691,     *
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,692,     * @throws SQLException.
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,72,    /** The temporary directory for the database. */
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,97,     * @param uniqueNameIgnored ignored
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,102,"                     String tempDirNameIgnored, String uniqueNameIgnored)"
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,127,"            tempDir = new VirtualFile(getSeparator() + ""tmp"", dbData);"
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,148,        if (tempDir != null && !tempDir.exists()) {
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,68,    /** The canonical (unique) name of the database. */
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,128,"            tempDir = new VirtualFile(PathUtil.join(canonicalName, ""tmp""),"
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,183,"        return new VirtualFile(path, dbData);"
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,194,"        return new VirtualFile(PathUtil.join(directoryName, fileName), dbData);"
java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java,206,"        return newStorageFile(directoryName.getPath(), fileName);"
java/client/org/apache/derby/client/am/Agent.java,270,"            BatchUpdateException bue = new BatchUpdateException(logWriter_,"
java/client/org/apache/derby/client/am/Agent.java,272,                updateCounts);
java/client/org/apache/derby/client/am/Agent.java,273,            bue.setNextException(accumulatedExceptions.getSQLException());
java/client/org/apache/derby/client/am/Agent.java,274,            throw bue;
java/client/org/apache/derby/client/am/BatchUpdateException.java,40,"        Object[] args, int[] updateCounts)"
java/engine/org/apache/derby/catalog/TriggerNewTransitionRows.java,76,    }
java/engine/org/apache/derby/catalog/TriggerNewTransitionRows.java,83,   public ResultSet executeQuery() {
java/engine/org/apache/derby/catalog/TriggerNewTransitionRows.java,84,       return resultSet;
java/engine/org/apache/derby/catalog/TriggerOldTransitionRows.java,77,    }
java/engine/org/apache/derby/catalog/TriggerOldTransitionRows.java,79,       public ResultSet executeQuery() {
java/engine/org/apache/derby/catalog/TriggerOldTransitionRows.java,80,           return resultSet;
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,29, * <p>
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,30, * The current implementation has a size limit of
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,31," * {@code INITIAL_BLOCK_HOLDER_SIZE * blockSize}. For the default values, this"
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,32, * gives:
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,33, * <ul> <li>4 KB blocks: 256 MB
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,34, *      <li>8 KB blocks: 512 MB
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,35, *      <li>16 KB blocks: 1024 MB
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,36, *      <li>32 KB blocks: 2048 MB
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,37, * </ul>
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,53,    private static final int INITIAL_BLOCK_HOLDER_SIZE = 64*1024;
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,92,     * Reads the up to {@code len} bytes.
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,304,            // TODO: Thrown an OOME or do something else here?
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,305,"            //       If we let the array grow unbounded, the JVM would throw"
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,306,            //       the OOME when get into the situation that all the
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,307,            //       available memory is exhausted.
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,308,"            throw new IllegalStateException(""Too big: ~"" +"
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,309,"                    ((lastIndex) / 1024 / 1024) + "" MB"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,1364,"        s.executeUpdate(""CREATE TRIGGER  APP.MYTRIG AFTER DELETE ON APP.TAB REFERENCING OLD_TABLE AS OLDROWS FOR EACH STATEMENT INSERT INTO APP.LOG(i,name,deltime) SELECT OLDROWS.I, NAMES.NAME, CURRENT_TIMESTAMP FROM --DERBY-PROPERTIES joinOrder=FIXED\n NAMES, OLDROWS --DERBY-PROEPERTIES joinStrategy = NESTEDLOOP\n WHERE (OLDROWS.i = NAMES.ID) AND (1 = 1)"");"
java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java,414,"            { tableElementList.bindAndValidateGenerationClauses( schemaDescriptor, fromList, generatedColumns ); }"
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,441,"   if  (numGenerationClauses > 0) { tableElementList.bindAndValidateGenerationClauses( sd, fromList, generatedColumns ); }"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,747," void bindAndValidateGenerationClauses( SchemaDescriptor sd, FromList fromList, FormatableBitSet generatedColumns )"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,895,        //
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,896,        // Now verify that none of the generated columns reference other
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,897,        // generated columns.
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,898,        //
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,899,        ResultColumnList rcl = table.getResultColumns();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,903,   TableElementNode element = (TableElementNode) elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,911,            String[]   referencedColumnNames = cdn.getDefaultInfo().getReferencedColumnNames();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,912,            int     count = referencedColumnNames.length;
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,914,            for ( int i = 0; i < count; i++ )
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,916,                String      name = referencedColumnNames[ i ];
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,917,"                int         referencedColumnID = rcl.getPosition( name, 1 );"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,919,                if ( generatedColumns.isSet( referencedColumnID ) )
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,921,"                    throw StandardException.newException(SQLState.LANG_CANT_REFERENCE_GENERATED_COLUMN, cdn.getColumnName());"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,923,           }   // end of loop through referenced columns
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,924,
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,925,        }       // end of loop through generated columns
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,926,
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,927, }
java/testing/org/apache/derbyTesting/system/sttest/utils/Datatypes.java,612,  streamReader.close();
java/testing/org/apache/derbyTesting/system/sttest/utils/Datatypes.java,613,  streamIn.close();
java/testing/org/apache/derbyTesting/system/sttest/utils/Datatypes.java,674,}
java/client/org/apache/derby/client/net/NetXAResource.java,170,            rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,231,            rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,293,            throwXAException(XAException.XAER_RMERR);
java/client/org/apache/derby/client/net/NetXAResource.java,374,            rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,445,            rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,498,            rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,572,         rc = XAException.XAER_RMERR;
java/client/org/apache/derby/client/net/NetXAResource.java,621,            rc = XAException.XAER_RMERR;
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,798,        if (sqlstate == null) {
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,799,"            // no idea what was wrong, throw non-descript error."
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,800,            if (message != null)
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,801,                xae = new XAException(message);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,802,            else
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,803,                xae = new XAException(XAException.XAER_RMERR);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,804,        } else if (sqlstate.equals(StandardException.getSQLStateFromIdentifier(
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,806,            xae = new XAException(XAException.XAER_DUPID);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,809,            xae = new XAException(XAException.XA_RBPROTO);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,811,            xae = new XAException(XAException.XA_RBDEADLOCK);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,813,            xae = new XAException(XAException.XA_RBTIMEOUT);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,814,        else if (message != null)
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,815,            xae = new XAException(message);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,817,            xae = new XAException(XAException.XAER_RMERR);
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,385,                    LeafControlRow oldLeaf = leaf;
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,403,                    throw StandardException.plainWrapException(we);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java,476,        for (int i = 0; i < 10; i++) {
java/engine/org/apache/derby/diag/SpaceTable.java,56," <PRE> select * from new org.apache.derby.diag.SpaceTable('MYSCHEMA','MYTABLE') t; </PRE>"
java/engine/org/apache/derby/diag/SpaceTable.java,58,    <PRE> select * from new org.apache.derby.diag.SpaceTable('MYTABLE') t; </PRE>
java/engine/org/apache/derby/diag/SpaceTable.java,59,"    Alternatively, the table can be invoked through the system alias SpaceTable"
java/engine/org/apache/derby/diag/SpaceTable.java,60,    <PRE> select * from new SPACETABLE('MYTABLE') t; </PRE>
java/engine/org/apache/derby/diag/SpaceTable.java,105,"         new org.apache.derby.diag.SpaceTable(SCHEMANAME,TABLENAME) v"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,170,"        waitForSQLState(""08004"", 100L, 20, // 08004.C.7 - CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,201,"        waitForSQLState(""08004"", 100L, 20, // 08004.C.7 - CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,144,    throws InterruptedException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,207,        Thread.sleep(5000L); // TEMPORARY to see if slave sees that master is gone!
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,220,        try
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,221,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,222,            conn = DriverManager.getConnection(connectionURL); // From anywhere against slaveServerHost?
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,223,"            util.DEBUG(""Unexpectedly connected: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,224,"            assertTrue(""Unexpectedly connected: "" + connectionURL,false);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,226,        catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,227,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,228,            int ec = se.getErrorCode();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,229,            String ss = se.getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,230,"            String msg = ec + "" "" + ss + "" "" + se.getMessage();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,231,"            util.DEBUG(""3. Got ""+msg + "" Expected: "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,232,                       REPLICATION_DB_NOT_BOOTED);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,233,            BaseJDBCTestCase.assertSQLState(
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,234,"                connectionURL + "" failed: "","
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,235,"                REPLICATION_DB_NOT_BOOTED,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,236,                se);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,237,"            util.DEBUG(""3. Failed as expected: "" + connectionURL +  "" "" + msg);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,238,            stopSlaveCorrect = true;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,250,            Thread.sleep(5000L); // TEMP FIX! To avoid 40000 08004 The connection was refused because the database ..../wombat was not found!
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,263,                // CURRENTLY FAILS W/ 40000 08004 The connection was refused because the database /home/os136789/Replication/testing/db_slave/wombat was not found.
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,147,    throws InterruptedException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,213,        // Try a sleep:
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,214,        Thread.sleep(15000L);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,215,        try
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,216,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,217,            conn = DriverManager.getConnection(connectionURL);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,218,"            util.DEBUG(""Successfully connected: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,220,        catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,221,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,222,            int ec = se.getErrorCode();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,223,            String ss = se.getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,224,"            String msg = ec + "" "" + ss + "" "" + se.getMessage();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,225,"            util.DEBUG(""3. Connect to slave unexpectedly failed : """
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,226,"                    + connectionURL + "" "" + msg);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,227,"            assertTrue(""3. Connect to slave unexpectedly failed : """
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,228,"                    + connectionURL + "" "" + msg, false);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java,230,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3651,            } catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3736,        } catch (StandardException t) {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3798,            } catch (StandardException t) {
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,65,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,69,        NumberDataValue         getDataValue(Short value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,75,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,79,        NumberDataValue         getDataValue(Byte value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,85,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,89,        NumberDataValue         getDataValue(Long value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,95,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,99,        NumberDataValue         getDataValue(Float value) throws StandardException;
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,105,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,110,        NumberDataValue         getDataValue(Double value) throws StandardException;
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,116,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,120,        BooleanDataValue        getDataValue(Boolean value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,160,        // ------ BOOLEAN
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,161,        /**
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,162,         * Get a SQL boolean with the given value.  A null argument means get
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,163,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,164,         * to hold the return value.
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,165,         *
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,166,         * @exception StandardException         Thrown on error
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,167,         */
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,168,        BooleanDataValue        getDataValue(BooleanDataValue value) throws StandardException;
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,169,
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,172,         * a SQL null value.  The second form uses the previous value (if non-null)
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,173,         * to hold the return value.
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,202,         * get a SQL null value.  The second form uses the previous value
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,203,         * (if non-null) to hold the return value.
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,266,         * A null argument means get a SQL null value.  The second form uses
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,270,        UserDataValue           getDataValue(Object value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,283,         * Get a SQL int with the given value.  The second form re-uses the
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,287,        NumberDataValue         getDataValue(int value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,292,         * Get a SQL bigint with the given value.  The second form re-uses the
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,296,        NumberDataValue         getDataValue(long value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,364,         * Get a SQL boolean with the given value.  The second form re-uses the
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,368,        BooleanDataValue        getDataValue(boolean value);
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,423,"         * a SQL null value.  The second form re-uses the previous value,"
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,427,        DateTimeDataValue       getDataValue(Date value) throws StandardException;
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,433,"         * a SQL null value.  The second form re-uses the previous value,"
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,437,        DateTimeDataValue       getDataValue(Time value) throws StandardException;
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,443,"         * a SQL null value.  The second form re-uses the previous value,"
java/engine/org/apache/derby/iapi/types/DataValueFactory.java,447,        DateTimeDataValue       getDataValue(Timestamp value) throws StandardException;
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,174,        public NumberDataValue getDataValue(int value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,175,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,176,                return new SQLInteger(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,177,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,178,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,188,        public NumberDataValue getDataValue(Integer value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,189,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,190,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,191,                        return new SQLInteger(value.intValue());
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,192,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,193,                        return new SQLInteger();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,194,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,195,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,226,        public NumberDataValue getDataValue(Short value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,227,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,228,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,229,                        return new SQLSmallint(value.shortValue());
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,230,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,231,                        return new SQLSmallint();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,232,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,233,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,238,                        return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,239,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,253,        public NumberDataValue getDataValue(Byte value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,254,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,255,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,256,                        return new SQLTinyint(value.byteValue());
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,257,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,258,                        return new SQLTinyint();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,259,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,260,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,265,                        return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,266,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,271,        public NumberDataValue getDataValue(long value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,272,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,273,                return new SQLLongint(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,274,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,275,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,285,        public NumberDataValue getDataValue(Long value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,286,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,287,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,288,                        return new SQLLongint(value.longValue());
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,289,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,290,                        return new SQLLongint();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,291,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,297,                        return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,298,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,312,        public NumberDataValue getDataValue(Float value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,313,                throws StandardException
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,314,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,315,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,316,                        return new SQLReal(value.floatValue());
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,317,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,318,                        return new SQLReal();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,319,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,320,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,325,                        return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,326,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,340,        public NumberDataValue getDataValue(Double value) throws StandardException
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,341,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,342,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,343,                        return new SQLDouble(value.doubleValue());
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,344,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,345,                        return new SQLDouble();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,346,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,347,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,352,                        return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,353,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,386,        public BooleanDataValue getDataValue(boolean value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,387,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,388,                return new SQLBoolean(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,389,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,390,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,402,        public BooleanDataValue getDataValue(Boolean value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,403,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,404,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,405,                        return new SQLBoolean(value.booleanValue());
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,406,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,407,                        return new SQLBoolean();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,408,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,409,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,415,                        return getDataValue(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,416,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,421,        public BooleanDataValue getDataValue(BooleanDataValue value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,422,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,423,                if (value != null)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,424,                        return value;
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,425,                else
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,426,                        return new SQLBoolean();
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,427,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,428,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,623,        public DateTimeDataValue getDataValue(Date value) throws StandardException
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,624,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,625,                return new SQLDate(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,626,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,627,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,638,        public DateTimeDataValue getDataValue(Time value) throws StandardException
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,639,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,640,                return new SQLTime(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,641,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,642,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,653,        public DateTimeDataValue getDataValue(Timestamp value) throws StandardException
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,654,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,655,                return new SQLTimestamp(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,656,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,657,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,697,        public UserDataValue getDataValue(Object value)
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,698,        {
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,699,                return new UserType(value);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,700,        }
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,701,
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,997,                        return getDataValue((Object) null);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,1025,                        return getDataValue((Date) null);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,1049,                        return getDataValue((Time) null);
java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java,1073,                        return getDataValue((Timestamp) null);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2757,       dvf.getDataValue((Object) columns));
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4254,            dvf.getDataValue(false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4256,            dvf.getDataValue((Object) null);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6147,      dvf.getDataValue(conglomerateNumber);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9168,       dvf.getDataValue(aiValue));
java/engine/org/apache/derby/impl/sql/catalog/DropDependencyFilter.java,188,   trueValue = getDataValueFactory().getDataValue( true );
java/engine/org/apache/derby/impl/sql/catalog/DropDependencyFilter.java,205,   falseValue = getDataValueFactory().getDataValue( false );
java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java,217,"   (SYSALIASES_SYSTEMALIAS, dvf.getDataValue(systemAlias));"
java/engine/org/apache/derby/impl/sql/catalog/SYSALIASESRowFactory.java,221,   dvf.getDataValue(aliasInfo));
java/engine/org/apache/derby/impl/sql/catalog/SYSCHECKSRowFactory.java,142,   dvf.getDataValue(rcd));
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLPERMSRowFactory.java,139,"        row.setColumn( COLUMNS_COL_NUM, dvf.getDataValue( (Object) columns));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,215,    dvf.getDataValue(typeDesc));
java/engine/org/apache/derby/impl/sql/catalog/SYSCOLUMNSRowFactory.java,219,       dvf.getDataValue(defaultSerializable));
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,178,"  row.setColumn(3, dvf.getDataValue(conglomNumber));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,188,"  row.setColumn(5, dvf.getDataValue(supportsIndex));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,194,   dvf.getDataValue(
java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java,203,"  row.setColumn(7, dvf.getDataValue(supportsConstraint));"
java/engine/org/apache/derby/impl/sql/catalog/SYSCONSTRAINTSRowFactory.java,208,"  row.setColumn(SYSCONSTRAINTS_REFERENCECOUNT, dvf.getDataValue(referenceCount));"
java/engine/org/apache/derby/impl/sql/catalog/SYSDEPENDSRowFactory.java,154,    dvf.getDataValue(dependentBloodhound));
java/engine/org/apache/derby/impl/sql/catalog/SYSDEPENDSRowFactory.java,161,    dvf.getDataValue(providerBloodhound));
java/engine/org/apache/derby/impl/sql/catalog/SYSFILESRowFactory.java,159,"  row.setColumn(GENERATION_ID_COL_NUM, dvf.getDataValue(generationId));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,211,"  row.setColumn(5, dvf.getDataValue(valid));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,230,"  row.setColumn(10, dvf.getDataValue(preparedStatement));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,233,"  row.setColumn(11, dvf.getDataValue(initiallyCompilable));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATISTICSRowFactory.java,167,"    row.setColumn(6, dvf.getDataValue(validStat));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATISTICSRowFactory.java,168,"  row.setColumn(7, dvf.getDataValue(columnCount));"
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATISTICSRowFactory.java,169,"  row.setColumn(8, dvf.getDataValue(statisticsObject));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,206,"  row.setColumn(4, dvf.getDataValue(createTime));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,232,"  row.setColumn(12, dvf.getDataValue(rcd));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,238,"  row.setColumn(14, dvf.getDataValue(referencingOld));"
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,241,"  row.setColumn(15, dvf.getDataValue(referencingNew));"
java/engine/org/apache/derby/impl/sql/compile/BooleanConstantNode.java,71,   super.setValue(getDataValueFactory().getDataValue(booleanValue));
java/engine/org/apache/derby/impl/sql/compile/BooleanConstantNode.java,201,  super.setValue(getDataValueFactory().getDataValue(booleanValue));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,88,    setValue(getDataValueFactory().getDataValue((Byte) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,110,    setValue(getDataValueFactory().getDataValue((Short) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,121,    setValue(getDataValueFactory().getDataValue((Long) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,155,    setValue(getDataValueFactory().getDataValue((Double) arg1));
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,166,    setValue(
java/engine/org/apache/derby/impl/sql/compile/NumericConstantNode.java,167,     getDataValueFactory().getDataValue((Float) arg1));
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,81,  if ( val == null )
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,82,  {
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,83,   setValue(getTypeServices().getNull() );
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,84,  }
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,85,  else
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,86,  {
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,87,   setValue(getDataValueFactory().getDataValue(val.booleanValue()));
java/engine/org/apache/derby/impl/sql/compile/SQLBooleanConstantNode.java,88,  }
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,159,    setValue(getDataValueFactory().getDataValue((Date) arg1));
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,163,    setValue(getDataValueFactory().getDataValue((Time) arg1));
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,167,    setValue(getDataValueFactory().getDataValue((Timestamp) arg1));
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,27,import org.apache.derby.iapi.store.raw.RecordHandle;
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,47,"The lockScan*() interfaces assume that the caller gets a ""scan lock"" on the"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,48,page before requesting any row locks on the page.  This is either done by
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,49,"makeing a lockScan() call followed by row lock requests, or it can be done"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,50,in one operation by calling lockScanRow() and requesting the scan lock be
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,51,obtained before getting the row lock.  Upon return from these interfaces
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,58,"The lockNonScan*() interfaces assume that no ""scan lock"" exists.  If these"
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,62,that the correct key is locked with latches held.  Because no scan lock is
java/engine/org/apache/derby/impl/store/access/btree/BTreeLockingPolicy.java,63,held the original row could have disappeared from the table.  These interfaces
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,821,                // RESOLVE RLL (mikem) - do I need to do the
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,822,                // RECORD_ID_PROTECTION_HANDLE lock.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,823,                // First guarantee that record id's will not move off this
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,824,"                // current page while searching for previous key, by getting"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,825,                // the RECORD_ID_PROTECTION_HANDLE lock on the current page.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,826,                // Since we have a latch on the cur
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,827,
java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java,828,                // RESOLVE RLL (mikem) - NO RECORD_ID PROTECTION IN EFFECT.
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,760,"        // the default one, abort."
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,761,        if (colon == -1 && !getType().equals(PersistentService.DIRECTORY)) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,239,                rewindStream(csd.getDataOffset());
java/engine/org/apache/derby/iapi/types/SQLClob.java,243,            rewindStream(0);
java/engine/org/apache/derby/iapi/types/SQLClob.java,345,                    rewindStream(read);
java/engine/org/apache/derby/iapi/types/SQLClob.java,689,            rewindStream(hdrLen);
java/engine/org/apache/derby/iapi/types/SQLClob.java,691,            final boolean markSet = stream.markSupported();
java/engine/org/apache/derby/iapi/types/SQLClob.java,693,                stream.mark(MAX_STREAM_HEADER_LENGTH);
java/engine/org/apache/derby/iapi/types/SQLClob.java,710,                    stream.reset();
java/engine/org/apache/derby/iapi/types/SQLClob.java,711,"                    InputStreamUtil.skipFully(stream, hdrInfo.headerLength());"
java/engine/org/apache/derby/iapi/types/SQLClob.java,712,                } else if (stream instanceof Resetable) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,714,                    rewindStream(hdrInfo.headerLength());
java/engine/org/apache/derby/iapi/types/SQLClob.java,766,     * @param pos number of bytes to skip
java/engine/org/apache/derby/iapi/types/SQLClob.java,769,    private void rewindStream(long pos)
java/engine/org/apache/derby/iapi/types/SQLClob.java,772,            ((Resetable)stream).resetStream();
java/engine/org/apache/derby/iapi/types/SQLClob.java,773,"            InputStreamUtil.skipFully(stream, pos);"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,166,"        //DERBY-3745 We want to avoid the timer leaking class loaders, so we make"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,167,        // sure the context class loader is null before we start the MBean
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,168,        // server which will create threads that we want to have a null context
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,169,        // class loader
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,171,        boolean hasGetClassLoaderPerms=false;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,172,        ClassLoader savecl = null;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,173,        try {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,174,            savecl = (ClassLoader)AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,175,               new PrivilegedAction<ClassLoader>() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,176,                public ClassLoader run()  {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,177,                    return Thread.currentThread().getContextClassLoader();
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,178,                }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,179,            });
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,180,            hasGetClassLoaderPerms = true;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,181,        } catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,182,"           // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,183,           // DERBY-3745 fix did not require getClassloader permissions.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,184,"           // We may leak class loaders if we are not able to get this, but"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,185,           // cannot just fail.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,186,        }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,187,        if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,188,            try {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,189,                AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,190,                new PrivilegedAction<Object>() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,191,                    public Object run()  {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,192,                        Thread.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,193,                                                                  currentThread().setContextClassLoader(null);
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,194,                        return null;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,195,                    }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,196,                });
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,197,            } catch (SecurityException se1) {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,198,"                // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,199,                // DERBY-3745 fix did not require setContextClassloader permissions.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,200,"                // We may leak class loaders if we are not able to set this, but"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,201,                // cannot just fail.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,202,            }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,219,        if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,220,            try {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,221,                final ClassLoader tmpsavecl = savecl;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,222,                AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,223,                new PrivilegedAction<Object>() {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,224,                    public Object run()  {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,225,                        Thread.currentThread().setContextClassLoader(tmpsavecl);
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,226,                        return null;
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,227,                    }
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,228,                });
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,229,            } catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,230,"                // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,231,                // DERBY-3745 fix did not require setContextClassloader permissions.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,232,"                // We may leak class loaders if we are not able to set this, but"
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,233,                // cannot just fail.
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,234,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,161,        // Get the BLOB value length though Blob.length
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,189,        // Get the CLOB value length though Clob.length
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,52,"    final static String REPLICATION_MASTER_TIMED_OUT = ""XRE06"";"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1278,    private void stopSlave(String dbName)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1279,    {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1280,"        util.DEBUG(""Simulating '... stopslave -db ""+dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1281,    }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1282,"    private void stopSlave_ij(String jvmVersion,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1283,"            String dbName,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1284,"            String slaveHost,  // Where the slave db is run."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1285,"            int slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1286,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1287,            String testClientHost)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1288,            throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1289,    {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1290,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1291,"        String masterClassPath = derbyMasterVersion +FS+ ""derbynet.jar"";"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1292,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1293,        String URL = slaveURL(dbName)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1294,"                +"";stopSlave=true"";"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1295,"        String ijClassPath = derbyVersion +FS+ ""derbyclient.jar"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1296,"                + PS + derbyVersion +FS+ ""derbytools.jar"";"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1297,"        if ( slaveHost.equals(""localhost"") )"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1298,        { // Use full classpath when running locally. Can not vary server versions!
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1299,            ijClassPath = classPath;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1300,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1301,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1302,        String clientJvm = BaseTestCase.getJavaExecutableName();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1303,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1304,"        String command = clientJvm // ""java"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1305,"                + "" -Dij.driver="" + DRIVER_CLASS_NAME"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1306,"                + "" -Dij.connection.stopSlave=\"""" + URL + ""\"""""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1307,"                + "" -classpath "" + ijClassPath + "" org.apache.derby.tools.ij"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1308,"                + "" "" + ""/home/os136789/Replication/testing/exit.sql"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1309,                ;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1310,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1311,        // Execute the ij command on the testClientHost as testUser
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1312,        String results =
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1313,"                runUserCommandRemotely(command,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1314,"                testClientHost,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1315,"                testUser,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1316,"                ""stopSlave_ij "");"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1317,        util.DEBUG(results);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1318,    }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1319,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,119,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,120,"    SQLException _stopSlave(String slaveServerHost, int slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,121,            String dbPath)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,122,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,123,    {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,124,"        util.DEBUG(""_stopSlave"");"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,125,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,126,        ds.setDatabaseName(dbPath);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,127,        ds.setServerName(slaveServerHost);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,128,        ds.setPortNumber(slaveServerPort);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,129,"        ds.setConnectionAttributes(""stopSlave=true"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,130,                +useEncryption(false));
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,131,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,132,            Connection conn = ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,133,            conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,134,            return null; // If successfull.
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,135,        } catch (SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,136,            return se;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,137,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,138,    }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,139,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p1.java,143,"            _stopSlave(slaveServerHost, slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p1.java,144,"                slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb),"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p1.java,152,"            _stopSlave(masterServerHost, masterServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p1.java,153,"                masterDatabasePath + FS + masterDbSubPath + FS + replicatedDb),"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p1.java,169,"            _stopSlave(slaveServerHost, slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p1.java,170,"                slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb),"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,91,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,92,        Thread.sleep(5000L); // Need time to settle down if we had load.
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,93,        // With this sleep we always have REPLICATION_SLAVE_SHUTDOWN_OK
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,94,"        String expected = ""XRE42""; // REPLICATION_SLAVE_SHUTDOWN_OK"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,95,"        // if ( replicationTest != null ) expected = ""XRE41""; // SLAVE_OPERATION_DENIED_WHILE_CONNECTED  = ""XRE41"" if had load and no sleep"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,96,        assertException(
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,97,"            _stopSlave(slaveServerHost, slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,98,"                slaveDatabasePath +FS+ slaveDbSubPath +FS+ replicatedDb), // OK when master is gone."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,99,            expected);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,100,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,102,        // No change. Thread.sleep(5000L); // Need time to settle down if we had load?
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,131,"        /* Slave server still running, so do not need:"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,132,"        slaveServer = startServer(slaveJvmVersion, derbySlaveVersion,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,133,"                slaveServerHost,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,134,"                ALL_INTERFACES,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,135,"                slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,136,                slaveDbSubPath); */
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,138,        Thread.sleep(5000L); // Need time to settle down if we had load.
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p5.java,155,"        assertSqlStateSlaveConn(""XRE08""); // REPLICATION_SLAVE_STARTED_OK"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,145,"            throws InterruptedException, SQLException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,147,        String db = null;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,148,        String connectionURL = null;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,149,        Connection conn = null;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,150,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,152,        db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,153,"        connectionURL = ""jdbc:derby:"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,154,"                + ""//"" + slaveServerHost + "":"" + slaveServerPort + ""/"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,155,                + db
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,156,"                + "";stopSlave=true"";"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,157,"        util.DEBUG(""1. testPostStartedMasterAndSlave_StopSlave: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,158,        try
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,159,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,160,            conn = DriverManager.getConnection(connectionURL);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,161,"            util.DEBUG(""Unexpectdly connected as: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,162,"            assertTrue(""Unexpectedly connected: "" + connectionURL,false);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,163,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,164,        catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,165,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,166,            int ec = se.getErrorCode();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,167,            String ss = se.getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,168,"            String msg = ec + "" "" + ss + "" "" + se.getMessage();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,169,            BaseJDBCTestCase.assertSQLState(
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,170,"                connectionURL + "" failed: "","
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,171,"                SLAVE_OPERATION_DENIED_WHILE_CONNECTED,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,172,                se);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,173,"            util.DEBUG(""1. Failed as expected: "" + connectionURL +  "" "" + msg);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,174,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,176,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,178,        db = masterDatabasePath +FS+ReplicationRun.masterDbSubPath +FS+ replicatedDb;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,179,"        connectionURL = ""jdbc:derby:"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,180,"                + ""//"" + masterServerHost + "":"" + masterServerPort + ""/"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,181,                + db
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,182,"                + "";stopSlave=true"";"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,183,"        util.DEBUG(""2. testPostStartedMasterAndSlave_StopSlave: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,184,        try
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,185,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,186,            conn = DriverManager.getConnection(connectionURL); // From anywhere against slaveServerHost?
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,187,"            util.DEBUG(""Unexpectdly connected as: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,188,"            // DERBY-???? - assertTrue(""Unexpectedly connected: "" + connectionURL,false);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,189,       }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,190,        catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,191,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,192,            int ec = se.getErrorCode();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,193,            String ss = se.getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,194,"            String msg = ec + "" "" + ss + "" "" + se.getMessage();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,195,"            // SSQLCODE: -1, SQLSTATE: XRE40"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,196,            BaseJDBCTestCase.assertSQLState(
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,197,"                connectionURL + "" failed: "","
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,198,"                REPLICATION_NOT_IN_SLAVE_MODE,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,199,                se);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,200,"            util.DEBUG(""2. Failed as expected: "" + connectionURL +  "" "" + msg);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,201,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,203,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,205,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,208,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,213,        db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,214,"        connectionURL = ""jdbc:derby:"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,215,"                + ""//"" + slaveServerHost + "":"" + slaveServerPort + ""/"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,216,                + db
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,217,"                + "";stopSlave=true"";"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,218,        boolean stopSlaveCorrect = false;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,219,"        util.DEBUG(""3. testPostStartedMasterAndSlave_StopSlave: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,220,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,221,"        // We use a loop below, to allow for intermediate states before the"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,222,        // expected final state.
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,223,        //
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,224,        // If we get here quick enough we see these error states (in order):
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,225,        //     a) SLAVE_OPERATION_DENIED_WHILE_CONNECTED
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,226,        //     b) REPLICATION_SLAVE_SHUTDOWN_OK
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,227,        //
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,228,        // The final end state is expected to be REPLICATION_DB_NOT_BOOTED.
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,229,        //
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,230,        SQLException gotEx = null;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,231,        int tries = 20;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,233,        while (tries-- > 0) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,234,            gotEx = null;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,236,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,237,                // From anywhere against slaveServerHost?
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,238,                conn = DriverManager.getConnection(connectionURL);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,239,"                util.DEBUG(""Unexpectedly connected: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,240,"                assertTrue(""Unexpectedly connected: "" + connectionURL,false);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,242,            } catch (SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,243,                if (se.getSQLState().
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,244,                        equals(SLAVE_OPERATION_DENIED_WHILE_CONNECTED)) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,245,"                    // Try again, shutdown did not complete yet.."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,246,                    gotEx = se;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,247,                    util.DEBUG
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,248,"                        (""got SLAVE_OPERATION_DENIED_WHILE_CONNECTED, sleep"");"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,249,                    Thread.sleep(1000L);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,250,                    continue;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,252,                } else if (se.getSQLState().
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,253,                               equals(REPLICATION_SLAVE_SHUTDOWN_OK)) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,254,"                    // Try again, shutdown started but did not complete yet."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,255,                    gotEx = se;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,256,"                    util.DEBUG(""got REPLICATION_SLAVE_SHUTDOWN_OK, sleep.."");"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,257,                    Thread.sleep(1000L);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,258,                    continue;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,260,                } else if (se.getSQLState().equals(REPLICATION_DB_NOT_BOOTED)) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,261,"                    // All is fine, so proceed"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,262,"                    util.DEBUG(""Got REPLICATION_DB_NOT_BOOTED as expected"");"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,263,                    stopSlaveCorrect = true;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,264,                    break;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,266,                } else {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,267,"                    // Something else, so report."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,268,                    gotEx = se;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,269,                    break;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,270,                }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,271,            }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,272,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,274,        if (gotEx != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,275,            // We did not get what we expected as the final state
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,276,"            // (REPLICATION_DB_NOT_BOOTED) in reasonable time, or we saw"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,277,"            // something that is not a legal intermediate state, so we fail"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,278,            // now:
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,279,            throw gotEx;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,280,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,281,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,282,        // Default replication test sequence will NOT be OK after this point.
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,283,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,284,        if ( stopSlaveCorrect )
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,285,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,286,            // 4. Try a normal connection:
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,287,"            connectionURL = ""jdbc:derby:"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,288,"                    + ""//"" + slaveServerHost + "":"" + slaveServerPort + ""/"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,289,                    + db;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,290,"            util.DEBUG(""4. testPostStartedMasterAndSlave_StopSlave: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,291,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,292,            try
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,293,            {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,294,                conn = DriverManager.getConnection(connectionURL);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,295,"                util.DEBUG(""4. Connected as expected: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,296,            }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,297,            catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,298,            {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,299,                int ec = se.getErrorCode();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,300,                String ss = se.getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,301,"                String msg = ec + "" "" + ss + "" "" + se.getMessage();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,302,"                util.DEBUG(""4. Unexpectedly failed to connect: "" + connectionURL +  "" "" + msg);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,303,"                assertTrue(""Unexpectedly failed to connect: "" + connectionURL +  "" "" + msg, false);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,304,            }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,307,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,308,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,194,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,214,"                _stopSlave(slaveServerHost,slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,215,"                    slaveDatabasePath, replicatedDb,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,216,"                    slaveReplPort),"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,312,"    SQLException _stopSlave(String slaveServerHost, int slaveServerPort,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,313,"            String slaveDatabasePath, String replicatedDb,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,314,            int slaveReplPort)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,315,    {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,316,        String db = slaveDatabasePath +FS+ReplicationRun.slaveDbSubPath +FS+ replicatedDb;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,317,"        String connectionURL = ""jdbc:derby:"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,318,"                + ""//"" + slaveServerHost + "":"" + slaveServerPort + ""/"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,319,                + db
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,320,"                + "";stopSlave=true"""
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,321,"                + "";slaveHost="" + slaveServerHost"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,322,"                + "";slavePort="" + slaveReplPort;"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,323,        util.DEBUG(connectionURL);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,324,        try
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,325,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,326,            Connection conn = DriverManager.getConnection(connectionURL);
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,327,"            util.DEBUG(""stopSlave Unexpectedly connected as: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,328,"            return new SQLException(""stopSlave Unexpectedly connected"");"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,329,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,330,        catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,331,        {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,332,            return se;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,333,        }
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part2.java,334,    }
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,53,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,117,"                            new File(failPath, ""error-stacktrace.out""), true));"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,123,"                File origLog = new File(""system"", ""derby.log"");"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,124,"                File newLog = new File(failPath, ""derby.log"");"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,128,"                File dbDir = new File(""system"", dbName );"
java/engine/org/apache/derby/iapi/services/io/FormatableBitSet.java,688,  * @param beyondBit only look at bit that is greater than this bit number
java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java,187, public void updateRow(ExecRow row) throws StandardException;
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,333, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/CurrentOfResultSet.java,334,  ((NoPutResultSet)cursor).updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java,515, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,406, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,407,  source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,586, public void updateRow (ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,587,  source.updateRow(row);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1101, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1102,  ExecRow newRow = row;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1103,  boolean undoProjection = false;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1115,  if (prRS != null) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1116,   newRow = prRS.doBaseRowProjection(row);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1117,   undoProjection = true;
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1118,  }
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1119,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1121,  DataValueDescriptor[] hashRowArray = (DataValueDescriptor[])
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1126,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1132,  if (undoProjection) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1133,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1134,   final DataValueDescriptor[] newRowData = newRow.getRowArray();
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1135,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1136,   // Array of original position in row
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1137,   final int[] origPos = prRS.getBaseProjectMapping();
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1138,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1139,   // We want the row to contain data backed in BackingStoreHashtable
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1140,   final DataValueDescriptor[] backedData =
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1141,    getRowArrayFromHashTable(currentPosition);
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1142,
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1143,   for (int i=0; i<origPos.length; i++) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1144,    if (origPos[i]>=0) {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1145,"     row.setColumn(origPos[i], backedData[i]);"
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1146,    }
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1148,  } else {
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,1149,   row.setRowArray(getRowArrayFromHashTable(currentPosition));
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,1127, public void updateRow(ExecRow row) throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,560,    source.updateRow(newBaseRow);
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,888,     source.updateRow(newBaseRow);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,60,"        test = DatabasePropertyTestSetup.setLockTimeouts(test, 2, 4);"
java/engine/org/apache/derby/iapi/sql/execute/RowChanger.java,173,"  * @returns column no, or -1 if not found or not a base column"
java/demo/nserverdemo/NsSample.java,44, 2. loads the IBM DB2 JDBC Universal driver or derby client JDBC driver
java/demo/nserverdemo/NsSample.java,45,        (default is the derby client JDBC driver)
java/demo/nserverdemo/NsSample.java,69," public static final String DB2_JDBC_UNIVERSAL_DRIVER = new String(""com.ibm.db2.jcc.DB2Driver"");"
java/demo/nserverdemo/NsSample.java,70,"        public static final String DERBY_CLIENT_DRIVER = ""org.apache.derby.jdbc.ClientDriver"";"
java/demo/nserverdemo/NsSample.java,85," private static final String CS_NS_DBURL= ""jdbc:derby:net://localhost:""+NETWORKSERVER_PORT+""/NSSampledb;create=true;retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;"";"
java/demo/nserverdemo/NsSample.java,108,                // Determine which JDBC driver we are using with Derby
java/demo/nserverdemo/NsSample.java,109,                parseArguments(args);
java/demo/nserverdemo/NsSample.java,110,
java/demo/nserverdemo/NsSample.java,173,"  properties.setProperty(""user"",""cloud"");"
java/demo/nserverdemo/NsSample.java,174,"  properties.setProperty(""password"",""scape"");"
java/demo/nserverdemo/NsSample.java,234,    /**
java/demo/nserverdemo/NsSample.java,235,     * Determine which jdbc driver to use by parsing the command line args.
java/demo/nserverdemo/NsSample.java,236,     *  Accepted values:
java/demo/nserverdemo/NsSample.java,237,     *  jccjdbclient   - The DB2 type 4 universal driver
java/demo/nserverdemo/NsSample.java,238,     *  derbyclient    - The Derby network driver (default).
java/demo/nserverdemo/NsSample.java,239,"     *  Note: because this is just a sample, we only care about whether"
java/demo/nserverdemo/NsSample.java,240,"     *  the above values are specified.  If they are not, then we default"
java/demo/nserverdemo/NsSample.java,241,     *  to the Derby network driver.
java/demo/nserverdemo/NsSample.java,242,     */
java/demo/nserverdemo/NsSample.java,243,    private void parseArguments(String[] args)
java/demo/nserverdemo/NsSample.java,244,    {
java/demo/nserverdemo/NsSample.java,245,        int length = args.length;
java/demo/nserverdemo/NsSample.java,246,
java/demo/nserverdemo/NsSample.java,247,        for (int index = 0; index < length; index++)
java/demo/nserverdemo/NsSample.java,248,        {
java/demo/nserverdemo/NsSample.java,249,"            if (args[index].equalsIgnoreCase(""jccjdbcclient""))"
java/demo/nserverdemo/NsSample.java,250,            {
java/demo/nserverdemo/NsSample.java,251,                jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
java/demo/nserverdemo/NsSample.java,252,                url = CS_NS_DBURL;
java/demo/nserverdemo/NsSample.java,253,                break;
java/demo/nserverdemo/NsSample.java,254,"            } else if (args[index].equalsIgnoreCase(""derbyClient""))"
java/demo/nserverdemo/NsSample.java,255,            {
java/demo/nserverdemo/NsSample.java,256,                jdbcDriver = DERBY_CLIENT_DRIVER;
java/demo/nserverdemo/NsSample.java,257,                url = DERBY_CLIENT_URL;
java/demo/nserverdemo/NsSample.java,258,                break;
java/demo/nserverdemo/NsSample.java,259,            }
java/demo/nserverdemo/NsSample.java,260,        }
java/demo/nserverdemo/NsSample.java,261,    }
java/demo/nserverdemo/SimpleNetworkClientSample.java,39, * 1)   loads the DB2 Universal JDBC Driver or the Derby Network Client driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,46," * Before running this program, please make sure that Clouscape Network Server is up"
java/demo/nserverdemo/SimpleNetworkClientSample.java,66, /**
java/demo/nserverdemo/SimpleNetworkClientSample.java,67,  * DB2 JDBC UNIVERSAL DRIVER class names
java/demo/nserverdemo/SimpleNetworkClientSample.java,68,  */
java/demo/nserverdemo/SimpleNetworkClientSample.java,69," private static final String DB2_JDBC_UNIVERSAL_DRIVER = ""com.ibm.db2.jcc.DB2Driver"";"
java/demo/nserverdemo/SimpleNetworkClientSample.java,70," private static final String DB2_JCC_DS = ""com.ibm.db2.jcc.DB2SimpleDataSource"";"
java/demo/nserverdemo/SimpleNetworkClientSample.java,80,  * This URL is for the DB2 JDBC Universal Driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,109,                        // Determine which JDBC driver to use
java/demo/nserverdemo/SimpleNetworkClientSample.java,110,                        parseArguments(args);
java/demo/nserverdemo/SimpleNetworkClientSample.java,208,                // The following is only applicable to the DB2 JDBC driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,209,                if(jdbcDataSource.equals( DB2_JCC_DS))
java/demo/nserverdemo/SimpleNetworkClientSample.java,210,                {
java/demo/nserverdemo/SimpleNetworkClientSample.java,211,   // driver type must be 4 to access Derby Network Server
java/demo/nserverdemo/SimpleNetworkClientSample.java,212,"   Method drivertype = nsDataSource.getMethod(""setDriverType"", methodParams);"
java/demo/nserverdemo/SimpleNetworkClientSample.java,213,   args = new Object[] {new Integer(4)};
java/demo/nserverdemo/SimpleNetworkClientSample.java,214,"   drivertype.invoke(ds, args);"
java/demo/nserverdemo/SimpleNetworkClientSample.java,215,                }
java/demo/nserverdemo/SimpleNetworkClientSample.java,216,
java/demo/nserverdemo/SimpleNetworkClientSample.java,246,"  properties.setProperty(""user"",""cloud"");"
java/demo/nserverdemo/SimpleNetworkClientSample.java,247,"  properties.setProperty(""password"",""scape"");"
java/demo/nserverdemo/SimpleNetworkClientSample.java,289,   /**
java/demo/nserverdemo/SimpleNetworkClientSample.java,290,     * Determine which jdbc driver to use by parsing the command line args.
java/demo/nserverdemo/SimpleNetworkClientSample.java,291,     *  Accepted values:
java/demo/nserverdemo/SimpleNetworkClientSample.java,292,     *  jccjdbclient   - The DB2 type 4 universal driver
java/demo/nserverdemo/SimpleNetworkClientSample.java,293,     *  derbyclient    - The Derby network driver (default).
java/demo/nserverdemo/SimpleNetworkClientSample.java,294,"     *  Note: because this is just a sample, we only care about whether"
java/demo/nserverdemo/SimpleNetworkClientSample.java,295,"     *  the above values are specified.  If they are not, then we default"
java/demo/nserverdemo/SimpleNetworkClientSample.java,296,     *  to the Derby network driver.
java/demo/nserverdemo/SimpleNetworkClientSample.java,297,     */
java/demo/nserverdemo/SimpleNetworkClientSample.java,298,    private void parseArguments(String[] args)
java/demo/nserverdemo/SimpleNetworkClientSample.java,299,    {
java/demo/nserverdemo/SimpleNetworkClientSample.java,300,        int length = args.length;
java/demo/nserverdemo/SimpleNetworkClientSample.java,301,
java/demo/nserverdemo/SimpleNetworkClientSample.java,302,        for (int index = 0; index < length; index++)
java/demo/nserverdemo/SimpleNetworkClientSample.java,303,        {
java/demo/nserverdemo/SimpleNetworkClientSample.java,304,"            if (args[index].equalsIgnoreCase(""jccjdbcclient""))"
java/demo/nserverdemo/SimpleNetworkClientSample.java,305,            {
java/demo/nserverdemo/SimpleNetworkClientSample.java,306,
java/demo/nserverdemo/SimpleNetworkClientSample.java,307,                jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
java/demo/nserverdemo/SimpleNetworkClientSample.java,308,                jdbcDataSource = DB2_JCC_DS;
java/demo/nserverdemo/SimpleNetworkClientSample.java,309,                url = CS_NS_DBURL;
java/demo/nserverdemo/SimpleNetworkClientSample.java,310,                break;
java/demo/nserverdemo/SimpleNetworkClientSample.java,311,"            } else if (args[index].equalsIgnoreCase(""derbyClient""))"
java/demo/nserverdemo/SimpleNetworkClientSample.java,312,            {
java/demo/nserverdemo/SimpleNetworkClientSample.java,313,                jdbcDriver = DERBY_CLIENT_DRIVER;
java/demo/nserverdemo/SimpleNetworkClientSample.java,314,                jdbcDataSource = DERBY_CLIENT_DS;
java/demo/nserverdemo/SimpleNetworkClientSample.java,315,                url = DERBY_CLIENT_URL;
java/demo/nserverdemo/SimpleNetworkClientSample.java,316,                break;
java/demo/nserverdemo/SimpleNetworkClientSample.java,317,            }
java/demo/nserverdemo/SimpleNetworkClientSample.java,318,        }
java/demo/nserverdemo/SimpleNetworkClientSample.java,319,    }
java/demo/simple/SimpleApp.java,75,     *    <li><code>jccjdbcclient</code> - will use the DB2 Universal JDBC
java/demo/simple/SimpleApp.java,76,"     *        network client driver, also known as JCC, to access the Network"
java/demo/simple/SimpleApp.java,77,     *        Server. This driver is not part of the Derby distribution.</li>
java/demo/simple/SimpleApp.java,104,"     * creating a table in the database, and inserting, updating and retreiving"
java/demo/simple/SimpleApp.java,105,     * some data. Some of the retreived data is then verified (compared) against
java/demo/simple/SimpleApp.java,111,     * doing shutdown unless you know that noone else needs to access the
java/demo/simple/SimpleApp.java,257,            int number; // street number retreived from the database
java/demo/simple/SimpleApp.java,332,"                    // To shut down a specific database only, but keeep the"
java/demo/simple/SimpleApp.java,475,"     * @param args JDBC connection framework, either ""embedded"", ""derbyclient"""
java/demo/simple/SimpleApp.java,476,"     *        or ""jccjdbcclient"". Only the first argument will be considered,"
java/demo/simple/SimpleApp.java,477,     *        the rest will be ignored.
java/demo/simple/SimpleApp.java,482,"            if (args[0].equalsIgnoreCase(""jccjdbcclient""))"
java/demo/simple/SimpleApp.java,483,            {
java/demo/simple/SimpleApp.java,484,"                framework = ""jccjdbc"";"
java/demo/simple/SimpleApp.java,485,"                driver = ""com.ibm.db2.jcc.DB2Driver"";"
java/demo/simple/SimpleApp.java,486,"                protocol = ""jdbc:derby:net://localhost:1527/"";"
java/demo/simple/SimpleApp.java,487,            }
java/demo/simple/SimpleApp.java,488,"            else if (args[0].equalsIgnoreCase(""derbyclient""))"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,24,import java.sql.CallableStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,466,        CallableStatement cs = con
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,467,"                .prepareCall(""CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,468,"        cs.setString(1, ""derby.locks.deadlockTimeout"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,469,"        cs.setString(2, ""3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,470,        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,471,"        cs.setString(1, ""derby.locks.waitTimeout"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,472,"        cs.setString(2, ""3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,473,        cs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java,771,        return new CleanDatabaseTestSetup(suite) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,25,import java.sql.CallableStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,225,        return new CleanDatabaseTestSetup(suite) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,271,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,272,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,273,                CallableStatement cs = conn
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,274,"                        .prepareCall(""CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY (?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,275,"                cs.setString(1, ""derby.locks.waitTimeout"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,276,"                cs.setString(2, ""3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,277,                cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,278,"                cs.setString(1, ""derby.locks.deadlockTimeout"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java,279,"                cs.setString(2, ""3"");"
java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java,59,  suite.addTest(org.apache.derbyTesting.functionTests.tests.tools._Suite.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,23,import java.sql.Connection;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,24,import java.sql.DriverManager;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,25,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,29,import org.apache.derbyTesting.junit.BaseJDBCTestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,203,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,204,            DriverManager.getConnection(connectionURL).close();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,205,"            util.DEBUG(""4. Connected as expected: "" + connectionURL);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,206,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,207,        } catch (SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,208,            int ec = se.getErrorCode();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,209,            String ss = se.getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,210,"            String msg = ec + "" "" + ss + "" "" + se.getMessage();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,211,"            util.DEBUG(""4. Unexpectedly failed to connect: "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,212,"                       connectionURL +  "" "" + msg);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,213,"            assertTrue(""Unexpectedly failed to connect: "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,214,"                       connectionURL +  "" "" + msg, false);"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,215,        }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,36,import org.apache.derby.iapi.services.compiler.LocalField;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1674,  /* Declare the field and load it with the current row */
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1675,"  LocalField field = ecb.newFieldDeclaration(Modifier.PRIVATE, ClassName.ExecRow);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1679,        userExprFun.putField( field );
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1701,            userExprFun.getField(field); // instance
java/engine/org/apache/derby/iapi/types/SQLClob.java,105,   return new SQLClob(getString());
java/engine/org/apache/derby/iapi/types/SQLClob.java,121,  return new SQLClob();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,200,        return new CleanDatabaseTestSetup(suite) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LobSortTest.java,220,                for (int i=0; i < 600; i++) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,710,"                // We read too much data, reset and position on the first byte"
java/engine/org/apache/derby/iapi/types/SQLClob.java,711,                // of the user data.
java/engine/org/apache/derby/iapi/types/SQLClob.java,712,                // First see if we set a mark on the stream and can reset it.
java/engine/org/apache/derby/iapi/types/SQLClob.java,713,"                // If not, try using the Resetable interface."
java/engine/org/apache/derby/iapi/types/SQLClob.java,715,"                    // Stream is not a store Resetable one, use mark/reset"
java/engine/org/apache/derby/iapi/types/SQLClob.java,716,                    // functionality instead.
java/engine/org/apache/derby/iapi/types/SQLClob.java,719,                } else if (in instanceof Resetable) {
java/engine/org/apache/derby/iapi/types/SQLClob.java,720,                    // We have a store stream.
java/drda/org/apache/derby/impl/drda/Database.java,73,
java/drda/org/apache/derby/impl/drda/Database.java,83, boolean forXA = false;
java/drda/org/apache/derby/impl/drda/Database.java,84,
java/drda/org/apache/derby/impl/drda/Database.java,339,   * Close the connection and clean up the statement table
java/drda/org/apache/derby/impl/drda/Database.java,358,    if (! forXA)
java/drda/org/apache/derby/impl/drda/XADatabase.java,60,  forXA = true;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,412,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,205,        // DERBY-4244 (START)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,206,"        // Without these lines, this test fails a few lines later when"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,207,        // it makes yet another attempt to add column c2 to table t0. This
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,208,"        // bug is logged as DERBY-4244. When that problem is fixed, this"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,209,        // section could be removed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,210,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,211,"        st.executeUpdate(""drop table t0"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,212,        st.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,213,"                ""create table t0(c1 int not null constraint p1 primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,214,        conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,215,        // DERBY-4244 (END)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,216,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,61,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1806,            throw newSQLException(SQLState.CANNOT_CLOSE_ACTIVE_CONNECTION);
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2295,"    return fsq.bindNonVTITables(dataDictionary, fromListParam);"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,630,   }
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,638,   if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,639,    cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,640,   else
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,641,    cachedDest.setToNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,644,   if (cachedDest == null)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,645,    cachedDest = getNull();
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,646,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,353,  int     whichCol;
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,354,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,355,  if (desiredTypes == null) { desiredTypes = fetchResultTypes( resultDescription ); }
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,356,
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,370,                    normalizedCol = normalizeColumn
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,371,"                        ( desiredTypes[i - 1], sourceRow, i, normalizedRow.getColumn(i), resultDescription );"
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,386,    private  DataTypeDescriptor[]    fetchResultTypes( ResultDescription desc )
java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java,387,        throws StandardException
java/engine/org/apache/derby/impl/sql/execute/rts/RealDistinctScanStatistics.java,272,"          // I´m a leaf node, I have no children ..."
java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java,302,"        // I´m a leaf node, I have no children ..."
java/engine/org/apache/derby/impl/sql/execute/rts/RealLastIndexKeyScanStatistics.java,209,        // I´m a leaf node and I have no children ...
java/engine/org/apache/derby/impl/sql/execute/rts/RealRowResultSetStatistics.java,154,"        // I´m a leaf node, I have no children ..."
java/engine/org/apache/derby/impl/sql/execute/rts/RealTableScanStatistics.java,294,"        // I´m a leaf node, I have no children ..."
java/engine/org/apache/derby/impl/sql/execute/rts/RealVTIStatistics.java,167,"        // I´m a leaf node, I have no children ..."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CoalesceTest.java,33,import junit.framework.TestSuite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,94,"        DataSource ds = JDBCDataSource.getDataSource(""\u4e10"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,95,"        JDBCDataSource.setBeanProperty(ds, ""shutdownDatabase"", ""shutdown"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,96,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,97,            ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,98,        } catch (SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,99,            // ignore shutdown exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,100,        }
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,134,"        leftOperand,"
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,564,
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1314,"     //Numeric types are comparable to numeric types, boolean types and to"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1315,  //comparable user types
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1317,      return (compareWithTypeID.isNumericTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1318,              compareWithTypeID.isBooleanTypeId());
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1338,"  //Booleans are comparable to Boolean, string, numeric and to"
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1339,  //comparable user types
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1342,        compareWithTypeID.isStringTypeId() ||
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1343,        compareWithTypeID.isNumericTypeId());
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,286,       (otherType.isBooleanTypeId()) ||
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,320,  if ((otherType.isNumericTypeId()) ||
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,321,   (otherType.isBooleanTypeId()))
java/engine/org/apache/derby/impl/sql/compile/BaseTypeCompiler.java,322,   return true;
java/engine/org/apache/derby/impl/sql/compile/BitTypeCompiler.java,64,     otherType.isBooleanTypeId() ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,55,  int otherJDBCTypeId = otherType.getJDBCTypeId();
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,56,
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,57,  if ((otherJDBCTypeId == Types.DATE) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,58,   (otherJDBCTypeId == Types.TIME) ||
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,59,   (otherJDBCTypeId == Types.TIMESTAMP))
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,60,  {
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,61,   return false;
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,62,  }
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,63,
java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java,64,  return true;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,55,            return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,78,            // no automatic conversions at store time--but string
java/engine/org/apache/derby/impl/sql/compile/CLOBTypeCompiler.java,81,            return (otherType.isStringTypeId()) ;
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,55,   // or CLOB.
java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java,58,    return (otherType.isStringTypeId());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,438,"         rs = s.executeQuery(""select count(*) from SYS.SYSCONGLOMERATES where CAST(CONGLOMERATENAME AS VARCHAR(128))='IX' and ISINDEX=1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java,450,"         rs = s.executeQuery(""select count(*) from SYS.SYSCONGLOMERATES where CAST(CONGLOMERATENAME AS VARCHAR(128))='IX' and ISINDEX=1"");"
java/engine/org/apache/derby/iapi/sql/compile/C_NodeTypes.java,240,    static final int FINAL_VALUE = DROP_SEQUENCE_NODE;
java/engine/org/apache/derby/impl/sql/compile/C_NodeNames.java,46,
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,149,"    ""tableName: "" + ( ( tableName != null) ? tableName.toString() : ""null"") + ""\n"" +"
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,790,                                                     getContextManager());
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,839,"           null, /* having clause */"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,587,
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,588,    if (!cr.getGeneratedToReplaceAggregate() &&
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,589,      cr.getSourceLevel() == level) {
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,87,
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1102,  if (pushPList != null && (childResult instanceof SelectNode))
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1104,"   pushPList.pushExpressionsIntoSelect((SelectNode) childResult, false);"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,128,     Object havingClause)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,640,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,972,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1270,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1426,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1427,  if (wasGroupBy && resultColumns.numGeneratedColumnsForGroupBy() > 0) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,55,"  s.executeUpdate(""create table t1 (a int, b int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,56,"  s.executeUpdate(""create table t2 (x int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,57,"  s.executeUpdate(""create table t3 (y int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,58,"  s.executeUpdate(""create table t4 (a int, b int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,60,"  s.executeUpdate(""insert into t1 values (10,100),(20,200),(30,300),(40,400),(50,500)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,61,"  s.executeUpdate(""insert into t2 values (1),(2),(3),(4),(5)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,62,"  s.executeUpdate(""insert into t3 values (4),(5),(6),(7),(8)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,63,"  s.executeUpdate(""insert into t4 values (10,100),(20,200)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,66,   * Positive testing of Statements
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,67,   *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,103,"  expectedRows = new String[][]{{""1"", ""50"", ""500""}, {""2"", ""40"", ""400""}, {""3"", ""30"", ""300""}, {""4"", ""20"", ""200""}, {""5"", ""10"", ""100""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,108,"  expectedRows = new String[][]{{""1"", ""50""}, {""2"", ""40""}, {""3"", ""30""}, {""4"", ""20""}, {""5"", ""10""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,115,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,117,   * Subquerys
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,118,   */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,119,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,235,  /* Group by and having */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,304,"  rs = s.executeQuery(""select * from (select distinct row_number() over (), 'ABC' from t1) tmp"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,311,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,312,  /*
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,313,   * Negative testing of Statements
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,314,   */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,316,  // Missing required OVER ()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,317,"  assertStatementError(""42X01"", s, ""select row_number() as r, * from t1 where t1.a > 2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,319,"  // Illegal where clause, r not a named column of t1."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,320,"  assertStatementError(""42X04"", s, ""select row_number() over () as r, a from t1 where r < 3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,322,  // Illegal use of asterix with another column identifier.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,323,"  assertStatementError(""42X01"", s, ""select row_number() over () as r, * from t1 where t1.a > 2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,325,  /*
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,326,   * Clean up the tables used.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,327,   */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,328,"  s.executeUpdate(""drop table t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,329,"  s.executeUpdate(""drop table t2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,330,"  s.executeUpdate(""drop table t3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,332,  s.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,333, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,682,"        // Show a usage of disinct shipping aggregate, similar to the"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,886,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,887, public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,888,  return TestConfiguration.defaultSuite(OLAPTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OLAPTest.java,889, }
java/testing/org/apache/derbyTesting/functionTests/util/SQLStateConstants.java,104,    public static final String DATA_EXCEPTION_INVALID_PRECEDING_OR_FOLLOWING_SIZE_IN_WINDOW_FUNCTION
java/testing/org/apache/derbyTesting/functionTests/util/SQLStateConstants.java,105,"        = ""22013"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8153,        //ij(USER3)> -- test multiple FKs DERBY-1589?set
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8154,        // connection user1drop table user3.rt3drop table
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8155,        // user2.rt2drop table user1.rt1create table rt1 (c1 int
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8156,"        // primary key not null, c2 int)insert into rt1 values"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8157,"        // (1,1), (2,2)grant references on rt1 to PUBLIC, user2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8158,        // user3set connection user2 XJ001 occurred at create table
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8159,"        // rt2...create table rt2 (c1 int primary key not null,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8160,        // constraint rt2fk foreign key(c1) references
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8161,"        // user1.rt1)insert into rt2 values (1), (2)grant"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8162,"        // references on rt2 to PUBLIC, user3set connection"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8163,"        // user3create table rt3 (c1 int primary key not null,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8164,        // constraint rt3fk1 foreign key(c1) references
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8165,"        // user1.rt1, constraint rt3fk2 foreign key(c1) references"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8166,"        // user1.rt2)insert into rt3 values (1), (2)set connection"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8167,        // user1 rt3fk1 should get dropped.revoke references on rt1
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8168,        // from PUBLICrevoke references on rt1 from user3set
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8169,        // connection user2revoke references on rt2 from PUBLIC
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8170,        // expect errorinsert into rt2 values (3)set connection
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8171,"        // user3 expect error, use user3 references privilege,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8172,        // rt3fk2 still in effectinsert into rt3 values (3)set
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8173,        // connection user2revoke references on rt2 from user3set
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8174,"        // connection user3 ok, rt3fk2 should be dropped.insert"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java,8175,        // into rt3 values (3)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,307,  * Set the type of each parameter in the result column list for this table constructor.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,317,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,318,"   SanityManager.ASSERT(resultColumns.visibleSize() <= typeColumns.size(),"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,319,"    ""More columns in ResultColumnList than in base table"");"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,320,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,321,  /* Look for ? parameters in the result column list */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,322,  int rclSize = resultColumns.size();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,323,  for (int index = 0; index < rclSize; index++)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,324,  {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,325,   ResultColumn rc = (ResultColumn) resultColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,326,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,327,   ValueNode re = rc.getExpression();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,328,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,329,   if (re.requiresTypeFromContext())
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,330,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,331,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,332,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,333,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,334,    /*
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,335,    ** We found a ? - set its type to the type of the
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,336,    ** corresponding column of the target table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,337,    */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,338,    re.setType(typeCol.getTypeServices());
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,339,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,340,   else if (re instanceof CharConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,341,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,342,    // Character constants are of type CHAR (fixed length string).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,343,    // This causes a problem (beetle 5160) when multiple row values are provided
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,344,    // as constants for insertion into a variable length string column.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,345,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,346,    // This issue is the query expression
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,347,"    // VALUES 'abc', 'defghi'"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,348,"    // has type of CHAR(6), ie. the length of largest row value for that column."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,349,    // This is from the UNION defined behaviour.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,350,    // This causes strings with less than the maximum length to be blank padded
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,351,    // to that length (CHAR semantics). Thus if this VALUES clause is used to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,352,"    // insert into a variable length string column, then these blank padded values"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,353,"    // are inserted, which is not what is required ..."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,354,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,355,"    // BECAUSE, when the VALUES is used as a table constructor SQL standard says the"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,356,    // types of the table constructor's columns are set by the table's column types.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,357,"    // Thus, in this case, each of those string constants should be of type VARCHAR"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,358,    // (or the matching string type for the table).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,359,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,360,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,361,"    // This is only an issue for fixed length character (CHAR, BIT) string or"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,362,    // binary consraints being inserted into variable length types.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,363,    // This is because any other type's fundemental literal value is not affected
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,364,"    // by its data type. E.g. Numeric types such as INT, REAL, BIGINT, DECIMAL etc."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,365,    // do not have their value modifed by the union since even if the type is promoted
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,366,"    // to a higher type, its fundemental value remains unchanged."
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,367,"    // values (1.2, 34.4567, 234.47) will be promoted to"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,368,"    // values (1.2000, 34.4567, 234.4700)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,369,    // but their numeric value remains the same.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,370,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,371,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,372,    //
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,373,    // The fix is to change the base type of the table constructor's value to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,374,"    // match the column type. Its length can be left as-is, because there is"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,375,    // still a normailzation step when the value is inserted into the table.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,376,    // That will set the correct length and perform truncation checks etc.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,377,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,378,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,379,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,380,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,381,    TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,382,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,383,    if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,384,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,385,     if (colTypeId.getJDBCTypeId() != java.sql.Types.CHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,386,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,387,      int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,388,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,389,"      re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,390,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,391,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,392,    else if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,393,     if (colTypeId.getJDBCTypeId() == java.sql.Types.VARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,394,     // then we're trying to cast a char literal into a
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,395,     // variable bit column.  We can't change the base
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,396,     // type of the table constructor's value from char
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,397,"     // to bit, so instead, we just change the base type"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,398,"     // of that value from char to varchar--that way,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,399,     // no padding will be added when we convert to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,400,     // bits later on (Beetle 5306).
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,401,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,402,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,403,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,404,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,405,     else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARBINARY) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,406,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARCHAR);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,407,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,408,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,409,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,410,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,411,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,412,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,413,   else if (re instanceof BitConstantNode)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,414,   {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,415,    ResultColumn typeCol =
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,416,     (ResultColumn) typeColumns.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,417,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,418,    TypeId colTypeId = typeCol.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,419,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,420,    if (colTypeId.isBitTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,421,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,422,"     // NOTE: Don't bother doing this if the column type is BLOB,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,423,     // as we don't allow bit literals to be inserted into BLOB
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,424,     // columns (they have to be explicitly casted first); beetle 5266.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,425,     if ((colTypeId.getJDBCTypeId() != java.sql.Types.BINARY) &&
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,426,      (colTypeId.getJDBCTypeId() != java.sql.Types.BLOB)) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,427,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,428,      int maxWidth = re.getTypeServices().getMaximumWidth();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,429,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,430,"      re.setType(new DataTypeDescriptor(colTypeId, true, maxWidth));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,431,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,432,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,433,    else if (colTypeId.isStringTypeId()) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,434,     if (colTypeId.getJDBCTypeId() == java.sql.Types.VARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,435,     // then we're trying to cast a bit literal into a
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,436,     // variable char column.  We can't change the base
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,437,     // type of the table constructor's value from bit
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,438,"     // to char, so instead, we just change the base"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,439,"     // type of that value from bit to varbit--that way,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,440,     // no padding will be added when we convert to
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,441,     // char later on.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,442,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.VARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,443,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,444,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,445,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,446,     else if (colTypeId.getJDBCTypeId() == java.sql.Types.LONGVARCHAR) {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,447,      TypeId tId = TypeId.getBuiltInTypeId(java.sql.Types.LONGVARBINARY);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,448,"      re.setType(new DataTypeDescriptor(tId, true));"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,449,"      typeColumns.setElementAt(typeCol, index);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,450,     }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,451,    }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,452,   }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,453,  }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,26,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,29,import org.apache.derby.iapi.sql.compile.OptimizableList;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,31,import org.apache.derby.iapi.sql.compile.OptimizablePredicate;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,41,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,42,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,43,import org.apache.derby.iapi.sql.Row;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,46,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,58,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,59,import java.util.Properties;
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,163,        if (dvdStream == null)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,164,        {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,180,        }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,181,        else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,182,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,352,
java/engine/org/apache/derby/jdbc/EmbeddedDriver.java,99, private AutoloadedDriver _autoloadedDriver;
java/engine/org/apache/derby/jdbc/EmbeddedDriver.java,100,
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,802,"   /* First bind with all tables in the from clause, to detect ambiguous"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,803,    * references. Push the left and right children to the front of the
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,804,    * fromListParam before binding the join clause.  (We will
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,805,    * remove it before returning.)  Valid column references in
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,806,    * the join clause are limited to columns from the 2 tables being
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,807,    * joined
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,808,    */
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,809,"   fromListParam.insertElementAt(rightResultSet, 0);"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,810,"   fromListParam.insertElementAt(leftResultSet, 0);"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,812,"           fromListParam, subqueryList,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,813,           aggregateVector);
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,814,
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,815,"   /* Now bind with two tables being joined. If this raises column not found exception,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,816,    * then we have a reference to other tables in the from clause. Raise invalid
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,817,    * ON clause error to match DB2.
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,818,    */
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,819,   try {
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,820,    joinClause = joinClause.bindExpression(
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,823,   } catch (StandardException se) {
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,824,    if (se.getSQLState().equals(SQLState.LANG_COLUMN_NOT_FOUND))
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,825,     throw StandardException.newException(SQLState.LANG_DB2_ON_CLAUSE_INVALID);
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,826,    throw se;
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,827,   }
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,832,
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,833,   /* DB2 doesn't allow subquerries in the ON clause */
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,834,   if (subqueryList.size() > 0)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,835,    throw StandardException.newException(SQLState.LANG_DB2_ON_CLAUSE_INVALID);
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,846,
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,847,   fromListParam.removeElementAt(0);
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,848,   fromListParam.removeElementAt(0);
java/shared/org/apache/derby/shared/common/reference/SQLState.java,800," String LANG_DB2_ON_CLAUSE_INVALID                 = ""42972"";"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1607,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1608,   ResultColumnList newSelectList = prnRSN.getResultColumns().copyListAndObjects();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1609,   newSelectList.removeGeneratedGroupingColumns();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1610,"   newSelectList.genVirtualColumnNodes(prnRSN, prnRSN.getResultColumns());"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1614,"      newSelectList,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,2246,}
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,410,    /**
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,411,     * Do not allow generation clauses to be overriden. Throws an exception
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,412,     * if the user attempts to override the value of a generated column.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,413,     * The only value allowed in a generated column is DEFAULT. If we find
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,414,"     * a generated column which is being explicitly set to DEFAULT in an INSERT, we remove"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,415,     * it from the column lists--it will be added back in during the enhance
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,416,"     * phase. For an update, addedGeneratedColumns will be non-null and we will"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,417,     * use this list to pass through the generated columns which have already
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,418,     * been added to the update list.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,419,     *
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,420,     * @param targetRCL  the row in the table being INSERTed or UPDATEd
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,421,     * @param forUpdate  true if this is an UPDATE. false otherwise.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,422,     * @param addedGeneratedColumns generated columns which the compiler added earlier on
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,423,     */
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,424,"    void forbidGenerationOverrides( ResultColumnList targetRCL, boolean forUpdate, ColumnDescriptorList addedGeneratedColumns )"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,425,        throws StandardException
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,426,    {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,427,        int  count = targetRCL.size();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,428,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,429,        ResultColumnList    resultRCL = resultSet.getResultColumns();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,430,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,431,        for ( int i = 0; i < count; i++ )
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,432,        {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,433,            ResultColumn    rc = (ResultColumn) targetRCL.elementAt( i );
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,434,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,435,            if ( rc.hasGenerationClause() )
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,436,            {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,437,                ValueNode   resultExpression = ((ResultColumn) resultRCL.elementAt( i )).getExpression();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,438,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,439,                if ( !( resultExpression instanceof DefaultNode) )
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,440,                {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,441,                    //
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,442,"                    // For updates, we may have added the generation clause"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,443,                    // ourselves. Here we forgive ourselves for this pro-active behavior.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,444,                    //
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,445,                    boolean allIsForgiven = false;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,446,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,447,                    if ( forUpdate )
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,448,                    {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,449,                        String      columnName = rc.getTableColumnDescriptor().getColumnName();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,450,                        int         addedCount = addedGeneratedColumns.size();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,451,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,452,                        for ( int j = 0; j < addedCount; j++ )
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,453,                        {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,454,                            String  addedColumnName = addedGeneratedColumns.elementAt( j ).getColumnName();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,455,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,456,                            if ( columnName.equals( addedColumnName ) )
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,457,                            {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,458,                                allIsForgiven = true;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,459,                                break;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,460,                            }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,461,                        }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,462,                    }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,463,                    if ( allIsForgiven ) { continue; }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,464,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,465,                    throw StandardException.newException
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,466,"                        ( SQLState.LANG_CANT_OVERRIDE_GENERATION_CLAUSE, rc.getName() );"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,467,                }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,468,                else
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,469,                {
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,470,                    // skip this step if we're working on an update statement.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,471,"                    // for updates, the target list has already been enhanced."
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,472,                    if ( forUpdate ) { continue; }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,473,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,474,                    // Prune the generated column and its default. They will be
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,475,                    // added back in during the enhance phase.
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,476,                    targetRCL.removeElementAt( i );
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,477,                    resultRCL.removeElementAt( i );
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,478,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,479,                    targetRCL.resetVirtualColumnIds();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,480,                    resultRCL.resetVirtualColumnIds();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,481,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,482,                    // account for the dropped entries
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,483,                    count--;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,484,                    i--;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,485,                }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,486,            }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,487,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,488,        }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,489,    }
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,490,
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,287,
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,288,            // don't allow overriding of generation clauses
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,289,"            forbidGenerationOverrides( targetColumnList, false, null );"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,377,"        forbidGenerationOverrides( resultSet.getResultColumns(), true, addedGeneratedColumns );"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,414,"  enhanceAndCheckForAutoincrement(resultSet, inOrder,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,415,"    numTableColumns, colMap, dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,416,"                targetTableDescriptor, targetVTI );"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,532,  * @param numTableColumns   # of columns in target RCL
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,534,  * @param dataDictionary    DataDictionary to use
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,535,  * @param targetTableDescriptor    Table Descriptor for target
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,536,  * @param targetVTI         Target description if it is a VTI
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,540," private void enhanceAndCheckForAutoincrement(ResultSetNode resultSet,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,541,"   boolean inOrder, int numTableColumns, int []colMap,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,542,"   DataDictionary dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,543,"   TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,544,            FromVTI targetVTI)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,568,  if (resultSet instanceof SingleChildResultSetNode)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,569,  {
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,570,   enhanceAndCheckForAutoincrement(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,571,"    ((SingleChildResultSetNode)resultSet).getChildResult(),"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,572,"    inOrder, numTableColumns, colMap, dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,573,"    targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,574,   if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,575,    resultSet.enhanceRCLForInsert(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,576,"      numTableColumns, colMap, dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,577,"      targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,578,  }
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,579,  else if (resultSet instanceof UnionNode)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,580,  {
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,581,   enhanceAndCheckForAutoincrement(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,582,"    ((TableOperatorNode)resultSet).getLeftResultSet(),"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,583,"    inOrder, numTableColumns, colMap, dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,584,"    targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,585,   enhanceAndCheckForAutoincrement(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,586,"    ((TableOperatorNode)resultSet).getRightResultSet(),"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,587,"    inOrder, numTableColumns, colMap, dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,588,"    targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,589,   if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,590,    resultSet.enhanceRCLForInsert(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,591,"      numTableColumns, colMap, dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,592,"      targetTableDescriptor,targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,593,  }
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,594,  else
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,595,  {
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,596,   if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,597,    resultSet.enhanceRCLForInsert(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,598,"      numTableColumns, colMap, dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,599,"      targetTableDescriptor, targetVTI);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,919,  * we will reorder and/or add defaults to the current RCL so that is
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,923,  * @param numTargetColumns # of columns in target RCL
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,927,  * @param dataDictionary DataDictionary to use
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,928,"  * @param targetTD   TableDescriptor for target if the target is not a VTI, null if a VTI"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,929,"     * @param targetVTI         Target description if it is a VTI, null if not a VTI"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,933," public void enhanceRCLForInsert(int numTargetColumns, int[] colMap,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,934,"            DataDictionary dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,935,"            TableDescriptor targetTD,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,936,                                             FromVTI targetVTI)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,952,   ColumnReference newColumnReference;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,961,"    newResultColumn = genNewRCForInsert(targetTD, targetVTI, index + 1, dataDictionary);"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,967,  /* Set the source RCL to the massaged version */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,968,  resultColumns = newResultCols;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,437,  * generates gaps in numbering in autoincremented columns.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,438,  *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,439,"  * See DERBY-3. If that bug is fixed, the first query after the comment"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,440,  * below will fail.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,461,  //we will see gaps in the autoincrement column for all the duplicate rows from source
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,463,"                     {""3"", ""2""} };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,460,"  String [][] expected = { {""1"", ""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,461,"                     {""2"", ""2""} };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,462,"  JDBC.assertFullResultSet(s.executeQuery(""select * from destWithAI""), expected);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java,467,"  JDBC.assertFullResultSet(s.executeQuery(""select * from destWithNoAI""), expected);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,5445,"                ""select * from t_4413"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,5449,"                    { ""2"", ""4"", },"
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,841, /**
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,842,  * Swap the left and right sides.
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,843,  */
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,844, void swapOperands()
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,845, {
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,846,  String   tmpInterfaceType = leftInterfaceType;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,847,  ValueNode tmpVN = leftOperand;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,848,
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,849,  leftOperand = rightOperand;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,850,  rightOperand = tmpVN;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,851,  leftInterfaceType = rightInterfaceType;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,852,  rightInterfaceType = tmpInterfaceType;
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,853, }
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,854,
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1086,
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2274,    else if (right instanceof ConstantNode && left instanceof ColumnReference)
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2277,     bcon.swapOperands();
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2182,     innerJCL.addElement(newPred);
java/engine/org/apache/derby/iapi/types/SQLChar.java,712,"                            ""java.sql.String"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,153,            // Clearing the interrupt flag; makes sense for embedded part of
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,154,"            // the test. When running c/s, it would be the server thread which"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,155,"            // receives the interrupt, and since db is shut down, that should"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,156,"            // be ok for later tests. We need to clear the flag here since, for"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,157,"            // embedded, the app thread is affected."
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,158,            Thread.currentThread().interrupted();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,101,        // Clearing the interrupt flag; makes sense for embedded part of
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,102,"        // the test. When running c/s, it would be the server thread which"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,103,"        // receives the interrupt, and since db is shut down, that should"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,104,"        // be ok for later tests. We need to clear the flag here since, for"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,105,"        // embedded, the app thread is affected."
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,106,        Thread.currentThread().interrupted();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,107,
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,387,
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,388,"   setType(new DataTypeDescriptor(TypeId.getUserDefinedTypeId(className, false),"
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,389,"              true /* assume nullable for now, change it if not nullable */"
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,390,             ));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,429,        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,430,            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,431,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,432,"             ""create function makePrice_05( )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,433,"             ""returns price_05_a language java parameter style java no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,434,"             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,435,              );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,440,"             ""select tabletype, makePrice_05( ), makePrice_05( )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,455,        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,456,            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,457,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,458,"             ""create function makePrice_05_b( )\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,459,"             ""returns price_05_b language java parameter style java no sql\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,460,"             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice'\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,461,              );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,466,"             ""select tabletype from sys.systables where makePrice_05_b() is not null\n"""
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,683,        java.io.StringWriter sWriter = new java.io.StringWriter();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,684,
java/engine/org/apache/derby/iapi/util/StringUtil.java,534,  StringBuffer buf = new StringBuffer();
java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java,147,"  return quoteProtectName(getSchemaName()) + ""."" +"
java/engine/org/apache/derby/iapi/sql/dictionary/AliasDescriptor.java,148,   quoteProtectName( aliasName );
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,271,  //quoteProtectName is for bug 3476.
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,272,"  return quoteProtectName(getSchemaName()) + ""."" +"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,273,   quoteProtectName(getName());
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,94, /**
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,95,"  * If the name has double quotes in it, put two double quotes for every single"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,96,  * double quote.
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,97,  * Finally put double quotes around string to protect against
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,98,"  * names with blanks, reserved words being used as identifiers etc."
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,99,"  * For eg, if table name is m""n, return it as ""m""""n"". For now, this is used"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,100,  * by DMLModStatementNode.parseCheckConstraint().
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,101,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,102,  * Possible improvement: We could possibly analyze string to
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,103,  * avoid double quotes in normal cases.
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,104,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,105,  * @param name The String with or without double quotes
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,106,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,107,  * @return The quoted String
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,108,  */
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,109,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,110, public String quoteProtectName(String name)
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,111, {
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,112,  String quotedString = name;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,113,"  int quotePos = name.indexOf(""\"""");"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,114,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,115,  if (quotePos == -1)
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,116,"   return ""\"""" + name + ""\"""";"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,117,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,118,  //string does have quotes in it.
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,119,  while(quotePos != -1) {
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,120,"   quotedString = quotedString.substring(0,quotePos) + ""\"""" +"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,121,    quotedString.substring(quotePos);
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,122,"   quotePos = quotedString.indexOf(""\"""",quotePos+2);"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,123,  }
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,124,"  return ""\"""" + quotedString + ""\"""";"
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,125,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,126, }
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,127,
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1513,         ! (opNode.getRightOperand() instanceof ConstantNode ||
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1514,        opNode.getRightOperand() instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2276,    if (left instanceof ColumnReference &&
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2277,       (right instanceof ConstantNode || right instanceof ParameterNode))
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2281,    else if (left instanceof ConstantNode && right instanceof ColumnReference)
java/engine/org/apache/derby/impl/io/JarStorageFactory.java,87,        while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
java/engine/org/apache/derby/impl/io/JarStorageFactory.java,102,            while( offset < dataDirectory.length() & Character.isSpaceChar( dataDirectory.charAt( offset)))
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,24,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,25,
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,28,import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,29,import org.apache.derby.iapi.services.stream.InfoStreams;
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,30,
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,31,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,40,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/iapi/util/IdUtil.java,749,  roleName.trim();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,64,            suite.addTestSuite(Derby151Test.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,65,            return new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,66,"                new TestSuite(Derby151Test.class, name));"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,950,  synchronized(this)
java/client/org/apache/derby/client/am/PreparedStatement.java,1003,
java/client/org/apache/derby/client/am/PreparedStatement.java,1423,                if (x instanceof String) {
java/client/org/apache/derby/client/am/PreparedStatement.java,3072,        /*
java/client/org/apache/derby/client/am/PreparedStatement.java,3073,"        static SqlException throwLangDataTypeSetException( LogWriter logWriter,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3074,"                                                           int valType,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3075,                                                           int paramType)
java/client/org/apache/derby/client/am/PreparedStatement.java,3076,
java/client/org/apache/derby/client/am/PreparedStatement.java,3077,            throws SqlException{
java/client/org/apache/derby/client/am/PreparedStatement.java,3078,
java/client/org/apache/derby/client/am/PreparedStatement.java,3079,"            throw new SqlException( logWriter,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3080,"                                    new ClientMessageId(SQLState.LANG_DATA_TYPE_SET_MISMATCH) ,"
java/client/org/apache/derby/client/am/PreparedStatement.java,3081,                                    new Object[]{
java/client/org/apache/derby/client/am/PreparedStatement.java,3082,"                                        Types.getTypeString(valType),"
java/client/org/apache/derby/client/am/PreparedStatement.java,3083,                                        Types.getTypeString(paramType)
java/client/org/apache/derby/client/am/PreparedStatement.java,3084,"                                    },"
java/client/org/apache/derby/client/am/PreparedStatement.java,3085,                                    (Throwable) null);
java/client/org/apache/derby/client/am/PreparedStatement.java,3086,        }
java/client/org/apache/derby/client/am/PreparedStatement.java,3087,        */
java/client/org/apache/derby/client/am/PreparedStatement.java,3088,
java/client/org/apache/derby/client/net/DssConstants.java,25,    static final int MAX_DSS_LEN = 32767;
java/client/org/apache/derby/client/net/NetStatementReply.java,2079,    // FORMAT FOR SQLAM >= 7
java/client/org/apache/derby/client/net/NetStatementReply.java,2080,    //   SQLUDTXTYPE; PROTOCOL TYPE I4; ENVLID 0X02; Length Override 4
java/client/org/apache/derby/client/net/NetStatementReply.java,2081,    //   SQLUDTRDB; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2082,    //   SQLUDTSCHEMA_m; PROTOCOL TYPE VCM; ENVLID 0X3E; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2083,    //   SQLUDTSCHEMA_s; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2084,    //   SQLUDTNAME_m; PROTOCOL TYPE VCM; ENVLID 0X3E; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2085,    //   SQLUDTNAME_s; PROTOCOL TYPE VCS; ENVLID 0X32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2087,                                int columnNumber) throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,2088,        if (readFastUnsignedByte() == CodePoint.NULLDATA) {
java/client/org/apache/derby/client/net/NetStatementReply.java,2089,            return;
java/client/org/apache/derby/client/net/Request.java,1609,"        System.arraycopy(bytes, 0, bytes_, offset_, bytes.length);"
java/client/org/apache/derby/client/net/Request.java,1610,        offset_ += bytes.length;
java/client/org/apache/derby/client/net/Typdef.java,428,        /* 0x50 Empties */
java/client/org/apache/derby/client/net/Typdef.java,429,"        null,"
java/client/org/apache/derby/client/net/Typdef.java,430,        /* 0x51 Empties */
java/client/org/apache/derby/client/net/Typdef.java,431,"        null,"
java/client/org/apache/derby/client/net/Typdef.java,768,"        0x00, // 0x50 Empties"
java/client/org/apache/derby/client/net/Typdef.java,769,"        0x00, // 0x51 Empties"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4836,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6600,"   int drdaType = FdocaConstants.mapJdbcTypeToDrdaType(colType,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7031,"      drdaType = FdocaConstants.mapJdbcTypeToDrdaType(stmt.getOutputParamType(i),true,outlen);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7355,"                nullable,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7357,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7469,  writer.writeByte(CodePoint.NULLDATA);
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,135," protected static int mapJdbcTypeToDrdaType(int jdbcType, boolean nullable,"
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,198,    drdaType = DRDAConstants.DRDA_TYPE_NLONG;
java/drda/org/apache/derby/impl/drda/FdocaConstants.java,199,    outlen[0] = LONGVARCHAR_MAX_LEN;
java/drda/org/apache/derby/impl/drda/SQLTypes.java,133," static protected int mapJdbcTypeToDB2SqlType (int jdbctype, boolean nullable,"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,143,"   FdocaConstants.mapJdbcTypeToDrdaType(jdbctype,nullable,outlen);"
java/drda/org/apache/derby/impl/drda/SQLTypes.java,179,     return DRDAConstants.DB2_SQLTYPE_LONG + nullAddVal;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,140,        else { return doubleQuote( schemaName ) + '.' + doubleQuote( unqualifiedName ); }
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,186,        switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,258,        return formatId;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,313,        switch (formatId)
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,444,"                        SanityManager.THROWASSERT(""Unexpected formatId "" + formatId);"
java/engine/org/apache/derby/iapi/reference/DRDAConstants.java,144,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends OutputStream {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,37,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38, private static int INITIAL_SIZE = 4096;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,39,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40, private byte[] buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41, private int  position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,42, private int  used;  // how many bytes are used
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,43, private int  beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,44,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,45, public DynamicByteArrayOutputStream() {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,46,  this(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,47, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,48,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,49, public DynamicByteArrayOutputStream(int size) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,50,  super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,51,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,52,  buf = new byte[size];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,53, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,54,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,55, public DynamicByteArrayOutputStream(byte[] data) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,56,  super();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,57,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,58,  buf = data;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,59, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,60,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,61, public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,62,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,63,  byte[] cbuf = toBeCloned.getByteArray();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,64,  buf = new byte[cbuf.length];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,65,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,66,"  write(cbuf, 0, cbuf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,67,  position = toBeCloned.getPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,68,  used = toBeCloned.getUsed();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,69,  beginPosition = toBeCloned.getBeginPosition();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,70, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,71,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,72, /*
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,73,  * OutputStream methods
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,74,  */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,75, public void write(int b)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,76, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,77,  if (position >= buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,78,   expandBuffer(INITIAL_SIZE);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,79,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,80,  buf[position++] = (byte) b;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,81,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,82,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,83,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,84, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,85,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,86," public void write(byte[] b, int off, int len)"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,87, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,88,  if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,89,   expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,90,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,91,"  System.arraycopy(b, off, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,92,  position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,93,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,94,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,95,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,96, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,97,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,98," void writeCompleteStream(InputStream dataIn, int len) throws IOException"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,99, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,100,  if ((position+len) > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,101,   expandBuffer(len);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,102,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,103,"  org.apache.derby.iapi.services.io.InputStreamUtil.readFully(dataIn, buf, position, len);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,104,  position += len;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,105,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,106,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,107,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,108, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,109,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,110, public void close()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,111, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,112,  buf = null;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,113,  reset();
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,114, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,115,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,116, /*
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,117,  * Specific methods
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,118,  */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,119,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,120, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,121,  Reset the stream for reuse
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,122, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,123, public void reset()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,124, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,125,  position = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,126,  beginPosition = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,127,  used = 0;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,128, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,129,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,130, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,131,  Get a reference to the byte array stored in the byte array output
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,132,  stream. Note that the byte array may be longer that getPosition().
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,133,  Bytes beyond and including the current poistion are invalid.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,134, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,135, public byte[] getByteArray()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,136, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,137,  return buf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,138, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,139,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,140, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,141,  Get the number of bytes that was used.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,142, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,143, public int getUsed()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,144, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,145,  return used;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,146, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,147,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,148, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,149,  Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,150, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,151, public int getPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,152, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,153,  return position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,154, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,155,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,156, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,157,  Get the current position in the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,158, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,159, public int getBeginPosition()
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,160, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,161,  return beginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,162, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,163,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,164, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,165,  Set the position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,166,  It is up to the caller to make sure the stream has no gap of garbage in
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,167,  it or useful information is not left out at the end because the stream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,168,  does not remember anything about the previous position.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,169, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,170, public void setPosition(int newPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,171, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,172,  if (newPosition > position)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,173,  {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,174,   if (newPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,175,    expandBuffer(newPosition - buf.length);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,176,  }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,177,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,178,  position = newPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,179,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,180,  if (position > used)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,181,   used = position;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,182,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,183,  return ;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,184, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,185,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,186, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,187,  Set the begin position of the stream pointer.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,188,"  If the newBeginPosition is larger than the stream itself,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,189,"  then, the begin position is not set."
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,190, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,191, public void setBeginPosition(int newBeginPosition)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,192, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,193,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,194,  if (newBeginPosition > buf.length)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,195,   return;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,196,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,197,  beginPosition = newBeginPosition;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,198, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,199,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,200, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,201,  Shrink the buffer left by the amount given. Ie.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,202,  bytes from 0 to amountToShrinkBy are thrown away
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,203, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,204, public void discardLeft(int amountToShrinkBy) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,205,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,206,"  System.arraycopy(buf, amountToShrinkBy, buf, 0,"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,207,   used - amountToShrinkBy);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,208,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,209,  position -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,210,  used -= amountToShrinkBy;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,211, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,212,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,213, /**
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,214,  Expand the buffer by at least the number of bytes requested in minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,215,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,216,"  To optimize performance and reduce memory copies and allocation, we have a staged buffer"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,217,  expansion.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,218,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,219,  <UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,220,  <LI> buf.length < 128k - increase by 4k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,221,  <LI> buf.length < 1Mb - increase by 128k
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,222,  <LI> otherwise increase by 1Mb.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,223,  </UL>
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,224,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,225,"  In all cases, if minExpansion is greater than the value about then the buffer will"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,226,  be increased by minExtension.
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,227, */
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,228, private void expandBuffer(int minExtension)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,229, {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,230,  if (buf.length < (128 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,231,   if (minExtension < INITIAL_SIZE)
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,232,    minExtension = INITIAL_SIZE;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,233,  } else if (buf.length < (1024 * 1024)) {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,234,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,235,   if (minExtension < (128 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,236,    minExtension = (128 * 1024);
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,237,  } else {
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,238,   if (minExtension < (1024 * 1024))
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,239,    minExtension = 1024 * 1024;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,240,  }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,241,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,242,  int newsize = buf.length + minExtension;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,243,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,244,  byte[] newbuf = new byte[newsize];
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,245,"  System.arraycopy(buf, 0, newbuf, 0, buf.length);"
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,246,  buf = newbuf;
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,247, }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,248,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,31,public final class InputStreamUtil {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,32,    private static final int SKIP_FRAGMENT_SIZE = Integer.MAX_VALUE;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,33,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,34, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,35,"  Read an unsigned byte from an InputStream, throwing an EOFException"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,36,  if the end of the input is reached.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,37,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,38,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,39,  @exception EOFException if the end of the stream is reached
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,40,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,41,  @see DataInput#readUnsignedByte
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,42,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,43, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,44, public static int readUnsignedByte(InputStream in) throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,45,  int b = in.read();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,46,  if (b < 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,47,   throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,48,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,49,  return b;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,50, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,51,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,52, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,53,  Read a number of bytes into an array.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,54,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,55,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,56,  @exception EOFException if the end of the stream is reached
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,57,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,58,  @see DataInput#readFully
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,59,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,60, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,61," public static void readFully(InputStream in, byte b[],"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,62,"                                 int offset,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,63,                                 int len) throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,64, {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,65,  do {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,66,"   int bytesRead = in.read(b, offset, len);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,67,   if (bytesRead < 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,68,    throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,69,   len -= bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,70,   offset += bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,71,  } while (len != 0);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,72, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,73,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,74,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,75, /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,76,  Read a number of bytes into an array.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,77,        Keep reading in a loop until len bytes are read or EOF is reached or
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,78,        an exception is thrown. Return the number of bytes read.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,79,"        (InputStream.read(byte[],int,int) does not guarantee to read len bytes"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,80,         even if it can do so without reaching EOF or raising an exception.)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,81,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,82,  @exception IOException if an I/O error occurs.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,83, */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,84," public static int readLoop(InputStream in,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,85,"                                byte b[],"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,86,"                                int offset,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,87,                                int len)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,88,        throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,89, {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,90,        int firstOffset = offset;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,91,  do {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,92,"   int bytesRead = in.read(b, offset, len);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,93,   if (bytesRead <= 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,94,                break;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,95,   len -= bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,96,   offset += bytesRead;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,97,  } while (len != 0);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,98,        return offset - firstOffset;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,99, }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,100,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,101,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,102,"     * Skips until EOF, returns number of bytes skipped."
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,103,     * @param is
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,104,     *      InputStream to be skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,105,     * @return
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,106,     *      number of bytes skipped in fact.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,107,     * @throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,108,     *      if IOException occurs. It doesn't contain EOFException.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,109,     * @throws NullPointerException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,110,     *      if the param 'is' equals null.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,111,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,112,    public static long skipUntilEOF(InputStream is) throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,113,        if(is == null)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,114,            throw new NullPointerException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,115,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,116,        long bytes = 0;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,117,        while(true){
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,118,"            long r = skipPersistent(is, SKIP_FRAGMENT_SIZE);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,119,            bytes += r;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,120,            if(r < SKIP_FRAGMENT_SIZE)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,121,                return bytes;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,122,        }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,123,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,124,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,125,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,126,"     * Skips requested number of bytes,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,127,     * throws EOFException if there is too few bytes in the stream.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,128,     * @param is
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,129,     *      InputStream to be skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,130,     * @param skippedBytes
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,131,"     *      number of bytes to skip. if skippedBytes <= zero, do nothing."
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,132,     * @throws EOFException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,133,     *      if EOF meets before requested number of bytes are skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,134,     * @throws IOException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,135,     *      if IOException occurs. It doesn't contain EOFException.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,136,     * @throws NullPointerException
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,137,     *      if the param 'is' equals null.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,138,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,139,"    public static void skipFully(InputStream is, long skippedBytes)"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,140,    throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,141,        if(is == null)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,142,            throw new NullPointerException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,143,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,144,        if(skippedBytes <= 0)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,145,            return;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,146,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,147,"        long bytes = skipPersistent(is, skippedBytes);"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,148,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,149,        if(bytes < skippedBytes)
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,150,            throw new EOFException();
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,151,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,152,
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,153,    /**
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,154,     * Tries harder to skip the requested number of bytes.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,155,     * <p>
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,156,"     * Note that even if the method fails to skip the requested number of bytes,"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,157,"     * it will not throw an exception. If this happens, the caller can be sure"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,158,     * that end-of-stream has been reached.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,159,     *
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,160,     * @param in byte stream
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,161,     * @param bytesToSkip the number of bytes to skip
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,162,     * @return The number of bytes skipped.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,163,     * @throws IOException if reading from the stream fails
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,164,     */
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,165,"    public static final long skipPersistent(InputStream in, long bytesToSkip)"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,166,    throws IOException {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,167,        long skipped = 0;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,168,        while (skipped < bytesToSkip) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,169,            long skippedNow = in.skip(bytesToSkip - skipped);
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,170,            if (skippedNow == 0) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,171,                if (in.read() == -1) {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,172,"                    // EOF, return what we have and leave it up to caller to"
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,173,                    // decide what to do about it.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,174,                    break;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,175,                } else {
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,176,                    skippedNow = 1; // Added to count below.
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,177,                }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,178,            }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,179,            skipped += skippedNow;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,180,        }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,181,        return skipped;
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,182,    }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,183,}
java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java,204,    size = (w > 0 ? w : 15);
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,42,        /*
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,43,        ** public statics from 3.0 version of java.sql.ParameterMetaData
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,44,        */
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,45,        public static final int PARAMETER_NO_NULLS = ParameterMetaData.parameterNoNulls;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,46,        public static final int PARAMETER_NULLABLE = ParameterMetaData.parameterNullable;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,47,        public static final int PARAMETER_NULLABLE_UNKNOWN = ParameterMetaData.parameterNullableUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,48,        public static final int PARAMETER_MODE_UNKNOWN = ParameterMetaData.parameterModeUnknown;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,49,        public static final int PARAMETER_MODE_IN = ParameterMetaData.parameterModeIn;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,50,        public static final int PARAMETER_MODE_IN_OUT = ParameterMetaData.parameterModeInOut;
java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java,51,        public static final int PARAMETER_MODE_OUT = ParameterMetaData.parameterModeOut;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,17,   See the License for the specific language governing permissions and
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1476,    public void testGetColumnsReadOnly() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1490,    public void testGetColumnsModify() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1749,    throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1801,    public static void crossCheckGetColumnRowAndResultSetMetaData(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1803,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,1832,        else if (dmdColumnType == Types.JAVA_OBJECT && usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1045,            pingServer(5); // Wait for the server to come up in a reasonable time....
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1176,     * @param iterations How many times to try pinging the server to see if it is running.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1177,     * Sleeps <CODE>SLEEP_TIME_MILLIS</CODE> between tries.
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1181,    private void pingServer( int iterations )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1185,"        ping( new NetworkServerControl(), iterations );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1189,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1190,"  private void ping( NetworkServerControl controller, int iterations )"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1208,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1209,"        System.out.println( ""Server did not come up: "" + finalException.getMessage() );"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java,1,/*
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,91,        TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(UDTTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,197,"             ""select getCurrencyCode( totalPrice ), getAmount( totalPrice ), getTimeInstant( totalPrice ) from orders"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,200,"                 { ""USD"" ,         ""9.99000"" ,        ""2009-10-16 14:24:43.0"" },"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,516,"  dropSchemaObject( conn, TABLE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,530,"  dropSchemaObject( conn, FUNCTION, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,544,"  dropSchemaObject( conn, PROCEDURE, name );"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,556," protected static void dropSchemaObject( Connection conn, String genus, String objectName )"
java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java,561,"   ps = prepare( conn, ""drop "" + genus + "" "" + objectName );"
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,3,   Derby - Class org.apache.derby.shared.common.io.DynamicByteArrayOutputStream
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,22,package org.apache.derby.shared.common.io;
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,23,
java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java,24,import org.apache.derby.shared.common.sanity.SanityManager;
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,3,   Derby - Class org.apache.derby.shared.common.io.InputStreamUtil
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,22,package org.apache.derby.shared.common.io;
java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java,31,public class InputStreamUtil {
java/client/org/apache/derby/client/net/Request.java,26,import org.apache.derby.shared.common.io.DynamicByteArrayOutputStream;
java/client/org/apache/derby/client/net/Request.java,28,import org.apache.derby.shared.common.sanity.SanityManager;
java/client/org/apache/derby/client/net/Request.java,1625,        // should not be called if val is null
java/client/org/apache/derby/client/net/Request.java,1626,        if ( val == null )
java/client/org/apache/derby/client/net/Request.java,1627,        {
java/client/org/apache/derby/client/net/Request.java,1628,"            SanityManager.THROWASSERT( ""UDT is null"" );"
java/client/org/apache/derby/client/net/Request.java,1629,        }
java/client/org/apache/derby/client/net/Request.java,1630,
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,36,public class DynamicByteArrayOutputStream extends org.apache.derby.shared.common.io.DynamicByteArrayOutputStream
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,37,{
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,38, public DynamicByteArrayOutputStream() { super(); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,39, public DynamicByteArrayOutputStream(int size) { super( size ); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,40, public DynamicByteArrayOutputStream(byte[] data) { super( data ); }
java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java,41, public DynamicByteArrayOutputStream(DynamicByteArrayOutputStream toBeCloned) { super( toBeCloned ); }
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,31,public final class InputStreamUtil extends org.apache.derby.shared.common.io.InputStreamUtil
java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java,32,{}
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7527,"  * @param elemNum column number we are returning (in case of result set), or,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,699,"        goodStatement( conn, ""create table t_10_a( a price_09_a )\n"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,708,"             ""\""APP\"".\""PRICE_09_A\"""","
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1106,        if ( val == null )
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1107,        {
java/drda/org/apache/derby/impl/drda/DDMWriter.java,1108,"            SanityManager.THROWASSERT( ""UDT is null"" );"
java/engine/org/apache/derby/iapi/types/RowLocation.java,24,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/RowLocation.java,39,"public interface RowLocation extends DataValueDescriptor, CloneableObject"
java/engine/org/apache/derby/iapi/types/SQLRef.java,203,   return new SQLRef((RowLocation) value.cloneObject());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3074,"             (RowLocation) rl.cloneObject(),"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,329,   RowLocation rl = (RowLocation) getPreparedStatement().getSavedObject(itemNumber);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,330,   if (! (rl.cloneObject() instanceof RowLocation))
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,333,"     ""rl.cloneObject() expected to be "" +"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,334,"     ""instance of RowLocation, not "" +"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,335,     rl.getClass().getName() +
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,336,"     "", query is "" + getPreparedStatement().getSource());"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,339,  /* We have to return a clone of the saved RowLocation due
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,340,   * to the shared cache of SPSs.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,341,   */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,342,  return (RowLocation)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,343,   ((RowLocation)(getPreparedStatement().getSavedObject(itemNumber))).cloneObject();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,189,   RowLocation rlClone = (RowLocation) rowLocation.cloneObject();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1648,  newRowColArray[i] =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1649,            (DataValueDescriptor) fkInfo.rowLocation.cloneObject();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,267,            scan_position.current_lock_row_loc =
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,268,                (RowLocation) ((RowLocation)
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,269,                     init_template[init_template.length - 1]).cloneObject();
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,104, /*
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,105, ** Methods of CloneableObject.
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,106, */
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,107, public Object cloneObject()
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,108, {
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,109,  return getClone();
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,110,
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,111, }
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,112,
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,24,import org.apache.derby.iapi.services.loader.ClassFactory;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,26,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,27,
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,29,
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,31,import org.apache.derby.iapi.types.DataValueFactory;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,34,
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,35,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,36,
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,37,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,38,
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,39,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,42,import java.sql.Date;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,43,import java.sql.Time;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,44,import java.sql.Timestamp;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,46,import org.apache.derby.iapi.reference.JDBC30Translation;
java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java,272,    pvstarget.getParameterForSet(i).setValue(oldp.getValue());
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,24,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,25,
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,26,import org.apache.derby.iapi.services.io.Storable;
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,27,
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,30,import org.apache.derby.iapi.types.CloneableObject;
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,357,  // the only difference between getClone and cloneObject is cloneObject does
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,358,  // not objectify a stream.  We use getClone here.  Beetle 4896.
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,379,        // the only difference between getClone and cloneObject is cloneObject does
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,380,        // not objectify a stream.  We use cloneObject here.  DERBY-802
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,384,                new_row[i] = (DataValueDescriptor)
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,385,                    ((CloneableObject) old_row[i]).cloneObject();
java/engine/org/apache/derby/iapi/types/DataType.java,27,import org.apache.derby.iapi.types.CloneableObject;
java/engine/org/apache/derby/iapi/types/DataType.java,38,import java.lang.Comparable;
java/engine/org/apache/derby/iapi/types/DataType.java,68," implements DataValueDescriptor, CloneableObject, Comparable"
java/engine/org/apache/derby/iapi/types/DataType.java,596, /**
java/engine/org/apache/derby/iapi/types/DataType.java,597,  * From CloneableObject
java/engine/org/apache/derby/iapi/types/DataType.java,598,  *
java/engine/org/apache/derby/iapi/types/DataType.java,599,  * @return clone of me as an Object
java/engine/org/apache/derby/iapi/types/DataType.java,600,  */
java/engine/org/apache/derby/iapi/types/DataType.java,601, public Object cloneObject()
java/engine/org/apache/derby/iapi/types/SQLBinary.java,611, /*
java/engine/org/apache/derby/iapi/types/SQLBinary.java,612,  * CloneableObject interface
java/engine/org/apache/derby/iapi/types/SQLBinary.java,613,  */
java/engine/org/apache/derby/iapi/types/SQLBinary.java,614,
java/engine/org/apache/derby/iapi/types/SQLBinary.java,615, /** From CloneableObject
java/engine/org/apache/derby/iapi/types/SQLBinary.java,616,  * Shallow clone a StreamStorable without objectifying.  This is used to avoid
java/engine/org/apache/derby/iapi/types/SQLBinary.java,617,  * unnecessary objectifying of a stream object.  The only difference of this method
java/engine/org/apache/derby/iapi/types/SQLBinary.java,618,  *  from getClone is this method does not objectify a stream.  beetle 4896
java/engine/org/apache/derby/iapi/types/SQLBinary.java,619,  */
java/engine/org/apache/derby/iapi/types/SQLBinary.java,620, public final Object cloneObject()
java/engine/org/apache/derby/iapi/types/SQLBinary.java,621, {
java/engine/org/apache/derby/iapi/types/SQLChar.java,1316,    /** From CloneableObject
java/engine/org/apache/derby/iapi/types/SQLChar.java,1322,    public Object cloneObject()
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,25,import org.apache.derby.iapi.services.io.Storable;
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,26,
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,27,import org.apache.derby.iapi.types.CloneableObject;
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,28,
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,29,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,169,   // the only difference between getClone and cloneObject is cloneObject does
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,170,   // not objectify a stream.  We use getClone here.  Beetle 4896.
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,28,import org.apache.derby.iapi.sql.execute.ExecutionFactory;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,31,import org.apache.derby.iapi.sql.ResultDescription;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,36,import org.apache.derby.iapi.types.CloneableObject;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,43,import org.apache.derby.iapi.services.io.FormatableBitSet;
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,198,"    cloned.setColumn(i + 1, (DataValueDescriptor)((CloneableObject) cols[i]).cloneObject());"
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,33,import org.apache.derby.iapi.types.CloneableObject;
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,462,                if (!(col1 instanceof CloneableObject))
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,463,    {
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,464,     SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,465,"      ""col["" + colid + ""] ("" +col1.getClass().getName()+"
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,466,"      "") is not a CloneableObject."");"
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,467,    }
java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java,468,
java/testing/org/apache/derbyTesting/unitTests/store/T_AccessRow.java,30,import org.apache.derby.iapi.types.CloneableObject;
java/testing/org/apache/derbyTesting/unitTests/store/T_AccessRow.java,31,
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,53,    public void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,54,        Statement st = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,55,        super.tearDown();
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,56,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,57,"            st.executeUpdate(""DROP FUNCTION PADSTRING"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,58,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,59,            // never mind.
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,60,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,61,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,62,
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,1842,"        st.executeUpdate(""DROP FUNCTION PADSTRING"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/AccessTest.java,1843,
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,29,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,46,"  implements ErrorObjectInput, Resetable"
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,238,}
java/engine/org/apache/derby/impl/store/raw/data/ByteHolder.java,24,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/store/raw/data/ByteHolder.java,25,
java/engine/org/apache/derby/impl/store/raw/data/ByteHolder.java,29,import java.util.Vector;
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,51,implements Resetable
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,107,    RecordHandle        recordToLock)
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,108,"        throws IOException, StandardException"
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,109,    {
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,117,
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,118,        fillByteHolder();
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,159,                throw new IOException(se.toString());
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,301,
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,302,        // fill the byte holder
java/engine/org/apache/derby/impl/store/raw/data/OverflowInputStream.java,303,        fillByteHolder();
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,215,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,216,            SanityManager.ASSERT(in instanceof Resetable);
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,224,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,225,            SanityManager.ASSERT(in instanceof Resetable);
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,232,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,233,            SanityManager.ASSERT(in instanceof Resetable);
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,240,        if (SanityManager.DEBUG)
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,241,            SanityManager.ASSERT(in instanceof CloneableStream);
java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java,242,
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,297,  @param reuseResult Whether or not to reuse the result row.
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,270,  int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1420,  int[] mapArray = resultColumns.mapSourceColumns();
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1459,   *  arg8: reuseResult - whether or not the result row can be reused
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1460,"   *      (ie, will it always be the same)"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1461,   *  arg9: doesProjection - does this node do a projection
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1462,   *  arg10: estimated row count
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1463,   *  arg11: estimated cost
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1464,   *  arg12: close method
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1465,   */
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1600,"     ClassName.NoPutResultSet, 10);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3502, int[] mapSourceColumns()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3504,  int[]   mapArray = new int[size()];
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3524,     mapArray[index] = vcn.getSourceColumn().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3539,     mapArray[index] = cr.getSource().getVirtualColumnId();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,3548,  return mapArray;
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,223,"   constantRestriction, mapRefItem,"
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,503,"    result.setColumn(index + 1, sourceRow.getColumn(projectMapping[index]));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,34,import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,395,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,396,"        final Statement stmt = createStatement(ResultSet.TYPE_FORWARD_ONLY,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,398,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,399,        final ResultSet rs =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,400,"            stmt.executeQuery(""SELECT * FROM "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,403,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,405,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,407,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,410,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,411,"            assertEquals(""Unexpected value in val column"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,413,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,418,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,422,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,432,"    private void verifyBlob(final int expectedVal,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,433,"                            final int expectedSize,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,434,                            final Blob blob)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,441,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,444,"                assertEquals(""Unexpected value in stream at position "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BLOBTest.java,470,"        println(""Setup of: "" + getName());"
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,376,"        //          here (i.e. used cloneObject, not getClone). We still do."
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,381,                new_row[i] = old_row[i].cloneObject();
java/engine/org/apache/derby/iapi/types/DataType.java,605,    public DataValueDescriptor cloneObject()
java/engine/org/apache/derby/iapi/types/DataType.java,606, {
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,296,    public DataValueDescriptor cloneObject();
java/engine/org/apache/derby/iapi/types/SQLBinary.java,617,    public final DataValueDescriptor cloneObject() {
java/engine/org/apache/derby/iapi/types/SQLBinary.java,618,        if ( _blobValue != null )
java/engine/org/apache/derby/iapi/types/SQLBinary.java,619,        {
java/engine/org/apache/derby/iapi/types/SQLBinary.java,620,            SQLBinary self = (SQLBinary) getNewNull();
java/engine/org/apache/derby/iapi/types/SQLBinary.java,621,            self.setValue(_blobValue);
java/engine/org/apache/derby/iapi/types/SQLBinary.java,624,  if (stream == null) { return getClone(); }
java/engine/org/apache/derby/iapi/types/SQLBinary.java,625,
java/engine/org/apache/derby/iapi/types/SQLBinary.java,626,  SQLBinary self = (SQLBinary) getNewNull();
java/engine/org/apache/derby/iapi/types/SQLBinary.java,627,"  self.setValue(stream, streamValueLength);"
java/engine/org/apache/derby/iapi/types/SQLBinary.java,628,  return self;
java/engine/org/apache/derby/iapi/types/SQLChar.java,1322,    public DataValueDescriptor cloneObject()
java/engine/org/apache/derby/iapi/types/SQLChar.java,1323,    {
java/engine/org/apache/derby/iapi/types/SQLChar.java,1325,
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,172, /* Avoid materializing a stream just because it goes through a temp table.  It is OK to
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,173,  * have a stream in the temp table (in memory or spilled to disk).  The assumption is
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,174,"  * that one stream does not appear in two rows.  For ""update"", one stream can be in two"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,175,  * rows and the materialization is done in UpdateResultSet.  Note to future users of this
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,176,"  * class who may insert a stream into this temp holder: (1) As mentioned above, one"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,177,  * un-materialized stream can't appear in two rows; you need to objectify it first otherwise.
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,178,"  * (2) If you need to retrieve a un-materialized stream more than once from the temp holder,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,179,"  * you need to either materialize the stream the first time, or, if there's a memory constraint,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,180,  * in the first time create a RememberBytesInputStream with the byte holder being
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,181,"  * BackingStoreByteHolder, finish it, and reset it after usage."
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,182,  * beetle 4896.
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,183,  */
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java,194,"                cloned.setColumn(i + 1, cols[i].cloneObject());"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,57,    public void tearDown() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,58,        rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,59,    }
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,60,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,61,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,62,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,55,    public void tearDown() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,56,        rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,57,    }
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,58,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,59,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,60,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,30,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,215,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,237,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,242,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,252,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,256,        stream.reopen();
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,179,    /**
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,180,     * Reopen the stream.
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,181,     */
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,182,    public void reopen()
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,183,            throws IOException {
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,184,        this.closed = false;
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,185,        reset();
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,186,    }
java/testing/org/apache/derbyTesting/functionTests/util/streams/LoopingAlphabetReader.java,187,
java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java,358,                new_row[i] = old_row[i].getClone();
java/engine/org/apache/derby/iapi/types/BinaryDecimal.java,669, /* (non-Javadoc)
java/engine/org/apache/derby/iapi/types/BinaryDecimal.java,670,  * @see org.apache.derby.iapi.types.DataValueDescriptor#getClone()
java/engine/org/apache/derby/iapi/types/BinaryDecimal.java,671,  */
java/engine/org/apache/derby/iapi/types/BinaryDecimal.java,672, public DataValueDescriptor getClone() {
java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java,106, /**
java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java,107,  * @see DataValueDescriptor#getClone
java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java,108,  */
java/engine/org/apache/derby/iapi/types/CollatorSQLChar.java,109, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java,107, /**
java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java,108,  * @see DataValueDescriptor#getClone
java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java,109,  */
java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java,110, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java,108, /**
java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java,109,  * @see DataValueDescriptor#getClone
java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java,110,  */
java/engine/org/apache/derby/iapi/types/CollatorSQLLongvarchar.java,111, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java,107, /**
java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java,108,  * @see DataValueDescriptor#getClone
java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java,109,  */
java/engine/org/apache/derby/iapi/types/CollatorSQLVarchar.java,110, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/DataType.java,606,  return getClone();
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,288,     * Get a shallow copy of this <code>DataValueDescriptor</code>.
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,290,     * This is used by the sorter to clone columns. It should be cloning the
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,291,     * column holder but not its value. The only difference between this method
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,292,     * and <code>getClone</code> is this one does not objectify a stream.
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,298, /**
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,299,  * Clone this DataValueDescriptor. Results in a new object
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,300,  * that has the same value as this but can be modified independently.
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,301,  *
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,302,  * @return A clone of the DataValueDescriptor with the same initial value as this.
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,303,  */
java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java,304, public DataValueDescriptor getClone();
java/engine/org/apache/derby/iapi/types/SQLBinary.java,619,            return getClone();
java/engine/org/apache/derby/iapi/types/SQLBinary.java,640, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLBinary.java,641, public final DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,328, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,329, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,399, /* This constructor gets used for the getClone() method */
java/engine/org/apache/derby/iapi/types/SQLChar.java,1319,     *  difference of this method from getClone is this method does not
java/engine/org/apache/derby/iapi/types/SQLChar.java,1323,        if ((stream == null) && (_clobValue == null)) {  return getClone(); }
java/engine/org/apache/derby/iapi/types/SQLChar.java,1335,    /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLChar.java,1336,    public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLClob.java,100, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLClob.java,101, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLDate.java,247, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLDate.java,248, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLDate.java,944,                return (SQLDate) operand.getClone();
java/engine/org/apache/derby/iapi/types/SQLDecimal.java,558, /**
java/engine/org/apache/derby/iapi/types/SQLDecimal.java,559,  * <B> WARNING </B> clone is a shallow copy
java/engine/org/apache/derby/iapi/types/SQLDecimal.java,560,   * @see DataValueDescriptor#getClone
java/engine/org/apache/derby/iapi/types/SQLDecimal.java,561,  */
java/engine/org/apache/derby/iapi/types/SQLDecimal.java,562, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLDouble.java,283, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLDouble.java,284, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLInteger.java,221, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLInteger.java,222, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLLongint.java,240, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLLongint.java,241, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLLongint.java,313, /* This constructor gets used for the getClone() method */
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,67, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,68, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLReal.java,284, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLReal.java,285, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLRef.java,191, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLRef.java,192, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLRef.java,203,           return new SQLRef((RowLocation) value.getClone());
java/engine/org/apache/derby/iapi/types/SQLSmallint.java,255, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLSmallint.java,256, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLSmallint.java,337, /* This constructor gets used for the getClone() method */
java/engine/org/apache/derby/iapi/types/SQLSmallint.java,338," public SQLSmallint(short val, boolean isnull)"
java/engine/org/apache/derby/iapi/types/SQLSmallint.java,339, {
java/engine/org/apache/derby/iapi/types/SQLTime.java,249, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLTime.java,250, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,272, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,273, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,976,                return (SQLTimestamp) operand.getClone();
java/engine/org/apache/derby/iapi/types/SQLTinyint.java,112, /* This constructor gets used for the getClone() method */
java/engine/org/apache/derby/iapi/types/SQLTinyint.java,113," public SQLTinyint(byte val, boolean isnull)"
java/engine/org/apache/derby/iapi/types/SQLTinyint.java,114, {
java/engine/org/apache/derby/iapi/types/SQLTinyint.java,299, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLTinyint.java,300, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,66, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,67, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/UserType.java,318, /** @see DataValueDescriptor#getClone */
java/engine/org/apache/derby/iapi/types/UserType.java,319, public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/XML.java,157,     * Private constructor used for the getClone() method.
java/engine/org/apache/derby/iapi/types/XML.java,167,"    private XML(SQLChar val, int xmlType, boolean seqWithAttr)"
java/engine/org/apache/derby/iapi/types/XML.java,168,    {
java/engine/org/apache/derby/iapi/types/XML.java,169,        xmlStringValue = (val == null ? null : (SQLChar)val.getClone());
java/engine/org/apache/derby/iapi/types/XML.java,180,     * @see DataValueDescriptor#getClone
java/engine/org/apache/derby/iapi/types/XML.java,182,    public DataValueDescriptor getClone()
java/engine/org/apache/derby/iapi/types/XML.java,183,    {
java/engine/org/apache/derby/iapi/types/XML.java,184,"        return new XML(xmlStringValue, getXType(), hasTopLevelAttr());"
java/engine/org/apache/derby/impl/sql/GenericParameter.java,24,import org.apache.derby.iapi.services.loader.ClassInspector;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,25,
java/engine/org/apache/derby/impl/sql/GenericParameter.java,26,import org.apache.derby.iapi.sql.ParameterValueSet;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,27,
java/engine/org/apache/derby/impl/sql/GenericParameter.java,28,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,29,import org.apache.derby.iapi.types.BooleanDataValue;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,30,import org.apache.derby.iapi.types.BitDataValue;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,31,import org.apache.derby.iapi.types.DateTimeDataValue;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,32,import org.apache.derby.iapi.types.NumberDataValue;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,33,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,34,import org.apache.derby.iapi.types.UserDataValue;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,35,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,36,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,37,import org.apache.derby.iapi.types.*;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,38,
java/engine/org/apache/derby/impl/sql/GenericParameter.java,40,
java/engine/org/apache/derby/impl/sql/GenericParameter.java,45,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,46,
java/engine/org/apache/derby/impl/sql/GenericParameter.java,47,import org.apache.derby.iapi.types.*;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,48,import org.apache.derby.iapi.types.*;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,52,import java.lang.reflect.Array;
java/engine/org/apache/derby/impl/sql/GenericParameter.java,53,
java/engine/org/apache/derby/impl/sql/GenericParameter.java,148,"  gpClone.initialize(this.getValue().getClone(), jdbcTypeId, declaredClassName);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,24,import java.sql.SQLException;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,37,import org.apache.derby.iapi.error.PublicAPI;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,47,import org.apache.derby.iapi.sql.conn.ConnectionUtil;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,85,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3074,"                                        (RowLocation) rl.getClone(),"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,335,        Object rlClone = rl.getClone();
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,165,"            //          here (i.e. used getClone, not cloneObject). We still do."
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,167,   newArray[i] = origArray[i].getClone();
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,108,   cloned[i] = ((DataValueDescriptor)clonee[i]).getClone();
java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java,172,"        row.setColumn(i, col.getClone());"
java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java,287,"   indexRow.setColumn(numFkColumns + 1, rowLocation.getClone());"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,189,           RowLocation rlClone = (RowLocation) rowLocation.getClone();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1638,                (templateColArray[fkInfo.colArray[i] - 1]).getClone();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1641,       newRowColArray[i] = fkInfo.rowLocation.getClone();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,2190,      fullTemplate.getColumn(index + 1).getClone());
java/engine/org/apache/derby/impl/sql/execute/MaxMinAggregator.java,70,   /* NOTE: We need to call getClone() since value gets
java/engine/org/apache/derby/impl/sql/execute/MaxMinAggregator.java,73,   value = addend.getClone();
java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java,207,                pVals[i] = origProbeValues[i].getClone();
java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java,978,   hashRowArray[POS_ROWLOCATION] = rowLoc.getClone();
java/engine/org/apache/derby/impl/sql/execute/SumAggregator.java,59,   /* NOTE: We need to call getClone() since value gets
java/engine/org/apache/derby/impl/sql/execute/SumAggregator.java,62,   value = addend.getClone();
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,543,     RowLocation rl2 = (RowLocation) rl.getClone();
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,692,"   /* If hash table is not full, we add it in.  The key of the hash entry"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,693,"    * is the string value of the RowLocation.  If the hash table is full,"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,694,"    * as the comments above this function say, we scan forward."
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,695,    *
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,696,"    * Need to save a clone because when we get cached currentRow, ""rl"" shares the"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,697,"    * same reference, so is changed at the same time."
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,698,    */
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,699,   RowLocation updatedRL = (RowLocation) rl.getClone();
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,762,"    tableScan.lastCursorKey.setColumn(i, aCol.getClone());"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,130,"    rowClone.setColumn(colCtr + 1, column[colCtr].getClone());"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,148,    if (column[colCtr] instanceof RowLocation)
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,149,    {
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,150,     /*
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,151,     ** The getClone() method for a RowLocation has the same
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,152,"     ** name as for DataValueDescriptor, but it's on a different"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,153,"     ** interface, so the cast must be different."
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,154,     **
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,155,     */
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,156,"     rowClone.setColumn(colCtr + 1, column[colCtr].getClone());"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,157,    }
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,158,    else
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,159,    {
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,160,"     // otherwise, get a new null"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,161,"     rowClone.setColumn(colCtr + 1,"
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,162,      ((DataValueDescriptor) (column[colCtr])).getNewNull());
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,163,    }
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,187,  return column[columnPosition -1].getClone();
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,234,    columnClones[colCtr] = column[colCtr].getClone();
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,184,  * <U>Shallow copy</U>.
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,185,  * <p>
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,186,  * Clone the DataValueDescriptor and copy its contents.
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,187,  * We clone the data value wrapper (e.g. SQLDecimal)
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,188,  * and reuse its contents (the underlying BigDecimal).
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,189,  * The resultant DataValueDescriptor will point to the same
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,190,  * value as the original DataValueDescriptor (unless the value
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,191,"  * is a primitive type, e.g. SQLInteger/integer)."
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,192,  *
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,193,  * @return A clone of the DataValueDescriptor reusing its contents.
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,194,     *
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,195,     * @see org.apache.derby.iapi.types.DataValueDescriptor#getClone
java/engine/org/apache/derby/impl/store/access/StorableFormatId.java,197, public DataValueDescriptor getClone()
java/engine/org/apache/derby/impl/store/access/btree/BTreeMaxScan.java,112,        check_row_template[0] = fetch_row[0].getClone();
java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java,268,                init_template[init_template.length - 1].getClone();
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,112,  * <U>Shallow copy</U>.
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,113,  * <p>
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,114,  * Clone the DataValueDescriptor and copy its contents.
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,115,  * We clone the data value wrapper (e.g. SQLDecimal)
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,116,  * and reuse its contents (the underlying BigDecimal).
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,117,  * The resultant DataValueDescriptor will point to the same
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,118,  * value as the original DataValueDescriptor (unless the value
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,119,"  * is a primitive type, e.g. SQLInteger/integer)."
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,120,  *
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,121,  * @return A clone of the DataValueDescriptor reusing its contents.
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,122,     *
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,123,     * @see org.apache.derby.iapi.types.DataValueDescriptor#getClone
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,125, public DataValueDescriptor getClone()
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,104, public DataValueDescriptor getClone() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/TestDiskHashtable.java,243,            row[i] = aRow[i].getClone();
java/testing/org/apache/derbyTesting/unitTests/store/T_AccessRow.java,132,   retval[index] = column[index].getClone();
java/engine/org/apache/derby/iapi/types/SQLBit.java,27,import org.apache.derby.iapi.services.io.ArrayInputStream;
java/engine/org/apache/derby/iapi/types/SQLBit.java,28,
java/engine/org/apache/derby/iapi/types/SQLBit.java,29,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/iapi/types/SQLBit.java,30,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLBit.java,31,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/iapi/types/SQLBit.java,32,import org.apache.derby.iapi.types.BitDataValue;
java/engine/org/apache/derby/iapi/types/SQLBit.java,33,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLBit.java,34,import org.apache.derby.iapi.types.ConcatableDataValue;
java/engine/org/apache/derby/iapi/types/SQLBit.java,35,import org.apache.derby.iapi.types.VariableSizeDataValue;
java/engine/org/apache/derby/iapi/types/SQLBit.java,36,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/iapi/types/SQLBit.java,37,
java/engine/org/apache/derby/iapi/types/SQLBit.java,38,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/iapi/types/SQLBit.java,40,import org.apache.derby.iapi.services.io.StreamStorable;
java/engine/org/apache/derby/iapi/types/SQLBit.java,41,import org.apache.derby.iapi.services.io.FormatIdInputStream;
java/engine/org/apache/derby/iapi/types/SQLBit.java,43,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/iapi/types/SQLBit.java,44,
java/engine/org/apache/derby/iapi/types/SQLBit.java,45,import org.apache.derby.iapi.types.BooleanDataValue;
java/engine/org/apache/derby/iapi/types/SQLBit.java,46,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/iapi/types/SQLBit.java,47,import org.apache.derby.iapi.types.NumberDataValue;
java/engine/org/apache/derby/iapi/types/SQLBit.java,48,
java/engine/org/apache/derby/iapi/types/SQLBit.java,49,import org.apache.derby.iapi.services.cache.ClassSize;
java/engine/org/apache/derby/iapi/types/SQLBit.java,52,import org.apache.derby.iapi.types.SQLInteger;
java/engine/org/apache/derby/iapi/types/SQLBit.java,53,
java/engine/org/apache/derby/iapi/types/SQLBit.java,54,import java.io.ObjectOutput;
java/engine/org/apache/derby/iapi/types/SQLBit.java,55,import java.io.ObjectInput;
java/engine/org/apache/derby/iapi/types/SQLBit.java,56,import java.io.IOException;
java/engine/org/apache/derby/iapi/types/SQLBit.java,57,import java.io.InputStream;
java/engine/org/apache/derby/iapi/types/SQLBit.java,58,
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,24,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,25,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,26,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,27,import org.apache.derby.iapi.types.BitDataValue;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,28,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,29,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,30,import org.apache.derby.iapi.reference.Limits;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,33,import org.apache.derby.iapi.types.Orderable;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,35,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,38,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,39,
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,40,import org.apache.derby.iapi.types.BooleanDataValue;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,41,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,42,import org.apache.derby.iapi.types.NumberDataValue;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,43,
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,44,import java.io.ObjectOutput;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,45,import java.io.ObjectInput;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,46,import java.io.IOException;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,47,import java.sql.ResultSet;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,48,import java.sql.SQLException;
java/engine/org/apache/derby/iapi/types/SQLLongVarbit.java,49,
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,26,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,27,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,28,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,29,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/iapi/types/SQLLongvarchar.java,33,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,24,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,25,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,26,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,27,import org.apache.derby.iapi.types.BitDataValue;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,28,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,29,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,30,import org.apache.derby.iapi.reference.Limits;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,33,import org.apache.derby.iapi.types.Orderable;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,35,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,38,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,39,
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,40,import org.apache.derby.iapi.types.BooleanDataValue;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,41,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,42,import org.apache.derby.iapi.types.NumberDataValue;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,43,
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,44,import org.apache.derby.iapi.services.io.FormatableBitSet;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,47,import java.io.ObjectOutput;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,48,import java.io.ObjectInput;
java/engine/org/apache/derby/iapi/types/SQLVarbit.java,49,import java.io.IOException;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,27,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,28,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,29,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,30,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,31,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,32,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,35,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/iapi/types/SQLVarchar.java,39,import org.apache.derby.iapi.util.StringUtil;
java/engine/org/apache/derby/iapi/types/SQLBinary.java,641, public final DataValueDescriptor cloneValue(boolean forceMaterialization)
java/engine/org/apache/derby/iapi/types/SQLClob.java,100, /** @see DataValueDescriptor#cloneValue */
java/engine/org/apache/derby/iapi/types/SQLClob.java,101, public DataValueDescriptor cloneValue(boolean forceMaterialization)
java/engine/org/apache/derby/iapi/types/SQLClob.java,102, {
java/engine/org/apache/derby/iapi/types/SQLClob.java,103,        // TODO: Should this be rewritten to clone the stream instead of
java/engine/org/apache/derby/iapi/types/SQLClob.java,104,        //       materializing the value if possible?
java/engine/org/apache/derby/iapi/types/SQLClob.java,105,  try
java/engine/org/apache/derby/iapi/types/SQLClob.java,106,  {
java/engine/org/apache/derby/iapi/types/SQLClob.java,107,            SQLClob clone = new SQLClob(getString());
java/engine/org/apache/derby/iapi/types/SQLClob.java,108,            // Copy the soft upgrade mode state.
java/engine/org/apache/derby/iapi/types/SQLClob.java,109,            clone.inSoftUpgradeMode = inSoftUpgradeMode;
java/engine/org/apache/derby/iapi/types/SQLClob.java,111,  }
java/engine/org/apache/derby/iapi/types/SQLClob.java,112,  catch (StandardException se)
java/engine/org/apache/derby/iapi/types/SQLClob.java,113,  {
java/engine/org/apache/derby/iapi/types/SQLClob.java,114,   if (SanityManager.DEBUG)
java/engine/org/apache/derby/iapi/types/SQLClob.java,115,"    SanityManager.THROWASSERT(""Unexpected exception"", se);"
java/engine/org/apache/derby/iapi/types/SQLClob.java,116,   return null;
java/engine/org/apache/derby/iapi/types/SQLClob.java,117,  }
java/engine/org/apache/derby/iapi/types/SQLClob.java,118, }
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,165,"            //          here (i.e. used cloneValue, not cloneObject). We still"
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,166,            //          do.
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,167,            //          TODO: change to 'true' below and add comment.
java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java,169,   newArray[i] = origArray[i].cloneValue(false);
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,521,
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,522,                    // Enable this code after DERBY-3650 is in: FIXME
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,523,                    //
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,524,                    // long length = dvd.getLengthIfKnown();
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,525,                    //
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,526,"                    // If the stream isn't clonable, we have to load the stream."
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,527,                    // if ((length > 32*1024 || length == -1) &&
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,528,                    //     dvd.getStream() instanceof CloneableStream) {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,529,"                    //     // Copy the stream, the value may be large."
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,530,                    //     dvd = dvd.copyForRead();
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,531,                    // } else {
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,532,"                    //     // Load the stream, then we don't have to clone."
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,533,                    ((StreamStorable)dvd).loadStream();
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,534,                    // }
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,229,        // int blobsize = LONG_BLOB_LENGTH;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/BlobMemTest.java,230,        int blobsize = 35000;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,207,        // int clobsize = LONG_BLOB_LENGTH;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/ClobMemTest.java,208,        int clobsize = 35000;
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1376,  //User types are comparable to other user types only if
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1377,  //(for now) they are the same type and are being used to
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1378,  //implement some JDBC type.  This is sufficient for
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1379,  //date/time types; it may be generalized later for e.g.
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1380,  //comparison of any user type with one of its subtypes.
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1381,  if (typeId.isUserDefinedTypeId() || typeId.getJDBCTypeId() == Types.OTHER) {
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1382,         if (forEquals)
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1383,          return true;
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1384,         try {
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1385,
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1386,          Class thisClass = cf.getClassInspector().getClass(
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1387,    typeId.getCorrespondingJavaTypeName());
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1388,
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1389,          return java.lang.Comparable.class.isAssignableFrom(thisClass);
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1390,         } catch (ClassNotFoundException cnfe) {
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1391,          return false;
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1392,         }
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,1393,  }
java/engine/org/apache/derby/iapi/types/TypeId.java,1129,                                UserDefinedTypeIdImpl baseUserTypeId =
java/engine/org/apache/derby/iapi/types/TypeId.java,1130,                                                                                (UserDefinedTypeIdImpl) baseTypeId;
java/engine/org/apache/derby/iapi/types/TypeId.java,1131,
java/engine/org/apache/derby/iapi/types/TypeId.java,1132,                                String className = baseUserTypeId.getClassName();
java/engine/org/apache/derby/iapi/types/TypeId.java,1133,
java/engine/org/apache/derby/iapi/types/TypeId.java,1134,                                try
java/engine/org/apache/derby/iapi/types/TypeId.java,1135,                                {
java/engine/org/apache/derby/iapi/types/TypeId.java,1136,                                        Class c = cf.getClassInspector().getClass(className);
java/engine/org/apache/derby/iapi/types/TypeId.java,1137,                                        orderable = java.lang.Comparable.class.isAssignableFrom(c);
java/engine/org/apache/derby/iapi/types/TypeId.java,1138,                                }
java/engine/org/apache/derby/iapi/types/TypeId.java,1139,                                catch (ClassNotFoundException cnfe)
java/engine/org/apache/derby/iapi/types/TypeId.java,1140,                                {
java/engine/org/apache/derby/iapi/types/TypeId.java,1141,                                        orderable = false;
java/engine/org/apache/derby/iapi/types/TypeId.java,1142,                                }
java/engine/org/apache/derby/iapi/types/TypeId.java,1143,                                break;
java/engine/org/apache/derby/iapi/types/TypeId.java,1190,                        if (formatId == StoredFormatIds.REF_TYPE_ID)
java/engine/org/apache/derby/iapi/types/TypeId.java,1191,                        {
java/engine/org/apache/derby/iapi/types/TypeId.java,1192,"                                SanityManager.THROWASSERT(""getCorrespondingJavaTypeName not implemented for StoredFormatIds.REF_TYPE_ID"");"
java/engine/org/apache/derby/iapi/types/TypeId.java,1193,                        }
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,330,  // Procedures and functions do not check class or method validity until
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,331,  // runtime execution. Synonyms do need some validity checks.
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,332,  if (aliasType != AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR)
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,333,   return;
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,334,
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,338,            // nothing to do yet
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,959,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java,960,
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,249,  DataTypeDescriptor dts = DataTypeDescriptor.getSQLDataTypeDescriptor(javaNode.getJavaTypeName());
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,258,"        if ( catalogType.getTypeName().equals( ""java.sql.ResultSet"" ) )"
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,45,  * User types are convertible to other user types only if
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,46,  * (for now) they are the same type and are being used to
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,47,  * implement some JDBC type.  This is sufficient for
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,48,  * date/time types; it may be generalized later for e.g.
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,49,  * comparison of any user type with one of its subtypes.
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,60,"  ** We are a user defined type, we are"
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,74,  * User types are storable into other user types that they
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,78,  * Built-in types are also storable into user types when the built-in
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,79,  * type's corresponding Java type is assignable to the user type.
java/engine/org/apache/derby/impl/sql/compile/UserDefinedTypeCompiler.java,80,  *
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1182,  * @param p1
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1197,  * @param p1
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1211,  * @param p1
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1226,  * @param p1
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1240,  * @param p1
java/client/org/apache/derby/client/net/NetDatabaseMetaData.java,132,        return supportsSessionDataCaching_;
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,605,        if (!name.startsWith(PersistentService.INMEMORY)) {
java/build/org/apache/derbyBuild/JiraIssue.java,28,"    private static final String JIRA_ITEM = ""item"";"
java/build/org/apache/derbyBuild/JiraIssue.java,31,"    private static final String JIRA_TITLE = ""title"";"
java/build/org/apache/derbyBuild/JiraIssue.java,51,        key = ef.getTextByTagName(JIRA_KEY);
java/build/org/apache/derbyBuild/JiraIssue.java,54,        NodeList attachmentsList =
java/build/org/apache/derbyBuild/JiraIssue.java,55,                itemElement.getElementsByTagName(JIRA_ATTACHMENT);
java/build/org/apache/derbyBuild/JiraIssue.java,56,
java/build/org/apache/derbyBuild/JiraIssue.java,57,        for (int i = 0; i < attachmentsList.getLength(); i++) {
java/build/org/apache/derbyBuild/JiraIssue.java,58,            Element attachment = (Element) attachmentsList.item(i);
java/build/org/apache/derbyBuild/JiraIssue.java,59,            String name = attachment.getAttribute(JIRA_NAME);
java/build/org/apache/derbyBuild/JiraIssue.java,60,            if (RELEASE_NOTE_NAME.equals(name)) {
java/build/org/apache/derbyBuild/JiraIssue.java,61,                releaseNoteAttachmentID =
java/build/org/apache/derbyBuild/JiraIssue.java,62,"                        Math.max(releaseNoteAttachmentID,"
java/build/org/apache/derbyBuild/JiraIssue.java,63,                        Long.parseLong(attachment.getAttribute(JIRA_ID)));
java/build/org/apache/derbyBuild/JiraIssue.java,64,            }
java/build/org/apache/derbyBuild/JiraIssue.java,65,        }
java/build/org/apache/derbyBuild/JiraIssue.java,114,"                System.out.println(""adding: "" + candidate.getKey());"
java/build/org/apache/derbyBuild/JiraIssue.java,162,"        return ""http://issues.apache.org/jira/browse/"" + key;"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,304,"            println(""Fixed: ""+ issue.getKey());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,438,     * @param MASTER the expected outcome
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,33,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,34,
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,37,import org.apache.derby.iapi.sql.compile.Visitable;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java,93,        TestSuite suite = (TestSuite) TestConfiguration.embeddedSuite(AnsiSignaturesTest.class);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2708,"                                        new Object[] { dbname }, nse);"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,362,"                                             dataDirectory,"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,363,                                             readOnlyMsg));
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,465,                    getIdentifier()));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,183,"          {""XJ040"",""Failed to start database '{0}', see the next exception for details."",""40000""},"
java/client/org/apache/derby/client/net/NetConnection.java,1301,"        extnam_ = ""derbydnc"" + java.lang.Thread.currentThread().getName();"
java/build/org/apache/derbyBuild/JiraIssue.java,106,"        if ( key.equals( ""DERBY-4432"" ) ) { result = 12424709L; }"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,362,"                println(""Release note: ""+issue.getKey()+"" - ""+issue.getTitle());"
java/build/org/apache/derbyBuild/JiraIssue.java,220,"        return ""http://issues.apache.org/jira/secure/attachment/"" +"
java/build/org/apache/derbyBuild/JiraIssue.java,69,            fixVersionSet.add(i.next());
java/build/org/apache/derbyBuild/JiraIssue.java,111,"        else if ( key.equals( ""DERBY-4312"" ) ) { result = 12414219L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,113,"        else if ( key.equals( ""DERBY-4191"" ) ) { result = 12430699L; }"
java/engine/org/apache/derby/iapi/types/SQLChar.java,1571,                if( micros > 0)
java/engine/org/apache/derby/iapi/types/SQLChar.java,1573,                    sb.append( '.');
java/engine/org/apache/derby/iapi/types/SQLChar.java,1609,"            cal.get(Calendar.HOUR),"
java/build/org/apache/derbyBuild/ChangesFileGenerator.java,198,"        for (Iterator i = JiraIssue.createJiraIssueList(bugListDoc,"
java/build/org/apache/derbyBuild/ChangesFileGenerator.java,199,                excludeReleaseIDList).iterator(); i.hasNext();) {
java/build/org/apache/derbyBuild/GeneratorBase.java,89,    protected Document bugListDoc;
java/build/org/apache/derbyBuild/GeneratorBase.java,152,        bugListDoc = docBldr.parse(new File(bugListFileName));
java/build/org/apache/derbyBuild/JiraIssue.java,23, * An issue from a JIRA report.
java/build/org/apache/derbyBuild/JiraIssue.java,27,    private static final long NO_RELEASE_NOTE = -1;
java/build/org/apache/derbyBuild/JiraIssue.java,28,"    private static final String JIRA_ITEM = ""h3"";"
java/build/org/apache/derbyBuild/JiraIssue.java,29,"    private static final String JIRA_ID = ""id"";"
java/build/org/apache/derbyBuild/JiraIssue.java,30,"    private static final String JIRA_NAME = ""name"";"
java/build/org/apache/derbyBuild/JiraIssue.java,31,"    private static final String JIRA_TITLE = ""a"";"
java/build/org/apache/derbyBuild/JiraIssue.java,32,"    private static final String JIRA_KEY = ""key"";"
java/build/org/apache/derbyBuild/JiraIssue.java,33,"    private static final String JIRA_ATTACHMENT = ""attachment"";"
java/build/org/apache/derbyBuild/JiraIssue.java,34,"    private static final String JIRA_FIXVERSION = ""fixVersion"";"
java/build/org/apache/derbyBuild/JiraIssue.java,39,    private long releaseNoteAttachmentID = NO_RELEASE_NOTE;
java/build/org/apache/derbyBuild/JiraIssue.java,40,    private HashSet fixVersionSet = new HashSet();
java/build/org/apache/derbyBuild/JiraIssue.java,43,     * Create an object instance from an XML document Element. The Element given
java/build/org/apache/derbyBuild/JiraIssue.java,44,     * as argument is assumed to be an 'item' sub-tree from the XML file
java/build/org/apache/derbyBuild/JiraIssue.java,45,     * representation of a Jira filter/query.
java/build/org/apache/derbyBuild/JiraIssue.java,46,     * @param itemElement the 'item' subtree representing a Jira issue
java/build/org/apache/derbyBuild/JiraIssue.java,47,     * @throws java.lang.Exception
java/build/org/apache/derbyBuild/JiraIssue.java,48,     */
java/build/org/apache/derbyBuild/JiraIssue.java,49,    public JiraIssue(Element itemElement) throws Exception {
java/build/org/apache/derbyBuild/JiraIssue.java,50,        ElementFacade ef = new ElementFacade(itemElement);
java/build/org/apache/derbyBuild/JiraIssue.java,51,        title = ef.getTextByTagName(JIRA_TITLE);
java/build/org/apache/derbyBuild/JiraIssue.java,52,        //key = ef.getTextByTagName(JIRA_KEY);
java/build/org/apache/derbyBuild/JiraIssue.java,53,        key = parseKey( title );
java/build/org/apache/derbyBuild/JiraIssue.java,54,
java/build/org/apache/derbyBuild/JiraIssue.java,55,"        releaseNoteAttachmentID = getReleaseNoteAttachmentID( key, itemElement );"
java/build/org/apache/derbyBuild/JiraIssue.java,56,
java/build/org/apache/derbyBuild/JiraIssue.java,57,        //
java/build/org/apache/derbyBuild/JiraIssue.java,58,        // A JIRA title has the following form:
java/build/org/apache/derbyBuild/JiraIssue.java,59,        //
java/build/org/apache/derbyBuild/JiraIssue.java,60,"        //  ""[DERBY-2598] new upgrade  test failures after change 528033"""
java/build/org/apache/derbyBuild/JiraIssue.java,61,        //
java/build/org/apache/derbyBuild/JiraIssue.java,62,        // We strip off the leading JIRA id because that information already
java/build/org/apache/derbyBuild/JiraIssue.java,63,        // lives in the key.
java/build/org/apache/derbyBuild/JiraIssue.java,64,        //
java/build/org/apache/derbyBuild/JiraIssue.java,65,        title = title.substring(title.indexOf(']') + 2);
java/build/org/apache/derbyBuild/JiraIssue.java,66,
java/build/org/apache/derbyBuild/JiraIssue.java,67,        for (Iterator i = ef.getTextListByTagName(JIRA_FIXVERSION).iterator();
java/build/org/apache/derbyBuild/JiraIssue.java,68,        i.hasNext();) {
java/build/org/apache/derbyBuild/JiraIssue.java,69,
java/build/org/apache/derbyBuild/JiraIssue.java,70,            String nextVersion = (String) i.next();
java/build/org/apache/derbyBuild/JiraIssue.java,71,
java/build/org/apache/derbyBuild/JiraIssue.java,72,            fixVersionSet.add( nextVersion );
java/build/org/apache/derbyBuild/JiraIssue.java,73,        }
java/build/org/apache/derbyBuild/JiraIssue.java,74,    }
java/build/org/apache/derbyBuild/JiraIssue.java,75,
java/build/org/apache/derbyBuild/JiraIssue.java,76,    /**
java/build/org/apache/derbyBuild/JiraIssue.java,77,     * Look up the attachment id for the release note attached to
java/build/org/apache/derbyBuild/JiraIssue.java,78,     * an issue.
java/build/org/apache/derbyBuild/JiraIssue.java,79,     */
java/build/org/apache/derbyBuild/JiraIssue.java,80,    private long getReleaseNoteAttachmentID
java/build/org/apache/derbyBuild/JiraIssue.java,81,"        ( String key, Element itemElement )"
java/build/org/apache/derbyBuild/JiraIssue.java,82,        throws Exception
java/build/org/apache/derbyBuild/JiraIssue.java,83,    {
java/build/org/apache/derbyBuild/JiraIssue.java,84,        long result = NO_RELEASE_NOTE;
java/build/org/apache/derbyBuild/JiraIssue.java,85,
java/build/org/apache/derbyBuild/JiraIssue.java,86,        //
java/build/org/apache/derbyBuild/JiraIssue.java,87,        // The following code used to work before the time of Derby 10.6.
java/build/org/apache/derbyBuild/JiraIssue.java,88,"        // With that release, the list of attachments stopped appearing in"
java/build/org/apache/derbyBuild/JiraIssue.java,89,        // the xml reports.
java/build/org/apache/derbyBuild/JiraIssue.java,90,        //
java/build/org/apache/derbyBuild/JiraIssue.java,91,        //        NodeList attachmentsList =
java/build/org/apache/derbyBuild/JiraIssue.java,92,        //                itemElement.getElementsByTagName(JIRA_ATTACHMENT);
java/build/org/apache/derbyBuild/JiraIssue.java,93,        //
java/build/org/apache/derbyBuild/JiraIssue.java,94,        //        for (int i = 0; i < attachmentsList.getLength(); i++) {
java/build/org/apache/derbyBuild/JiraIssue.java,95,        //            Element attachment = (Element) attachmentsList.item(i);
java/build/org/apache/derbyBuild/JiraIssue.java,96,        //            String name = attachment.getAttribute(JIRA_NAME);
java/build/org/apache/derbyBuild/JiraIssue.java,97,        //            if (RELEASE_NOTE_NAME.equals(name)) {
java/build/org/apache/derbyBuild/JiraIssue.java,98,        //                result =
java/build/org/apache/derbyBuild/JiraIssue.java,99,"        //                        Math.max(result,"
java/build/org/apache/derbyBuild/JiraIssue.java,100,        //                        Long.parseLong(attachment.getAttribute(JIRA_ID)));
java/build/org/apache/derbyBuild/JiraIssue.java,101,        //            }
java/build/org/apache/derbyBuild/JiraIssue.java,102,        //        }
java/build/org/apache/derbyBuild/JiraIssue.java,103,
java/build/org/apache/derbyBuild/JiraIssue.java,104,        //
java/build/org/apache/derbyBuild/JiraIssue.java,105,"        // As a consequence, we now hardcode the attachment ids."
java/build/org/apache/derbyBuild/JiraIssue.java,106,        // The attachment id is in the link of the latest release note
java/build/org/apache/derbyBuild/JiraIssue.java,107,        // attached to the issue.
java/build/org/apache/derbyBuild/JiraIssue.java,108,        //
java/build/org/apache/derbyBuild/JiraIssue.java,109,"        if ( key.equals( ""DERBY-4602"" ) ) { result = 12440335L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,110,"        else if ( key.equals( ""DERBY-4483"" ) ) { result = 12439775L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,111,"        else if ( key.equals( ""DERBY-4432"" ) ) { result = 12424709L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,112,"        else if ( key.equals( ""DERBY-4380"" ) ) { result = 12434514L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,113,"        else if ( key.equals( ""DERBY-4355"" ) ) { result = 12419298L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,114,"        else if ( key.equals( ""DERBY-4312"" ) ) { result = 12442288L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,115,"        else if ( key.equals( ""DERBY-4230"" ) ) { result = 12409466L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,116,"        else if ( key.equals( ""DERBY-4191"" ) ) { result = 12442312L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,117,"        else if ( key.equals( ""DERBY-3991"" ) ) { result = 12409798L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,118,"        else if ( key.equals( ""DERBY-3844"" ) ) { result = 12436979L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,119,"        else if ( key.equals( ""DERBY-2769"" ) ) { result = 12418474L; }"
java/build/org/apache/derbyBuild/JiraIssue.java,120,
java/build/org/apache/derbyBuild/JiraIssue.java,121,        return result;
java/build/org/apache/derbyBuild/JiraIssue.java,122,    }
java/build/org/apache/derbyBuild/JiraIssue.java,123,
java/build/org/apache/derbyBuild/JiraIssue.java,124,    /**
java/build/org/apache/derbyBuild/JiraIssue.java,125,     * Extract the JIRA key (DERBY-XXXX) from the raw title.
java/build/org/apache/derbyBuild/JiraIssue.java,126,     * A JIRA  raw title has the following form:
java/build/org/apache/derbyBuild/JiraIssue.java,127,     *
java/build/org/apache/derbyBuild/JiraIssue.java,128,"     *  ""[DERBY-2598] new upgrade  test failures after change 528033"""
java/build/org/apache/derbyBuild/JiraIssue.java,130,    private String parseKey( String rawTitle ) throws Exception
java/build/org/apache/derbyBuild/JiraIssue.java,132,"        String result = rawTitle.substring(1, title.indexOf(']') );"
java/build/org/apache/derbyBuild/JiraIssue.java,133,
java/build/org/apache/derbyBuild/JiraIssue.java,134,        return result;
java/build/org/apache/derbyBuild/JiraIssue.java,141,     * @param report the Jira report to extract issues from (as a Document object)
java/build/org/apache/derbyBuild/JiraIssue.java,146,"    public static List createJiraIssueList(Document report,"
java/build/org/apache/derbyBuild/JiraIssue.java,147,            List excludeReleaseIDList) throws Exception {
java/build/org/apache/derbyBuild/JiraIssue.java,148,        Element reportRoot = report.getDocumentElement();
java/build/org/apache/derbyBuild/JiraIssue.java,149,        NodeList itemList = reportRoot.getElementsByTagName(JIRA_ITEM);
java/build/org/apache/derbyBuild/JiraIssue.java,150,        int count = itemList.getLength();
java/build/org/apache/derbyBuild/JiraIssue.java,153,        boolean skip;
java/build/org/apache/derbyBuild/JiraIssue.java,154,        for (int i = 0; i < count; i++) {
java/build/org/apache/derbyBuild/JiraIssue.java,155,            skip=false;
java/build/org/apache/derbyBuild/JiraIssue.java,156,            JiraIssue candidate = new JiraIssue((Element) itemList.item(i));
java/build/org/apache/derbyBuild/JiraIssue.java,157,            for (Iterator ex = excludeReleaseIDList.iterator(); ex.hasNext();) {
java/build/org/apache/derbyBuild/JiraIssue.java,159,                if (candidate.isFixedIn(rid)) {
java/build/org/apache/derbyBuild/JiraIssue.java,160,"                    System.out.println(""Already fixed: ""+candidate.getKey()+"
java/build/org/apache/derbyBuild/JiraIssue.java,161,"                            "" (in ""+rid+"")"");"
java/build/org/apache/derbyBuild/JiraIssue.java,163,                    continue;
java/build/org/apache/derbyBuild/JiraIssue.java,176,     * @return the issue's key (jira number DERBY-xxx)
java/build/org/apache/derbyBuild/JiraIssue.java,200,        return (releaseNoteAttachmentID > NO_RELEASE_NOTE);
java/build/org/apache/derbyBuild/JiraIssue.java,216,"        return ""https://issues.apache.org/jira/browse/"" + key;"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,136,    private String releaseNotesListFileName;
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,137,    private Document releaseNotesDoc;
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,165,    /**
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,166,     * Ant accessor to set the name of the JIRA-generated list of bugs which
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,167,     * have release notes
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,168,     * @param releaseNotesListFileName name of the xml file from the release
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,169,     * note Jira filter/query
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,170,     * @throws Exception
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,171,     */
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,172,    public void setReleaseNotesListFileName(String releaseNotesListFileName)
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,173,            throws Exception {
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,174,        this.releaseNotesListFileName = releaseNotesListFileName;
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,175,        releaseNotesDoc = docBldr.parse(new File(releaseNotesListFileName));
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,176,    }
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,177,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,178,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,301,"        for (Iterator i = JiraIssue.createJiraIssueList(bugListDoc,"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,302,                excludeReleaseIDList).iterator(); i.hasNext();) {
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,309,                    issue.getKey());
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,339,"        for (Iterator i = JiraIssue.createJiraIssueList(releaseNotesDoc,"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,340,                excludeReleaseIDList).iterator(); i.hasNext();) {
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,355,"                            ""release note for "" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,361,"                String key = ""Note for "" + issue.getKey();"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,458,        setReleaseNotesListFileName( args[ idx++ ] );
java/build/org/apache/derbyBuild/ReportParser.java,156,"     * columns and was produced by selecting ""Full Content"" option under ""Content View"""
java/client/org/apache/derby/client/net/Request.java,288,
java/client/org/apache/derby/client/net/Request.java,289,
java/client/org/apache/derby/client/net/Request.java,290,
java/client/org/apache/derby/client/net/Request.java,324,"    padScalarStreamForError(leftToRead, bytesToRead);"
java/client/org/apache/derby/client/net/Request.java,443, // We need to reuse the agent's sql exception accumulation mechanism
java/client/org/apache/derby/client/net/Request.java,444,"    // for this write exception, pad if the length is too big, and truncation if the length is too small"
java/client/org/apache/derby/client/net/Request.java,456,                leftToRead);
java/client/org/apache/derby/client/net/Request.java,460,"   bytesToRead = Math.min(leftToRead, DssConstants.MAX_DSS_LEN - 6 - 4 - 1 - extendedLengthByteCount);"
java/client/org/apache/derby/client/net/Request.java,462,"   bytesToRead = Math.min(leftToRead, DssConstants.MAX_DSS_LEN - 6 - 4 - extendedLengthByteCount);"
java/client/org/apache/derby/client/net/Request.java,464,
java/client/org/apache/derby/client/net/Request.java,466,"           leftToRead,"
java/client/org/apache/derby/client/net/Request.java,469,
java/client/org/apache/derby/client/net/Request.java,471,  int totalBytesRead = 0;
java/client/org/apache/derby/client/net/Request.java,476,     totalBytesRead += bytesRead;
java/client/org/apache/derby/client/net/Request.java,478,"     padScalarStreamForError(leftToRead, bytesToRead);"
java/client/org/apache/derby/client/net/Request.java,490,"     padScalarStreamForError(leftToRead, bytesToRead);"
java/client/org/apache/derby/client/net/Request.java,526,    // We need to reuse the agent's sql exception accumulation mechanism
java/client/org/apache/derby/client/net/Request.java,527,"    // for this write exception, pad if the length is too big, and truncation if the length is too small"
java/client/org/apache/derby/client/net/Request.java,533,"                                              int parameterIndex) throws DisconnectException, SqlException {"
java/client/org/apache/derby/client/net/Request.java,585,
java/client/org/apache/derby/client/net/Request.java,586,
java/client/org/apache/derby/client/net/Request.java,588,
java/client/org/apache/derby/client/net/Request.java,600,
java/client/org/apache/derby/client/net/Request.java,601,
java/client/org/apache/derby/client/net/Request.java,602,
java/client/org/apache/derby/client/net/Request.java,603,  // check to make sure that the specified length wasn't too small
java/client/org/apache/derby/client/net/Request.java,604,  try {
java/client/org/apache/derby/client/net/Request.java,605,   if (in.read() != -1) {
java/client/org/apache/derby/client/net/Request.java,606,    // set with SQLSTATE 01004: The value of a string was truncated when assigned to a host variable.
java/client/org/apache/derby/client/net/Request.java,607,
java/client/org/apache/derby/client/net/Request.java,608,                final SqlException sqlex =
java/client/org/apache/derby/client/net/Request.java,609,"                    new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/Request.java,610,"                                     new ClientMessageId(SQLState.NET_INPUTSTREAM_LENGTH_TOO_SMALL),"
java/client/org/apache/derby/client/net/Request.java,611,                                     new Integer(parameterIndex));
java/client/org/apache/derby/client/net/Request.java,613,    netAgent_.accumulateReadException(sqlex);
java/client/org/apache/derby/client/net/Request.java,614,   }
java/client/org/apache/derby/client/net/Request.java,615,  } catch (java.io.IOException e) {
java/client/org/apache/derby/client/net/Request.java,616,   netAgent_.accumulateReadException(new SqlException(
java/client/org/apache/derby/client/net/Request.java,617,"                  netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/Request.java,618,                  new ClientMessageId(
java/client/org/apache/derby/client/net/Request.java,619,"                       SQLState.NET_IOEXCEPTION_ON_STREAMLEN_VERIFICATION),"
java/client/org/apache/derby/client/net/Request.java,620,"                  new Integer(parameterIndex),"
java/client/org/apache/derby/client/net/Request.java,621,"                  e.getMessage(),"
java/client/org/apache/derby/client/net/Request.java,622,                  e));
java/client/org/apache/derby/client/net/Request.java,623,  }
java/client/org/apache/derby/client/net/Request.java,776,    // the offset_ must not be updated when an error is encountered
java/client/org/apache/derby/client/net/Request.java,777,    // note valid data may be overwritten
java/client/org/apache/derby/client/net/Request.java,778,"    protected final void padScalarStreamForError(int leftToRead, int bytesToRead) throws DisconnectException {"
java/client/org/apache/derby/client/net/Request.java,1761,
java/drda/org/apache/derby/impl/drda/DDMReader.java,996,  } else if ( doingLayerBStreaming ){
java/drda/org/apache/derby/impl/drda/DDMReader.java,997,   return new LayerBStreamedEXTDTAReaderInputStream(this);
java/drda/org/apache/derby/impl/drda/DDMReader.java,998,
java/drda/org/apache/derby/impl/drda/DDMReader.java,1000,            return new StandardEXTDTAReaderInputStream(this);
java/drda/org/apache/derby/impl/drda/DDMReader.java,1001,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4990,  * @param i   index of the parameter
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5001,   PreparedStatement ps = stmt.getPreparedStatement();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5009,    final byte[] paramBytes;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5010,    final String paramString;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5011,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5016,"      paramString = """";"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5017,      final boolean useSetBinaryStream =
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5018,       stmt.getParameterMetaData().getParameterType(i+1)==Types.BLOB;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5019,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5020,      if (streamLOB && useSetBinaryStream) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5021,       paramBytes = null;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5022,       final EXTDTAReaderInputStream stream =
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5023,        reader.getEXTDTAReaderInputStream(checkNullability);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5024,                            // Save the streamed parameter so we can drain it if it does not get used
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5025,                            // by embedded when the statement is executed. DERBY-3085
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5026,                            stmt.setStreamedParameter(stream);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5027,                            if( stream instanceof StandardEXTDTAReaderInputStream ){
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5028,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5029,                                final StandardEXTDTAReaderInputStream stdeis =
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5030,                                    (StandardEXTDTAReaderInputStream) stream ;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5031,"                                ps.setBinaryStream( i + 1,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5032,"                                                    stdeis,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5033,                                                    (int) stdeis.getLength() );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5034,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5035,                            } else if( stream instanceof LayerBStreamedEXTDTAReaderInputStream ) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5036,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5037,"                                ( ( EnginePreparedStatement ) ps).setBinaryStream( i + 1,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5038,                                                                                   stream);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5039,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5040,       } else if( stream == null ){
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5041,"                                ps.setBytes(i+1, null);"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5042,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5043,                            } else {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5044,                                throw new IllegalStateException();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5045,                            }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5046,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5047,       if (SanityManager.DEBUG) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5048,        if (stream==null) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5049,"         trace(""parameter value : NULL"");"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5050,        } else {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5051,"         trace(""parameter value will be streamed"");"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5052,        }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5053,       }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5054,      } else {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5055,                            final EXTDTAReaderInputStream stream =
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5056,        reader.getEXTDTAReaderInputStream(checkNullability);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5057,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5058,                            if ( stream == null ) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5059,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5060,"                                ps.setBytes(i+1,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5061,                                            null );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5062,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5063,                                if (SanityManager.DEBUG) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5064,"         trace(""parameter value : NULL"");"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5065,                                }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5066,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5067,       } else {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5068,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5069,                                ByteArrayInputStream bais =
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5070,                                    convertAsByteArrayInputStream( stream );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5071,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5072,                                if (SanityManager.DEBUG) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5073,"         trace(""parameter value is a LOB with length:"" +"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5074,            bais.available() );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5075,        }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5076,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5077,"        ps.setBinaryStream(i+1,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5078,"                                                   bais,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5079,               bais.available() );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5080,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5081,       }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5082,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5083,      }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5087,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5088,"                        setAsCharacterStream(stmt,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5089,"                                             i,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5090,"                                             checkNullability,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5091,"                                             reader,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5092,"                                             streamLOB,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5093,                                             stmt.ccsidSBCEncoding );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5094,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5095,      break;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5098,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5099,"                        setAsCharacterStream(stmt,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5100,"                                             i,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5101,"                                             checkNullability,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5102,"                                             reader,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5103,"                                             streamLOB,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5104,                                             stmt.ccsidDBCEncoding);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5105,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5106,      break;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5109,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5110,"                        setAsCharacterStream(stmt,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5111,"                                             i,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5112,"                                             checkNullability,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5113,"                                             reader,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5114,"                                             streamLOB,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5115,                                             stmt.ccsidMBCEncoding);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5116,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5119,      paramBytes = null;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5120,"      paramString = """";"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5121,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8764,    private static ByteArrayInputStream
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8767,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8771,            32;// default length
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8772,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8775,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8776,        byte[] buffer = new byte[32 * 1024];
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8786,"        return new ByteArrayInputStream( pbos.getBuffer(),"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8787,"                                         0,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8788,                                         pbos.getCount() );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8809,"    private static void setAsCharacterStream(DRDAStatement stmt,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8810,"                                             int i,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8811,"                                             boolean checkNullability,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8812,"                                             DDMReader reader,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8813,"                                             boolean streamLOB,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8814,                                             String encoding)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8815,"        throws DRDAProtocolException ,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8816,"               SQLException ,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8817,               IOException {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8822,        final EXTDTAReaderInputStream extdtastream =
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8823,            reader.getEXTDTAReaderInputStream(checkNullability);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8827,            stmt.setStreamedParameter(extdtastream);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8831,            (InputStream) extdtastream :
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8832,            convertAsByteArrayInputStream( extdtastream );
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8838,"        engnps.setCharacterStream( i + 1,"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8839,                                   streamReader );
java/drda/org/apache/derby/impl/drda/EXTDTAReaderInputStream.java,22,import java.io.InputStream;
java/drda/org/apache/derby/impl/drda/EXTDTAReaderInputStream.java,23,import java.io.ByteArrayInputStream;
java/drda/org/apache/derby/impl/drda/EXTDTAReaderInputStream.java,31,abstract class EXTDTAReaderInputStream extends InputStream
java/drda/org/apache/derby/impl/drda/EXTDTAReaderInputStream.java,32,{
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,44,    LayerBStreamedEXTDTAReaderInputStream(final DDMReader reader)
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,47,        super();
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,66,        throws IOException
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,67,    {
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,68,        int val = (currentBuffer == null) ? -1 : currentBuffer.read();
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,69,        if (val < 0) {
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,70,            val = refreshCurrentBuffer();
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,71,        }
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,72,        return val;
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,98,"                          final int off,"
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,99,                          final int len)
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,102,"        int val = currentBuffer.read(b, off, len);"
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,103,
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,104,        if (val < 0 &&
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,105,            reader.doingLayerBStreaming() ) {
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,106,
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,107,            currentBuffer =
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,108,                reader.readLOBContinuationStream();
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,110,
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,126,    public final int available()
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,127,    {
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,128,        return currentBuffer.available();
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,132,    /**
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,133,     * Refresh the current buffer from the DDMReader
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,134,     * @exception IOException if there is a IOException when
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,135,     *                        refreshing the buffer from DDMReader
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,136,"     * @return the next byte of data, or <code>-1</code> if the end of the"
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,137,     *         stream is reached and layer B streaming was finished.
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,138,     */
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,139,    private int refreshCurrentBuffer()
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,140,        throws IOException
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,141,    {
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,142,
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,143,        if( ! reader.doingLayerBStreaming() )
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,144,            return -1;
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,145,
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,146,        currentBuffer =
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,147,            reader.readLOBContinuationStream();
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,148,        return currentBuffer.read();
java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java,151,
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,22,import java.io.InputStream;
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,34,     * Constructor
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,39,    StandardEXTDTAReaderInputStream(final DDMReader reader)
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,42,        super();
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,44,        this.length = reader.getDdmLength();
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,45,        this.remainingBytes = length;
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,47,            reader.readLOBInitStream(remainingBytes);
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,63,        throws IOException
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,64,    {
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,65,        if (remainingBytes <= 0) {
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,66,            return -1;
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,67,        }
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,68,        int val = (currentBuffer == null) ? -1 : currentBuffer.read();
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,69,        if (val < 0) {
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,70,            val = refreshCurrentBuffer();
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,71,        }
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,72,        remainingBytes--;
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,73,        return val;
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,75,
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,100,                          final int len)
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,108,            currentBuffer =
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,109,                reader.readLOBContinuationStream(remainingBytes);
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,132,        return currentBuffer.available();
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,136,     * Return the length if this stream. The length includes data which has
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,137,     * been read.
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,138,     * @return length of this stream.
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,146,     * Refresh the current buffer from the DDMReader
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,147,     * @exception IOException if there is a IOException when
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,148,     *                        refreshing the buffer from DDMReader
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,149,"     * @return the next byte of data, or <code>-1</code> if the end of the"
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,150,     *         stream is reached.
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,152,    private int refreshCurrentBuffer()
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,153,        throws IOException
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,154,    {
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,155,        if (remainingBytes > 0) {
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,156,            currentBuffer =
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,157,                reader.readLOBContinuationStream(remainingBytes);
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,158,            return currentBuffer.read();
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,159,        } else {
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,160,            return -1;
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,161,        }
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,163,
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,169,
java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java,172,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,963,"        // When using the Derby client driver, the data seems to be padded"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,964,"        // with 0s and inserted... Thus, the select returns a row."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,965,        if (!usingEmbedded()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,966,            assertTrue(rs.next());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,967,            InputStream is = rs.getBinaryStream(1);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,968,            int lastByte = -1;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,969,            int b = 99; // Just a value > 0.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,970,            while (b > -1) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,971,                lastByte = b;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,972,                b = is.read();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,973,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,974,"            assertEquals(""Last padded byte is not 0"", 0, lastByte);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,975,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,26,import org.apache.derbyTesting.functionTests.tests.jdbcapi.Derby2017LayerATest.FailingReader;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,47, * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,48, * TODO: Enable this test as part of the JDBC4 suite when DERBY-2017 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,67,    public void testStreamInsertBufferBoundary()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,121,    public void testFailedStreamInsertBufferBoundariesImpl()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,197,    public void testFailedStreamInsert()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,220,    public void testFailedStreamInsertAutoCommit()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,243,    public void testFailedStreamInsertRollbackOnError()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Derby2017LayerBTest.java,266,    public void testFailedStreamInsertAutoCommitRollbackOnError()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,47, * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,48, * TODO: Enable this test as part of the JDBCAPI suite when DERBY-2017 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,71,"                ""cs_FailedStreamInsertBufferBoundaries""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,73,"                ""cs_StreamInsertBufferBoundary""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,85,    public void cs_StreamInsertBufferBoundary()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,144,    public void cs_FailedStreamInsertBufferBoundaries()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,158,"            doInsertTest(INSERT, true, false);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,162,    public void testFailedStreamInsertLong()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,183,    public void testFailedStreamInsertIOException()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,250,    public void testFailedStreamInsert()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,274,    public void testFailedStreamInsertAutoCommit()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,297,    public void testFailedStreamInsertRollbackOnError()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby2017LayerATest.java,320,    public void testFailedStreamInsertAutoCommitRollbackOnError()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,91,        suite.addTest(InternationalConnectSimpleDSTest.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1565,"                assertSQLState(""XN017"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1566,                // rollback the bad insert.
java/testing/org/apache/derbyTesting/functionTests/tests/store/StreamingColumnTest.java,1567,                rollback();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,199,"          {""XSDB8"",""WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The db2j.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand."",""45000""},"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,529, /**
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,530,         * Return the executable name for spawning java commands.
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,531,         * This will be <path to j9>/j9  for j9 jvms.
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,532,  * @return full path to java executable.
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,533,         */
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,534,         public static final String getJavaExecutableName() {
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,535,"             String vmname = getSystemProperty(""com.ibm.oti.vm.exe"");"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,536,             if (vmname == null)
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,537,"                 vmname = getSystemProperty(""java.home"") + File.separator + ""bin"" +"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,538,"                 File.separator +""java"";"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,539,             return vmname;
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,540,         }
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,541,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,542,
java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java,3, * Derby - Class org.apache.derbyTesting.functionTests.util.DatabasePropertyTestSetup
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,46, * Testing for FileLocks that prevent Derby Double Boot.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,48," * For Sun phoneME, test that the property {@code"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,78,"     * Creates a suite with two testcases, with and without some extra"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,79,     * system properties.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,81,     * @return The test suite with both English and German locales.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,175,            // Create a socket so we know when subprogram has booted.  Since we
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,176,"            // run this test only in embedded mode, (re)use derby server port."
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,178,            parentService.setSoTimeout(60000); // max we wait is 60s
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,122,"        // FIXME: I tried to use the DatabasePropertyTestSetup.singleProperty,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,123,"        // but for some reason it failed to do the job, no matter where in the"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,124,        // decorator stack in decorateTest I placed it. Should be investigated
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,125,        // so this manual set/reset code of the property can be removed.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,126,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,34,* <p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,35, * You can verify this subprogram by invoking it directly as:
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,36, * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,37, * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,38, * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname>}
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,39, * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,41,import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,105,"        test = TestConfiguration.singleUseDatabaseDecorator(test, dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,106,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,107,        test = SecurityManagerSetup.noSecurityManager(test);
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,108,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,109,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,110,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,111,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,112,    String oldPropValue = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,114,    protected void setUp() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,115,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,116,        super.setUp();
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,117,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,118,"        // For phoneMe, we won't see DATA_MULTIPLE_JBMS_ON_DB, but instead we"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,119,        // can check that we get DATA_MULTIPLE_JBMS_FORCE_LOCK if we set
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,120,        // derby.database.forceDatabaseLock.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,121,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,123,"            // Can't use the DatabasePropertyTestSetup.singleProperty, since"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,124,"            // that method sets a database property (not a system property),"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,125,            // and the minion is the one creating the database here. An
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,126,            // alternative would be to let minion set it.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,127,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,128,            oldPropValue =
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,129,"                System.getProperty(""derby.database.forceDatabaseLock"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,130,"            System.setProperty(""derby.database.forceDatabaseLock"", ""true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,132,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,133,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,134,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,135,    protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,136,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,137,        if (JDBC.vmSupportsJSR169()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,138,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,139,            if (oldPropValue != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,140,"                System.setProperty(""derby.database.forceDatabaseLock"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,141,                                   oldPropValue);
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,142,            } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,143,                // FIXME: Java 1.5 only: improve code when we move to that
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,144,                // source level.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,145,"                // System.clearProperty(""derby.database.forceDatabaseLock"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,146,"                System.setProperty(""derby.database.forceDatabaseLock"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,147,"                                   ""false"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,148,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,151,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,153,        super.tearDown();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,29,import java.util.Calendar;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,30,import java.util.GregorianCalendar;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,378, private static final int ONE_BILLION = 1000000000;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,379,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,380, private static String TODAY;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,381, private static String TOMORROW;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,382, private static String YEAR_FROM_TOMORROW;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,383, private static String YEAR_FROM_TODAY;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,384, private static String YESTERDAY;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,385, private static String WEEK_FROM_TODAY;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,386,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,403,    Calendar calendar = Calendar.getInstance();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,404,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,407,    /*
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,408,     * Make sure that we are not so close to midnight that TODAY
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,409,     * might be yesterday before we are finished using it.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,410,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,411,    while (calendar.get(Calendar.HOUR) == 23
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,412,      && calendar.get(Calendar.MINUTE) >= 58) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,413,     try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,414,      Thread.sleep((60 - calendar.get(Calendar.SECOND)) * 1000);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,415,     } catch (InterruptedException ie) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,416,      // ignore it
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,417,     }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,418,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,419,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,420,    TODAY = isoFormatDate(calendar);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,421,"    calendar.add(Calendar.DATE, -1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,422,    YESTERDAY = isoFormatDate(calendar);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,423,"    calendar.add(Calendar.DATE, 2);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,424,    TOMORROW = isoFormatDate(calendar);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,425,"    calendar.add(Calendar.YEAR, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,426,    YEAR_FROM_TOMORROW = isoFormatDate(calendar);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,427,"    calendar.add(Calendar.DATE, -1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,428,    YEAR_FROM_TODAY = isoFormatDate(calendar);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,429,"    calendar.add(Calendar.YEAR, -1); // today"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,430,"    calendar.add(Calendar.DATE, 7);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,431,    WEEK_FROM_TODAY = isoFormatDate(calendar);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,432,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,579, private static String isoFormatDate(Calendar cal) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,580,  StringBuffer sb = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,581,  String s = String.valueOf(cal.get(Calendar.YEAR));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,582,  for (int i = s.length(); i < 4; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,583,   sb.append('0');
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,584,  sb.append(s);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,585,  sb.append('-');
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,586,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,587,  s = String.valueOf(cal.get(Calendar.MONTH) + 1);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,588,  for (int i = s.length(); i < 2; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,589,   sb.append('0');
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,590,  sb.append(s);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,591,  sb.append('-');
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,592,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,593,  s = String.valueOf(cal.get(Calendar.DAY_OF_MONTH));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,594,  for (int i = s.length(); i < 2; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,595,   sb.append('0');
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,596,  sb.append(s);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,597,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,598,  return sb.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,599, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TimestampArithTest.java,600,
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,853,    tableNumber = ft.getTableNumber();
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,854,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,855,    {
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,856,"     SanityManager.ASSERT(tableNumber != -1,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,857,"      ""tableNumber not expected to be -1"");"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,858,    }
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,869,    ResultColumn ftRC =
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,870,     ft.getResultColumns().getResultColumn(columnName);
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,872,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,873,    {
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,874,"     SanityManager.ASSERT(ftRC != null,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,875,"      ""Failed to find column '"" + columnName + ""' in the "" +"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,876,"      ""RCL for '"" + ft.getTableName() + ""'."");"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2376,   ** Check type compatability.  We want to make sure that
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2377,   ** the types are assignable in either direction
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2378,   ** and they are comparable.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2381,   if (
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2382,"    !thisExpr.getTypeCompiler().storable(otherTypeId, cf) &&"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2383,"    !otherExpr.getTypeCompiler().storable(thisTypeId, cf))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,324,     * <li>Add a new bad implicit cast to test_06_implicitCasts()</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,498,"     * Test that values are implicitly cast to boolean according to the rules in the SQL Standard,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,499,"     * part 2, section 6.12 (<cast specification>), general rule 20. Other than booleans themselves,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,500,     * the only legal casts are from string types to boolean. The following transformations are applied
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,501,     * to the strings:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,502,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,503,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,504,     * <ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,505,     * <li>Trim whitespace off the string</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,506,"     * <li>Then apply the rules in section 5.3 (<literal>). This means that the trimmed string must be 'TRUE', 'FALSE', or 'UNKNOWN', regardless of case.</li>"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,507,"     * <li>Otherwise, raise an exception.</li>"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,508,     * </ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,509,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,510,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,511,"     * See <a href=""https://issues.apache.org/jira/browse/DERBY-4658"">DERBY-4658</a>."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,514,    public void test_06_implicitCasts() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,518,"        vetGoodImplicitCastFromString( conn, ""'true'"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,519,"        vetGoodImplicitCastFromString( conn, ""'false'"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,520,"        vetGoodImplicitCastFromString( conn, ""'TRUE'"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,521,"        vetGoodImplicitCastFromString( conn, ""'FALSE'"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,522,"        vetGoodImplicitCastFromString( conn, ""' true '"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,523,"        vetGoodImplicitCastFromString( conn, ""' false '"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,524,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,525,"        vetGoodImplicitCastFromString( conn, ""cast (null as char( 10 ) )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,526,"        vetGoodImplicitCastFromString( conn, ""cast (null as clob )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,527,"        vetGoodImplicitCastFromString( conn, ""cast (null as long varchar )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,528,"        vetGoodImplicitCastFromString( conn, ""cast (null as varchar( 10 ) )"", null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,529,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,530,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as char( 10 ) )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,531,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as clob )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,532,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as long varchar)"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,533,"        vetGoodImplicitCastFromString( conn, ""cast ('true' as varchar( 10 ) )"", Boolean.TRUE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,534,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,535,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as char( 10 ) )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,536,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as clob )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,537,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as long varchar)"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,538,"        vetGoodImplicitCastFromString( conn, ""cast ('false' as varchar( 10 ) )"", Boolean.FALSE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,539,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,540,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""'neither'"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,541,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,542,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as char(10))"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,543,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as clob)"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,544,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as long varchar)"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,545,"        expectExecutionError( conn, BAD_CAST, makeImplicitCast( ""cast ('neither' as varchar(10))"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,546,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,549,        // char type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,551,        // clob type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,557,        // long varchar type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,563,        // varchar type ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,567,"    private void vetGoodImplicitCastFromString( Connection conn, String text, Boolean booleanValue ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,568,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,569,        String expectedValue = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,570,        if ( booleanValue != null ) { expectedValue = booleanValue.toString(); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,571,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,572,        assertResults
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,573,            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,574,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,575,"             makeImplicitCast( text ),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,576,             new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,577,             {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,578,"                 { expectedValue },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,579,"             },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,580,             false
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,581,             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,582,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,583,    private String makeImplicitCast( String text )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,584,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,585,        return
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,586,"            ""select isindex from sys.sysconglomerates where conglomeratename = 'foo'\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,587,"            ""union\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,588,"            ""values ( "" + text + "" )\n"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,589,    }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1036,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1037," // Check to see if it's a version of db2jcc.jar and if so, report the version number."
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1038," if (filename.indexOf(""db2jcc"") >= 0)"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1039, {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1040,     Class c = null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1041,     Method m = null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1042,     Object o = null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1043,     Integer build = null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1044,     Integer major = null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1045,            Integer minor = null;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1046,     try
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1047,     {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1048,                try
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1049,  {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1050,"      c = Class.forName(""com.ibm.db2.jcc.DB2Driver"");"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1051,"      m = c.getMethod(""getJCCBuildNumber"", null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1052,      o = c.newInstance();
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1053,"      build = (Integer)m.invoke(o,null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1054,  } catch (ClassNotFoundException cnfe) {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1055,"      c = Class.forName(""com.ibm.db2.jcc.DB2Version"");"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1056,"      m = c.getMethod(""getBuildNumber"", null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1057,      o = c.newInstance();
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1058,"      build = (Integer)m.invoke(o,null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1059,         }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1060,"  m = c.getMethod(""getMajorVersion"", null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1061,"  major = (Integer)m.invoke(o,null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1062,"  m = c.getMethod(""getMinorVersion"", null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1063,"  minor = (Integer)m.invoke(o,null);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1064,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1065,  ProductVersionHolder jccVersion = ProductVersionHolder.getProductVersionHolder(
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1066,"   ""IBM Corp."","
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1067,"   ""DB2 Java Common Client"","
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1068,"   ""DRDA:jcc"","
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1069,"   major.intValue(),"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1070,"   minor.intValue(),"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1071,"   0,"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1072,"   0,"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1073,"   build.toString(),"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1074,   Boolean.FALSE);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1075,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1076,  ZipInfoProperties zip = new ZipInfoProperties(jccVersion);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1077,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1078,                String loc = getFileWhichLoadedClass(c);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1079,"                // For db2jcc.jar, report the actual file from which DB2Driver"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1080,"                // was loaded, if we can determine it. For db2jcc_license_c,"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1081,"                // report the filename from the classpath, and the version"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1082,                // info from the DB2Driver that we loaded. This is slightly
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1083,"                // misleading, since db2jcc_license_c.jar doesn't really have"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1084,"                // a ""version"", but the two jars are usually linked."
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1085,"                if (loc != null && filename.indexOf(""license_c"") < 0)"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1086,                    zip.setLocation(loc);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1087,                else
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1088,"        zip.setLocation(new File(filename).getCanonicalPath().replace('/', File.separatorChar));"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1089,  return zip;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1090,            } catch (Exception e) { return null; }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1091, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1092,
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,569,  return true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,380,        // Bug DERBY-462 should return false.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,381,        assertTrue(dmd.supportsConvert());
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,73,  *
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,76, void rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,261,  {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,262,   /* Has the activation class changed or has the activation been
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,263,    * invalidated? */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,264,   if (gc != ps.getActivationClass() || !ac.isValid())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,265,   {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,267,                GeneratedClass newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,268,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,269,    if (gc != ps.getActivationClass()) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,270,     // ensure the statement is valid by rePreparing it.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,271,     // DERBY-3260: If someone else reprepares the statement at
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,272,"     // the same time as we do, there's a window between the"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,273,     // calls to rePrepare() and getActivationClass() when the
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,274,"     // activation class can be set to null, leading to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,275,"     // NullPointerException being thrown later. Therefore,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,276,     // synchronize on ps to close the window.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,277,     synchronized (ps) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,278,      ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,279,      newGC = ps.getActivationClass();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,280,     }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,281,    } else {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,282,"     // Reuse the generated class, we just want a new activation"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,283,     // since the old is no longer valid.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,284,     newGC = gc;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,286,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,287,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,288,    /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,289,"    ** If we get here, it means the Activation has been invalidated"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,290,    ** or the PreparedStatement has been recompiled.  Get a new
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,291,    ** Activation and check whether the parameters are compatible.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,292,"    ** If so, transfer the parameters from the old Activation to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,293,"    ** the new one, and make that the current Activation.  If not,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,294,    ** throw an exception.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,295,    */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,296,    BaseActivation  newAC = (BaseActivation) newGC.newInstance(lcc);
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,297,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,298,    DataTypeDescriptor[] newParamTypes = ps.getParameterTypes();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,299,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,300,    /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,301,    ** Link the new activation to the prepared statement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,302,    */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,303,"    newAC.setupActivation(ps, ac.getScrollable());"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,304,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,305,"    newAC.setParameters(ac.getParameterValueSet(), paramTypes);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,306,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,307,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,308,    /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,309,    ** IMPORTANT
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,310,    **
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,311,    ** Copy any essential state from the old activation
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,312,    ** to the new activation. This must match the state
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,313,    ** setup in EmbedStatement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,314,"    ** singleExecution, cursorName, holdability, maxRows."
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,315,    */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,316,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,317,    if (ac.isSingleExecution())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,318,     newAC.setSingleExecution();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,319,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,320,    newAC.setCursorName(ac.getCursorName());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,321,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,322,    newAC.setResultSetHoldability(ac.getResultSetHoldability());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,323,    if (ac.getAutoGeneratedKeysResultsetMode()) //Need to do copy only if auto generated mode is on
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,324,"     newAC.setAutoGeneratedKeysResultsetInfo(ac.getAutoGeneratedKeysColumnIndexes(),"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,325,     ac.getAutoGeneratedKeysColumnNames());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,326,    newAC.setMaxRows(ac.getMaxRows());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,327,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,328,    // break the link with the prepared statement
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,329,"    ac.setupActivation(null, false);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,330,    ac.close();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,331,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,332,    /* Remember the new class information */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,333,    ac = newAC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,334,    gc = newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,335,    paramTypes = newParamTypes;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,226, public void rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,230,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,231,   if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,232,"    SanityManager.ASSERT(ps == this, ""ps != this"");"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,250,    rePrepare(lcc);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,175,   for (;;) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,176,
java/engine/org/apache/derby/impl/sql/GenericStatement.java,177,    if (foundInCache) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,178,     if (preparedStmt.referencesSessionSchema()) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,192,    if (!preparedStmt.compilingStatement) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,193,     break;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,194,    }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,195,
java/engine/org/apache/derby/impl/sql/GenericStatement.java,196,    try {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,197,     preparedStmt.wait();
java/engine/org/apache/derby/impl/sql/GenericStatement.java,198,    } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,199,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,200,    }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,545,    preparedStmt.notifyAll();
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,66, }
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,82, public void readExternal(ObjectInput in) throws IOException
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,84,  int rcLength = in.readInt();
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,85,  referencedColumns = new int[rcLength];
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,86,  for (int i = 0; i < rcLength; i++)
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,87,  {
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,88,   referencedColumns[i] = in.readInt();
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,89,  }
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,90, }
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,97, public void writeExternal(ObjectOutput out) throws IOException
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,98, {
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,99,  out.writeInt(referencedColumns.length);
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,100,  for (int i = 0; i < referencedColumns.length; i++)
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,101,  {
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,102,   out.writeInt(referencedColumns[i]);
java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java,103,  }
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,184,   rcd = (refCols != null) ? new
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,185,    ReferencedColumnsDescriptorImpl(refCols) : null;
java/engine/org/apache/derby/impl/sql/catalog/SYSTRIGGERSRowFactory.java,380,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,339, ** BIND OLD/NEW TRANSITION TABLES/VARIABLES
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,357, ** 4) reparse the new action text
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,367, ** easier to just generate the sql and rebind.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,381,   /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,382,"   ** For a row trigger, we find all column references.  If"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,383,   ** they are referencing NEW or OLD we turn them into
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,384,   ** getTriggerExecutionContext().getOldRow().getInt('C');
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,385,   */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,437,    checkInvalidTriggerReference(tableName.getTableName());
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,442,"    newText.append(genColumnReferenceSQL(dd, colName, tableName.getTableName(), tableName.getTableName().equals(oldTableName)));"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,631,  boolean   isOldTable
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,675,            methodCall.append(colDesc.getPosition());
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,723,            methodCall.append(colDesc.getPosition());
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,719,"  FormatableBitSet columnMap = DeleteNode.getDeleteReadMap(baseTable, conglomVector, relevantTriggers, needsDeferredProcessing );"
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,720,
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,986,    //Does this trigger have REFERENCING clause defined on it
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,941,"   * 6) if there are any UPDATE triggers, then do one of the following"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,942,"   *     a)If all of the triggers have MISSING referencing clause, then that"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,943,   *      means that the trigger actions do not have access to before and
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,944,"   *      after values. In that case, there is no need to blanketly decide"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,945,   *      to include all the columns in the read map just because there are
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,946,   *      triggers defined on the table.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,947,"   *     b)Since one/more triggers have REFERENCING clause on them, get all"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,948,   *      the columns because we don't know what the user will ultimately
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,949,   *      reference.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1042,"   ** If we have any UPDATE triggers, then do one of the following"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1043,"   ** 1)If all of the triggers have MISSING referencing clause, then that"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1044,   ** means that the trigger actions do not have access to before and
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1045,"   ** after values. In that case, there is no need to blanketly decide to"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1046,   ** include all the columns in the read map just because there are
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1047,   ** triggers defined on the table.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1048,"   ** 2)Since one/more triggers have REFERENCING clause on them, get all"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1049,   ** the columns because we don't know what the user will ultimately reference.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1054,  {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1056,
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1057,   boolean needToIncludeAllColumns = false;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1062,    //Does this trigger have REFERENCING clause defined on it
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1063,    if (!trd.getReferencingNew() && !trd.getReferencingOld())
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1064,     continue;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1065,    else
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1066,    {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1067,     needToIncludeAllColumns = true;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1068,     break;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1069,    }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1070,   }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1072,   if (needToIncludeAllColumns) {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1073,    for (int i = 1; i <= columnCount; i++)
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1074,    {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1075,     columnMap.set(i);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1076,    }
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,987,"    referencedCols, originalActionText,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,504,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,22, boolean isDerby1482Fixed = false;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,219,  * 15)test5UpdateBeforeTriggerNoReferencingClause
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,233,        // use small pageCacheSize so we don't run out of memory on the insert.
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,302,  * columns into another table.
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,305, public void test1InsertAfterTrigger() throws SQLException{
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,306,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,307,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,308,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,315,     runtest2InsertTriggerTest();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,326,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,327,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,328,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,334,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test1_InsertAfterTrigger_update_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,339,     runtest2InsertTriggerTest();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,349,"     System.out.println(""Test1 : Inside the procedure called by the INSERT AFTER TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,363,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,383,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,391,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test1_DeleteAfterTrigger_update_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,407,"     System.out.println(""Test1 : Inside the procedure called by the DELETE AFTER TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,434,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,435,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,436,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,454,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,455,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,456,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,462,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test1_UpdateAfterTrigger_update_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,477,"     System.out.println(""Test1 : Inside the procedure called by the UPDATE AFTER TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,492,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,493,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,501,     runtest2InsertTriggerTest();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,512,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,513,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,514,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,520,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test1_InsertBeforeTrigger_select_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,524,  runtest2InsertTriggerTest();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,534,"     System.out.println(""Test1 : Inside the procedure called by the INSERT BEFORE TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,549,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,569,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,578,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test1_DeleteBeforeTrigger_select_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,593,"     System.out.println(""Test1 : Inside the procedure called by the DELETE BEFORE TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,622,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,623,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,624,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,643,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,644,   return;
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,645,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,651,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test1_UpdateBeforeTrigger_select_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,666,"     System.out.println(""Test1 : Inside the procedure called by the UPDATE BEFORE TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,682,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,713,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,759,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,789,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,821,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,852,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,881,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,911,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,952,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,973,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,982,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test3_UpdateAfterTrigger_update_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,998,"     System.out.println(""Test3 : Inside the procedure called by the UPDATE AFTER TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1014,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1035,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1044,"          ""'org.apache.derbyTesting.functionTests.tests.lang.derby1482TriggerTests.proc_test3_UpdateBeforeTrigger_select_table'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1059,"     System.out.println(""Test3 : Inside the procedure called by the UPDATE BEFORE TRIGGER action"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1083,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1105,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1109,  * and is also the cause of the update trigger to fire.
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1113,  if (isDerby1482Fixed == false)
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,1146,  if (isDerby1482Fixed == false)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,890,                    columnNumberBeforeFlattening);
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,328,"    public ResultColumn getResultColumn(int tableNumber, int columnNumber)"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,350,"                            // Found matching (t,c) within this top resultColumn"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,351,                            resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,352,                            return resultColumn;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,353,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,21, final int lobsize = 300000*1024;
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,463,                byte wakeupReason = waitingLock.waitForGrant(actualTimeout);
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,464,
java/engine/org/apache/derby/impl/services/locks/LockSet.java,276,                byte wakeupReason = waitingLock.waitForGrant(actualTimeout);
java/engine/org/apache/derby/impl/services/locks/LockSet.java,277,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,625,     * @param e exception related to the cause
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,629,"    public static void fail(String msg, Exception e)"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,633,        ae.initCause(e);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,84,        // first thread.
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,384,"                    throw new EOFException(""Reached end-of-stream "" +"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,385,"                        ""prematurely at "" + sz + "", expected "" + length);"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,394,"        // If we copied until EOF, see if we have a Derby end-of-stream marker."
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,395,        if (length == Long.MAX_VALUE) {
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,396,            long curLength = getLength();
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,498,            // Specify LONG.MAX_VALUE to copy data until EOF.
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,499,"            this.bytes.copyData(clob.getRawByteStream(), Long.MAX_VALUE);"
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,518,            long byteLength = UTF8Util.skipFully(
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,519,"                    new BufferedInputStream(clob.getRawByteStream()),"
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,520,                    charLength);
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,521,            this.bytes.copyData(
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,522,"                    new BufferedInputStream(clob.getRawByteStream()),"
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,523,                    byteLength);
java/engine/org/apache/derby/impl/jdbc/TemporaryClob.java,524,            this.cachedCharLength = charLength;
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,73,  * @return the re-prepared statement (may be a new PreparedStatement)
java/engine/org/apache/derby/iapi/sql/PreparedStatement.java,76, PreparedStatement rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,261,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,262,  /* Has the activation class changed or has the activation been
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,263,   * invalidated? */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,264,  if (gc != ps.getActivationClass() || !ac.isValid())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,266,         GeneratedClass newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,267,         ExecPreparedStatement newPS;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,268,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,269,   if (gc != ps.getActivationClass()) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,270,    // ensure the statement is valid by rePreparing it.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,271,    // DERBY-3260: If someone else reprepares the statement at
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,272,"    // the same time as we do, there's a window between the"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,273,    // calls to rePrepare() and getActivationClass() when the
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,274,"    // activation class can be set to null, leading to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,275,"    // NullPointerException being thrown later. Therefore,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,276,    // synchronize on ps to close the window.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,277,    synchronized (ps) {
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,278,     newPS = (ExecPreparedStatement) ps.rePrepare(getLanguageConnectionContext());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,279,     newGC = newPS.getActivationClass();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,280,    }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,281,   }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,282,   else
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,284,    newGC = gc;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,285,    newPS = ps;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,286,   }
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,288,   /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,289,"   ** If we get here, it means the Activation has been invalidated"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,290,   ** or the PreparedStatement has been recompiled.  Get a new
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,291,   ** Activation and check whether the parameters are compatible.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,292,"   ** If so, transfer the parameters from the old Activation to"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,293,"   ** the new one, and make that the current Activation.  If not,"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,294,   ** throw an exception.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,295,   */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,296,   BaseActivation newAC = (BaseActivation) newGC.newInstance(lcc);
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,297,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,298,   DataTypeDescriptor[] newParamTypes = newPS.getParameterTypes();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,299,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,300,   /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,301,   ** Link the new activation to the prepared statement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,302,   */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,303,"   newAC.setupActivation(newPS, ac.getScrollable());"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,304,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,305,"   newAC.setParameters(ac.getParameterValueSet(), paramTypes);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,306,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,307,   /*
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,308,   ** IMPORTANT
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,309,   **
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,310,   ** Copy any essential state from the old activation
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,311,   ** to the new activation. This must match the state
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,312,   ** setup in EmbedStatement.
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,313,"   ** singleExecution, cursorName, holdability, maxRows."
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,314,   */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,315,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,316,   if (ac.isSingleExecution())
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,317,    newAC.setSingleExecution();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,318,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,319,   newAC.setCursorName(ac.getCursorName());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,320,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,321,   newAC.setResultSetHoldability(ac.getResultSetHoldability());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,322,   if (ac.getAutoGeneratedKeysResultsetMode()) //Need to do copy only if auto generated mode is on
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,323,"    newAC.setAutoGeneratedKeysResultsetInfo(ac.getAutoGeneratedKeysColumnIndexes(),"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,324,      ac.getAutoGeneratedKeysColumnNames());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,325,   newAC.setMaxRows(ac.getMaxRows());
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,326,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,327,   // break the link with the prepared statement
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,328,"   ac.setupActivation(null, false);"
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,329,   ac.close();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,330,
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,331,   /* Remember the new class information */
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,332,   ac = newAC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,333,   gc = newGC;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,334,   ps = newPS;
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,335,   paramTypes = newParamTypes;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,226, public PreparedStatement rePrepare(LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,230,   return ps;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,231,  }
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,233,  return this;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,250,    PreparedStatement ps = rePrepare(lcc);
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,251,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,252,    if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,253,"     SanityManager.ASSERT(ps == this, ""ps != this"");"
java/engine/org/apache/derby/impl/sql/GenericStatement.java,174,   for (;;)
java/engine/org/apache/derby/impl/sql/GenericStatement.java,175,   {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,176,    if (preparedStmt.compilingStatement)
java/engine/org/apache/derby/impl/sql/GenericStatement.java,177,    {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,178,     preparedStmt = new GenericPreparedStatement(this);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,179,     break;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,180,    }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,182,    if (foundInCache)
java/engine/org/apache/derby/impl/sql/GenericStatement.java,183,    {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,184,     if (preparedStmt.referencesSessionSchema())
java/engine/org/apache/derby/impl/sql/GenericStatement.java,185,     {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,199,    break;
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java,57,    public static void main()
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java,56,    public static void main()
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,275,   * F  T   X  X   1  (this > other)
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,276,   * T  F   X  X   -1 (this < other)
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,286,    return 1;
java/engine/org/apache/derby/iapi/types/SQLBoolean.java,287,   if (!otherNull)  // thisNull must be true
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,328,"     * cf. DERBY-4695, we can remove this parameter."
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,355,                        if (ft.getTableNumber() == tableNumber &&
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,356,                                rc.getColumnPosition() == columnNumber) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,357,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,358,"                            // Found matching (t,c) within this top"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,359,                            // resultColumn. Now do sanity check that column
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,360,                            // name is correct. Remove when DERBY-4695 is
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,361,                            // fixed.
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,362,                            if (columnName.equals(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,363,                                        vcn.getSourceColumn().getName())) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,364,                                resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,365,                                return resultColumn;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,366,                            } else {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,367,                                if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,368,                                    SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,369,"                                        false,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,370,"                                        ""wrong (tn,cn) for column "" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,371,                                        columnName +
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,372,"                                        "" found: this pair points to "" +"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,373,                                        vcn.getSourceColumn().getName());
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,375,"                                // Fall back on column name based lookup,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,376,                                // cf. DERBY-4679. See ColumnReference#
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,377,                                // remapColumnReferencesToExpressions
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,378,                                return null;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,392,                            resultColumn.setReferenced();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,393,                            return resultColumn;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1893,        ResultSet rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1894,            s.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1895,"                ""select distinct t1.ITEM_ID, t1.state_id, t1.JZ_DISCRIMINATOR from "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1896,"                ""((((((select * from ABSTRACT_INSTANCE z1 where z1.JZ_DISCRIMINATOR = 238) t1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1897,"                ""      left outer join LAB_RESOURCE_OPERATINGSYSTEM j1 on (t1.ITEM_ID = j1.JZ_PARENT_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1898,"                ""     left outer join ABSTRACT_INSTANCE t2 on (j1.ITEM_ID = t2.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1899,"                ""    left outer join OPERATING_SYSTEM_SOFTWARE_INSTALL j2 on (t2.ITEM_ID = j2.JZ_PARENT_ID))"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1900,"                ""   left outer join ABSTRACT_INSTANCE t3 on (j2.ITEM_ID = t3.ITEM_ID) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1901,"                ""  inner join FAMILY t5 on (t2.FAMILY_ITEM_ID = t5.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1902,"                "" inner join FAMILY t7 on (t1.FAMILY_ITEM_ID = t7.ITEM_ID)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1903,"                ""where (t3.FAMILY_ITEM_ID IN('_5VetVWTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1904,"                ""      (t5.ROOT_ITEM_ID = '_5ZDlwWTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1905,"                ""      (t7.ROOT_ITEM_ID ='_5nN9mmTeEd-Q8aOqWJPEIQ') and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/JoinTest.java,1906,"                ""      (t1.VISIBILITY = 0))"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,624,        if (printWriter != logWriter && traceDirectory != null)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,649,        if (printWriter != logWriter && traceDirectory != null)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,174,        suite.addTest(new J2EEDataSourceTest(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,175,"                ""testClientMessageTextConnectionAttribute""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2641,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2642,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2643,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2653,        ((ClientConnectionPoolDataSource) cpds).getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2658,        ((ClientConnectionPoolDataSource) cpds).getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2667,        ((ClientXADataSource) xads).getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2673,        ((ClientXADataSource) xads).getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2675,        assertTraceFilesExist();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2683,    private static void assertTraceFilesExist()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2687,                for (int i=3 ; i < 6 ; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2688,                {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2689,"                    String traceFileName = ""trace"" + (i+1) + "".out"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2690,                    File traceFile = new File(traceFileName);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2691,                    if (i == 4)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2695,                        assertTrue(traceFile.exists());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2716,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2717,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2718,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2720,        Connection conn;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2729,        conn = cpds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2730,"        assertMessageText(conn,""false"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2731,        conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2734,        conn = cpds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2735,"        assertMessageText(conn,""true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2737,        conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2746,        conn = xads.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2747,"        assertMessageText(conn,""false"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2748,        conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2751,        conn = xads.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2752,"        assertMessageText(conn,""true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2753,        conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2816,        ds.getConnection();
java/engine/org/apache/derby/iapi/types/SQLChar.java,3023,        this.localeFinder = localeFinder;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,363,"                                             dataDirectory + "" "" + readOnlyMsg,"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,365,                                             (Object) this.getClass().getClassLoader()
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2147,
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2148,
java/client/org/apache/derby/jdbc/ClientDataSource.java,28,import org.apache.derby.client.am.ClientMessageId;
java/client/org/apache/derby/jdbc/ClientDataSource.java,31,import org.apache.derby.client.net.NetConnection;
java/client/org/apache/derby/jdbc/ClientDataSource.java,33,import org.apache.derby.shared.common.error.ExceptionUtil;
java/client/org/apache/derby/jdbc/ClientDataSource.java,165,"        return getConnection(getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientDataSource.java,188,"            updateDataSourceValues(tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientDataSource.java,189,            return ClientDriver.getFactory().newNetConnection
java/client/org/apache/derby/jdbc/ClientDataSource.java,190,"                    ((NetLogWriter) dncLogWriter, user,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,191,"                    password, this, -1, false);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,25,import javax.sql.DataSource;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,29,import org.apache.derby.client.ClientXAConnection;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,65,"        return getXAConnection(getUser(), getPassword());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,179,        //DISABLED until DERBY-4067 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,180,        //suite.addTest(new J2EEDataSourceTest(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,181,"        //        ""testClientMessageTextConnectionAttribute""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2892,                    // Skip trace 3 and 5 until DERBY-2468/DERBY-4067 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2893,                    if (i == 3 || i == 5)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2894,                        continue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2895,                    else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2896,                    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2897,"                        assertTrue(""Doesn't exist"", traceFile.exists());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2898,"                        assertTrue(""Delete failed"", traceFile.delete());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2899,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2916,     * NOTE: DISABLED until DERBY-4067 is fixed.
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,378,"                                             dataDirectory + "" "" + readOnlyMsg"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,379,"                                             +""\nLoaded from "" + jarCPath + ""\n"" +jvmVersion"
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,175,      modes[i] = ((Integer) (((Vector) parameters[2]).elementAt(i))).intValue();
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,176,
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,177,      if ( (!types[ i ].isUserDefinedType()) && TypeId.getBuiltInTypeId(types[i].getJDBCTypeId()).isLongConcatableTypeId())
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,178,"       throw StandardException.newException(SQLState.LANG_LONG_DATA_TYPE_NOT_ALLOWED, names[i]);"
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,179,
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,180,     }
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,342,                    // prohibit LOB columns/types
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,343,                    if (signature[parm] != null) {
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,344,                        String type = signature[parm].getSQLType().getTypeId().getSQLTypeName();
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,345,"                        if (type.equals(""BLOB"") || type.equals(""CLOB"") || type.equals(""NCLOB"")) {"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,346,                            throw StandardException.newException(SQLState.LOB_AS_METHOD_ARGUMENT_OR_RECEIVER);
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,347,                        }
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,348,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,546,"                if (""42962"".equals(sqle.getSQLState()))"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,590,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,593,"                                // now get the INOUT, OUT parameters according to their registered type."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,616,}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java,613,
java/client/org/apache/derby/client/net/NetCursor.java,1086,            netResultSet_.markLOBAsPublished(column);
java/client/org/apache/derby/client/net/NetCursor.java,1128,            netResultSet_.markLOBAsPublished(column);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4182,    writer.endDdm();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4183,    writer.endDdmAndDss();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4198,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4241,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6900,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,7925,
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8627,
java/drda/org/apache/derby/impl/drda/DRDAResultSet.java,299,
java/drda/org/apache/derby/impl/drda/DRDAResultSet.java,300,  if (FdocaConstants.isNullable(getRsDRDAType(colnum)))
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,56,    /** DRDA Type of column */
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,57,    int ndrdaType;
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,215,    protected boolean isEmptyStream() throws SQLException{
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,216,            return (rs.getLength(columnNumber) == 0);
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,217,
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,218,        }
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,238,     is = this.rs.getBinaryStream(this.columnNumber);
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,239,     if (is == null)
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,240,              return;
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,247,         r = this.rs.getCharacterStream(this.columnNumber);
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,264,     else
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,265,  {
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,266,      if (SanityManager.DEBUG)
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,267,   {
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,268,"       SanityManager.THROWASSERT(""NDRDAType: "" + ndrdaType +"
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,269,"            "" not valid EXTDTA object type"");"
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,270,   }
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,271,  }
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,286,"     * EngineResultSet, so that it can be determined before the stream"
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,294,        return this.rs.isNull(columnNumber);
java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java,295,
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,567,  /**
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,568,      * JDBC 2.0
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,569,      *
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,570,      * Get a BLOB OUT parameter.
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,571,      *
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,572,"      * @param i the first parameter is 1, the second is 2, ..."
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,573,      * @return an object representing a BLOB
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,574,      * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,575,      */
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,576,     public Blob getBlob (int i) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,577,   throw Util.notImplemented();
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,580,     /**
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,581,      * JDBC 2.0
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,582,      *
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,583,      * Get a CLOB OUT parameter.
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,584,      *
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,585,"      * @param i the first parameter is 1, the second is 2, ..."
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,586,      * @return an object representing a CLOB
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,587,      * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,588,      */
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,589,     public Clob getClob (int i) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,590,   throw Util.notImplemented();
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,179,                        boolean isOutputParameter =
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,180,                            ( (currentMode == JDBC30Translation.PARAMETER_MODE_OUT) || (currentMode == JDBC30Translation.PARAMETER_MODE_IN_OUT) );
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,181,
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,183,                        // We used to forbid LOBs as method parameters. DERBY-4066 lifted this
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,184,                        // restriction except for the output parameters of
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,185,"                        // procedures. In that case, we are not able to send the"
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,186,"                        // output LOB across the network to a client today. In addition, we still don't support XML values as parameters."
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,192,                            if
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,193,                                (
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,194,                                 ( TypeId.getBuiltInTypeId(types[i].getJDBCTypeId()).isLongConcatableTypeId() && isOutputParameter )
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,195,                                 ||
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,196,                                 (TypeId.getBuiltInTypeId(types[i].getJDBCTypeId()).isXMLTypeId())
java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java,197,                                 )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,562,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,668,        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,670,"             BAD_TYPE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,682,        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,684,"             BAD_TYPE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,729,        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,731,"             BAD_TYPE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,743,        expectCompilationError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,745,"             BAD_TYPE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3697,"            assertEquals(""0x4,0x3"",showFirstTwo(val));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3699,"            assertEquals(""0x9,0xfe"",showFirstTwo(val));"
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,572,"     * @param i the first parameter is 1, the second is 2, ..."
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java,594,"     * @param i the first parameter is 1, the second is 2, ..."
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,884,                if (pos - 1 > length())
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,885,                    throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,886,"                            SQLState.BLOB_POSITION_TOO_LARGE, new Long(pos));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,887,                if (pos < 1)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,888,                    throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,889,"                        SQLState.BLOB_BAD_POSITION, new Long(pos));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,890,"                control.write (bytes, offset, len, pos - 1);"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,891,            }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,892,            else {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,893,                control = new LOBStreamControl (getEmbedConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,894,"                control.copyData (myStream, length());"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,901,        }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,902,        catch (IOException e) {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,903,            throw Util.setStreamFailure (e);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,904,        }
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,905,        catch (StandardException se) {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,906,            throw Util.generateCsSQLException (se);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java,166,            suite.addTest(BlobSetBytesBoundaryTest.suite());
java/client/org/apache/derby/client/am/Blob.java,472,        if (len + offset > bytes.length) {
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,901,        if (len + offset > bytes.length) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobSetBytesBoundaryTest.java,93,
java/client/org/apache/derby/client/net/EncodedInputStream.java,215,    protected void finalize() throws IOException {
java/client/org/apache/derby/client/net/EncodedInputStream.java,216,  close();
java/client/org/apache/derby/client/net/EncodedInputStream.java,217,    }
java/client/org/apache/derby/client/net/EncodedInputStream.java,218,
java/client/org/apache/derby/client/net/EncodedInputStream.java,219,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,260, /**
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,261,"  * This method determines if (1) the query is a LOJ, and (2) if the LOJ is a candidate for"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,262,"  * reordering (i.e., linearization).  The condition for LOJ linearization is:"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,263,"  * 1. only LOJ in the fromList, i.e., no INNER, no FULL JOINs, no ROJs"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,264,"  * 2. ON clause must be equality join between left and right operands and in CNF (i.e., AND is allowed)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,265,  */
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,290,  // This is a very simple LOJ of base tables. Do nothing.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,295,"  // Recursively check if we can reordering LOJ, and build the table"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,303,  {// left operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,318,  {// right operand must be either a base table or another LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,322,  // It is much easier to do LOJ reordering if there is no ROJ.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,332,  // Build the data structure for testing/doing LOJ reordering.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,333,  // Fill in the table references on row-preserving and null-producing sides.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,334,  // It may be possible that either operand is a complex view.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,335,  JBitSet    NPReferencedTableMap; // Null-producing
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,336,  JBitSet    RPReferencedTableMap; // Row-preserving
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,346,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,347,"  // Check if the predicate is equality predicate in CNF (i.e., AND only)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,348,  // and left/right column references must come from either operand.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,349,"  // That is, we don't allow:"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,350,  // 1. A=A
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,351,  // 2. 1=1
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,352,  // 3. B=C where both B and C are either from left or right operand.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,353,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,354,"  // we probably need to make the joinClause ""left-deep"" so that we can"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,355,  // walk it easier.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,356,  BinaryRelationalOperatorNode equals;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,357,  ValueNode leftCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,358,  ValueNode rightCol;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,359,  AndNode   and;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,360,  ValueNode left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,361,  ValueNode vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,362,  while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,364,   and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,365,   left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,367,"   // Make sure that this is an equijoin of the form ""C = D"" where C"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,368,   // and D references tables from both left and right operands.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,369,   if (left instanceof RelationalOperator &&
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,370,    ((ValueNode)left).isBinaryEqualsOperatorNode())
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,371,   {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,372,    equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,373,    leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,374,    rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,376,    if (!( leftCol instanceof ColumnReference && rightCol instanceof ColumnReference))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,377,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,379,    boolean refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,380,    boolean leftOperandCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,382,    if (RPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,383,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,384,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,385,     leftOperandCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,386,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,387,    else if (NPReferencedTableMap.get(((ColumnReference)leftCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,388,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,389,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,390,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,392,    if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,393,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,395,    refCheck = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,396,    if (leftOperandCheck == false && RPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,397,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,398,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,399,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,400,    else if (leftOperandCheck == true && NPReferencedTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,401,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,402,     refCheck = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,403,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,405,    if (refCheck == false)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,406,     return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,407,   }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,408,   else return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,410,   vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,411,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,413,  // Check if the logical right resultset is a composite inner and as such
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,414,  // that this current LOJ can be pushed through it.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,415,  boolean       push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,416,  // logical right operand is another LOJ... so we may be able to push the
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,417,  // join
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,418,  if (logicalRightResultSet instanceof HalfOuterJoinNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,419,  {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,420,   // get the Null-producing operand of the child
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,421,   JBitSet  logicalNPRefTableMap = ((HalfOuterJoinNode)logicalRightResultSet).LOJgetNPReferencedTables(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,422,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,423,   // does the current LOJ join predicate reference
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,424,"   // logicalNPRefTableMap?  If not, we can push the current"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,425,   // join.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,426,   vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,427,   push = true;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,428,   while (vn instanceof AndNode)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,429,   {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,430,    and = (AndNode) vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,431,    left = and.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,432,    equals = (BinaryRelationalOperatorNode) left;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,433,    leftCol = equals.getLeftOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,434,    rightCol = equals.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,435,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,436,    if (logicalNPRefTableMap.get(((ColumnReference)leftCol).getTableNumber()) ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,437,     logicalNPRefTableMap.get(((ColumnReference)rightCol).getTableNumber()))
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,438,    {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,439,     push = false;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,440,     break;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,441,    }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,443,    vn = and.getRightOperand();
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,444,   }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,445,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,447,  // Push the current LOJ into the next level
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,448,  if (push)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,449,  {
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,450,"   // For safety, check the JoinNode data members: they should null or"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,451,   // empty list before we proceed.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,452,   if (super.subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,453,    ((JoinNode)logicalRightResultSet).subqueryList.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,454,    super.joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,455,    ((JoinNode)logicalRightResultSet).joinPredicates.size() != 0 ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,456,    super.usingClause != null ||
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,457,    ((JoinNode)logicalRightResultSet).usingClause != null)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,458,    return LOJ_bindResultColumns(anyChange); //  get out of here
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,459,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,460,   anyChange = true; // we are reordering the LOJs.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,461,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,462,   ResultSetNode tmp = logicalLeftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,463,"   ResultSetNode LChild, RChild;"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,464,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,465,   //            this LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,466,   //            /      \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,467,   //  logicalLeftRS   LogicalRightRS
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,468,   //                   /     \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,469,   //                LChild  RChild
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,470,   // becomes
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,471,   //
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,472,   //               this LOJ
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,473,   //               /      \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,474,   //     LogicalRightRS   RChild
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,475,   //           /     \
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,476,   // logicalLeftRS   LChild  <<<  we need to be careful about this order
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,477,"   //                              as the ""LogicalRightRS may be a ROJ"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,478,   //
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,479,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,480,   // handle the lower level LOJ node
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,481,   LChild = ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,482,   RChild = ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,483,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,484,   ((HalfOuterJoinNode)logicalRightResultSet).rightResultSet = LChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,485,   ((HalfOuterJoinNode)logicalRightResultSet).leftResultSet  = tmp;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,486,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,487,   // switch the ON clause
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,488,   vn = joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,489,   joinClause   = ((HalfOuterJoinNode)logicalRightResultSet).joinClause;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,490,   ((HalfOuterJoinNode)logicalRightResultSet).joinClause = vn;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,491,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,492,   // No need to switch HalfOuterJoinNode data members for now because
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,493,   // we are handling only LOJ.
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,494,   // boolean local_rightOuterJoin = rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,495,   // boolean local_transformed    = transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,496,   // rightOuterJoin = ((HalfOuterJoinNode)logicalRightResultSet).rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,497,   // transformed    = ((HalfOuterJoinNode)logicalRightResultSet).transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,498,   // ((HalfOuterJoinNode)logicalRightResultSet).rightOuterJoin = local_rightOuterJoin;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,499,   // ((HalfOuterJoinNode)logicalRightResultSet).transformed    = local_transformed;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,500,
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,501,   FromList localFromList = (FromList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,502,"                   C_NodeTypes.FROM_LIST,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,503,"                   getNodeFactory().doJoinOrderOptimization(),"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,504,                   getContextManager());
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,506,   // switch LOJ nodes: by handling the current LOJ node
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,507,   leftResultSet  = logicalRightResultSet;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,508,   rightResultSet = RChild;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,510,   // rebuild the result columns and re-bind column references
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,511,   ((HalfOuterJoinNode)leftResultSet).resultColumns = null;
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,512,   ((JoinNode)leftResultSet).bindResultColumns(localFromList); // localFromList is empty
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,514,"   // left operand must be another LOJ, try again until a fixpoint"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,515,   boolean localChange = ((HalfOuterJoinNode)leftResultSet).LOJ_reorderable(numTables);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,517,   // rebuild the result columns and re-bind column references for 'this'
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,518,   return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,519,  }
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,521,  return LOJ_bindResultColumns(anyChange);
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,522, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,1,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,55,        suite.addTest(TestConfiguration.defaultSuite(OuterJoinTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,2177,    public void TestdDerby5659() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,2611, }
java/testing/org/apache/derbyTesting/junit/JDBC.java,1456,
java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java,266,  return this;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1477,  return row[rsNumber].getColumn(colId);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OuterJoinTest.java,38,import org.apache.derby.iapi.services.sanity.SanityManager;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,263,"                assertSQLState(""40XD1"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,271,        String from_dir;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,272,        String to_dir;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,274,"        String filesep=getSystemProperty(""file.separator"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,275,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,276,"        String testpath=new String( getSystemProperty(""user.dir"") + filesep +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,277,"            ""system"" + filesep + ""singleUse"" + filesep);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,278,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,279,        from_dir = testpath + fromwhere;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,280,        to_dir = testpath + todir;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,281,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,289,"        String filesep=getSystemProperty(""file.separator"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,290,"        String dir_to_change = new String(getSystemProperty(""user.dir"") + filesep"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,291,"            + ""system"" + filesep + ""singleUse"" + filesep + dir);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,295,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,297,     * Change all of the files in a directory and its subdirectories
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,298,"     * to read only (atleast not writeable, depending on system for execute"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,299,     * permission).
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,300,     * @param directory the string representation of the directory
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,301,     * to start recursing from.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,302,"     * @return <code>true</code> for success, <code>false</code> otherwise"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,304,    public static boolean changeDirectoryToReadOnly( String directory )
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,305,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,306,        return changeDirectoryToReadOnly( new File(directory) );
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,410,    public static boolean removeTemporaryDirectory(String directory)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,411,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,412,        return removeTemporaryDirectory(new File(directory));
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,413,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,414,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,526,}
java/engine/org/apache/derby/iapi/types/SQLChar.java,1568,                int micros =
java/engine/org/apache/derby/iapi/types/SQLChar.java,1569,                    (theValue.getNanos() + SQLTimestamp.FRACTION_TO_NANO/2) /
java/engine/org/apache/derby/iapi/types/SQLChar.java,1570,                        SQLTimestamp.FRACTION_TO_NANO;
java/engine/org/apache/derby/iapi/types/SQLChar.java,1572,                if (micros == 0)
java/engine/org/apache/derby/iapi/types/SQLChar.java,1578,                else if (micros > 0)
java/engine/org/apache/derby/iapi/types/SQLChar.java,1580,                    String microsStr = Integer.toString( micros);
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,88,    static final int MAX_FRACTION_DIGITS = 6; // Only microsecond resolution on conversion to/from strings
java/engine/org/apache/derby/iapi/types/SQLTimestamp.java,89,    static final int FRACTION_TO_NANO = 1000; // 10**(9 - MAX_FRACTION_DIGITS)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1239,     *  Don't allow more than microseconds in ISO format: cloudscape rejects.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1241,    public void testISOFormat_MoreThanMicroseconds() throws SQLException{
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1245,"                + ""('2003-03-05-17.05.43.999999999')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,1248,"                + ""('2003-03-05-17.05.43.999999000')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,25,import java.io.FileInputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,137,"        copyDatabaseOnOS(phDbName, ""readOnly"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,152,"        copyDatabaseOnOS(""readOnly"", ""readWrite"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,160,"        copyDatabaseOnOS(""readWrite"", ""readOnly2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,173,"        copyDatabaseOnOS(""readOnly2"", phDbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,277,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,278,"    private void copyDatabaseOnOS(String fromwhere, String todir) {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,281,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,282,"        assertTrue(""Failed to copy directory from "" + from_dir + "" to "" + to_dir,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,283,"            (copyDirectory(from_dir, to_dir)));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,284,"        assertTrue(""Failed to remove directory: "" + from_dir,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,285,            (removeTemporaryDirectory(from_dir)));
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,388,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,389,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,390,        Remove a directory and all of its contents.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,391,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,392,        The results of executing File.delete() on a File object
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,393,        that represents a directory seems to be platform
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,394,        dependent. This method removes the directory
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,395,        and all of its contents.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,396,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,397,"        @return true if the complete directory was removed, false if it could not be."
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,398,        If false is returned then some of the files in the directory may have been removed.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,399,    */
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,400,    final private static boolean removeTemporaryDirectory(File directory) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,401,"        //System.out.println(""removeDirectory "" + directory);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,402,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,403,        if (directory == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,404,            return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,405,        final File sdirectory = directory;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,406,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,407,        Boolean b = (Boolean)AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,408,            new java.security.PrivilegedAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,409,                public Object run() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,410,                    if (!sdirectory.exists())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,411,                        return new Boolean(true);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,412,                    if (!sdirectory.isDirectory())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,413,                        return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,414,                    String[] list = sdirectory.list();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,415,                    // Some JVMs return null for File.list() when the
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,416,                    // directory is empty.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,417,                    if (list != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,418,                        for (int i = 0; i < list.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,419,"                            File entry = new File(sdirectory, list[i]);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,420,                            if (entry.isDirectory())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,421,                            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,422,                                if (!removeTemporaryDirectory(entry))
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,423,                                    return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,424,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,425,                            else
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,426,                            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,427,                                if (!entry.delete())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,428,                                    return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,429,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,430,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,431,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,432,                    return new Boolean(sdirectory.delete());
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,433,                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,434,            });
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,435,        if (b.booleanValue())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,436,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,437,            return true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,438,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,439,        else return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,440,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,441,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,442,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,443,      Copy a directory and all of its contents.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,444,      */
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,445,"    private static boolean copyDirectory(File from, File to)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,446,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,447,"        return copyDirectory(from, to, (byte[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,448,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,449,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,450,"    private static boolean copyDirectory(String from, String to)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,451,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,452,"        return copyDirectory(new File(from), new File(to));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,453,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,454,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,455,"    private static boolean copyDirectory(File from, File to, byte[] buffer)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,456,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,457,        if (from == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,458,            return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,459,        final File sfrom = from;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,460,        final File sto = to;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,461,        if (buffer == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,462,            buffer = new byte[4*4096];
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,463,        final byte[] sbuffer = buffer;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,464,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,465,        Boolean b = (Boolean)AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,466,            new java.security.PrivilegedAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,467,                public Object run() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,468,                    if (!sfrom.exists() || !sfrom.isDirectory() || sto.exists() || !sto.mkdirs())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,469,                    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,470,"                        //can't do basic stuff, returning fail from copydir method"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,471,                        return new Boolean(false);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,472,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,473,                    else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,474,"                        //basic stuff succeeded, incl. makind dirs, going on..."
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,475,                        boolean success=true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,476,                        String[] list = sfrom.list();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,477,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,478,                        // Some JVMs return null for File.list() when the
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,479,                        // directory is empty.
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,480,                        if (list != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,481,                            for (int i = 0; i < list.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,482,"                                File entry = new File(sfrom, list[i]);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,483,                                if (entry.isDirectory())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,484,                                {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,485,"                                    success = copyDirectory(entry,new File(sto,list[i]),sbuffer);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,486,                                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,487,                                else
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,488,                                {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,489,"                                    success = copyFile(entry,new File(sto,list[i]),sbuffer);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,490,                                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,491,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,492,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,493,                        return new Boolean(success);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,494,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,495,                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,496,            });
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,497,        if (b.booleanValue())
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,498,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,499,            return true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,500,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,501,        else return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,502,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,503,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,504,"    public static boolean copyFile(File from, File to)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,505,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,506,"        return copyFile(from, to, (byte[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,507,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,508,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,509,"    public static boolean copyFile(File from, File to, byte[] buf)"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,510,    {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,511,        if (buf == null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,512,            buf = new byte[4096*4];
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,513,        //
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,514,"        //      System.out.println(""Copy file (""+from+"",""+to+"")"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,515,        FileInputStream from_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,516,        FileOutputStream to_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,517,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,518,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,519,            from_s = new FileInputStream(from);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,520,            to_s = new FileOutputStream(to);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,521,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,522,            for (int bytesRead = from_s.read(buf);
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,523,                 bytesRead != -1;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,524,                 bytesRead = from_s.read(buf))
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,525,"                to_s.write(buf,0,bytesRead);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,526,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,527,            from_s.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,528,            from_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,529,
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,530,            to_s.getFD().sync();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,531,            to_s.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,532,            to_s = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,533,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,534,        catch (IOException ioe)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,535,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,536,            return false;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,537,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,538,        finally
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,539,        {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,540,            if (from_s != null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,541,            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,542,                try { from_s.close(); }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,543,                catch (IOException ioe) {}
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,544,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,545,            if (to_s != null)
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,546,            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,547,                try { to_s.close(); }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,548,                catch (IOException ioe) {}
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,549,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,550,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,551,        return true;
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,552,    }
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,35,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,136,                            return new Boolean(file.exists());
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,204,"    private static void  recursiveCopy(File source, File target) throws IOException, FileNotFoundException{"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,207,"            copySingleFile(source,target);"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,222,"                    copySingleFile(entry, targetEntry);"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,225,
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,235,     * @throws IOException
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,236,     * @throws FileNotFoundException
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,238,"    private static void copySingleFile (File source, File target) throws IOException, FileNotFoundException {"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,247,        byte[] buf = new byte[32 * 1024];
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,248,
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,249,        for (;;) {
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,250,            int read = in.read(buf);
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,251,            if (read == -1)
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,252,                break;
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,253,"            out.write(buf, 0, read);"
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,255,        in.close();
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,256,        out.close();
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1387,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,24,import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,28,import org.apache.derby.shared.common.sanity.SanityManager;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,29,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,30,import junit.framework.Assert;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,34,import java.sql.CallableStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,37,import java.sql.ResultSet;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,59,        if (!JDBC.vmSupportsJSR169()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,60,            // JSR169 cannot run with tests with stored procedures
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,61,            // that do database access - for they require a
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,62,            // DriverManager connection to jdbc:default:connection;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,66,                return new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,67,"                    new TestSuite(Derby151Test.class, name));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,132,            Thread.currentThread().interrupted();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,48,    /** The thread that listens for messages from the slave */
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,49,    private Thread msgReceiver = null;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,50,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,163,        msgReceiver = null;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,312,        msgReceiver = new MasterReceiverThread(dbname);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,367,                    msgReceiver = null;
java/engine/org/apache/derby/iapi/types/SQLChar.java,1578,                    String microsStr = Integer.toString( nanos);
java/engine/org/apache/derby/iapi/types/SQLChar.java,1579,                    if(microsStr.length() > SQLTimestamp.MAX_FRACTION_DIGITS)
java/engine/org/apache/derby/iapi/types/SQLChar.java,1581,                        sb.append(
java/engine/org/apache/derby/iapi/types/SQLChar.java,1582,                            microsStr.substring(
java/engine/org/apache/derby/iapi/types/SQLChar.java,1583,"                                0, SQLTimestamp.MAX_FRACTION_DIGITS));"
java/engine/org/apache/derby/iapi/types/SQLChar.java,1585,                    else
java/engine/org/apache/derby/iapi/types/SQLChar.java,1586,                    {
java/engine/org/apache/derby/iapi/types/SQLChar.java,1587,                        for(int i = microsStr.length();
java/engine/org/apache/derby/iapi/types/SQLChar.java,1588,                            i < SQLTimestamp.MAX_FRACTION_DIGITS ; i++)
java/engine/org/apache/derby/iapi/types/SQLChar.java,1589,                        {
java/engine/org/apache/derby/iapi/types/SQLChar.java,1590,                            sb.append( '0');
java/engine/org/apache/derby/iapi/types/SQLChar.java,1591,                        }
java/engine/org/apache/derby/iapi/types/SQLChar.java,1593,                        sb.append( microsStr);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java,984,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,116,     * PrivilegedExceptionAction is raised with cause
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,126,     * @throws PrivilegedActionException if an exception occurs while trying
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,127,     *                                   to open a connection.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,130,     *                     <code>SocketConnection</code> class.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,139,"        PrivilegedActionException,"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,151,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,152,        //Start listening on the socket and accepting the connection
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,153,        Socket client =
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,154,            (Socket)
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,155,            AccessController.doPrivileged(new PrivilegedExceptionAction() {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,156,            public Object run() throws IOException {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,157,                return serverSocket.accept();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,158,            }
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,159,        });
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,160,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,183,     * @throws PrivilegedActionException if an exception occurs while trying
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,186,    private ServerSocket createServerSocket() throws PrivilegedActionException {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,189,        return   (ServerSocket) AccessController.doPrivileged
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,191,"            public Object run() throws IOException, StandardException {"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,192,                ServerSocketFactory sf = ServerSocketFactory.getDefault();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,193,"                return sf.createServerSocket(slaveAddress.getPortNumber(),"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,194,"                    0, slaveAddress.getHostAddress());"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,195,            }
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,196,        });
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,101,     * @throws PrivilegedActionException if an exception occurs while trying
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,102,     *                                   to open a connection.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,103,     *
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,105,     *         <code>SocketConnection</code> class.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,115,"        PrivilegedActionException,"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,123,
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,124,        //create a connection to the slave.
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,125,        s = (Socket)
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,126,        AccessController.doPrivileged(new PrivilegedExceptionAction() {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,127,            public Object run() throws IOException {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,128,                SocketFactory sf = SocketFactory.getDefault();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,129,                InetSocketAddress sockAddr = new InetSocketAddress(
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,130,"                        slaveAddress.getHostAddress(),"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,131,                        slaveAddress.getPortNumber());
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,132,                Socket s_temp = sf.createSocket();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,133,"                s_temp.connect(sockAddr, timeout_);"
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,134,                return s_temp;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,135,            }
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,136,        });
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,94,"                {""a"", ""0"", ""USAGE: java org.apache.derby.tools.sysinfo -cp ["" +"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,95,"                    "" [ embedded ][ server ][ client] [ db2driver ] [ tools ]"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,96,"                    "" [  anyClass.class ] ]"", null},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,101,"                // let's not test the following valid value, it will"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,102,                // fail if db2jcc.jar is not on CLASSPATH
java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java,103,"                //{""db2driver"", ""6"", Success, ""db2jcc.jar""},"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,142,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,515," private static final String DB2DRIVER = ""db2driver"";"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,521," private static final String USAGESTRINGPARTA = MAINUSAGESTRING + "" [ [ "" + EMBEDDED + "" ][ "" + NET + "" ][ "" + CLIENT + ""] [ "" + DB2DRIVER + "" ] [ "" + TOOLS + "" ] [ "";"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,569,"    tryDB2DriverClasspath(successes, failures);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,605,"  if (argumentsContain(args,DB2DRIVER)) {"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,606,"   tryDB2DriverClasspath(successes, failures);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,607,   seenArg =true;
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,608,  }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,653,"    private static void tryDB2DriverClasspath(StringBuffer successes,"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,654,            StringBuffer failures)
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,655,    {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,656,"        tryMyClasspath(""com.ibm.db2.jcc.DB2Driver"","
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,657,"                Main.getTextMessage(""SIF08.L"", ""db2jcc.jar""),"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,658,"                successes, failures);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,659,    }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1024,     *  Check inside a jar file for the presence of a Derby info properties
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1025,"     *  file. There is a special case for db2jcc, which does not have a Derby"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1026,"     *  info propeties file. If db2jcc is in the filename, acquire DB2Driver"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1027,     *  via reflection and get the version number from it.
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1028,     *
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1029,     *  @param filename the jar file to check
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1030,     *  @return ZipInfoProperties with the jar file set as the location
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1031,     *          or null if not found.
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1129,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1130,                return formatURL(result);
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1231,"            result = ""IOException"";"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,390,"   // column names can be SQL reserved words, so it"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,391,   // is necessary delimit them using quotes for insert to work correctly.
java/engine/org/apache/derby/impl/load/ColumnInfo.java,392,"   sb.append(""\"""");"
java/engine/org/apache/derby/impl/load/ColumnInfo.java,393,   sb.append(insertColumnNames.get(index));
java/engine/org/apache/derby/impl/load/ColumnInfo.java,394,"   sb.append(""\"""");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,271,"                assertSQLState(""25502"", sqle);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,72,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,90,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,116,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,136,"        assertEquals(0, countLocks());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,141,     * Create a new connection and count the number of locks held.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,142,     *
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,143,     * @return number of locks held
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,144,     *
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,145,     * @throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,147,    public int countLocks() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,149,        String sql;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,152,"        sql = ""Select count(*) from new org.apache.derby.diag.LockTable() as LT"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,153,        ResultSet lockrs = stmt.executeQuery(sql);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,154,        lockrs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,155,        int count = lockrs.getInt(1);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,156,        lockrs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java,159,        return count;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,28,import java.sql.ResultSet;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,78,"        ResultSet rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,79,        JDBC.assertEmpty(rs);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,86,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,87,"        JDBC.assertDrainResults(rs, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,91,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,92,"        JDBC.assertDrainResults(rs, 2);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,94,        //calls to system procedure for update statisitcs is internally
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,137,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,138,        JDBC.assertEmpty(rs);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,163,"        rs = s.executeQuery(""SELECT * FROM SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,164,"        JDBC.assertDrainResults(rs, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,165,
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,201,   String schemaName = dblook.expandDoubleQuotes(rs.getString(2));
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,202,   String tableName = dblook.expandDoubleQuotes(rs.getString(3));
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,204,   if (dblook.isIgnorableSchema(schemaName))
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,208,   Statement stmtCols = conn.createStatement();
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,209,"   String queryCols = ""SELECT COLUMNNUMBER, COLUMNNAME "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,210,"    ""FROM SYS.SYSCOLUMNS C, SYS.SYSTABLES T, SYS.SYSSCHEMAS S "" +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,211,"    ""WHERE T.TABLEID = C.REFERENCEID and S.SCHEMAID = T.SCHEMAID ""+"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,212,"    ""and T.TABLENAME = '""+tableName+""' AND SCHEMANAME = '""+schemaName +"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,213,"    ""' ORDER BY COLUMNNUMBER"";"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,215,   ResultSet rsCols= stmtCols.executeQuery(queryCols);
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,216,"   String fullName = dblook.addQuotes(schemaName) + ""."" + dblook.addQuotes(tableName);"
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,264,   colNames.append(rsCols.getString(2));
java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java,289,"  grantStmt.append("")"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java,10426,"  assertTrue(rtsp.usedTableScan(""TABLE1""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java,10458,"  assertTrue(rtsp.usedTableScan(""TABLE1""));"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,521,   else
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,522,    bootingDictionary.clearSPSPlans();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,53,
java/client/org/apache/derby/client/am/LogicalStatementEntity.java,169,            if (temporaryPsRef.isClosed()) {
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,351,    return getNumberAsString(rs.getBigDecimal(columnNumber));
java/engine/org/apache/derby/impl/sql/execute/DropSchemaConstantAction.java,97,"        SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, null, true);"
java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java,866,"            totaljvmflags = subjvmflags + ""^"" + totaljvmflags;"
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,395,  if (jvmflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,397,   if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,404,   if (jflags != null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,410,      if (testJavaFlags == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java,419,      if (testSpecialProps == null)
java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java,1601,                if (jvmflags != null)
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,184,"  File classFile = FileUtil.newFile(dir,filename);"
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,190,   FileOutputStream fis = new FileOutputStream(classFile);
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,200,"    SanityManager.THROWASSERT(""Unable to write .class file"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,28,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,35,import junit.framework.TestSuite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,63,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,232,"        String shutdownUrl = TestConfiguration.getCurrent().getJDBCUrl(""\u4e10;shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,233,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,234,            DriverManager.getConnection(shutdownUrl);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,235,        } catch (SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,236,            // ignore shutdown exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,238,"        removeDirectory(getSystemProperty(""derby.system.home"") +  File.separator +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,239,"                ""\u4e10"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,242,    public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,243,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,244,        if (! isSunJVM()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,245,"            TestSuite suite = new TestSuite(""InternationalConnectTest with non-sun/oracle jvm"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,246,            // DERBY-4836 test fails on IBM VMs (on windows).
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,247,            // Skip while research is happening..
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,248,"            println(""Test skipped for this VM, cf. DERBY-4836"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,249,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,250,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,251,
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1268,                            if( moduleList.contains( key))
java/build/org/apache/derbyBuild/GeneratorBase.java,89,    protected TagReader bugListDoc;
java/build/org/apache/derbyBuild/GeneratorBase.java,152,        bugListDoc = new TagReader( new FileInputStream(bugListFileName) );
java/build/org/apache/derbyBuild/JiraIssue.java,1,/*  Derby - Class org.apache.derbyBuild.JiraIssue
java/build/org/apache/derbyBuild/JiraIssue.java,2,Licensed to the Apache Software Foundation (ASF) under one or more
java/build/org/apache/derbyBuild/JiraIssue.java,3,contributor license agreements.  See the NOTICE file distributed with
java/build/org/apache/derbyBuild/JiraIssue.java,4,this work for additional information regarding copyright ownership.
java/build/org/apache/derbyBuild/JiraIssue.java,5,"The ASF licenses this file to You under the Apache License, Version 2.0"
java/build/org/apache/derbyBuild/JiraIssue.java,6,"(the ""License""); you may not use this file except in compliance with"
java/build/org/apache/derbyBuild/JiraIssue.java,7,the License.  You may obtain a copy of the License at
java/build/org/apache/derbyBuild/JiraIssue.java,8,http://www.apache.org/licenses/LICENSE-2.0
java/build/org/apache/derbyBuild/JiraIssue.java,9,"Unless required by applicable law or agreed to in writing, software"
java/build/org/apache/derbyBuild/JiraIssue.java,10,"distributed under the License is distributed on an ""AS IS"" BASIS,"
java/build/org/apache/derbyBuild/JiraIssue.java,11,"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/build/org/apache/derbyBuild/JiraIssue.java,12,See the License for the specific language governing permissions and
java/build/org/apache/derbyBuild/JiraIssue.java,13,limitations under the License.
java/build/org/apache/derbyBuild/JiraIssue.java,17,import org.w3c.dom.*;
java/build/org/apache/derbyBuild/JiraIssue.java,18,import java.io.InputStream;
java/build/org/apache/derbyBuild/JiraIssue.java,19,import java.util.*;
java/build/org/apache/derbyBuild/JiraIssue.java,23, *
java/build/org/apache/derbyBuild/JiraIssue.java,24, * An issue from a JIRA report. The constructor of this class parses text produced by
java/build/org/apache/derbyBuild/JiraIssue.java,25, * a JIRA report. This parsing logic probably has to be rewritten for every release because
java/build/org/apache/derbyBuild/JiraIssue.java,26, * the format of the JIRA reports is not stable.
java/build/org/apache/derbyBuild/JiraIssue.java,27, *
java/build/org/apache/derbyBuild/JiraIssue.java,30,"    private static final String RELEASE_NOTE_NAME = ""releaseNote.html"";"
java/build/org/apache/derbyBuild/JiraIssue.java,31,
java/build/org/apache/derbyBuild/JiraIssue.java,34,    private long releaseNoteAttachmentID = ReportParser.NO_RELEASE_NOTE;
java/build/org/apache/derbyBuild/JiraIssue.java,35,    private HashSet fixVersionSet;
java/build/org/apache/derbyBuild/JiraIssue.java,36,
java/build/org/apache/derbyBuild/JiraIssue.java,37,    /**
java/build/org/apache/derbyBuild/JiraIssue.java,38,     * Create an object instance from a TagReader.
java/build/org/apache/derbyBuild/JiraIssue.java,39,     */
java/build/org/apache/derbyBuild/JiraIssue.java,40,"    public JiraIssue(  ReportParser rp, TagReader tr ) throws Exception"
java/build/org/apache/derbyBuild/JiraIssue.java,41,    {
java/build/org/apache/derbyBuild/JiraIssue.java,42,        key = rp.parseKey( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,43,        title = rp.parseTitle( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,44,        fixVersionSet = rp.parseFixedVersions( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,45,        releaseNoteAttachmentID = rp.getReleaseNoteAttachmentID( tr );
java/build/org/apache/derbyBuild/JiraIssue.java,49,     * Factory method which extracts a list of JiraIssue objects from a Jira
java/build/org/apache/derbyBuild/JiraIssue.java,50,     * report (supplied as an XML Document). Issues with a fixVersion contained
java/build/org/apache/derbyBuild/JiraIssue.java,51,     * in the exclude list will be omitted from the list.
java/build/org/apache/derbyBuild/JiraIssue.java,52,     * @param masterReport a TagReader holding the JIRA report of all the fixed bugs
java/build/org/apache/derbyBuild/JiraIssue.java,53,     * @param excludeReleaseIDList list of fixVersions that disqualifies an issue
java/build/org/apache/derbyBuild/JiraIssue.java,54,     * @param parser a class to parse content in the master report
java/build/org/apache/derbyBuild/JiraIssue.java,55,     * @return a List of JiraIssue objects
java/build/org/apache/derbyBuild/JiraIssue.java,56,     * @throws java.lang.Exception
java/build/org/apache/derbyBuild/JiraIssue.java,58,    public static List createJiraIssueList
java/build/org/apache/derbyBuild/JiraIssue.java,59,"        ( TagReader masterReport, List excludeReleaseIDList, ReportParser parser ) throws Exception"
java/build/org/apache/derbyBuild/JiraIssue.java,60,    {
java/build/org/apache/derbyBuild/JiraIssue.java,61,        int issueCount = 0;
java/build/org/apache/derbyBuild/JiraIssue.java,62,
java/build/org/apache/derbyBuild/JiraIssue.java,65,        while( true )
java/build/org/apache/derbyBuild/JiraIssue.java,66,        {
java/build/org/apache/derbyBuild/JiraIssue.java,67,            TagReader nextIssue = parser.parseNextIssue( masterReport );
java/build/org/apache/derbyBuild/JiraIssue.java,68,            if ( nextIssue == null ) { break; }
java/build/org/apache/derbyBuild/JiraIssue.java,69,
java/build/org/apache/derbyBuild/JiraIssue.java,70,"            JiraIssue candidate = new JiraIssue( parser, nextIssue );"
java/build/org/apache/derbyBuild/JiraIssue.java,71,
java/build/org/apache/derbyBuild/JiraIssue.java,72,            boolean skip = false;
java/build/org/apache/derbyBuild/JiraIssue.java,73,            for (Iterator ex = excludeReleaseIDList.iterator(); ex.hasNext();)
java/build/org/apache/derbyBuild/JiraIssue.java,74,            {
java/build/org/apache/derbyBuild/JiraIssue.java,75,                String rid = (String) ex.next();
java/build/org/apache/derbyBuild/JiraIssue.java,76,                if (candidate.isFixedIn(rid))
java/build/org/apache/derbyBuild/JiraIssue.java,77,                {
java/build/org/apache/derbyBuild/JiraIssue.java,78,"                    //System.out.println(""Already fixed: ""+candidate.getKey()+ "" (in ""+rid+"")"");"
java/build/org/apache/derbyBuild/JiraIssue.java,79,                    skip=true;
java/build/org/apache/derbyBuild/JiraIssue.java,80,                    break;
java/build/org/apache/derbyBuild/JiraIssue.java,81,                }
java/build/org/apache/derbyBuild/JiraIssue.java,83,            if (!skip)
java/build/org/apache/derbyBuild/JiraIssue.java,84,            {
java/build/org/apache/derbyBuild/JiraIssue.java,85,"                //System.out.println(""adding: "" + candidate.getKey());"
java/build/org/apache/derbyBuild/JiraIssue.java,86,                jiraIssues.add(candidate);
java/build/org/apache/derbyBuild/JiraIssue.java,118,        return (releaseNoteAttachmentID > ReportParser.NO_RELEASE_NOTE);
java/build/org/apache/derbyBuild/JiraIssue.java,127,        return fixVersionSet.contains(version);
java/build/org/apache/derbyBuild/JiraIssue.java,141,"        return ""https://issues.apache.org/jira/secure/attachment/"" +"
java/build/org/apache/derbyBuild/JiraIssue.java,142,"                releaseNoteAttachmentID + ""/releaseNote.html"";"
java/build/org/apache/derbyBuild/JiraIssue.java,145,
java/build/org/apache/derbyBuild/JiraIssue.java,146,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,34, * that you freshly regenerate your BUG_LIST and NOTES_LIST just before
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,35, * you run this tool.
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,39, * The tool is designed to be run from Derby's ant build scripts. To run under
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,40," * ant, do the following:"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,44," * <li>Define the ""relnotes.src.reports"" variable in your ant.properties. This"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,45, * variable points at the directory which holds your xml JIRA reports.</li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,46, * <li>Put your xml JIRA reports in that directory. They should have the
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,47, * following names:
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,48, *  <ul>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,49, *  <li>fixedBugsList.xml - This is the list of issues addressed
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,50, * by the release.</li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,51, *  <li>releaseNotesList.xml - This is the list of issues which have detailed
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,52, *  release notes.</li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,53, *  </ul>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,54, * </li>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,55," * <li>Then cd to tools/release and run ant thusly: ""ant genrelnotes""</li>"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,57, *
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,58," * <p>For more information on this tool, please see the JIRA which introduced it:"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,60, *
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,61, * <p>
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,62," * <a href=""http://issues.apache.org/jira/browse/DERBY-2570"">DERBY-2570</a>"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,75,"        ""  java org.apache.derbyBuild.ReleaseNotesGenerator SUMMARY BUG_LIST NOTES_LIST OUTPUT_PAMPHLET\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,79,"        ""                  BUG_LIST                     An xml JIRA report of issues addressed by this release.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,80,"        ""                  NOTES_LIST                An xml JIRA report listing issues which have detailed releaseNotes.html attachments.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,88,"        ""The ReleaseNoteGenerator assumes that the two JIRA reports contain\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,89,"        ""key, title, and attachments elements for each Derby issue. For each\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,90,"        ""issue in NOTES_LIST, the ReleaseNotesGenerator looks through the\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,91,"        ""attachments block in that report and grabs the latest reported\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,92,"        ""releaseNote.html.\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,95,"        ""and NOTES_LIST just before you run this tool.\n"""
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,135,    private ReportParser reportParser = ReportParser.makeReportParser();
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,287,        bugListDoc.reset();
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,288,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,289,"        for ( Iterator i = JiraIssue.createJiraIssueList( bugListDoc, excludeReleaseIDList, reportParser ).iterator(); i.hasNext(); )"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,290,        {
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,327,        bugListDoc.reset();
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,328,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,329,"        for ( Iterator i = JiraIssue.createJiraIssueList( bugListDoc, excludeReleaseIDList, reportParser ).iterator(); i.hasNext(); )"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,330,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,86,        /* Maximum length in bytes is 255. We subtract 12 for ;create=true  */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,87,        int maxNameLength = 255 - 12;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,116,            /* Append one more character to make it fail */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,117,            dbName.append(testCharacters[ch]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,258,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,259,        /* Add the created database for cleanup by tearDown() */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,260,"        databasesForCleanup.add(""\u4e10"");"
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,471,  istream.println(LINE);
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,562,"        return (""Sun Microsystems Inc."".equals("
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,563,"                getSystemProperty(""java.vendor"")));"
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,30,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,33,import org.apache.derby.iapi.services.io.StreamStorable;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,34,
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,35,import org.apache.derby.iapi.services.i18n.MessageService;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,36,
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,41,import org.apache.derby.iapi.services.info.JVMInfo;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,46,import java.io.InputStream;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,47,import java.io.ByteArrayInputStream;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,51,import java.io.EOFException;
java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java,351,              JDBCTypeId = JVMInfo.JAVA_SQL_TYPES_BOOLEAN;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,24,import java.sql.Types;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,25,
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,26,
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,53, /**
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,54,"    JDBC Boolean type - Types.BIT in JDK1.1 & 1.2 & 1.3, Types.BOOLEAN in JDK1.4"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,55, */
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,56, public static final int JAVA_SQL_TYPES_BOOLEAN;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,57,
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,70,"  // If we don't recoginze that, or if the property is not set, assume"
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,71,  // version 1.3.
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,146,  JAVA_SQL_TYPES_BOOLEAN = (isJ2ME || id >= J2SE_14) ?
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,147,   Types.BOOLEAN :java.sql.Types.BIT;
java/engine/org/apache/derby/catalog/SystemProcedures.java,1632,        String entityName = IdUtil.normalToDelimited(tableName);
java/engine/org/apache/derby/catalog/SystemProcedures.java,1633,        if (schemaName != null) {
java/engine/org/apache/derby/catalog/SystemProcedures.java,1634,            entityName =
java/engine/org/apache/derby/catalog/SystemProcedures.java,1635,"                    IdUtil.normalToDelimited(schemaName) + ""."" + entityName;"
java/engine/org/apache/derby/catalog/SystemProcedures.java,1636,        }
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,31,import org.apache.derby.iapi.sql.PreparedStatement;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,37,import org.apache.derby.iapi.types.DataValueFactory;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,38,import org.apache.derby.iapi.sql.LanguageFactory;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,39,import org.apache.derby.iapi.sql.conn.SQLSessionContext;
java/engine/org/apache/derby/iapi/sql/conn/StatementContext.java,40,
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,47,import org.apache.derby.iapi.store.access.TransactionController;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,48,
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,57,import java.sql.SQLException;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,514,  int severity = (error instanceof StandardException) ?
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,515,   ((StandardException) error).getSeverity() :
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,516,   ExceptionSeverity.SESSION_SEVERITY;
java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java,161,                if (lcc.getRunTimeStatisticsMode())
java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java,372,    !doesCommit() && !activation.isClosed())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,469,"    private boolean hasTable(String schemaName, String tableName)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,472,"        ResultSet rs = getConnection().getMetaData().getTables((String)null,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,479,    private String []tableNames = {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,488,    private void enableXplainStyle(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,493,"            if (hasTable(""XPLTEST"", tableNames[i]))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,500,    private void enableXplainStyleWithTiming(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,512,    private void disableXplainStyle(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,531,"       new AccessDatabase(getConnection(), ""XPLTEST"", stmt_id);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,548,    private void verifyXplainUnset(Statement s)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,750,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java,2348,"            if (hasTable(""XPLTEST"", tableNames[i]))"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java,180,        Class iface = Blob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ClobTest.java,178,        Class iface = Clob.class;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,115,            is = (FileInputStream) AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,116,                    new PrivilegedExceptionAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,117,                public Object run() throws FileNotFoundException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,128,        ArrayList beforeUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,149,        ArrayList afterUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,191,            is = (FileInputStream) AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,192,                    new PrivilegedExceptionAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,193,                public Object run() throws FileNotFoundException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,205,        ArrayList beforeUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,228,        ArrayList afterUpdateList = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,521,   Class   iface = exclusions.getInterface();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,372,"            Class derbyImplementation, Method ifaceMethod)"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4929, /** get all the statistiscs descriptors for a given table.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4930,  * @param  td Table Descriptor for which I need statistics
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4931,  */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4943,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4945,"         keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4946,"         (ScanQualifier [][])null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4947,"         ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4948,"         (TupleDescriptor)null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4949,"         statDescriptorList, false);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8458,  return getDescriptorViaIndexMinion(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8459,"   indexId,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8460,"   keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8461,"   scanQualifiers,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8462,"   ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8463,"   parentTupleDescriptor,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8464,"   list,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8465,"   forUpdate,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8466,"   TransactionController.ISOLATION_REPEATABLE_READ,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8467,   tc);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8468, }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8469,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8470, /**
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8471,  * Return a (single or list of) catalog row descriptor(s) from a
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8472,  * system table where the access is from the index to the heap.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8473,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8474,"  * This overload variant takes an explicit tc, in contrast to the normal"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8475,  * one which uses the one returned by getTransactionCompile.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8476,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8477,  * @param indexId The id of the index (0 to # of indexes on table) to use
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8478,  * @param keyRow The supplied ExecIndexRow for search
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8479,  * @param ti  The TabInfoImpl to use
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8480,"  * @param parentTupleDescriptor  The parentDescriptor, if applicable."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8481,"  * @param list      The list to build, if supplied.  If null, then"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8482,  *     caller expects a single descriptor
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8483,  * @param forUpdate Whether or not to open the index for update.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8484,  * @param tc        Transaction controller
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8485,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8486,  * @return The last matching descriptor
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8487,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8488,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8489,  */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8490, private final TupleDescriptor getDescriptorViaIndex(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8491,"      int indexId,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8492,"      ExecIndexRow keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8493,"      ScanQualifier [][] scanQualifiers,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8494,"      TabInfoImpl ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8495,"      TupleDescriptor parentTupleDescriptor,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8496,"      List list,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8497,"      boolean forUpdate,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8498,      TransactionController tc)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8499,   throws StandardException
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8500, {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8501,  if (tc == null) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8502,   tc = getTransactionCompile();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8503,  }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8504,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8505,  return getDescriptorViaIndexMinion(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8506,"   indexId,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8507,"   keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8508,"   scanQualifiers,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8509,"   ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8510,"   parentTupleDescriptor,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8511,"   list,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8512,"   forUpdate,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8513,"   TransactionController.ISOLATION_REPEATABLE_READ,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8514,   tc);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8588,  ExecIndexRow   indexTemplateRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8600,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8601,   if (isolationLevel ==
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8602,     TransactionController.ISOLATION_READ_UNCOMMITTED) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8603,    // list not used for this case
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8604,    SanityManager.ASSERT(list == null);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8605,   }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8606,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8719,    // cf. DERBY-3678. A table's schema descriptor is attempted
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8755,   else
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9443,  ExecRow row;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9451,            getDescriptorViaIndexMinion
java/build/org/apache/derbyBuild/GeneratorBase.java,139,"        System.out.println(""setting summary file name to:"" + summaryFileName +"
java/build/org/apache/derbyBuild/GeneratorBase.java,140,"                "" previousReleaseID: "" + previousReleaseID +"
java/build/org/apache/derbyBuild/GeneratorBase.java,141,"                "" excludeReleaseIDList.size():"" + excludeReleaseIDList.size());"
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/QueryVTIHelper.java,182,            Class                   callerClass = Class.forName( caller.getClassName() );
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java,250,            Class                               callerClass = Class.forName( caller.getClassName() );
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java,258,            Class               vtiClass = Class.forName( vtiClassName );
java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot/Subscription.java,275,            Class                   callerClass = Class.forName( caller.getClassName() );
java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java,213,
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,32,    /** Constant for version which haven't been released. */
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,33,    private static final long NOT_RELEASED = -1;
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,79,     * @return Milliseconds since the Epoch.
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/DerbyVersion.java,191,"        return version + "" ("" + (releaseDate == NOT_RELEASED ? ""n/a"" : Long.toString(releaseDate)) + "")"";"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,121,    private final DerbyVersion ancestorCutOff;
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,161,            ancestorCutOff = getVersion(System.getProperty(
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,192,"        // Expected format: release version, release date (YYYY-MM-DD)"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,195,"                    versions[i][0], parseDate(versions[i][1]));"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,199,            ancestorCutOff = getVersion(System.getProperty(
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,203,"                    ""invaild ancestor cutoff version"", iae);"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,261,        if (parent.compareTo(ancestorCutOff) < 0) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,265,                    ancestorCutOff.getVersion());
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,271,            DerbyVersion a = ancestors[i];
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,272,            Calendar cal = GregorianCalendar.getInstance();
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,273,            cal.setTimeInMillis(a.getReleaseDateMillis());
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,274,"            System.out.println(a.getVersion() + "", "" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,275,"                    cal.get(Calendar.YEAR) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,276,"                    padZero(cal.get(Calendar.MONTH) +1) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,277,                    padZero(cal.get(Calendar.DAY_OF_MONTH)));
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,283,"        System.out.println(""(cutoff="" + ancestorCutOff.getVersion() + "")"");"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,311,            DerbyVersion dv = (DerbyVersion)relIter.next();
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,312,            Calendar cal = GregorianCalendar.getInstance();
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,313,            cal.setTimeInMillis(dv.getReleaseDateMillis());
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,314,"            System.out.println(dv.getVersion() + "", "" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,315,"                    cal.get(Calendar.YEAR) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,316,"                    padZero(cal.get(Calendar.MONTH) +1) + ""-"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,317,                    padZero(cal.get(Calendar.DAY_OF_MONTH)));
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,318,
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,468,"        log(""dump file: "" + new File(destFile).getAbsolutePath());"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,502,        if (!parent.isReleased() && dv.length > 0) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,503,            ancestors.add(dv[0]);
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,504,        }
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,505,        while (dv.length > 1 && dv[0].compareTo(ancestorCutOff) >= 0) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,522,"     * If the target version has been released, it will be placed at index zero."
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,523,"     * If the target version hasn't been released, it will not be included in"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,524,     * the list.
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,539,            if (!dv.isReleased()) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,561,    /** Adds a leading zero if the value is less than ten. */
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,562,    private static String padZero(int val) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,563,        if (val < 10) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,564,"            return ""0"" + Integer.toString(val);"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,565,        } else {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,566,            return Integer.toString(val);
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,567,        }
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,568,    }
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,569,
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,1277,
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,396,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,472,                 if (sz == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,484,                    pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,550,                return control.getInputStream(0);
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,558,                    pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,565,"                    return new UpdatableBlobStream (this,"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,566,"                            new AutoPositioningStream (this, myStream, this));"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,615,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,627,                    if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,632,"                        if (checkMatch(pattern, pos))"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,634,                        else
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,709,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,724,                if (b == null || b.length < 1)  // the 'empty' blob
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,732,                    if (c == -1)  // run out of stream
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,737,"                        if (checkMatch(pattern, pos))"
java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java,739,                        else
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,338,                pushStack = !getEmbedConnection().isClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,350,                    if (readCount == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,458,                                if (!seenOneCharacter)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,473,                                if (firstPosition == -1)
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,491,            } // End outer for loop
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,492,        } // End synchronized block
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1245,   LanguageConnectionContext lcc = tr.getLcc();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2015,    getLanguageConnection().setReadOnly(readOnly);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2109,    getLanguageConnection().setIsolationLevel(iLevel);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2842,    getLanguageConnection().resetFromPool();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2879,     (XATransactionController) getLanguageConnection().getTransactionExecute();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2894,     getLanguageConnection().internalCommit(false /* don't commitStore again */);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2921,       getLanguageConnection().xaCommit(onePhase);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2945,       getLanguageConnection().xaRollback();
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,2316,    getLanguageConnectionContext().getDataDictionary().checkVersion(
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3555,    s = getEmbedConnection().prepareMetaDataStatement(queryText);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,147,   } catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,148,      throw handleException(t);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,149,   }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,462,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,582,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,600,     LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4013,    if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4025,"    return new EmbedBlob(dvd, getEmbedConnection());"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4067,    if (wasNull = dvd.isNull())
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4077,"                return new EmbedClob(getEmbedConnection(), dvd);"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4514,   try {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4522,     LanguageConnectionContext lcc = getEmbedConnection()
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4523,       .getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4535,
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1317,         } catch (Throwable t) {
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,344,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java,94,        // return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java,95,        return new CleanDatabaseTestSetup(suite) {
java/client/org/apache/derby/client/am/DatabaseMetaData.java,2388,        return supportsUDTs_;
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,136,        Hashtable classSizes = new Hashtable();
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,228,    private Class[] interfaceList; // Search for classes that implement these interfaces
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,230,    private Hashtable classSizes;
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,235,                              Hashtable classSizes)
java/build/org/apache/derbyBuild/ClassSizeCrawler.java,273,                Class targetClass = null;
java/build/org/apache/derbyBuild/ElementFacade.java,86,    public List getTextListByTagName(String tag) throws Exception {
java/build/org/apache/derbyBuild/ElementFacade.java,89,        ArrayList tagValues = new ArrayList();
java/build/org/apache/derbyBuild/GeneratorBase.java,99,    protected List excludeReleaseIDList;
java/build/org/apache/derbyBuild/GeneratorBase.java,101,    protected ArrayList errors = new ArrayList();
java/build/org/apache/derbyBuild/JiraIssue.java,73,        ArrayList jiraIssues = new ArrayList();
java/build/org/apache/derbyBuild/JiraIssue.java,82,        ArrayList comments = new ArrayList();
java/build/org/apache/derbyBuild/MessageBuilder.java,141,        private         ArrayList    _tagStack;
java/build/org/apache/derbyBuild/MessageBuilder.java,166,            _tagStack = new ArrayList();
java/build/org/apache/derbyBuild/MessageBundleTest.java,73,    static HashSet sqlStateIds          = new HashSet();
java/build/org/apache/derbyBuild/MessageBundleTest.java,74,    static HashSet messageIdIds         = new HashSet();
java/build/org/apache/derbyBuild/MessageBundleTest.java,75,    static HashSet messageBundleIds     = new HashSet();
java/build/org/apache/derbyBuild/MessageBundleTest.java,93,"    static void loadClassIds(Class idclass, HashSet set) throws Exception {"
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,36,/* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,127, private HashMap changeMap;
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,142, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,180, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,195,  changeMap = new HashMap();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,238, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,320, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,379,  ArrayList colDefs = new ArrayList();
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,450, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,494, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,505,"  * @return Occurence of <""AS "" + oldVal> in the query text"
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,506,  * has been changed IN PLACE to newVal.
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,545, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,566,  * @return An outer SELECT clause has been generated and
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,642, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,652,  * @return All relevant columns have been updated IN PLACE
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,653,  * to return the required ODBC-compliant values.
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,691, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,699,  * @return The received column has been updated IN PLACE
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,700,  * to return the required ODBC-compliant value.
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,758, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,766,  * @param query The query from which we are extracting
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,777,  ArrayList colDefList)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,841, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,892, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,943, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1011, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1023,  * @return A dummy column name has been added to
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1031,  ArrayList selectColDefs)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1051, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1062,  * @newQueryText The buffer in which we want to
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1064,  * @return The dummy placeholder in the received
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1090, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1097,  * @queryText The buffer in which we are going to do
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1099,  * @return fragKey has been substituted (IN PLACE)
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1153,     * @return the old pattern is substituted with the new pattern (IN
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1182, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1223, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1248, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1264, /* ****
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1274,  Byte changeByte = (Byte)changeMap.get(queryName);
java/build/org/apache/derbyBuild/ODBCMetadataGenerator.java,1283, /* ****
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,150,    private ArrayList missingReleaseNotes = new ArrayList();
java/build/org/apache/derbyBuild/classlister.java,70, protected Hashtable foundClasses;
java/build/org/apache/derbyBuild/classlister.java,87, protected Hashtable masterClassList = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,90,    protected Hashtable classpathHash;
java/build/org/apache/derbyBuild/classlister.java,157,"  foundClasses = new Hashtable(3000, 0.8f);"
java/build/org/apache/derbyBuild/classlister.java,262,        classpathHash = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,534,   Hashtable localHashtable = null;
java/build/org/apache/derbyBuild/classlister.java,537,    localHashtable = (Hashtable) masterClassList.get(className);
java/build/org/apache/derbyBuild/classlister.java,540,     localHashtable = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,671,   Hashtable scoreboard = new Hashtable();
java/build/org/apache/derbyBuild/classlister.java,672,   Hashtable grandkids = (Hashtable) masterClassList.get(kid);
java/build/org/apache/derbyBuild/classlister.java,701," protected void unrollHashtable( String parent, Hashtable current, Hashtable scoreboard, int indentLevel)"
java/build/org/apache/derbyBuild/classlister.java,704,  Enumeration e = current.keys();
java/build/org/apache/derbyBuild/classlister.java,709,   key = (String) e.nextElement();
java/build/org/apache/derbyBuild/classlister.java,716,   Integer value = (Integer) scoreboard.get(key);
java/build/org/apache/derbyBuild/classlister.java,732,   Hashtable currentsChildren = (Hashtable) masterClassList.get(key);
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,99,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,99,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,101,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,100,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,100,    public static void register(Map tagletMap) {
java/build/org/apache/derbyBuild/splitmessages.java,46,    private static TreeSet clientMessageIds = new TreeSet();
java/client/org/apache/derby/client/am/Cursor.java,974,            return new java.math.BigDecimal( getInt( column ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/Price.java,49,"    public static Price makePrice( ) { return new Price( ""USD"", new BigDecimal( 1 ), DEFAULT_TIMESTAMP ); }"
java/testing/org/apache/derbyTesting/system/oe/client/Submitter.java,533,        BigDecimal c = new BigDecimal((long) count * 100L);
java/testing/org/apache/derbyTesting/system/oe/client/Submitter.java,534,        BigDecimal t = new BigDecimal((long) total);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,70,"            Types.DECIMAL, Types.NUMERIC, Types.BIT, Types.NULL, // Types.BOOLEAN"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,76,"            ""REAL"", ""FLOAT"", ""DOUBLE"", ""DECIMAL(10,5)"", null, null, null,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,84,"           ""98"",""98"", ""98"",""98"",null,null,null,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,302,"            /*10 null      */       { _, _, _, _, _, _, _, _, _, _, _, X, X, X, _, _, _, X, _, X, _, _},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,940,"                    assertEquals(32, b);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,965,"                    assertEquals(32, s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,991,"                    assertEquals(32, i);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1015,"                    assertEquals(32, l);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1042,"                    assertEquals(32.0, f, .000001);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1067,"                    assertEquals(32.0, d, .00001);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1095,"                            new BigDecimal(""32.0"").compareTo(bd));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1156,"                        assertEquals(""32"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1161,"                        assertEquals(""32.0"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1165,"                        assertEquals(""32.00000"",s);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1626,        if (worked && B2_MOD[whichCall][type])
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1632,        else if (B2_MOD[whichCall][type]) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1648,        if (worked && B5[b5o][type])
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1654,        else if (B5[b5o][type]) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3553,        case Types.BIT: {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,710,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,711,"        assertEquals(""getURL match"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,712,"                getTestConfiguration().getJDBCUrl(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,713,                url);
java/testing/org/apache/derbyTesting/junit/Decorator.java,23,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/junit/Decorator.java,26,import javax.sql.DataSource;
java/testing/org/apache/derbyTesting/junit/Decorator.java,27,
java/testing/org/apache/derbyTesting/junit/Decorator.java,46,     * using encrpyption as a general test and
java/testing/org/apache/derbyTesting/junit/Decorator.java,56,     * <BR>
java/testing/org/apache/derbyTesting/junit/Decorator.java,57,     * The database is created during the setUp of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,66,
java/testing/org/apache/derbyTesting/junit/Decorator.java,67,        test = new BaseTestSetup(test) {
java/testing/org/apache/derbyTesting/junit/Decorator.java,68,
java/testing/org/apache/derbyTesting/junit/Decorator.java,69,            /**
java/testing/org/apache/derbyTesting/junit/Decorator.java,70,             * Create an encrypted database using a
java/testing/org/apache/derbyTesting/junit/Decorator.java,71,             * JDBC data source.
java/testing/org/apache/derbyTesting/junit/Decorator.java,72,             */
java/testing/org/apache/derbyTesting/junit/Decorator.java,73,            protected void setUp() throws SQLException
java/testing/org/apache/derbyTesting/junit/Decorator.java,74,            {
java/testing/org/apache/derbyTesting/junit/Decorator.java,75,                String bootPhrase = getBootPhrase(16);
java/testing/org/apache/derbyTesting/junit/Decorator.java,76,
java/testing/org/apache/derbyTesting/junit/Decorator.java,77,                DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/junit/Decorator.java,78,
java/testing/org/apache/derbyTesting/junit/Decorator.java,79,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,80,"                        ""createDatabase"", ""create"");"
java/testing/org/apache/derbyTesting/junit/Decorator.java,81,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,82,"                        ""connectionAttributes"","
java/testing/org/apache/derbyTesting/junit/Decorator.java,83,"                        ""dataEncryption=true;bootPassword="" + bootPhrase);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,84,
java/testing/org/apache/derbyTesting/junit/Decorator.java,85,                ds.getConnection().close();
java/testing/org/apache/derbyTesting/junit/Decorator.java,86,            }
java/testing/org/apache/derbyTesting/junit/Decorator.java,87,        };
java/testing/org/apache/derbyTesting/junit/Decorator.java,88,
java/testing/org/apache/derbyTesting/junit/Decorator.java,89,        return TestConfiguration.singleUseDatabaseDecorator(test);
java/testing/org/apache/derbyTesting/junit/Decorator.java,95,     * using encrpyption as a general test and
java/testing/org/apache/derbyTesting/junit/Decorator.java,105,     * <BR>
java/testing/org/apache/derbyTesting/junit/Decorator.java,106,     * The database is created during the setUp of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,107,
java/testing/org/apache/derbyTesting/junit/Decorator.java,114,        String bootPhrase = getBootPhrase(64);
java/testing/org/apache/derbyTesting/junit/Decorator.java,115,
java/testing/org/apache/derbyTesting/junit/Decorator.java,116,        String attributes =
java/testing/org/apache/derbyTesting/junit/Decorator.java,117,"            ""dataEncryption=true;bootPassword="" + bootPhrase +"
java/testing/org/apache/derbyTesting/junit/Decorator.java,118,"             "";encryptionAlgorithm="" + algorithm;"
java/testing/org/apache/derbyTesting/junit/Decorator.java,121,
java/testing/org/apache/derbyTesting/junit/Decorator.java,143,     * set to the passed in locale. Database is created
java/testing/org/apache/derbyTesting/junit/Decorator.java,144,     * by the setUp method of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,150,
java/testing/org/apache/derbyTesting/junit/Decorator.java,151,"        String attributes = ""collation=TERRITORY_BASED"";"
java/testing/org/apache/derbyTesting/junit/Decorator.java,154,"            attributes = attributes.concat("";territory="" + locale);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,162,     * set to the passed in locale. Database is created
java/testing/org/apache/derbyTesting/junit/Decorator.java,163,     * by the setUp method of the decorator.
java/testing/org/apache/derbyTesting/junit/Decorator.java,169,
java/testing/org/apache/derbyTesting/junit/Decorator.java,170,"        String attributes = ""collation=TERRITORY_BASED:SECONDARY"";"
java/testing/org/apache/derbyTesting/junit/Decorator.java,173,"            attributes = attributes.concat("";territory="" + locale);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,180,     * as the default database. The database is created by the setUp
java/testing/org/apache/derbyTesting/junit/Decorator.java,181,     * method of the decorator. The database will be created using
java/testing/org/apache/derbyTesting/junit/Decorator.java,182,     * a JDBC data source with createDatabase set to create and
java/testing/org/apache/derbyTesting/junit/Decorator.java,183,     * connectionAttributes set to the passed in attributes.
java/testing/org/apache/derbyTesting/junit/Decorator.java,185,     *
java/testing/org/apache/derbyTesting/junit/Decorator.java,186,     * @param attributes Value to set connectionAttributes to when creating
java/testing/org/apache/derbyTesting/junit/Decorator.java,187,     * the database.
java/testing/org/apache/derbyTesting/junit/Decorator.java,191,"    private static Test attributesDatabase(final String attributes, Test test)"
java/testing/org/apache/derbyTesting/junit/Decorator.java,193,        test = new BaseTestSetup(test) {
java/testing/org/apache/derbyTesting/junit/Decorator.java,194,
java/testing/org/apache/derbyTesting/junit/Decorator.java,195,            /**
java/testing/org/apache/derbyTesting/junit/Decorator.java,196,             * Create a  database
java/testing/org/apache/derbyTesting/junit/Decorator.java,197,             * using a JDBC data source with connectionAttributes set.
java/testing/org/apache/derbyTesting/junit/Decorator.java,198,             */
java/testing/org/apache/derbyTesting/junit/Decorator.java,199,            protected void setUp() throws SQLException
java/testing/org/apache/derbyTesting/junit/Decorator.java,200,            {
java/testing/org/apache/derbyTesting/junit/Decorator.java,201,                DataSource ds = JDBCDataSource.getDataSource();
java/testing/org/apache/derbyTesting/junit/Decorator.java,202,
java/testing/org/apache/derbyTesting/junit/Decorator.java,203,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,204,"                        ""createDatabase"", ""create"");"
java/testing/org/apache/derbyTesting/junit/Decorator.java,205,"                JDBCDataSource.setBeanProperty(ds,"
java/testing/org/apache/derbyTesting/junit/Decorator.java,206,"                        ""connectionAttributes"", attributes);"
java/testing/org/apache/derbyTesting/junit/Decorator.java,207,
java/testing/org/apache/derbyTesting/junit/Decorator.java,208,                ds.getConnection().close();
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,76,"            return DriverManager.getConnection(url, user, password);"
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,91,            Properties attributes = new Properties();
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,92,"            attributes.setProperty(""user"", user);"
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,93,"            attributes.setProperty(""password"", password);"
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,129,
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1746,
java/build/org/apache/derbyBuild/GeneratorBase.java,97,    protected final String releaseID;
java/build/org/apache/derbyBuild/GeneratorBase.java,107,"     * Establishes state, including currrent version number."
java/build/org/apache/derbyBuild/GeneratorBase.java,114,        int thirdDigit = maint / 1000000;
java/build/org/apache/derbyBuild/GeneratorBase.java,115,        int fourthDigit = maint % 1000000;
java/build/org/apache/derbyBuild/GeneratorBase.java,117,"        releaseID = branch + ""."" + thirdDigit + ""."" + fourthDigit;"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4643,"     // DB2 does not have a BOOLEAN java.sql.bit type, it's sent as small"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4644,    if (pmeta.getParameterType(i+1) == Types.BOOLEAN)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4645,"     ps.setBoolean(i+1, (paramVal == 1));"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4646,    else
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,4647,"     ps.setShort(i+1, paramVal);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3534,            } else if (usingDerbyNetClient() &&
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3535,"                    (""setByte"".equals(method) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3536,"                     ""setObject(java.lang.Byte)"".equals(method) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3537,"                     ""setShort"".equals(method) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3538,"                     ""setObject(java.lang.Short)"".equals(method))) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3539,                // Special case for DERBY-4889.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,3540,                assertFalse(b);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1636,        if (usingDerbyNetClient() && (whichCall == 8 /* getString */)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1637,                && (jdbcTypes[type] == Types.BOOLEAN)) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1638,            // Workaround for DERBY-4890.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1639,            shouldWork = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1640,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1641,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1666,        if (usingDerbyNetClient() && (b5o == 0 /* java.lang.String */)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1667,                && (jdbcTypes[type] == Types.BOOLEAN)) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1668,            // Workaround for DERBY-4890.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1669,            shouldWork = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1670,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,1671,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3041,                TestConfiguration.embeddedSuite(BlobClob4BlobTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3042,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3043,                TestConfiguration.clientServerSuite(BlobClob4BlobTest.class));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3047,"            TestSuite encSuite = new TestSuite (""BlobClob4BlobTest:encrypted"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,3048,            encSuite.addTestSuite (BlobClob4BlobTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,35,import org.apache.derbyTesting.junit.TestConfiguration;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,87,    private void createThreads(Thread [] t) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,89,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,91,                public void run() {threadWorker(); }});
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,120,    private void threadWorker() {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,121,        Connection threadConnection = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,122,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,125,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,126,"                /* If a connection hasn't been opened for this thread, open one */"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,127,                if (threadConnection == null){
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,128,                    threadConnection = openDefaultConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,129,                }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,130,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,185,    protected static Test encryptedBaseSuite(String name) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,186,        TestSuite suite = new TestSuite(name);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,187,        suite.addTestSuite(DeadlockModeTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,188,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,189,        return new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,190,"                DatabasePropertyTestSetup.setLockTimeouts(Decorator.encryptedDatabase(suite), 2, 4))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,191,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,192,            /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,193,             * Creates the tables used in the test cases.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,194,             * @exception SQLException if a database error occurs
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,195,             */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,196,            protected void decorateSQL(Statement stmt) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,197,            {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,198,"                stmt.execute(""create table t (i int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,199,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,200,"                stmt.executeUpdate(""insert into t values (1956)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,201,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,202,"                stmt.executeUpdate(""insert into t values (180)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,203,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,204,"                stmt.executeUpdate(""insert into t values (3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,205,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,206,        };
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,207,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,208,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,217,            suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,218,"                    encryptedBaseSuite(""DeadlockModeTest:encrypted"")"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeadlockModeTest.java,219,                    );
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,27,import java.util.WeakHashMap;
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,116, ColumnDescriptorList  columnDescriptorList;
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,122, /**
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,123,  * referencedColumnMap is thread local (since DERBY-2861)
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,124,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,125,  * It contains a weak hash map keyed by the the TableDescriptor
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,126,"  * and the value is the actual referencedColumnMap bitmap.  So,"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,127,  * each thread has a weak hash map it uses to find the appropriate
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,128,  * referencedColumnMap for 'this' TableDescriptor.
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,129,  *
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,130,"  * Since the hash map is weak, when the TableDescriptor is no"
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,131,  * longer referenced the hash entry can be garbage collected (it
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,132,"  * is the *key* of a weak hash map that is weak, not the value)."
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,133,  */
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,134, private static ThreadLocal referencedColumnMap = new ThreadLocal() {
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,135,   protected Object initialValue() {
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,136,    // Key: TableDescriptor
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,137,    // Value: FormatableBitSet
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,138,    return new WeakHashMap();
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,139,   }
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,140,  };
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,141,
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,143,  WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,145,  return (FormatableBitSet) (map.get(this));
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,151,  WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,152,"  map.put(this, newReferencedColumnMap);"
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,305,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,117,    private static  final   String  BUILD_ENVIRONMENT_SECTION =
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,118,"            ""Build Environment"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,713,        TestConfiguration config = getTestConfiguration();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,714,        String expectedURL = usingEmbedded() ?
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,715,            config.getJDBCUrl() : config.getJDBCUrlWithAttributes();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1365,    /**
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1366,"     * Return the JDBC URL for connecting to the default database, including"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1367,     * any connection attributes.
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1368,     *
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1369,     * @return JDBC URL with connection attributes
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1370,     */
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1371,    public String getJDBCUrlWithAttributes() {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1372,        String attrs = getConnectionAttributesString();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1373,        if (attrs == null) {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1374,            return url;
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1375,        } else {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1376,            return url + ';' + attrs;
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1377,        }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1378,    }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1379,
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1433,     * @return connection attributes (can be {@code null})
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1435,    Properties getConnectionAttributes() {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1447,        if (connectionAttributes == null) {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1448,            return null;
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1449,        }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1450,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,377,"                ""logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]"","
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,427,"                ""logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]"","
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,516,"                ""logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]"","
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,563,"                ""logconnections {on|off}[-h <host>][-p <portnumber>] [-ssl <sslmode>]"","
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,272,  if ( res == null){
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,273,   setResource();
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,274,  }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,275,  String s = key;
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,276,  try{
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,277,   s = res.getString(key);
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,278,  } catch (Exception e) {
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,279,   s = key;
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,280,  }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,281,  //System.out.println(local.toString());
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,282,"  //System.out.println(""GetKey:""+key+""=""+s);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,283,  return s;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,275, public void executeConstantAction(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,276,    Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,277,        throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,278, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,279,  LanguageConnectionContext   lcc =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,280,            activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,281,  DataDictionary              dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,282,  DependencyManager           dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,283,  TransactionController       tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,310,"                 defragmentRows(tc, lcc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,318,  if (updateStatistics)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,319,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,320,   updateStatistics(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,438,    ColumnDescriptorList cdl = new ColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,439,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,446,"     addNewColumnToTable(activation, lcc, dd, tc, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,455,"     modifyColumnDefault(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,460,"     modifyColumnType(activation, ix);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,465,     modifyColumnConstraint(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,466,"                        activation, columnInfo[ix].name, true);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,493,      modifyColumnConstraint(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,494,"                            activation, columnInfo[ix].name, false);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,499,"     dropColumnFromTable(activation, columnInfo[ix].name);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,619,   compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,625,   truncateTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,633,  * @param   activation  the current activation
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,636, private void updateStatistics(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,637, throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,638, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,639,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,640,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,641,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,647,  DependencyManager dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,902,  * @param lcc    the language connection context
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,905, private void defragmentRows(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,906,"   TransactionController tc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,907,   LanguageConnectionContext lcc)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,908,        throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,909, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,937,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,938,   ConglomerateDescriptor heapCD =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,939,                td.getConglomerateDescriptor(td.getHeapConglomerateId());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,940,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1290, private void addNewColumnToTable(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1291,"    Activation                  activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1292,"    LanguageConnectionContext   lcc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1293,"    DataDictionary              dd,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1294,"    TransactionController       tc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1295,    int                         ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1302,  DataDescriptorGenerator ddg         = dd.getDataDescriptorGenerator();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1365,"   updateNewAutoincrementColumn(activation, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1373,"   updateNewColumnToDefault(activation, columnDescriptor, lcc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1445,     * @param   activation  the current activation
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1450," private void dropColumnFromTable(Activation activation, String columnName )"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1453,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1454,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1455,  DependencyManager dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1456,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1524,"            dropColumnFromTable( activation, generatedColumnName );"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1735,  createNewBackingCongloms(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1736,"   newCongloms, (long[])null, activation, dd);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1750,  compressTable(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1825," private void modifyColumnType(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1826,          int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1827,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1828, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1829,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1830,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1831,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1832,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1862," private void modifyColumnConstraint(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1863,"          String colName,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1864,          boolean nullability)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1865,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1866, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1867,  LanguageConnectionContext lcc =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1868,            activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1869,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1870,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1871,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1872,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1930,  * @param   activation   activation
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1935," private void modifyColumnDefault(Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1936,          int ix)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1939,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1940,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1941,  DependencyManager dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1942,  TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1943,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1997,"   long maxValue = getColumnMax(activation, td, columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1998,"           columnInfo[ix].autoincInc,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1999,           columnInfo[ix].autoincStart);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2020, private void compressTable(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2021,    Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2028,  this.lcc        = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2029,  this.dd         = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2030,  this.dm         = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2031,  this.tc         = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2032,  this.activation = activation;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2033,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2080,  getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2212, private void truncateTable(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2219,  this.lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2220,  this.dd = lcc.getDataDictionary();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2221,  this.dm = dd.getDependencyManager();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2222,  this.tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2223,  this.activation = activation;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2305,  getAffectedIndexes(activation);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2586, private void getAffectedIndexes(Activation activation)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2652,"   createNewBackingCongloms(newCongloms,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2653,"    indexConglomerateNumbers, activation, dd);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2746,"  long [] ixCongNums, Activation activation, DataDictionary dd)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2832,        int[] base_table_collation_ids = td.getColumnCollationIds();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2833,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3177,  * @param lcc    the language connection context
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3181, private void updateNewColumnToDefault
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3182, (
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3183,"  Activation activation,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3184,"        ColumnDescriptor    columnDescriptor,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3185,  LanguageConnectionContext  lcc
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3186, )
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3187,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3188, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3221," private long getColumnMax(Activation activation, TableDescriptor td, String columnName,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3222,"         long increment, long initial)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3223,         throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3224, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3229,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3230,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3243," private void dropAllColumnDefaults(UUID tableId, DataDictionary dd)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3244,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3245, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3246,  ColumnDescriptorList cdl = td.getColumnDescriptorList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3247,  int      cdlSize = cdl.size();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3248,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3249,  for(int index = 0; index < cdlSize; index++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3250,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3251,   ColumnDescriptor cd = (ColumnDescriptor) cdl.elementAt(index);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3252,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3253,   // If column has a default we drop the default and
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3254,   // any dependencies
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3255,   if (cd.getDefaultInfo() != null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3256,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3257,    DefaultDescriptor defaultDesc = cd.getDefaultDescriptor(dd);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3258,"    dm.clearDependencies(lcc, defaultDesc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3259,   }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3260,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3261, }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3262,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3302," private void updateNewAutoincrementColumn(Activation activation, String columnName, long initial,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3306,  LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3307,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3529,
java/build/org/apache/derbyBuild/GeneratorBase.java,179,"                ""These notes describe the difference between Derby release "" +"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,217,"        String titleText = ""Release Notes for Derby "" + releaseID;"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,32,import junit.framework.TestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,106,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,493,"  softwareVersion = new DD_Version(this, DataDictionary.DD_VERSION_DERBY_10_7);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,494,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,746,
java/build/org/apache/derbyBuild/javadoc/DiskLayoutTaglet.java,29,"    private String NAME = ""disk_layout"";"
java/build/org/apache/derbyBuild/javadoc/EndFormatTaglet.java,28,"    private String NAME = ""end_format"";"
java/build/org/apache/derbyBuild/javadoc/FormatIdTaglet.java,29,"    private String NAME = ""format_id"";"
java/build/org/apache/derbyBuild/javadoc/PurposeTaglet.java,29,"    private String NAME = ""purpose"";"
java/build/org/apache/derbyBuild/javadoc/UpgradeTaglet.java,29,"    private String NAME = ""upgrade"";"
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,48, * @format_id ACCESS_BTREE_BRANCHCONTROLROW_V1_ID
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,50, * @purpose    Btree pages all have a control row at the front of every page.
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,54, * @upgrade    RESOLVE.
java/engine/org/apache/derby/impl/store/access/btree/BranchControlRow.java,56, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,44, * @format_id ACCESS_BTREE_LEAFCONTROLROW_V1_ID
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,46, * @purpose   Btree pages all have a control row at the front of every page.  To
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,50, * @upgrade   This format was made obsolete in the kimono release.
java/engine/org/apache/derby/impl/store/access/btree/LeafControlRow.java,52, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,79, * @format_id ACCESS_B2I_V3_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,81, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,91, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,123, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,139, * @format_id ACCESS_B2I_V4_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,141, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,150, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,184, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,201, * @format_id ACCESS_B2I_V5_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,203, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,213," * @upgrade   This is the current version, no upgrade necessary."
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,215, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,63, * @format_id ACCESS_B2IUNDO_V1_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,65," * @purpose   Implements the LogicalUndo and Formatable interfaces, basically"
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,69, * @upgrade   RESOLVE.
java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java,71, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,29, * @format_id ACCESS_B2I_V4_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,31, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,40, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_10_3.java,74, * @disk_layout
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,35, * @format_id ACCESS_B2I_V3_ID
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,37, * @purpose   The tag that describes the on disk representation of the B2I
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,47, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/btree/index/B2I_v10_2.java,79, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,78, * @format_id ACCESS_HEAP_V2_ID
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,80, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,90, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,122, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,131, * @format_id ACCESS_HEAP_V3_ID
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,133, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,137, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,149," * @upgrade   This is the current version, no upgrade necessary."
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,151, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,50, * @format_id ACCESS_HEAP_ROW_LOCATION_V1_ID
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,52, * @purpose   Object used to store the location of a row within a Heap table.
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,56, * @upgrade   The type of the btree determines the type of rowlocation stored.
java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java,61, * @disk_layout
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,35, * @format_id ACCESS_HEAP_V2_ID
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,37, * @purpose   The tag that describes the on disk representation of the Heap
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,47, * @upgrade   The format id of this object is currently always read from disk
java/engine/org/apache/derby/impl/store/access/heap/Heap_v10_2.java,79, * @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,44," @format_id none, format implied by AllocPage's format"
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,45, @purpose manage page status of page in extent
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,46, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,47, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java,96, @end_format
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,107, @format_id RAW_STORE_ALLOC_PAGE
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,108, @purpose manage page allocation
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,109, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,110, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java,123, @end_format
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,56, @format_id LOGOP_COPY_ROWS
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,59, @purpose copy some rows from one page to another
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,60, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,61, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,69, @end_format
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,62, @format_id LOGOP_DELETE
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,65, @purpose delete a record from a page.
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,66, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,67, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,75, @end_format
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,52, *  @format_id LOGOP_ENCRYPT_CONTAINER
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,55, * @purpose to record enctyption of container with a new encryption key.
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,56, * @upgrade
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,57, * @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/EncryptContainerOperation.java,59, * @end_format
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,51, @format_id LOGOP_INIT_PAGE
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,54, @purpose initialized a page
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,55, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,56, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,63, @end_format
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,64, @format_id LOGOP_INSERT
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,67, @purpose insert a row onto a page
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,68, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,69, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,75, @end_format
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,49, @format_id LOGOP_INVALIDATE_PAGE
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,52, @purpose invalidate a page
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,53, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,54, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,57, @end_format
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,61," @format_id no format id, an abstract class."
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,62, @purpose provide methods for logical undo
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,63, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,64, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,70, @end_format
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,55, @format_id LOGOP_PAGE_LOGICAL_UNDO
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,58, @purpose undo a logical log operation
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,59, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,60, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,66, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,69," @format_id no format id, an abstract class."
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,70, @purpose provide methods for logical undo
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,71, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,72, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,76, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,50," @format_id no format id, an abstract class."
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,51, @purpose provide methods for physical undo
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,52, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,53, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,55, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,53, @format_id LOGOP_PAGE_PHYSICAL_UNDO
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,56, @purpose update a physiacl log operation
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,57, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,58, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,61, @end_format
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,60, @format_id LOGOP_PURGE
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,63, @purpose purge num_rows from the page
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,64, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,65, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,72, @end_format
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,62, @format_id LOGOP_UPDATE_FIELD
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,65, @purpose update a field of a record on the page
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,66, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,67, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,76, @end_format
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,61, @format_id LOGOP_UPDATE
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,64, @purpose update a record on the page
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,65, @upgrade
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,66, @disk_layout
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,73, @end_format
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,58, @format_id LOGOP_CHECKSUM
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,61, @purpose  checksum one or more log records while writing to disk
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,62, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,63, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/ChecksumOperation.java,67, @end_format
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,74," @format_id no formatId, format is implied by the log file format and the"
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,76, @purpose the log record and optional data
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,77, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,78, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,83, @end_format
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,88," @format_id no formatId, format is implied by the log file format and the"
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,90, @purpose undo a previous log record
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,91, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,92, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/FileLogger.java,102, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,56, @format_id LOG_RECORD
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,59, @purpose The log record described every change to the persistent store
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,60, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,61, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogRecord.java,65, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,149, @format_id FILE_STREAM_LOG_FILE
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,150, @purpose The log control file contains information about which log files
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,152, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,153, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,168, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,175, @format_id FILE_STREAM_LOG_FILE
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,176, @purpose The log file contains log record which record all the changes
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,179, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,180, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,194, @end_format
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,201, @format_id none.  The format is implied by the FILE_STREAM_LOG_FILE
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,202, @purpose The log record wrapper provides information for the log scan.
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,203, @upgrade
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,204, @disk_layout
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,209, @end_format
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,66,"     * status flag is presumably off alread, but we reset it here"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1562,  long pageNumber;  // the page number of the new page
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1570,  long startSearch = lastAllocatedPage;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1635,     allocPage =
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,1636,"                        findAllocPageForAdd(allocHandle, ntt, startSearch);"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2018,  synchronized(allocCache)
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2019,  {
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2020,"   if (pagenum <= allocCache.getLastPageNumber(handle, firstAllocPageNumber) &&"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2021,"    allocCache.getPageStatus(handle, pagenum, firstAllocPageNumber) == AllocExtent.ALLOCATED_PAGE)"
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2022,    retval = true;
java/engine/org/apache/derby/impl/store/raw/data/FileContainer.java,2023,  }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,180,      throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,480,  synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,482,"   // committed and dropped, do nothing."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,483,   // This file container has already been stubbified
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,484,   if (getCommittedDropState()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,485,    clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,486,    return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,487,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,489,"   // The container is about to change, need to wait till it is really"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,490,   // changed.  We are in the predirty state only for the duration
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,491,   // where the log record that changed the container has been sent to
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,492,   // the log and before the change actually happened.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,493,   while(preDirty == true)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,494,   {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,495,    waited = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,496,    try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,497,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,498,     wait();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,499,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,500,    catch (InterruptedException ie)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,501,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,502,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,503,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,504,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,506,   if (waited)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,507,   {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,508,    // someone else may have stubbified this while we waited
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,509,    if (getCommittedDropState())
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,510,    {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,511,     clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,512,     return;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,513,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,514,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,517,   if (forRemove) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,519,    //    removeFile()
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,520,    //    clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,522,   } else if (isDirty()) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,523,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,524,    try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,525,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,526,     // Cannot get the alloc page and write it out
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,527,"     // because in order to do so, the alloc page will need to"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,528,     // find this container object.  But this container object
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,529,     // is in the middle of being cleaned and may not be
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,530,     // 'found' and we will hang.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,531,     //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,532,"     // Instead, just clobber the container info, which is"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,533,     // checksum'ed seperately from the alloc page
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,534,     //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,535,                    writeRAFHeader(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,536,"                        getIdentity(),"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,537,"                        fileData,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,538,"           false,  // don't create, container exists"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,539,           true);  // syncfile
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,540,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,541,     clearDirty();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,542,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,543,    } catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,544,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,545,     throw dataFactory.markCorrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,546,                        StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,547,"                            SQLState.FILE_CONTAINER_EXCEPTION, ioe,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,548,                            getIdentity() != null ?
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,549,"                               getIdentity().toString() : ""unknown"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,550,"                            ""clean"", fileName));"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,551,    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,552,   }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,553,  }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,862,            return AccessController.doPrivileged( this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1037,                            throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,41, * RAFContainer4 overrides a few methods in RAFContainer in an attempt to use
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,42, * FileChannel from Java 1.4's New IO framework to issue multiple IO operations
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,43, * to the same file concurrently instead of strictly serializing IO operations
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,44, * using a mutex on the container object.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,78,    /**
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,82,    private int iosInProgress = 0;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,164,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,194,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,202,"        // If this is the first alloc page, there may be another thread"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,203,        // accessing the container information in the borrowed space on the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,204,"        // same page. In that case, we synchronize the entire method call, just"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,205,"        // like RAFContainer.readPage() does, in order to avoid conflicts. For"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,206,"        // all other pages it is safe to skip the synchronization, since"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,207,        // concurrent threads will access different pages and therefore don't
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,208,        // interfere with each other.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,209,        if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,210,            synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,211,"                readPage0(pageNumber, pageData);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,214,"            readPage0(pageNumber, pageData);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,218,"    private void readPage0(long pageNumber, byte[] pageData)"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,224,                SanityManager.ASSERT(!getCommittedDropState());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,244,"                readFull(pageBuf, ioChannel, pageOffset);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,256,                pageNumber != FIRST_ALLOC_PAGE_NUMBER)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,270,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,279,"        // If this is the first alloc page, there may be another thread"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,280,        // accessing the container information in the borrowed space on the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,281,"        // same page. In that case, we synchronize the entire method call, just"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,282,"        // like RAFContainer.writePage() does, in order to avoid conflicts. For"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,283,"        // all other pages it is safe to skip the synchronization, since"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,284,        // concurrent threads will access different pages and therefore don't
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,285,        // interfere with each other.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,286,        if (pageNumber == FIRST_ALLOC_PAGE_NUMBER) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,287,            synchronized (this) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,288,"                writePage0(pageNumber, pageData, syncPage);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,291,"            writePage0(pageNumber, pageData, syncPage);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,362,"                            SanityManager.DEBUG_PRINT(""RAFContainer4"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,363,"                                ""Write to a dropped and closed container discarded."");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,413,"        } else { // iochannel was not initialized, fall back to original method."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,420,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,441,     *
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,454,            ByteBuffer buffer =
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,455,                    ByteBuffer.allocate(AllocPage.MAX_BORROWED_SPACE);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,456,"            readFull(buffer, ioChannel, offset);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,457,            return buffer.array();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,481,            try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,482,"                if (srcChannel.read(dstBuffer,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,484,                        throw new EOFException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,485,"                            ""Reached end of file while attempting to read a """
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,486,"                            + ""whole page."");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,487,                }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,488,            } catch (ClosedByInterruptException e) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,489,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,490,"                    SQLState.FILE_IO_INTERRUPTED, e);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,511,"            throws IOException, StandardException"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,514,            try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,515,"                dstChannel.write(srcBuffer, position + srcBuffer.position());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,516,            } catch (ClosedByInterruptException e) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,517,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,518,"                    SQLState.FILE_IO_INTERRUPTED, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,2,  Class org.apache.derbyTesting.functionTests.tests.store.Derby151Test
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,40,public class Derby151Test extends BaseJDBCTestCase
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,43,    public Derby151Test(String name)
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,59,            suite.addTestSuite(Derby151Test.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,68,"        TestSuite suite = new TestSuite(""Derby151Test"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,73,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,75,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,77,"            baseSuite(""Derby151Test:embedded""));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,81,"                baseSuite(""Derby151Test:c/s"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,91,"        stmt.executeUpdate(""CREATE TABLE d151(x int primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,102,"        stmt.executeUpdate(""DROP TABLE d151"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,111,    public static void d151() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,116,"            insert = c.prepareStatement(""insert into d151 values (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,118,            for (int i = 0; i < 10000; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,121,                Thread.currentThread().interrupt();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,138,    public void testD151 () throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,141,"            ""create procedure D151 () MODIFIES SQL DATA "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,143,"            "".tests.store.Derby151Test.d151' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,146,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,147,"            s.executeUpdate(""call D151()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,149,"            // We were not able to prokove any error, but that should not fail"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,150,            // the test; the results here may depend on VMs possibly.  So just
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,151,            // report this fact in verbose mode:
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,153,"            println(""Not able to test fix for DERBY-151: No interrupt seen"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,154,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,155,"            assertSQLState(""XSDG9"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java,156,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,60,        suite.addTest(Derby151Test.suite());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,901, synchronized boolean openContainer(ContainerKey newIdentity)
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,908,            boolean success = AccessController.doPrivileged(this) != null;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,909,            if (success) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,910,                currentIdentity = newIdentity;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,911,            }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,924,        {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,718,"            // Another interrupted thread got to do the cleanup before us, so"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,811,                        } catch (Exception newE) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,813,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,814,                            if (InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,815,"                                        ""RAF: isInterrupted during recovery"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,816,"                                        threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,817,                                        hashCode())) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,818,                                continue;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,819,                            } else {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,820,                                // Something else failed - shutdown happening?
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,821,                                synchronized(giveUpIOm) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,822,                                    // Make sure other threads will give up and
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,823,"                                    // throw, too."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,824,                                    giveUpIO = true;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,825,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,826,                                    if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,827,                                        debugTrace(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,828,"                                            ""can't resurrect container: "" +"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,829,                                            newE);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,830,                                    }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,841,                threadsInPageIO++;
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,53,    public IndexStatsUtil(Connection con)
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,54,            throws SQLException {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,56,        Assert.assertTrue(con.getAutoCommit());
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,88,"        assertStatCount(getStats(), ""<ALL>"", expectedCount, false);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,101,"        assertStatCount(getStatsTable(table), table, expectedCount, false);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,114,"        assertStatCount(getStatsIndex(index), index, expectedCount, true);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,115,    }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,116,
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,117,    /**
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,118,     * Asserts that the expected number of statistics exists.
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,119,     *
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,120,     * @param stats statistics
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,121,     * @param conglom conglomerate name
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,122,     * @param expectedCount expected number of statistics
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,123,     * @param isIndex {@code true} if the conglomerate is an index
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,124,     */
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,125,"    private void assertStatCount(IdxStats[] stats, String conglom,"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,126,"                                 int expectedCount, boolean isIndex) {"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,127,        if (stats.length != expectedCount) {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,128,"            String name = (isIndex ? ""index "" : ""table "") + ""'"" + conglom + ""'"";"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,129,"            Assert.assertEquals(buildStatString(stats, name),"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,130,"                    expectedCount, stats.length);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,131,        }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,142,        String SEP =
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,143,"                BaseJDBCTestCase.getSystemProperty(""line.separator"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,166,"                    ""select * from SYS.SYSSTATISTICS"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,184,        if (psGetStatsForTable == null) {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,185,            psGetStatsForTable = con.prepareStatement(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,186,"                ""select * from SYS.SYSSTATISTICS where TABLEID = ?"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,187,        }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,194,"        psGetStatsForTable.setString(1, tableId);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,195,        return buildStatisticsList(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,196,"                psGetStatsForTable.executeQuery(), getIdToNameMap());"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,214,        if (psGetStatsForIndex == null) {
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,215,            psGetStatsForIndex = con.prepareStatement(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,216,"                   ""select * from SYS.SYSSTATISTICS where REFERENCEID = ?"");"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,217,        }
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,224,"        psGetStatsForIndex.setString(1, indexId);"
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,225,        return buildStatisticsList(
java/testing/org/apache/derbyTesting/junit/IndexStatsUtil.java,226,"                psGetStatsForIndex.executeQuery(), getIdToNameMap());"
java/testing/org/apache/derbyTesting/junit/Utilities.java,3, * Derby - Class Utilities
java/testing/org/apache/derbyTesting/junit/Utilities.java,25,import java.io.IOException;
java/testing/org/apache/derbyTesting/junit/Utilities.java,30,import java.security.AccessController;
java/testing/org/apache/derbyTesting/junit/Utilities.java,31,import java.security.PrivilegedActionException;
java/testing/org/apache/derbyTesting/junit/Utilities.java,32,import java.security.PrivilegedExceptionAction;
java/testing/org/apache/derbyTesting/junit/Utilities.java,40, * General non-JDBC related utilities relocated from TestUtil
java/testing/org/apache/derbyTesting/junit/Utilities.java,41, *
java/testing/org/apache/derbyTesting/junit/Utilities.java,42, *
java/testing/org/apache/derbyTesting/junit/Utilities.java,46,    public Utilities() {
java/testing/org/apache/derbyTesting/junit/Utilities.java,47,        // TODO Auto-generated constructor stub
java/testing/org/apache/derbyTesting/junit/Utilities.java,48,    }
java/testing/org/apache/derbyTesting/junit/Utilities.java,49,        /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,50,         * Just converts a string to a hex literal to assist in converting test
java/testing/org/apache/derbyTesting/junit/Utilities.java,51,         * cases that used to insert strings into bit data tables
java/testing/org/apache/derbyTesting/junit/Utilities.java,52,         * Converts using UTF-16BE just like the old casts used to.
java/testing/org/apache/derbyTesting/junit/Utilities.java,53,         *
java/testing/org/apache/derbyTesting/junit/Utilities.java,54,         * @param s  String to convert  (e.g
java/testing/org/apache/derbyTesting/junit/Utilities.java,55,         * @return hex literal that can be inserted into a bit column.
java/testing/org/apache/derbyTesting/junit/Utilities.java,56,         */
java/testing/org/apache/derbyTesting/junit/Utilities.java,57,        public static String stringToHexLiteral(String s)
java/testing/org/apache/derbyTesting/junit/Utilities.java,58,        {
java/testing/org/apache/derbyTesting/junit/Utilities.java,59,                byte[] bytes;
java/testing/org/apache/derbyTesting/junit/Utilities.java,60,                String hexLiteral = null;
java/testing/org/apache/derbyTesting/junit/Utilities.java,61,                try {
java/testing/org/apache/derbyTesting/junit/Utilities.java,62,"                        bytes = s.getBytes(""UTF-16BE"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,63,                        hexLiteral = convertToHexString(bytes);
java/testing/org/apache/derbyTesting/junit/Utilities.java,64,                }
java/testing/org/apache/derbyTesting/junit/Utilities.java,65,                catch (UnsupportedEncodingException ue)
java/testing/org/apache/derbyTesting/junit/Utilities.java,66,                {
java/testing/org/apache/derbyTesting/junit/Utilities.java,67,"                        System.out.println(""This shouldn't happen as UTF-16BE should be supported"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,68,                        ue.printStackTrace();
java/testing/org/apache/derbyTesting/junit/Utilities.java,69,                }
java/testing/org/apache/derbyTesting/junit/Utilities.java,71,                return hexLiteral;
java/testing/org/apache/derbyTesting/junit/Utilities.java,74,        /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,75,         * Convert a byte array to a hex string suitable for insert
java/testing/org/apache/derbyTesting/junit/Utilities.java,76,         * @param buf  byte array to convert
java/testing/org/apache/derbyTesting/junit/Utilities.java,77,         * @return     formated string representing byte array
java/testing/org/apache/derbyTesting/junit/Utilities.java,78,         */
java/testing/org/apache/derbyTesting/junit/Utilities.java,79,        private static String convertToHexString(byte [] buf)
java/testing/org/apache/derbyTesting/junit/Utilities.java,80,        {
java/testing/org/apache/derbyTesting/junit/Utilities.java,81,                StringBuffer str = new StringBuffer();
java/testing/org/apache/derbyTesting/junit/Utilities.java,82,"                str.append(""X'"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,83,                String val;
java/testing/org/apache/derbyTesting/junit/Utilities.java,84,                int byteVal;
java/testing/org/apache/derbyTesting/junit/Utilities.java,85,                for (int i = 0; i < buf.length; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,86,                {
java/testing/org/apache/derbyTesting/junit/Utilities.java,87,                        byteVal = buf[i] & 0xff;
java/testing/org/apache/derbyTesting/junit/Utilities.java,88,                        val = Integer.toHexString(byteVal);
java/testing/org/apache/derbyTesting/junit/Utilities.java,89,                        if (val.length() < 2)
java/testing/org/apache/derbyTesting/junit/Utilities.java,90,"                                str.append(""0"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,91,                        str.append(val);
java/testing/org/apache/derbyTesting/junit/Utilities.java,92,                }
java/testing/org/apache/derbyTesting/junit/Utilities.java,93,"                return str.toString() +""'"";"
java/testing/org/apache/derbyTesting/junit/Utilities.java,96,     /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,97,      * repeatChar is used to create strings of varying lengths.
java/testing/org/apache/derbyTesting/junit/Utilities.java,98,      * called from various tests to test edge cases and such.
java/testing/org/apache/derbyTesting/junit/Utilities.java,99,      *
java/testing/org/apache/derbyTesting/junit/Utilities.java,100,      * @param c             character to repeat
java/testing/org/apache/derbyTesting/junit/Utilities.java,101,      * @param repeatCount   Number of times to repeat character
java/testing/org/apache/derbyTesting/junit/Utilities.java,102,      * @return              String of repeatCount characters c
java/testing/org/apache/derbyTesting/junit/Utilities.java,103,      */
java/testing/org/apache/derbyTesting/junit/Utilities.java,104,"       public static String repeatChar(String c, int repeatCount)"
java/testing/org/apache/derbyTesting/junit/Utilities.java,105,       {
java/testing/org/apache/derbyTesting/junit/Utilities.java,106,        char ch = c.charAt(0);
java/testing/org/apache/derbyTesting/junit/Utilities.java,107,
java/testing/org/apache/derbyTesting/junit/Utilities.java,108,        char[] chArray = new char[repeatCount];
java/testing/org/apache/derbyTesting/junit/Utilities.java,109,        for (int i = 0; i < repeatCount; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,110,        {
java/testing/org/apache/derbyTesting/junit/Utilities.java,111,         chArray[i] = ch;
java/testing/org/apache/derbyTesting/junit/Utilities.java,112,        }
java/testing/org/apache/derbyTesting/junit/Utilities.java,113,
java/testing/org/apache/derbyTesting/junit/Utilities.java,114,        return new String(chArray);
java/testing/org/apache/derbyTesting/junit/Utilities.java,115,
java/testing/org/apache/derbyTesting/junit/Utilities.java,116,       }
java/testing/org/apache/derbyTesting/junit/Utilities.java,117,
java/testing/org/apache/derbyTesting/junit/Utilities.java,118,        /**
java/testing/org/apache/derbyTesting/junit/Utilities.java,119,"         * Print out resultSet in two dimensional array format, for use by"
java/testing/org/apache/derbyTesting/junit/Utilities.java,120,"         * JDBC.assertFullResultSet(rs,expectedRows) expectedRows argument."
java/testing/org/apache/derbyTesting/junit/Utilities.java,121,         * Useful while converting tests to get output in correct format.
java/testing/org/apache/derbyTesting/junit/Utilities.java,122,         *
java/testing/org/apache/derbyTesting/junit/Utilities.java,123,         * @param rs
java/testing/org/apache/derbyTesting/junit/Utilities.java,124,         * @throws SQLException
java/testing/org/apache/derbyTesting/junit/Utilities.java,125,         */
java/testing/org/apache/derbyTesting/junit/Utilities.java,126,        public static void showResultSet(ResultSet rs) throws SQLException {
java/testing/org/apache/derbyTesting/junit/Utilities.java,128,            int row = 0;
java/testing/org/apache/derbyTesting/junit/Utilities.java,129,            boolean next = rs.next();
java/testing/org/apache/derbyTesting/junit/Utilities.java,130,            while (next) {
java/testing/org/apache/derbyTesting/junit/Utilities.java,131,                row++;
java/testing/org/apache/derbyTesting/junit/Utilities.java,132,                ResultSetMetaData rsmd = rs.getMetaData();
java/testing/org/apache/derbyTesting/junit/Utilities.java,133,                int nocols = rsmd.getColumnCount();
java/testing/org/apache/derbyTesting/junit/Utilities.java,134,"                System.out.print(""{"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,135,
java/testing/org/apache/derbyTesting/junit/Utilities.java,136,                for (int i = 0; i < nocols; i++)
java/testing/org/apache/derbyTesting/junit/Utilities.java,137,                {
java/testing/org/apache/derbyTesting/junit/Utilities.java,138,                 String val = rs.getString(i+1);
java/testing/org/apache/derbyTesting/junit/Utilities.java,139,                 if (val == null)
java/testing/org/apache/derbyTesting/junit/Utilities.java,140,"                  System.out.print(""null"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,141,                 else
java/testing/org/apache/derbyTesting/junit/Utilities.java,142,"                  System.out.print(""\"""" + rs.getString(i+1) + ""\"""");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,143,                    if (i == (nocols -1))
java/testing/org/apache/derbyTesting/junit/Utilities.java,144,"                        System.out.print(""}"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,145,                    else
java/testing/org/apache/derbyTesting/junit/Utilities.java,146,"                        System.out.print("","");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,147,
java/testing/org/apache/derbyTesting/junit/Utilities.java,149,                next = rs.next();
java/testing/org/apache/derbyTesting/junit/Utilities.java,150,
java/testing/org/apache/derbyTesting/junit/Utilities.java,151,                if (next)
java/testing/org/apache/derbyTesting/junit/Utilities.java,152,"                    System.out.println("","");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,153,                else
java/testing/org/apache/derbyTesting/junit/Utilities.java,154,"                    System.out.println(""};\n"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,157,
java/testing/org/apache/derbyTesting/junit/Utilities.java,159,     * Calls the public method <code>getInfo</code> of the sysinfo tool within
java/testing/org/apache/derbyTesting/junit/Utilities.java,160,     * this JVM and returns a <code>BufferedReader</code> for reading its
java/testing/org/apache/derbyTesting/junit/Utilities.java,176,                    new InputStreamReader(
java/testing/org/apache/derbyTesting/junit/Utilities.java,177,                            new ByteArrayInputStream(outBytes)));
java/testing/org/apache/derbyTesting/junit/Utilities.java,180,
java/testing/org/apache/derbyTesting/junit/Utilities.java,182,     * <p>Calls the public method <code>getSysInfo()</code> of the Network
java/testing/org/apache/derbyTesting/junit/Utilities.java,195,
java/testing/org/apache/derbyTesting/junit/Utilities.java,199,
java/testing/org/apache/derbyTesting/junit/Utilities.java,205,"     * <code>String.split(String regex)</code>, which is not available"
java/testing/org/apache/derbyTesting/junit/Utilities.java,212,"    static public String[] split(String str, char delim)"
java/testing/org/apache/derbyTesting/junit/Utilities.java,213,    {
java/testing/org/apache/derbyTesting/junit/Utilities.java,214,        if (str == null) {
java/testing/org/apache/derbyTesting/junit/Utilities.java,215,"            throw new NullPointerException(""str can't be null"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,216,        }
java/testing/org/apache/derbyTesting/junit/Utilities.java,217,
java/engine/org/apache/derby/vti/VTITemplate.java,41, when writing a read-only VTI (virtual table interface) or for
java/engine/org/apache/derby/vti/VTITemplate.java,42, the ResultSet returned by executeQuery in read-write VTI classes.
java/engine/org/apache/derby/vti/VTITemplate.java,57, For virtual tables the database engine only calls methods defined
java/engine/org/apache/derby/vti/VTITemplate.java,61, as virtual tables.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4475,        String[][] expRS = new String[][] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4476,"                {"""",""APP"",""GETPCTEST1"",""null"",""null"",""null"",""getpc"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4477,"                {"""",""APP"",""GETPCTEST2"",""null"",""null"",""null"",""getpc"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4478,"                {"""",""APP"",""GETPCTEST3A"",""null"",""null"",""null"",""getpc"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4479,"                {"""",""APP"",""GETPCTEST3B"",""null"",""null"",""null"",""getpc"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4480,"                {"""",""APP"",""GETPCTEST4A"",""null"",""null"",""null"",""getpc4a"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4481,"                {"""",""APP"",""GETPCTEST4B"",""null"",""null"",""null"",""getpc4b"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4482,"                {"""",""APP"",""GETPCTEST4BX"",""null"",""null"",""null"",""getpc4b"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4490,                 new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4492,"                     {"""",""APP"",""GETPCTEST5"",""null"",""null"",""null"",""foo"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4496,        for (int j=0 ; j<2 ; j++)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4497,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4498,            int rowcount = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4499,            while (rowcount < expRS.length){
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4500,                rs[j].next();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4501,"                assertEquals(expRS[rowcount][0], rs[j].getString(1));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4502,"                assertEquals(expRS[rowcount][1], rs[j].getString(2));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4503,"                assertEquals(expRS[rowcount][2], rs[j].getString(3));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4504,                assertNull(rs[j].getString(4));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4505,                assertNull(rs[j].getString(5));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4506,                assertNull(rs[j].getString(6));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4507,                assertTrue(rs[j].getString(7).indexOf(expRS[rowcount][6])>0);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4508,"                assertEquals(expRS[rowcount][7], rs[j].getString(8));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4509,                if (j == 0)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4510,                    assertNotNull(rs[j].getString(9));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4511,                rowcount++;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4512,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4516,        expRS = new String[][] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4517,"                {null,""APP"",""GETPCTEST1"",""OUTB"",""4"",""12"",""VARCHAR"",""3"",""6"",null,null,""1"",null,null,""12"",null,""6"",""1"",""YES"",""genid"",""12"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4518,"                {null,""APP"",""GETPCTEST1"",""A"",""1"",""12"",""VARCHAR"",""3"",""6"",null,null,""1"",null,null,""12"",null,""6"",""2"",""YES"",""genid"",""12"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4519,"                {null,""APP"",""GETPCTEST1"",""B"",""1"",""2"",""NUMERIC"",""5"",""14"",""0"",""10"",""1"",null,null,""2"",null,null,""3"",""YES"",""genid"",""12"",""2""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4520,"                {null,""APP"",""GETPCTEST1"",""C"",""1"",""5"",""SMALLINT"",""5"",""2"",""0"",""10"",""1"",null,null,""5"",null,null,""4"",""YES"",""genid"",""12"",""3""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4521,"                {null,""APP"",""GETPCTEST1"",""E"",""1"",""5"",""SMALLINT"",""5"",""2"",""0"",""10"",""1"",null,null,""5"",null,null,""5"",""YES"",""genid"",""12"",""4""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4522,"                {null,""APP"",""GETPCTEST1"",""F"",""1"",""4"",""INTEGER"",""10"",""4"",""0"",""10"",""1"",null,null,""4"",null,null,""6"",""YES"",""genid"",""12"",""5""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4523,"                {null,""APP"",""GETPCTEST1"",""G"",""1"",""-5"",""BIGINT"",""19"",""40"",""0"",""10"",""1"",null,null,""-5"",null,null,""7"",""YES"",""genid"",""12"",""6""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4524,"                {null,""APP"",""GETPCTEST1"",""H"",""1"",""8"",""DOUBLE"",""52"",""8"",null,""2"",""1"",null,null,""8"",null,null,""8"",""YES"",""genid"",""12"",""7""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4525,"                {null,""APP"",""GETPCTEST1"",""I"",""1"",""8"",""DOUBLE"",""52"",""8"",null,""2"",""1"",null,null,""8"",null,null,""9"",""YES"",""genid"",""12"",""8""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4526,"                {null,""APP"",""GETPCTEST1"",""K"",""1"",""91"",""DATE"",""10"",""6"",""0"",""10"",""1"",null,null,""9"",""1"",null,""10"",""YES"",""genid"",""12"",""9""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4527,"                {null,""APP"",""GETPCTEST1"",""L"",""1"",""92"",""TIME"",""8"",""6"",""0"",""10"",""1"",null,null,""9"",""2"",null,""11"",""YES"",""genid"",""12"",""10""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4528,"                {null,""APP"",""GETPCTEST1"",""T"",""1"",""93"",""TIMESTAMP"",""29"",""16"",""9"",""10"",""1"",null,null,""9"",""3"",null,""12"",""YES"",""genid"",""12"",""11""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4529,"                {null,""APP"",""GETPCTEST2"",""PA"",""1"",""4"",""INTEGER"",""10"",""4"",""0"",""10"",""1"",null,null,""4"",null,null,""1"",""YES"",""genid"",""2"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4530,"                {null,""APP"",""GETPCTEST2"",""PB"",""1"",""-5"",""BIGINT"",""19"",""40"",""0"",""10"",""1"",null,null,""-5"",null,null,""2"",""YES"",""genid"",""2"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4531,"                {null,""APP"",""GETPCTEST3A"",""STRING1"",""1"",""12"",""VARCHAR"",""5"",""10"",null,null,""1"",null,null,""12"",null,""10"",""1"",""YES"",""genid"",""2"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4532,"                {null,""APP"",""GETPCTEST3A"",""STRING2"",""4"",""12"",""VARCHAR"",""5"",""10"",null,null,""1"",null,null,""12"",null,""10"",""2"",""YES"",""genid"",""2"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4533,"                {null,""APP"",""GETPCTEST3B"",""STRING3"",""1"",""12"",""VARCHAR"",""5"",""10"",null,null,""1"",null,null,""12"",null,""10"",""1"",""YES"",""genid"",""2"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4534,"                {null,""APP"",""GETPCTEST3B"",""STRING4"",""2"",""12"",""VARCHAR"",""5"",""10"",null,null,""1"",null,null,""12"",null,""10"",""2"",""YES"",""genid"",""2"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4535,"                {null,""APP"",""GETPCTEST4BX"",""RETPARAM"",""4"",""4"",""INTEGER"",""10"",""4"",""0"",""10"",""1"",null,null,""4"",null,null,""1"",""YES"",""genid"",""1"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4542,                 new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4544,"                     {null,""APP"",""GETPCTEST5"",""INARG"",""1"",""16"",""BOOLEAN"",""1"",""1"",null,null,""1"",null,null,""16"",null,null,""1"",""YES"",""genid"",""3"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4545,"                     {null,""APP"",""GETPCTEST5"",""OUTARG"",""4"",""16"",""BOOLEAN"",""1"",""1"",null,null,""1"",null,null,""16"",null,null,""2"",""YES"",""genid"",""3"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4546,"                     {null,""APP"",""GETPCTEST5"",""INOUTARG"",""2"",""16"",""BOOLEAN"",""1"",""1"",null,null,""1"",null,null,""16"",null,null,""3"",""YES"",""genid"",""3"",""2""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4550,        for (int j=0 ; j<2 ; j++)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4551,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4552,            int rowcount = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4553,            while (rowcount < expRS.length){
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4554,                rs[j].next();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4555,                for (int k=0 ; k<19 ; k++){
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4556,                    if (j == 0 && (k == 14 || k == 15))
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4557,                        assertNull(rs[j].getString(k+1));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4558,                    else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4559,                    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4560,                        // the datetime rows are a little different with odbc.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4561,                        if (j==1 && k==9 && rowcount==9)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4562,                            assertNull(rs[j].getString(k+1));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4563,                        else if (j==1 && k==10 &&
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4564,                                (rowcount==9 || rowcount==10 || rowcount==11))
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4565,"                            assertEquals(""2"",rs[j].getString(k+1));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4566,                        else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4567,"                            assertEquals(expRS[rowcount][k], rs[j].getString(k+1));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4568,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4569,                }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4570,                if (j == 0)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4571,                {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4572,                    // one column more for jdbc...
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4573,                    assertNotNull(rs[j].getString(20));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4574,"                    assertEquals(expRS[rowcount][20], rs[j].getString(21));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4575,"                    assertEquals(expRS[rowcount][21], rs[j].getString(22));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4576,                }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4577,                else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4578,                {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4579,"                    assertEquals(expRS[rowcount][20], rs[j].getString(20));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4580,"                    assertEquals(expRS[rowcount][21], rs[j].getString(21));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4581,                }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4582,                rowcount++;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4585,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4596,"    private String[][] appendArray( String[][] target, String[][] suffix )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4602,        String[][] result = new String[ resultLength ][];
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4603,        for ( int i = 0; i < targetLength; i++ ) { result[ i ] = target[ i ]; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4604,        for ( int i = 0; i < suffixLength; i++ ) { result[ targetLength + i ] = suffix[ i ]; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4822,        String[][] expRS = new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4823,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4824,"                {null,""APP"",""F_GFC_1"","""",""4"",""4"",""INTEGER"",""10"",""4"",""0"",""10"",""1"",null,null,""0"",""YES"",""genid"",""11"",""-1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4825,"                {null,""APP"",""F_GFC_1"",""A"",""1"",""12"",""VARCHAR"",""3"",""6"",null,null,""1"",null,""6"",""1"",""YES"",""genid"",""11"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4826,"                {null,""APP"",""F_GFC_1"",""B"",""1"",""2"",""NUMERIC"",""5"",""14"",""0"",""10"",""1"",null,null,""2"",""YES"",""genid"",""11"",""1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4827,"                {null,""APP"",""F_GFC_1"",""C"",""1"",""5"",""SMALLINT"",""5"",""2"",""0"",""10"",""1"",null,null,""3"",""YES"",""genid"",""11"",""2""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4828,"                {null,""APP"",""F_GFC_1"",""E"",""1"",""1"",""CHAR"",""3"",""6"",null,null,""1"",null,""6"",""4"",""YES"",""genid"",""11"",""3""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4829,"                {null,""APP"",""F_GFC_1"",""F"",""1"",""4"",""INTEGER"",""10"",""4"",""0"",""10"",""1"",null,null,""5"",""YES"",""genid"",""11"",""4""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4830,"                {null,""APP"",""F_GFC_1"",""G"",""1"",""-5"",""BIGINT"",""19"",""40"",""0"",""10"",""1"",null,null,""6"",""YES"",""genid"",""11"",""5""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4831,"                {null,""APP"",""F_GFC_1"",""H"",""1"",""8"",""DOUBLE"",""52"",""8"",null,""2"",""1"",null,null,""7"",""YES"",""genid"",""11"",""6""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4832,"                {null,""APP"",""F_GFC_1"",""I"",""1"",""8"",""DOUBLE"",""52"",""8"",null,""2"",""1"",null,null,""8"",""YES"",""genid"",""11"",""7""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4833,"                {null,""APP"",""F_GFC_1"",""K"",""1"",""91"",""DATE"",""10"",""6"",""0"",""10"",""1"",null,null,""9"",""YES"",""genid"",""11"",""8""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4834,"                {null,""APP"",""F_GFC_1"",""L"",""1"",""92"",""TIME"",""8"",""6"",""0"",""10"",""1"",null,null,""10"",""YES"",""genid"",""11"",""9""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4835,"                {null,""APP"",""F_GFC_1"",""T"",""1"",""93"",""TIMESTAMP"",""29"",""16"",""9"",""10"",""1"",null,null,""11"",""YES"",""genid"",""11"",""10""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4836,            };
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4842,                 new String[][]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4844,"                     {null,""APP"",""F_GFC_2"","""",""4"",""16"",""BOOLEAN"",""1"",""1"",null,null,""1"",null,null,""0"",""YES"",""genid"",""1"",""-1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4845,"                     {null,""APP"",""F_GFC_2"",""A"",""1"",""16"",""BOOLEAN"",""1"",""1"",null,null,""1"",null,null,""1"",""YES"",""genid"",""1"",""0""},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4850,        int rowcount = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4852,"        assertResults( rs, expRS, true );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,4853,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5000,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5001,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5002,     * Assert that the ResultSet returns the desired rows.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5003,     */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5004,"    private void assertResults( ResultSet rs, String[][] rows, boolean trimResults )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5005,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5006,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5007,        int     actualColumnCount = rs.getMetaData().getColumnCount();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5008,        int     rowCount = rows.length;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5009,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5010,        for ( int i = 0; i < rowCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5011,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5012,            String[]    row = rows[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5013,            int             columnCount = row.length;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5014,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5015,            assertTrue( rs.next() );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5016,"            assertEquals( columnCount, actualColumnCount );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5017,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5018,            for ( int j = 0; j < columnCount; j++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5019,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5020,                String  expectedValue =  row[ j ];
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5021,"                //println( ""XXX (row, column ) ( "" + i + "", "" +  j + "" ) should be "" + expectedValue );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5022,                String  actualValue = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5023,                int         column = j+1;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5024,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5025,                actualValue = rs.getString( column );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5026,                if ( rs.wasNull() ) { actualValue = null; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5027,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5028,                if ( (actualValue != null) && trimResults ) { actualValue = actualValue.trim(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5029,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5030,"                assertEquals( (expectedValue == null), rs.wasNull() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5031,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5032,                if ( expectedValue == null )    { assertNull( actualValue ); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5033,"                else if ( ""genid"".equals( expectedValue ) ) { assertTrue( actualValue.startsWith( ""SQL"" ) ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5034,"                else { assertEquals(expectedValue, actualValue); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5035,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5036,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5037,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,5038,
java/engine/org/apache/derby/iapi/types/HarmonySerialBlob.java,3,   Derby - Class org.apache.derby.iapi.types.SQLClob
java/engine/org/apache/derby/iapi/types/HarmonySerialClob.java,3,   Derby - Class org.apache.derby.iapi.types.SQLClob
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,50,import org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,660,"        cs.setClob( 1, new StringColumnVTI.SimpleClob( ""ghi"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,706,"        cs.setClob( 1, new StringColumnVTI.SimpleClob( ""ghi"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,736,        return new StringColumnVTI.SimpleClob( new String( value ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,798,"        cs.setBlob( 1, new StringColumnVTI.SimpleBlob( ""ghi"".getBytes( UTF8 ) ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,844,"        cs.setBlob( 1, new StringColumnVTI.SimpleBlob( ""ghi"".getBytes( UTF8 ) ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,874,        return new StringColumnVTI.SimpleBlob( value );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4117,        inout[0] = new StringColumnVTI.SimpleBlob( retval );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4119,"        out[0] = new StringColumnVTI.SimpleBlob( new byte[] { (byte) 1, (byte) 2, (byte) 3 } );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4123,"        inout[0] = new StringColumnVTI.SimpleClob( in.getSubString( 1L, (int) in.length() ) + inout[0].getSubString( 1L, (int) inout[0].length() ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4124,"        out[0] = new StringColumnVTI.SimpleClob( ""abc"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4137,"        c[ 0 ] = new StringColumnVTI.SimpleClob( ""abc"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4146,        c[ 0 ] = new StringColumnVTI.SimpleClob( new String( outValue ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4173,"        c[ 0 ] = new StringColumnVTI.SimpleBlob( ""abc"".getBytes( UTF8 ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4182,        c[ 0 ] = new StringColumnVTI.SimpleBlob( (new String( outValue )).getBytes( UTF8 ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1284,    public  static  Clob  clob_Clob_String( String a ) { return new StringColumnVTI.SimpleClob( a ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1285,"    public  static  Clob  clob_Clob_String( boolean a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1286,"    public  static  Clob  clob_Clob_String( byte a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1287,"    public  static  Clob  clob_Clob_String( int a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1288,"    public  static  Clob  clob_Clob_String( long a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1289,"    public  static  Clob  clob_Clob_String( float a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1290,"    public  static  Clob  clob_Clob_String( double a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1291,"    public  static  Clob  clob_Clob_String( Boolean a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1292,"    public  static  Clob  clob_Clob_String( Byte a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1293,"    public  static  Clob  clob_Clob_String( Short a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1294,"    public  static  Clob  clob_Clob_String( Long a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1295,"    public  static  Clob  clob_Clob_String( Float a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1296,"    public  static  Clob  clob_Clob_String( Double a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1297,"    public  static  Clob  clob_Clob_String( BigDecimal a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1298,"    public  static  Clob  clob_Clob_String( Date a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1299,"    public  static  Clob  clob_Clob_String( Time a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1300,"    public  static  Clob  clob_Clob_String( Timestamp a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1301,"    public  static  Clob  clob_Clob_String( Clob a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1302,"    public  static  Clob  clob_Clob_String( Blob a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1303,"    public  static  Clob  clob_Clob_String( Object a ) { return new StringColumnVTI.SimpleClob( ""-1"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1311,"    public  static  Blob  blob_Blob_String( String a ) throws Exception { return new StringColumnVTI.SimpleBlob( a.getBytes( ""UTF-8"" ) ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1312,    public  static  Blob  blob_Blob_String( boolean a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1313,    public  static  Blob  blob_Blob_String( byte a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1314,    public  static  Blob  blob_Blob_String( int a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1315,    public  static  Blob  blob_Blob_String( long a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1316,    public  static  Blob  blob_Blob_String( float a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1317,    public  static  Blob  blob_Blob_String( double a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1318,    public  static  Blob  blob_Blob_String( Boolean a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1319,    public  static  Blob  blob_Blob_String( Byte a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1320,    public  static  Blob  blob_Blob_String( Short a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1321,    public  static  Blob  blob_Blob_String( Long a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1322,    public  static  Blob  blob_Blob_String( Float a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1323,    public  static  Blob  blob_Blob_String( Double a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1324,    public  static  Blob  blob_Blob_String( BigDecimal a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1325,    public  static  Blob  blob_Blob_String( Date a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1326,    public  static  Blob  blob_Blob_String( Time a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1327,    public  static  Blob  blob_Blob_String( Timestamp a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1328,    public  static  Blob  blob_Blob_String( Clob a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1329,    public  static  Blob  blob_Blob_String( Blob a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java,1330,    public  static  Blob  blob_Blob_String( Object a ) { return new StringColumnVTI.SimpleBlob( new byte[] { (byte) -1 } ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,1664,    public static Blob makeSimpleBlob()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java,1666,        return new StringColumnVTI.SimpleBlob( new byte[] { 1 } );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,1,/*
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,2,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,3,Derby - Class org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,4,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,5,Licensed to the Apache Software Foundation (ASF) under one or more
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,6,contributor license agreements.  See the NOTICE file distributed with
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,7,this work for additional information regarding copyright ownership.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,8,"The ASF licenses this file to You under the Apache License, Version 2.0"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,9,"(the ""License""); you may not use this file except in compliance with"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,10,the License.  You may obtain a copy of the License at
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,11,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,12,http://www.apache.org/licenses/LICENSE-2.0
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,13,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,14,"Unless required by applicable law or agreed to in writing, software"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,15,"distributed under the License is distributed on an ""AS IS"" BASIS,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,16,"WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,17,See the License for the specific language governing permissions and
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,18,limitations under the License.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,19,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,20,*/
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,21,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,22,package org.apache.derbyTesting.functionTests.tests.lang;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,23,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,24,import java.io.*;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,25,import java.math.BigDecimal;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,26,import java.sql.*;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,27,import java.text.DateFormat;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,28,import java.text.ParseException;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,29,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,30,import org.apache.derby.vti.VTITemplate;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,31,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,32,/**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,33, * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,34, * This is an abstract VTI which assumes that all columns are strings and which
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,35, * coerces the strings to reasonable values for various getXXX()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,36, * methods. Subclasses must implement the following ResultSet methods:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,37, * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,38, *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,39, * <ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,40, * <li>next( )</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,41, * <li>close()</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,42, * <li>getMetaData()</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,43, * </ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,44, *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,45, * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,46, * and the following protected methods introduced by this class:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,47, * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,48, *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,49, * <ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,50, * <li>getRawColumn( int columnNumber )</li>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,51, * </ul>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,52, */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,53,public  abstract    class   StringColumnVTI extends VTITemplate
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,54,{
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,55,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,56,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,57,    // CONSTANTS
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,58,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,59,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,60,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,61,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,62,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,63,    // INNER CLASSES
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,64,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,65,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,66,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,67,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,68,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,69,     * A crude Blob implementation for datatype testing.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,70,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,71,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,72,    public static final class SimpleBlob implements Blob
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,73,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,74,        private byte[] _bytes;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,75,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,76,        public SimpleBlob( byte[] bytes )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,77,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,78,            _bytes = bytes;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,79,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,80,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,81,        public InputStream getBinaryStream()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,82,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,83,            return new ByteArrayInputStream( _bytes );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,84,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,85,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,86,"        public byte[] getBytes( long position, int length )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,87,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,88,            byte[]  result = new byte[ length ];
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,89,"            System.arraycopy( _bytes, ((int) position) - 1, result, 0, length );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,91,            return result;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,92,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,93,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,94,        public long length()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,95,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,96,            if ( _bytes == null ) { return 0L; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,97,            return (long) _bytes.length;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,98,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,99,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,100,"        public long position( Blob pattern, long start ) { return 0L; }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,101,"        public long position( byte[] pattern, long start ) { return 0L; }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,102,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,103,        public boolean equals( Object other )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,104,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,105,            if ( other == null ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,106,            if ( !( other instanceof Blob ) ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,107,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,108,            Blob that = (Blob) other;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,109,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,110,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,111,                if ( this.length() != that.length() ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,112,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,113,                InputStream thisStream = this.getBinaryStream();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,114,                InputStream thatStream = that.getBinaryStream();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,115,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,116,                while( true )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,117,                {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,118,                    int  nextByte = thisStream.read();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,119,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,120,                    if ( nextByte < 0 ) { break; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,121,                    if ( nextByte != thatStream.read() ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,122,                }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,123,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,124,            catch (Exception e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,125,            {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,126,                System.err.println( e.getMessage() );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,127,                e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,128,                return false;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,129,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,130,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,131,            return true;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,132,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,133,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,134,"        public int setBytes(long arg0, byte[] arg1) throws SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,135,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,136,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,137,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,138,"        public int setBytes(long arg0, byte[] arg1, int arg2, int arg3) throws SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,139,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,140,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,141,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,142,        public OutputStream setBinaryStream(long arg0) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,143,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,144,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,145,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,146,        public void truncate(long arg0) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,147,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,148,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,149,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,150,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,151,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,152,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,153,     * A crude Clob implementation.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,154,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,155,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,156,    public static final class SimpleClob implements Clob
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,157,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,158,        private String _contents;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,159,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,160,        public SimpleClob( String contents )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,161,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,162,            _contents = contents;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,163,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,164,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,165,        public InputStream getAsciiStream()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,166,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,167,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,168,"                return new ByteArrayInputStream( _contents.getBytes( ""UTF-8"" ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,169,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,170,            catch (Exception e) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,171,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,172,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,173,        public Reader getCharacterStream()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,174,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,175,            return new CharArrayReader( _contents.toCharArray() );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,176,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,177,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,178,"        public String getSubString( long position, int length )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,179,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,180,"            return _contents.substring( ((int) position) - 1, length );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,181,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,182,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,183,        public long length()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,184,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,185,            if ( _contents == null ) { return 0L; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,186,            return (long) _contents.length();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,187,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,188,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,189,"        public long position( Clob searchstr, long start ) { return 0L; }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,190,"        public long position( String searchstr, long start ) { return 0L; }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,191,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,192,        public boolean equals( Object other )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,193,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,194,            if ( other == null ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,195,            if ( !( other instanceof Clob ) ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,196,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,197,            Clob that = (Clob) other;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,198,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,199,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,200,                if ( this.length() != that.length() ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,201,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,202,                InputStream thisStream = this.getAsciiStream();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,203,                InputStream thatStream = that.getAsciiStream();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,204,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,205,                while( true )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,206,                {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,207,                    int  nextByte = thisStream.read();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,208,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,209,                    if ( nextByte < 0 ) { break; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,210,                    if ( nextByte != thatStream.read() ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,211,                }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,212,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,213,            catch (Exception e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,214,            {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,215,                System.err.println( e.getMessage() );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,216,                e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,217,                return false;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,218,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,219,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,220,            return true;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,221,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,222,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,223,"        public int setString(long arg0, String arg1) throws SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,224,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,225,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,226,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,227,"        public int setString(long arg0, String arg1, int arg2, int arg3) throws SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,228,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,229,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,230,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,231,        public OutputStream setAsciiStream(long arg0) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,232,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,233,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,234,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,235,        public Writer setCharacterStream(long arg0) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,236,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,237,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,238,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,239,        public void truncate(long arg0) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,240,"            throw new SQLException(""not implemented"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,241,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,242,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,243,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,244,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,245,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,246,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,247,    // STATE
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,248,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,249,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,250,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,251,    private String[]      _columnNames;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,252,    private boolean _lastColumnWasNull;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,253,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,254,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,255,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,256,    // StringColumnVTI BEHAVIOR TO BE IMPLEMENTED BY SUBCLASSES
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,257,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,258,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,259,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,260,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,261,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,262,     * Get the string value of the column in the current row identified by the 1-based columnNumber.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,263,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,264,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,265,    protected  abstract    String  getRawColumn( int columnNumber ) throws SQLException;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,266,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,267,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,268,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,269,    // CONSTRUCTORS
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,270,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,271,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,272,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,273,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,274,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,275,     * Build a StringColumnVTI with the given column names
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,276,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,277,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,278,    public  StringColumnVTI( String[] columnNames )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,279,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,280,        _columnNames = columnNames;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,281,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,282,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,283,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,284,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,285,    // ResultSet BEHAVIOR
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,286,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,287,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,288,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,289,    public boolean wasNull() throws SQLException { return _lastColumnWasNull; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,290,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,291,    public int findColumn( String columnName ) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,292,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,293,        int     count = _columnNames.length;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,294,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,295,        for ( int i = 0; i < count; i++ ) { if ( _columnNames[ i ].equals( columnName ) ) { return i+1; } }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,296,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,297,"        throw new SQLException( ""Unknown column name."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,298,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,299,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,300,    public String getString(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,301,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,302,        String  columnValue = getRawColumn( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,303,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,304,        checkNull( columnValue );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,305,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,306,        return columnValue;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,307,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,308,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,309,    public boolean getBoolean(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,310,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,311,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,312,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,313,        if ( columnValue == null ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,314,        else { return Boolean.valueOf( columnValue ).booleanValue(); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,315,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,316,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,317,    public byte getByte(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,318,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,319,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,320,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,321,        if ( columnValue == null ) { return (byte) 0; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,322,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,323,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,324,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,325,                return Byte.valueOf( columnValue ).byteValue();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,326,            } catch (NumberFormatException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,327,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,328,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,329,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,330,    public short getShort(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,331,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,332,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,333,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,334,        if ( columnValue == null ) { return (short) 0; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,335,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,336,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,337,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,338,                return Short.valueOf( columnValue ).shortValue();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,339,            } catch (NumberFormatException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,340,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,341,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,342,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,343,    public int getInt(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,344,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,345,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,346,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,347,        if ( columnValue == null ) { return 0; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,348,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,349,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,350,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,351,                return Integer.valueOf( columnValue ).intValue();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,352,            } catch (NumberFormatException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,353,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,354,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,355,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,356,    public long getLong(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,357,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,358,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,359,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,360,        if ( columnValue == null ) { return (long) 0; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,361,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,362,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,363,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,364,                return Long.valueOf( columnValue ).longValue();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,365,            } catch (NumberFormatException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,366,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,367,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,368,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,369,   public float getFloat(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,370,   {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,371,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,372,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,373,        if ( columnValue == null ) { return (float) 0; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,374,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,375,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,376,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,377,                return Float.valueOf( columnValue ).floatValue();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,378,            } catch (NumberFormatException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,379,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,380,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,381,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,382,    public double getDouble(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,383,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,384,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,385,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,386,        if ( columnValue == null ) { return (double) 0; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,387,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,388,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,389,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,390,                return Double.valueOf( columnValue ).doubleValue();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,391,            } catch (NumberFormatException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,392,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,393,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,394,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,395,    public BigDecimal getBigDecimal(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,396,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,397,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,398,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,399,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,400,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,401,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,402,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,403,                return new BigDecimal( columnValue );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,404,            } catch (NumberFormatException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,405,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,406,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,407,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,408,    public byte[] getBytes(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,409,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,410,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,411,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,412,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,413,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,414,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,415,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,416,"                return columnValue.getBytes( ""UTF-8"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,417,            } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,418,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,419,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,420,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,421,    public java.sql.Date getDate(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,422,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,423,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,424,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,425,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,426,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,427,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,428,            return new Date( parseDateTime( columnValue ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,429,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,430,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,431,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,432,    public java.sql.Time getTime(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,433,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,434,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,435,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,436,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,437,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,438,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,439,            return new Time( parseDateTime( columnValue ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,440,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,441,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,442,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,443,    public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,444,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,445,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,446,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,447,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,448,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,449,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,450,            return new Timestamp( parseDateTime( columnValue ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,451,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,452,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,453,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,454,    public InputStream getAsciiStream(int columnIndex) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,455,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,456,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,457,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,458,"        return getEncodedStream( columnValue, ""US-ASCII"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,459,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,460,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,461,    public java.io.InputStream getBinaryStream(int columnIndex)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,462,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,463,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,464,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,465,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,466,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,467,        else { return new ByteArrayInputStream( getBytes( columnIndex ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,468,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,469,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,470,    public Blob getBlob(int columnIndex)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,471,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,472,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,473,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,474,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,475,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,476,        else { return new SimpleBlob( getBytes( columnIndex ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,477,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,478,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,479,    public Clob getClob(int columnIndex)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,480,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,481,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,482,        String  columnValue = getString( columnIndex );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,483,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,484,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,485,        { return new SimpleClob( getString( columnIndex ) ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,486,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,487,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,488,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,489,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,490,    // MINIONS
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,491,    //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,492,    ///////////////////////////////////////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,493,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,494,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,495,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,496,     * Set the wasNull flag based on whether this column value turned out to be null.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,497,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,498,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,499,    private void checkNull( String columnValue )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,500,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,501,        _lastColumnWasNull = ( columnValue == null );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,502,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,503,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,504,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,505,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,506,     * Wrap an exception in a SQLException.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,507,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,508,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,509,    private SQLException wrap( Throwable t )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,510,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,511,        return new SQLException( t.getMessage() );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,512,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,513,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,514,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,515,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,516,     * Translate a date/time expression into the corresponding long number of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,517,     * milliseconds.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,518,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,519,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,520,    private long parseDateTime( String columnValue  )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,521,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,522,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,523,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,524,            DateFormat      df = DateFormat.getDateTimeInstance();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,525,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,526,            java.util.Date  rawDate = df.parse( columnValue );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,527,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,528,            return rawDate.getTime();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,529,        } catch (ParseException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,530,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,531,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,532,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,533,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,534,     * Turn a string into an appropriately encoded ByteArrayInputStream.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,535,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,536,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,537,"    private InputStream getEncodedStream( String columnValue, String encoding  )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,538,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,539,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,540,        if ( columnValue == null ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,541,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,542,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,543,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,544,                byte[]      rawBytes = columnValue.getBytes( encoding );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,545,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,546,                return new ByteArrayInputStream( rawBytes );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,547,            } catch (UnsupportedEncodingException e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,548,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,549,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,550,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java,551,}
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java,309,       String[]        columnNames = getColumnNames();
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java,310,        int                 columnCount = columnNames.length;
java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java,317,            String      columnName = columnNames[ i ];
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,71,    // ResultSet BEHAVIOR
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,80,    public String getString(int columnIndex) throws SQLException
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,82,        String  columnValue = super.getString( columnIndex );
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,84,"        if ( ""-"".equals( columnValue ) )"
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,85,        {
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,86,            setWasNull();
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,87,            return null;
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,88,        }
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/DerbyJiraReportVTI.java,84,"        if ( !""key"".equals( getColumnNames()[ columnIndex - 1 ] ) )"
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,305,   int errorSeverity = error instanceof StandardException ?
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,306,    ((StandardException) error).getSeverity() :
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,307,    ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/impl/jdbc/LOBInputStream.java,33,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/impl/jdbc/LOBOutputStream.java,30,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,40,import org.apache.derby.shared.common.error.ExceptionUtil;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,1,/*
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,2,   Derby - Class org.apache.derby.iapi.error.ExceptionUtil
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,3,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,4,   Licensed to the Apache Software Foundation (ASF) under one or more
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,5,   contributor license agreements.  See the NOTICE file distributed with
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,6,   this work for additional information regarding copyright ownership.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,7,"   The ASF licenses this file to you under the Apache License, Version 2.0"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,8,"   (the ""License""); you may not use this file except in compliance with"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,9,   the License.  You may obtain a copy of the License at
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,10,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,11,      http://www.apache.org/licenses/LICENSE-2.0
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,12,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,13,"   Unless required by applicable law or agreed to in writing, software"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,14,"   distributed under the License is distributed on an ""AS IS"" BASIS,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,15,"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,16,   See the License for the specific language governing permissions and
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,17,   limitations under the License.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,18,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,19, */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,20,package org.apache.derby.iapi.error;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,21,/* Until DERBY-289 related issue settle for shared code
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,22, * Engine have similar code as client code even though some of
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,23," * code is potentially sharable. If you fix a bug in ExceptionUtil for engine,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,24, * please also change the code in
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,25, * java/shared/org/apache/derby/shared/common/error/ExceptionUtil.java for
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,26, * client if necessary.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,27, */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,28,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,29,import java.io.PrintWriter;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,30,import java.io.StringWriter;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,31,import java.lang.reflect.InvocationTargetException;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,32,import java.lang.reflect.Method;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,33,import java.security.AccessControlException;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,34,import java.security.AccessController;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,35,import java.security.PrivilegedActionException;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,36,import java.security.PrivilegedExceptionAction;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,37,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,38,import org.apache.derby.shared.common.error.ExceptionSeverity;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,39,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,40,/**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,41, * This class provides utility routines for exceptions
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,42, */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,43,public class ExceptionUtil
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,44,{
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,45,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,46,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,47,    /**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,48,     *  Convert a message identifier from
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,49,     *  org.apache.derby.shared.common.reference.SQLState to
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,50,     *  a SQLState five character string.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,51,     *
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,52,     * @param messageID - the sql state id of the message from Derby
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,53,     * @return String   - the 5 character code of the SQLState ID to returned to the user
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,54,     */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,55,    public static String getSQLStateFromIdentifier(String messageID) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,56,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,57,        if (messageID.length() == 5)
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,58,            return messageID;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,59,"        return messageID.substring(0, 5);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,60,    }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,61,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,62,    /**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,63,     * Get the severity given a message identifier from SQLState.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,64,     */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,65,    public static int getSeverityFromIdentifier(String messageID) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,66,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,67,        int lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,68,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,69,        switch (messageID.length()) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,70,        case 5:
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,71,            switch (messageID.charAt(0)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,72,            case '0':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,73,                switch (messageID.charAt(1)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,74,                case '1':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,75,                    lseverity = ExceptionSeverity.WARNING_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,76,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,77,                case 'A':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,78,                case '7':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,79,                    lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,80,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,81,                case '8':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,82,                    lseverity = ExceptionSeverity.SESSION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,83,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,84,                }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,85,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,86,            case '2':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,87,            case '3':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,88,                lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,89,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,90,            case '4':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,91,                switch (messageID.charAt(1)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,92,                case '0':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,93,                    lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,94,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,95,                case '2':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,96,                    lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,97,                    break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,98,                }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,99,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,100,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,101,            break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,102,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,103,        default:
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,104,            switch (messageID.charAt(6)) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,105,            case 'M':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,106,                lseverity = ExceptionSeverity.SYSTEM_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,107,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,108,            case 'D':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,109,                lseverity = ExceptionSeverity.DATABASE_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,110,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,111,            case 'C':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,112,                lseverity = ExceptionSeverity.SESSION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,113,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,114,            case 'T':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,115,                lseverity = ExceptionSeverity.TRANSACTION_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,116,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,117,            case 'S':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,118,                lseverity = ExceptionSeverity.STATEMENT_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,119,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,120,            case 'U':
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,121,                lseverity = ExceptionSeverity.NO_APPLICABLE_SEVERITY;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,122,                break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,123,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,124,            break;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,125,        }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,126,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,127,        return lseverity;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,128,    }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,129,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,130,    /**
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,131,     * Dumps stack traces for all the threads if the JVM supports it.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,132,"     * The result is returned as a string, ready to print."
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,133,     *
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,134,     * If the JVM doesn't have the method Thread.getAllStackTraces
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,135,"     * i.e, we are on a JVM < 1.5, or  if we don't have the permissions:"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,136,"     * java.lang.RuntimePermission ""getStackTrace"" and ""modifyThreadGroup"","
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,137,     * a message saying so is returned instead.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,138,     *
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,139,     * @return stack traces for all live threads as a string or an error message.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,140,     */
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,141,    public static String dumpThreads() {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,142,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,143,        StringWriter out = new StringWriter();
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,144,"        PrintWriter p = new PrintWriter(out, true);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,145,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,146,        //Try to get a thread dump and deal with various situations.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,147,        try {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,148,            //This checks that we are on a jvm >= 1.5 where we
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,149,            //can actually do threaddumps.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,150,"            Thread.class.getMethod(""getAllStackTraces"", new Class[] {});"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,151,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,152,            //Then get the thread dump.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,153,"            Class c = Class.forName(""org.apache.derby.iapi.error.ThreadDump"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,154,"            final Method m = c.getMethod(""getStackDumpString"",new Class[] {});"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,155,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,156,            String dump;
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,157,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,158,            dump = (String) AccessController.doPrivileged
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,159,            (new PrivilegedExceptionAction(){
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,160,                public Object run() throws
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,161,"                IllegalArgumentException,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,162,"                IllegalAccessException,"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,163,                InvocationTargetException{
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,164,"                    return m.invoke(null, null);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,165,                }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,166,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,167,            );
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,168,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,169,            //Print the dump to the message string. That went OK.
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,170,"            p.print(""---------------\nStack traces for all "" +"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,171,"            ""live threads:"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,172,"            p.println(""\n"" + dump);"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,173,"            p.println(""---------------"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,174,        } catch (NoSuchMethodException e) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,175,"            p.println(""(Skipping thread dump because it is not "" +"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,176,"            ""supported on JVM 1.4)"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,177,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,178,        } catch (Exception e) {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,179,            if (e instanceof PrivilegedActionException &&
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,180,                e.getCause() instanceof InvocationTargetException &&
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,181,                e.getCause().getCause() instanceof AccessControlException){
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,182,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,183,"                p.println(""(Skipping thread dump """
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,184,"                        + ""because of insufficient permissions:\n"""
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,185,"                        + e.getCause().getCause() + "")\n"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,186,            } else {
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,187,"                p.println(""\nAssertFailure tried to do a thread dump, but """
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,188,"                        + ""there was an error:"");"
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,189,                e.getCause().printStackTrace(p);
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,190,            }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,191,        }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,192,        return out.toString();
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,193,    }
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,194,
java/engine/org/apache/derby/iapi/error/ExceptionUtil.java,195,}
java/engine/org/apache/derby/iapi/error/ThreadDump.java,1,/*
java/engine/org/apache/derby/iapi/error/ThreadDump.java,2,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,3,   Derby - Class org.apache.derby.iapi.error.ThreadDump
java/engine/org/apache/derby/iapi/error/ThreadDump.java,4,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,5,   Licensed to the Apache Software Foundation (ASF) under one or more
java/engine/org/apache/derby/iapi/error/ThreadDump.java,6,   contributor license agreements.  See the NOTICE file distributed with
java/engine/org/apache/derby/iapi/error/ThreadDump.java,7,   this work for additional information regarding copyright ownership.
java/engine/org/apache/derby/iapi/error/ThreadDump.java,8,"   The ASF licenses this file to you under the Apache License, Version 2.0"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,9,"   (the ""License""); you may not use this file except in compliance with"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,10,   the License.  You may obtain a copy of the License at
java/engine/org/apache/derby/iapi/error/ThreadDump.java,11,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,12,      http://www.apache.org/licenses/LICENSE-2.0
java/engine/org/apache/derby/iapi/error/ThreadDump.java,13,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,14,"   Unless required by applicable law or agreed to in writing, software"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,15,"   distributed under the License is distributed on an ""AS IS"" BASIS,"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,16,"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/engine/org/apache/derby/iapi/error/ThreadDump.java,17,   See the License for the specific language governing permissions and
java/engine/org/apache/derby/iapi/error/ThreadDump.java,18,   limitations under the License.
java/engine/org/apache/derby/iapi/error/ThreadDump.java,19,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,20, */
java/engine/org/apache/derby/iapi/error/ThreadDump.java,21,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,22,package org.apache.derby.iapi.error;
java/engine/org/apache/derby/iapi/error/ThreadDump.java,23,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,24,/* Until DERBY-289 related issue settle for shared code
java/engine/org/apache/derby/iapi/error/ThreadDump.java,25, * Engine have similar code as client code even though some of
java/engine/org/apache/derby/iapi/error/ThreadDump.java,26," * code is potentially sharable. If you fix a bug in ThreadDump for engine,"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,27, * please also change the code in
java/engine/org/apache/derby/iapi/error/ThreadDump.java,28, * java/shared/org/apache/derby/shared/common/sanity/ThreadDump.java for
java/engine/org/apache/derby/iapi/error/ThreadDump.java,29, * client if necessary.
java/engine/org/apache/derby/iapi/error/ThreadDump.java,30, */
java/engine/org/apache/derby/iapi/error/ThreadDump.java,31,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,32,import java.util.Map;
java/engine/org/apache/derby/iapi/error/ThreadDump.java,33,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,34,public class ThreadDump {
java/engine/org/apache/derby/iapi/error/ThreadDump.java,35,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,36,    /**
java/engine/org/apache/derby/iapi/error/ThreadDump.java,37,     *
java/engine/org/apache/derby/iapi/error/ThreadDump.java,38,     * @return A string representation of a full thread dump
java/engine/org/apache/derby/iapi/error/ThreadDump.java,39,     */
java/engine/org/apache/derby/iapi/error/ThreadDump.java,40,    public static String getStackDumpString() {
java/engine/org/apache/derby/iapi/error/ThreadDump.java,41,        StringBuffer sb = new StringBuffer();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,42,"        Map<Thread, StackTraceElement[]> st = Thread.getAllStackTraces();"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,43,"        for (Map.Entry<Thread, StackTraceElement[]> e : st.entrySet()) {"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,44,            StackTraceElement[] lines = e.getValue();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,45,            Thread t = e.getKey();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,46,"            sb.append(""Thread name="" + t.getName() + "" id="" + t.getId()"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,47,"                    + "" priority="" + t.getPriority() + "" state="" + t.getState()"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,48,"                    + "" isdaemon="" + t.isDaemon() + ""\n"");"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,49,            for (int i = 0; i < lines.length; i++) {
java/engine/org/apache/derby/iapi/error/ThreadDump.java,50,"                sb.append(""\t"" + lines[i] + ""\n"");"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,51,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,52,            }
java/engine/org/apache/derby/iapi/error/ThreadDump.java,53,"            sb.append(""\n"");"
java/engine/org/apache/derby/iapi/error/ThreadDump.java,54,        }
java/engine/org/apache/derby/iapi/error/ThreadDump.java,55,        return sb.toString();
java/engine/org/apache/derby/iapi/error/ThreadDump.java,56,    }
java/engine/org/apache/derby/iapi/error/ThreadDump.java,57,
java/engine/org/apache/derby/iapi/error/ThreadDump.java,58,}
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1392,    String getPhysicalDatabaseName(String logicalName) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,82,    private Object channelCleanupMonitor = new Object();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,665,"                        // Max 60s, then give up, probably way too long anyway,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,718,"     * @return true if we did it, false if we saw someone else do it and"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,884,                SanityManager.ASSERT(Thread.currentThread().holdsLock(this));
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,886,                SanityManager.ASSERT(!Thread.currentThread().holdsLock(this));
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1068,        boolean beforeOpen = srcChannel.isOpen();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1069,        boolean beforeInterrupted = Thread.currentThread().isInterrupted();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1070,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1108,        boolean beforeOpen = dstChannel.isOpen();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1109,        boolean beforeInterrupted = Thread.currentThread().isInterrupted();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,1110,
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,125,    private final String text;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,33,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,43,import org.apache.derby.impl.sql.execute.DropTriggerConstantAction;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,311,  * Get the trigger action sps
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,414,   referencedColInts = new int[triggerCols.size()];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,434,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,435,    referencedColInts[i] = cd.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,437,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,438,   // sort the list
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,439,   java.util.Arrays.sort(referencedColInts);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,470, **  DELETE FROM t WHERE c = old.c
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,472, **  DELETE FROM t WHERE c = org.apache.derby.iapi.db.Factory::
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,473, **     getTriggerExecutionContext().getOldRow().getInt('C');
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,475, **  DELETE FROM t WHERE c in (SELECT c FROM OLD)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,477, **  DELETE FROM t WHERE c in (SELECT c FROM new TriggerOldTransitionTable OLD)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,503, ** More information on step 4 above.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,504, ** DERBY-1482 One of the work done by this method for row level triggers
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,505, ** is to find the columns which are referenced in the trigger action
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,506, ** through the REFERENCES clause ie thro old/new transition variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,507, ** This information will be saved in SYSTRIGGERS so it can be retrieved
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,508, ** during the trigger execution time. The purpose of this is to recognize
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,509, ** what columns from the trigger table should be read in during trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,510," ** execution. Before these code change, during trigger execution, Derby"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,511, ** was opting to read all the columns from the trigger table even if they
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,512, ** were not all referenced during the trigger execution. This caused Derby
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,513, ** to run into OOM at times when it could really be avoided.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,514, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,515, ** We go through the trigger action text and collect the column positions
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,516, ** of all the REFERENCEd columns through new/old transition variables. We
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,517," ** keep that information in SYSTRIGGERS. At runtime, when the trigger is"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,518," ** fired, we will look at this information along with trigger columns from"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,519, ** the trigger definition and only fetch those columns into memory rather
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,520, ** than all the columns from the trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,521, ** This is especially useful when the table has LOB columns and those
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,522, ** columns are not referenced in the trigger action and are not recognized
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,523," ** as trigger columns. For such cases, we can avoid reading large values of"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,524, ** LOB columns into memory and thus avoiding possibly running into OOM
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,525, ** errors.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,526, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,527," ** If there are no trigger columns defined on the trigger, we will read all"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,528, ** the columns from the trigger table when the trigger fires because no
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,529, ** specific columns were identified as trigger column by the user. The
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,530, ** other case where we will opt to read all the columns are when trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,531, ** columns and REFERENCING clause is identified for the trigger but there
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,532, ** is no trigger action column information in SYSTRIGGERS. This can happen
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,533, ** for triggers created prior to 10.7 release and later that database got
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,534, ** hard/soft-upgraded to 10.7 or higher release.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,542,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,543,  //Total Number of columns in the trigger table
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,544,  int numberOfColsInTriggerTable = triggerTableDescriptor.getNumberOfColumns();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,546,  StringBuffer newText = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,547,  boolean regenNode = false;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,549,  if (isRow)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,550,  {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,552,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,553,   //The purpose of following array(triggerActionColsOnly) is to
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,554,   //identify all the columns from the trigger action which are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,555,"   //referenced though old/new transition variables(in other words,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,556,   //accessed through the REFERENCING clause section of
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,557,   //CREATE TRIGGER sql). This array will be initialized to -1 at the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,558,"   //beginning. By the end of this method, all the columns referenced"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,559,   //by the trigger action through the REFERENCING clause will have
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,560,   //their column positions in the trigger table noted in this array.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,562,"   //CREATE TABLE table1 (c11 int, c12 int, c13 int, c14 int, c15 int);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,563,"   //CREATE TABLE table2 (c21 int, c22 int, c23 int, c24 int, c25 int);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,567,"   //For the trigger above, triggerActionColsOnly will finally have"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,568,"   //[-1,-1,-1,4,-1]. We will note all the entries for this array"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,569,   //which are not -1 into SYSTRIGGERS(-1 indiciates columns with
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,570,   //those column positions from the trigger table are not being
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,571,   //referenced in the trigger action through the old/new transition
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,572,   //variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,573,   int[] triggerActionColsOnly = new int[numberOfColsInTriggerTable];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,574,   for (int i=0; i < numberOfColsInTriggerTable; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,575,    triggerActionColsOnly[i]=-1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,577,   //The purpose of following array(triggerColsAndTriggerActionCols)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,578,   //is to identify all the trigger columns and all the columns from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,579,   //the trigger action which are referenced though old/new
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,580,"   //transition variables(in other words, accessed through the"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,581,   //REFERENCING clause section of CREATE TRIGGER sql). This array
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,582,   //will be initialized to -1 at the beginning. By the end of this
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,583,"   //method, all the columns referenced by the trigger action"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,584,   //through the REFERENCING clause and all the trigger columns will
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,585,   //have their column positions in the trigger table noted in this
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,586,   //array.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,587,   //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,588,   //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,589,   //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,590,   //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,591,"   //For the trigger above, triggerColsAndTriggerActionCols will"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,592,"   //finally have [-1,2,-1,4,-1] This list will include all the"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,593,   //columns that need to be fetched into memory during trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,594,   //execution. All the columns with their entries marked -1 will
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,595,   //not be read into memory because they are not referenced in the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,596,   //trigger action through old/new transition variables and they are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,597,   //not recognized as trigger columns.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,598,   int[] triggerColsAndTriggerActionCols = new int[numberOfColsInTriggerTable];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,599,   for (int i=0; i < numberOfColsInTriggerTable; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,600,    triggerColsAndTriggerActionCols[i]=-1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,601,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,602,   if (triggerCols == null || triggerCols.size() == 0) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,603,    //This means that even though the trigger is defined at row
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,604,"    //level, it is either an INSERT/DELETE trigger. Or it is an"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,605,    //UPDATE trigger with no specific column(s) identified as the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,606,"    //trigger column(s). In these cases, Derby is going to read all"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,607,    //the columns from the trigger table during trigger execution.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,608,    //eg of an UPDATE trigger with no specific trigger column(s)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,609,    // CREATE TRIGGER tr1 AFTER UPDATE ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,612,    for (int i=0; i < numberOfColsInTriggerTable; i++) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,613,     triggerColsAndTriggerActionCols[i]=i+1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,614,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,615,   } else {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,616,"    //This is the most interesting case for us. If we are here,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,617,    //then it means that the trigger is defined at the row level
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,618,    //and a set of trigger columns are specified in the CREATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,619,    //TRIGGER statement. This can only happen for an UPDATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,620,    //trigger.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,621,    //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,622,    //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,623,    //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,624,    //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,625,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,626,    for (int i=0; i < triggerCols.size(); i++){
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,627,     rc = (ResultColumn)triggerCols.elementAt(i);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,628,     ColumnDescriptor cd = triggerTableDescriptor.getColumnDescriptor(rc.getName());
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,629,     //Following will catch the case where an invalid trigger column
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,630,     //has been specified in CREATE TRIGGER statement.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,631,     //CREATE TRIGGER tr1 AFTER UPDATE OF c1678 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,632,     //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,633,     //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,634,     if (cd == null)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,635,     {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,636,"      throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,637,"                 rc.getName(),"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,638,                 tableName);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,639,     }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,640,     //Make a note of this trigger column's column position in
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,641,     //triggerColsAndTriggerActionCols. This will tell us that
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,642,     //this column needs to be read in when the trigger fires.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,643,"     //eg for the CREATE TRIGGER below, we will make a note of"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,644,     //column c12's position in triggerColsAndTriggerActionCols
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,645,     //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,646,     //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,647,     //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,648,     //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,649,     triggerColsAndTriggerActionCols[cd.getPosition()-1]=cd.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,650,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,651,   }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,652,"   //By this time, we have collected the positions of the trigger"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,653,   //columns in array triggerColsAndTriggerActionCols. Now we need
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,654,   //to start looking at the columns in trigger action to collect
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,655,   //all the columns referenced through REFERENCES clause. These
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,656,   //columns will be noted in triggerColsAndTriggerActionCols and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,657,   //triggerActionColsOnly arrays.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,658,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,659,   CollectNodesVisitor visitor = new CollectNodesVisitor(ColumnReference.class);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,660,   actionNode.accept(visitor);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,661,   Vector refs = visitor.getList();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,662,"   /* we need to sort on position in string, beetle 4324"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,663,    */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,664,"   QueryTreeNode[] cols = sortRefs(refs, true);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,665,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,666,"   //At the end of the for loop below, we will have both arrays"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,667,   //triggerColsAndTriggerActionCols & triggerActionColsOnly
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,668,   //filled up with the column positions of the columns which are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,669,   //either trigger columns or triger action columns which are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,670,   //referenced through old/new transition variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,671,   //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,672,   //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,673,   //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,674,   //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,675,"   //For the above trigger, before the for loop below, the contents"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,676,   //of the 2 arrays will be as follows
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,677,"   //triggerActionColsOnly [-1,-1,-1,-1,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,678,"   //triggerColsAndTriggerActionCols [-1,2,-1,-1,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,679,"   //After the for loop below, the 2 arrays will look as follows"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,680,"   //triggerActionColsOnly [-1,-1,-1,4,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,681,"   //triggerColsAndTriggerActionCols [-1,2,-1,4,-1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,682,   //If the database is at 10.6 or earlier version(meaning we are in
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,683,"   //soft-upgrade mode), then we do not want to collect any"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,684,   //information about trigger action columns. The collection and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,685,   //usage of trigger action columns was introduced in 10.7 DERBY-1482
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,686,   boolean in10_7_orHigherVersion =
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,687,     getLanguageConnectionContext().getDataDictionary().checkVersion(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,688,"       DataDictionary.DD_VERSION_DERBY_10_7,null);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,689,   for (int i = 0; i < cols.length; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,690,   {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,691,    ColumnReference ref = (ColumnReference) cols[i];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,692,    /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,693,    ** Only occurrences of those OLD/NEW transition tables/variables
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,694,    ** are of interest here.  There may be intermediate nodes in the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,695,    ** parse tree that have its own RCL which contains copy of
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,696,    ** column references(CR) from other nodes. e.g.:
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,697,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,698,    ** CREATE TRIGGER tt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,699,    ** AFTER INSERT ON x
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,700,    ** REFERENCING NEW AS n
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,701,    ** FOR EACH ROW
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,702,"    **    INSERT INTO y VALUES (n.i), (999), (333);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,703,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,704,    ** The above trigger action will result in InsertNode that
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,705,    ** contains a UnionNode of RowResultSetNodes.  The UnionNode
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,706,    ** will have a copy of the CRs from its left child and those CRs
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,707,    ** will not have its beginOffset set which indicates they are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,708,"    ** not relevant for the conversion processing here, so we can"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,709,    ** safely skip them.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,710,    */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,711,    if (ref.getBeginOffset() == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,712,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,713,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,714,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,715,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,716,    TableName tableName = ref.getTableNameNode();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,717,    if ((tableName == null) ||
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,718,     ((oldTableName == null || !oldTableName.equals(tableName.getTableName())) &&
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,719,     (newTableName == null || !newTableName.equals(tableName.getTableName()))))
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,720,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,721,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,722,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,723,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,724,    if (tableName.getBeginOffset() == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,725,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,726,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,727,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,728,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,729,    checkInvalidTriggerReference(tableName.getTableName());
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,730,    String colName = ref.getColumnName();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,731,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,732,    ColumnDescriptor triggerColDesc;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,733,    //Following will catch the case where an invalid column is
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,734,    //used in trigger action through the REFERENCING clause. The
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,735,    //following tigger is trying to use oldt.c13 but there is no
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,736,    //column c13 in trigger table table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,737,    //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,738,    //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,739,    //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14567;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,740,    if ((triggerColDesc = triggerTableDescriptor.getColumnDescriptor(colName)) ==
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,741,                 null) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,742,     throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,743,"                   SQLState.LANG_COLUMN_NOT_FOUND, tableName+"".""+colName);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,744,     }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,745,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,746,    if (in10_7_orHigherVersion) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,747,     int triggerColDescPosition = triggerColDesc.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,748,     triggerColsAndTriggerActionCols[triggerColDescPosition-1]=triggerColDescPosition;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,749,     triggerActionColsOnly[triggerColDescPosition-1]=triggerColDescPosition;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,750,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,751,   }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,752,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,753,   //Now that we know what columns we need for trigger columns and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,754,"   //trigger action columns, we can get rid of remaining -1 entries"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,755,   //for the remaining columns from trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,756,   //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,757,   //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,758,   //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,759,   //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,760,"   //For the above trigger, before the justTheRequiredColumns() call,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,761,   //the content of triggerColsAndTriggerActionCols array were as
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,762,"   //follows [-1, 2, -1, 4, -1]"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,763,"   //After the justTheRequiredColumns() call below,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,764,"   //triggerColsAndTriggerActionCols will have [2,4]. What this means"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,765,"   //that, at run time, during trigger execution, these are the only"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,766,   //2 column positions that will be read into memory from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,767,   //trigger table. The columns in other column positions are not
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,768,   //needed for trigger execution.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,769,   triggerColsAndTriggerActionCols = justTheRequiredColumns(triggerColsAndTriggerActionCols);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,770,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,771,   for (int i = 0; i < cols.length; i++)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,772,   {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,773,    ColumnReference ref = (ColumnReference) cols[i];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,774,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,775,    /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,776,    ** Only occurrences of those OLD/NEW transition tables/variables
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,777,    ** are of interest here.  There may be intermediate nodes in the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,778,    ** parse tree that have its own RCL which contains copy of
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,779,    ** column references(CR) from other nodes. e.g.:
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,780,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,781,    ** CREATE TRIGGER tt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,782,    ** AFTER INSERT ON x
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,783,    ** REFERENCING NEW AS n
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,784,    ** FOR EACH ROW
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,785,"    **    INSERT INTO y VALUES (n.i), (999), (333);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,786,    **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,787,    ** The above trigger action will result in InsertNode that
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,788,    ** contains a UnionNode of RowResultSetNodes.  The UnionNode
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,789,    ** will have a copy of the CRs from its left child and those CRs
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,790,    ** will not have its beginOffset set which indicates they are
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,791,"    ** not relevant for the conversion processing here, so we can"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,792,    ** safely skip them.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,793,    */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,794,    if (ref.getBeginOffset() == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,795,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,796,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,797,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,798,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,799,    TableName tableName = ref.getTableNameNode();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,800,    if ((tableName == null) ||
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,801,     ((oldTableName == null || !oldTableName.equals(tableName.getTableName())) &&
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,802,     (newTableName == null || !newTableName.equals(tableName.getTableName()))))
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,803,    {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,804,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,805,    }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,806,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,807,    int tokBeginOffset = tableName.getBeginOffset();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,808,    int tokEndOffset = tableName.getEndOffset();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,809,    if (tokBeginOffset == -1)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,811,     continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,813,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,814,    regenNode = true;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,815,    String colName = ref.getColumnName();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,816,    int columnLength = ref.getEndOffset() - ref.getBeginOffset() + 1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,817,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,818,"    newText.append(originalActionText.substring(start, tokBeginOffset-actionOffset));"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,819,    int colPositionInRuntimeResultSet = -1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,820,    ColumnDescriptor triggerColDesc = triggerTableDescriptor.getColumnDescriptor(colName);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,821,    int colPositionInTriggerTable = triggerColDesc.getPosition();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,822,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,823,    //This part of code is little tricky and following will help
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,824,    //understand what mapping is happening here.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,825,    //eg
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,826,    //CREATE TRIGGER tr1 AFTER UPDATE OF c12 ON table1
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,827,    //    REFERENCING OLD AS oldt NEW AS newt
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,828,    //    FOR EACH ROW UPDATE table2 SET c24=oldt.c14;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,829,"    //For the above trigger, triggerColsAndTriggerActionCols will"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,830,"    //have [2,4]. What this means that, at run time, during trigger"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,831,"    //execution, these are the only 2 column positions that will be"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,832,    //read into memory from the trigger table. The columns in other
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,833,    //column positions are not needed for trigger execution. But
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,834,    //even though column positions in original trigger table are 2
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,835,"    //and 4, their relative column positions in the columns read at"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,836,"    //execution time is really [1,2]. At run time, when the trigger"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,837,"    //gets fired, column position 2 from the trigger table will be"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,838,    //read as the first column and column position 4 from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,839,    //trigger table will be read as the second column. And those
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,840,    //relative column positions at runtime is what should be used
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,841,    //during trigger action conversion from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,842,    //UPDATE table2 SET c24=oldt.c14
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,843,    //to
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,844,    //UPDATE table2 SET c24=org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getInt(2)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,845,    //Note that the generated code above refers to column c14 from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,846,    //table1 by position 2 rather than position 4. Column c14's
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,847,    //column position in table1 is 4 but in the relative columns
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,848,"    //that will be fetched during trigger execution, it's position"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,849,    //is 2. That is what the following code is doing.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,850,    if (in10_7_orHigherVersion && triggerColsAndTriggerActionCols != null){
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,851,     for (int j=0; j<triggerColsAndTriggerActionCols.length; j++){
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,852,      if (triggerColsAndTriggerActionCols[j] == colPositionInTriggerTable)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,853,       colPositionInRuntimeResultSet=j+1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,854,     }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,855,    } else
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,856,     colPositionInRuntimeResultSet=colPositionInTriggerTable;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,857,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,858,"    newText.append(genColumnReferenceSQL(dd, colName,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,859,"      tableName.getTableName(),"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,860,"      tableName.getTableName().equals(oldTableName),"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,861,      colPositionInRuntimeResultSet));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,862,    start = tokEndOffset- actionOffset + columnLength + 2;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,864,"   //By this point, we are finished transforming the trigger action if"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,865,   //it has any references to old/new transition variables.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,866,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,867,"   //Now that we know what columns we need for trigger action columns,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,868,   //we can get rid of -1 entries for the remaining columns from
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,869,   //trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,870,   //The final step is to put all the column positions from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,871,   //trigger table of the columns which are referenced in the trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,872,   //action through old/new transition variables. This information
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,873,   //will be saved in SYSTRIGGERS and will be used at trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,874,   //execution time to decide which columns need to be read into
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,875,   //memory for trigger action
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,876,   referencedColsInTriggerAction = justTheRequiredColumns(triggerActionColsOnly);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,909,    regenNode = true;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,941,  if (regenNode)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,943,   if (start < originalActionText.length())
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,944,   {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,945,    newText.append(originalActionText.substring(start));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,946,   }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,947,   actionText = newText.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,987,  QueryTreeNode[] sorted = new QueryTreeNode[size];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,989,  for (Enumeration e = refs.elements(); e.hasMoreElements(); )
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,990,  {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,991,   if (isRow)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,992,    sorted[i++] = (ColumnReference)e.nextElement();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,993,   else
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,994,    sorted[i++] = (FromBaseTable)e.nextElement();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,995,  }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,996,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1083,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1084, /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1085, ** Make sure the given column name is found in the trigger
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1086, ** target table.  Generate the appropriate SQL to get it.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1087, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1088, ** @return a string that is used to get the column using
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1089, ** getObject() on the desired result set and CAST it back
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1090, ** to the proper type in the SQL domain.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1091, **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1092, ** @exception StandardException on invalid column name
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1093, */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1094, private String genColumnReferenceSQL
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1095, (
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1096,"  DataDictionary dd,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1097,"  String   colName,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1098,"  String   tabName,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1099,"  boolean   isOldTable,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1100,  int    colPositionInRuntimeResultSet
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1101, ) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1102, {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1103,  ColumnDescriptor colDesc = null;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1104,  if ((colDesc = triggerTableDescriptor.getColumnDescriptor(colName)) ==
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1105,                null)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1106,  {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1107,   throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1108,"                SQLState.LANG_COLUMN_NOT_FOUND, tabName+"".""+colName);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1109,  }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1110,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1111,  /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1112,  ** Generate something like this:
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1113,  **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1114,  **   CAST (org.apache.derby.iapi.db.Factory::
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1115,  **   getTriggerExecutionContext().getNewRow().
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1116,"  **    getObject(<colPosition>) AS DECIMAL(6,2))"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1117,        **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1118,        ** Column position is used to avoid the wrong column being
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1119,        ** selected problem (DERBY-1258) caused by the case insensitive
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1120,        ** JDBC rules for fetching a column by name.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1121,  **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1122,  ** The cast back to the SQL Domain may seem redundant
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1123,  ** but we need it to make the column reference appear
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1124,"  ** EXACTLY like a regular column reference, so we need"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1125,  ** the object in the SQL Domain and we need to have the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1126,  ** type information.  Thus a user should be able to do
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1127,  ** something like
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1128,  **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1129,"  **  CREATE TRIGGER ... INSERT INTO T length(Column), ..."
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1130,        **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1131,        */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1132,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1133,  DataTypeDescriptor  dts     = colDesc.getType();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1134,  TypeId              typeId  = dts.getTypeId();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1135,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1136,        if (!typeId.isXMLTypeId())
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1137,        {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1138,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1139,            StringBuffer methodCall = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1140,            methodCall.append(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1141,"                ""CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext()."");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1142,"            methodCall.append(isOldTable ? ""getOldRow()"" : ""getNewRow()"");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1143,"            methodCall.append("".getObject("");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1144,            methodCall.append(colPositionInRuntimeResultSet);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1145,"            methodCall.append("") AS "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1146,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1147,            /*
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1148,            ** getSQLString() returns <typeName>
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1149,"            ** for user types, so call getSQLTypeName in that"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1150,            ** case.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1151,            */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1152,            methodCall.append(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1153,                (typeId.userType() ?
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1154,                     typeId.getSQLTypeName() : dts.getSQLstring()));
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1155,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1156,"            methodCall.append("") "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1157,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1158,            return methodCall.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1159,        }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1160,        else
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1161,        {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1162,            /*  DERBY-2350
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1163,            **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1164,            **  Triggers currently use jdbc 1.2 to access columns.  The default
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1165,            **  uses getObject() which is not supported for an XML type until
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1166,            **  jdbc 4.  In the meantime use getString() and then call
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1167,            **  XMLPARSE() on the string to get the type.  See Derby issue and
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1168,"            **  http://wiki.apache.org/db-derby/TriggerImplementation , for"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1169,            **  better long term solutions.  Long term I think changing the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1170,"            **  trigger architecture to not rely on jdbc, but instead on an"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1171,            **  internal direct access interface to execution nodes would be
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1172,"            **  best future direction, but believe such a change appropriate"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1173,"            **  for a major release, not a bug fix."
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1174,            **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1175,"            **  Rather than the above described code generation, use the"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1176,            **  following for XML types to generate an XML column from the
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1177,            **  old or new row.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1178,            **
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1179,            **          XMLPARSE(DOCUMENT
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1180,            **              CAST (org.apache.derby.iapi.db.Factory::
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1181,            **                  getTriggerExecutionContext().getNewRow().
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1182,            **                      getString(<colPosition>) AS CLOB)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1183,            **                        PRESERVE WHITESPACE)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1184,            */
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1185,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1186,            StringBuffer methodCall = new StringBuffer();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1187,"            methodCall.append(""XMLPARSE(DOCUMENT CAST( "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1188,            methodCall.append(
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1189,"                ""org.apache.derby.iapi.db.Factory::getTriggerExecutionContext()."");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1190,"            methodCall.append(isOldTable ? ""getOldRow()"" : ""getNewRow()"");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1191,"            methodCall.append("".getString("");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1192,            methodCall.append(colPositionInRuntimeResultSet);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1193,"            methodCall.append("") AS CLOB) PRESERVE WHITESPACE ) "");"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1194,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1195,            return methodCall.toString();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1196,        }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1197, }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,1216,
java/engine/org/apache/derby/vti/VTITemplate.java,40, An abstract implementation of ResultSet (JDK1.1/JDBC 1.2) that is useful
java/engine/org/apache/derby/vti/VTITemplate.java,44," This class implements most of the methods of the JDBC 1.2 interface java.sql.ResultSet,"
java/engine/org/apache/derby/vti/VTITemplate.java,58, in the JDBC 1.2 definition of java.sql.ResultSet.
java/engine/org/apache/derby/vti/VTITemplate.java,63,public abstract class VTITemplate implements ResultSet {
java/engine/org/apache/derby/vti/VTITemplate.java,64,
java/engine/org/apache/derby/vti/VTITemplate.java,65,    //
java/engine/org/apache/derby/vti/VTITemplate.java,66,"    // java.sql.ResultSet calls, passed through to our result set."
java/engine/org/apache/derby/vti/VTITemplate.java,67,    //
java/engine/org/apache/derby/vti/VTITemplate.java,68,
java/engine/org/apache/derby/vti/VTITemplate.java,69, /**
java/engine/org/apache/derby/vti/VTITemplate.java,70,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,71,  *
java/engine/org/apache/derby/vti/VTITemplate.java,72,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,73,  */
java/engine/org/apache/derby/vti/VTITemplate.java,74,    public boolean wasNull() throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,75,"        throw new SQLException(""wasNull"");"
java/engine/org/apache/derby/vti/VTITemplate.java,76,    }
java/engine/org/apache/derby/vti/VTITemplate.java,77,
java/engine/org/apache/derby/vti/VTITemplate.java,78, /**
java/engine/org/apache/derby/vti/VTITemplate.java,79,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,80,  *
java/engine/org/apache/derby/vti/VTITemplate.java,81,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,82,  */
java/engine/org/apache/derby/vti/VTITemplate.java,83,    public String getString(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,84,"        throw new SQLException(""getString"");"
java/engine/org/apache/derby/vti/VTITemplate.java,85,    }
java/engine/org/apache/derby/vti/VTITemplate.java,86,
java/engine/org/apache/derby/vti/VTITemplate.java,87, /**
java/engine/org/apache/derby/vti/VTITemplate.java,88,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,89,  *
java/engine/org/apache/derby/vti/VTITemplate.java,90,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,91,  */
java/engine/org/apache/derby/vti/VTITemplate.java,92,    public boolean getBoolean(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,93,"        throw new SQLException(""getBoolean"");"
java/engine/org/apache/derby/vti/VTITemplate.java,94,    }
java/engine/org/apache/derby/vti/VTITemplate.java,95,
java/engine/org/apache/derby/vti/VTITemplate.java,96, /**
java/engine/org/apache/derby/vti/VTITemplate.java,97,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,98,  *
java/engine/org/apache/derby/vti/VTITemplate.java,99,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,100,  */
java/engine/org/apache/derby/vti/VTITemplate.java,101,    public byte getByte(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,102,"        throw new SQLException(""getByte"");"
java/engine/org/apache/derby/vti/VTITemplate.java,103,    }
java/engine/org/apache/derby/vti/VTITemplate.java,104,
java/engine/org/apache/derby/vti/VTITemplate.java,105, /**
java/engine/org/apache/derby/vti/VTITemplate.java,106,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,107,  *
java/engine/org/apache/derby/vti/VTITemplate.java,108,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,109,  */
java/engine/org/apache/derby/vti/VTITemplate.java,110,    public short getShort(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,111,"        throw new SQLException(""getShort"");"
java/engine/org/apache/derby/vti/VTITemplate.java,112,    }
java/engine/org/apache/derby/vti/VTITemplate.java,113,
java/engine/org/apache/derby/vti/VTITemplate.java,114, /**
java/engine/org/apache/derby/vti/VTITemplate.java,115,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,116,  *
java/engine/org/apache/derby/vti/VTITemplate.java,117,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,118,  */
java/engine/org/apache/derby/vti/VTITemplate.java,119,    public int getInt(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,120,"        throw new SQLException(""getInt"");"
java/engine/org/apache/derby/vti/VTITemplate.java,121,    }
java/engine/org/apache/derby/vti/VTITemplate.java,122,
java/engine/org/apache/derby/vti/VTITemplate.java,123, /**
java/engine/org/apache/derby/vti/VTITemplate.java,124,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,125,  *
java/engine/org/apache/derby/vti/VTITemplate.java,126,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,127,  */
java/engine/org/apache/derby/vti/VTITemplate.java,128,    public long getLong(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,129,"        throw new SQLException(""getLong"");"
java/engine/org/apache/derby/vti/VTITemplate.java,130,    }
java/engine/org/apache/derby/vti/VTITemplate.java,131,
java/engine/org/apache/derby/vti/VTITemplate.java,132, /**
java/engine/org/apache/derby/vti/VTITemplate.java,133,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,134,  *
java/engine/org/apache/derby/vti/VTITemplate.java,135,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,136,  */
java/engine/org/apache/derby/vti/VTITemplate.java,137,   public float getFloat(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,138,"        throw new SQLException(""getFloat"");"
java/engine/org/apache/derby/vti/VTITemplate.java,139,    }
java/engine/org/apache/derby/vti/VTITemplate.java,140,
java/engine/org/apache/derby/vti/VTITemplate.java,141, /**
java/engine/org/apache/derby/vti/VTITemplate.java,142,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,143,  *
java/engine/org/apache/derby/vti/VTITemplate.java,144,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,145,  */
java/engine/org/apache/derby/vti/VTITemplate.java,146,    public double getDouble(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,147,"        throw new SQLException(""getDouble"");"
java/engine/org/apache/derby/vti/VTITemplate.java,148,    }
java/engine/org/apache/derby/vti/VTITemplate.java,149,
java/engine/org/apache/derby/vti/VTITemplate.java,150, /**
java/engine/org/apache/derby/vti/VTITemplate.java,151,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,152,  *
java/engine/org/apache/derby/vti/VTITemplate.java,153,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,154,     * @deprecated
java/engine/org/apache/derby/vti/VTITemplate.java,155,  */
java/engine/org/apache/derby/vti/VTITemplate.java,156,"    public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {"
java/engine/org/apache/derby/vti/VTITemplate.java,157,"        throw new SQLException(""getBigDecimal"");"
java/engine/org/apache/derby/vti/VTITemplate.java,158,    }
java/engine/org/apache/derby/vti/VTITemplate.java,159,
java/engine/org/apache/derby/vti/VTITemplate.java,160, /**
java/engine/org/apache/derby/vti/VTITemplate.java,161,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,162,  *
java/engine/org/apache/derby/vti/VTITemplate.java,163,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,164,  */
java/engine/org/apache/derby/vti/VTITemplate.java,165,    public byte[] getBytes(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,166,"        throw new SQLException(""getBytes"");"
java/engine/org/apache/derby/vti/VTITemplate.java,167,    }
java/engine/org/apache/derby/vti/VTITemplate.java,168,
java/engine/org/apache/derby/vti/VTITemplate.java,169, /**
java/engine/org/apache/derby/vti/VTITemplate.java,170,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,171,  *
java/engine/org/apache/derby/vti/VTITemplate.java,172,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,173,  */
java/engine/org/apache/derby/vti/VTITemplate.java,174,    public java.sql.Date getDate(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,175,"        throw new SQLException(""getDate"");"
java/engine/org/apache/derby/vti/VTITemplate.java,176,    }
java/engine/org/apache/derby/vti/VTITemplate.java,177,
java/engine/org/apache/derby/vti/VTITemplate.java,178, /**
java/engine/org/apache/derby/vti/VTITemplate.java,179,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,180,  *
java/engine/org/apache/derby/vti/VTITemplate.java,181,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,182,  */
java/engine/org/apache/derby/vti/VTITemplate.java,183,    public java.sql.Time getTime(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,184,"        throw new SQLException(""getTime"");"
java/engine/org/apache/derby/vti/VTITemplate.java,185,    }
java/engine/org/apache/derby/vti/VTITemplate.java,186,
java/engine/org/apache/derby/vti/VTITemplate.java,187, /**
java/engine/org/apache/derby/vti/VTITemplate.java,188,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,189,  *
java/engine/org/apache/derby/vti/VTITemplate.java,190,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,191,  */
java/engine/org/apache/derby/vti/VTITemplate.java,192,    public java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,193,"        throw new SQLException(""getTimestamp"");"
java/engine/org/apache/derby/vti/VTITemplate.java,194,    }
java/engine/org/apache/derby/vti/VTITemplate.java,195,
java/engine/org/apache/derby/vti/VTITemplate.java,196, /**
java/engine/org/apache/derby/vti/VTITemplate.java,197,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,198,  *
java/engine/org/apache/derby/vti/VTITemplate.java,199,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,200,  */
java/engine/org/apache/derby/vti/VTITemplate.java,201,    public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,202,"        throw new SQLException(""getAsciiStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,203,    }
java/engine/org/apache/derby/vti/VTITemplate.java,204,
java/engine/org/apache/derby/vti/VTITemplate.java,205, /**
java/engine/org/apache/derby/vti/VTITemplate.java,206,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,207,  *
java/engine/org/apache/derby/vti/VTITemplate.java,208,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,209,     * @deprecated
java/engine/org/apache/derby/vti/VTITemplate.java,210,  */
java/engine/org/apache/derby/vti/VTITemplate.java,211,    public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,212,"        throw new SQLException(""getUnicodeStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,213,    }
java/engine/org/apache/derby/vti/VTITemplate.java,214,
java/engine/org/apache/derby/vti/VTITemplate.java,215, /**
java/engine/org/apache/derby/vti/VTITemplate.java,216,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,217,  *
java/engine/org/apache/derby/vti/VTITemplate.java,218,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,219,  */
java/engine/org/apache/derby/vti/VTITemplate.java,220,    public java.io.InputStream getBinaryStream(int columnIndex)
java/engine/org/apache/derby/vti/VTITemplate.java,221,        throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,222,"        throw new SQLException(""getBinaryStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,223,            }
java/engine/org/apache/derby/vti/VTITemplate.java,224,
java/engine/org/apache/derby/vti/VTITemplate.java,225, /**
java/engine/org/apache/derby/vti/VTITemplate.java,226,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,227,  *
java/engine/org/apache/derby/vti/VTITemplate.java,228,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,229,  */
java/engine/org/apache/derby/vti/VTITemplate.java,230,    public String getString(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,231,        return getString(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,232,    }
java/engine/org/apache/derby/vti/VTITemplate.java,233,
java/engine/org/apache/derby/vti/VTITemplate.java,234, /**
java/engine/org/apache/derby/vti/VTITemplate.java,235,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,236,  *
java/engine/org/apache/derby/vti/VTITemplate.java,237,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,238,  */
java/engine/org/apache/derby/vti/VTITemplate.java,239,    public boolean getBoolean(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,240,        return getBoolean(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,241,    }
java/engine/org/apache/derby/vti/VTITemplate.java,242,
java/engine/org/apache/derby/vti/VTITemplate.java,243, /**
java/engine/org/apache/derby/vti/VTITemplate.java,244,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,245,  *
java/engine/org/apache/derby/vti/VTITemplate.java,246,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,247,  */
java/engine/org/apache/derby/vti/VTITemplate.java,248,    public byte getByte(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,249,        return getByte(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,250,    }
java/engine/org/apache/derby/vti/VTITemplate.java,251,
java/engine/org/apache/derby/vti/VTITemplate.java,252, /**
java/engine/org/apache/derby/vti/VTITemplate.java,253,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,254,  *
java/engine/org/apache/derby/vti/VTITemplate.java,255,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,256,  */
java/engine/org/apache/derby/vti/VTITemplate.java,257,    public short getShort(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,258,        return getShort(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,259,    }
java/engine/org/apache/derby/vti/VTITemplate.java,260,
java/engine/org/apache/derby/vti/VTITemplate.java,261, /**
java/engine/org/apache/derby/vti/VTITemplate.java,262,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,263,  *
java/engine/org/apache/derby/vti/VTITemplate.java,264,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,265,  */
java/engine/org/apache/derby/vti/VTITemplate.java,266,    public int getInt(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,267,        return getInt(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,268,    }
java/engine/org/apache/derby/vti/VTITemplate.java,269,
java/engine/org/apache/derby/vti/VTITemplate.java,270, /**
java/engine/org/apache/derby/vti/VTITemplate.java,271,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,272,  *
java/engine/org/apache/derby/vti/VTITemplate.java,273,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,274,  */
java/engine/org/apache/derby/vti/VTITemplate.java,275,    public long getLong(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,276,        return getLong(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,277,    }
java/engine/org/apache/derby/vti/VTITemplate.java,278,
java/engine/org/apache/derby/vti/VTITemplate.java,279, /**
java/engine/org/apache/derby/vti/VTITemplate.java,280,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,281,  *
java/engine/org/apache/derby/vti/VTITemplate.java,282,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,283,  */
java/engine/org/apache/derby/vti/VTITemplate.java,284,    public float getFloat(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,285,        return getFloat(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,286,    }
java/engine/org/apache/derby/vti/VTITemplate.java,287,
java/engine/org/apache/derby/vti/VTITemplate.java,288, /**
java/engine/org/apache/derby/vti/VTITemplate.java,289,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,290,  *
java/engine/org/apache/derby/vti/VTITemplate.java,291,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,292,  */
java/engine/org/apache/derby/vti/VTITemplate.java,293,    public double getDouble(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,294,        return getDouble(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,295,    }
java/engine/org/apache/derby/vti/VTITemplate.java,296,
java/engine/org/apache/derby/vti/VTITemplate.java,297, /**
java/engine/org/apache/derby/vti/VTITemplate.java,298,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,299,  *
java/engine/org/apache/derby/vti/VTITemplate.java,300,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,301,     * @deprecated
java/engine/org/apache/derby/vti/VTITemplate.java,302,  */
java/engine/org/apache/derby/vti/VTITemplate.java,303,"    public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {"
java/engine/org/apache/derby/vti/VTITemplate.java,304,"        return getBigDecimal(findColumn(columnName), scale);"
java/engine/org/apache/derby/vti/VTITemplate.java,305,    }
java/engine/org/apache/derby/vti/VTITemplate.java,306,
java/engine/org/apache/derby/vti/VTITemplate.java,307, /**
java/engine/org/apache/derby/vti/VTITemplate.java,308,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,309,  *
java/engine/org/apache/derby/vti/VTITemplate.java,310,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,311,  */
java/engine/org/apache/derby/vti/VTITemplate.java,312,    public byte[] getBytes(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,313,        return getBytes(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,314,    }
java/engine/org/apache/derby/vti/VTITemplate.java,315,
java/engine/org/apache/derby/vti/VTITemplate.java,316, /**
java/engine/org/apache/derby/vti/VTITemplate.java,317,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,318,  *
java/engine/org/apache/derby/vti/VTITemplate.java,319,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,320,  */
java/engine/org/apache/derby/vti/VTITemplate.java,321,    public java.sql.Date getDate(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,322,        return getDate(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,323,    }
java/engine/org/apache/derby/vti/VTITemplate.java,324,
java/engine/org/apache/derby/vti/VTITemplate.java,325, /**
java/engine/org/apache/derby/vti/VTITemplate.java,326,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,327,  *
java/engine/org/apache/derby/vti/VTITemplate.java,328,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,329,  */
java/engine/org/apache/derby/vti/VTITemplate.java,330,    public java.sql.Time getTime(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,331,        return getTime(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,332,    }
java/engine/org/apache/derby/vti/VTITemplate.java,333,
java/engine/org/apache/derby/vti/VTITemplate.java,334, /**
java/engine/org/apache/derby/vti/VTITemplate.java,335,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,336,  *
java/engine/org/apache/derby/vti/VTITemplate.java,337,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,338,  */
java/engine/org/apache/derby/vti/VTITemplate.java,339,    public java.sql.Timestamp getTimestamp(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,340,        return getTimestamp(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,341,    }
java/engine/org/apache/derby/vti/VTITemplate.java,342,
java/engine/org/apache/derby/vti/VTITemplate.java,343, /**
java/engine/org/apache/derby/vti/VTITemplate.java,344,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,345,  *
java/engine/org/apache/derby/vti/VTITemplate.java,346,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,347,  */
java/engine/org/apache/derby/vti/VTITemplate.java,348,    public java.io.InputStream getAsciiStream(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,349,"        throw new SQLException(""getAsciiStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,350,    }
java/engine/org/apache/derby/vti/VTITemplate.java,351,
java/engine/org/apache/derby/vti/VTITemplate.java,352, /**
java/engine/org/apache/derby/vti/VTITemplate.java,353,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,354,  *
java/engine/org/apache/derby/vti/VTITemplate.java,355,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,356,     * @deprecated
java/engine/org/apache/derby/vti/VTITemplate.java,357,  */
java/engine/org/apache/derby/vti/VTITemplate.java,358,    public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,359,"        throw new SQLException(""getUnicodeStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,360,    }
java/engine/org/apache/derby/vti/VTITemplate.java,361,
java/engine/org/apache/derby/vti/VTITemplate.java,362, /**
java/engine/org/apache/derby/vti/VTITemplate.java,363,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,364,  *
java/engine/org/apache/derby/vti/VTITemplate.java,365,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,366,  */
java/engine/org/apache/derby/vti/VTITemplate.java,367,    public java.io.InputStream getBinaryStream(String columnName)
java/engine/org/apache/derby/vti/VTITemplate.java,368,        throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,369,"        throw new SQLException(""getBinaryStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,370,    }
java/engine/org/apache/derby/vti/VTITemplate.java,371,
java/engine/org/apache/derby/vti/VTITemplate.java,372,  /**
java/engine/org/apache/derby/vti/VTITemplate.java,373,  * @exception SQLException if there is an error
java/engine/org/apache/derby/vti/VTITemplate.java,374, */
java/engine/org/apache/derby/vti/VTITemplate.java,375,  public SQLWarning getWarnings() throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,376,    return null;
java/engine/org/apache/derby/vti/VTITemplate.java,377,  }
java/engine/org/apache/derby/vti/VTITemplate.java,378,
java/engine/org/apache/derby/vti/VTITemplate.java,379,  /**
java/engine/org/apache/derby/vti/VTITemplate.java,380,  * @exception SQLException if there is an error
java/engine/org/apache/derby/vti/VTITemplate.java,381, */
java/engine/org/apache/derby/vti/VTITemplate.java,382,  public void clearWarnings() throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,383,  }
java/engine/org/apache/derby/vti/VTITemplate.java,384,
java/engine/org/apache/derby/vti/VTITemplate.java,385, /**
java/engine/org/apache/derby/vti/VTITemplate.java,386,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,387,  *
java/engine/org/apache/derby/vti/VTITemplate.java,388,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,389,  */
java/engine/org/apache/derby/vti/VTITemplate.java,390,    public String getCursorName() throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,391,"        throw new SQLException(""getCursorName"");"
java/engine/org/apache/derby/vti/VTITemplate.java,392,    }
java/engine/org/apache/derby/vti/VTITemplate.java,393,
java/engine/org/apache/derby/vti/VTITemplate.java,394, /**
java/engine/org/apache/derby/vti/VTITemplate.java,395,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,396,  *
java/engine/org/apache/derby/vti/VTITemplate.java,397,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,398,  */
java/engine/org/apache/derby/vti/VTITemplate.java,399,    public Object getObject(int columnIndex) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,400,"        throw new SQLException(""getObject"");"
java/engine/org/apache/derby/vti/VTITemplate.java,401,    }
java/engine/org/apache/derby/vti/VTITemplate.java,402,
java/engine/org/apache/derby/vti/VTITemplate.java,403, /**
java/engine/org/apache/derby/vti/VTITemplate.java,404,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,405,  *
java/engine/org/apache/derby/vti/VTITemplate.java,406,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,407,  */
java/engine/org/apache/derby/vti/VTITemplate.java,408,    public Object getObject(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,409,        return getObject(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,410,    }
java/engine/org/apache/derby/vti/VTITemplate.java,411,
java/engine/org/apache/derby/vti/VTITemplate.java,412, /**
java/engine/org/apache/derby/vti/VTITemplate.java,413,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,414,  *
java/engine/org/apache/derby/vti/VTITemplate.java,415,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,416,  */
java/engine/org/apache/derby/vti/VTITemplate.java,417,    public int findColumn(String columnName) throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,418,"        throw new SQLException(""findColumn"");"
java/engine/org/apache/derby/vti/VTITemplate.java,419,    }
java/engine/org/apache/derby/vti/VTITemplate.java,420,
java/engine/org/apache/derby/vti/VTITemplate.java,421, /*
java/engine/org/apache/derby/vti/VTITemplate.java,422, ** JDBC 2.0 methods
java/engine/org/apache/derby/vti/VTITemplate.java,423, */
java/engine/org/apache/derby/vti/VTITemplate.java,424,
java/engine/org/apache/derby/vti/VTITemplate.java,425, /**
java/engine/org/apache/derby/vti/VTITemplate.java,426,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,427,  *
java/engine/org/apache/derby/vti/VTITemplate.java,428,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,429,  */
java/engine/org/apache/derby/vti/VTITemplate.java,430, public java.io.Reader getCharacterStream(int columnIndex)
java/engine/org/apache/derby/vti/VTITemplate.java,431,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,432,"  throw new SQLException(""getCharacterStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,433, }
java/engine/org/apache/derby/vti/VTITemplate.java,434,
java/engine/org/apache/derby/vti/VTITemplate.java,435, /**
java/engine/org/apache/derby/vti/VTITemplate.java,436,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,437,  *
java/engine/org/apache/derby/vti/VTITemplate.java,438,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,439,  */
java/engine/org/apache/derby/vti/VTITemplate.java,440, public java.io.Reader getCharacterStream(String columnName)
java/engine/org/apache/derby/vti/VTITemplate.java,441,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,442,"  throw new SQLException(""getCharacterStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,443, }
java/engine/org/apache/derby/vti/VTITemplate.java,444,
java/engine/org/apache/derby/vti/VTITemplate.java,445, /**
java/engine/org/apache/derby/vti/VTITemplate.java,446,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,447,  *
java/engine/org/apache/derby/vti/VTITemplate.java,448,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,449,  */
java/engine/org/apache/derby/vti/VTITemplate.java,450, public BigDecimal getBigDecimal(int columnIndex)
java/engine/org/apache/derby/vti/VTITemplate.java,451,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,452,"  throw new SQLException(""getBigDecimal"");"
java/engine/org/apache/derby/vti/VTITemplate.java,453, }
java/engine/org/apache/derby/vti/VTITemplate.java,454,
java/engine/org/apache/derby/vti/VTITemplate.java,455, /**
java/engine/org/apache/derby/vti/VTITemplate.java,456,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,457,  *
java/engine/org/apache/derby/vti/VTITemplate.java,458,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,459,  */
java/engine/org/apache/derby/vti/VTITemplate.java,460, public BigDecimal getBigDecimal(String columnName)
java/engine/org/apache/derby/vti/VTITemplate.java,461,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,462,  return getBigDecimal(findColumn(columnName));
java/engine/org/apache/derby/vti/VTITemplate.java,463, }
java/engine/org/apache/derby/vti/VTITemplate.java,464,
java/engine/org/apache/derby/vti/VTITemplate.java,465, /**
java/engine/org/apache/derby/vti/VTITemplate.java,466,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,467,  *
java/engine/org/apache/derby/vti/VTITemplate.java,468,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,469,  */
java/engine/org/apache/derby/vti/VTITemplate.java,470, public boolean isBeforeFirst()
java/engine/org/apache/derby/vti/VTITemplate.java,471,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,472,"  throw new SQLException(""isBeforeFirst"");"
java/engine/org/apache/derby/vti/VTITemplate.java,473, }
java/engine/org/apache/derby/vti/VTITemplate.java,474,
java/engine/org/apache/derby/vti/VTITemplate.java,475, /**
java/engine/org/apache/derby/vti/VTITemplate.java,476,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,477,  *
java/engine/org/apache/derby/vti/VTITemplate.java,478,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,479,  */
java/engine/org/apache/derby/vti/VTITemplate.java,480, public boolean isAfterLast()
java/engine/org/apache/derby/vti/VTITemplate.java,481,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,482,"  throw new SQLException(""isAfterLast"");"
java/engine/org/apache/derby/vti/VTITemplate.java,483, }
java/engine/org/apache/derby/vti/VTITemplate.java,484,
java/engine/org/apache/derby/vti/VTITemplate.java,485, /**
java/engine/org/apache/derby/vti/VTITemplate.java,486,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,487,  *
java/engine/org/apache/derby/vti/VTITemplate.java,488,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,489,  */
java/engine/org/apache/derby/vti/VTITemplate.java,490, public boolean isFirst()
java/engine/org/apache/derby/vti/VTITemplate.java,491,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,492,"  throw new SQLException(""isFirst"");"
java/engine/org/apache/derby/vti/VTITemplate.java,493, }
java/engine/org/apache/derby/vti/VTITemplate.java,494,
java/engine/org/apache/derby/vti/VTITemplate.java,495, /**
java/engine/org/apache/derby/vti/VTITemplate.java,496,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,497,  *
java/engine/org/apache/derby/vti/VTITemplate.java,498,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,499,  */
java/engine/org/apache/derby/vti/VTITemplate.java,500, public boolean isLast()
java/engine/org/apache/derby/vti/VTITemplate.java,501,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,502,"  throw new SQLException(""isLast"");"
java/engine/org/apache/derby/vti/VTITemplate.java,503, }
java/engine/org/apache/derby/vti/VTITemplate.java,504,
java/engine/org/apache/derby/vti/VTITemplate.java,505, /**
java/engine/org/apache/derby/vti/VTITemplate.java,506,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,507,  *
java/engine/org/apache/derby/vti/VTITemplate.java,508,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,509,  */
java/engine/org/apache/derby/vti/VTITemplate.java,510, public void beforeFirst()
java/engine/org/apache/derby/vti/VTITemplate.java,511,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,512,"  throw new SQLException(""beforeFirst"");"
java/engine/org/apache/derby/vti/VTITemplate.java,513, }
java/engine/org/apache/derby/vti/VTITemplate.java,514,
java/engine/org/apache/derby/vti/VTITemplate.java,515, /**
java/engine/org/apache/derby/vti/VTITemplate.java,516,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,517,  *
java/engine/org/apache/derby/vti/VTITemplate.java,518,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,519,  */
java/engine/org/apache/derby/vti/VTITemplate.java,520, public void afterLast()
java/engine/org/apache/derby/vti/VTITemplate.java,521,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,522,"  throw new SQLException(""afterLast"");"
java/engine/org/apache/derby/vti/VTITemplate.java,523, }
java/engine/org/apache/derby/vti/VTITemplate.java,524,
java/engine/org/apache/derby/vti/VTITemplate.java,525, /**
java/engine/org/apache/derby/vti/VTITemplate.java,526,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,527,  *
java/engine/org/apache/derby/vti/VTITemplate.java,528,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,529,  */
java/engine/org/apache/derby/vti/VTITemplate.java,530, public boolean first()
java/engine/org/apache/derby/vti/VTITemplate.java,531,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,532,"  throw new SQLException(""first"");"
java/engine/org/apache/derby/vti/VTITemplate.java,533, }
java/engine/org/apache/derby/vti/VTITemplate.java,534,
java/engine/org/apache/derby/vti/VTITemplate.java,535, /**
java/engine/org/apache/derby/vti/VTITemplate.java,536,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,537,  *
java/engine/org/apache/derby/vti/VTITemplate.java,538,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,539,  */
java/engine/org/apache/derby/vti/VTITemplate.java,540, public boolean last()
java/engine/org/apache/derby/vti/VTITemplate.java,541,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,542,"  throw new SQLException(""last"");"
java/engine/org/apache/derby/vti/VTITemplate.java,543, }
java/engine/org/apache/derby/vti/VTITemplate.java,544,
java/engine/org/apache/derby/vti/VTITemplate.java,545, /**
java/engine/org/apache/derby/vti/VTITemplate.java,546,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,547,  *
java/engine/org/apache/derby/vti/VTITemplate.java,548,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,549,  */
java/engine/org/apache/derby/vti/VTITemplate.java,550, public int getRow()
java/engine/org/apache/derby/vti/VTITemplate.java,551,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,552,"  throw new SQLException(""getRow"");"
java/engine/org/apache/derby/vti/VTITemplate.java,553, }
java/engine/org/apache/derby/vti/VTITemplate.java,554,
java/engine/org/apache/derby/vti/VTITemplate.java,555, /**
java/engine/org/apache/derby/vti/VTITemplate.java,556,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,557,  *
java/engine/org/apache/derby/vti/VTITemplate.java,558,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,559,  */
java/engine/org/apache/derby/vti/VTITemplate.java,560, public boolean absolute(int row)
java/engine/org/apache/derby/vti/VTITemplate.java,561,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,562,"  throw new SQLException(""absolute"");"
java/engine/org/apache/derby/vti/VTITemplate.java,563, }
java/engine/org/apache/derby/vti/VTITemplate.java,564,
java/engine/org/apache/derby/vti/VTITemplate.java,565, /**
java/engine/org/apache/derby/vti/VTITemplate.java,566,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,567,  *
java/engine/org/apache/derby/vti/VTITemplate.java,568,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,569,  */
java/engine/org/apache/derby/vti/VTITemplate.java,570, public boolean relative(int rows)
java/engine/org/apache/derby/vti/VTITemplate.java,571,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,572,"  throw new SQLException(""relative"");"
java/engine/org/apache/derby/vti/VTITemplate.java,573, }
java/engine/org/apache/derby/vti/VTITemplate.java,574,
java/engine/org/apache/derby/vti/VTITemplate.java,575, /**
java/engine/org/apache/derby/vti/VTITemplate.java,576,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,577,  *
java/engine/org/apache/derby/vti/VTITemplate.java,578,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,579,  */
java/engine/org/apache/derby/vti/VTITemplate.java,580, public boolean previous()
java/engine/org/apache/derby/vti/VTITemplate.java,581,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,582,"  throw new SQLException(""previous"");"
java/engine/org/apache/derby/vti/VTITemplate.java,583, }
java/engine/org/apache/derby/vti/VTITemplate.java,584,
java/engine/org/apache/derby/vti/VTITemplate.java,585, /**
java/engine/org/apache/derby/vti/VTITemplate.java,586,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,587,  *
java/engine/org/apache/derby/vti/VTITemplate.java,588,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,589,  */
java/engine/org/apache/derby/vti/VTITemplate.java,590, public void setFetchDirection(int direction)
java/engine/org/apache/derby/vti/VTITemplate.java,591,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,592,"  throw new SQLException(""setFetchDirection"");"
java/engine/org/apache/derby/vti/VTITemplate.java,593, }
java/engine/org/apache/derby/vti/VTITemplate.java,594,
java/engine/org/apache/derby/vti/VTITemplate.java,595, /**
java/engine/org/apache/derby/vti/VTITemplate.java,596,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,597,  *
java/engine/org/apache/derby/vti/VTITemplate.java,598,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,599,  */
java/engine/org/apache/derby/vti/VTITemplate.java,600, public int getFetchDirection()
java/engine/org/apache/derby/vti/VTITemplate.java,601,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,602,"  throw new SQLException(""getFetchDirection"");"
java/engine/org/apache/derby/vti/VTITemplate.java,603, }
java/engine/org/apache/derby/vti/VTITemplate.java,604,
java/engine/org/apache/derby/vti/VTITemplate.java,605, /**
java/engine/org/apache/derby/vti/VTITemplate.java,606,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,607,  *
java/engine/org/apache/derby/vti/VTITemplate.java,608,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,609,  */
java/engine/org/apache/derby/vti/VTITemplate.java,610, public void setFetchSize(int rows)
java/engine/org/apache/derby/vti/VTITemplate.java,611,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,612,"  throw new SQLException(""setFetchSize"");"
java/engine/org/apache/derby/vti/VTITemplate.java,613, }
java/engine/org/apache/derby/vti/VTITemplate.java,614,
java/engine/org/apache/derby/vti/VTITemplate.java,615, /**
java/engine/org/apache/derby/vti/VTITemplate.java,616,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,617,  *
java/engine/org/apache/derby/vti/VTITemplate.java,618,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,619,  */
java/engine/org/apache/derby/vti/VTITemplate.java,620, public int getFetchSize()
java/engine/org/apache/derby/vti/VTITemplate.java,621,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,622,"  throw new SQLException(""getFetchSize"");"
java/engine/org/apache/derby/vti/VTITemplate.java,623, }
java/engine/org/apache/derby/vti/VTITemplate.java,624,
java/engine/org/apache/derby/vti/VTITemplate.java,625, /**
java/engine/org/apache/derby/vti/VTITemplate.java,626,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,627,  *
java/engine/org/apache/derby/vti/VTITemplate.java,628,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,629,  */
java/engine/org/apache/derby/vti/VTITemplate.java,630, public int getType()
java/engine/org/apache/derby/vti/VTITemplate.java,631,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,632,"  throw new SQLException(""getType"");"
java/engine/org/apache/derby/vti/VTITemplate.java,633, }
java/engine/org/apache/derby/vti/VTITemplate.java,634,
java/engine/org/apache/derby/vti/VTITemplate.java,635, /**
java/engine/org/apache/derby/vti/VTITemplate.java,636,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,637,  *
java/engine/org/apache/derby/vti/VTITemplate.java,638,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,639,  */
java/engine/org/apache/derby/vti/VTITemplate.java,640, public int getConcurrency()
java/engine/org/apache/derby/vti/VTITemplate.java,641,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,642,"  throw new SQLException(""getConcurrency"");"
java/engine/org/apache/derby/vti/VTITemplate.java,643, }
java/engine/org/apache/derby/vti/VTITemplate.java,644,
java/engine/org/apache/derby/vti/VTITemplate.java,645, /**
java/engine/org/apache/derby/vti/VTITemplate.java,646,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,647,  *
java/engine/org/apache/derby/vti/VTITemplate.java,648,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,649,  */
java/engine/org/apache/derby/vti/VTITemplate.java,650, public boolean rowUpdated()
java/engine/org/apache/derby/vti/VTITemplate.java,651,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,652,"  throw new SQLException(""rowUpdated"");"
java/engine/org/apache/derby/vti/VTITemplate.java,653, }
java/engine/org/apache/derby/vti/VTITemplate.java,654,
java/engine/org/apache/derby/vti/VTITemplate.java,655, /**
java/engine/org/apache/derby/vti/VTITemplate.java,656,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,657,  *
java/engine/org/apache/derby/vti/VTITemplate.java,658,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,659,  */
java/engine/org/apache/derby/vti/VTITemplate.java,660, public boolean rowInserted()
java/engine/org/apache/derby/vti/VTITemplate.java,661,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,662,"  throw new SQLException(""rowInserted"");"
java/engine/org/apache/derby/vti/VTITemplate.java,663, }
java/engine/org/apache/derby/vti/VTITemplate.java,664,
java/engine/org/apache/derby/vti/VTITemplate.java,665, /**
java/engine/org/apache/derby/vti/VTITemplate.java,666,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,667,  *
java/engine/org/apache/derby/vti/VTITemplate.java,668,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,669,  */
java/engine/org/apache/derby/vti/VTITemplate.java,670, public boolean rowDeleted()
java/engine/org/apache/derby/vti/VTITemplate.java,671,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,672,"  throw new SQLException(""rowDeleted"");"
java/engine/org/apache/derby/vti/VTITemplate.java,673, }
java/engine/org/apache/derby/vti/VTITemplate.java,674,
java/engine/org/apache/derby/vti/VTITemplate.java,675, /**
java/engine/org/apache/derby/vti/VTITemplate.java,676,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,677,  *
java/engine/org/apache/derby/vti/VTITemplate.java,678,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,679,  */
java/engine/org/apache/derby/vti/VTITemplate.java,680, public void updateNull(int columnIndex)
java/engine/org/apache/derby/vti/VTITemplate.java,681,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,682,"  throw new SQLException(""updateNull"");"
java/engine/org/apache/derby/vti/VTITemplate.java,683, }
java/engine/org/apache/derby/vti/VTITemplate.java,684,
java/engine/org/apache/derby/vti/VTITemplate.java,685, /**
java/engine/org/apache/derby/vti/VTITemplate.java,686,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,687,  *
java/engine/org/apache/derby/vti/VTITemplate.java,688,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,689,  */
java/engine/org/apache/derby/vti/VTITemplate.java,690," public void updateBoolean(int columnIndex, boolean x)"
java/engine/org/apache/derby/vti/VTITemplate.java,691,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,692,"  throw new SQLException(""updateBoolean"");"
java/engine/org/apache/derby/vti/VTITemplate.java,693, }
java/engine/org/apache/derby/vti/VTITemplate.java,694,
java/engine/org/apache/derby/vti/VTITemplate.java,695, /**
java/engine/org/apache/derby/vti/VTITemplate.java,696,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,697,  *
java/engine/org/apache/derby/vti/VTITemplate.java,698,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,699,  */
java/engine/org/apache/derby/vti/VTITemplate.java,700," public void updateByte(int columnIndex, byte x)"
java/engine/org/apache/derby/vti/VTITemplate.java,701,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,702,"  throw new SQLException(""updateByte"");"
java/engine/org/apache/derby/vti/VTITemplate.java,703, }
java/engine/org/apache/derby/vti/VTITemplate.java,704,
java/engine/org/apache/derby/vti/VTITemplate.java,705, /**
java/engine/org/apache/derby/vti/VTITemplate.java,706,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,707,  *
java/engine/org/apache/derby/vti/VTITemplate.java,708,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,709,  */
java/engine/org/apache/derby/vti/VTITemplate.java,710," public void updateShort(int columnIndex, short x)"
java/engine/org/apache/derby/vti/VTITemplate.java,711,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,712,"  throw new SQLException(""updateShort"");"
java/engine/org/apache/derby/vti/VTITemplate.java,713, }
java/engine/org/apache/derby/vti/VTITemplate.java,714,
java/engine/org/apache/derby/vti/VTITemplate.java,715, /**
java/engine/org/apache/derby/vti/VTITemplate.java,716,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,717,  *
java/engine/org/apache/derby/vti/VTITemplate.java,718,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,719,  */
java/engine/org/apache/derby/vti/VTITemplate.java,720," public void updateInt(int columnIndex, int x)"
java/engine/org/apache/derby/vti/VTITemplate.java,721,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,722,"  throw new SQLException(""updateInt"");"
java/engine/org/apache/derby/vti/VTITemplate.java,723, }
java/engine/org/apache/derby/vti/VTITemplate.java,724,
java/engine/org/apache/derby/vti/VTITemplate.java,725, /**
java/engine/org/apache/derby/vti/VTITemplate.java,726,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,727,  *
java/engine/org/apache/derby/vti/VTITemplate.java,728,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,729,  */
java/engine/org/apache/derby/vti/VTITemplate.java,730," public void updateLong(int columnIndex, long x)"
java/engine/org/apache/derby/vti/VTITemplate.java,731,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,732,"  throw new SQLException(""updateLong"");"
java/engine/org/apache/derby/vti/VTITemplate.java,733, }
java/engine/org/apache/derby/vti/VTITemplate.java,734,
java/engine/org/apache/derby/vti/VTITemplate.java,735, /**
java/engine/org/apache/derby/vti/VTITemplate.java,736,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,737,  *
java/engine/org/apache/derby/vti/VTITemplate.java,738,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,739,  */
java/engine/org/apache/derby/vti/VTITemplate.java,740," public void updateFloat(int columnIndex, float x)"
java/engine/org/apache/derby/vti/VTITemplate.java,741,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,742,"  throw new SQLException(""updateFloat"");"
java/engine/org/apache/derby/vti/VTITemplate.java,743, }
java/engine/org/apache/derby/vti/VTITemplate.java,744,
java/engine/org/apache/derby/vti/VTITemplate.java,745, /**
java/engine/org/apache/derby/vti/VTITemplate.java,746,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,747,  *
java/engine/org/apache/derby/vti/VTITemplate.java,748,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,749,  */
java/engine/org/apache/derby/vti/VTITemplate.java,750," public void updateDouble(int columnIndex, double x)"
java/engine/org/apache/derby/vti/VTITemplate.java,751,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,752,"  throw new SQLException(""updateDouble"");"
java/engine/org/apache/derby/vti/VTITemplate.java,753, }
java/engine/org/apache/derby/vti/VTITemplate.java,754,
java/engine/org/apache/derby/vti/VTITemplate.java,755, /**
java/engine/org/apache/derby/vti/VTITemplate.java,756,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,757,  *
java/engine/org/apache/derby/vti/VTITemplate.java,758,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,759,  */
java/engine/org/apache/derby/vti/VTITemplate.java,760," public void updateBigDecimal(int columnIndex, BigDecimal x)"
java/engine/org/apache/derby/vti/VTITemplate.java,761,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,762,"  throw new SQLException(""updateBigDecimal"");"
java/engine/org/apache/derby/vti/VTITemplate.java,763, }
java/engine/org/apache/derby/vti/VTITemplate.java,764,
java/engine/org/apache/derby/vti/VTITemplate.java,765, /**
java/engine/org/apache/derby/vti/VTITemplate.java,766,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,767,  *
java/engine/org/apache/derby/vti/VTITemplate.java,768,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,769,  */
java/engine/org/apache/derby/vti/VTITemplate.java,770," public void updateString(int columnIndex, String x)"
java/engine/org/apache/derby/vti/VTITemplate.java,771,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,772,"  throw new SQLException(""updateString"");"
java/engine/org/apache/derby/vti/VTITemplate.java,773, }
java/engine/org/apache/derby/vti/VTITemplate.java,774,
java/engine/org/apache/derby/vti/VTITemplate.java,775, /**
java/engine/org/apache/derby/vti/VTITemplate.java,776,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,777,  *
java/engine/org/apache/derby/vti/VTITemplate.java,778,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,779,  */
java/engine/org/apache/derby/vti/VTITemplate.java,780," public void updateBytes(int columnIndex, byte[] x)"
java/engine/org/apache/derby/vti/VTITemplate.java,781,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,782,"  throw new SQLException(""updateBytes"");"
java/engine/org/apache/derby/vti/VTITemplate.java,783, }
java/engine/org/apache/derby/vti/VTITemplate.java,784,
java/engine/org/apache/derby/vti/VTITemplate.java,785, /**
java/engine/org/apache/derby/vti/VTITemplate.java,786,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,787,  *
java/engine/org/apache/derby/vti/VTITemplate.java,788,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,789,  */
java/engine/org/apache/derby/vti/VTITemplate.java,790," public void updateDate(int columnIndex, java.sql.Date x)"
java/engine/org/apache/derby/vti/VTITemplate.java,791,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,792,"  throw new SQLException(""updateDate"");"
java/engine/org/apache/derby/vti/VTITemplate.java,793, }
java/engine/org/apache/derby/vti/VTITemplate.java,794,
java/engine/org/apache/derby/vti/VTITemplate.java,795, /**
java/engine/org/apache/derby/vti/VTITemplate.java,796,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,797,  *
java/engine/org/apache/derby/vti/VTITemplate.java,798,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,799,  */
java/engine/org/apache/derby/vti/VTITemplate.java,800," public void updateTime(int columnIndex, java.sql.Time x)"
java/engine/org/apache/derby/vti/VTITemplate.java,801,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,802,"  throw new SQLException(""updateTime"");"
java/engine/org/apache/derby/vti/VTITemplate.java,803, }
java/engine/org/apache/derby/vti/VTITemplate.java,804,
java/engine/org/apache/derby/vti/VTITemplate.java,805, /**
java/engine/org/apache/derby/vti/VTITemplate.java,806,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,807,  *
java/engine/org/apache/derby/vti/VTITemplate.java,808,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,809,  */
java/engine/org/apache/derby/vti/VTITemplate.java,810," public void updateTimestamp(int columnIndex, java.sql.Timestamp x)"
java/engine/org/apache/derby/vti/VTITemplate.java,811,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,812,"  throw new SQLException(""updateTimestamp"");"
java/engine/org/apache/derby/vti/VTITemplate.java,813, }
java/engine/org/apache/derby/vti/VTITemplate.java,814,
java/engine/org/apache/derby/vti/VTITemplate.java,815, /**
java/engine/org/apache/derby/vti/VTITemplate.java,816,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,817,  *
java/engine/org/apache/derby/vti/VTITemplate.java,818,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,819,  */
java/engine/org/apache/derby/vti/VTITemplate.java,820," public void updateAsciiStream(int columnIndex,"
java/engine/org/apache/derby/vti/VTITemplate.java,821,"       java.io.InputStream x,"
java/engine/org/apache/derby/vti/VTITemplate.java,822,       int length)
java/engine/org/apache/derby/vti/VTITemplate.java,823,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,824,"  throw new SQLException(""updateAsciiStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,825, }
java/engine/org/apache/derby/vti/VTITemplate.java,826,
java/engine/org/apache/derby/vti/VTITemplate.java,827, /**
java/engine/org/apache/derby/vti/VTITemplate.java,828,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,829,  *
java/engine/org/apache/derby/vti/VTITemplate.java,830,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,831,  */
java/engine/org/apache/derby/vti/VTITemplate.java,832," public void updateBinaryStream(int columnIndex,"
java/engine/org/apache/derby/vti/VTITemplate.java,833,"       java.io.InputStream x,"
java/engine/org/apache/derby/vti/VTITemplate.java,834,       int length)
java/engine/org/apache/derby/vti/VTITemplate.java,835,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,836,"  throw new SQLException(""updateBinaryStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,837, }
java/engine/org/apache/derby/vti/VTITemplate.java,838,
java/engine/org/apache/derby/vti/VTITemplate.java,839, /**
java/engine/org/apache/derby/vti/VTITemplate.java,840,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,841,  *
java/engine/org/apache/derby/vti/VTITemplate.java,842,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,843,  */
java/engine/org/apache/derby/vti/VTITemplate.java,844," public void updateCharacterStream(int columnIndex,"
java/engine/org/apache/derby/vti/VTITemplate.java,845,"       java.io.Reader x,"
java/engine/org/apache/derby/vti/VTITemplate.java,846,       int length)
java/engine/org/apache/derby/vti/VTITemplate.java,847,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,848,"  throw new SQLException(""updateCharacterStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,849, }
java/engine/org/apache/derby/vti/VTITemplate.java,850,
java/engine/org/apache/derby/vti/VTITemplate.java,851, /**
java/engine/org/apache/derby/vti/VTITemplate.java,852,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,853,  *
java/engine/org/apache/derby/vti/VTITemplate.java,854,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,855,  */
java/engine/org/apache/derby/vti/VTITemplate.java,856," public void updateObject(int columnIndex,"
java/engine/org/apache/derby/vti/VTITemplate.java,857,"       Object x,"
java/engine/org/apache/derby/vti/VTITemplate.java,858,       int scale)
java/engine/org/apache/derby/vti/VTITemplate.java,859,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,860,"  throw new SQLException(""updateObject"");"
java/engine/org/apache/derby/vti/VTITemplate.java,861, }
java/engine/org/apache/derby/vti/VTITemplate.java,862,
java/engine/org/apache/derby/vti/VTITemplate.java,863, /**
java/engine/org/apache/derby/vti/VTITemplate.java,864,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,865,  *
java/engine/org/apache/derby/vti/VTITemplate.java,866,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,867,  */
java/engine/org/apache/derby/vti/VTITemplate.java,868," public void updateObject(int columnIndex, Object x)"
java/engine/org/apache/derby/vti/VTITemplate.java,869,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,870,"  throw new SQLException(""updateObject"");"
java/engine/org/apache/derby/vti/VTITemplate.java,871, }
java/engine/org/apache/derby/vti/VTITemplate.java,872,
java/engine/org/apache/derby/vti/VTITemplate.java,873, /**
java/engine/org/apache/derby/vti/VTITemplate.java,874,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,875,  *
java/engine/org/apache/derby/vti/VTITemplate.java,876,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,877,  */
java/engine/org/apache/derby/vti/VTITemplate.java,878, public void updateNull(String columnName)
java/engine/org/apache/derby/vti/VTITemplate.java,879,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,880,"  throw new SQLException(""updateNull"");"
java/engine/org/apache/derby/vti/VTITemplate.java,881, }
java/engine/org/apache/derby/vti/VTITemplate.java,882,
java/engine/org/apache/derby/vti/VTITemplate.java,883, /**
java/engine/org/apache/derby/vti/VTITemplate.java,884,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,885,  *
java/engine/org/apache/derby/vti/VTITemplate.java,886,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,887,  */
java/engine/org/apache/derby/vti/VTITemplate.java,888," public void updateBoolean(String columnName, boolean x)"
java/engine/org/apache/derby/vti/VTITemplate.java,889,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,890,"  throw new SQLException(""updateBoolean"");"
java/engine/org/apache/derby/vti/VTITemplate.java,891, }
java/engine/org/apache/derby/vti/VTITemplate.java,892,
java/engine/org/apache/derby/vti/VTITemplate.java,893, /**
java/engine/org/apache/derby/vti/VTITemplate.java,894,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,895,  *
java/engine/org/apache/derby/vti/VTITemplate.java,896,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,897,  */
java/engine/org/apache/derby/vti/VTITemplate.java,898," public void updateByte(String columnName, byte x)"
java/engine/org/apache/derby/vti/VTITemplate.java,899,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,900,"  throw new SQLException(""updateByte"");"
java/engine/org/apache/derby/vti/VTITemplate.java,901, }
java/engine/org/apache/derby/vti/VTITemplate.java,902,
java/engine/org/apache/derby/vti/VTITemplate.java,903, /**
java/engine/org/apache/derby/vti/VTITemplate.java,904,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,905,  *
java/engine/org/apache/derby/vti/VTITemplate.java,906,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,907,  */
java/engine/org/apache/derby/vti/VTITemplate.java,908," public void updateShort(String columnName, short x)"
java/engine/org/apache/derby/vti/VTITemplate.java,909,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,910,"  throw new SQLException(""updateShort"");"
java/engine/org/apache/derby/vti/VTITemplate.java,911, }
java/engine/org/apache/derby/vti/VTITemplate.java,912,
java/engine/org/apache/derby/vti/VTITemplate.java,913, /**
java/engine/org/apache/derby/vti/VTITemplate.java,914,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,915,  *
java/engine/org/apache/derby/vti/VTITemplate.java,916,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,917,  */
java/engine/org/apache/derby/vti/VTITemplate.java,918," public void updateInt(String columnName, int x)"
java/engine/org/apache/derby/vti/VTITemplate.java,919,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,920,"  throw new SQLException(""updateInt"");"
java/engine/org/apache/derby/vti/VTITemplate.java,921, }
java/engine/org/apache/derby/vti/VTITemplate.java,922,
java/engine/org/apache/derby/vti/VTITemplate.java,923, /**
java/engine/org/apache/derby/vti/VTITemplate.java,924,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,925,  *
java/engine/org/apache/derby/vti/VTITemplate.java,926,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,927,  */
java/engine/org/apache/derby/vti/VTITemplate.java,928," public void updateLong(String columnName, long x)"
java/engine/org/apache/derby/vti/VTITemplate.java,929,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,930,"  throw new SQLException(""updateLong"");"
java/engine/org/apache/derby/vti/VTITemplate.java,931, }
java/engine/org/apache/derby/vti/VTITemplate.java,932,
java/engine/org/apache/derby/vti/VTITemplate.java,933, /**
java/engine/org/apache/derby/vti/VTITemplate.java,934,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,935,  *
java/engine/org/apache/derby/vti/VTITemplate.java,936,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,937,  */
java/engine/org/apache/derby/vti/VTITemplate.java,938," public void updateFloat(String columnName, float x)"
java/engine/org/apache/derby/vti/VTITemplate.java,939,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,940,"  throw new SQLException(""updateFloat"");"
java/engine/org/apache/derby/vti/VTITemplate.java,941, }
java/engine/org/apache/derby/vti/VTITemplate.java,942,
java/engine/org/apache/derby/vti/VTITemplate.java,943, /**
java/engine/org/apache/derby/vti/VTITemplate.java,944,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,945,  *
java/engine/org/apache/derby/vti/VTITemplate.java,946,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,947,  */
java/engine/org/apache/derby/vti/VTITemplate.java,948," public void updateDouble(String columnName, double x)"
java/engine/org/apache/derby/vti/VTITemplate.java,949,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,950,"  throw new SQLException(""updateDouble"");"
java/engine/org/apache/derby/vti/VTITemplate.java,951, }
java/engine/org/apache/derby/vti/VTITemplate.java,952,
java/engine/org/apache/derby/vti/VTITemplate.java,953, /**
java/engine/org/apache/derby/vti/VTITemplate.java,954,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,955,  *
java/engine/org/apache/derby/vti/VTITemplate.java,956,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,957,  */
java/engine/org/apache/derby/vti/VTITemplate.java,958," public void updateBigDecimal(String columnName, BigDecimal x)"
java/engine/org/apache/derby/vti/VTITemplate.java,959,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,960,"  throw new SQLException(""updateBigDecimal"");"
java/engine/org/apache/derby/vti/VTITemplate.java,961, }
java/engine/org/apache/derby/vti/VTITemplate.java,962,
java/engine/org/apache/derby/vti/VTITemplate.java,963, /**
java/engine/org/apache/derby/vti/VTITemplate.java,964,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,965,  *
java/engine/org/apache/derby/vti/VTITemplate.java,966,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,967,  */
java/engine/org/apache/derby/vti/VTITemplate.java,968," public void updateString(String columnName, String x)"
java/engine/org/apache/derby/vti/VTITemplate.java,969,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,970,"  throw new SQLException(""updateString"");"
java/engine/org/apache/derby/vti/VTITemplate.java,971, }
java/engine/org/apache/derby/vti/VTITemplate.java,972,
java/engine/org/apache/derby/vti/VTITemplate.java,973, /**
java/engine/org/apache/derby/vti/VTITemplate.java,974,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,975,  *
java/engine/org/apache/derby/vti/VTITemplate.java,976,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,977,  */
java/engine/org/apache/derby/vti/VTITemplate.java,978," public void updateBytes(String columnName, byte[] x)"
java/engine/org/apache/derby/vti/VTITemplate.java,979,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,980,"  throw new SQLException(""updateBytes"");"
java/engine/org/apache/derby/vti/VTITemplate.java,981, }
java/engine/org/apache/derby/vti/VTITemplate.java,982,
java/engine/org/apache/derby/vti/VTITemplate.java,983, /**
java/engine/org/apache/derby/vti/VTITemplate.java,984,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,985,  *
java/engine/org/apache/derby/vti/VTITemplate.java,986,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,987,  */
java/engine/org/apache/derby/vti/VTITemplate.java,988," public void updateDate(String columnName, java.sql.Date x)"
java/engine/org/apache/derby/vti/VTITemplate.java,989,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,990,"  throw new SQLException(""updateDate"");"
java/engine/org/apache/derby/vti/VTITemplate.java,991, }
java/engine/org/apache/derby/vti/VTITemplate.java,992,
java/engine/org/apache/derby/vti/VTITemplate.java,993, /**
java/engine/org/apache/derby/vti/VTITemplate.java,994,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,995,  *
java/engine/org/apache/derby/vti/VTITemplate.java,996,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,997,  */
java/engine/org/apache/derby/vti/VTITemplate.java,998," public void updateTime(String columnName, java.sql.Time x)"
java/engine/org/apache/derby/vti/VTITemplate.java,999,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1000,"  throw new SQLException(""updateTime"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1001, }
java/engine/org/apache/derby/vti/VTITemplate.java,1002,
java/engine/org/apache/derby/vti/VTITemplate.java,1003, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1004,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1005,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1006,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1007,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1008," public void updateTimestamp(String columnName, java.sql.Timestamp x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1009,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1010,"  throw new SQLException(""updateTimestamp"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1011, }
java/engine/org/apache/derby/vti/VTITemplate.java,1012,
java/engine/org/apache/derby/vti/VTITemplate.java,1013, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1014,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1015,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1016,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1017,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1018," public void updateAsciiStream(String columnName,"
java/engine/org/apache/derby/vti/VTITemplate.java,1019,"       java.io.InputStream x,"
java/engine/org/apache/derby/vti/VTITemplate.java,1020,       int length)
java/engine/org/apache/derby/vti/VTITemplate.java,1021,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1022,"  throw new SQLException(""updateAsciiStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1023, }
java/engine/org/apache/derby/vti/VTITemplate.java,1024,
java/engine/org/apache/derby/vti/VTITemplate.java,1025, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1026,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1027,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1028,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1029,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1030," public void updateBinaryStream(String columnName,"
java/engine/org/apache/derby/vti/VTITemplate.java,1031,"       java.io.InputStream x,"
java/engine/org/apache/derby/vti/VTITemplate.java,1032,       int length)
java/engine/org/apache/derby/vti/VTITemplate.java,1033,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1034,"  throw new SQLException(""updateBinaryStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1035, }
java/engine/org/apache/derby/vti/VTITemplate.java,1036,
java/engine/org/apache/derby/vti/VTITemplate.java,1037, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1038,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1039,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1040,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1041,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1042," public void updateCharacterStream(String columnName,"
java/engine/org/apache/derby/vti/VTITemplate.java,1043,"       java.io.Reader x,"
java/engine/org/apache/derby/vti/VTITemplate.java,1044,       int length)
java/engine/org/apache/derby/vti/VTITemplate.java,1045,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1046,"  throw new SQLException(""updateCharacterStream"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1047, }
java/engine/org/apache/derby/vti/VTITemplate.java,1048,
java/engine/org/apache/derby/vti/VTITemplate.java,1049, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1050,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1051,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1052,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1053,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1054," public void updateObject(String columnName,"
java/engine/org/apache/derby/vti/VTITemplate.java,1055,"       Object x,"
java/engine/org/apache/derby/vti/VTITemplate.java,1056,       int scale)
java/engine/org/apache/derby/vti/VTITemplate.java,1057,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1058,"  throw new SQLException(""updateObject"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1059, }
java/engine/org/apache/derby/vti/VTITemplate.java,1060,
java/engine/org/apache/derby/vti/VTITemplate.java,1061, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1062,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1063,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1064,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1065,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1066," public void updateObject(String columnName, Object x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1067,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1068,"  throw new SQLException(""updateObject"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1069, }
java/engine/org/apache/derby/vti/VTITemplate.java,1070,
java/engine/org/apache/derby/vti/VTITemplate.java,1071, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1072,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1073,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1074,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1075,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1076, public void insertRow()
java/engine/org/apache/derby/vti/VTITemplate.java,1077,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1078,"  throw new SQLException(""insertRow"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1079, }
java/engine/org/apache/derby/vti/VTITemplate.java,1080,
java/engine/org/apache/derby/vti/VTITemplate.java,1081, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1082,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1083,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1084,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1085,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1086, public void updateRow()
java/engine/org/apache/derby/vti/VTITemplate.java,1087,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1088,"  throw new SQLException(""updateRow"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1089, }
java/engine/org/apache/derby/vti/VTITemplate.java,1090,
java/engine/org/apache/derby/vti/VTITemplate.java,1091, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1092,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1093,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1094,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1095,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1096, public void deleteRow()
java/engine/org/apache/derby/vti/VTITemplate.java,1097,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1098,"  throw new SQLException(""deleteRow"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1099, }
java/engine/org/apache/derby/vti/VTITemplate.java,1100,
java/engine/org/apache/derby/vti/VTITemplate.java,1101, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1102,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1103,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1104,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1105,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1106, public void refreshRow()
java/engine/org/apache/derby/vti/VTITemplate.java,1107,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1108,"  throw new SQLException(""refreshRow"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1109, }
java/engine/org/apache/derby/vti/VTITemplate.java,1110,
java/engine/org/apache/derby/vti/VTITemplate.java,1111, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1112,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1113,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1114,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1115,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1116, public void cancelRowUpdates()
java/engine/org/apache/derby/vti/VTITemplate.java,1117,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1118,"  throw new SQLException(""cancelRowUpdates"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1119, }
java/engine/org/apache/derby/vti/VTITemplate.java,1120,
java/engine/org/apache/derby/vti/VTITemplate.java,1121, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1122,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1123,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1124,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1125,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1126, public void moveToInsertRow()
java/engine/org/apache/derby/vti/VTITemplate.java,1127,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1128,"  throw new SQLException(""moveToInsertRow"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1129, }
java/engine/org/apache/derby/vti/VTITemplate.java,1130,
java/engine/org/apache/derby/vti/VTITemplate.java,1131, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1132,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1133,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1134,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1135,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1136, public void moveToCurrentRow()
java/engine/org/apache/derby/vti/VTITemplate.java,1137,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1138,"  throw new SQLException(""moveToCurrentRow"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1139, }
java/engine/org/apache/derby/vti/VTITemplate.java,1140,
java/engine/org/apache/derby/vti/VTITemplate.java,1141, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1142,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1143,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1144,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1145,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1146, public Statement getStatement()
java/engine/org/apache/derby/vti/VTITemplate.java,1147,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1148,"  throw new SQLException(""getStatement"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1149, }
java/engine/org/apache/derby/vti/VTITemplate.java,1150, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1151,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1152,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1153,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1154,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1155," public java.sql.Date getDate(int columnIndex, Calendar cal)"
java/engine/org/apache/derby/vti/VTITemplate.java,1156,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1157,"  throw new SQLException(""getDate"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1158, }
java/engine/org/apache/derby/vti/VTITemplate.java,1159,
java/engine/org/apache/derby/vti/VTITemplate.java,1160, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1161,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1162,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1163,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1164,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1165," public java.sql.Date getDate(String columnName, Calendar cal)"
java/engine/org/apache/derby/vti/VTITemplate.java,1166,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1167,"  throw new SQLException(""getDate"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1168, }
java/engine/org/apache/derby/vti/VTITemplate.java,1169,
java/engine/org/apache/derby/vti/VTITemplate.java,1170, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1171,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1172,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1173,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1174,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1175," public java.sql.Time getTime(int columnIndex, Calendar cal)"
java/engine/org/apache/derby/vti/VTITemplate.java,1176,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1177,"  throw new SQLException(""getTime"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1178, }
java/engine/org/apache/derby/vti/VTITemplate.java,1179,
java/engine/org/apache/derby/vti/VTITemplate.java,1180, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1181,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1182,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1183,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1184,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1185," public java.sql.Time getTime(String columnName, Calendar cal)"
java/engine/org/apache/derby/vti/VTITemplate.java,1186,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1187,"  throw new SQLException(""getTime"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1188, }
java/engine/org/apache/derby/vti/VTITemplate.java,1189,
java/engine/org/apache/derby/vti/VTITemplate.java,1190, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1191,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1192,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1193,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1194,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1195," public java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal)"
java/engine/org/apache/derby/vti/VTITemplate.java,1196,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1197,"  throw new SQLException(""getTimestamp"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1198, }
java/engine/org/apache/derby/vti/VTITemplate.java,1199,
java/engine/org/apache/derby/vti/VTITemplate.java,1200, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1201,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1202,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1203,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1204,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1205," public java.sql.Timestamp getTimestamp(String columnName, Calendar cal)"
java/engine/org/apache/derby/vti/VTITemplate.java,1206,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1207,"  throw new SQLException(""getTimestamp"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1208, }
java/engine/org/apache/derby/vti/VTITemplate.java,1209, /*
java/engine/org/apache/derby/vti/VTITemplate.java,1210, ** JDBC 3.0 methods
java/engine/org/apache/derby/vti/VTITemplate.java,1211, */
java/engine/org/apache/derby/vti/VTITemplate.java,1212,
java/engine/org/apache/derby/vti/VTITemplate.java,1213, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1214,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1215,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1216,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1217,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1218, public URL getURL(int columnIndex)
java/engine/org/apache/derby/vti/VTITemplate.java,1219,    throws SQLException
java/engine/org/apache/derby/vti/VTITemplate.java,1220, {
java/engine/org/apache/derby/vti/VTITemplate.java,1221,"  throw new SQLException(""getURL"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1222, }
java/engine/org/apache/derby/vti/VTITemplate.java,1223,
java/engine/org/apache/derby/vti/VTITemplate.java,1224, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1225,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1226,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1227,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1228,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1229, public URL getURL(String columnName)
java/engine/org/apache/derby/vti/VTITemplate.java,1230,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1231,"  throw new SQLException(""getURL"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1232, }
java/engine/org/apache/derby/vti/VTITemplate.java,1233,
java/engine/org/apache/derby/vti/VTITemplate.java,1234, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1235,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1236,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1237,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1238,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1239," public Object getObject(int i, java.util.Map map)"
java/engine/org/apache/derby/vti/VTITemplate.java,1240,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1241,"  throw new SQLException(""getObject"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1242, }
java/engine/org/apache/derby/vti/VTITemplate.java,1243,
java/engine/org/apache/derby/vti/VTITemplate.java,1244, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1245,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1246,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1247,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1248,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1249, public Ref getRef(int i)
java/engine/org/apache/derby/vti/VTITemplate.java,1250,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1251,"  throw new SQLException(""getRef"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1252, }
java/engine/org/apache/derby/vti/VTITemplate.java,1253,
java/engine/org/apache/derby/vti/VTITemplate.java,1254, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1255,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1256,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1257,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1258,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1259, public Blob getBlob(int i)
java/engine/org/apache/derby/vti/VTITemplate.java,1260,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1261,"  throw new SQLException(""getBlob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1262, }
java/engine/org/apache/derby/vti/VTITemplate.java,1263,
java/engine/org/apache/derby/vti/VTITemplate.java,1264, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1265,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1266,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1267,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1268,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1269, public Clob getClob(int i)
java/engine/org/apache/derby/vti/VTITemplate.java,1270,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1271,"  throw new SQLException(""getClob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1272, }
java/engine/org/apache/derby/vti/VTITemplate.java,1273,
java/engine/org/apache/derby/vti/VTITemplate.java,1274, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1275,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1276,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1277,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1278,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1279, public Array getArray(int i)
java/engine/org/apache/derby/vti/VTITemplate.java,1280,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1281,"  throw new SQLException(""getArray"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1282, }
java/engine/org/apache/derby/vti/VTITemplate.java,1283,
java/engine/org/apache/derby/vti/VTITemplate.java,1284, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1285,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1286,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1287,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1288,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1289," public Object getObject(String colName, java.util.Map map)"
java/engine/org/apache/derby/vti/VTITemplate.java,1290,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1291,"  throw new SQLException(""getObject"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1292, }
java/engine/org/apache/derby/vti/VTITemplate.java,1293,
java/engine/org/apache/derby/vti/VTITemplate.java,1294, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1295,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1296,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1297,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1298,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1299, public Ref getRef(String colName)
java/engine/org/apache/derby/vti/VTITemplate.java,1300,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1301,"  throw new SQLException(""getRef"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1302, }
java/engine/org/apache/derby/vti/VTITemplate.java,1303,
java/engine/org/apache/derby/vti/VTITemplate.java,1304, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1305,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1306,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1307,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1308,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1309, public Blob getBlob(String colName)
java/engine/org/apache/derby/vti/VTITemplate.java,1310,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1311,"  throw new SQLException(""getBlob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1312, }
java/engine/org/apache/derby/vti/VTITemplate.java,1313,
java/engine/org/apache/derby/vti/VTITemplate.java,1314, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1315,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1316,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1317,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1318,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1319, public Clob getClob(String colName)
java/engine/org/apache/derby/vti/VTITemplate.java,1320,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1321,"  throw new SQLException(""getClob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1322, }
java/engine/org/apache/derby/vti/VTITemplate.java,1323,
java/engine/org/apache/derby/vti/VTITemplate.java,1324, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1325,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1326,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1327,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1328,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1329, public Array getArray(String colName)
java/engine/org/apache/derby/vti/VTITemplate.java,1330,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1331,"  throw new SQLException(""getArray"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1332, }
java/engine/org/apache/derby/vti/VTITemplate.java,1333,
java/engine/org/apache/derby/vti/VTITemplate.java,1334,
java/engine/org/apache/derby/vti/VTITemplate.java,1335, // JDBC 3.0 methods - not implemented
java/engine/org/apache/derby/vti/VTITemplate.java,1336,
java/engine/org/apache/derby/vti/VTITemplate.java,1337, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1338,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1339,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1340,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1341,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1342," public void updateRef(int columnIndex, Ref x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1343,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1344,"  throw new SQLException(""updateRef"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1345, }
java/engine/org/apache/derby/vti/VTITemplate.java,1346,
java/engine/org/apache/derby/vti/VTITemplate.java,1347, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1348,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1349,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1350,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1351,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1352," public void updateRef(String columnName, Ref x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1353,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1354,"  throw new SQLException(""updateRef"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1355, }
java/engine/org/apache/derby/vti/VTITemplate.java,1356,
java/engine/org/apache/derby/vti/VTITemplate.java,1357, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1358,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1359,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1360,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1361,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1362," public void updateBlob(int columnIndex, Blob x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1363,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1364,"  throw new SQLException(""updateBlob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1365, }
java/engine/org/apache/derby/vti/VTITemplate.java,1366,
java/engine/org/apache/derby/vti/VTITemplate.java,1367, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1368,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1369,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1370,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1371,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1372," public void updateBlob(String columnName, Blob x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1373,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1374,"  throw new SQLException(""updateBlob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1375, }
java/engine/org/apache/derby/vti/VTITemplate.java,1376,
java/engine/org/apache/derby/vti/VTITemplate.java,1377, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1378,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1379,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1380,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1381,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1382," public void updateClob(int columnIndex, Clob x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1383,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1384,"  throw new SQLException(""updateClob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1385, }
java/engine/org/apache/derby/vti/VTITemplate.java,1386,
java/engine/org/apache/derby/vti/VTITemplate.java,1387, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1388,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1389,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1390,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1391,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1392," public void updateClob(String columnName, Clob x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1393,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1394,"  throw new SQLException(""updateClob"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1395, }
java/engine/org/apache/derby/vti/VTITemplate.java,1396,
java/engine/org/apache/derby/vti/VTITemplate.java,1397, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1398,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1399,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1400,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1401,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1402," public void updateArray(int columnIndex, Array x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1403,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1404,"  throw new SQLException(""updateArray"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1405, }
java/engine/org/apache/derby/vti/VTITemplate.java,1407, /**
java/engine/org/apache/derby/vti/VTITemplate.java,1408,  * @see java.sql.ResultSet
java/engine/org/apache/derby/vti/VTITemplate.java,1409,  *
java/engine/org/apache/derby/vti/VTITemplate.java,1410,   * @exception SQLException on unexpected JDBC error
java/engine/org/apache/derby/vti/VTITemplate.java,1411,  */
java/engine/org/apache/derby/vti/VTITemplate.java,1412," public void updateArray(String columnName, Array x)"
java/engine/org/apache/derby/vti/VTITemplate.java,1413,     throws SQLException {
java/engine/org/apache/derby/vti/VTITemplate.java,1414,"  throw new SQLException(""updateArray"");"
java/engine/org/apache/derby/vti/VTITemplate.java,1415, }
java/engine/org/apache/derby/impl/db/BasicDatabase.java,27,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,31,import org.apache.derby.iapi.services.info.JVMInfo;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,44,import org.apache.derby.iapi.services.property.PersistentSet;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,50,import org.apache.derby.iapi.sql.compile.OptimizerFactory;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,52,import org.apache.derby.iapi.sql.conn.ConnectionUtil;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,59,import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,61,import org.apache.derby.iapi.sql.depend.DependencyManager;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,64,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,78,import java.io.InputStream;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,79,import java.io.OutputStream;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,81,import java.io.File;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,82,import java.sql.Date;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,83,import java.sql.Timestamp;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,87,import java.util.Enumeration;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,88,import java.util.Hashtable;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,90,import java.lang.reflect.Method;
java/engine/org/apache/derby/impl/db/BasicDatabase.java,252, }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,904, public void stop()
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,905, {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,906, }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13652,}
java/engine/org/apache/derby/vti/VTITemplateBase.java,47,public class VTITemplateBase implements ResultSet
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java,53,"        {10, 6, 2, 1}, // 10.6.2.1 (Oct 6, 2010/ SVN 999685"
java/client/org/apache/derby/client/am/ResultSet.java,1941,"    private final int findColumnX(String columnName, String operation) throws SqlException {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,34,import java.sql.NClob;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,55, * Tests of JDBC4 features in ResultSet.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,62,    extends BaseJDBCTestCase {
java/client/org/apache/derby/client/net/NetResultSet40.java,278,"            throw new SQLException( ""NULL"", SQLState.LANG_DATA_TYPE_GET_MISMATCH );"
java/client/org/apache/derby/client/net/NetResultSet40.java,282,
java/client/org/apache/derby/client/net/NetResultSet40.java,299,            else { return (T) getObject( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,301,        catch (ClassCastException e) {}
java/client/org/apache/derby/client/net/NetResultSet40.java,303,"        throw new SQLException( type.getName(), SQLState.LANG_DATA_TYPE_GET_MISMATCH, ex );"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,261,"            throw new SQLException( ""NULL"", SQLState.LANG_DATA_TYPE_GET_MISMATCH );"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,264,        Exception ex = null;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,265,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,            else { return (T) getObject( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,284,        catch (ClassCastException e) { ex = e; }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,286,"        throw new SQLException( type.getName(), SQLState.LANG_DATA_TYPE_GET_MISMATCH, ex );"
java/client/org/apache/derby/client/net/NetResultSet40.java,301,                Object  result = getObject( columnIndex );
java/client/org/apache/derby/client/net/NetResultSet40.java,302,                if ( !type.isInstance( result ) ) { throw new ClassCastException( type.getName() ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,303,                return (T) result;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,                Object  result = getObject( columnIndex );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,283,                if ( !type.isInstance( result ) ) { throw new ClassCastException( type.getName() ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,284,                return (T) result;
java/client/org/apache/derby/client/net/NetResultSet40.java,278,"            throw mismatchException( ""NULL"", columnIndex, null );"
java/client/org/apache/derby/client/net/NetResultSet40.java,281,        Exception ex = null;
java/client/org/apache/derby/client/net/NetResultSet40.java,282,
java/client/org/apache/derby/client/net/NetResultSet40.java,304,        catch (Exception e) { ex = e; }
java/client/org/apache/derby/client/net/NetResultSet40.java,306,"        throw mismatchException( type.getName(), columnIndex, ex );"
java/client/org/apache/derby/client/net/NetResultSet40.java,308,"    private SQLException    mismatchException( String targetTypeName, int columnIndex, Throwable t )"
java/client/org/apache/derby/client/net/NetResultSet40.java,313,"        SqlException se = new SqlException( agent_.logWriter_, cmi, targetTypeName, sourceTypeName, t );"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,132,    /**
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,133,     * RUNTIME state of the system is maintained in these objects.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,134,     * rowBufferOne simply reuses the index row prepared by
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,135,     * makeConstantAction. rowBufferTwo is a clone (an extra copy) of
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,136,     * objects. rowBufferCurrent just switches between rowBufferOne and
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,137,     * rowBufferTwo.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,138,     */
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,139,    private DataValueDescriptor[][] rowBufferArray;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,140,    private DataValueDescriptor[] rowBuffer;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,141,    private DataValueDescriptor[] lastUniqueKey;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,142,    private static final int GROUP_FETCH_SIZE = 16;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,631,  ConglomerateDescriptor[] cds;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,632,  long[] conglomerateNumber;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,633,  ExecIndexRow[] indexRow;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,634,  UUID[] objectUUID;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,635,  GroupFetchScanController gsc;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,636,  //initialize numRows to -1 so we can tell if we scanned an index.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,637,  long numRows = -1;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,638,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,639,  td = dd.getTableDescriptor(tableId);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,640,  if (updateStatisticsAll)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,641,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,642,   cds = td.getConglomerateDescriptors();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,643,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,644,  else
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,645,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,646,   cds = new ConglomerateDescriptor[1];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,647,"   cds[0] = dd.getConglomerateDescriptor(indexNameForUpdateStatistics, sd, false);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,648,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,649,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,650,  conglomerateNumber = new long[cds.length];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,651,  indexRow = new ExecIndexRow[cds.length];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,652,  objectUUID = new UUID[cds.length];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,653,  ConglomerateController heapCC =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,654,"   tc.openConglomerate(td.getHeapConglomerateId(), false, 0,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,655,"     TransactionController.MODE_RECORD,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,656,     TransactionController.ISOLATION_REPEATABLE_READ);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,657,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,658,  try
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,659,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,660,   for (int i = 0; i < cds.length; i++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,661,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,662,    if (!cds[i].isIndex())
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,663,    {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,664,     conglomerateNumber[i] = -1;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,665,     continue;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,666,    }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,667,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,668,    conglomerateNumber[i] = cds[i].getConglomerateNumber();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,669,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,670,    objectUUID[i] = cds[i].getUUID();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,671,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,672,    indexRow[i] =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,673,     cds[i].getIndexDescriptor().getNullIndexRow(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,674,"      td.getColumnDescriptorList(),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,675,      heapCC.newRowLocationTemplate());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,676,   }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,677,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,678,  finally
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,679,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,680,   heapCC.close();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,681,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,682,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,683,  dd.startWriting(lcc);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,684,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,685,"  dm.invalidateFor(td, DependencyManager.UPDATE_STATISTICS, lcc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,686,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,687,  for (int indexNumber = 0; indexNumber < conglomerateNumber.length;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,688,    indexNumber++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,689,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,690,   if (conglomerateNumber[indexNumber] == -1)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,691,    continue;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,692,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,693,   int numCols = indexRow[indexNumber].nColumns() - 1;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,694,   long[] cardinality = new long[numCols];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,695,   numRows = 0;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,696,   initializeRowBuffers(indexRow[indexNumber]);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,697,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,698,"   /* Read uncommited, with record locking. Actually CS store may"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,699,      not hold record locks */
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,700,   gsc =
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,701,    tc.openGroupFetchScan(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,702,"      conglomerateNumber[indexNumber],"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,703,"      false,  // hold"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,704,"      0,      // openMode: for read"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,705,"      TransactionController.MODE_RECORD, // locking"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,706,"      TransactionController.ISOLATION_READ_UNCOMMITTED, //isolation level"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,707,"      null,   // scancolumnlist-- want everything."
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,708,"      null,   // startkeyvalue-- start from the beginning."
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,709,"      0,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,710,"      null,   // qualifiers, none!"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,711,"      null,   // stopkeyvalue,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,712,      0);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,713,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,714,   try
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,715,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,716,    boolean firstRow = true;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,717,    int rowsFetched = 0;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,718,"    while ((rowsFetched = gsc.fetchNextGroup(rowBufferArray, null)) > 0)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,719,    {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,720,     for (int i = 0; i < rowsFetched; i++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,721,     {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,722,"      int whichPositionChanged = compareWithPrevKey(i, firstRow);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,723,      firstRow = false;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,724,      if (whichPositionChanged >= 0)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,725,      {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,726,       for (int j = whichPositionChanged; j < cardinality.length; j++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,727,        cardinality[j]++;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,728,      }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,729,      numRows++;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,730,     }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,731,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,732,     DataValueDescriptor[] tmp;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,733,     tmp = rowBufferArray[GROUP_FETCH_SIZE - 1];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,734,     rowBufferArray[GROUP_FETCH_SIZE - 1] = lastUniqueKey;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,735,     lastUniqueKey = tmp;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,736,    } // while
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,737,    gsc.setEstimatedRowCount(numRows);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,738,   } // try
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,739,   finally
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,740,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,741,    gsc.close();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,742,    gsc = null;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,743,   }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,744,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,745,   if (numRows == 0)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,746,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,747,    /* if there is no data in the table: no need to write anything
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,748,     * to sys.sysstatstics
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,749,     */
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,750,    break;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,751,   }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,752,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,753,   StatisticsDescriptor statDesc;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,754,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,755,"   dd.dropStatisticsDescriptors(tableId, objectUUID[indexNumber],"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,756,           tc);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,757,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,758,   for (int i = 0; i < indexRow[indexNumber].nColumns() - 1; i++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,759,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,760,"    statDesc = new StatisticsDescriptor(dd, dd.getUUIDFactory().createUUID(),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,761,"      objectUUID[indexNumber],"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,762,"      tableId,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,763,"      ""I"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,764,"      new StatisticsImpl(numRows,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,765,"        cardinality[i]),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,766,        i + 1);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,767,"    dd.addDescriptor(statDesc, null,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,768,"      DataDictionary.SYSSTATISTICS_CATALOG_NUM,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,769,"         true, tc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,770,"   } // for each leading column (c1) (c1,c2)...."
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,771,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,772,  } // for each index.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,773,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,774,"  // DERBY-4116 if there were indexes we scanned, we now know the row count."
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,775,  // Update statistics should update the store estimated row count for the table.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,776,"  // If we didn't scan an index and don't know, numRows will still be -1 and"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,777,  // we skip the estimatedRowCount update.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,778,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,779,  if (numRows == -1)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,780,   return;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,781,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,782,"  ScanController heapSC = tc.openScan(td.getHeapConglomerateId(),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,783,"    false,  // hold"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,784,"    0,      // openMode: for read"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,785,"    TransactionController.MODE_RECORD, // locking"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,786,"    TransactionController.ISOLATION_READ_UNCOMMITTED, //isolation level"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,787,"    null,   // scancolumnlist-- want everything."
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,788,"    null,   // startkeyvalue-- start from the beginning."
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,789,"    0,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,790,"    null,   // qualifiers, none!"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,791,"    null,   // stopkeyvalue,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,792,    0);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,793,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,794,  try {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,795,   heapSC.setEstimatedRowCount(numRows);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,796,  } finally {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,797,   heapSC.close();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,798,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,799,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,800, }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,801,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,802, private void initializeRowBuffers(ExecIndexRow ir)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,803, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,804,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,805,  rowBufferArray = new DataValueDescriptor[GROUP_FETCH_SIZE][];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,806,  lastUniqueKey = ir.getRowArrayClone();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,807,  rowBufferArray[0] = ir.getRowArray(); // 1 gets old objects.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,808, }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,809,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,810,"   private int compareWithPrevKey(int index, boolean firstRow)"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,811,    throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,812,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,813,    if (firstRow)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,814,     return 0;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,815,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,816,    DataValueDescriptor[] prev = (index == 0) ? lastUniqueKey : rowBufferArray[index - 1];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,817,    DataValueDescriptor[] curr = rowBufferArray[index];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,818,    // no point trying to do rowlocation; hence - 1
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,819,    for (int i = 0; i < (prev.length - 1); i++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,820,    {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,821,   DataValueDescriptor dvd = (DataValueDescriptor)prev[i];
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,822,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,823,   if (dvd.isNull())
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,824,    return i;// nulls are counted as unique values.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,825,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,826,     if (prev[i].compare(curr[i]) != 0)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,827,     {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,828,      return i;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,829,     }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,830,    }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,831,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,832,    return -1;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,833,   }
java/client/org/apache/derby/client/am/CallableStatement.java,1204,    private SQLException jdbcMethodNotImplemented() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,3,   Derby - Class CallableStatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,38,public class CallableStatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,39,    extends BaseJDBCTestCase {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,40,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,41,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,3,   Derby - Class ResultSetTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,53,import org.apache.derby.impl.jdbc.EmbedResultSet40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,54,import org.apache.derby.client.net.NetResultSet40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,55,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,68,public class ResultSetTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,69,    extends BaseJDBCTestCase
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,71,    //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,72,    // Wrapper class for testing JDBC 4.1 functionality.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,73,    //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,74,    // This wrapper can be removed after Java 7 goes GA and we are allowed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,75,    // to use the Java 7 compiler to build derbyTesting.jar.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,76,    //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,77,    public  static  final   class   Wrapper41
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,78,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,79,        private EmbedResultSet40    _embedded;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,80,        private NetResultSet40      _netclient;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,81,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,82,        public Wrapper41( ResultSet rs ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,83,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,84,            if ( rs instanceof EmbedResultSet40 ) { _embedded = (EmbedResultSet40) rs; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,85,            else if ( rs instanceof NetResultSet40 ) { _netclient = (NetResultSet40) rs; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,86,            else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,87,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,88,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,89,"        public  <T> T getObject( int columnIndex, Class<T> type ) throws SQLException"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,90,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,91,"            if ( _embedded != null ) { return _embedded.getObject( columnIndex, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,92,"            else if ( _netclient != null ) { return _netclient.getObject( columnIndex, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,93,            else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,94,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,95,"        public  <T> T getObject( String columnName, Class<T> type )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,96,            throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,97,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,98,"            if ( _embedded != null ) { return _embedded.getObject( columnName, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,99,"            else if ( _netclient != null ) { return _netclient.getObject( columnName, type ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,100,            else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,101,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,102,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,103,"        private SQLException nothingWrapped() { return new SQLException( ""Nothing wrapped!"" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,104,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,105,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,106,"    private static  final   String  UNSUPPORTED_COERCION = ""22005"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,107,"    private static  final   String  BAD_FORMAT = ""22018"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,108,"    private static  final   String  BAD_DATETIME = ""22007"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,109,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,110,"    private static  final   String  VARIABLE_STRING = ""XXXXX"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,111,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,140,    private Class   byteArrayClass;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,141,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2123,        examineJDBC4_1extensions( rs );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2148,    private void examineJDBC4_1extensions( ResultSet rs ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2149,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2150,        Wrapper41   wrapper = new Wrapper41( rs );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2151,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2152,"        println( ""Vetting a "" + rs.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2153,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2154,"        byteArrayClass = Class.forName( ""[B"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2155,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2156,        vetWrappedNull( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2157,"        vetWrappedInteger( wrapper, 1, ""BIGINTCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2158,        vetWrappedBlob( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2159,        vetWrappedBoolean( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2160,"        vetWrappedString( wrapper, 4, ""CHARCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2161,"        vetWrappedBinary( wrapper, 5, ""CHARFORBITDATACOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2162,        vetWrappedClob( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2163,        vetWrappedDate( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2164,"        vetWrappedFloatingPoint( wrapper, 8, ""DOUBLECOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2165,"        vetWrappedFloatingPoint( wrapper, 9, ""FLOATCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2166,"        vetWrappedInteger( wrapper, 10, ""INTCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2167,"        vetWrappedString( wrapper, 11, ""LONGVARCHARCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2168,"        vetWrappedBinary( wrapper, 12, ""LONGVARCHARFORBITDATACOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2169,"        vetWrappedInteger( wrapper, 13, ""NUMERICCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2170,"        vetWrappedFloatingPoint( wrapper, 14, ""REALCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2171,"        vetWrappedInteger( wrapper, 15, ""SMALLINTCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2172,        vetWrappedTime( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2173,        vetWrappedTimestamp( wrapper );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2174,"        vetWrappedString( wrapper, 18, ""VARCHARCOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2175,"        vetWrappedBinary( wrapper, 19, ""VARCHARFORBITDATACOL"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2176,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2177,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2178,    private void    vetWrappedNull( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2179,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2180,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2181,"                wrapper.getObject( 1, (Class) null );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2182,"                fail( ""Did not expect to get a result for a null class type."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2183,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2184,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2185,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2186,"                assertSQLState( ""Null type"", UNSUPPORTED_COERCION, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2187,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2188,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2189,"                wrapper.getObject( ""BIGINTCOL"", (Class) null );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2190,"                fail( ""Did not expect to get a result for a null class type."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2191,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2192,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2193,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2194,"                assertSQLState( ""Null type"", UNSUPPORTED_COERCION, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2195,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2196,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2197,"    private void    vetWrappedInteger( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2198,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2199,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2200,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2201,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2202,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2203,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2204,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2205,"             new Class[] { String.class, BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class, Number.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2206,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2207,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2208,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2209,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2210,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2211,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2212,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2213,"             new Class[] { Float.class, Double.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2214,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2215,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2216,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2217,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2218,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2219,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2220,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2221,             new Class[] { Boolean.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2222,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2223,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2224,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2225,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2226,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2227,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2228,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2229,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2230,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2231,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2232,    private void    vetWrappedBlob( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2233,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2234,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2235,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2236,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2237,"             2,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2238,"             ""BLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2239,"             ""abc"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2240,"             new Class[] { Blob.class, Object.class, byteArrayClass, String.class,  }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2241,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2242,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2243,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2244,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2245,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2246,"             2,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2247,"             ""BLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2248,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2249,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2250,"                 BigDecimal.class, Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2251,"                 Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2252,"                 Date.class, Time.class, Timestamp.class"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2253,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2254,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2255,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2256,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2257,        // We don't try to get a Clob value because we have already gotten a LOB value.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2258,        // Trying to open another LOB stream raises an error. Using a random class type
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2259,"        // also takes us down that code path, so we don't verify against getClass() either."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2260,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2261,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2262,    private void    vetWrappedBoolean( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2263,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2264,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2265,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2266,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2267,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2268,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2269,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2270,"             new Class[] { String.class, Boolean.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2271,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2272,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2273,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2274,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2275,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2276,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2277,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2278,"             new Class[] { BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2279,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2280,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2281,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2282,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2283,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2284,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2285,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2286,"             new Class[] { Float.class, Double.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2287,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2288,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2289,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2290,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2291,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2292,"             3,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2293,"             ""BOOLEANCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2294,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2295,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2296,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2297,"    private void    vetWrappedString( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2298,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2299,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2300,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2301,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2302,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2303,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2304,"             ""a"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2305,"             new Class[] { String.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2306,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2307,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2308,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2309,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2310,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2311,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2312,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2313,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2314,             new Class[] { Boolean.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2315,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2316,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2317,        vetCoercionError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2318,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2319,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2320,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2321,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2322,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2323,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2324,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2325,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2326,"             },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2327,             BAD_FORMAT
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2328,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2329,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2330,        vetCoercionError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2331,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2332,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2333,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2334,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2335,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2336,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2337,"                 Date.class, Time.class, Timestamp.class"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2338,"             },"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2339,             BAD_DATETIME
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2340,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2341,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2342,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2343,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2344,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2345,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2346,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2347,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2348,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2349,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2350,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2351,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2352,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2353,"    private void    vetWrappedBinary( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2354,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2355,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2356,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2357,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2358,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2359,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2360,"             ""de"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2361,             new Class[] { String.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2362,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2363,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2364,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2365,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2366,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2367,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2368,"             ""\ufffd"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2369,"             new Class[] { byteArrayClass, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2370,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2371,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2372,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2373,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2374,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2375,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2376,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2377,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2378,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2379,"                 Boolean.class, BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2380,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2381,"                 Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2382,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2383,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2384,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2385,    private void    vetWrappedClob( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2386,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2387,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2388,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2389,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2390,"             6,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2391,"             ""CLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2392,"             ""abc"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2393,"             new Class[] { String.class, Clob.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2394,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2395,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2396,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2397,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2398,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2399,"             6,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2400,"             ""CLOBCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2401,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2402,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2403,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2404,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2405,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2406,"                 Date.class, Time.class, Timestamp.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2407,                 byteArrayClass
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2408,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2409,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2410,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2411,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2412,        // We don't test getting a BLOB because we are only allowed one attempt
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2413,        // to get a LOB from the column. Using a random class type
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2414,"        // also takes us down that code path, so we don't verify against getClass() either."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2415,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2416,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2417,    private void    vetWrappedDate( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2418,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2419,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2420,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2421,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2422,"             7,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2423,"             ""DATECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2424,"             ""1994-02-23"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2425,"             new Class[] { String.class, Date.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2426,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2427,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2428,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2429,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2430,"             7,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2431,"             ""DATECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2432,"             ""1994-02-23 00:00:00.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2433,             new Class[] { Timestamp.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2434,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2435,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2436,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2437,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2438,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2439,"             7,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2440,"             ""DATECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2441,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2442,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2443,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2444,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2445,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2446,"                 Time.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2447,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2448,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2449,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2450,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2451,"    private void    vetWrappedFloatingPoint( Wrapper41 wrapper, int colID, String colName ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2452,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2453,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2454,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2455,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2456,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2457,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2458,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2459,"             new Class[] { String.class, Float.class, Double.class, BigDecimal.class, Number.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2460,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2461,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2462,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2463,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2464,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2465,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2466,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2467,"             new Class[] { Byte.class, Short.class, Integer.class, Long.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2468,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2469,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2470,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2471,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2472,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2473,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2474,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2475,             new Class[] { Boolean.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2476,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2477,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2478,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2479,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2480,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2481,"             colID,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2482,"             colName,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2483,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2484,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2485,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2486,    private void    vetWrappedTime( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2487,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2488,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2489,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2490,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2491,"             16,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2492,"             ""TIMECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2493,"             ""15:09:02"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2494,"             new Class[] { String.class, Time.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2495,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2496,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2497,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2498,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2499,"             16,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2500,"             ""TIMECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2501,"             VARIABLE_STRING,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2502,             new Class[] { Timestamp.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2503,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2504,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2505,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2506,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2507,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2508,"             16,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2509,"             ""TIMECOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2510,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2511,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2512,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2513,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2514,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2515,"                 Date.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2516,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2517,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2518,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2519,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2520,    private void    vetWrappedTimestamp( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2521,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2522,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2523,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2524,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2525,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2526,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2527,"             ""1962-09-23 03:23:34.234"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2528,"             new Class[] { String.class, Timestamp.class, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2529,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2530,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2531,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2532,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2533,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2534,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2535,"             ""03:23:34"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2536,             new Class[] { Time.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2537,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2538,        vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2539,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2540,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2541,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2542,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2543,"             ""1962-09-23"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2544,             new Class[] { Date.class }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2545,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2546,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2547,        vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2548,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2549,"             wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2550,"             17,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2551,"             ""TIMESTAMPCOL"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2552,             new Class[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2553,             {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2554,"                 Boolean.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2555,"                 BigDecimal.class, Byte.class, Short.class, Integer.class, Long.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2556,"                 Float.class, Double.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2557,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2558,             }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2559,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2560,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2561,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2562,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2563,    private void    vetWrapperOK
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2564,"        ( Wrapper41 wrapper, int colID, String colName, String expectedValue, Class[] supportedCoercions )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2565,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2566,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2567,        int coercionCount = supportedCoercions.length;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2568,        for ( int i = 0; i < coercionCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2569,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2570,            Class   candidate = supportedCoercions[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2571,"            vetCandidate( candidate, expectedValue, wrapper.getObject( colID, candidate ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2572,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2573,            // you can only retrieve a LOB once
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2574,            if ( (candidate == Blob.class) || (candidate == Clob.class) ) { return; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2575,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2576,"            vetCandidate( candidate, expectedValue, wrapper.getObject( colName, candidate ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2577,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2578,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2579,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2580,"    private void    vetCandidate( Class candidate, String expectedValue, Object actualValue )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2581,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2582,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2583,"        assertTrue( candidate.getName(), candidate.isAssignableFrom( actualValue.getClass( ) ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2584,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2585,        if ( VARIABLE_STRING.equals( expectedValue ) ) { return; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2586,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2587,        String  actualString;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2588,        if ( actualValue instanceof Blob )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2589,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2590,            Blob    blob = (Blob) actualValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2591,"            actualString = squeezeString( blob.getBytes( 1L, (int) blob.length() ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2592,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2593,        else if ( actualValue instanceof byte[] )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2594,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2595,            actualString = squeezeString( (byte[]) actualValue );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2596,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2597,        else if ( actualValue instanceof Clob )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2598,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2599,            Clob    clob = (Clob) actualValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2600,"            actualString = clob.getSubString( 1L, (int) clob.length() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2601,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2602,        else { actualString = actualValue.toString(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2603,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2604,"        assertEquals( candidate.getName(), expectedValue, actualString );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2605,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2606,    private String  squeezeString( byte[] bytes ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2607,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2608,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2609,"        String result = new String( bytes, ""UTF-8"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2610,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2611,        return result;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2612,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2613,    private void    vetNoWrapper
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2614,"        ( Wrapper41 wrapper, int colID, String colName, Class[] unsupportedCoercions )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2615,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2616,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2617,"        vetCoercionError( wrapper, colID, colName, unsupportedCoercions, UNSUPPORTED_COERCION );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2618,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2619,"    @SuppressWarnings(""unchecked"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2620,    private void    vetCoercionError
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2621,"        ( Wrapper41 wrapper, int colID, String colName, Class[] unsupportedCoercions, String expectedSQLState )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2622,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2623,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2624,        int coercionCount = unsupportedCoercions.length;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2625,        for ( int i = 0; i < coercionCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2626,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2627,            Class   candidate = unsupportedCoercions[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2628,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2629,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2630,"                wrapper.getObject( colID, candidate );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2631,"                fail( ""Did not expect to get a "" + candidate.getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2632,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2633,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2634,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2635,"                assertSQLState( candidate.getName(), expectedSQLState, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2636,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2637,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2638,            // you can only retrieve a LOB once
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2639,            if ( (candidate == Blob.class) || (candidate == Clob.class) ) { return; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2640,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2641,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2642,"                wrapper.getObject( colName, candidate );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2643,"                fail( ""Did not expect to get a "" + candidate.getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2644,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2645,            catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2646,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2647,"                assertSQLState( candidate.getName(), expectedSQLState, e );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2648,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2649,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2650,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2651,"    private PreparedStatement    prepareStatement( Connection conn, String text )"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2652,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2653,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2654,        println( text );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2655,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2656,        PreparedStatement   ps = conn.prepareStatement( text );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2657,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2658,        return ps;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2659,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,441,"             ""15:09:02"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,29,import org.apache.derbyTesting.junit.BaseJDBCTestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,32,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,37,import java.lang.reflect.Method;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,38,import java.util.Vector;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,725,        timearg[0] = new Time( 83342000L );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,726,        timestamparg[0] = new Timestamp( -229527385766L );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,24,import java.math.BigDecimal;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,33,import java.sql.Date;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,52,import junit.extensions.TestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,54,import org.apache.derbyTesting.junit.BaseJDBCTestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2065,"             ""    time('15:09:02'),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2066,"             ""    timestamp('1962-09-23 03:23:34.234'),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,26,import java.sql.DriverManager;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,29,import java.sql.ResultSet;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,30,import java.sql.Statement;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,34,import java.sql.NClob;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,35,import java.sql.SQLFeatureNotSupportedException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,39,import junit.framework.*;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,42,import org.apache.derbyTesting.junit.TestConfiguration;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,441,"             VARIABLE_STRING,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,449,"             VARIABLE_STRING,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,475,"             ""1962-09-23 03:23:34.234"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,483,"             ""03:23:34"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,491,"             ""1962-09-23"","
java/client/org/apache/derby/client/am/CallableStatement40.java,334,"    @SuppressWarnings(""unchecked"")"
java/client/org/apache/derby/client/am/CallableStatement40.java,347,            if ( String.class.equals( type ) ) { return (T) getString( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,348,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,349,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,350,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,351,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,352,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,353,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,354,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,355,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,356,            else if ( Date.class.equals( type ) ) { return (T) getDate( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,357,            else if ( Time.class.equals( type ) ) { return (T) getTime( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,358,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,359,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,360,            else if ( Clob.class.equals( type ) ) { return (T) getClob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,361,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,364,                return type.cast( getObject( parameterIndex ) );
java/client/org/apache/derby/client/net/NetResultSet40.java,265,"    @SuppressWarnings(""unchecked"")"
java/client/org/apache/derby/client/net/NetResultSet40.java,282,            if ( String.class.equals( type ) ) { return (T) getString( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,283,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,284,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,285,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,286,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,287,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,288,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,289,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,290,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,291,            else if ( Date.class.equals( type ) ) { return (T) getDate( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,292,            else if ( Time.class.equals( type ) ) { return (T) getTime( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,293,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,294,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,295,            else if ( Clob.class.equals( type ) ) { return (T) getClob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,296,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,299,                return type.cast( getObject( columnIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,337,"    @SuppressWarnings(""unchecked"")"
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,349,            if ( String.class.equals( type ) ) { return (T) getString( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,350,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,351,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,352,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,353,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,354,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,355,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,356,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,357,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,358,            else if ( Date.class.equals( type ) ) { return (T) getDate( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,359,            else if ( Time.class.equals( type ) ) { return (T) getTime( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,360,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,361,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,362,            else if ( Clob.class.equals( type ) ) { return (T) getClob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,363,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,366,                return type.cast( getObject( parameterIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,253,"    @SuppressWarnings(""unchecked"")"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,265,            if ( String.class.equals( type ) ) { return (T) getString( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,266,            else if ( BigDecimal.class.equals( type ) ) { return (T) getBigDecimal( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,267,            else if ( Boolean.class.equals( type ) ) { return (T) Boolean.valueOf( getBoolean(columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,268,            else if ( Byte.class.equals( type ) ) { return (T) Byte.valueOf( getByte( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,269,            else if ( Short.class.equals( type ) ) { return (T) Short.valueOf( getShort( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,270,            else if ( Integer.class.equals( type ) ) { return (T) Integer.valueOf( getInt( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,271,            else if ( Long.class.equals( type ) ) { return (T) Long.valueOf( getLong( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,272,            else if ( Float.class.equals( type ) ) { return (T) Float.valueOf( getFloat( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,273,            else if ( Double.class.equals( type ) ) { return (T) Double.valueOf( getDouble( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,274,            else if ( Date.class.equals( type ) ) { return (T) getDate( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,275,            else if ( Time.class.equals( type ) ) { return (T) getTime( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,276,            else if ( Timestamp.class.equals( type ) ) { return (T) getTimestamp( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,277,            else if ( Blob.class.equals( type ) ) { return (T) getBlob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,278,            else if ( Clob.class.equals( type ) ) { return (T) getClob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,279,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { return (T) getBytes( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,                return type.cast( getObject( columnIndex ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,650,        examineJDBC4_1extensions( new Wrapper41( cs ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,746,"         long[] bigintarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,748,"         boolean[] booleanarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,753,"         double[] doublearg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,754,"         double[] floatarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,755,"         int[] intarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,759,"         float[] realarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,760,"         short[] smallintarg,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,772,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,773,        bigintarg[0] = intValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,774,        blobarg[0] = new HarmonySerialBlob( BINARY_VALUE );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,775,        booleanarg[0] = true;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,776,        chararg[0] = stringValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,777,        charforbitdataarg[0] = BINARY_VALUE;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,778,        clobarg[0] = new HarmonySerialClob( lobValue );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,779,        datearg[0]= new Date( 761990400000L );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,780,        doublearg[0] = floatValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,781,        floatarg[0] = floatValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,782,        intarg[0] = intValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,783,        longvarchararg[0] = stringValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,784,        longvarcharforbitdataarg[0] =  BINARY_VALUE;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,785,"        numericarg[0] = new BigDecimal( ""1.0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,786,        realarg[0] = floatValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,787,        smallintarg[0] = intValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,788,        timearg[0] = new Time(TIME_VALUE);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,789,        timestamparg[0] = new Timestamp(TIMESTAMP_VALUE);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,790,        varchararg[0] = stringValue;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java,791,        varcharforbitdataarg[0] = BINARY_VALUE;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2072,"        ps = prepareStatement( conn, ""select * from allTypes"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java,2075,        examineJDBC4_1extensions( new Wrapper41( rs ) );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,69,    private Class   byteArrayClass;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,82,    public Wrapper41Test(String name) { super(name); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,90,    protected void examineJDBC4_1extensions( Wrapper41 wrapper ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,92,"        println( ""Vetting a "" + wrapper.getWrappedObject().getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,94,"        byteArrayClass = Class.forName( ""[B"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,148,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,156,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,164,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,173,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,183,"             BINARY_VALUE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,184,"             new Class[] { Blob.class, Object.class, byteArrayClass, String.class,  }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,213,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,221,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,229,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,238,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,248,"             ""a"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,257,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,293,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,304,"             ""de"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,312,"             BINARY_VALUE,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,313,"             new Class[] { byteArrayClass, Object.class }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,336,"             ""abc"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,351,                 byteArrayClass
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,368,"             ""1994-02-23"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,376,"             ""1994-02-23 00:00:00.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,391,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,402,"             ""1.0"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,410,"             ""1"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,418,"             ""true"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,427,"             new Class[] { Date.class, Time.class, Timestamp.class, Blob.class, Clob.class, byteArrayClass, getClass() }"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,439,"             expectedTime.toString(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,447,"             timeToTimestamp(expectedTime).toString(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,462,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,474,"             expectedTimestamp,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,484,"             expectedTime,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,494,"             expectedDate,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,508,"                 Blob.class, Clob.class, byteArrayClass, getClass()"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java,536,"        assertTrue( candidate.getName(), candidate.isAssignableFrom( actualValue.getClass( ) ) );"
java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java,57, public void setUp() throws Exception{
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,273,        Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,274,  try {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,275,"   s.execute(""drop table table1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,276,  } catch (SQLException sqle) {}
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,277,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,278,  try {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,279,"   s.execute(""drop table table2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,280,  } catch (SQLException sqle) {}
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,281,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,282,  try {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,283,"   s.execute(""drop table table3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,284,  } catch (SQLException sqle) {}
java/engine/org/apache/derby/iapi/util/InterruptDetectedException.java,38,"        super(""nospc.U"");"
java/engine/org/apache/derby/impl/services/locks/ActiveLock.java,122,    throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,599,                            // ending wait because of lock timeout.
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,601,                            if (deadlockTrace)
java/engine/org/apache/derby/impl/services/locks/LockSet.java,349,                        // If we were not woken by another then we have
java/engine/org/apache/derby/impl/services/locks/LockSet.java,350,                        // timed out. Either deadlock out or timeout
java/engine/org/apache/derby/impl/services/locks/LockSet.java,410,                            // ending wait because of lock timeout.
java/engine/org/apache/derby/impl/services/locks/LockSet.java,412,                            if (deadlockTrace)
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1007,        StatementContext localStatementContext = getLanguageConnectionContext().getStatementContext();
java/engine/org/apache/derby/iapi/reference/Property.java,77,
java/engine/org/apache/derby/iapi/reference/Property.java,78, /**
java/engine/org/apache/derby/iapi/reference/Property.java,79,  * derby.stream.error.logBootTrace
java/engine/org/apache/derby/iapi/reference/Property.java,80,  * <BR>
java/engine/org/apache/derby/iapi/reference/Property.java,81,  * defaults to false. If set to true logs a stack trace to
java/engine/org/apache/derby/iapi/reference/Property.java,82,  * the error stream on successful boot or shutdown.
java/engine/org/apache/derby/iapi/reference/Property.java,83,  * This can be useful when trying to debug dual boot
java/engine/org/apache/derby/iapi/reference/Property.java,84,  * scenarios especially with multiple class loaders.
java/engine/org/apache/derby/iapi/reference/Property.java,85,  *
java/engine/org/apache/derby/iapi/reference/Property.java,86,  */
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,239,
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,240,
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,241, /**
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,242,"  @return true if the context manager is shutdown, false otherwise."
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,243,  */
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,244, public boolean cleanupOnError(Throwable error)
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,334,                    if (reportError
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,335,                            && errorSeverity >= ExceptionSeverity.SESSION_SEVERITY) {
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,410,            if (threadDump != null)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,631,   tr.cleanupOnError(t);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1915,       tr.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1928,      tr.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,339,    boolean isShutdown = cleanupOnError(thrownException);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,352,   if (cm!=null) { // something to let us cleanup?
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,353,    cm.cleanupOnError(t);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,419, boolean cleanupOnError(Throwable e)
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,424,  return cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,359,   cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,402,  contextMgr.cleanupOnError(StandardException.normalClose());
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,761,            ctxMgr.cleanupOnError(se);
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,854,            cm.cleanupOnError(se);
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1825,            if (cm != previousCM)
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1826,                cm.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,1838,    cm.cleanupOnError(se);
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,214,            getLCC().getContextManager().cleanupOnError( se );
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,101," EmbedPooledConnection(ReferenceableDataSource ds, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,103,                // be used again.
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,104,                inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,110,                inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,407,                inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,413,                inDoubtCM.cleanupOnError(se);
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,457,                inDoubtCM.cleanupOnError(StandardException.closeException());
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,463,                inDoubtCM.cleanupOnError(se);
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,124,"                    //stmt.executeUpdate(""update t set i = 456 where i = 456"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,141,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,142, Test suite = TestConfiguration.embeddedSuite(Derby3980DeadlockTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/MaxLogNumberRecovery.java,87,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,626,
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,186,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_FileSystemData.java,212,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,261,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,5483,    cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7258,    cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7260,    cm2.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_RawStoreFactory.java,7262,   //   cpm.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,219,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_StreamFile.java,244,   cm1.cleanupOnError(se);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,211,            cm1.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,223,            cm1.cleanupOnError(t);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,864,                cm.cleanupOnError(e);
java/testing/org/apache/derbyTesting/unitTests/store/T_b2i.java,3270,                cm.cleanupOnError(e);
java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java,421,     * @param error the error we want to clean up
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,300,     * @retrun String[] The list indicates files with certain prefix.
java/client/org/apache/derby/client/am/CallableStatement40.java,345,        try {
java/client/org/apache/derby/client/am/CallableStatement40.java,346,            Object   retval;
java/client/org/apache/derby/client/am/CallableStatement40.java,348,            if ( String.class.equals( type ) ) { retval = getString( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,349,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,350,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,351,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,352,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,353,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,354,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,355,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,356,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( parameterIndex ) ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,357,            else if ( Date.class.equals( type ) ) { retval = getDate( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,358,            else if ( Time.class.equals( type ) ) { retval = getTime( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,359,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,360,            else if ( Blob.class.equals( type ) ) { retval = getBlob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,361,            else if ( Clob.class.equals( type ) ) { retval = getClob( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,362,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( parameterIndex ); }
java/client/org/apache/derby/client/am/CallableStatement40.java,363,            else
java/client/org/apache/derby/client/am/CallableStatement40.java,364,            {
java/client/org/apache/derby/client/am/CallableStatement40.java,365,                retval = type.cast( getObject( parameterIndex ) );
java/client/org/apache/derby/client/am/CallableStatement40.java,366,            }
java/client/org/apache/derby/client/am/CallableStatement40.java,367,
java/client/org/apache/derby/client/am/CallableStatement40.java,368,            if ( wasNull() ) { retval = null; }
java/client/org/apache/derby/client/am/CallableStatement40.java,369,
java/client/org/apache/derby/client/am/CallableStatement40.java,370,            return type.cast( retval );
java/client/org/apache/derby/client/am/CallableStatement40.java,371,        }
java/client/org/apache/derby/client/am/CallableStatement40.java,372,        catch (ClassCastException e) {}
java/client/org/apache/derby/client/am/CallableStatement40.java,373,
java/client/org/apache/derby/client/net/NetResultSet40.java,280,        try {
java/client/org/apache/derby/client/net/NetResultSet40.java,281,            Object   retval;
java/client/org/apache/derby/client/net/NetResultSet40.java,283,            if ( String.class.equals( type ) ) { retval = getString( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,284,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,285,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,286,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,287,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,288,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,289,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,290,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,291,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( columnIndex ) ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,292,            else if ( Date.class.equals( type ) ) { retval = getDate( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,293,            else if ( Time.class.equals( type ) ) { retval = getTime( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,294,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,295,            else if ( Blob.class.equals( type ) ) { retval = getBlob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,296,            else if ( Clob.class.equals( type ) ) { retval = getClob( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,297,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( columnIndex ); }
java/client/org/apache/derby/client/net/NetResultSet40.java,298,            else
java/client/org/apache/derby/client/net/NetResultSet40.java,299,            {
java/client/org/apache/derby/client/net/NetResultSet40.java,300,                retval = type.cast( getObject( columnIndex ) );
java/client/org/apache/derby/client/net/NetResultSet40.java,301,            }
java/client/org/apache/derby/client/net/NetResultSet40.java,303,            if ( wasNull() ) { retval = null; }
java/client/org/apache/derby/client/net/NetResultSet40.java,305,            return type.cast( retval );
java/client/org/apache/derby/client/net/NetResultSet40.java,306,        }
java/client/org/apache/derby/client/net/NetResultSet40.java,307,        catch (ClassCastException e) {}
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,347,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,348,            Object   retval;
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,350,            if ( String.class.equals( type ) ) { retval = getString( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,351,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,352,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,353,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,354,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,355,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,356,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,357,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,358,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( parameterIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,359,            else if ( Date.class.equals( type ) ) { retval = getDate( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,360,            else if ( Time.class.equals( type ) ) { retval = getTime( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,361,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,362,            else if ( Blob.class.equals( type ) ) { retval = getBlob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,363,            else if ( Clob.class.equals( type ) ) { retval = getClob( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,364,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( parameterIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,365,            else
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,366,            {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,367,                retval = type.cast( getObject( parameterIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,368,            }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,369,
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,370,            if ( wasNull() ) { retval = null; }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,371,
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,372,            return type.cast( retval );
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,373,        }
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,374,        catch (ClassCastException e) {}
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,263,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,264,            Object   retval;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,266,            if ( String.class.equals( type ) ) { retval = getString( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,267,            else if ( BigDecimal.class.equals( type ) ) { retval = getBigDecimal( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,268,            else if ( Boolean.class.equals( type ) ) { retval = Boolean.valueOf( getBoolean(columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,269,            else if ( Byte.class.equals( type ) ) { retval = Byte.valueOf( getByte( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,270,            else if ( Short.class.equals( type ) ) { retval = Short.valueOf( getShort( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,271,            else if ( Integer.class.equals( type ) ) { retval = Integer.valueOf( getInt( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,272,            else if ( Long.class.equals( type ) ) { retval = Long.valueOf( getLong( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,273,            else if ( Float.class.equals( type ) ) { retval = Float.valueOf( getFloat( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,274,            else if ( Double.class.equals( type ) ) { retval = Double.valueOf( getDouble( columnIndex ) ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,275,            else if ( Date.class.equals( type ) ) { retval = getDate( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,276,            else if ( Time.class.equals( type ) ) { retval = getTime( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,277,            else if ( Timestamp.class.equals( type ) ) { retval = getTimestamp( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,278,            else if ( Blob.class.equals( type ) ) { retval = getBlob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,279,            else if ( Clob.class.equals( type ) ) { retval = getClob( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,280,            else if ( type.isArray() && type.getComponentType().equals( byte.class ) ) { retval = getBytes( columnIndex ); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,281,            else
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,282,            {
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,283,                retval = type.cast( getObject( columnIndex ) );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,284,            }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,286,            if ( wasNull() ) { retval = null; }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,288,            return type.cast( retval );
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,289,        }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java,290,        catch (ClassCastException e) {}
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,92,"        setSystemProperty(""derby.stream.error.extendedDiagSeverityLevel"",""50000"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java,93,
java/client/org/apache/derby/client/am/Connection.java,32,"public abstract class Connection implements java.sql.Connection,"
java/client/org/apache/derby/client/am/Connection.java,33,        ConnectionCallbackInterface {
java/client/org/apache/derby/client/am/Connection.java,649,            checkForClosedConnection();
java/client/org/apache/derby/client/am/Connection.java,743,        if (!open_) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,345,    }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,118,public abstract class EmbedConnection implements EngineConnection
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1902,    if (active) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2250,"   SanityManager.ASSERT(!isClosed(), ""connection is closed"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2475,  checkIfClosed();
java/engine/org/apache/derby/impl/jdbc/Util.java,108, private static void logSQLException(SQLException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,64,public class ConnectionMethodsTest extends BaseJDBCTestCase {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,527, public final String getText()
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,547, public final void setText(String newText)
java/client/org/apache/derby/client/am/Connection.java,33,"    implements java.sql.Connection, ConnectionCallbackInterface, Runnable"
java/client/org/apache/derby/client/am/Connection.java,2474,    public  void    beginAborting()
java/client/org/apache/derby/client/am/Connection.java,2480, //////////////////////////////////////////////////////////
java/client/org/apache/derby/client/am/Connection.java,2481,    //
java/client/org/apache/derby/client/am/Connection.java,2482, // Runnable BEHAVIOR
java/client/org/apache/derby/client/am/Connection.java,2483,    //
java/client/org/apache/derby/client/am/Connection.java,2484,    // This class implements Runnable so that the JDBC 4.1 abort(Executor)
java/client/org/apache/derby/client/am/Connection.java,2485,    // method can run the closeX() logic in a separate thread if necessary.
java/client/org/apache/derby/client/am/Connection.java,2486,    //
java/client/org/apache/derby/client/am/Connection.java,2487, //////////////////////////////////////////////////////////
java/client/org/apache/derby/client/am/Connection.java,2488,
java/client/org/apache/derby/client/am/Connection.java,2489,    public  void    run()
java/client/org/apache/derby/client/am/Connection.java,2490,    {
java/client/org/apache/derby/client/am/Connection.java,2491,        try {
java/client/org/apache/derby/client/am/Connection.java,2492,            rollback();
java/client/org/apache/derby/client/am/Connection.java,2493,            close();
java/client/org/apache/derby/client/am/Connection.java,2494,        } catch (SQLException se)
java/client/org/apache/derby/client/am/Connection.java,2495,        {
java/client/org/apache/derby/client/am/Connection.java,2496,            se.printStackTrace( agent_.getLogWriter() );
java/client/org/apache/derby/client/am/Connection.java,2497,        }
java/client/org/apache/derby/client/am/Connection.java,2498,    }
java/client/org/apache/derby/client/am/Connection.java,2499,
java/client/org/apache/derby/client/net/NetConnection40.java,437,        // The run() method in Connection does the
java/client/org/apache/derby/client/net/NetConnection40.java,438,        // actual releasing of resources.
java/client/org/apache/derby/client/net/NetConnection40.java,440,        executor.execute( this );
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,118,"public abstract class EmbedConnection implements EngineConnection, Runnable"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,121, private static final StandardException exceptionClose = StandardException.closeException();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1894,    private void close(StandardException e) throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3333,    public  void    beginAborting()
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3338,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3339, //////////////////////////////////////////////////////////
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3340,    //
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3341, // Runnable BEHAVIOR
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3342,    //
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3343,    // This class implements Runnable so that the JDBC 4.1 abort(Executor)
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3344,    // method can run the close() logic in a separate thread if necessary.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3345,    //
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3346, //////////////////////////////////////////////////////////
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3347,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3348,    public  void    run()
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3349,    {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3350,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3351,            rollback();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3352,            close(exceptionClose);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3353,        } catch (SQLException se) { Util.logSQLException( se ); }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3354,    }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3355,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,304,        // The run() method in EmbedConnection does the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,305,        // actual releasing of resources.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,307,        executor.execute( this );
java/client/org/apache/derby/client/am/LogicalConnection40.java,322,        ((NetConnection40) physicalConnection_).abort( executor );
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,56, private boolean isClosed;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,357,        ((EmbedConnection40) getRealConnection()).abort( executor );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,389,     * Test the JDBC 4.1 Connection.abort(Executor) method.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,391,    public void testAbort() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,399,        // NOP if called on a closed connection
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,405,"        Connection conn1 = openUserConnection( ""user1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,462,"            assertSQLState( ""08003"", se );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,466,"        Connection conn2 = openUserConnection( ""user2"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1891,    final String getPassword(String user)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,148,        // NOP if called on a closed connection
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,154,"        Connection conn1 = openUserConnection( ""user1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,168,        else { noSecurityManager( wrapper1 ); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,205,    private void    noSecurityManager(  final Wrapper41Conn wrapper1  ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java,227,"        Connection conn2 = openUserConnection( ""user2"");"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,593,
java/engine/org/apache/derby/impl/sql/GenericStatement.java,199,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2353,      // make sure we are not stuck in frozen state if we
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2354,      // caught an interrupt exception and the calling
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2355,                        // thread may not have a chance to call unfreeze
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2356,      isFrozen = false;
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2357,      freezeSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2358,
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2359,      throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,2402,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1686,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,566,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,589,     inClean = false;
java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java,590,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,573,                                Thread.sleep(500); // 0.5s
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,317,                        InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,318,"                            ""interrupt while waiting to gain entry"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,319,"                            threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,320,                            hashCode());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,520,                        InterruptStatus.noteAndClearInterrupt(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,521,"                            ""interrupt while waiting to gain entry"","
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,522,"                            threadsInPageIO,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,523,                            hashCode());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,836,"                // again! No need, we have already taken note, pal!"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,34,import java.io.InterruptedIOException;
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,516,"      //do nothing, let the flush request to complete."
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,517,      //because it possible that other thread which is
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,518,"      //currently might have completed this request also ,"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,519,"      //if exited  on interrupt and throw exception, can not"
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,520,      //be sure whether this transaction is COMMITTED ot not.
java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java,679,                {   //does not matter weather I get interrupted or not
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,718,                        // do nothing
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1525, protected boolean checkpointWithTran(
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,1604,                                throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2026,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2988,                        // do nothing
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3949,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4011,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4213,                    //does not matter weather I get interrupted or not
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,4977,     throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1071,     * @exception StandardException if interrupted while waiting for a
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1072,     *           backup  to complete.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1075,        throws StandardException
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1087,                            throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1136,  * @exception StandardException if interrupted or a runtime exception occurs
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1139,  throws StandardException
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1154,       // make sure we are not stuck in the backup state
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1155,                            // if we caught an interrupt exception and the
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1156,                            // calling thread may not have a chance to clear
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1157,                            // the in backup state.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1158,
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1159,       inBackup = false;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1160,       backupSemaphore.notifyAll();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,1161,       throw StandardException.interrupt(ie);
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,224,                //Interrupt the log shipping thread.
java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java,225,                return;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,474,            try {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,475,                // Wait for the pong response message
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,476,                receivePongSemaphore.wait(DEFAULT_PING_TIMEOUT);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,477,            } catch (InterruptedException ex) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,503,                        sendPingSemaphore.wait();
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageReceive.java,512,            } catch (InterruptedException ie) {
java/client/org/apache/derby/client/am/Statement.java,1939,    final void markResultSetsClosed(boolean removeListener) {
java/client/org/apache/derby/client/am/Statement.java,1940,        if (resultSetList_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1941,            for (int i = 0; i < resultSetList_.length; i++) {
java/client/org/apache/derby/client/am/Statement.java,1942,                if (resultSetList_[i] != null) {
java/client/org/apache/derby/client/am/Statement.java,1943,                    resultSetList_[i].markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1945,                resultSetList_[i] = null;
java/client/org/apache/derby/client/am/Statement.java,1948,        if (generatedKeysResultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1949,            generatedKeysResultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1950,        }
java/client/org/apache/derby/client/am/Statement.java,1951,        if (resultSet_ != null) {
java/client/org/apache/derby/client/am/Statement.java,1952,            resultSet_.markClosed(removeListener);
java/client/org/apache/derby/client/am/Statement.java,1953,        }
java/client/org/apache/derby/client/am/Statement.java,1954,        resultSet_ = null;
java/client/org/apache/derby/client/am/Statement.java,1955,        resultSetList_ = null;
java/client/org/apache/derby/client/am/Statement.java,1956,        generatedKeysResultSet_ = null;
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,312,"    //first, clear the resutl set"
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1443, void clearResultSets() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,3, * Derby - Class StatementTest
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java,279,    private static class StatementExecutor
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,132,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,185,            if (lockFile.exists() && servicePropertiesFile.exists()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,186,"                // if the lock file is there and service.properties,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,187,"                // the database has booted, return. If we don't check for"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,188,"                // service.properties, we may get just an error that the"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,189,                // directory already exists. We'll give a few seconds too
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,190,                // for service.properties to finish writing.
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,191,                Thread.sleep(3000);
java/client/org/apache/derby/client/am/LogicalConnection40.java,322,        if ( physicalConnection_ != null )
java/client/org/apache/derby/client/am/LogicalConnection40.java,324,            ((NetConnection40) physicalConnection_).abort( executor );
java/client/org/apache/derby/client/am/LogicalConnection40.java,325,        }
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1674,    // just deadlock out if a transaction tries to double latch the
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1675,    // page while not in abort
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1676,
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1677,    if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1678,"     SanityManager.THROWASSERT(""Attempted to latch page twice"");"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1679,    }
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1680,
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1145,  // we expect to hang in getPage() so make sure we are interrupted
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1146,  final Thread me = Thread.currentThread();
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1147,  Runnable r = new Runnable() {
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1148,    public void run() {
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1149,     try {
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1150,      Thread.sleep(2000);
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1151,     } catch (InterruptedException e) { }
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1152,     me.interrupt();
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1153,    }
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1154,   };
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1155,  Thread interrupter = new Thread(r);
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1156,  if (!SanityManager.DEBUG) {
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1157,"   // don't run the interrupter thread in sane builds, since getPage()"
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1158,   // will throw an assert error instead of hanging (DERBY-2635)
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1159,   interrupter.start();
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1160,  }
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1166,   // expect thread interrupted exception in insane builds
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1167,"   if (SanityManager.DEBUG || !se.getMessageId().equals(""08000"")) {"
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1170,  } catch (RuntimeException e) {
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1171,"   // When running in sane mode, an AssertFailure will be thrown if we"
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1172,   // try to double latch a page. The AssertFailure class is not
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1173,"   // available in insane jars, so we cannot reference the class"
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1174,   // directly.
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1175,   if (!(SanityManager.DEBUG &&
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1176,"      e.getClass().getName().endsWith("".sanity.AssertFailure"") &&"
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1177,"      e.getMessage().endsWith(""Attempted to latch page twice""))) {"
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1178,    throw e;
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1179,   }
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1181,
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1182,  try {
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1183,   if (interrupter.isAlive()) {
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1184,    interrupter.join();
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1185,   }
java/testing/org/apache/derbyTesting/unitTests/store/T_Util.java,1186,  } catch (InterruptedException ie) { }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,269,"        // Interrupt recovery: If this thread holds a monitor on ""this"" (when"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,270,        // RAFContainer#clean calls getEmbryonicPage via writeRAFHEader) or
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,271,"        // ""allocCache"" (e.g. FileContainer#newPage, #pageValid) we cannot grab"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,272,"        // channelCleanupMonitor lest another thread is one doing recovery,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,273,        // since the recovery thread will try to grab both those monitors
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,274,"        // during container resurrection.  So, just forge ahead in stealth mode"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,275,        // (i.e. the recovery thread doesn't see us). If we see
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,277,"        // retry from RAFContainer (""this"") or FileContainer (""allocCache"")"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,278,        // after having released the relevant monitor.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,489,"        // Interrupt recovery: If this thread holds a monitor ""allocCache"""
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,490,"        // (e.g. FileContainer#newPage, #pageValid) we cannot grab"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,491,"        // channelCleanupMonitor lest another thread is one doing recovery,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,492,        // since the recovery thread will try to grab both those monitors
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,493,"        // during container resurrection.  So, just forge ahead in stealth mode"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,494,        // (i.e. the recovery thread doesn't see us). If we see
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,496,"        // retry from FileContainer (""allocCache"") after having released the"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java,497,        // relevant monitor.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,38, *   Test to reproduce and verify fix for DERBY-151.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,50,    protected static Test baseSuite(String name)
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,54,        if (JDBC.vmSupportsJDBC3()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,55,            // We need a JDBC level that supports DriverManager in order
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,56,            // to run tests that access the database from a stored procedure
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,57,            // using DriverManager and jdbc:default:connection.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,58,            // DriverManager is not supported with JSR169.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,60,            suite.addTestSuite(InterruptResilienceTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,61,            return new CleanDatabaseTestSetup(suite);
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,62,        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,63,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,64,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,69,"        TestSuite suite = new TestSuite(""InterruptResilienceTest"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,74,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,81,            return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,84,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,85,"            baseSuite(""InterruptResilienceTest:embedded""));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,86,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,87,        suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,88,            TestConfiguration.clientServerDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,89,"                baseSuite(""InterruptResilienceTest:c/s"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,91,        return suite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,97,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,99,"        stmt.executeUpdate(""CREATE TABLE irt(x int primary key)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,110,"        stmt.executeUpdate(""DROP TABLE irt"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,118,    // thread.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,119,    public static void irt() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,126,"            insert = c.prepareStatement(""insert into irt values (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,130,"            // running with debug flag ""RAF4Recovery""."
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,140,"                insert.setInt(1, i);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,143,                if (Thread.interrupted()) { // test and reset
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,144,                    seen++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,145,"                    // println(ff() + ""interrupt seen"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,146,                } else {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,147,"                    // println(ff() + ""interrupt lost"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,148,                    lost++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,149,                }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,150,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,164,"            println(""interrupts recovered: "" + seen);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,165,"            println(""interrupts lost: "" + lost + "" ("" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,166,"                    (lost * 100.0/(seen + lost)) + ""%)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,170,    public void testIRT () throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,173,"            ""create procedure IRT () MODIFIES SQL DATA "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,175,"            "".tests.store.InterruptResilienceTest.irt' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,179,"        s.executeUpdate(""call IRT()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,184,    // private static String ff() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,185,    //     return Thread.currentThread().getName();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,186,    // }
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,432,
java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java,136,
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1536,    Connection openDefaultConnection()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,274,        PreparedStatement ps = prepareStatement
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,275,            (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,276,"             ""select columnnumber from sys.syscolumns c, sys.systables t\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,277,"             ""where t.tablename = 'SYSTABLES'\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,278,"             ""and t.tableid = c.referenceid\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,279,"             ""and c.columnnumber = delay_st( 5, 1 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,280,             );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,281,"        println( ""Testing timeout exception for a "" + ps.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,283,        SetQueryTimeoutTest.StatementExecutor   executor =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,284,"            new SetQueryTimeoutTest.StatementExecutor( ps, true, 1 );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,286,        executor.start();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,287,        executor.join();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,289,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,291,        SQLException    se = executor.getSQLException();
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,443,     * @param tc
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,896,"                null, null, ""NO"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2490,"                Types.VARCHAR, Types.SMALLINT, Types.VARCHAR"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2501,"        assertMetaDataResultSet(rs,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2502,                new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2503,"                ""TABLE_CAT"", ""TABLE_SCHEM"", ""TABLE_NAME"", ""COLUMN_NAME"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2504,"                ""DATA_TYPE"", ""TYPE_NAME"", ""COLUMN_SIZE"", ""BUFFER_LENGTH"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2505,"                ""DECIMAL_DIGITS"", ""NUM_PREC_RADIX"", ""NULLABLE"", ""REMARKS"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2506,"                ""COLUMN_DEF"", ""SQL_DATA_TYPE"", ""SQL_DATETIME_SUB"", ""CHAR_OCTET_LENGTH"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2507,"                ""ORDINAL_POSITION"", ""IS_NULLABLE"", ""SCOPE_CATLOG"", ""SCOPE_SCHEMA"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2508,"                ""SCOPE_TABLE"", ""SOURCE_DATA_TYPE"", ""IS_AUTOINCREMENT"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2509,"               }, columnTypes"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2510,"        , null"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java,2511,              );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,831,"            ,""40"",""1"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,832,"            {"""",""APP"",""V"",""NUM"",""4"",""INTEGER"",""10"",null,""0"",""10"",""1"","""",null,null,null,null,""2"",""YES"",null,null,null,null,""NO""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,877,"              null,null,null,null,""1"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,879,"              null,null,null,null,""2"",""YES"",null,null,null,null,""NO""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,885,"              null,null,null,null,""1"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,887,"              null,null,null,null,""2"",""YES"",null,null,null,null,""NO""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java,889,"              null,null,null,null,""3"",""YES"",null,null,null,null,""NO""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,63,            for(;;)
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java,65,                Thread.sleep(30000);
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,133,"        waitForMinionBoot(p,60000);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,205,"                ""Minion did not start or boot db in 60 seconds.\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,206,"                ""----Minion's stderr:\n"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,207,        do {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,208,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,209,                minionErrLine = minionSysErr.readLine();
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,210,            } catch (Exception ioe) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,211,"                // may not always work, so just bail out."
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,212,"                failmsg.append(""could not read minion's stderr"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,213,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,214,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,215,            if (minionErrLine != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,216,                failmsg.append(minionErrLine);
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,217,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,218,        } while (minionErrLine != null);
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,219,
java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java,220,"        failmsg.append(""\n----Minion's stderr ended"");"
java/client/org/apache/derby/client/am/ResultSet.java,467,
java/client/org/apache/derby/client/am/ResultSet.java,468,        nullDataForGC();
java/client/org/apache/derby/client/am/Statement.java,3100,                close();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,618,    isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,625,"            // to prevent infinite looping, tell our parent Statement"
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,626,            // that we have closed AFTER
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,627,            // we have marked ourself as closed
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,628,            if ( stmt != null) { stmt.closeMeOnCompletion(); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,629,            if ( (owningStmt != null) && (owningStmt != stmt) ) { owningStmt.closeMeOnCompletion(); }
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,630,
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4328,    isClosed = true;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4353,            isClosed = true;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1332,  // need to deal with triggers if has referencedColumns
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1339,   if (referencedCols == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1341,"   int refColLen = referencedCols.length, j;"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1342,   boolean changed = false;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1343,   for (j = 0; j < refColLen; j++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1345,    if (referencedCols[j] > droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1346,                {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1347,     changed = true;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1348,                }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1349,    else if (referencedCols[j] == droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1361,      // otherwsie there would be unexpected behaviors
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1371,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1372,   // change triggers to refer to columns in new positions
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1373,   if (j == refColLen && changed)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1374,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1375,"    dd.dropTriggerDescriptor(trd, tc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1376,    for (j = 0; j < refColLen; j++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1377,    {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1378,     if (referencedCols[j] > droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1379,      referencedCols[j]--;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1380,    }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1381,"    dd.addDescriptor(trd, sd,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1382,"         DataDictionary.SYSTRIGGERS_CATALOG_NUM,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1383,"         false, tc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1384,   }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2209,        // drop column restrict should fail because column is used
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2210,        // in a trigger:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2211,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2213,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2220,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2229,
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,241,     * flag to allow safe operation during execution.  Called when operations
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,242,     * will be be prematurely terminated due to the interrupt.
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,244,"     * If an interrupt status flag was seen, we set it back ON here and throw"
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,245,     * session level SQLState.CONN_INTERRUPT.
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,248,     * @throws StandardException (SQLState.CONN_INTERRUPT)
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,76,            // new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,77,            // TestConfiguration.singleUseDatabaseDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,81,            // new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,82,            // TestConfiguration.singleUseDatabaseDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,354,        public SQLException e; // if any seen
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,374,                PreparedStatement s = c.prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,377,"                    ""insert into mtTab values (?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,388,                        ResultSet rs = s.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,389,                        rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,390,                        if (interrupted()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,391,                            interruptsSeen++;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,392,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,393,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,394,"                        assertEquals(""wrong row content"","
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,395,"                                     candidate, rs.getLong(1));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,397,                        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,404,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,405,                        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,423,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,466,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,467,"                Class.forName(""org.apache.derby.jdbc.EmbeddedDriver"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,468,            } catch (ClassNotFoundException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,469,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,510,
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2187,        String workingDirName = masterDatabasePath +FS+ masterDbSubPath;
java/client/org/apache/derby/jdbc/ClientDriver.java,50,    static {
java/client/org/apache/derby/jdbc/ClientDriver.java,60,            registeredDriver__ = new ClientDriver();
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,78,            _autoloadedDriver = new AutoloadedDriver();
java/client/org/apache/derby/client/net/NetConnection40.java,456,        try
java/client/org/apache/derby/client/net/NetConnection40.java,457,        {
java/client/org/apache/derby/client/net/NetConnection40.java,458,            if (agent_.loggingEnabled()) {
java/client/org/apache/derby/client/net/NetConnection40.java,459,"                agent_.logWriter_.traceEntry(this, ""getNetworkTimeout"");"
java/client/org/apache/derby/client/net/NetConnection40.java,460,            }
java/client/org/apache/derby/client/net/NetConnection40.java,461,            checkForClosedConnection();
java/client/org/apache/derby/client/net/NetConnection40.java,462,        }
java/client/org/apache/derby/client/net/NetConnection40.java,463,        catch ( SqlException se )
java/client/org/apache/derby/client/net/NetConnection40.java,464,        {
java/client/org/apache/derby/client/net/NetConnection40.java,465,            throw se.getSQLException();
java/client/org/apache/derby/client/net/NetConnection40.java,466,        }
java/client/org/apache/derby/client/net/NetConnection40.java,472,        try
java/client/org/apache/derby/client/net/NetConnection40.java,473,        {
java/client/org/apache/derby/client/net/NetConnection40.java,474,            if (agent_.loggingEnabled()) {
java/client/org/apache/derby/client/net/NetConnection40.java,475,"                agent_.logWriter_.traceEntry(this, ""setNetworkTimeout"");"
java/client/org/apache/derby/client/net/NetConnection40.java,476,            }
java/client/org/apache/derby/client/net/NetConnection40.java,477,            checkForClosedConnection();
java/client/org/apache/derby/client/net/NetConnection40.java,478,        }
java/client/org/apache/derby/client/net/NetConnection40.java,479,        catch ( SqlException se )
java/client/org/apache/derby/client/net/NetConnection40.java,480,        {
java/client/org/apache/derby/client/net/NetConnection40.java,481,            throw se.getSQLException();
java/client/org/apache/derby/client/net/NetConnection40.java,482,        }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,323,        checkIfClosed();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,329,        checkIfClosed();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,650,"            fail( ""Should object that the connection is closed."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,654,"            assertSQLState( CLOSED_CONNECTION, se );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,659,"            fail( ""Should object that the connection is closed."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java,663,"            assertSQLState( CLOSED_CONNECTION, se );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,57,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,70,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,83,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java,92,"    private SQLException nothingWrapped() { return new SQLException( ""Nothing wrapped!"" ); }"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2160,     newLogFile = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,348,  int  actualErrorCount =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,349,   vanishedMethodList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,350,   unsupportedList.size() +
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,351,   notUnderstoodList.size();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,352,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,353,  assertEquals
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,354,"   ( ""Unexpected discrepancies."","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,355,"     0, actualErrorCount );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1051,        if (JDBC.vmSupportsJDBC41()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1052,"            // DERBY-4869: The runtime environment supports JDBC 4.1, but"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1053,            // our database drivers don't yet. Disable this test until the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1054,            // drivers have been updated.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1055,"            return new TestSuite(""UnsupportedVetter - Disabled"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java,1056,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,106,        if (JDBC.vmSupportsJDBC41()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,107,"            // DERBY-4869: The runtime environment supports JDBC 4.1, but"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,108,            // our database drivers don't yet. Disable this test until the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,109,            // drivers have been updated.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,110,"            return new TestSuite(""VerifySignatures - Disabled"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java,111,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,99,"            assertFalse(""No exception was thrown"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,100,                        decorator_.expectsException(method_));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,112,        if (JDBC.vmSupportsJDBC41()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,113,"            // DERBY-4869: The runtime environment supports JDBC 4.1, but"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,114,            // our database drivers don't yet. Disable this test until the
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,115,            // drivers have been updated.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,116,"            return new TestSuite(""ClosedObjectTest - Disabled"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,117,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java,472,"                assertTrue(""method: "" + methodString + "", but message: "" + sqle.getMessage(), sqle.getMessage().indexOf(methodString) > 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,192,"            String AutoloadedDriver = ""org.apache.derby.jdbc.AutoloadedDriver"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java,273,"            if (driverClass.equals(""org.apache.derby.jdbc.ClientDriver""))"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,279,        for ( int i = 0; i < 10; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,303,        assertNotNull( se );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,304,"        assertEquals( SQLTimeoutException.class.getName(), se.getClass().getName() );"
java/engine/org/apache/derby/catalog/types/StatisticsImpl.java,28,import org.apache.derby.iapi.services.io.FormatableLongHolder;
java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java,27,import java.util.Map;
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,27,
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,28,RowCountable provides the interfaces to read and write row counts in
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,29,tables.
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,30,<p>
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,31,@see ScanController
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,32,@see StoreCostController
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,33,
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,34,**/
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,35,
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,55,  * @return The total estimated number of rows in the conglomerate.
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,57,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,58,     **/
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,60,  throws StandardException;
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,66,     * of the number of rows in the container than what store has.  For
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,67,"     * instance if we implement some sort of update statistics command, or"
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,68,     * just after a create index a complete scan will have been done of the
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,69,     * table.  In this case this interface allows the client to set the
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,70,"     * estimated row count for the container, and store will use that number"
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,71,     * for all future references.
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,79,  * @exception  StandardException  Standard exception policy.
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,80,     **/
java/engine/org/apache/derby/iapi/store/access/RowCountable.java,82,  throws StandardException;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,511,    }
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,26,import java.sql.Types;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,39,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,40,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,41,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,277,    FromTable fromTable = (FromTable) resultSetFromList.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,278,    if (fromTable.isPrivilegeCollectionRequired() && fromTable instanceof FromBaseTable)
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,279,     //We ask for MIN_SELECT_PRIV requirement of the first
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,280,     //column in the table. The first column is just a
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,281,     //place holder. What we really do at execution time when
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,282,     //we see we are looking for MIN_SELECT_PRIV privilege is
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,283,     //as follows
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,284,     //1)we will look for SELECT privilege at table level
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,285,"     //2)If not found, we will look for SELECT privilege on"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,286,"     //ANY column, not necessarily the first column. But since"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,287,     //the constructor for column privilege requires us to pass
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,288,"     //a column descriptor, we just choose the first column for"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,289,     //MIN_SELECT_PRIV requirement.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,290,     getCompilerContext().addRequiredColumnPriv(fromTable.getTableDescriptor().getColumnDescriptor(1));
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,291,   }
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,54,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,923,
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,924,  }
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,29,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,30,import org.apache.derby.iapi.sql.compile.Parser;
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,31,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,218,                /* Will be fixed by DERBY-4936.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,225,                */
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,239,        // TODO: Will be fixed in DERBY-4936.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,240,        String schedulingReason = null; // td.getIndexStatsUpdateReason();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,647,"                // TODO: Disabled by default for now, fix in DERBY-4939."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,648,                //       Note that the daemon does nothing automatically
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,649,                //       without DERBY-4938.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,650,"                Property.STORAGE_AUTO_INDEX_STATS, false);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,651,"                //Property.STORAGE_AUTO_INDEX_STATS, true);"
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,151,"  return super.getFromTableByName(name, schemaName, exactMatch);"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,117,  * cursor specification. This variant is used by InsertNode.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,190,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,191,     * TODO: Make sure this test is also run with automatic index statistics
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,192,"     * generation enabled, as it revealed a bug in the data dictionary access"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UpdateStatisticsTest.java,193,     * pattern (dd was left in write mode when it shouldn't have been).
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,277,        // try to force a timeout. try a couple times to reduce the risk
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,278,        // of instability in this test.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,279,        for ( int i = 0; i < 20; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,280,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,281,            PreparedStatement ps = prepareStatement
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,282,                (
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,283,"                 ""select columnnumber from sys.syscolumns c, sys.systables t\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,284,"                 ""where t.tablename = 'SYSTABLES'\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,285,"                 ""and t.tableid = c.referenceid\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,286,"                 ""and c.columnnumber = delay_st( 5, 1 )"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,287,                 );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,288,"            println( ""Testing timeout exception for a "" + ps.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,289,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,290,            SetQueryTimeoutTest.StatementExecutor   executor =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,291,"                new SetQueryTimeoutTest.StatementExecutor( ps, true, 1 );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,292,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,293,            executor.start();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,294,            executor.join();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,295,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,296,            ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,297,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,298,            se = executor.getSQLException();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,299,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,300,            if ( se != null ) { break; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,301,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,303,        if ( se == null )
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,304,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,305,"            println( ""Dang! Still can't force a timeout on this platform!"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,306,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,307,        else
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,308,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,309,"            assertEquals( SQLTimeoutException.class.getName(), se.getClass().getName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,310,        }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4917,   if (referencedCols != null){
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1387,    // change triggers to refer to columns in new positions
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1402,   //If the trigger under consideration already got dropped through
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1403,"   //the referencedCols loop above, then move to next trigger"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1406,   //None of the triggers use column being dropped as a trigger
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1407,   //column. Check if the column being dropped is getting used
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1408,   //inside the trigger action through REFERENCING clause.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1410,   if (referencedColsInTriggerAction == null)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1411,    continue;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1412,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1413,"   int refColInTriggerActionLen = referencedColsInTriggerAction.length, j;"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1414,   boolean changedColPositionInTriggerAction = false;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1415,   for (j = 0; j < refColInTriggerActionLen; j++)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1416,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1417,    if (referencedColsInTriggerAction[j] > droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1419,     changedColPositionInTriggerAction = true;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1421,    else if (referencedColsInTriggerAction[j] == droppedColumnPosition)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1423,     if (cascade)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1425,                        trd.drop(lcc);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1426,      activation.addWarning(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1427,       StandardException.newWarning(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1428,"                                SQLState.LANG_TRIGGER_DROPPED,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1429,"                                trd.getName(), td.getName()));"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1430,     }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1431,     else
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1432,"     { // we'd better give an error if don't drop it,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1433,      // otherwise there would be unexpected behaviors
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1434,      throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1435,"                            SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1436,"                            dm.getActionString(DependencyManager.DROP_COLUMN),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1437,"                            columnName, ""TRIGGER"","
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1438,                            trd.getName() );
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1440,     break;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1580,"  dd.dropColumnDescriptor(td.getUUID(), columnName, tc);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2259,"        // inside the trigger action. DERBY-4887. Currently, Derby does not"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2260,        // look at the columns being used inside the trigger action unless
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2261,        // they are being used through the REFERENCING clause and hence does
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2262,        // not catch the trigger dependencies
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2264,        //Following is not going to be caught by the information available
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2265,        //in systriggers even in 10.7 and higher. We only keep the information
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2266,        //about the columns used through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2270,        //Following will be caught because of the information available in
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2271,        //systriggers in 10.7 and higher because we keep the information
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2272,        //about the columns used through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2279,        // We got an error because Derby detected the dependency on
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2280,        // atdc_12_trigger_2
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2295,        // the 2 triggers should have been dropped as a result of cascade but
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2296,        // only one gets dropped. Derby does not recognize the dependency of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2297,        // trigger action column where the column is not getting referenced
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2298,        // through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2299,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2300,            st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2301,"                    "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2302,"                    ""triggername = 'ATDC_12_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2303,"            JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_12_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2308,"        // action. Currently, Derby does not look at the columns being used"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2309,        // inside the trigger action and hence does not catch the trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2310,        // dependency unless they are being referenced through REFERENCING
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2311,"        // clause. Similarly, drop column cascade should drop this table"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2312,        // level trigger because it is using the colunm in it's trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2313,        // action but Derby does not catch that. DERBY-4887.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2351,        // following is not the right behavior. Derby should have dropped
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2352,        // all the 6 triggers but it drops only 3. Other 3 didn't get
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2353,        // dropped because Derby does not recognize the dependency of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2354,        // trigger action column where the column is not getting referenced
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2355,        // through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2358,        // the triggers should have been dropped as a result of cascade but
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2359,        // Derby does not recognize the dependency of trigger action column
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2361,            st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2362,"            "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2363,"            ""triggername in ('ATDC_13_TRIGGER_1', ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2364,"            ""'ATDC_13_TRIGGER_2', 'ATDC_13_TRIGGER_3')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2365,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_13_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2366,"             {""ATDC_13_TRIGGER_2""}, {""ATDC_13_TRIGGER_3""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2368,        // Another test
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2407,        // following is not the right behavior. we should have gotten an error
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2408,        // because column being dropped is getting used in a trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,157,     * Make sure that DERBY-4998 changes do not break backward compatibility.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,159,     * It creates triggers in old release with trigger action columns getting
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,160,     * used through the REFERENCING clause. Those triggers in soft upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,161,"     * mode, post soft upgrade mode and hard upgrade mode do not get detected"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,162,"     * by ALTER TABLE DROP COLUMN because prior to 10.7, we did not keep"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,163,     * information about trigger action columns getting used through the
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,164,     * REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,176,         //Create 2 tables for each of the upgrade phases which are
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,177,         //a)soft upgrade b)post soft upgrade and c)hard upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,178,"         //For each of the upgrade phase, one table will be used for"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,182,         //Following 2 tables and triggers are for soft upgrade mode check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,183,"         s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,184,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,185,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,186,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,187,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,188,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,189,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,190,"              ""ON DERBY4998_SOFT_UPGRADE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,191,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,192,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,193,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,194,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,195,"            s.execute(""CREATE TABLE DERBY4998_soft_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,196,"            s.execute(""INSERT INTO DERBY4998_soft_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,197,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,198,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,199,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,200,"            s.execute(""CREATE TRIGGER DERBY4998_soft_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,201,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,202,"              ""ON DERBY4998_soft_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,203,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,204,"                    ""SELECT oldt.c11 from DERBY4998_soft_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,205,"            s.executeUpdate(""UPDATE DERBY4998_soft_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,206,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,207,         //Following 2 tables and triggers are for post-soft upgrade mode
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,208,            //check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,209,"            s.execute(""CREATE TABLE DERBY4998_postsoft_upgrade_restrict(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,210,"            s.execute(""INSERT INTO DERBY4998_postsoft_upgrade_restrict VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,211,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,212,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,213,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,214,"            s.execute(""CREATE TRIGGER DERBY4998_postsoft_upgrade_restrict_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,215,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,216,"              ""ON DERBY4998_postsoft_upgrade_restrict REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,217,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,218,"                    ""SELECT oldt.c11 from DERBY4998_postsoft_upgrade_restrict"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,219,"            s.executeUpdate(""UPDATE DERBY4998_postsoft_upgrade_restrict SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,220,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,221,"            s.execute(""CREATE TABLE DERBY4998_postsoft_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,222,"            s.execute(""INSERT INTO DERBY4998_postsoft_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,223,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,224,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,225,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,226,"            s.execute(""CREATE TRIGGER DERBY4998_postsoft_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,227,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,228,"              ""ON DERBY4998_postsoft_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,229,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,230,"                    ""SELECT oldt.c11 from DERBY4998_postsoft_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,231,"            s.executeUpdate(""UPDATE DERBY4998_postsoft_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,232,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,233,         //Following 2 tables and triggers are for hard upgrade mode check
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,234,"            s.execute(""CREATE TABLE DERBY4998_hard_upgrade_restrict(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,235,"            s.execute(""INSERT INTO DERBY4998_hard_upgrade_restrict VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,236,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,237,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,238,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,239,"            s.execute(""CREATE TRIGGER DERBY4998_hard_upgrade_restrict_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,240,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,241,"              ""ON DERBY4998_hard_upgrade_restrict REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,242,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,243,"                    ""SELECT oldt.c11 from DERBY4998_hard_upgrade_restrict"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,244,"            s.executeUpdate(""UPDATE DERBY4998_hard_upgrade_restrict SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,245,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,246,"            s.execute(""CREATE TABLE DERBY4998_hard_upgrade_cascade(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,247,"            s.execute(""INSERT INTO DERBY4998_hard_upgrade_cascade VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,248,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,249,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,250,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,251,"            s.execute(""CREATE TRIGGER DERBY4998_hard_upgrade_cascade_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,252,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,253,"              ""ON DERBY4998_hard_upgrade_cascade REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,254,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,255,"                    ""SELECT oldt.c11 from DERBY4998_hard_upgrade_cascade"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,256,"            s.executeUpdate(""UPDATE DERBY4998_hard_upgrade_cascade SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,260,         //The tables created with 10.6 and prior versions will exhibit
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,261,         //incorrect behavoir
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,262,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,263,"           ""DERBY4998_SOFT_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,264,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,265,"           ""DERBY4998_SOFT_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,266,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,267,"         //Even though we are in soft upgrade mode using Derby 10.7 release,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,268,         //newly created triggers will still not keep track of trigger
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,269,         //action columns referenced through REFERENCING clause because
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,270,         //that will break the backward compatibility when this db gets
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,271,         //used with earlier Derby version again after soft upgrade.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,272,         //Show this with an example
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,273,"            s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,274,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,275,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,276,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,277,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,278,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,279,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,280,"              ""ON DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,281,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,282,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,283,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,284,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,285,"           ""DERBY4998_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,286,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,287,"            s.execute(""CREATE TABLE DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,288,"            s.execute(""INSERT INTO DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,289,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,290,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,291,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,292,"            s.execute(""CREATE TRIGGER DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,293,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,294,"              ""ON DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,295,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,296,"                    ""SELECT oldt.c11 from DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,297,"            s.executeUpdate(""UPDATE DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,298,"         incorrectBehaviorForDropColumn(""DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,299,"           ""DERBY4998_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,305,         //The tables created with 10.6 and prior versions will continue to
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,306,         //exhibit incorrect behavoir
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,307,"         incorrectBehaviorForDropColumn(""DERBY4998_POSTSOFT_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,308,"           ""DERBY4998_POSTSOFT_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,309,"         incorrectBehaviorForDropColumn(""DERBY4998_POSTSOFT_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,310,"           ""DERBY4998_POSTSOFT_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,311,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,316,"            s.execute(""CREATE TABLE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,317,"            s.execute(""INSERT INTO DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,318,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,319,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,320,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,321,"            s.execute(""CREATE TRIGGER DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,322,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,323,"              ""ON DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,324,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,325,"                    ""SELECT oldt.c11 from DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,326,"            s.executeUpdate(""UPDATE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,327,"         incorrectBehaviorForDropColumn(""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,328,"           ""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,330,"            s.execute(""CREATE TABLE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,331,"            s.execute(""INSERT INTO DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,332,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,333,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,334,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,335,"            s.execute(""CREATE TRIGGER DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,336,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,337,"              ""ON DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,338,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,339,"                    ""SELECT oldt.c11 from DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,340,"            s.executeUpdate(""UPDATE DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,341,"         incorrectBehaviorForDropColumn(""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,342,"           ""DERBY4998_POST_SOFT_UPGRADE_NEW_TABLE_CASCADE_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,343,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,346,         //The tables created with 10.6 and prior versions will exhibit
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,347,"         //incorrect behavior. Even though the database is at 10.7 level,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,348,         //the triggers created with prior Derby releases did not keep
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,349,         //track of trigger action columns referenced through REFERENCING
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,350,         //clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,351,"         incorrectBehaviorForDropColumn(""DERBY4998_HARD_UPGRADE_RESTRICT"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,352,"           ""DERBY4998_HARD_UPGRADE_RESTRICT_TR1"", ""RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,353,"         incorrectBehaviorForDropColumn(""DERBY4998_HARD_UPGRADE_CASCADE"","
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,354,"           ""DERBY4998_HARD_UPGRADE_CASCADE_TR1"", ""CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,356,         //Create 2 new tables now that the database has been upgraded to
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,357,         //10.7 Notice that newly created tables will be able to detect
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,359,"         //This is because starting 10.7, for new triggers, we have"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,360,         //started keeping track of trigger action columns referenced
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,361,         //through REFERENCING clause.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,362,"            s.execute(""CREATE TABLE DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,363,"            s.execute(""INSERT INTO DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,364,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,365,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,366,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,367,"            s.execute(""CREATE TRIGGER DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_tr1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,368,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,369,"              ""ON DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,370,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,371,"                    ""SELECT oldt.c11 from DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,372,"            s.executeUpdate(""UPDATE DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,374,"              "" alter table DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,378,"            ""triggername='DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_TR1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,380,"              new String[][]{{""DERBY4998_HARD_UPGRADE_NEW_TABLE_RESTRICT_TR1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,381,"            s.execute(""CREATE TABLE DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE(c11 int, c12 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,382,"            s.execute(""INSERT INTO DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE VALUES (1,10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,383,            //Create a trigger in the older release where the database has been
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,384,            //created. The trigger action uses a column in trigger action
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,385,            //through REFERENCING clause
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,386,"            s.execute(""CREATE TRIGGER DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE_TR1 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,387,"              ""AFTER UPDATE OF c12 "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,388,"              ""ON DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE REFERENCING OLD AS oldt "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,389,"              ""FOR EACH ROW "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,390,"                    ""SELECT oldt.c11 from DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,391,"            s.executeUpdate(""UPDATE DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE SET c12=c12+1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,392,"            s.executeUpdate(""alter table DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_7.java,397,"                    ""triggername='DERBY4998_HARD_UPGRADE_NEW_TABLE_CASCADE_TR1'""));"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,88,            // DERBY-4463 test fails on IBM VMs. Remove this
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,89,            // exception when that issue is solved.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,90,"            println(""Test skipped for this VM, cf. DERBY-4463"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,91,            return new TestSuite(testName);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,57,        if (! isSunJVM()) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,92,        if (! isSunJVM()) {
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,61,"     * don't have lcc, e.g. during database creation."
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,274,                // do nothing
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,350,                    // do nothing
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2617,     * Puts the current thread to sleep and sets the interrupt flag of the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2618,     * thread if an {@code InterruptedException} is thrown while sleeping.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2620,     * <em>NOTE</em>: This method does not guarantee that the thread sleeps at
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2626,        try {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2627,            Thread.sleep(millis);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2628,        } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2629,            // Set the interrupt flag of the thread to allow code higher up the
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2630,            // stack to detect the interruption.
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2631,            Thread.currentThread().interrupt();
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,962,            // Set the interrupt flag again.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,963,            Thread.currentThread().interrupt();
java/engine/org/apache/derby/impl/services/monitor/TopService.java,190,     return false;
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,205,        synchronized (receiveSemaphore) {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,206,            try {
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,207,                receiveSemaphore.wait(DEFAULT_MESSAGE_RESPONSE_TIMEOUT);
java/engine/org/apache/derby/impl/store/replication/net/ReplicationMessageTransmit.java,208,            } catch (InterruptedException ie) {
java/engine/org/apache/derby/impl/services/monitor/TopService.java,31,import org.apache.derby.iapi.util.InterruptStatus;
java/engine/org/apache/derby/impl/services/monitor/TopService.java,191,                    InterruptStatus.setInterrupted();
java/engine/org/apache/derby/impl/services/monitor/TopService.java,31,// import org.apache.derby.iapi.util.InterruptStatus;
java/engine/org/apache/derby/impl/services/monitor/TopService.java,191,                    // InterruptStatus.setInterrupted();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2213,"        st.executeUpdate(""create table atdc_6 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2220,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2221,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2222,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2223,"                ""triggername='ATDC_6_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2224,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_6_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2237,"        st.executeUpdate(""create table atdc_11 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2244,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2245,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2246,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2247,"                ""triggername='ATDC_11_TRIGGER_1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2248,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_11_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2260,"        st.executeUpdate(""create table atdc_12 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2274,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2275,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2276,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2277,"                ""triggername in ('ATDC_12_TRIGGER_1', 'ATDC_12_TRIGGER_2')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2278,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_12_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2295,"        st.executeUpdate(""create table atdc_13 (a integer, b integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2320,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2321,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2322,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2323,"                ""triggername in ('ATDC_13_TRIGGER_1', ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2324,"                ""'ATDC_13_TRIGGER_2', 'ATDC_13_TRIGGER_3',"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2325,"                ""'ATDC_13_TRIGGER_4', 'ATDC_13_TRIGGER_5',"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2326,"                ""'ATDC_13_TRIGGER_6')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2327,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_13_TRIGGER_1""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2376,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2383,"        st.executeUpdate(""create table atdc_14_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2384,"        st.executeUpdate(""create table atdc_14_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2385,"        st.executeUpdate(""insert into atdc_14_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2386,"        st.executeUpdate(""insert into atdc_14_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2396,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2397,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2398,"                "" select triggername from sys.systriggers where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2399,"                ""triggername = 'ATDC_14_TRIGGER_1' "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2400,"        JDBC.assertFullResultSet(rs, new String[][]{{""ATDC_14_TRIGGER_1""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2407,"        st.executeUpdate(""create table atdc_14_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2408,"        st.executeUpdate(""create table atdc_14_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2409,"        st.executeUpdate(""insert into atdc_14_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2410,"        st.executeUpdate(""insert into atdc_14_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2431,"        st.executeUpdate(""create table atdc_15_tab1 (a1 integer, b1 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2432,"        st.executeUpdate(""create table atdc_15_tab2 (a2 integer, b2 integer)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2433,"        st.executeUpdate(""insert into atdc_15_tab1 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2434,"        st.executeUpdate(""insert into atdc_15_tab2 values(1,11)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2435,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2436,"            st.executeQuery("" select * from atdc_15_tab1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2437,"        JDBC.assertFullResultSet(rs, new String[][]{{""1"",""11""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2438,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2439,"            st.executeQuery("" select * from atdc_15_tab2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2440,"        JDBC.assertFullResultSet(rs, new String[][]{{""1"",""11""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2462,
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,134,    /** Tells if the daemon has been stopped. */
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,135,    private volatile boolean daemonStopped;
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,391,        if ( daemonStopped ) { return true; }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,392,        else { return !lcc.getDatabase().isActive(); }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,852,        if (!daemonStopped) {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,853,            daemonStopped = true;
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,854,            synchronized (queue) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,975,            indexRefresher = null;
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,866,                if (runningThread == null && daemonLCC != null) {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,867,                    daemonLCC.getTransactionExecute().destroy();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,438,    /** TODO: Remove this when code goes into production (i.e. a release). */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,439,    private boolean indexStatsUpdateLoggingExplicitlySet;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,652,        // TODO: Remove this when going into production code (i.e. a release).
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,653,        indexStatsUpdateLoggingExplicitlySet =
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,654,                PropertyUtil.getSystemProperty(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,655,                    Property.STORAGE_AUTO_INDEX_STATS_LOGGING) != null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,833,                    indexStatsUpdateLoggingExplicitlySet = true;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13762,        // TODO: Remove this override after initial testing.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13763,"        //       Unless logging has been explicitly disabled, turn it on to"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13764,        //       make sure we have some information if things go wrong.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13765,        if (!indexStatsUpdateLoggingExplicitlySet) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13766,            indexStatsUpdateLogging = true;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13767,        }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13768,
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,323,"                tryToGatherStats(lcc, td, cds, AS_BACKGROUND_TASK);"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,352,    /**
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,353,"     * Try to gather statistics. Fail gracefully if we are being shutdown, e.g., the database is killed"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,354,     * while we're busy. See DERBY-5037.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,355,     *
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,356,     * @param lcc language connection context used to perform the work
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,357,     * @param td the table to update index stats for
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,358,     * @param cds the conglomerates to update statistics for (non-index
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,359,     *      conglomerates will be ignored)
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,360,     * @param asBackgroundTask whether the updates are done automatically as
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,361,     *      part of a background task or if explicitly invoked by the user
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,362,     * @throws StandardException if something goes wrong
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,363,     */
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,364,"    private void tryToGatherStats(LanguageConnectionContext lcc,"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,365,"                                        TableDescriptor td,"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,366,"                                        ConglomerateDescriptor[] cds,"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,367,                                        boolean asBackgroundTask)
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,368,            throws StandardException
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,369,    {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,370,        //
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,371,        // Swallow exceptions raised while we are being shutdown.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,372,        //
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,373,        try {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,374,"            updateIndexStatsMinion( lcc, td, cds, asBackgroundTask );"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,375,        }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,376,        catch (StandardException se)
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,377,        {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,378,            if ( !isShuttingDown( lcc ) ) { throw se; }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,379,        }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,380,        // to filter assertions raised by debug jars
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,381,        catch (RuntimeException re)
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,382,        {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,383,            if ( !isShuttingDown( lcc ) ) { throw re; }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,384,        }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,385,    }
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,387,    private boolean isShuttingDown( LanguageConnectionContext lcc )
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,388,    {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,390,            if (daemonDisabled ){
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,394,        return !lcc.getDatabase().isActive();
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,396,
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,702,        final ContextService ctxService = ContextService.getFactory();
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,703,        ctxService.setCurrentContextManager(ctxMgr);
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,718,"                        ""failed to setup index statistics updater"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,719,                ctxService.resetCurrentContextManager(ctxMgr);
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,801,        } catch (ShutdownException se) {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,802,            stop(); // Call stop to log activity statistics.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,803,"            ctxMgr.cleanupOnError(se, db.isActive());"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,821,            ctxService.resetCurrentContextManager(ctxMgr);
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,822,            runTime += (System.currentTimeMillis() - runStart);
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,868,                        !isShuttingDown(daemonLCC)) {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,897,        } else if (se.getSeverity() >= ExceptionSeverity.DATABASE_SEVERITY) {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,906,            stop();
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,237,"        trace(0, ""scheduling "" + td.getQualifiedName() +"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,238,                    (schedulingReason == null
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,239,"                        ? """""
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,240,"                        : "" reason=["" + schedulingReason + ""]""));"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,247,"                        ""update scheduled - "" + td.getUUID() +"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,250,"                            : "" reason=["" + schedulingReason + ""]"") +"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,295,"                trace(1, ""daemon disabled - work not scheduled"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,298,"                trace(1, ""queue full - work not scheduled"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,301,"                trace(1, ""duplicate found - not scheduled"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,320,"        trace(0, ""generateStatistics::start {"" + td.getQualifiedName() + ""}"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,351,"        trace(0, ""generateStatistics::end"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,560,"                    ""wrote stats for index "" + index + "" (rows="" + numRows +"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,561,"                    "", card="" + cardToStr(cardinality) + "")"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,710,"                trace(1, ""got database connection"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,754,"                    log(AS_BACKGROUND_TASK, td, ""generating index statistics"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,797,"            trace(0, ""run::normal_exit"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,836,"        trace(0, ""explicit run"" + (runContext != null"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,838,"                                        : "":"") +"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,840,"        updateIndexStatsMinion(lcc, td, cds, AS_EXPLICIT_TASK);"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,929,"            trace(1, ""top level expected exception: "" + extractIstatInfo(se));"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,1083,    private static String extractIstatInfo(StandardException se) {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,1084,        StackTraceElement[] stack = se.getStackTrace();
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,1085,"        String trace = ""<n/a>"";"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,1088,            if (IndexStatisticsDaemonImpl.class.getName().equals(
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,1089,                    ste.getClassName())) {
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,1099,"        return trace + "" got "" + se.getSQLState() +"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,1100,"                "" ("" +  se.getMessage() + "")"";"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1804,    newCC.setCurrentDependent(td);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1805,    stmtnode.bindStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2300,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2301,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2302,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountBeforeCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2303,"  //      st.executeUpdate(""drop table ATDC_12"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2350,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2351,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2352,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountBeforeCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2353,"    //    st.executeUpdate(""drop table ATDC_13"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2393,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2394,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should reduce"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2395,"  //              numberOfRowsInSysdepends(st),sysdependsRowCountAfterCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2396,"    //    st.executeUpdate(""drop table ATDC_13"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2473,        //Following returns incorrect rows for SYS.SYSDEPENDS DERBY-5079
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2474,"//        Assert.assertEquals(""# of rows in SYS.SYSDEPENDS should not change"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2475,"  //        numberOfRowsInSysdepends(st),sysdependsRowCountAfterCreateTrigger);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,2484,"//        st.executeUpdate(""drop table ATDC_15_TAB2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,82,"            s.executeUpdate(""INSERT INTO Trigger_t1(max_size) ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,83,"      ""VALUES(20)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,29,import java.io.FileInputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,30,import java.io.FileNotFoundException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,31,import java.io.IOException;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,32,import java.io.OutputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,37,import javax.sql.*;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,195,    public void testGetTypeMapReturnsasExcepted() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,212,        ArrayList lst = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,220,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,221,"             map.put(""JAVA_UTIL_LIST"", Class.forName(""java.util.List""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,222,        } catch (ClassNotFoundException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,223,            se.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,224,"            println(""map.put has exception"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java,225,        }
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,355,     isRow &&
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,356,     referencedColsInTriggerAction != null)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4719,  boolean in10_7_orHigherVersion =
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4720,"   checkVersion(DataDictionary.DD_VERSION_DERBY_10_7,null);"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,45,
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1095,    int[] referencedColsInTriggerAction = trd.getReferencedColsInTriggerAction();
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1096,    int[] triggerCols = trd.getReferencedCols();
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1097,    if (triggerCols == null || triggerCols.length == 0) {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1098,     for (int i=0; i < columnCount; i++) {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1099,      columnMap.set(i+1);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1100,     }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1101,     //no need to go through the test of the trigger because
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1102,     //we have already decided to read all the columns
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1103,     //because no trigger action columns were found for the
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1104,     //trigger that we are considering right now.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1105,     break;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1106,    } else {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1107,     if (referencedColsInTriggerAction == null ||
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1108,       referencedColsInTriggerAction.length == 0) {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1109,      //Does this trigger have REFERENCING clause defined on it
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1110,      if (!trd.getReferencingNew() && !trd.getReferencingOld()) {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1111,       for (int ix = 0; ix < triggerCols.length; ix++)
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1112,       {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1113,        columnMap.set(triggerCols[ix]);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1114,       }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1115,      } else {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1116,       for (int i=0; i < columnCount; i++) {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1117,        columnMap.set(i+1);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1118,       }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1119,       //no need to go through the test of the trigger because
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1120,       //we have already decided to read all the columns
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1121,       //because no trigger action columns were found for the
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1122,       //trigger that we are considering right now.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1123,       break;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1124,      }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1125,     } else {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1126,      for (int ix = 0; ix < triggerCols.length; ix++)
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1127,      {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1128,       columnMap.set(triggerCols[ix]);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1129,      }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1130,      for (int ix = 0; ix < referencedColsInTriggerAction.length; ix++)
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1131,      {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1132,       columnMap.set(referencedColsInTriggerAction[ix]);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1133,      }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1134,     }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1135,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,25,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,26,import java.sql.SQLWarning;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,29,import java.util.HashSet;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,30,import java.util.Set;
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,353,            // SocketTimeoutException is wrapped in
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,354,            // PrivilegedActionException.
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,355,            Throwable cause = e.getCause();
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,356,            if (cause instanceof SocketTimeoutException) {
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,357,                // Timeout!
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,358,                return false;
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,359,            } else {
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,360,                throw StandardException.newException
java/engine/org/apache/derby/impl/store/replication/slave/SlaveController.java,363,            }
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,806,     shutdownSync.wait();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1199,  shutdown = true;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,85,        // omit on AIX JDK 1.5 for now as it is causing a hang DERBY-4319
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,86,        // see also ttestDefaultProperties below
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,87,        if (! (isPlatform(OsName.AIX) && isJava5())) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,90,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,110,        // DERBY-4319
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,111,        if (TestConfiguration.loadingFromJars() &&
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,112,            (! (isPlatform(OsName.AIX) && isJava5())))
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ConnectWrongSubprotocolTest.java,3,   Derby - Class org.apache.derbyTesting.functionTests.tests.tools.IjConnNameTest
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1121,            File databaseDir = new File(fullPath);
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1122,            if ( deleteDir(databaseDir) )
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1123,            {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1124,"                DEBUG(""Successfully deleted database dir '"" + fullPath +""'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1125,            }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1126,            else
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1127,            {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1128,"                DEBUG(""Failed deleting database dir '"" + fullPath +""'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1129,            }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1422,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1423,    private static boolean deleteDir(File dir)
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1424,    {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1425,        if (dir.isDirectory())
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1426,        {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1427,            String[] children = dir.list();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1428,            for (int i=0; i<children.length; i++)
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1429,          {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1430,"                boolean success = deleteDir(new File(dir, children[i]));"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1431,                if (!success)
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1432,                {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1433,                    return false;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1434,                }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1435,            }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1436,        }
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1437,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1438,        // The directory is now empty so delete it
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1439,        return dir.delete();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1440,    }
java/client/org/apache/derby/client/am/LogicalStatementEntity.java,103,        if (physicalPs instanceof CallableStatement) {
java/client/org/apache/derby/client/am/LogicalStatementEntity.java,105,            this.physicalCs = (CallableStatement)physicalPs;
java/engine/org/apache/derby/iapi/types/NumberDataType.java,73,            result = (NumberDataType)getNewNull();
java/engine/org/apache/derby/impl/services/locks/AbstractPool.java,399,"   Serializable value = (String) PropertyUtil.getPropertyFromSet(dbOnly, p, key);"
java/engine/org/apache/derby/impl/services/locks/LockTableVTI.java,103,"//System.out.println(""next lock "");"
java/engine/org/apache/derby/impl/services/locks/LockTableVTI.java,106,    lock = (Lock) grantedList.next();
java/engine/org/apache/derby/impl/services/locks/LockTableVTI.java,115,     lock = (Lock) waitingList.next();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,13725,"            perm = (PermDescriptor) rf.buildDescriptor(curRow, (TupleDescriptor) null, this);"
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,229,  childResult = (ProjectRestrictNode) childResult.optimize(
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,962,  childResult = (FromTable) childResult.optimize(
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,465,   (NormalizeResultSetNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,332,            treeTop = (RowCountNode)getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,189,    qt = (SQLToJavaValueNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,652,            treeTop = (RowCountNode)getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1654,            prnRSN = (RowCountNode)getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,448,    (NormalizeResultSetNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,490,            treeTop = (RowCountNode)getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,501,   rowLocationNode = (CurrentRowLocationNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,507,   rowLocationNode = (NumericConstantNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,557,   resultSet = (NormalizeResultSetNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/execute/SetConstraintsConstantAction.java,325,    cd = (CheckConstraintDescriptor) cdl.elementAt(index);
java/engine/org/apache/derby/impl/store/access/btree/D_BTreeController.java,394,        OpenBTree   open_btree  = (BTreeController) this.diag_object;
java/engine/org/apache/derby/impl/store/access/btree/index/B2IFactory.java,287,            btree = (B2I) root.getConglom(B2I.FORMAT_NUMBER);
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,400,
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,402,        interruptedException = null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,372,        public Exception e; // if any seen
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,435,"                                throw new Exception(""expected 08000, saw"" + e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,462,"                                throw new Exception(""expected 08000, saw"" + e);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,479,            } catch (Exception e) {
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1028,                    Process proc = null;
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1032,"                        proc = Runtime.getRuntime().exec(fullCmd,envElements,workingDir);"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1033,"                        // proc = Runtime.getRuntime().exec(commandElements,envElements,workingDir);"
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1149,            proc.waitFor();
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1151,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1274,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1345,
java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java,1405,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,346,  //  old/new row columns
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,355,     isRow && (referencingOld || referencingNew))
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4719,  // DERBY-1482 has caused a regression which is being worked
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4720,"  // under DERBY-5121. Until DERBY-5121 is fixed, we want"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4721,  // Derby to create triggers same as it is done in 10.6 and
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4722,  // earlier. This in other words means that do not try to
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4723,"  // optimize how many columns are read from the trigger table,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4724,  // simply read all the columns from the trigger table.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4725,  boolean in10_7_orHigherVersion = false;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4841,   //If the database is at 10.6 or earlier version(meaning we are in
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4844,   //usage of trigger action columns was introduced in 10.7 DERBY-1482
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4905,    if (in10_7_orHigherVersion) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5009,   //DERBY-5121 We can come here if the column being used in trigger
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5010,   // action is getting dropped and we have come here through that
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5011,"   // ALTER TABLE DROP COLUMN. In that case, we will not find the"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5012,   // column in the trigger table.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5013,   if (triggerColDesc == null) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5014,    throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5015,"                  SQLState.LANG_COLUMN_NOT_FOUND, tableName+"".""+colName);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5016,   }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5017,   int colPositionInTriggerTable = triggerColDesc.getPosition();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5048,   if (in10_7_orHigherVersion && triggerColsAndTriggerActionCols != null){
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,908,"             baseTable, updateColumnList, conglomVector, relevantCdl,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,960,   *       release 10.7 or higher. Because prior to that we did not collect
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,961,   *       trigger action column informatoin. eg
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,968,   *       table. This will cover soft-upgrade and hard-upgrade scenario
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,969,   *       for triggers created pre-10.7. This rule prevents us from having
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,970,"   *       special logic for soft-upgrade. Additionally, this logic makes"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,971,   *       invalidation of existing triggers unnecessary during
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,972,   *       hard-upgrade. The pre-10.7 created triggers will work just fine
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,973,"   *       even though for some triggers, they would have trigger action"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,974,   *       columns missing. A user can choose to drop and recreate such
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,975,   *       triggers to take advantage of Rule 3 which will avoid unnecssary
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,976,   *       column reads during trigger execution.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,977,   *       eg trigger created prior to 10.7
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,981,"   *       To reiterate, Rule4) is there to cover triggers created with"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,982,"   *       pre-10,7 releases but now that database has been"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,983,"   *       hard/soft-upgraded to 10.7 or higher version. Prior to 10.7,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,984,   *       we did not collect any information about trigger action columns.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,985,   *       Rule5)The only place we will need special code for soft-upgrade
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,986,"   *       is during trigger creation. If we are in soft-upgrade mode, we"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,987,   *       want to make sure that we do not save information about trigger
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,988,   *       action columns in SYSTRIGGERS because the releases prior to 10.7
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,989,   *       do not understand trigger action column information.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1096,
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1097,    //Does this trigger have REFERENCING clause defined on it
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1098,    if (!trd.getReferencingNew() && !trd.getReferencingOld())
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1099,     continue;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1100,    else
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1101,    {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1102,     needToIncludeAllColumns = true;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1103,     break;
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1104,    }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1105,   }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1107,   if (needToIncludeAllColumns) {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1108,    for (int i = 1; i <= columnCount; i++)
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1109,    {
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1110,     columnMap.set(i);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1111,    }
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,1115,
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,458,           (CursorResultSet)null);
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,475,           (CursorResultSet)null);
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,92,  CursorResultSet  ars
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,267,           rowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,463,            tableScan);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,498,          getTableScanResultSet(baseTableConglom));
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1121,            rowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1169,          rowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,71,  CursorResultSet  ars
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,95,"            getNewRSOnCurrentRow(activation, brs));"
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,100,"           getNewRSOnCurrentRow(activation, ars));"
java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java,71,  CursorResultSet  ars
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,44,
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,178,"  * row, the current row of this result set."
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,190,  CursorResultSet   rs
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,193,  TemporaryRowHolderImpl singleRow =
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,194,"   new TemporaryRowHolderImpl(activation, null,"
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,195,            rs.getResultDescription());
java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java,196,  singleRow.insert(rs.getCurrentRow());
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,234,  CursorResultSet  ars
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,278,"    executors[eventNumber][i].fireTrigger(event, brs, ars);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,805,            insertedRowHolder.getResultSet());
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,819,          insertedRowHolder.getResultSet());
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,45, // DERBY-1482 has caused a regression which is being worked
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,46," // under DERBY-5121. Until DERBY-5121 is fixed, we want"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,47, // Derby to create triggers same as it is done in 10.6 and
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,48, // earlier. This in other words means that do not try to
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,49," // optimize how many columns are read from the trigger table,"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,50, // simply read all the columns from the trigger table.
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,51," // Because of this, we need to disable the tests that were"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,52, // added as part of DERBY-1482 to check the column read
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,53, // optimization.
java/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.java,54, boolean isDerby1482Fixed = false;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,48,        return suite;
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,85,"""      JIRA id, only digits allowed\n"" +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,361,"        out.write(""// Filter id: "" + filterId + "", user id "" + user);"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,362,        out.newLine();
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,363,"        log(""fetching issues from filter (id = "" + filterId + "")"");"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,365,        try {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,366,            issues= jiraSoapService.getIssuesFromFilterWithLimit(
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,367,"                auth, Long.toString(filterId), 0, 1000);"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,368,        } catch (org.apache.derbyBuild.jirasoap.RemoteException re) {
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,369,            throw new IllegalArgumentException(
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,370,"                    ""invalid filter id: "" + filterId +"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,371,"                    "" ("" + re.getFaultString() + "")"");"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,373,"        log(""persisting issues (filter matched "" + issues.length + "" issues)"");"
tools/release/jirasoap/src/main/java/org/apache/derbyBuild/jirasoap/FilteredIssueLister.java,374,"        out.write(""// Filter issue count: "" + issues.length);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,27,import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,34,import javax.sql.*;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,606,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java,607,    public void testIsPoolable() throws SQLException {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1347,             try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1349,"                 // OK not to force WAL here, in fact, this operation preceeds the"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1350,                 // creation of the log record to ensure sufficient space.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1352,                 dataFactory.writeInProgress();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1353,                 try
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1354,                 {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1355,"                     fileData = file.getRandomAccessFile( ""rw"");"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1356,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1357,                 finally
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1358,                 {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1359,                     dataFactory.writeFinished();
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1360,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1362,                 // This container format specifies that the first page is an
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1363,                 // allocation page and the container information is stored
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1364,                 // within it.  The allocation page needs to be somewhat
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1365,                 // formatted because if the system crashed after the create
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1366,"                 // container log operation is written, it needs to be well"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1367,                 // formed enough to get the container information back out of
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1368,                 // it.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1369,                 //
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1370,                 // Don't try to go thru the page cache here because the
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1371,                 // container object cannot be found in the container cache at
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1372,"                 // this point yet.  However, if we use the page cache to store"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1373,"                 // the first allocation page, then in order to write itself"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1374,"                 // out, it needs to ask the container to do so, which is going"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1375,                 // to create a deadlock.  The allocation page cannot write
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1376,                 // itself out without going thru the container because it
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1377,                 // doesn't know where its offset is.  Here we effectively
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1378,                 // hardwire page 0 at offset 0 of the container file to be
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1379,                 // the first allocation page.
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1380,
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1381,                 // create an embryonic page - if this is not a temporary
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1382,"                 // container, synchronously write out the file header."
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1383,                 writeRAFHeader(
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1384,"                     actionIdentity, fileData, true,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1385,                     (actionIdentity.getSegmentId() !=
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1388,             } catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1390,"                 // only thrown by the RandomeAccessFile constructor,"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1391,                 // so the file won't exist
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1392,"                 throw StandardException.newException( SQLState.FILE_CREATE, se, file);"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1394,             } catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1396,                 boolean fileDeleted;
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1397,                 try {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1398,                     fileDeleted = privRemoveFile(file);
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1399,                 } catch (SecurityException se) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1400,"                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, se.toString());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1401,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1403,                 if (!fileDeleted) {
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1404,"                     throw StandardException.newException( SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, ioe.toString());"
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1405,                 }
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1407,"                 throw StandardException.newException( SQLState.FILE_CREATE, ioe, file);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,665,            // Assert and clear thread's flag:
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,667,            assertTrue(Thread.interrupted());
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,30,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/iapi/types/SQLBlob.java,29,
java/engine/org/apache/derby/iapi/types/SQLBlob.java,30,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/io/vfmem/BlockedByteArray.java,24,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java,29,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,39,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,47,import org.apache.derby.shared.common.sanity.SanityManager;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2492,     setSSLMode(SSL_OFF);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,29,import org.apache.derby.iapi.services.io.DerbyIOException;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,32,import org.apache.derbyTesting.junit.Utilities;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,99,    final   int TEST_COUNT = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,100,    final   int FAILURES = TEST_COUNT + 1;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,101,"    final   String  A_COL = ""a"";"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,102,"    final   String  B_COL = ""b"";"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,103,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,104,    //This test has been contributed by Rick Hillegas for DERBY-5121
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,105,    // The test exhaustively walks through all subsets and permutations
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,106,    // of columns for a trigger which inserts into a side table based on
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,107,    // updates to a master table.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,108,    public void testExhuastivePermutationOfTriggerColumns() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,109,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,110,        final   int STATUS_COUNTERS = FAILURES + 1;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,111,        int columnCount = 3;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,112,        int[][]   powerSet = constructPowerSet( columnCount );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,113,        int[][] permutations = permute( powerSet );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,114,        int[]   statusCounters = new int[ STATUS_COUNTERS ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,115,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,116,        switch ( getPhase() )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,117,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,118,        case PH_CREATE: // create with old version
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,119,            for ( int triggerCols = 0; triggerCols < powerSet.length; triggerCols++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,120,            {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,121,                for ( int perm = 0; perm < permutations.length; perm++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,122,                {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,123,"                    createT1( powerSet[ triggerCols ], permutations[ perm ] );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,124,"                    createT2( columnCount, powerSet[ triggerCols ], permutations[ perm ]  );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,125,"                    createTrigger( powerSet[ triggerCols ], permutations[ perm ] );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,126,                }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,127,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,128,         break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,129,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,130,        case PH_SOFT_UPGRADE:
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,131,            for ( int triggerCols = 0; triggerCols < powerSet.length; triggerCols++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,132,            {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,133,                for ( int perm = 0; perm < permutations.length; perm++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,134,                {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,135,                    for ( int i = 0; i < permutations.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,136,                    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,137,"                        runTrigger( statusCounters, columnCount, powerSet[ triggerCols ], permutations[ perm ], permutations[ i ] );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,138,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,139,                }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,140,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,141,         break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,142,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,143,        summarize( statusCounters );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,144,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,145,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,146,    //Start of helper methods for testExhuastivePermutationOfTriggerColumns
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,147,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,148,    ////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,149,    //
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,150,    // make power set of N
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,151,    //
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,152,    ////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,153,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,154,    private int[][] constructPowerSet( int count )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,155,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,156,     java.util.ArrayList list = new java.util.ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,157,        boolean[]           inclusions = new boolean[ count ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,158,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,159,"        include( list, 0, inclusions );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,160,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,161,        int[][] result = new int[ list.size() ][];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,162,        list.toArray( result );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,163,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,164,        return result;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,165,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,166,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,167,"    private void    include( ArrayList list, int idx, boolean[] inclusions )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,168,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,169,        if ( idx >= inclusions.length )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,170,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,171,            int totalLength = inclusions.length;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,172,            int count = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,173,            for ( int i = 0; i < totalLength; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,174,            {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,175,                if ( inclusions[ i ] ) { count++; }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,176,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,177,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,178,            if ( count > 0 )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,179,            {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,180,                int[]   result = new int[ count ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,181,                int     index = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,182,                for ( int i = 0; i < totalLength; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,183,                {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,184,                    if ( inclusions[ i ] ) { result[ index++ ] = i; }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,185,                }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,186,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,187,                list.add( result );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,188,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,189,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,190,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,191,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,192,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,193,"        include( list, idx, inclusions, false );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,194,"        include( list, idx, inclusions, true );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,195,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,196,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,197,"    private void    include( ArrayList list, int idx, boolean[] inclusions, boolean currentCell )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,198,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,199,        inclusions[ idx++ ] = currentCell;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,200,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,201,        // this is where the recursion happens
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,202,"        include( list, idx, inclusions );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,203,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,204,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,205,    ////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,206,    //
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,207,    // create all permutations of an array of numbers
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,208,    //
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,209,    ////////////////////////////////////////////////
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,210,    private int[][] permute( int[][] original )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,211,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,212,        ArrayList list = new ArrayList();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,213,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,214,        for ( int i = 0; i < original.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,215,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,216,"            permute( list, new int[0], original[ i ] );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,217,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,218,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,219,        int[][] result = new int[ list.size() ][];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,220,        list.toArray( result );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,221,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,222,        return result;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,223,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,224,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,225,"    private void   permute( ArrayList list, int[] start, int[] remainder )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,226,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,227,        int startLength = start.length;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,228,        int remainderLength = remainder.length;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,229,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,230,        for ( int idx = 0; idx < remainder.length; idx++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,231,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,232,            int[] newStart = new int[ startLength + 1 ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,233,            for ( int i = 0; i < startLength; i++ ) { newStart[ i ] = start[ i ]; }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,234,            newStart[ startLength ] = remainder[ idx ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,235,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,236,            if ( remainderLength <= 1 ) { list.add( newStart ); }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,237,            else
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,238,            {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,239,                int[]   newRemainder = new int[ remainderLength - 1 ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,240,                int     index = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,241,                for ( int i = 0; i < remainderLength; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,242,                {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,243,                    if ( i != idx ) { newRemainder[ index++ ] = remainder[ i ]; }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,244,                }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,245,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,246,                // this is where the recursion happens
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,247,"                permute( list, newStart, newRemainder );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,248,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,249,        }   // end loop through all remainder elements
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,250,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,251,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,252,"    private String  columnName( String stub, int idx ) { return (stub + '_' + idx ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,253,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,254,"    private void createT1(int[] triggerCols, int[] permutation )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,255,    throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,256,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,257,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,258,"        buffer.append( ""create table "" + makeTableName( ""t1"", triggerCols, permutation ) + ""( "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,259,        for ( int i = 0; i < permutation.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,260,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,261,"            if ( i > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,262,"            buffer.append( columnName( B_COL, i ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,263,"            buffer.append( "" int"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,264,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,265,"        buffer.append( "" )"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,266,        Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,267,        s.execute(buffer.toString());
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,268,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,269,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,270,"    private void    createT2(int columnCount, int[] triggerCols, int[] permutation  )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,271,    throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,272,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,273,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,274,"        buffer.append( ""create table "" + makeTableName( ""t2"", triggerCols, permutation ) + ""( "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,275,        for ( int i = 0; i < columnCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,276,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,277,"            if ( i > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,278,"            buffer.append( columnName( A_COL, i ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,279,"            buffer.append( "" int"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,280,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,281,"        buffer.append( "" )"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,282,        Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,283,        s.execute(buffer.toString());
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,284,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,285,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,286,"    private String  makeTableName( String stub, int[] triggerCols, int[] permutation )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,287,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,288,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,289,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,290,        buffer.append( stub );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,291,        for ( int i = 0; i < triggerCols.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,292,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,293,"            buffer.append( ""_"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,294,            buffer.append( triggerCols[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,295,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,296,"       buffer.append( ""__"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,297,        for ( int i = 0; i < permutation.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,298,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,299,"            buffer.append( ""_"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,300,            buffer.append( permutation[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,301,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,302,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,303,        return buffer.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,304,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,305,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,306,"    private void    createTrigger(int[] triggerCols, int[] permutation )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,307,    throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,308,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,309,"        boolean modeDb2SqlOptional = oldAtLeast(10, 3);"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,310,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,311,"        buffer.append( ""create trigger "" + makeTriggerName( ""UTrg"", triggerCols, permutation ) + "" after update of "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,312,        for ( int i = 0; i < triggerCols.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,313,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,314,"            if ( i > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,315,"            buffer.append( columnName( A_COL, triggerCols[ i ] ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,316,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,317,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,318,"        buffer.append( ""\n\ton "" + makeTableName( ""t2"", triggerCols, permutation ) + "" referencing new as nr for each row "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,319,"        buffer.append( modeDb2SqlOptional?"""":""\n\tMODE DB2SQL "");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,320,"        buffer.append( ""\n\tinsert into "" + makeTableName( ""t1"", triggerCols, permutation ) + "" values ( "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,321,        for ( int i = 0; i < permutation.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,322,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,323,"            if ( i > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,324,"            buffer.append( ""nr."" + columnName( A_COL, permutation[ i ] ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,325,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,326,"        buffer.append( "" )"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,327,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,328,        Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,329,        s.execute(buffer.toString());
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,330,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,331,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,332,"    private String  makeTriggerName( String stub, int[] triggerCols, int[] permutation )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,333,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,334,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,335,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,336,        buffer.append( stub );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,337,        for ( int i = 0; i < triggerCols.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,338,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,339,"            buffer.append( ""_"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,340,            buffer.append( triggerCols[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,341,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,342,"        buffer.append( ""__"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,343,        for ( int i = 0; i < permutation.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,344,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,345,"            buffer.append( ""_"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,346,            buffer.append( permutation[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,347,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,348,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,349,        return buffer.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,350,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,351,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,352,"    private int[]   getResults( int rowLength, String text )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,353,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,354,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,355,        PreparedStatement   ps = prepareStatement(text );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,356,        ResultSet               rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,357,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,358,        if ( !rs.next() ) { return new int[0]; }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,359,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,360,        int[]                       result = new int[ rowLength ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,361,        for ( int i = 0; i < rowLength; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,362,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,363,            result[ i ] = rs.getInt( i + 1 );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,364,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,365,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,366,        rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,367,        ps.close();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,368,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,369,        return result;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,370,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,371,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,372,"    private boolean overlap( int[] left, int[] right )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,373,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,374,        for ( int i = 0; i < left.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,375,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,376,            for ( int j = 0; j < right.length; j++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,377,            {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,378,                if ( left[ i ] == right[ j ] )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,379,                {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,380,"                    //println( true, stringify( left ) + "" overlaps "" + stringify( right ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,381,                    return true;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,382,                }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,383,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,384,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,385,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,386,"        //println( true, stringify( left ) + "" DOES NOT overlap "" + stringify( right ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,387,        return false;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,388,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,389,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,390,    private void    vetData
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,391,"    ( int[] statusCounters, int[] triggerCols, int[] permutation, int[] updateColumns, String updateStatement )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,392,    throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,393,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,394,"        String  t1Name = makeTableName( ""t1"", triggerCols, permutation );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,395,"        String  t2Name = makeTableName( ""t2"", triggerCols, permutation );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,396,        int     rowLength = permutation.length;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,397,"        int[]   t1Row = getResults( rowLength, ""select * from "" + t1Name );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,398,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,399,"        if ( !overlap( triggerCols, updateColumns ) )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,400,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,401,            if ( t1Row.length != 0 )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,402,            {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,403,                fail
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,404,                    (
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,405,"                     statusCounters,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,406,"                     triggerCols,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,407,"                     permutation,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,408,"                     updateColumns,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,409,"                     ""No row should have been inserted into t1! updateStatement = '"" + updateStatement + ""' and t1Row = "" + stringify( t1Row )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,410,                     );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,411,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,412,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,413,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,414,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,415,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,416,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,417,"        buffer.append( ""select "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,418,        for ( int i = 0; i < permutation.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,419,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,420,"            if ( i > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,421,"            buffer.append( columnName( A_COL, permutation[ i ] ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,422,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,423,"        buffer.append( "" from "" + t2Name );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,424,"        int[]   t2Row = getResults( rowLength, buffer.toString() );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,425,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,426,        if ( !stringify( t1Row ).equals( stringify( t2Row ) ) )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,427,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,428,"            String  detail = ""Wrong data inserted into t1! "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,429,"                ""updateStatement = '"" + updateStatement + ""'. "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,430,"                ""Expected "" + stringify( t2Row ) +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,431,"                "" but found "" + stringify( t1Row );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,432,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,433,"            fail( statusCounters, triggerCols, permutation, updateColumns, detail );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,434,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,435,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,436,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,437,"    private void    runTrigger( int[] statusCounters, int columnCount, int[] triggerCols, int[] permutation, int[] updateColumns )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,438,    throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,439,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,440,        statusCounters[ TEST_COUNT ]++;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,441,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,442,"        loadData( columnCount, triggerCols, permutation );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,443,"        String  updateStatement = updateData( statusCounters, triggerCols, permutation, updateColumns );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,444,"        vetData( statusCounters, triggerCols, permutation, updateColumns, updateStatement );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,445,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,446,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,447,"    private void    loadData( int columnCount, int[] triggerCols, int[] permutation )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,448,    throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,449,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,450,"        String  t1Name = makeTableName( ""t1"", triggerCols, permutation );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,451,"        String  t2Name = makeTableName( ""t2"", triggerCols, permutation );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,452,        Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,453,"        s.execute(""delete from "" + t1Name);"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,454,"        s.execute(""delete from "" + t2Name);"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,455,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,456,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,457,"        buffer.append( ""insert into "" + t2Name + "" values ( "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,458,        for ( int i = 0; i < columnCount; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,459,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,460,"            if ( i > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,461,            buffer.append( i );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,462,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,463,"        buffer.append( "" )"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,464,        s.execute(buffer.toString());
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,465,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,466,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,467,"    private String    updateData( int[] statusCounters, int[] triggerCols, int[] permutation, int[] updateColumns )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,468,    throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,469,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,470,"        String  t2Name = makeTableName( ""t2"", triggerCols, permutation );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,471,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,472,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,473,"        buffer.append( ""update "" + t2Name + "" set "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,474,        for ( int i = 0; i < updateColumns.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,475,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,476,"            if ( i > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,477,"            buffer.append( columnName( A_COL, updateColumns[ i ] ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,478,"            buffer.append( "" = "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,479,            buffer.append( (100 + i) );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,480,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,481,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,482,        String  updateStatement = buffer.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,483,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,484,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,485,            Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,486,            s.execute(updateStatement);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,487,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,488,        catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,489,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,490,            fail
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,491,                (
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,492,"                 statusCounters,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,493,"                 triggerCols,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,494,"                 permutation,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,495,"                 updateColumns,"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,496,"                 ""Update statement failed! updateStatement = '"" + updateStatement"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,497,                 );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,498,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,499,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,500,        return updateStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,501,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,502,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,503,"    private void    fail( int[] statusCounters, int[] triggerCols, int[] permutation, int[] updateColumns, String detail )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,504,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,505,        statusCounters[ FAILURES ]++;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,506,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,507,"        String  message = ""FAILED for triggerCols = "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,508,            stringify( triggerCols ) +
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,509,"            "" and permutation = "" + stringify( permutation ) +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,510,"            "" and updateColumns = "" + stringify( updateColumns ) +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,511,"            "". "" + detail;"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,512,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,513,        System.out.println( message );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,514,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,515,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,516,    private void    summarize( int[] statusCounters )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,517,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,518,        int testCount = statusCounters[ TEST_COUNT ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,519,        int failures = statusCounters[ FAILURES ];
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,520,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,521,        if ( failures != 0 )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,522,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,523,"         System.out.println( ""FAILURE! "" + testCount + "" test cases run, of which "" + failures + "" failed."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,524,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,525,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,526,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,527,    private String    stringify( int[][] array )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,528,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,529,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,530,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,531,"        buffer.append( ""["" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,532,        for ( int i = 0; i < array.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,533,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,534,"            buffer.append( ""\n\t"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,535,            buffer.append( stringify( array[ i ] ) );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,536,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,537,"        buffer.append( ""\n]\n"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,538,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,539,        return buffer.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,540,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,541,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,542,    private String  stringify( int[] array )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,543,    {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,544,        StringBuffer   buffer = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,545,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,546,"        buffer.append( ""["" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,547,        for ( int j = 0; j < array.length; j++ )
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,548,        {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,549,"            if ( j > 0 ) { buffer.append( "", "" ); }"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,550,            buffer.append( array[ j ] );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,551,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,552,"        buffer.append( ""]"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,553,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,554,        return buffer.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,555,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,556,    //End of helper methods for testExhuastivePermutationOfTriggerColumns
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8.java,557,
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,146,        //Try to get a thread dump and deal with various situations.
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,148,            //This checks that we are on a jvm >= 1.5 where we
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,149,            //can actually do threaddumps.
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,150,"            Thread.class.getMethod(""getAllStackTraces"", new Class[] {});"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,151,
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,152,            //Then get the thread dump.
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,153,            Class c = Class.
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,154,"            forName(""org.apache.derby.shared.common.sanity.ThreadDump"");"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,155,"            final Method m = c.getMethod(""getStackDumpString"",new Class[] {});"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,156,
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,157,            String dump;
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,159,            dump = (String) AccessController.doPrivileged
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,162,"                IllegalArgumentException,"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,163,"                IllegalAccessException,"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,164,                InvocationTargetException{
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,165,"                    return m.invoke(null, null);"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,171,"            p.print(""---------------\nStack traces for all "" +"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,172,"            ""live threads:"");"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,175,        } catch (NoSuchMethodException e) {
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,176,"            p.println(""(Skipping thread dump because it is not "" +"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,177,"            ""supported on JVM 1.4)"");"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,178,
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,179,        } catch (Exception e) {
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,180,            if (e instanceof PrivilegedActionException &&
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,181,                e.getCause() instanceof InvocationTargetException &&
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,182,                e.getCause().getCause() instanceof AccessControlException){
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,185,"                        + ""because of insufficient permissions:\n"""
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,186,"                        + e.getCause().getCause() + "")\n"");"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,188,"                p.println(""\nAssertFailure tried to do a thread dump, but """
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,189,"                        + ""there was an error:"");"
java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java,190,                e.getCause().printStackTrace(p);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,270,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java,198,                if (oldMinor < 8)
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java,199,                 suite.addTest(Changes10_8.suite(phase));
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,210,        TransactionManager internal_xact  = tc.getInternalTransaction();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,218,        OpenBTree open_btree = null;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,247,            // RESOLVE (mikem) - move this call when doing row level locking.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,250,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,251,            open_btree.close();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,280,                    open_btree.close();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,281,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,333,     * RESOLVE (mikem) - under row locking this routine must do more work to
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,334,     * determine a deleted row is a committed deleted row.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,463,        try
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,465,"            // The following can fail, returning null, either if it can't get"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,466,            // the latch or somehow the page requested no longer exists.  In
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,467,            // either case the post commit work will just skip it.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,468,            leaf = (LeafControlRow)
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,469,"                ControlRow.getNoWait(open_btree, page_number);"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,470,            if (leaf == null)
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,471,                return;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,472,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,473,            BTreeLockingPolicy  btree_locking_policy =
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,474,                open_btree.getLockingPolicy();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,475,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,476,            // The number records that can be reclaimed is:
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,477,            // total recs - control row - recs_not_deleted
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,478,            int num_possible_commit_delete =
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,479,                leaf.page.recordCount() - 1 - leaf.page.nonDeletedRecordCount();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,480,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,481,            if (num_possible_commit_delete > 0)
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,482,            {
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,483,                DataValueDescriptor[] scratch_template =
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,484,                    open_btree.getRuntimeMem().get_template(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,485,                        open_btree.getRawTran());
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,487,                Page page   = leaf.page;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,490,                // RowLocation column is in last column of template.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,491,                FetchDescriptor lock_fetch_desc =
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,492,                    RowUtil.getFetchDescriptorConstant(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,493,                        scratch_template.length - 1);
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,495,                // loop backward so that purges which affect the slot table
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,496,                // don't affect the loop (ie. they only move records we
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,497,                // have already looked at).
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,498,                for (int slot_no = page.recordCount() - 1;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,499,                     slot_no > 0;
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,500,                     slot_no--)
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,502,                    if (page.isDeletedAtSlot(slot_no))
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,504,"                        // try to get an exclusive lock on the row, if we can"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,505,                        // then the row is a committed deleted row and it is
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,506,                        // safe to purge it.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,507,                        if (btree_locking_policy.lockScanCommittedDeletedRow(
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,508,"                                open_btree, leaf, scratch_template,"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,509,"                                lock_fetch_desc, slot_no))"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,510,                        {
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,511,"                            // the row is a committed deleted row, purge it."
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,512,"                            page.purgeAtSlot(slot_no, 1, true);"
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,513,                            // Tell scans positioned on this page to reposition
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,514,                            // because the row they are positioned on may have
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,515,                            // disappeared.
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,516,                            page.setRepositionNeeded();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,517,                        }
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,520,
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,523,        finally
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,524,        {
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,525,            if (leaf != null)
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,526,                leaf.release();
java/engine/org/apache/derby/impl/store/access/btree/BTreePostCommit.java,527,        }
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1367,   SanityManager.ASSERT(isLatched());
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1370,    releaseExclusive();
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1391,   SanityManager.ASSERT(isLatched());
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1432,"     SanityManager.THROWASSERT(""incorrect deleted row count.  Should be: """
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1433,"      + delCount + "", instead got: "" + deletedCount"
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1434,"      + "", maxSlot = "" + maxSlot + "", recordCount = "" + recordCount);"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,7037,            SanityManager.ASSERT(isLatched());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,627,"            assertEquals(""'S1.NOSUCH' is not recognized as a function."", e.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,636,"            assertEquals(""'S1.P1' is not recognized as a function."", e.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,653,"            assertEquals(""'S1.NOSUCH' is not recognized as a procedure."", e.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,662,"            assertEquals(""'S1.F2' is not recognized as a procedure."", e.getMessage());"
java/client/org/apache/derby/client/am/Lob.java,182,    void completeLocalRollback() {
java/client/org/apache/derby/client/am/Lob.java,183,        ;
java/client/org/apache/derby/client/am/Lob.java,184,    }
java/client/org/apache/derby/client/am/Lob.java,185,
java/client/org/apache/derby/client/am/Lob.java,186,    void completeLocalCommit() {
java/client/org/apache/derby/client/am/Lob.java,187,        ;
java/client/org/apache/derby/client/am/Lob.java,188,    }
java/client/org/apache/derby/client/am/Lob.java,190,
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,371,                // Give the index scan time to start and position on
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,372,"                // the row we have locked. (Give it two seconds, since the"
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,373,                // main thread sleeps for one second first before it starts
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,374,                // the index scan.)
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,375,                Thread.sleep(2000);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,388,        // Give the other thread time to obtain the lock
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,389,        Thread.sleep(1000);
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,392,"        // the row where x=100, but should be able to resume the scan."
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,393,        ResultSet rs = s.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java,394,"                ""select * from t --DERBY-PROPERTIES constraint=C"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,808,    public void testTriggersWithLOBcolumns() throws Exception
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,391,  /* Prepare all dependents to invalidate.  (This is there chance
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2093,  // invalidate any prepared statements that depended on this table
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2094,"        // (including this one), this fixes problem with threads that start up"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2095,"        // and block on our lock, but do not see they have to recompile their"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2096,        // plan.  We now invalidate earlier however they still might recompile
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2097,        // using the old conglomerate id before we commit our DD changes.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2098,  //
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2099,"  dm.invalidateFor(td, DependencyManager.COMPRESS_TABLE, lcc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2100,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2308,  // invalidate any prepared statements that
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2309,  // depended on this table (including this one)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2310,"  // bug 3653 has threads that start up and block on our lock, but do"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2311,  // not see they have to recompile their plan.    We now invalidate earlier
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2312,  // however they still might recompile using the old conglomerate id before we
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2313,  // commit our DD changes.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2314,  //
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2315,"  dm.invalidateFor(td, DependencyManager.TRUNCATE_TABLE, lcc);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2316,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java,41,        return TestConfiguration.embeddedSuite(CompressTableTest.class);
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,78,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,79,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,80,import org.apache.derby.impl.sql.compile.FromSubquery;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2307,    fsq.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,661, /**
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,662,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,663,  */
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,664, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,665, {
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,666,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,667,  subquery.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,668, }
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,669,
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,213, /**
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,214,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,215,  */
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,216, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,217, {
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,218,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,219,  if (javaNode != null)
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,220,   javaNode.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,221, }
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,222,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,550,"  * Triggers, constraints and views get executed with their definer's"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,551,  * privileges and they can exist in the system only if their definers'
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,552,"  * still have all the privileges to creeate them. Based on this, any"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,555,"  * At compile time, we wil make sure that we do not collect the privilege"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,559, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1364, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1365,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1366,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1367, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1368, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1369,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1370,  if (expression != null)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1371,   expression.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1372, }
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1373,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2781,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2782, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2783,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2784,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2785, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2786, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2787,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2788,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2789,  int size = size();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2790,  for (int index = 0; index < size; index++)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2791,   ((ResultColumn) elementAt(index)).disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2792, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,482, /**
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,483,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,484,  */
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,485, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,486, {
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,487,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,488,  if (resultColumns != null)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,489,   resultColumns.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,490, }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,491,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,27,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,37,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,38,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2265, /**
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2266,  * @see QueryTreeNode#disablePrivilegeCollection
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2267,  */
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2268, public void disablePrivilegeCollection()
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2269, {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2270,  super.disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2271,  int fromListSize = fromList.size();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2272,  for( int i = 0; i < fromListSize; i++)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2273,   ((FromTable) fromList.elementAt(i)).disablePrivilegeCollection();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2274, }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2275,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,761,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1349,"     ResultSet rs = dm.getTablePrivileges(null, schema.toUpperCase(), table.toUpperCase());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1351,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java,248,"    private static boolean lessThan( int[] left, int[] right )"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1840,    //Register the dependency between trigger table and trigger
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1841,    // action SPS
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1842,"    dm.addDependency(triggerActionSPSD, td, lcc.getContextManager());"
java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java,350,"  dm.addDependency(actionspsd, triggerTable, lcc.getContextManager());"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,63,        suite.addTest(new CleanDatabaseTestSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,64,"                        new ImportExportIJTest(""importExportIJ"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,65,"        Test tst = new SupportFilesSetup(suite, new String[] {"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,80,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,81,        // This test should run in English locale since it compares error
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,82,"        // messages against a canon based on the English message text. Also,"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,83,"        // run the test in a fresh database, since the language of the message"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,84,        // text is determined when the database is created.
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,85,        tst = TestConfiguration.singleUseDatabaseDecorator(tst);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportIJTest.java,86,"        return new LocaleTestSetup(tst, Locale.ENGLISH);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ij2Test.java,44,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ij2Test.java,45,"        props.setProperty(""derby.infolog.append"", ""true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ij2Test.java,46,"        props.setProperty(""ij.protocol"", ""jdbc:derby:"");"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ij2Test.java,61,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ij2Test.java,62,        return getIJConfig(test);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,321,   }
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,27,import junit.framework.Test;
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,54,
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,79,
java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java,94,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,511,"             ""expected output:"" + expectedString +"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,735,    * @return output of the process
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,743,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,746,      char[] ca = new char[1024];
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,747,      // Create an InputStreamReader with default encoding; we're hoping
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,748,"      // this to be en. If not, we may not match the expected string."
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,749,      InputStreamReader inStream;
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,750,      inStream = new InputStreamReader(is);
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,751,
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,752,      // keep reading from the stream until all done
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,753,      int charsRead;
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,754,"      while ((charsRead = inStream.read(ca, 0, ca.length)) != -1)"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,755,      {
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,756,"          output = output + new String(ca, 0, charsRead);"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,757,      }
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,761,
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1475,        case RelationalOperator.NOT_EQUALS_RELOP:
java/engine/org/apache/derby/vti/RestrictedVTI.java,44," * expressions using the <, <=, =, >, and >= operators. This can also mean"
java/engine/org/apache/derby/vti/Restriction.java,153,"        private String[] OPERATOR_SYMBOLS = new String[] {  ""<"", ""="", ""<="", "">"", "">="", ""IS NULL"", ""IS NOT NULL"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,960,     * comparable types.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,962,    public void test_11_5370() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,978,"        vet5370positive( conn, ""BOOLEAN_COL"", ""false"", ""false"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,979,"        vet5370positive( conn, ""BIGINT_COL"", ""0"", ""0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,980,"        vet5370positive( conn, ""CHAR_COL"", ""'0'"", ""0         "" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,981,"        vet5370positive( conn, ""CHAR_FOR_BIT_DATA_COL"", ""X'de'"", ""de202020202020202020"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,982,"        vet5370positive( conn, ""DATE_COL"", ""DATE('1994-02-23')"", ""1994-02-23"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,983,"        vet5370positive( conn, ""DECIMAL_COL"", ""0.00"", ""0.00"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,984,"        vet5370positive( conn, ""REAL_COL"", ""0.0"", ""0.0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,985,"        vet5370positive( conn, ""DOUBLE_COL"", ""0.0"", ""0.0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,986,"        vet5370positive( conn, ""INT_COL"", ""0"", ""0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,987,"        vet5370positive( conn, ""NUMERIC_COL"", ""0.00"", ""0.00"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,988,"        vet5370positive( conn, ""SMALLINT_COL"", ""0"", ""0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,989,"        vet5370positive( conn, ""TIME_COL"", ""TIME('15:09:02')"", ""15:09:02"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,990,"        vet5370positive( conn, ""TIMESTAMP_COL"", ""TIMESTAMP('1962-09-23 03:23:34.234')"", ""1962-09-23 03:23:34.234"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,991,"        vet5370positive( conn, ""VARCHAR_COL"", ""'0'"", ""0"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,992,"        vet5370positive( conn, ""VARCHAR_FOR_BIT_DATA_COL"", ""X'de'"", ""de"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java,1009,         String expectedValue
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,172,"        if (!( System.getProperty(""java.vm.name"").equals(""CVM"")"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,173,"            && System.getProperty(""java.vm.version"").startsWith(""phoneme"") ) )"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java,103,"            if ( System.getProperty(""java.vm.name"").equals(""CVM"")"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java,104,"                  && System.getProperty(""java.vm.version"").startsWith(""phoneme"")"
java/engine/org/apache/derby/diag/StatementDuration.java,256,"            // From 10.7 onward, the logged timestamp was formatted by Date.toString()."
java/engine/org/apache/derby/diag/StatementDuration.java,258,"            SimpleDateFormat    sdf = new SimpleDateFormat( ""EEE MMM dd HH:mm:ss zzz yyyy"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,743,"        SimpleDateFormat    sdf = new SimpleDateFormat( ""EEE MMM dd HH:mm:ss zzz yyyy"" );"
java/engine/org/apache/derby/impl/store/access/btree/BTree.java,60,import org.apache.derby.iapi.services.io.ArrayUtil;
java/engine/org/apache/derby/impl/store/access/btree/BTree.java,61,
java/engine/org/apache/derby/impl/store/access/btree/BTree.java,589,"        return(new OpenConglomerateScratchSpace(format_ids, collation_ids));"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,54,import org.apache.derby.impl.store.access.conglomerate.TemplateRow;
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,848,
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,851,                            int rowloc_index =
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,852,                                this.getConglomerate().nKeyFields - 1;
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,853,                            targetleaf.page.updateFieldAtSlot(
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,854,"                                insert_slot, rowloc_index,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,855,                                (DataValueDescriptor) RowUtil.getColumn(
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,856,"                                    rowToInsert,"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,857,"                                    (FormatableBitSet) null, rowloc_index),"
java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java,858,                                this.btree_undo);
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,37,import org.apache.derby.iapi.store.raw.RecordHandle;
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,94,    private DynamicCompiledOpenConglomInfo  init_dynamic_info;
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,417,        init_dynamic_info   = dynamic_info;
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,418,
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,432,             new OpenConglomerateScratchSpace(
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,433,"                 conglomerate.format_ids,"
java/engine/org/apache/derby/impl/store/access/btree/OpenBTree.java,434,                 conglomerate.collation_ids));
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,32,import org.apache.derby.iapi.services.io.FormatableBitSet;
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,36,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,37,import org.apache.derby.impl.store.access.btree.ControlRow;
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,69,import org.apache.derby.iapi.services.io.CompressedNumber;
java/engine/org/apache/derby/impl/store/access/btree/index/B2I.java,1184,"            ConglomerateUtil.readCollationIdArray(collation_ids, in);"
java/engine/org/apache/derby/impl/store/access/conglomerate/ConglomerateUtil.java,31,import org.apache.derby.iapi.store.access.ColumnOrdering;
java/engine/org/apache/derby/impl/store/access/conglomerate/ConglomerateUtil.java,315,    public static void readCollationIdArray(
java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerate.java,33,
java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerate.java,879,"             new OpenConglomerateScratchSpace(format_ids, collation_ids));"
java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerateScratchSpace.java,77,    private int[]                   format_ids;
java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerateScratchSpace.java,78,    private int[]                   collation_ids;
java/engine/org/apache/derby/impl/store/access/conglomerate/OpenConglomerateScratchSpace.java,102,    int[]   collation_ids)
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,45,import org.apache.derby.iapi.store.access.conglomerate.TransactionManager;
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,583,"        return(new OpenConglomerateScratchSpace(format_ids, collation_ids));"
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,1216,"            ConglomerateUtil.readCollationIdArray(collation_ids, in);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,37,import javax.sql.DataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,38,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,44,import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,47,import org.apache.derbyTesting.junit.JDBCDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,50,import org.apache.derbyTesting.junit.SQLUtilities;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,53,import org.apache.derby.iapi.services.sanity.SanityManager;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,54,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,55,
java/drda/org/apache/derby/impl/drda/DssTrace.java,185,                    comBufferWriter =  ((PrintWriter)AccessController.doPrivileged(
java/drda/org/apache/derby/impl/drda/DssTrace.java,187,"                                public Object run() throws SecurityException, IOException {"
java/drda/org/apache/derby/impl/drda/DssTrace.java,188,"                                    return new  PrintWriter (new java.io.BufferedWriter (new java.io.FileWriter (fileName), 4096));"
java/drda/org/apache/derby/impl/drda/DssTrace.java,216,                                                traceDirectory.mkdirs();
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,142,     if (Float.parseFloat(javaVersion) > 1.6f)
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,143,      id = J2SE_16;
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,28,import java.io.*;
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,172," public static boolean copyFile(File from, File to)"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,173, {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,174,"  return copyFile(from, to, (byte[])null);"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,175, }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,224,"    public static boolean copyDirectory( StorageFactory storageFactory,"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,225,"                                         StorageFile from,"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,226,                                         File to)
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,227,    {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,228,"        return copyDirectory( storageFactory, from, to, null, null, true);"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,229,    }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,230,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,386,  String[] list = from.list();
java/engine/org/apache/derby/impl/io/DirFile.java,93,    /**
java/engine/org/apache/derby/impl/io/DirFile.java,94,     * Get the name of the directory of temporary files.
java/engine/org/apache/derby/impl/io/DirFile.java,95,     *
java/engine/org/apache/derby/impl/io/DirFile.java,96,     * @return The abstract name of the temp directory;
java/engine/org/apache/derby/impl/io/DirFile.java,97,     */
java/engine/org/apache/derby/impl/io/DirFile.java,98,    static StorageFile getTempDir() throws IOException
java/engine/org/apache/derby/impl/io/DirFile.java,99,    {
java/engine/org/apache/derby/impl/io/DirFile.java,100,"        File temp = File.createTempFile(""derby"", ""tmp"");"
java/engine/org/apache/derby/impl/io/DirFile.java,101,        StorageFile parent = new DirFile( temp.getParent());
java/engine/org/apache/derby/impl/io/DirFile.java,102,        temp.delete();
java/engine/org/apache/derby/impl/io/DirFile.java,103,
java/engine/org/apache/derby/impl/io/DirFile.java,104,  return parent;
java/engine/org/apache/derby/impl/io/DirFile.java,105, } // End of getTempDir
java/engine/org/apache/derby/impl/io/DirFile.java,106,
java/engine/org/apache/derby/impl/io/DirFile.java,118,        return new FileOutputStream( (File) this);
java/engine/org/apache/derby/impl/io/DirFile.java,136,"        return new FileOutputStream( getPath(), append);"
java/engine/org/apache/derby/impl/io/DirFile.java,160,    public synchronized int getExclusiveFileLock()
java/engine/org/apache/derby/impl/io/DirFile4.java,118,    public synchronized int getExclusiveFileLock()
java/engine/org/apache/derby/impl/io/DirFile4.java,179,"   // do nothing - it may be read only medium, who knows what the"
java/engine/org/apache/derby/impl/io/InputStreamFile.java,372,    public int getExclusiveFileLock()
java/engine/org/apache/derby/impl/io/vfmem/VirtualFile.java,322,    public int getExclusiveFileLock() {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,154,     boolean created = home.mkdir() || home.mkdirs();
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,97,                                rootDir.mkdirs();
java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,433,
java/engine/org/apache/derby/impl/services/stream/SingleStream.java,28,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/services/stream/SingleStream.java,30,import org.apache.derby.iapi.services.monitor.ModuleSupportable;
java/engine/org/apache/derby/impl/services/stream/SingleStream.java,343,  hpw.printlnWithHeader(t.toString());
java/engine/org/apache/derby/impl/store/raw/RawStore.java,60,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,61,import org.apache.derby.iapi.services.property.PropertyUtil;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,64,import org.apache.derby.iapi.util.StringUtil;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,72,import java.security.PrivilegedExceptionAction;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,79,import java.io.FileOutputStream;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,80,import java.io.FileInputStream;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,81,import java.io.IOException;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2442,        catch( PrivilegedActionException pae) { return false;} // does not throw an exception
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2507,        catch( PrivilegedActionException pae) { return false;} // does not throw an exception
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2579,        catch( PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2603,        catch( PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2619,    public final Object run() throws IOException
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2641,            return ReuseFactory.getBoolean(actionRegularFile.mkdirs());
java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java,1657,"                 return actionFile.getRandomAccessFile(""rw"");"
java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java,1181,            return ReuseFactory.getBoolean(actionStorageFile.mkdirs());
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3001,"  long instant = LogCounter.makeLogInstantAsLong(filenumber,"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3002,                LOG_FILE_HEADER_SIZE);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3003,  return getLogFileAtPosition(instant);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3004, }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3007, /**
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3008,  Get a read-only handle to the log file positioned at the stated position
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3010,  <P> MT- read only
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3012,  @return null if file does not exist or of the wrong format
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3013,  @exception IOException cannot access the log at the new position.
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3014,  @exception StandardException Standard Derby error policy
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3015, */
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3016, protected StorageRandomAccessFile getLogFileAtPosition(long logInstant)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,3017,"   throws IOException, StandardException"
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,5711,        }
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,5760, public final Object run() throws IOException {
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,5771,   return activeFile.getRandomAccessFile(activePerms);
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,5777,   return ReuseFactory.getBoolean(activeFile.mkdirs());
java/engine/org/apache/derby/io/StorageFile.java,256,    public int getExclusiveFileLock();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/_Suite.java,46,    public static Test suite() {
java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java,28,import java.io.FileOutputStream;
java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java,29,import java.io.FileInputStream;
java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java,32,import java.io.RandomAccessFile;
java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java,325,    public synchronized int getExclusiveFileLock()
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,713,     * @param dbName We sometimes need to know outside to be able topass it on
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1049,        this.hostName = null;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,541,     * @param the current test
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,543,     * @param NEGATIVE or POSITIVE
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,557,"     * Same as {@link #checkAccessToOwner(BaseJDBCTestCase, File)"
java/drda/org/apache/derby/drda/NetworkServerControl.java,336,     server.consoleExceptionPrint(e);
java/drda/org/apache/derby/drda/NetworkServerControl.java,336,     server.consoleExceptionPrintTrace(e);
java/drda/org/apache/derby/drda/NetworkServerControl.java,306,"                System.setProperty(Property.SERVER_STARTED_FROM_CMD_LINE,"
java/drda/org/apache/derby/drda/NetworkServerControl.java,307,"                                   ""true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,96,"        String expected = ""[Unable to get driver level from sysinfo]"";"
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,97,        // Get the expected value from sysinfo
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,98,        BufferedReader sysinfoOutput = Utilities.getSysinfoFromServer();
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,99,        String line = null;
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,100,        while ((line = sysinfoOutput.readLine()) != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,101,            /* Looking for:
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,102,             *--------- Derby Information --------
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,103,             *JRE - JDBC: J2SE 5.0 - JDBC 3.0
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,104,             *            ^^^^^^^^^^^^^^^^^^^
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,105,             * (actual JRE/JDBC values may vary)*/
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,106,"            if (line.matches(""^JRE - JDBC: .*"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,107,"                expected = line.substring(line.indexOf("": "") + 2);"
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,108,            }
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,109,        }
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,110,
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,111,        // test the attribute value against the expected value
java/testing/org/apache/derbyTesting/functionTests/tests/management/JDBCMBeanTest.java,112,"        assertStringAttribute(expected,getJdbcMBeanObjectName(), ""DriverLevel"");"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,513,   if (isJCC)
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,514,    return (XADataSource)
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,515,"     (Class.forName(""com.ibm.db2.jcc.DB2XADataSource"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,516,   else if (isNetClient){
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,517,                            if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,518,                                //running under jdk1.6 or higher
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,519,                                // try instantiating EmbeddedXADataSource40
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,520,                                try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,521,                                    return (XADataSource)(Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,522,"                                        ""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,523,"                                        ""ClientXADataSource40"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,524,                                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,525,                                catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,526,                                    //probably it was not compiled with jdbc4.0
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,527,                                    //support go ahead with EmbeddedXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,528,                                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,529,                            }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,530,                            return (XADataSource) (Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,531,"                                    ""org.apache.derby.jdbc.ClientXADataSource"""
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,532,                                    ).newInstance());
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,533,                        }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,534,   else {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,535,                            if (JVMInfo.JDK_ID >= JVMInfo.J2SE_16) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,536,                                //running under jdk1.6 or higher
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,537,                                // try instantiating EmbeddedXADataSource40
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,538,                                try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,539,                                    return (XADataSource)(Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,540,"                                        ""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,541,"                                        ""EmbeddedXADataSource40"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,542,                                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,543,                                catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,544,                                    //probably it was not compiled with jdbc4.0
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,545,                                    //support go ahead with EmbeddedXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,546,                                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,547,                            }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,548,"                            return (XADataSource)(Class.forName(""org.apache.derby.jdbc.EmbeddedXADataSource"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,549,                        }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,550,  }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,551,  catch(ClassNotFoundException cnfe) {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,223,"   localAW.println(""JRE - JDBC: "" + org.apache.derby.iapi.services.info.JVMInfo.derbyVMLevel());"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,224,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,40,import junit.framework.Assert;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,94,"                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,113,        TestSuite totalSuite = new TestSuite();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,180,        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,181,"            this, derbydotlog, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,188,        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,189,"            this, derbyDbDir, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,197,"            this, servProp, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,209,"            this, tmp, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,217,        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,218,"            this, dbLck, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,221,            checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,222,"                    this, dbexLck, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,231,"            this, seg0, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,239,"            this, seg0, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,258,        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,259,"            this, exp, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,285,        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,286,"            this, exp2, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,288,        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,289,"            this, expLob, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,321,"            this, seg0, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,348,"            this, seg0, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,377,"            this, fbd, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,393,"            this, db, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,406,"            this, newDb, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,445,"            this, jarsDir, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,464,"            this, traceDirF, true, POSITIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,482,"            this, traceDirF, true, NEGATIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,491,        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,492,"            this, derbydotlogF, NEGATIVE);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,526,    private static Method permissions;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,527,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,541,     * @param test the current test
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,548,"            BaseJDBCTestCase test,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,552,"        checkAccessToOwner(test, file, false, expectedOutcome);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,561,     * @param test
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,569,"            final BaseJDBCTestCase test,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,577,"            checkAccessToOwner(test, file, false, expectedOutcome);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,584,"                            test, files[i], false, expectedOutcome);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,594,                    public Object run() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,595,                        // lazy initialization
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,596,                        if (!initialized) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,597,                            initialized = true;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,598,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,599,"                            // If found, we have >= Java 7."
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,600,                            filesClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,601,"                                ""java.nio.file.Files"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,602,                            pathClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,603,"                                ""java.nio.file.Path"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,604,                            pathsClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,605,"                                ""java.nio.file.Paths"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,606,                            aclEntryClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,607,"                                ""java.nio.file.attribute.AclEntry"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,608,                            aclFileAttributeViewClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,609,"                                ""java.nio.file.attribute."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,610,"                                ""AclFileAttributeView"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,611,                            posixFileAttributeViewClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,612,"                                ""java.nio.file.attribute."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,613,"                                ""PosixFileAttributeView"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,614,                            userPrincipalClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,615,"                                ""java.nio.file.attribute.UserPrincipal"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,616,                            linkOptionArrayClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,617,"                                ""[Ljava.nio.file.LinkOption;"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,618,                            linkOptionClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,619,"                                ""java.nio.file.LinkOption"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,620,                            stringArrayClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,621,"                                ""[Ljava.lang.String;"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,622,                            aclEntryBuilderClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,623,"                                ""java.nio.file.attribute.AclEntry$Builder"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,624,                            aclEntryTypeClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,625,"                                ""java.nio.file.attribute.AclEntryType"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,626,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,627,                            get = pathsClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,628,"                                getMethod(""get"","
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,629,"                                          new Class[]{String.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,630,                                                      stringArrayClz});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,631,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,632,                            getFileAttributeView = filesClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,633,"                                getMethod(""getFileAttributeView"","
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,634,"                                          new Class[]{pathClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,635,"                                                      Class.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,636,                                                      linkOptionArrayClz});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,637,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,638,                            getOwner = filesClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,639,                                getMethod(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,640,"                                    ""getOwner"","
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,641,"                                    new Class[]{pathClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,642,                                                linkOptionArrayClz});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,643,                            getAcl = aclFileAttributeViewClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,644,"                                getMethod(""getAcl"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,645,                            principal = aclEntryClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,646,"                                getMethod(""principal"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,647,                            getName = userPrincipalClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,648,"                                getMethod(""getName"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,649,                            permissions = aclEntryClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,650,"                                getMethod(""permissions"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,651,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,652,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,653,"                        // Only used with expectedOutcome == UNKNOWN, otherwise"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,654,                        // we throw:
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,655,                        boolean someThingBeyondOwnerFound = false;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,656,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,657,"                        // We have Java 7. We need to call reflectively, since"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,658,                        // the source level isn't yet at Java 7.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,659,                        try {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,660,                            Object fileP = get.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,661,"                                null, new Object[]{file.getPath(),"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,662,                                                   new String[]{}});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,663,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,664,                            Object view = getFileAttributeView.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,665,"                                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,666,                                new Object[]{
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,667,"                                    fileP,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,668,"                                    aclFileAttributeViewClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,669,"                                    Array.newInstance(linkOptionClz, 0)});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,670,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,671,                            if (view == null) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,672,                                // ACLs not supported on this platform
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,673,                                fail();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,674,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,675,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,676,"                            // If we have a posix view, we can use ACLs to"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,677,                            // interface the usual Unix permission masks via
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,678,"                            // the special principals OWNER@, GROUP@ and"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,679,                            // EVERYONE@
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,680,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,681,                            Object posixView = getFileAttributeView.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,682,"                                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,683,                                new Object[]{
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,684,"                                    fileP,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,685,"                                    posixFileAttributeViewClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,686,"                                    Array.newInstance(linkOptionClz, 0)});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,695,"                                (List)getAcl.invoke(view, (Object[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,713,                                        Set s = (Set)permissions.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,744,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,745,                            if (expectedOutcome == NEGATIVE &&
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,746,                                    !someThingBeyondOwnerFound) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,747,                                fail(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,748,"                                    ""unexpected restrictive access: "" + file);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,749,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,750,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,751,                        } catch (IllegalAccessException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,752,                            // coding error
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,753,                            if (SanityManager.DEBUG) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,754,                                SanityManager.THROWASSERT(e);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,755,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,756,                        } catch (IllegalArgumentException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,757,                            // coding error
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,758,                            if (SanityManager.DEBUG) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,759,                                SanityManager.THROWASSERT(e);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,761,                        } catch (InvocationTargetException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,762,                            throw e;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,765,                        if (test != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,766,"                            test.println(""checked perms on: "" + file);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,769,                        if (expectedOutcome == UNKNOWN &&
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,770,                                someThingBeyondOwnerFound) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,771,                            return Boolean.TRUE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,772,                        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,773,                            return Boolean.FALSE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,775,                    }});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,546,"     * @see #checkAccessToOwner(BaseJDBCTestCase, File, boolean, int)"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,558,"     * Same as {@link #checkAccessToOwner(BaseJDBCTestCase, File, int)"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,559,"     * checkAccessToOwner}, but if {@code doContents} is true, also check files"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,560,     * directly contained in this file qua directory (not recursively).
java/drda/org/apache/derby/drda/NetworkServerControl.java,307,            if (command == NetworkServerControlImpl.COMMAND_START) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,657,            // running with the network server started from the command line.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,658,            if ( !PropertyUtil.getSystemBoolean(
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,659,"                    Property.SERVER_STARTED_FROM_CMD_LINE, false)) {"
java/testing/org/apache/derbyTesting/perf/clients/Runner.java,96,"            System.out.println(""initializing database..."");"
java/testing/org/apache/derbyTesting/perf/clients/Runner.java,262,
java/testing/org/apache/derbyTesting/perf/clients/SequenceGeneratorConcurrency.java,35, * Machinery to test the concurrency of sequence generators.
java/testing/org/apache/derbyTesting/perf/clients/SequenceGeneratorConcurrency.java,121,"                runDDL( conn, ""create sequence "" + makeSequenceName( sequence ) );"
java/testing/org/apache/derbyTesting/perf/clients/SequenceGeneratorConcurrency.java,125,"                    runDDL( conn, ""create table "" + makeTableName( sequence, table ) + ""( a int )"" );"
java/testing/org/apache/derbyTesting/perf/clients/SequenceGeneratorConcurrency.java,198,"                    if ( table == 0 ) { ps = prepareStatement( _conn, debugging, valuesClause ); }"
java/testing/org/apache/derbyTesting/perf/clients/SequenceGeneratorConcurrency.java,199,"                    else { ps = prepareStatement( _conn, debugging, ""insert into "" + tableName + ""( a ) "" + valuesClause ); }"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,715,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,716,                    get = pathsClz.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,717,"                        getMethod(""get"","
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,718,"                                  new Class[]{String.class, stringArrayClz});"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,719,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,720,                    getFileAttributeView = filesClz.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,721,"                        getMethod(""getFileAttributeView"","
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,722,"                                  new Class[]{pathClz,"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,723,"                                              Class.class,"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,724,                                              linkOptionArrayClz});
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,725,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,882,                // ACLs not supported on this platform
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,642,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,707,"                        if (aclView != null) { // Windows, Solaris 11"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,755,                    e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java,250,            if (isPhoneME()) {
java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java,251,                // DERBY-5412: phoneME fails after some iterations because the
java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java,252,                // number of class names exceeds a VM limit. If we invoke
java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java,253,"                // garbage collection manually, it seems to be able to reclaim"
java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java,254,"                // the classes that are no longer in use, and complete the test."
java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java,255,                Runtime.getRuntime().gc();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/MemoryLeakFixesTest.java,256,            }
java/engine/org/apache/derby/impl/sql/execute/rts/ResultSetStatistics.java,3,   Derby - Class org.apache.derby.impl.sql.execute.rts.ResultSetStatistics
java/engine/org/apache/derby/impl/sql/execute/rts/ResultSetStatistics.java,22,package org.apache.derby.impl.sql.execute.rts;
java/engine/org/apache/derby/iapi/sql/execute/ResultSetStatisticsFactory.java,31,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINVisitor.java,28,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java,109,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINDefaultVisitor.java,33,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINSystemTableVisitor.java,48,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/testing/org/apache/derbyTesting/unitTests/lang/EmptyResultSetStatisticsFactory.java,39,import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,26,/* Strictly speaking we shouldn't import classes under the impl hierarchy here
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,27, * but this is work in progress.
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,28, * manish - Wed Mar 28 13:05:19 PST 2001
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,29, */
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,30,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,31,
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,59," public StatementNode parseStatement(String statementSQLText,"
java/engine/org/apache/derby/iapi/sql/compile/Parser.java,64, public StatementNode parseStatement(String statementSQLText)
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,41,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,42,
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,1293,"   StatementNode actionStmt,"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,44,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,373,   StatementNode stmtnode = (StatementNode)pa.parseStatement(triggerDefinition);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,330,"    StatementNode qt = p.parseStatement(statementText, paramDefaults);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,75,import org.apache.derby.impl.sql.compile.FromBaseTable;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,76,import org.apache.derby.impl.sql.compile.QueryTreeNode;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,77,import org.apache.derby.impl.sql.compile.StatementNode;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4753,"   StatementNode actionStmt,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,24,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,27,import java.util.HashSet;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,549,  StatementNode qt = p.parseStatement(select);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1397,  StatementNode qt = p.parseStatement(select);
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,36,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,37,
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,39,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,45,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,46,
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,259,  StatementNode qt = p.parseStatement(values);
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,24,import org.apache.derby.impl.sql.compile.QueryTreeNode;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,25,import org.apache.derby.iapi.sql.compile.Parser;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,26,import org.apache.derby.iapi.sql.Statement;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,31,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,76, public StatementNode parseStatement(String statementSQLText)
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,129," public StatementNode parseStatement(String statementSQLText, Object[] paramDefaults)"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,40,import org.apache.derby.iapi.services.io.StoredFormatIds;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,786,   return p.parseStatement(sql);
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,24,import org.apache.derby.iapi.services.context.ContextManager;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,37,import org.apache.derby.iapi.sql.compile.RowOrdering;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,47,import org.apache.derby.iapi.sql.execute.ExecutionContext;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,48,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,49,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,51,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,54,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,55,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,56,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,60,import org.apache.derby.iapi.services.loader.GeneratedMethod;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,61,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,67,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,68,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,69,
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,75,import java.util.Properties;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1245,  StatementNode qt = p.parseStatement(values);
java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java,68,import org.apache.derby.impl.sql.compile.StatementNode;
java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java,492,"   StatementNode actionStmt,"
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,29,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,32,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/ColPermsDescriptor.java,169,     return new DDdependableFinder(StoredFormatIds.COLUMNS_PERMISSION_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java,32,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java,33,import org.apache.derby.iapi.sql.dictionary.PrivilegedSQLObject;
java/engine/org/apache/derby/iapi/sql/dictionary/PermDescriptor.java,212,        return new DDdependableFinder(StoredFormatIds.PERM_DESCRIPTOR_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/RoleGrantDescriptor.java,33,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/RoleGrantDescriptor.java,212,        return new DDdependableFinder(StoredFormatIds.ROLE_GRANT_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,30,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,31,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/RoutinePermsDescriptor.java,166,     return new DDdependableFinder(StoredFormatIds.ROUTINE_PERMISSION_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java,37,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java,308,        return new DDdependableFinder(StoredFormatIds.SEQUENCE_DESCRIPTOR_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,29,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,31,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/TablePermsDescriptor.java,186,     return new DDdependableFinder(StoredFormatIds.TABLE_PERMISSION_FINDER_V01_ID);
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,24,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,25,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,26,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,30,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,31,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,32,// is it OK to do this?
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,33,import org.apache.derby.impl.sql.catalog.DDdependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,34,import org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,35,
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,101, public DependableFinder getDependableFinder(int formatId)
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,103,  return new DDdependableFinder(formatId);
java/engine/org/apache/derby/iapi/sql/dictionary/TupleDescriptor.java,109,"  return new DDColumnDependableFinder(formatId, columnBitMap);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,24,import java.util.Properties;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,25,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,28,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,29,import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,30,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,38,import org.apache.derby.impl.sql.compile.ResultColumnList;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,39,import org.apache.derby.impl.sql.compile.ResultSetNode;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,576,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,577, /**
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,578,  * Get one of the several types of create alias nodes. Carved out of parser
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,579,  * so this could be used by ALTER PUBLICATION.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,580,  *
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,581,  * @param aliasName    The name of the alias
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,582,  * @param targetName   The full path/method name
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,583,"  * @param aliasSpecificInfo The full path of the target method name,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,584,  *        if any
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,585,  * @param aliasType The type of alias to create
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,586,  * @param delimitedIdentifier Whether or not to treat the class name
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,587,  *        as a delimited identifier if trying to
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,588,  *        resolve it as a class alias.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,589,  * @param cm   A ContextManager
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,590,  *
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,591,  * @return A CreateAliasNode matching the given parameters
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,592,  *
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,593,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,594,  */
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,595, public abstract QueryTreeNode
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,596, getCreateAliasNode(
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,597,"  Object aliasName,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,598,"  Object targetName,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,599,"  Object aliasSpecificInfo,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,600,"  char aliasType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,601,"  Boolean delimitedIdentifier,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,602,  ContextManager cm)
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,603,  throws StandardException;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,604,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,605,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,606, /**
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,607,  * Return a correctly configured node that represents
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,608,  * a scan from a VTI dervied from the TableDesciptor.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,609,  * Used to convert from system diagnostic tables
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,610,  * to VTI scans.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,611,  * @param td Table that is really a vti
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,612,  * @param correlationName Correlation name of table clause
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,613,  * @param resultColumns Columns extracted from table.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,614,  * @param tableProperties Properties being passed onto the table scan
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,615,  * @param cm Current context manager
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,616,  */
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,617, public abstract ResultSetNode mapTableAsVTI(
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,618,"   TableDescriptor td,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,619,"   String correlationName,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,620,"   ResultColumnList resultColumns,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,621,"   Properties tableProperties,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,622,   ContextManager cm) throws StandardException;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,623,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,625,
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,81,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,82,import java.util.Properties;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,83,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,84,import java.util.HashSet;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,85,import java.util.Iterator;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,86,import java.util.Set;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2195,   ResultSetNode vtiNode = getNodeFactory().mapTableAsVTI(
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,32,import org.apache.derby.iapi.types.StringDataValue;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,36,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,37,
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,38,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,58,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,61,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,166,  * @param parameterList  A Vector of the parameters
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,170, public void addParms(Vector parameterList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,88,  addParms((Vector) params);
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,135,  addParms((Vector) params);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,25,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,37,import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,46,import org.apache.derby.catalog.AliasInfo;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,48,import org.apache.derby.iapi.util.StringUtil;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,78, private static final Vector emptyVector = new Vector(0);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,79,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,654,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,655,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,656, /**
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,657,  * Get one of the several types of create alias nodes. Carved out of parser
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,658,  * so this could be used by ALTER PUBLICATION.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,659,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,660,  * @param aliasName The name of the alias
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,661,  * @param targetName The full path/method name
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,662,"  * @param aliasSpecificInfo The full path of the target method name,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,663,  *        if any
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,664,  * @param aliasType The type of alias to create
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,665,  * @param delimitedIdentifier Whether or not to treat the class name
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,666,  *        as a delimited identifier if trying to
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,667,  *        resolve it as a class alias.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,668,  * @param cm   A ContextManager
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,669,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,670,  * @return A CreateAliasNode matching the given parameters
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,671,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,672,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,673,  */
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,674, public QueryTreeNode
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,675, getCreateAliasNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,676,"  Object aliasName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,677,"  Object targetName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,678,"  Object aliasSpecificInfo,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,679,"  char aliasType,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,680,"  Boolean delimitedIdentifier,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,681,  ContextManager cm)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,682,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,683, {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,684,  int nodeType;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,685,  String methodName = null;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,686,  String targetMethodName = null;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,687,  String targetClassName = null;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,688,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,689,  nodeType = C_NodeTypes.CREATE_ALIAS_NODE;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,690,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,691,  if (
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,692,            (aliasType != AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR) &&
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,693,            (aliasType != AliasInfo.ALIAS_TYPE_UDT_AS_CHAR)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,694,            )
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,695,  {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,696,         int lastPeriod;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,697,         String fullStaticMethodName = (String) targetName;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,698,         int paren = fullStaticMethodName.indexOf('(');
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,699,         if (paren == -1) {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,700,             // not a Java signature - split based on last period
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,701,             lastPeriod = fullStaticMethodName.lastIndexOf('.');
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,702,         } else {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,703,             // a Java signature - split on last period before the '('
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,704,"             lastPeriod = fullStaticMethodName.substring(0, paren).lastIndexOf('.');"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,705,         }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,706,         if (lastPeriod == -1 || lastPeriod == fullStaticMethodName.length()-1) {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,707,"             throw StandardException.newException(SQLState.LANG_INVALID_FULL_STATIC_METHOD_NAME, fullStaticMethodName);"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,708,         }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,709,"         String javaClassName = fullStaticMethodName.substring(0, lastPeriod);"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,710,         methodName = fullStaticMethodName.substring(lastPeriod + 1);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,711,   targetName = javaClassName;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,712,  }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,713,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,714,  return getNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,715,"   nodeType,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,716,"   aliasName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,717,"   targetName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,718,"   methodName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,719,"   aliasSpecificInfo,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,720,"   new Character(aliasType),"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,721,"   delimitedIdentifier,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,722,   cm );
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,723, }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,724,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,725, /**
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,726,  * Return a node that represents invocation of the virtual table
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,727,  * for the given table descriptor.  The mapping of the table descriptor
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,728,"  * to a specific VTI class name will occur as part of the ""init"""
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,729,  * phase for the NewInvocationNode that we create here.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,730,  * <P>
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,731,  * Currently only handles no argument vtis corresponding to a subset
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,732,  * of the diagnostic tables. (e.g. lock_table).
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,733,  * The node returned is a FROM_VTI node with a passed in NEW_INVOCATION_NODE
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,734,"  * representing the class, with no arguments."
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,735,  * Other attributes of the original FROM_TABLE node (such as resultColumns)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,736,  * are passed into the FROM_VTI node.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,737,  *
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,738,  */
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,739, public ResultSetNode mapTableAsVTI(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,740,"   TableDescriptor td,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,741,"   String correlationName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,742,"   ResultColumnList resultColumns,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,743,"   Properties tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,744,   ContextManager cm)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,745,  throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,746,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,747,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,748,  /* The fact that we pass a non-null table descriptor to the
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,749,   * following call is an indication that we are mapping to a
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,750,   * no-argument VTI.  Since we have the table descriptor we
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,751,   * do not need to pass in a TableName. See NewInvocationNode
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,752,   * for more.
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,753,   */
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,754,  QueryTreeNode newNode =
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,755,"   getNode(C_NodeTypes.NEW_INVOCATION_NODE,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,756,"    null, // TableName"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,757,"    td,     // TableDescriptor"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,758,"    emptyVector,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,759,"    Boolean.FALSE,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,760,    cm);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,761,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,762,   QueryTreeNode vtiNode;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,763,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,764,   if (correlationName != null)
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,765,   {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,766,"    vtiNode = getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,767,"      newNode,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,768,"      correlationName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,769,"      resultColumns,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,770,"      tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,771,      cm);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,772,   }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,773,   else
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,774,   {
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,775,"    TableName exposedName = newNode.makeTableName(td.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,776,      td.getDescriptorName());
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,777,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,778,"   vtiNode = getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,779,"      newNode,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,780,"      correlationName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,781,"      resultColumns,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,782,"      tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,783,"      exposedName,"
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,784,      cm);
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,785,  }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,786,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,787,  return (ResultSetNode) vtiNode;
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,788, }
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,790,
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,791,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,28,/* Strictly speaking we shouldn't import classes under the impl hierarchy here
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,29, * but this is work in progress.
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,30, * manish - Wed Mar 28 13:05:19 PST 2001
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,31, */
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,32,import org.apache.derby.impl.sql.compile.QueryTreeNode;
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,33,
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,66," public abstract QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,80," public final QueryTreeNode getNode(int nodeType, Object arg1, ContextManager cm)"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,83,"  QueryTreeNode retval = getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,102," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,108,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,128," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,135,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,156," public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,164,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,187," public QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,196,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,219," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,229,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,253," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,264,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,288," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,300,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,325," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,338,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,364," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,378,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,406," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,421,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,450," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,466,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,496," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,513,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,544," public final QueryTreeNode getNode(int nodeType,"
java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java,562,"  QueryTreeNode retval =  getNode(nodeType, cm);"
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,216,        QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,357,  QueryTreeNode cast = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,362,  return cast;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,405,   QueryTreeNode cast = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2412,        QueryTreeNode newNode =
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2413,"                getNodeFactory().getNode(C_NodeTypes.NEW_INVOCATION_NODE,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2423,"            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2433,"            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,676,                    getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,904,        QueryTreeNode maxWidthNode = getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java,136," public QueryTreeNode getNode(int nodeType, ContextManager cm)"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,72,public abstract class QueryTreeNode implements Visitable
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,616,        QueryTreeNode trueNode = nodeFactory.getNode(
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,27,import org.apache.derby.impl.sql.compile.PredicateList;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,27,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,29,import org.apache.derby.iapi.sql.StatementType;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,34,import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;
java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java,35,
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,28,import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,34,import org.apache.derby.iapi.services.context.ContextService;
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,35,
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,38,import org.apache.derby.iapi.sql.StatementType;
java/engine/org/apache/derby/iapi/sql/dictionary/ViewDescriptor.java,42,import org.apache.derby.impl.sql.execute.DropTriggerConstantAction;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,396,  if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,692,   if (!((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) (lcc.getDataDictionary())).readOnlyUpgrade) {
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,1103,  if (((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade)
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,558,   bootingDictionary.readOnlyUpgrade = true;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,431, public boolean readOnlyUpgrade;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10489,
java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java,310,  if (((DataDictionaryImpl) dd).readOnlyUpgrade) {
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,28,import org.apache.derby.iapi.error.ExceptionSeverity;
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,37,import java.sql.Driver;
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,38,import java.sql.DriverManager;
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,416,            String driverName =
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,417,"                ""org.apache.derby.jdbc.EmbeddedDriver"";"
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,418,
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,419,            Class.forName(driverName).newInstance();
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,420,
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,421,            Driver embedDriver =
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,422,                DriverManager.getDriver(Attribute.PROTOCOL);
java/engine/org/apache/derby/impl/db/SlaveDatabase.java,428,"            embedDriver.connect(conStr, (Properties) null);"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,26,import java.sql.Connection;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,27,import java.sql.DriverManager;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,41,    /**
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,42,     * The maximum length of the data returned from the BLOB stored procedures.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,43,     * <p>
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,44,     * This value is currently dictated by the maximum length of
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,45,"     * VARCHAR/VARBINARY, because these are the return types of the stored"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,46,     * procedures.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,47,     */
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,48,    public static final int MAX_BLOB_RETURN_LEN = Limits.DB2_VARCHAR_MAXWIDTH;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,49,
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,50,    /**
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,51,     * The maximum length of the data returned from the CLOB stored procedures.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,52,     * <p>
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,53,     * This value is currently dictated by the maximum length of
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,54,"     * VARCHAR/VARBINARY, because these are the return types of the stored"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,55,"     * procedures, and the modified UTF8 encoding used for CLOB data. This"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,56,"     * threshold value could be higher (equal to {@code MAX_BLOB_RETURN_LEN}),"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,57,     * but then the procedure fetching data from the CLOB must be rewritten to
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,58,     * have more logic.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,59,     * <p>
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,60,     * For now we use the defensive assumption that all characters are
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,61,     * represented by three bytes.
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,62,     */
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,63,    public static final int MAX_CLOB_RETURN_LEN = MAX_BLOB_RETURN_LEN / 3;
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,64,
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,177,"        len = Math.min(len, MAX_CLOB_RETURN_LEN);"
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,335,"        len = Math.min(len, MAX_BLOB_RETURN_LEN);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,178,// LOBStoredProcedure is imported only to get hold of a constant.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,179,import org.apache.derby.impl.jdbc.LOBStoredProcedure;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,180,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2586,"        TypeDescriptor     newReturnType = DataTypeDescriptor.getCatalogType( Types.VARCHAR, LOBStoredProcedure.MAX_CLOB_RETURN_LEN );"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12311,"                    LOBStoredProcedure.MAX_CLOB_RETURN_LEN),"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12507,"                    LOBStoredProcedure.MAX_BLOB_RETURN_LEN),"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,69,    // This flag is true unless the deregister attribute has been set to
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,70,    // false by the user (DERBY-2905)
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,71,    private static boolean deregister = true;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,252,            if (deregister && _autoloadedDriver != null) {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,258,                deregister = true;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,276,    /**
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,277,     * @param theValue set the deregister value
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,278,     */
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,279,    public static void setDeregister(boolean theValue) {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,280,        AutoloadedDriver.deregister = theValue;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,281,    }
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,282,
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,283,    /**
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,284,     * @return the deregister value
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,285,     */
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,286,    public static boolean getDeregister() {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,287,        return deregister;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,288,    }
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,289,
java/engine/org/apache/derby/jdbc/InternalDriver.java,233,                        AutoloadedDriver.setDeregister(deregister);
java/engine/org/apache/derby/jdbc/InternalDriver.java,637,}
java/engine/org/apache/derby/jdbc/InternalDriver.java,638,
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,142,     *      required (see {@link #MAX_CLOB_RETURN_LEN}).
java/engine/org/apache/derby/impl/jdbc/LOBStoredProcedure.java,297,     *      (see {@link #MAX_BLOB_RETURN_LEN}).
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,285,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,286,     * Checks if the statement is closed.
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,287,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,288,"     * @return <code>true</code> if the statement is closed,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,289,     * <code>false</code> otherwise
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,290,     * @exception SQLException if an error occurs
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,291,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,292,    public final boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,293,        return getCallableStatement().isClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,294,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,295,
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,84,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,85,     * Checks if the statement is closed.
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,86,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,87,"     * @return <code>true</code> if the statement is closed,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,88,     * <code>false</code> otherwise
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,89,     * @exception SQLException if an error occurs
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,90,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,91,    public final boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,92,        return getPreparedStatement().isClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,93,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,94,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,24,import org.apache.derby.iapi.reference.JDBC30Translation;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,27,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,28,import org.apache.derby.iapi.error.PublicAPI;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,29,import org.apache.derby.iapi.services.info.JVMInfo;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,38,import java.lang.reflect.*;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,39,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,555,     * Checks if the statement is closed. Not implemented for this
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,556,     * class since <code>isClosed()</code> is a new method in JDBC
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,557,     * 4.0. The JDBC 4.0 sub-classes should override this method.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,561,     * @exception SQLException not-implemented exception
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,563,    protected boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,564,        // Not implemented since we cannot forward the call to a JDBC
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,565,        // 4.0 method from this class. This dummy implementation is
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,566,        // provided here so that checkIfClosed() can be implemented
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,567,        // once in this class instead of once in each of the
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,568,        // Brokered*Statement40 classes.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,569,        throw Util.notImplemented();
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,43,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,44,     * Checks if the statement is closed.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,45,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,46,"     * @return <code>true</code> if the statement is closed,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,47,     * <code>false</code> otherwise
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,48,     * @exception SQLException if an error occurs
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,49,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,50,    public final boolean isClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,51,        return getStatement().isClosed();
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,52,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,53,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,27,import java.sql.Connection;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,36,//import org.apache.derby.impl.jdbc.EmbedConnection40;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,38,import org.apache.derby.impl.jdbc.EmbedConnection40;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,41,public class BrokeredConnection40 extends BrokeredConnection30 {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,359,            ((EmbedConnection40) getRealConnection()).abort( executor );
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,366,             return ((EmbedConnection40) getRealConnection()).getNetworkTimeout();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,376,"             ((EmbedConnection40) getRealConnection()).setNetworkTimeout( executor, milliseconds );"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java,39,public class EmbedConnection40 extends EmbedConnection30 {
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,34,import org.apache.derby.impl.jdbc.EmbedCallableStatement40;
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,36,public class BrokeredCallableStatement40 extends  BrokeredCallableStatement30{
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,444,"        return ((EmbedCallableStatement40) getCallableStatement()).getObject( parameterIndex, type );"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,450,"        return ((EmbedCallableStatement40) getCallableStatement()).getObject( parameterName, type );"
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,40,public class EmbedCallableStatement40 extends EmbedCallableStatement30 {
java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java,41,
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,681,    return ps;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,118,        // DERBY-2402 Client does not report added columns.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,119,        // Take out check when DERBY-2402 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,120,        if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,121,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,122,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,125,"        assertEquals(2, rsmd.getColumnCount());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,131,        // ResultSetMetaData for select * after alter table and
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,132,        // executeQuery.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,133,"        s.executeUpdate(""alter table bug4579 add column c13 int"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PrepStmtMetaDataTest.java,134,        ResultSet rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,203,        if (usingEmbedded()) // client/server doesn't keep cursor open.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,204,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,205,            rs = pSt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,206,"            JDBC.assertColumnNames(rs, new String[]{""C1"", ""C2""});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,207,"            JDBC.assertFullResultSet(rs, new String[][]{"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,208,"                        {""1"", null},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,209,"                        {""2"", null}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,210,                    });
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,211,        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,212,            rs = pSt.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,213,"            JDBC.assertColumnNames(rs, new String[]{""C1""});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,214,"            JDBC.assertFullResultSet(rs, new String[][]{{""1""}, {""2""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,215,        }
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,32,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,33,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,301,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java,302,                    interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,33,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,34,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,374,   throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,499,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,500,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,501,     * Checks if the connection is closed and throws an exception if
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,502,     * it is.
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,503,     *
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,504,     * @exception SQLException if the connection is closed
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,505,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,506,    protected final void checkIfClosed() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,507,        if (isClosed()) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,508,            throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,509,        }
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,510,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection30.java,29,import org.apache.derby.iapi.reference.JDBC30Translation;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,34,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,42,    public BrokeredConnection40(BrokeredConnectionControl control) {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,312,                throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,332,                throw Util.noCurrentConnection();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,338,"                throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,339,                        interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,30,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,31,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,100,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java,101,                    interfaces);
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,26,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,27,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,65,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,561,     * is. This method relies on the <code>isClosed()</code> method
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,562,     * and therefore only works with JDBC 4.0.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,570,"            throw Util.generateCsSQLException(SQLState.ALREADY_CLOSED,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,571,"                                              ""Statement"");"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,24,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,25,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,26,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,59,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement40.java,60,                    interfaces);
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,119,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,24,import org.apache.derby.iapi.error.ExceptionSeverity;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,57,import org.apache.derby.iapi.util.IdUtil;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,58,
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,24,import java.io.IOException;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,25,import org.apache.derby.iapi.error.ExceptionSeverity;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,26,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,29,import org.apache.derby.iapi.reference.MessageId;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,37,public class SQLExceptionFactory {
java/engine/org/apache/derby/jdbc/Driver20.java,27,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/jdbc/Driver20.java,29,import org.apache.derby.impl.jdbc.EmbedConnection;
java/engine/org/apache/derby/jdbc/Driver20.java,30,
java/engine/org/apache/derby/jdbc/Driver20.java,31,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/jdbc/Driver20.java,43,import java.sql.Connection;
java/engine/org/apache/derby/jdbc/Driver20.java,46,import java.sql.DriverManager;
java/engine/org/apache/derby/jdbc/Driver20.java,97, public abstract BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control);
java/engine/org/apache/derby/jdbc/Driver30.java,128, public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/Driver40.java,132,    public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
java/engine/org/apache/derby/jdbc/Driver40.java,133,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,187, final Connection getNewCurrentConnectionHandle() {
java/engine/org/apache/derby/jdbc/XAStatementControl.java,29,import org.apache.derby.iapi.jdbc.EngineStatement;
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,423,        throw new XAException(tranState.isPrepared
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,424,            ? XAException.XAER_NOTA
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,425,            : XAException.XAER_PROTO);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,57,        if (isIBMJVM()) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,58,            // DERBY-4463 test fails on IBM VM 1.5.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,59,            // It's fixed in IBM VM 1.6 SR9 and above.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,60,            // Remove this condition when that issue is solved in IBM VM 1.5 SR13.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,61,"            if (getSystemProperty(""java.version"").startsWith(""1.5.0""))"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,62,            {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,63,"                println(""Test skipped for this VM, cf. DERBY-4463"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,64,"                return new TestSuite(""empty LockInterruptTest"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,65,            }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,66,        }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/LockInterruptTest.java,67,
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,98,            // DERBY-4463 test fails on IBM VM 1.5.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,99,            // It's fixed in IBM VM 1.6 SR9 and above.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,100,            // Remove this condition when that issue is solved in IBM VM 1.5 SR13.
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,101,"            if (getSystemProperty(""java.version"").startsWith(""1.5.0""))"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,102,            {
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,103,"                println(""InterruptResilienceTest skipped for this VM, cf. DERBY-4463"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,104,                return new TestSuite(testName);
java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java,105,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,78,"        if (getSystemProperty(""os.name"").startsWith(""Windows"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,79,            /* Skip with IBM */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,80,            if (isIBMJVM()) return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,81,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,82,            /* Skip with Sun 1.4.2 */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,83,"            if (isSunJVM() && getSystemProperty(""java.version"").startsWith(""1.4.2"")) return;"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java,366,        assertTrue( newLastModified > lastModified );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java,384,        if ( shouldSucceed ) { assertTrue( newLastModified > oldLastModified ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java,385,        else { assertTrue( newLastModified == oldLastModified ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java,427,        assertTrue( newLastModified > oldLastModified );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java,440,        assertTrue( newerLastModified > newLastModified );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java,379,        Thread.sleep( 1L );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java,441,        Thread.sleep( 1L );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,30,import org.apache.derbyTesting.junit.BaseJDBCTestCase;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,31,import org.apache.derbyTesting.junit.DatabaseChangeSetup;
java/engine/org/apache/derby/impl/io/DirFile.java,233,     * Rename the file denoted by this name. Note that StorageFile objects are immutable. This method
java/engine/org/apache/derby/impl/io/DirFile.java,234,"     * renames the underlying file, it does not change this StorageFile object. The StorageFile object denotes the"
java/engine/org/apache/derby/impl/io/DirFile.java,235,"     * same name as before, however the exists() method will return false after the renameTo method"
java/engine/org/apache/derby/impl/io/DirFile.java,236,     * executes successfully.
java/engine/org/apache/derby/impl/io/DirFile.java,238,     *<p>It is not specified whether this method will succeed if a file already exists under the new name.
java/engine/org/apache/derby/impl/io/DirFile.java,246,        return super.renameTo( (File) newName);
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,250,"                    runningThread = new Thread(this, ""index-stat-thread"");"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,251,"                    // Make the thread a daemon thread, we don't want it to stop"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,252,                    // the JVM from exiting. This is a precaution.
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,253,                    runningThread.setDaemon(true);
java/testing/org/apache/derbyTesting/functionTests/tests/store/AutomaticIndexStatisticsTest.java,60,"    private static final String MASTERDB = ""masterDb"";"
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,73," public SecurityManagerSetup(Test test, String policyResource)"
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,76,  this.decoratorPolicyResource = policyResource;
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,116,  installSecurityManager(decoratorPolicyResource);
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,147,
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,148, private static void installSecurityManager(String policyFile)
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,149,    {
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,157,  SecurityManager sm = System.getSecurityManager();
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,158,  if (sm != null) {
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,168,   if ( newPolicyProperty.equals( oldPolicyProperty ) ) { return; }
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,189,                    SecurityManager sm = new SecurityManager();
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,190,                    System.setSecurityManager(sm);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java,2380,        insertDefaultData();
java/testing/org/apache/derbyTesting/functionTests/tests/store/AutomaticIndexStatisticsTest.java,60, // used also by Derby5582AutomaticIndexStatisticsTest so just protected
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1466,  * DERBY-4631: Wrong join column returned by right outer join with NATURAL
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1467,  *  or USING and territory-based collation
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1485,        //The join queries with ON clause are not impacted by DERBY-4631 and
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1526,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1542,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1557,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1594,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1602,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1610,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1629,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1640,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1650,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1659,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1667,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1675,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,1683,"  //Once DERBY-4631 is fixed, this query will run into compile time"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,481,"        assertEquals(0, spawned.complete(false));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Driver40UnbootedTest.java,151,"        assertEquals(0, spawned.complete(false));"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,774,            wrapper.complete(false);
java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java,207,                        spawnedServer.complete(true);
java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java,459,"                spawnedServer.complete(failedShutdown != null, getWaitTime());"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,29, * Handles the output streams (stderr and stdout) written
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,30, * by the process by spawning off background threads to read
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,31, * them into byte arrays. The class provides access to the
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,32," * output, typically called once the process is complete."
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,50,"        errSaver = streamSaver(javaProcess.getErrorStream(), name"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,52,"        outSaver = streamSaver(javaProcess.getInputStream(), name"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,57,     * Causes output obtained from the subprocess to be suppressed when
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,82,"     * That is, {@link #complete(boolean)} or {@link #complete(boolean, long)}"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,100,"     * That is, {@link #complete(boolean)} or {@link #complete(boolean, long)}"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,118,     * encoding which is assumed is how it was orginally
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,122,    public String getNextServerOutput() throws Exception
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,123,    {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,139,    public String getFailMessage(String reason) throws InterruptedException
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,140,    {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,141,        Thread.sleep(500);
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,172,     * Complete the process.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,173,"     * @param destroy true to destroy it, false to wait indefinitely to complete"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,175,"    public int complete(boolean destroy) throws InterruptedException, IOException {"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,176,"        return complete(destroy, -1L);"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,178,
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,180,     * Complete the process.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,181,"     * @param destroy True to destroy it, false to wait for it to complete"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,182,     * based on timeout.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,183,     *
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,184,     * @param timeout milliseconds to wait until finished or else destroy.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,185,     * -1 don't timeout
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,186,     *
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,188,"    public int complete(boolean destroy, long timeout) throws InterruptedException, IOException {"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,189,        int exitCode;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,190,        if (timeout >= 0 ) {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,191,            final long start = System.currentTimeMillis();
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,192,            boolean timedOut = true;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,193,            long totalwait = -1;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,194,            while (totalwait < timeout) {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,195,               try  {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,196,                   exitCode = javaProcess.exitValue();
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,197,"                   //if no exception thrown, exited normally"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,198,                   destroy = timedOut = false;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,199,                   break;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,200,               }catch (IllegalThreadStateException ite) {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,201,"                   // Ignore exception, it means that the process is running."
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,202,                   Thread.sleep(1000);
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,203,                   totalwait = System.currentTimeMillis() - start;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,204,               }
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,205,            }
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,206,"            // If we timed out, make sure we try to destroy the process."
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,207,            if (timedOut) {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,208,                destroy = true;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,210,     }
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,211,        if (destroy)
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,212,            javaProcess.destroy();
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,214,        exitCode = javaProcess.waitFor();
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,216,        // The process has completed. Wait until we've read all output.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,217,        outSaver.thread.join();
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,218,        errSaver.thread.join();
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,220,        synchronized (this) {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,222,            // Always write the error
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,223,            ByteArrayOutputStream err = errSaver.stream;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,224,            if (!suppressOutput && err.size() != 0) {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,225,"                System.err.println(""START-SPAWNED:"" + name + "" ERROR OUTPUT:"");"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,226,                err.writeTo(System.err);
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,227,"                System.err.println(""END-SPAWNED  :"" + name + "" ERROR OUTPUT:"");"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,228,            }
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,230,            // Only write the error if it appeared the server
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,231,            // failed in some way.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,232,            ByteArrayOutputStream out = outSaver.stream;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,233,            if (!suppressOutput && (destroy || exitCode != 0) &&
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,234,                    out.size() != 0) {
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,235,"                System.out.println(""START-SPAWNED:"" + name"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,236,"                        + "" STANDARD OUTPUT: exit code="" + exitCode);"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,237,                out.writeTo(System.out);
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,238,"                System.out.println(""END-SPAWNED  :"" + name"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,239,"                        + "" STANDARD OUTPUT:"");"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,242,
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,243,        return exitCode;
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,260,"    private StreamSaver streamSaver(final InputStream in,"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,30,import junit.framework.TestSuite;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,105,        /*
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,106,         * IBM's jvms on iseries have a bug that causes this fixture to fail
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,107,"         * and leave behind a hard-to-remove file, see DERBY-4149."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,108,         * Skip on that O.S.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,109,         */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,110,"        if (getSystemProperty(""os.name"").startsWith(""OS/400"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,111,"            return(new TestSuite (""emtpy InternationalConnectSimpleDSTest""));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectSimpleDSTest.java,112,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,86,        /*
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,87,         * IBM's jvms on iseries have a bug that causes this fixture to fail
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,88,"         * and leave behind a hard-to-remove file, see DERBY-4149."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,89,         * Skip on that O.S.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,90,         */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,91,"        if (getSystemProperty(""os.name"").startsWith(""OS/400"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,92,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,93,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,94,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,150,    public void testDriverManagerConnect() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,151,        /*
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,152,         * IBM's jvms on iseries have a bug that causes this fixture to fail
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,153,"         * and leave behind a hard-to-remove file, see DERBY-4149."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,154,         * Skip on that O.S.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,155,         */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,156,"        if (getSystemProperty(""os.name"").startsWith(""OS/400"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,157,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,158,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,159,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,200,    public void testXADSConnect() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,201,        /*
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,202,         * IBM's jvms on iseries have a bug that causes this fixture to fail
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,203,"         * and leave behind a hard-to-remove file, see DERBY-4149."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,204,         * Skip on that O.S.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,205,         */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,206,"        if (getSystemProperty(""os.name"").startsWith(""OS/400"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,207,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,208,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,209,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,241,        /*
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,242,         * IBM's jvms on iseries have a bug that causes this fixture to fail
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,243,"         * and leave behind a hard-to-remove file, see DERBY-4149."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,244,         * Skip on that O.S.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,245,         */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,246,"        if (getSystemProperty(""os.name"").startsWith(""OS/400"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,247,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,248,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,249,
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,102,            // Print a notice to stderr.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,314,        cleanupProcess();
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,370,            // Print a notice to stderr.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,500,"                        ""DEBUG: Faild to destroy process '"" + name + ""'"");"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,1917,        sb.append(test.getName());
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,101,
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,102,            // DERBY-3993
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,103,            // make sure any observer that may have been added by either
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,104,            // dropContainer() or dropStreamContainer() is also handled.
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,105,            // The calling notifyObservers() call from Xact.doComplete()
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,106,"            // may not ""see"" new observers added during processing of the"
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,107,            // initial observer list.
java/engine/org/apache/derby/impl/store/raw/data/DropOnCommit.java,108,            xact.notifyObservers(arg);
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1963,  // notify any of our observers that we are completing.
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1964,  notifyObservers(commitOrAbort);
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1965,
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1966,  checkObserverException();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1967,
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1968,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1970,   if (countObservers() != 0)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1971,            {
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1972,                SanityManager.THROWASSERT(
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1973,"                    ""There should be 0 observers, but we still have """
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1974,"     + countObservers() + "" observers."");"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1975,            }
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,1976,  }
java/testing/org/apache/derbyTesting/junit/Decorator.java,65,"        attributes.setProperty(""bootPassword"", getBootPhrase(16));"
java/testing/org/apache/derbyTesting/junit/Decorator.java,69,
java/testing/org/apache/derbyTesting/junit/Decorator.java,91,"        attributes.setProperty(""bootPassword"", getBootPhrase(64));"
java/testing/org/apache/derbyTesting/junit/Decorator.java,96,
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,240,    resultRows = new ExecIndexRow[order.length+1];
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,327,   int numDistinctAggs = 0;
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,328,   for (int i = 0; i < aggregates.length; i++)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,329,   {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,330,    AggregatorInfo aInfo = (AggregatorInfo)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,331,     aggInfoList.elementAt(i);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,332,    if (aInfo.isDistinct())
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,333,     numDistinctAggs++;
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,334,   }
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,341,   if (order.length > numDistinctAggs)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,342,   {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,343,    ColumnOrdering[] newOrder = new ColumnOrdering[
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,344,     order.length - numDistinctAggs];
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,345,"    System.arraycopy(order, 0, newOrder, 0,"
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,346,     order.length-numDistinctAggs);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,347,    order = newOrder;
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,348,   }
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,412,        distinguisherCol == order.length);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,489,  for (int index = 0; index < order.length; index++)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,498,  return order.length;
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,653,   int rolledUpColIdx = order.length - 1 - i;
java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java,46,"Test to reproduce DERBY-5624, An expanding update fails with an nospc.U error."
java/testing/org/apache/derbyTesting/functionTests/tests/largedata/Derby5624Test.java,122,        // verify access to table
java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java,35,     * Suite runs first the lite suite for both embedded and client with LobLimitsLiteTest
java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java,43,        suite.addTest(Derby5624Test.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java,47,
java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java,49,
java/testing/org/apache/derbyTesting/functionTests/tests/largedata/_Suite.java,50,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,24,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,36,import java.net.URL;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,37,import java.util.Enumeration;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,46,public final class FileMonitor extends BaseMonitor implements java.security.PrivilegedExceptionAction
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,193, private int action;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,194, private String key3;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,195, private Runnable task;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,196, private int intValue;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,197,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,201, synchronized final boolean initialize(boolean lite)
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,203,  action = lite ? 0 : 1;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,204,  try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,205,   Object ret = java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,206,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,207,   return ((Boolean) ret).booleanValue();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,208,        } catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,209,   throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,210,  }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,213, synchronized final Properties getDefaultModuleProperties() {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,214,  action = 2;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,215,   try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,216,   return (Properties) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,217,        } catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,218,           throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,219,        }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,222, public synchronized final String getJVMProperty(String key) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,226,  try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,227,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,228,   action = 3;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,229,   key3 = key;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,230,   String value  = (String) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,231,   key3 = null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,232,   return value;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,233,        } catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,234,   throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,235,  }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,238," public synchronized final Thread getDaemonThread(Runnable task, String name, boolean setMinPriority) {"
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,239,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,240,  action = 4;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,241,  key3 = name;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,242,  this.task = task;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,243,  this.intValue = setMinPriority ? 1 : 0;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,244,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,245,  try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,246,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,247,   Thread t = (Thread) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,248,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,249,   key3 = null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,250,   task = null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,251,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,252,   return t;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,253,        } catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,254,   throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,255,  }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,256, }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,258, public synchronized final void setThreadPriority(int priority) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,259,  action = 5;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,260,  intValue = priority;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,261,  try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,262,   java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,263,        } catch (java.security.PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,264,   throw (RuntimeException) pae.getException();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,265,  }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,268, synchronized final InputStream applicationPropertiesStream()
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,270,  action = 6;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,273,   return (InputStream) java.security.AccessController.doPrivileged(this);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,281,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,282, public synchronized final Object run() throws IOException {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,283,  switch (action) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,284,  case 0:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,285,  case 1:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,286,"   // SECURITY PERMISSION - OP2, OP2a, OP2b"
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,287,   return new Boolean(PBinitialize(action == 0));
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,288,  case 2:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,289,   // SECURITY PERMISSION - IP1
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,290,   return super.getDefaultModuleProperties();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,291,  case 3:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,292,   // SECURITY PERMISSION - OP1
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,293,   return PBgetJVMProperty(key3);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,294,  case 4:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,295,        {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,296,            boolean setMinPriority = (intValue != 0);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,297,            try {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,298,"                return super.getDaemonThread(task, key3, setMinPriority);"
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,299,            } catch (IllegalThreadStateException e) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,300,                // We may get an IllegalThreadStateException if all the
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,301,                // previously running daemon threads have completed and the
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,302,                // daemon group has been automatically destroyed. If that's
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,303,"                // what has happened, create a new daemon group and try again."
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,304,                if (daemonGroup != null && daemonGroup.isDestroyed()) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,305,                    daemonGroup = createDaemonGroup();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,306,"                    return super.getDaemonThread(task, key3, setMinPriority);"
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,307,                } else {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,308,                    throw e;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,309,                }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,310,            }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,311,        }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,312,  case 5:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,313,   super.setThreadPriority(intValue);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,314,   return null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,315,  case 6:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,316,   // SECURITY PERMISSION - OP3
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,317,   return PBapplicationPropertiesStream();
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,318,
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,319,  default:
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,320,   return null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,321,  }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,322, }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,323,
java/engine/org/apache/derby/catalog/UUID.java,51, /**
java/engine/org/apache/derby/catalog/UUID.java,52,     Produce a byte array representation of this UUID
java/engine/org/apache/derby/catalog/UUID.java,53,  which can be passed to UUIDFactory.recreateUUID later
java/engine/org/apache/derby/catalog/UUID.java,54,  on to reconstruct it.
java/engine/org/apache/derby/catalog/UUID.java,55, */
java/engine/org/apache/derby/catalog/UUID.java,56, byte[] toByteArray();
java/engine/org/apache/derby/catalog/UUID.java,57,
java/engine/org/apache/derby/catalog/UUID.java,64,
java/engine/org/apache/derby/catalog/UUID.java,65, /**
java/engine/org/apache/derby/catalog/UUID.java,66,   Create a hex string representation of this UUID.
java/engine/org/apache/derby/catalog/UUID.java,67,   */
java/engine/org/apache/derby/catalog/UUID.java,68, String toHexString();
java/engine/org/apache/derby/iapi/services/uuid/UUIDFactory.java,68,
java/engine/org/apache/derby/iapi/services/uuid/UUIDFactory.java,69, /**
java/engine/org/apache/derby/iapi/services/uuid/UUIDFactory.java,70,   Recreate a UUID from a byte array produced by UUID.toByteArray.
java/engine/org/apache/derby/iapi/services/uuid/UUIDFactory.java,71,   @return  The UUID.
java/engine/org/apache/derby/iapi/services/uuid/UUIDFactory.java,72,   @see UUID#toByteArray
java/engine/org/apache/derby/iapi/services/uuid/UUIDFactory.java,73, **/
java/engine/org/apache/derby/iapi/services/uuid/UUIDFactory.java,74, public UUID recreateUUID(byte[] b);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,24,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,79, /**
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,80,  Constructor only called by BasicUUIDFactory.
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,81,  Constructs a UUID from the byte array representation
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,82,  produced by toByteArrayio.
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,83,  @see BasicUUID#toByteArray
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,84, **/
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,85, public BasicUUID(byte[] b)
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,86, {
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,87,  int lsequence = 0;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,88,  for (int ix = 0; ix < 4; ix++)
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,89,  {
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,90,   lsequence = lsequence << 8;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,91,   lsequence = lsequence | (0xff & b[ix]);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,92,  }
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,93,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,94,  long ltimemillis = 0;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,95,  for (int ix = 4; ix < 10; ix++)
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,96,  {
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,97,   ltimemillis = ltimemillis << 8;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,98,   ltimemillis = ltimemillis | (0xff & b[ix]);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,99,  }
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,100,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,101,  long linetaddr = 0;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,102,  for (int ix = 10; ix < 16; ix++)
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,103,  {
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,104,   linetaddr = linetaddr << 8;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,105,   linetaddr = linetaddr | (0xff & b[ix]);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,106,  }
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,107,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,108,  sequence = lsequence;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,109,  timemillis = ltimemillis;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,110,  majorId = linetaddr;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,111, }
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,112,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,126,  // RESOLVE: write out the byte array instead?
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,277, /**
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,278,   Store this UUID in a byte array. Arrange the bytes in the UUID
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,279,   in the same order the code which stores a UUID in a string
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,280,   does.
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,281,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,282,   @see org.apache.derby.catalog.UUID#toByteArray
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,283, */
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,284, public byte[] toByteArray()
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,285, {
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,286,  byte[] result = new byte[16];
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,287,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,288,  int lsequence = sequence;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,289,  result[0] = (byte)(lsequence >>> 24);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,290,  result[1] = (byte)(lsequence >>> 16);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,291,  result[2] = (byte)(lsequence >>> 8);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,292,  result[3] = (byte)lsequence;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,293,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,294,  long ltimemillis = timemillis;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,295,  result[4] = (byte)(ltimemillis >>> 40);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,296,  result[5] = (byte)(ltimemillis >>> 32);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,297,  result[6] = (byte)(ltimemillis >>> 24);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,298,  result[7] = (byte)(ltimemillis >>> 16);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,299,   result[8] = (byte)(ltimemillis >>> 8);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,300,  result[9] = (byte)ltimemillis;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,301,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,302,  long linetaddr = majorId;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,303,  result[10] = (byte)(linetaddr >>> 40);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,304,  result[11] = (byte)(linetaddr >>> 32);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,305,  result[12] = (byte)(linetaddr >>> 24);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,306,  result[13] = (byte)(linetaddr >>> 16);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,307,  result[14] = (byte)(linetaddr >>> 8);
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,308,  result[15] = (byte)linetaddr;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,309,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,310,  return result;
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,311, }
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,312,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,322,
java/engine/org/apache/derby/impl/services/uuid/BasicUUID.java,323, public String toHexString() {return stringWorkhorse( (char) 0 );}
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,144, /**
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,145,  @see UUIDFactory#recreateUUID
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,146, **/
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,147, public UUID recreateUUID(byte[] b)
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,148, {
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,149,  return new BasicUUID(b);
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,150, }
java/engine/org/apache/derby/impl/services/uuid/BasicUUIDFactory.java,151,
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,154,
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,155,  byte[] uuidByteArray = uuid.toByteArray();
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,156,  UUID uuid_b = factory.recreateUUID(uuidByteArray);
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,157,  if (!uuid_b.equals(uuid))
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,158,  {
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,159,   // Resolve: format this with a message factory
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,160,"   String badByteArrayString = """";"
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,161,   for (int ix = 0; ix < 16; ix++)
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,162,   {
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,163,    badByteArrayString +=
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,164,"     Integer.toHexString(0x00ff&uuidByteArray[ix])+""."";"
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,165,   }
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,166,
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,167,   String message =
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,168,"    ""Conversion error: """
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,169,    + uuidstring
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,170,"    + "" != """
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,171,    + badByteArrayString;
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,172,   out.printlnWithHeader(message);
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,173,   resultSoFar =  false;
java/testing/org/apache/derbyTesting/unitTests/services/T_UUIDFactory.java,174,  }
java/engine/org/apache/derby/jdbc/XATransactionState.java,151,     // disable use of the connection until it is cleaned up.
java/engine/org/apache/derby/jdbc/XATransactionState.java,152,     conn.setApplicationConnection(null);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1282,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java,1298,        return suite;
java/testing/org/apache/derbyTesting/junit/Utilities.java,140,            } else {
java/testing/org/apache/derbyTesting/junit/Utilities.java,141,"                System.out.println(""};\n"");"
java/testing/org/apache/derbyTesting/junit/Utilities.java,142,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1043,"            if ((""T2"" == rs1.getString(3)) && (""SESSION"" == rs1.getString(2)))"
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,146,                // Can't use 1.5 methods yet due to J2ME.
java/testing/org/apache/derbyTesting/junit/SpawnedProcess.java,147,                KILL_TIMER = new Timer();
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,870,        if ( tableFunctionVisitor.hasNode() ) { requestBulkInsert(); }
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,871, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1174,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1175,"            s.executeUpdate(""DROP TABLE SESSION.t1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1176,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1177,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1178,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1179,"            s.executeUpdate(""DROP TABLE SESSION.t2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1180,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1181,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1182,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1183,"            s.executeUpdate(""DROP TABLE SESSION.t3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1184,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1185,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1186,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1187,"            s.executeUpdate(""DROP TABLE SESSION.t4"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1188,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1189,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1190,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1191,"            s.executeUpdate(""DROP TABLE SESSION.t5"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1192,        } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DeclareGlobalTempTableJavaTest.java,1196,
java/engine/org/apache/derby/iapi/reference/Property.java,688,"     * update should be traced. Accepted values are: *none*, stdout, log, both"
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,124,    // TODO: Consider removing the trace functionality after testing/tuning.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,858,                // TODO: This property may go away in production code.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,184,import org.apache.derby.iapi.services.io.FileUtil;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,187,import org.apache.derby.io.StorageFile;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2506,  ExecIndexRow     indexRow1;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2507,  ExecIndexRow   indexTemplateRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2508,  ExecRow     outRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2531,  outRow = rf.makeEmptyRow();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2532,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2587,  ConglomerateController heapCC;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,2621,  ConglomerateController heapCC;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4030,  ConglomerateController heapCC;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5584,  DataValueDescriptor   columnNameOrderable;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5989,  ExecIndexRow   indexTemplateRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6128,  ConglomerateController heapCC;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6130,  ExecRow     templateRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6278,  ConstraintDescriptorList tmpCdl;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6307,  ExecIndexRow   indexTemplateRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6426,  ExecRow           row = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6428,  TabInfoImpl       ti = getNonCoreTI(SYSCONSTRAINTS_CATALOG_NUM);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6429,  SYSCONSTRAINTSRowFactory  rf = (SYSCONSTRAINTSRowFactory) ti.getCatalogRowFactory();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6430,  int      insertRetCode;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6505,  DataValueDescriptor   columnNameOrderable;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6864,  SYSCHECKSRowFactory   rf = (SYSCHECKSRowFactory) ti.getCatalogRowFactory();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,6931,  // ExecIndexRow     keyRow = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7063,  SYSCONGLOMERATESRowFactory rf;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7130,    ScanController     scanController;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7131,    TransactionController   tc;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7132,    ExecRow       outRow;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7715,  SYSALIASESRowFactory rf;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7718,  rf = (SYSALIASESRowFactory) ti.getCatalogRowFactory();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7719,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7756,  SYSALIASESRowFactory   rf = (SYSALIASESRowFactory) ti.getCatalogRowFactory();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8485,  ColumnDescriptor cd;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8658,  ExecIndexRow     indexRow1;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9052,  CatalogRowFactory rf = ti.getCatalogRowFactory();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9157,  ColumnDescriptor cd;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9753,  ConglomerateController heapCC;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10309,  return;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10329,  ExecRow row;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10892,  UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10941,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,11085,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,11107,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,11181,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12113,  UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12114,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12140,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12320,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12325,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12340,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12345,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12360,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12371,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12387,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12397,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12413,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12418,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12434,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12444,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12461,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12473,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12488,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12497,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12514,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12519,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12534,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12539,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12554,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12565,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12581,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12591,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12607,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12614,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12630,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12640,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12657,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12669,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12684,            UUID routine_uuid = null;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12693,            routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,12735,            UUID routine_uuid = createSystemProcedureOrFunction(
java/engine/org/apache/derby/impl/jdbc/authentication/SpecificAuthenticationServiceImpl.java,141,"  throw StandardException.newException(SQLState.AUTHENTICATION_SCHEME_ERROR, t,"
java/engine/org/apache/derby/impl/jdbc/authentication/SpecificAuthenticationServiceImpl.java,142,     specificAuthenticationScheme);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,181,"          {""XBM0M"",""Error creating instance of authentication scheme class {0}."",""45000""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,1444,                String          actualSQLState = ((SQLException) t).getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,1452,                    if ( expected.equals( actualSQLState ) ) { return null; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,1454,"                fail( tagError( ""SQLState "" + actualSQLState + "" not in expected list: "" + buffer.toString() ) );"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8846,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8847,  FormatableBitSet columnToUpdate = new
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8848,     FormatableBitSet(SYSCOLUMNSRowFactory.SYSCOLUMNS_COLUMN_COUNT);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8878,            boolean baseRowExists =
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8879,"                heapCC.fetch(rl, row.getRowArray(), columnToRead, wait);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8880,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8881,            columnToUpdate.set(columnNum - 1); // current value.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8889,                // we increment and store the new value in SYSCOLUMNS
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,984,   mb.push(!sourceCTI.variableLength() || isNumber);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,460,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,29,import org.apache.derby.iapi.sql.compile.TypeCompiler;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,37,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,45,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,46,import org.apache.derby.iapi.services.loader.ClassInspector;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,57,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,58,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,59,import org.apache.derby.catalog.UUID;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java,1537,"                ""APP"", ""EMPTY_TABLE"", emptyFileName, ""|"", ""``"", null, 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,164,"                  ""create function EMC.GETARTICLE(path VARCHAR(40)) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2409,"             ""    b char( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2412,"             ""    e varchar( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2423,"             ""    b char( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2426,"             ""    e varchar( 5 ) generated always as( upper( a ) ),\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2529,"             ""create table t_atac_3( a varchar( 5 ), b varchar( 5 ) generated always as ( upper( a )  ) )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java,2534,"             ""create table t_atac_4( a varchar( 5 ) for bit data,  b varchar( 5 ) for bit data generated always as ( a )  )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java,643,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RoutineTest.java,691,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java,2047,"            + ""'extinout/t1.dat' , '\\a', '\\', null) "");"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8876,"            heapCC.fetch(rl, row.getRowArray(), columnToRead, wait);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10383,"            heapCC.fetch( rowLocation, row.getRowArray(), columnToUpdate, wait );"
java/client/org/apache/derby/client/net/EncodedInputStream.java,26,import java.io.ByteArrayOutputStream;
java/client/org/apache/derby/client/net/EncodedInputStream.java,213,
java/client/org/apache/derby/client/net/EncodedInputStream.java,214,
java/client/org/apache/derby/client/net/EncodedInputStream.java,215,    static class PublicBufferOutputStream extends ByteArrayOutputStream{
java/client/org/apache/derby/client/net/EncodedInputStream.java,216,
java/client/org/apache/derby/client/net/EncodedInputStream.java,217,  PublicBufferOutputStream(int size){
java/client/org/apache/derby/client/net/EncodedInputStream.java,218,   super(size);
java/client/org/apache/derby/client/net/EncodedInputStream.java,219,  }
java/client/org/apache/derby/client/net/EncodedInputStream.java,221,  public byte[] getBuffer(){
java/client/org/apache/derby/client/net/EncodedInputStream.java,222,   return buf;
java/client/org/apache/derby/client/net/EncodedInputStream.java,223,  }
java/client/org/apache/derby/client/net/EncodedInputStream.java,224,
java/client/org/apache/derby/client/net/EncodedInputStream.java,225,    }
java/client/org/apache/derby/client/net/Request.java,1430,            DynamicByteArrayOutputStream dbaos = new DynamicByteArrayOutputStream();
java/client/org/apache/derby/client/net/Request.java,1431,            ObjectOutputStream oos = new ObjectOutputStream( dbaos );
java/client/org/apache/derby/client/net/Request.java,1435,            buffer = dbaos.getByteArray();
java/client/org/apache/derby/client/net/Request.java,1436,            length = dbaos.getUsed();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,219,     return(rs.getInt(1));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,229,     return(rs.getInt(1));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,237,     return(rs.getInt(1));
java/engine/org/apache/derby/diag/SpaceTable.java,150,            conglomTable[i] = new ConglomInfo(
java/engine/org/apache/derby/diag/SpaceTable.java,151,"                cds[i].getConglomerateNumber(),"
java/engine/org/apache/derby/diag/SpaceTable.java,152,"                cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/engine/org/apache/derby/diag/SpaceTable.java,153,                cds[i].isIndex());
java/engine/org/apache/derby/diag/SpaceTable.java,230,  String str = conglomInfo.getConglomName();
java/engine/org/apache/derby/diag/SpaceTable.java,350,"    public ConglomInfo(long conglomId, String conglomName, boolean isIndex)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,155,        String [] expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,157,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,162,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,171,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,172,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,173,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,178,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,191,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,192,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,193,"             ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,198,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,210,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,211,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,212,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,217,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,228,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,229,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,230,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,238,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,239,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,240,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,248,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,249,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,250,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,261,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,262,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,263,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,281,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,282,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,283,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,288,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,300,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,301,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,302,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,312,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,313,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,314,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,346,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,347,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,348,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,349,"        JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,353,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,362,        expColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,363,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,364,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING""};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,365,"        JDBC.assertColumnNames(rs, expColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,369,"            {""T1"", ""0"", ""1"", ""0"", ""1"", ""4096"", ""0""}"
java/engine/org/apache/derby/diag/SpaceTable.java,137,   schemaName = lcc.getCurrentSchemaName();
java/engine/org/apache/derby/diag/SpaceTable.java,139,"        // if schemaName is null, it gets the default schema"
java/engine/org/apache/derby/diag/SpaceTable.java,140,"        SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true);"
java/engine/org/apache/derby/diag/SpaceTable.java,141,"        TableDescriptor td = dd.getTableDescriptor(tableName,sd, tc);"
java/engine/org/apache/derby/diag/SpaceTable.java,142,        if (td == null)  // table does not exist
java/engine/org/apache/derby/diag/SpaceTable.java,144,            conglomTable = new ConglomInfo[0];   // make empty conglom table
java/engine/org/apache/derby/diag/SpaceTable.java,145,            return;
java/engine/org/apache/derby/diag/SpaceTable.java,147,        ConglomerateDescriptor[] cds = td.getConglomerateDescriptors();
java/engine/org/apache/derby/diag/SpaceTable.java,156,"                 cds[i].isIndex() ? cds[i].getConglomerateName() : tableName,"
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,1433,"  * index, the size of the return array is 1."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7036,"  * index, the size of the return array is 1."
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7052,  /* Use UUIDStringOrderable in both start and stop positions for scan */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7053,  UUIDStringOrderable = getIDValueAsCHAR(uuid);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7054,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7055,  /* Set up the start/stop position for the scan */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7056,  ExecIndexRow keyRow = exFactory.getIndexableRow(1);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7057,"  keyRow.setColumn(1, UUIDStringOrderable);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7058,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7061,  getDescriptorViaIndex(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7062,"      SYSCONGLOMERATESRowFactory.SYSCONGLOMERATES_INDEX1_ID,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7063,"      keyRow,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7064,"      (ScanQualifier [][]) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7065,"      ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7066,"      (TupleDescriptor) null,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7067,"      cdl,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7068,      false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,167,        String [] allColNames = new String [] {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,168,"            ""CONGLOMERATENAME"", ""ISINDEX"", ""NUMALLOCATEDPAGES"", ""NUMFREEPAGES"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,169,"            ""NUMUNFILLEDPAGES"", ""PAGESIZE"", ""ESTIMSPACESAVING"", ""TABLEID"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,170,        String [] expColNames = allColNames;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,329,"        JDBC.assertColumnNames(rs, allColNames);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java,342,"        JDBC.assertColumnNames(rs, allColNames);"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,502,        if ( (args == null) || (args.length != 4) ) { return false; }
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,24,import java.io.File;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,25,import java.io.IOException;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,26,import java.lang.Process;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,27,import java.lang.Runtime;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,28,import java.lang.SecurityException;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,30,import java.security.CodeSource;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,31,import java.util.Vector;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,32,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,33,import org.apache.derbyTesting.functionTests.harness.BackgroundStreamSaver;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,34,import org.apache.derbyTesting.functionTests.harness.jvm;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,35,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,36,public class derbyrunjartest {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,37,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,38,    public static void main(String[] args) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,39,    {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,40,        // get location of run class.
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,41,        CodeSource cs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,42,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,43,            cs = org.apache.derby.iapi.tools.run.class.getProtectionDomain().getCodeSource();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,44,        } catch (SecurityException se) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,45,"            System.out.println(""Security exception: "" + se.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,46,        }
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,47,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,48,        URL result = cs.getLocation();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,49,        jvm jvm = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,56,"            jvm = jvm.getJvm(""currentjvm""); // ensure compatibility"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,59,        String[][] testCommands = new String[][] {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,60,"            {""ij"", ""--help""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,61,"            {""sysinfo"", ""-cp"", ""help""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,62,"            {""dblook""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,63,"            {""server""},"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,64,        };
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,66,        for (int i = 0; i < testCommands.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,67,"            runtool(jvm, derbyrunloc, testCommands[i]);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,71,"    private static void runtool(jvm jvm, String loc, String[] args)"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,72,        throws IOException
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,73,    {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,74,        System.out.println(concatenate(args) + ':');
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,76,        if (jvm == null) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,77,            org.apache.derby.iapi.tools.run.main(args);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,78,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,79,        }
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,81,        Vector cmd = jvm.getCommandLine();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,82,"        cmd.addElement(""-jar"");"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,83,        cmd.addElement(loc);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,84,        for (int i=0; i < args.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,85,            cmd.addElement(args[i]);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,86,        }
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,87,        String command = concatenate((String[]) cmd.toArray(new String[0]));
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,88,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,89,        Process pr = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,91,        try
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,92,        {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,93,            pr = Runtime.getRuntime().exec(command);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,94,            BackgroundStreamSaver saver =
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,95,"                        new BackgroundStreamSaver(pr.getInputStream(), System.out);"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,96,            saver.finish();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,97,            pr.waitFor();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,98,            pr.destroy();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,99,        } catch(Throwable t) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,100,"            System.out.println(""Process exception: "" + t.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,101,            if (pr != null)
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,102,            {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,103,                pr.destroy();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,104,                pr = null;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,105,            }
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,106,        }
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,109,    private static String concatenate(String[] args) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,110,        StringBuffer buf = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,111,        for (int i = 0; i < args.length; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,112,            buf.append(args[i]);
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,113,            if (i + 1 < args.length) buf.append(' ');
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,114,        }
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,115,        return buf.toString();
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,594,"     cmdlist.add(""-classpath"");"
java/testing/org/apache/derbyTesting/junit/BaseTestCase.java,595,"        cmdlist.add(cp == null ? getSystemProperty(""java.class.path"") : cp);"
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,25,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,27,import org.apache.derby.iapi.services.io.StoredFormatIds;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,28,import org.apache.derby.iapi.reference.Limits;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,29,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,30,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,31,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,33,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,34,import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,37,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,42,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,43,import org.apache.derby.iapi.sql.depend.DependencyManager;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,44,import org.apache.derby.iapi.sql.depend.ProviderList;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,45,import org.apache.derby.iapi.sql.depend.ProviderInfo;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,46,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,47,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,48,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,51,import org.apache.derby.catalog.AliasInfo;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,52,import org.apache.derby.catalog.DefaultInfo;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,53,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,54,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,55,import org.apache.derby.catalog.types.DefaultInfoImpl;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,56,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,57,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,58,import java.sql.Types;
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,59,
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,709,  if (defaultText.length() > Limits.DB2_CHAR_MAXWIDTH)
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,710,  // DB2 spec says this isn't allowed.
java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java,711,   return false;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,46,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,47,  // set input stream
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,48,"  String filePath = ""wisc_setup.sql"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,49,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,50,  try
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,51,  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,52,"   inStream = new BufferedInputStream(new FileInputStream(filePath),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,53,       utilMain.BUFFEREDFILESIZE);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,54,  } catch (FileNotFoundException e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,55,  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,56,"   System.out.println(""unable to find input file ""+filePath);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,57,   throw e;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,58,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/wisconsin.java,61,"    System.out, (String) null);"
java/client/org/apache/derby/client/net/NetConnectionReply.java,60,    void verifyConnectReply(int codept) throws SqlException {
java/client/org/apache/derby/client/net/NetConnectionReply.java,61,        if (peekCodePoint() != codept) {
java/client/org/apache/derby/client/net/NetConnectionReply.java,62,            parseConnectError();
java/client/org/apache/derby/client/net/NetConnectionReply.java,63,            return;
java/client/org/apache/derby/client/net/NetConnectionReply.java,64,        }
java/client/org/apache/derby/client/net/NetConnectionReply.java,65,        readLengthAndCodePoint();
java/client/org/apache/derby/client/net/NetConnectionReply.java,66,        skipBytes();
java/client/org/apache/derby/client/net/NetConnectionReply.java,67,
java/client/org/apache/derby/client/net/NetConnectionReply.java,68,        if (codept == CodePoint.ACCRDBRM) {
java/client/org/apache/derby/client/net/NetConnectionReply.java,69,            int peekCP = peekCodePoint();
java/client/org/apache/derby/client/net/NetConnectionReply.java,70,            if (peekCP == Reply.END_OF_SAME_ID_CHAIN) {
java/client/org/apache/derby/client/net/NetConnectionReply.java,71,                return;
java/client/org/apache/derby/client/net/NetConnectionReply.java,72,            }
java/client/org/apache/derby/client/net/NetConnectionReply.java,73,
java/client/org/apache/derby/client/net/NetConnectionReply.java,74,            parseTypdefsOrMgrlvlovrs();
java/client/org/apache/derby/client/net/NetConnectionReply.java,75,            NetSqlca netSqlca = parseSQLCARD(null);
java/client/org/apache/derby/client/net/NetConnectionReply.java,76,            netAgent_.netConnection_.completeSqlca(netSqlca);
java/client/org/apache/derby/client/net/NetConnectionReply.java,77,        }
java/client/org/apache/derby/client/net/NetConnectionReply.java,78,    }
java/client/org/apache/derby/client/net/NetConnectionReply.java,79,
java/client/org/apache/derby/client/net/NetConnectionReply.java,80,    void parseConnectError() throws DisconnectException {
java/client/org/apache/derby/client/net/NetConnectionReply.java,81,        int peekCP = peekCodePoint();
java/client/org/apache/derby/client/net/NetConnectionReply.java,82,        switch (peekCP) {
java/client/org/apache/derby/client/net/NetConnectionReply.java,83,        case CodePoint.CMDCHKRM:
java/client/org/apache/derby/client/net/NetConnectionReply.java,84,            parseCMDCHKRM();
java/client/org/apache/derby/client/net/NetConnectionReply.java,85,            break;
java/client/org/apache/derby/client/net/NetConnectionReply.java,86,        case CodePoint.MGRLVLRM:
java/client/org/apache/derby/client/net/NetConnectionReply.java,87,            parseMGRLVLRM();
java/client/org/apache/derby/client/net/NetConnectionReply.java,88,            break;
java/client/org/apache/derby/client/net/NetConnectionReply.java,89,        default:
java/client/org/apache/derby/client/net/NetConnectionReply.java,90,            parseCommonError(peekCP);
java/client/org/apache/derby/client/net/NetConnectionReply.java,91,        }
java/client/org/apache/derby/client/net/NetConnectionReply.java,92,    }
java/client/org/apache/derby/client/net/NetConnectionReply.java,93,
java/client/org/apache/derby/client/net/NetConnectionReply.java,94,    void readDummyExchangeServerAttributes(Connection connection) throws SqlException {
java/client/org/apache/derby/client/net/NetConnectionReply.java,95,        startSameIdChainParse();
java/client/org/apache/derby/client/net/NetConnectionReply.java,96,        parseDummyEXCSATreply((NetConnection) connection);
java/client/org/apache/derby/client/net/NetConnectionReply.java,97,        endOfSameIdChainData();
java/client/org/apache/derby/client/net/NetConnectionReply.java,98,        agent_.checkForChainBreakingException_();
java/client/org/apache/derby/client/net/NetConnectionReply.java,99,    }
java/client/org/apache/derby/client/net/NetConnectionReply.java,100,
java/client/org/apache/derby/client/net/NetConnectionReply.java,2817,"    protected void checkRequiredObjects(boolean receivedFlag,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2818,"                                        boolean receivedFlag2,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2819,"                                        boolean receivedFlag3,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2820,"                                        boolean receivedFlag4,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2821,"                                        boolean receivedFlag5,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2822,                                        boolean receivedFlag6) throws DisconnectException {
java/client/org/apache/derby/client/net/NetConnectionReply.java,2823,        if (!receivedFlag || !receivedFlag2 || !receivedFlag3 || !receivedFlag4 ||
java/client/org/apache/derby/client/net/NetConnectionReply.java,2824,                !receivedFlag5 || !receivedFlag6) {
java/client/org/apache/derby/client/net/NetConnectionReply.java,2825,            doSyntaxrmSemantics(CodePoint.SYNERRCD_REQ_OBJ_NOT_FOUND);
java/client/org/apache/derby/client/net/NetConnectionReply.java,2826,        }
java/client/org/apache/derby/client/net/NetConnectionReply.java,2827,
java/client/org/apache/derby/client/net/NetConnectionReply.java,2828,    }
java/client/org/apache/derby/client/net/NetConnectionReply.java,2829,
java/client/org/apache/derby/client/net/NetConnectionReply.java,2830,"    protected void checkRequiredObjects(boolean receivedFlag,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2831,"                                        boolean receivedFlag2,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2832,"                                        boolean receivedFlag3,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2833,"                                        boolean receivedFlag4,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2834,"                                        boolean receivedFlag5,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2835,"                                        boolean receivedFlag6,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,2836,                                        boolean receivedFlag7) throws DisconnectException {
java/client/org/apache/derby/client/net/NetConnectionReply.java,2837,        if (!receivedFlag || !receivedFlag2 || !receivedFlag3 || !receivedFlag4 ||
java/client/org/apache/derby/client/net/NetConnectionReply.java,2838,                !receivedFlag5 || !receivedFlag6 || !receivedFlag7) {
java/client/org/apache/derby/client/net/NetConnectionReply.java,2839,            doSyntaxrmSemantics(CodePoint.SYNERRCD_REQ_OBJ_NOT_FOUND);
java/client/org/apache/derby/client/net/NetConnectionReply.java,2840,        }
java/client/org/apache/derby/client/net/NetConnectionReply.java,2841,    }
java/client/org/apache/derby/client/net/NetConnectionReply.java,2842,
java/client/org/apache/derby/client/net/NetStatementReply.java,1651,    // Query Protocol type specifies the type of query protocol
java/client/org/apache/derby/client/net/NetStatementReply.java,1652,    // the target SQLAM uses.
java/client/org/apache/derby/client/net/NetStatementReply.java,1653,    protected int parseQRYPRCTYP() throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,1654,        parseLengthAndMatchCodePoint(CodePoint.QRYPRCTYP);
java/client/org/apache/derby/client/net/NetStatementReply.java,1655,        int qryprctyp = parseCODPNTDR();
java/client/org/apache/derby/client/net/NetStatementReply.java,1656,        if ((qryprctyp != CodePoint.FIXROWPRC) && (qryprctyp != CodePoint.LMTBLKPRC)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1657,"            doValnsprmSemantics(CodePoint.QRYPRCTYP, qryprctyp);"
java/client/org/apache/derby/client/net/NetStatementReply.java,1658,        }
java/client/org/apache/derby/client/net/NetStatementReply.java,1659,        return qryprctyp;
java/client/org/apache/derby/client/net/NetStatementReply.java,1660,    }
java/client/org/apache/derby/client/net/NetStatementReply.java,1661,
java/client/org/apache/derby/client/net/NetStatementReply.java,1671,    // hold cursor position state indicates whether the requester specified
java/client/org/apache/derby/client/net/NetStatementReply.java,1672,    // the HOLD option on the SQL DECLARE CURSOR statement.  When the HOLD
java/client/org/apache/derby/client/net/NetStatementReply.java,1673,"    // option is specified, the cursor is not closed upon execution of a"
java/client/org/apache/derby/client/net/NetStatementReply.java,1674,    // commit operation.
java/client/org/apache/derby/client/net/NetStatementReply.java,1675,    // The value TRUE indicates that the requester specifies the HOLD
java/client/org/apache/derby/client/net/NetStatementReply.java,1676,    // operation.  The value FALSSE indicates that the requeter is not
java/client/org/apache/derby/client/net/NetStatementReply.java,1677,    // specifying the HOLD option.
java/client/org/apache/derby/client/net/NetStatementReply.java,1678,    protected int parseSQLCSRHLD() throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,1679,        parseLengthAndMatchCodePoint(CodePoint.SQLCSRHLD);
java/client/org/apache/derby/client/net/NetStatementReply.java,1680,        int sqlcsrhld = readUnsignedByte();
java/client/org/apache/derby/client/net/NetStatementReply.java,1681,"        // 0xF0 is false (default), 0xF1 is true  // use constants in if"
java/client/org/apache/derby/client/net/NetStatementReply.java,1682,        if ((sqlcsrhld != 0xF0) && (sqlcsrhld != 0xF1)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1683,"            doValnsprmSemantics(CodePoint.SQLCSRHLD, sqlcsrhld);"
java/client/org/apache/derby/client/net/NetStatementReply.java,1684,        }
java/client/org/apache/derby/client/net/NetStatementReply.java,1685,        return sqlcsrhld;
java/client/org/apache/derby/client/net/NetStatementReply.java,1686,    }
java/client/org/apache/derby/client/net/NetStatementReply.java,1687,
java/client/org/apache/derby/client/net/NetStatementReply.java,1698,    // Query Attribute for Scrollability indicates whether
java/client/org/apache/derby/client/net/NetStatementReply.java,1699,    // a cursor is scrollable or non-scrollable
java/client/org/apache/derby/client/net/NetStatementReply.java,1700,    protected int parseQRYATTSCR() throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,1701,        parseLengthAndMatchCodePoint(CodePoint.QRYATTSCR);
java/client/org/apache/derby/client/net/NetStatementReply.java,1702,        int qryattscr = readUnsignedByte();  // use constants in if
java/client/org/apache/derby/client/net/NetStatementReply.java,1703,        if ((qryattscr != 0xF0) && (qryattscr != 0xF1)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1704,"            doValnsprmSemantics(CodePoint.QRYATTSCR, qryattscr);"
java/client/org/apache/derby/client/net/NetStatementReply.java,1705,        }
java/client/org/apache/derby/client/net/NetStatementReply.java,1706,        return qryattscr;
java/client/org/apache/derby/client/net/NetStatementReply.java,1707,    }
java/client/org/apache/derby/client/net/NetStatementReply.java,1708,
java/client/org/apache/derby/client/net/NetStatementReply.java,1718,    // enabled for rowset positioning.
java/client/org/apache/derby/client/net/NetStatementReply.java,1719,    protected int parseQRYATTSET() throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,1720,        parseLengthAndMatchCodePoint(CodePoint.QRYATTSET);
java/client/org/apache/derby/client/net/NetStatementReply.java,1721,        int qryattset = readUnsignedByte();  // use constants in if
java/client/org/apache/derby/client/net/NetStatementReply.java,1722,        if ((qryattset != 0xF0) && (qryattset != 0xF1)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1723,"            doValnsprmSemantics(CodePoint.QRYATTSET, qryattset);"
java/client/org/apache/derby/client/net/NetStatementReply.java,1724,        }
java/client/org/apache/derby/client/net/NetStatementReply.java,1725,        return qryattset;
java/client/org/apache/derby/client/net/NetStatementReply.java,1726,    }
java/client/org/apache/derby/client/net/NetStatementReply.java,1727,
java/client/org/apache/derby/client/net/NetStatementReply.java,1737,    // Query attribute for Sensitivity indicats the sensitivity
java/client/org/apache/derby/client/net/NetStatementReply.java,1738,    // of an opened cursor to changes made to the underlying
java/client/org/apache/derby/client/net/NetStatementReply.java,1739,    // base table.
java/client/org/apache/derby/client/net/NetStatementReply.java,1740,    protected int parseQRYATTSNS() throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,1741,        parseLengthAndMatchCodePoint(CodePoint.QRYATTSNS);
java/client/org/apache/derby/client/net/NetStatementReply.java,1742,        int qryattsns = readUnsignedByte();
java/client/org/apache/derby/client/net/NetStatementReply.java,1743,        switch (qryattsns) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1744,        case CodePoint.QRYUNK:
java/client/org/apache/derby/client/net/NetStatementReply.java,1745,        case CodePoint.QRYINS:
java/client/org/apache/derby/client/net/NetStatementReply.java,1746,            break;
java/client/org/apache/derby/client/net/NetStatementReply.java,1747,        default:
java/client/org/apache/derby/client/net/NetStatementReply.java,1748,"            doValnsprmSemantics(CodePoint.QRYATTSNS, qryattsns);"
java/client/org/apache/derby/client/net/NetStatementReply.java,1749,            break;
java/client/org/apache/derby/client/net/NetStatementReply.java,1750,        }
java/client/org/apache/derby/client/net/NetStatementReply.java,1751,        return qryattsns;
java/client/org/apache/derby/client/net/NetStatementReply.java,1752,    }
java/client/org/apache/derby/client/net/NetStatementReply.java,1753,
java/client/org/apache/derby/client/net/NetStatementReply.java,1769,    // Query Attribute for Updatability indicates the updatability
java/client/org/apache/derby/client/net/NetStatementReply.java,1770,    // of an opened cursor.
java/client/org/apache/derby/client/net/NetStatementReply.java,1771,    protected int parseQRYATTUPD() throws DisconnectException {
java/client/org/apache/derby/client/net/NetStatementReply.java,1772,        parseLengthAndMatchCodePoint(CodePoint.QRYATTUPD);
java/client/org/apache/derby/client/net/NetStatementReply.java,1773,        int qryattupd = readUnsignedByte();
java/client/org/apache/derby/client/net/NetStatementReply.java,1774,        switch (qryattupd) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1775,        case CodePoint.QRYUNK:
java/client/org/apache/derby/client/net/NetStatementReply.java,1776,        case CodePoint.QRYRDO:
java/client/org/apache/derby/client/net/NetStatementReply.java,1777,        case CodePoint.QRYUPD:
java/client/org/apache/derby/client/net/NetStatementReply.java,1778,            break;
java/client/org/apache/derby/client/net/NetStatementReply.java,1779,        default:
java/client/org/apache/derby/client/net/NetStatementReply.java,1780,"            doValnsprmSemantics(CodePoint.QRYATTUPD, qryattupd);"
java/client/org/apache/derby/client/net/NetStatementReply.java,1781,            break;
java/client/org/apache/derby/client/net/NetStatementReply.java,1782,        }
java/client/org/apache/derby/client/net/NetStatementReply.java,1783,        return qryattupd;
java/client/org/apache/derby/client/net/NetStatementReply.java,1784,    }
java/client/org/apache/derby/client/net/NetStatementReply.java,1785,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SQLAuthorizationPropTest.java,3,* Derby - Class org.apache.derbyTesting.functionTests.lang.SQLAuthorizationPropTest
java/client/org/apache/derby/client/net/NetPackageReply.java,200,    // RDB Package Name and Consistency token Scalar Object specifies the
java/client/org/apache/derby/client/net/NetPackageReply.java,201,    // fully qualified name of a relational database package and its
java/client/org/apache/derby/client/net/NetPackageReply.java,202,    // consistency token.
java/client/org/apache/derby/client/net/NetPackageReply.java,203,    protected Object parsePKGNAMCT(boolean skip) throws DisconnectException {
java/client/org/apache/derby/client/net/NetPackageReply.java,204,        parseLengthAndMatchCodePoint(CodePoint.PKGNAMCT);
java/client/org/apache/derby/client/net/NetPackageReply.java,205,        if (skip) {
java/client/org/apache/derby/client/net/NetPackageReply.java,206,            skipBytes();
java/client/org/apache/derby/client/net/NetPackageReply.java,207,            return null;
java/client/org/apache/derby/client/net/NetPackageReply.java,208,        }
java/client/org/apache/derby/client/net/NetPackageReply.java,209,"        agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,"
java/client/org/apache/derby/client/net/NetPackageReply.java,210,"                new ClientMessageId(SQLState.DRDA_COMMAND_NOT_IMPLEMENTED),"
java/client/org/apache/derby/client/net/NetPackageReply.java,211,"                ""parsePKGNAMCT""));"
java/client/org/apache/derby/client/net/NetPackageReply.java,212,        return null; // to make compiler happy
java/client/org/apache/derby/client/net/NetPackageReply.java,213,    }
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,343,
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,735,  if (checkKey != verifyKey)
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,736,   throw StandardException.newException(errorState);
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,793,   throw StandardException.newException(SQLState.WRONG_BOOT_PASSWORD);
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,794,
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,795,
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,884,            // FROM list of the current query block. See DERBY-5579.
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,886,            if ( isDerbyStyleTableFunction )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,887,            {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,888,                int referencedTableNumber = ref.getTableNumber();
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,890,                for ( int i = 0; i < fromListParam.size(); i++ )
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,891,                {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,892,                    FromTable   fromTable = (FromTable) fromListParam.elementAt( i );
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,894,                    if ( referencedTableNumber == fromTable.getTableNumber() )
java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java,62,
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,45,"                new TestSuite(cl),"
java/testing/org/apache/derbyTesting/functionTests/tests/tools/derbyrunjartest.java,130,    public void testServer() throws Exception {
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,888,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1637,    cc = getLanguageConnectionContext().
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1638,      getTransactionCompile().openConglomerate(
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1639,"       conglomerateId,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1640,"                            false,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1641,"       0,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1642,"       TransactionController.MODE_RECORD,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1643,       TransactionController.ISOLATION_READ_COMMITTED);
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,721,  columnNumber = source.getColumnPosition();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1834,   // We are interested in ColumnReference classes in the parse tree
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1835,   CollectNodesVisitor visitor = new CollectNodesVisitor(ColumnReference.class);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1836,   stmtnode.accept(visitor);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1837,   Vector refs = visitor.getList();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1838,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,100,"        setDatabaseProperty(""derby.authentication.server"", ""noSuchServer"", conn);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,168,}
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,25,import java.lang.reflect.*;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,26,import java.net.InetAddress;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,30,import java.security.AccessController;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,41,import org.apache.derby.drda.NetworkServerControl;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,42,import org.apache.derby.jdbc.ClientConnectionPoolDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NSSecurityMechanismTest.java,43,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlClientCommandTest.java,108,"                ""org.apache.derby.drda.NetworkServerControl"", ""ping"", ""-h"", ""nothere""};"
java/engine/org/apache/derby/iapi/types/CollatorSQLClob.java,139,"  CollatorSQLClob result = new CollatorSQLClob(null,"
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,178,
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,179, /**
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,180,  Create a new private field and its getter and setter methods.
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,181,
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,182,  @param getter getter for field
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,183,  @param setter setter for field
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,184,  @param methodModifier modifier for method
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,185,  @param staticField true if the field is static
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,186,"  @param type type of the field, return type of the get method and"
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,187,  parameter type of the set method.
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,188,
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,189, */
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,190," void newFieldWithAccessors(String getter, String setter, int methodModifier,"
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,191,"  boolean staticField, String type);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,24,import org.apache.derby.iapi.services.compiler.ClassBuilder;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,25,import org.apache.derby.iapi.services.compiler.MethodBuilder;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,26,import org.apache.derby.iapi.services.compiler.LocalField;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,27,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,28,import org.apache.derby.iapi.services.classfile.ClassHolder;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,29,import org.apache.derby.iapi.services.classfile.ClassMember;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,30,import org.apache.derby.iapi.services.classfile.ClassFormatOutput;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,31,import org.apache.derby.iapi.services.loader.ClassFactory;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,32,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,33,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,34,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,38,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,39,import org.apache.derby.iapi.util.ByteArray;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,40,import org.apache.derby.iapi.services.classfile.VMOpcode;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,41,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,42,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,43,import java.security.AccessController;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,44,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,46,import org.apache.derby.iapi.services.classfile.VMDescriptor;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,47,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,48,import org.apache.derby.impl.services.bytecode.GClass;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,49,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,50,import java.io.IOException;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,288,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,289,"  BCMethod m = new BCMethod(this, ""void"", ""<init>"","
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,290,"         modifiers,"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,291,"         (String []) null,"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,292,         factory);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,293,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,294,  return m;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,360," public void newFieldWithAccessors(String getter, String setter,"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,361,"  int methodModifers,"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,362,"  boolean staticField, String type) {"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,363,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,364,  String vmType = factory.type(type).vmName();
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,365,  methodModifers |= Modifier.FINAL;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,366,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,367,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,368,"  // add a field, field has same name as get method"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,369,  int fieldModifiers = Modifier.PRIVATE;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,370,  if (staticField)
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,371,   fieldModifiers |= Modifier.STATIC;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,372,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,373,"  ClassMember field = classHold.addMember(getter, vmType, fieldModifiers);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,374,  int cpi = classHold.addFieldReference(field);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,375,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,376,  /*
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,377,  ** add the get method
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,378,  */
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,379,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,380,"  String sig = BCMethodDescriptor.get(BCMethodDescriptor.EMPTY, vmType, factory);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,381,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,382,"  ClassMember method = classHold.addMember(getter, sig, methodModifers);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,383,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,384,  CodeChunk chunk = new CodeChunk(this);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,385,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,386,  // load 'this' if required
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,387,  if (!staticField)
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,388,   chunk.addInstr(VMOpcode.ALOAD_0); // this
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,389,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,390,  // get the field value
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,391,"  chunk.addInstrU2((staticField ? VMOpcode.GETSTATIC : VMOpcode.GETFIELD), cpi);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,392,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,393,  // and return it
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,394,  short vmTypeId = BCJava.vmTypeId(vmType);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,395,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,396,  chunk.addInstr(CodeChunk.RETURN_OPCODE[vmTypeId]);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,397,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,398,  int typeWidth = Type.width(vmTypeId);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,399,"  chunk.complete(null, classHold, method, typeWidth, 1);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,400,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,401,  /*
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,402,  ** add the set method
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,403,  */
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,404,  String[] pda = new String[1];
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,405,  pda[0] = vmType;
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,406,"  sig = new BCMethodDescriptor(pda, VMDescriptor.VOID, factory).toString();"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,407,"  method = classHold.addMember(setter, sig, methodModifers);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,408,  chunk = new CodeChunk(this);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,409,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,410,  // load 'this' if required
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,411,  if (!staticField)
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,412,   chunk.addInstr(VMOpcode.ALOAD_0); // this
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,413,  // push the only parameter
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,414,  chunk.addInstr((short) (CodeChunk.LOAD_VARIABLE_FAST[vmTypeId] + 1));
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,415,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,416,  // and set the field
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,417,"  chunk.addInstrU2((staticField ? VMOpcode.PUTSTATIC : VMOpcode.PUTFIELD), cpi);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,418,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,419,  chunk.addInstr(VMOpcode.RETURN);
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,420,
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,421,"  chunk.complete(null, classHold, method, typeWidth + (staticField ? 0 : 1), 1 + typeWidth);"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,422, }
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,423,
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,678,   if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,679,    overflowMethodCheck();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,739,   if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,740,    overflowMethodCheck();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,921,  Type lt = lf.type;
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,922,
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,924,
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,925,  if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,926,   overflowMethodCheck();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,950,  Type lt = lf.type;
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,951,
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,1075,  if (stackDepth == 0)
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,1076,   overflowMethodCheck();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,285,"  getClassBuilder().newFieldWithAccessors(""getExecutionCount"", ""setExecutionCount"","
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,286,"   Modifier.PROTECTED, true, ""int"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,287,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,288,"  getClassBuilder().newFieldWithAccessors(""getRowCountCheckVector"", ""setRowCountCheckVector"","
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,289,"   Modifier.PROTECTED, true, ""java.util.Vector"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,290,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,291,"  getClassBuilder().newFieldWithAccessors(""getStalePlanCheckInterval"", ""setStalePlanCheckInterval"","
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,292,"   Modifier.PROTECTED, true, ""int"");"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,892,    synchronized (getPreparedStatement())
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,894,     Vector rowCountCheckVector = getRowCountCheckVector();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,895,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,896,     if (rowCountCheckVector == null) {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,897,      rowCountCheckVector = new Vector();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,898,      setRowCountCheckVector(rowCountCheckVector);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,899,     }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,900,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,909,       (Long) rowCountCheckVector.elementAt(resultSetNumber);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,913,      rowCountCheckVector.setSize(resultSetNumber + 1);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1004,      firstRowCount = new Long(currentRowCount);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1005,      rowCountCheckVector.setElementAt(
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1006,"              firstRowCount,"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1007,              resultSetNumber
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1008,              );
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1031,  shouldWeCheckRowCounts();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1163, private void shouldWeCheckRowCounts() throws StandardException
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1171,  int executionCount = getExecutionCount() + 1;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1184,   checkRowCounts = true;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1189,   checkRowCounts = false;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1193,   int stalePlanCheckInterval = getStalePlanCheckInterval();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1211,    setStalePlanCheckInterval(stalePlanCheckInterval);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1214,   checkRowCounts = (executionCount % stalePlanCheckInterval) == 1;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1215,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1218,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1219,  setExecutionCount(executionCount);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1222, /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1223, ** These accessor methods are provided by the sub-class to help figure
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1224, ** out whether to check row counts during this execution.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1225, */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1226, abstract protected int getExecutionCount();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1227,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1228, abstract protected void setExecutionCount(int newValue);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1229,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1230, /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1231, ** These accessor methods are provided by the sub-class to help figure
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1232, ** out whether the row count for a particular result set has changed
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1233, ** enough to force recompilation.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1234, */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1235, abstract protected Vector getRowCountCheckVector();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1236,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1237, abstract protected void setRowCountCheckVector(Vector newValue);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1238,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1239, /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1240, ** These accessor methods are provided by the sub-class to remember the
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1241," ** value of the stale plan check interval property, so that we only"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1242, ** have to query the database properties once (there is heavyweight
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1243, ** synchronization around the database properties).
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1244, */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1245, abstract protected int getStalePlanCheckInterval();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1246,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1247, abstract protected void setStalePlanCheckInterval(int newValue);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1248,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,45,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,46, public int getExecutionCount() { return 0;}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,47, public void setExecutionCount(int count) {}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,48,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,49, public Vector getRowCountCheckVector() {return null;}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,50, public void setRowCountCheckVector(Vector v) {}
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,51,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,52, public int getStalePlanCheckInterval() { return Integer.MAX_VALUE; }
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,53, public void setStalePlanCheckInterval(int count) {}
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,24,import org.apache.derby.iapi.services.compiler.ClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,25,import org.apache.derby.iapi.services.compiler.MethodBuilder;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,26,import org.apache.derby.iapi.services.compiler.LocalField;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,27,import org.apache.derby.iapi.reference.ClassName;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,28,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,29,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,30,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,31,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,32,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,33,import org.apache.derby.iapi.sql.compile.CodeGeneration;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,34,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,35,import org.apache.derby.iapi.sql.execute.CursorResultSet;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,36,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,37,import org.apache.derby.iapi.sql.ResultSet;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,38,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,39,import org.apache.derby.iapi.sql.execute.ExecRow;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,40,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,41,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,42,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,43,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,45,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,46,import org.apache.derby.iapi.services.loader.GeneratedMethod;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,48,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,49,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,50,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,51,import java.io.PrintWriter;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,52,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,53,import java.io.File;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,54,import java.io.FileOutputStream;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,55,import java.io.ByteArrayOutputStream;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,56,import java.io.IOException;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,57,import java.util.Hashtable;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,111,  *  public ResultSet execute() throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,112,"  *   throwIfClosed(""execute"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,195,  *  public ResultSet execute() throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,196,"  *   throwIfClosed(""execute"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,225,  // This method is an implementation of the interface method
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,226,  // Activation - ResultSet execute()
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,229,"  MethodBuilder mb = cb.newMethodBuilder(Modifier.PUBLIC,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,230,"   ClassName.ResultSet, ""execute"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,233,"  // put a 'throwIfClosed(""execute"");' statement into the execute method."
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,234,  mb.pushThis(); // instance
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,235,"  mb.push(""execute"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,236,"  mb.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, ""throwIfClosed"", ""void"", 1);"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,237,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,238,"  // call this.startExecution(), so the parent class can know an execution"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,239,  // has begun.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,240,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,241,  mb.pushThis(); // instance
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,242,"  mb.callMethod(VMOpcode.INVOKEVIRTUAL, ClassName.BaseActivation, ""startExecution"", ""void"", 0);"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,243,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,304,         * Two methods are generated here: execute() and
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,307,         * execute is called for every execution of the
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,318,         * public ResultSet execute() {
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,320,         *    // these two added by ActivationClassBuilder
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,321,"         *    throwIfClosed(""execute"");"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,322,         *    startExecution();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,323,         *
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,352,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,354,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,358,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,362,            executeMethod.pushThis();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,363,            executeMethod.swap();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,367,   executeMethod.pushThis();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,368,"   executeMethod.getField(ClassName.BaseActivation, ""resultSet"", ClassName.ResultSet);"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1048, /**
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1049,  * The subclass calls this method when it begins an execution.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1050,  *
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1051,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1052,  */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1053, public void startExecution() throws StandardException
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1054, {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1055,  // determine if we should check row counts during this execution
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1056,        checkRowCounts = shouldWeCheckRowCounts();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1057,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1058,"  // If we are to check row counts, clear the hash table of row counts"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1059,  // we have checked.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1060,  if (checkRowCounts)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1061,   rowCountsCheckedThisExecution.clear();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1062, }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1063,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,60, public ResultSet execute() throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,61,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,62,"  throwIfClosed(""execute"");"
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,63,  startExecution();
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,64,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,97,  executeMethod = beginExecuteMethod();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,165, /**
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,166,"  * By the time this is done, it has generated the following code"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,167,  * <pre>
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,168,  *  protected ResultSet doExecute() throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,169,  *   // statements must be added here
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,170,  *  }
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,171,  *    }
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,172,  * </pre>
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,173,  *
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,174,  * @exception StandardException thrown on failure
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,175,  */
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,176, private MethodBuilder beginExecuteMethod()
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,177,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,178, {
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,179,  // create a reset method that does nothing.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,180,  // REVISIT: this might better belong in the Activation
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,181,  // superclasses ?? not clear yet what it needs to do.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,182,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,183,"  // don't yet need a reset method here. when we do,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,184,  // it will need to call super.reset() as well as
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,185,  // whatever it does.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,186,  // mb = cb.newMethodBuilder(
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,187,"  //  Modifier.PUBLIC, ""void"", ""reset"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,188,  // mb.addStatement(javaFac.newStatement(
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,189,  //  javaFac.newSpecialMethodCall(
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,190,"  //   thisExpression(),"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,191,"  //   BaseActivation.CLASS_NAME,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,192,"  //   ""reset"", ""void"")));"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,193,  // mb.addStatement(javaFac.newReturnStatement());
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,194,  // mb.complete(); // there is nothing else.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,195,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,196,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,197,  // This method is an implementation of the abstract method
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,198,  // BaseActivation - ResultSet doExecute()
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,199,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,200,  // create an empty execute method
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,201,"  MethodBuilder mb = cb.newMethodBuilder(Modifier.PROTECTED,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,202,"   ClassName.ResultSet, ""doExecute"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,203,  mb.addThrownException(ClassName.StandardException);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,204,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,205,  return mb;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,206, }
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,207,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,228, void finishExecuteMethod(boolean genMarkAsTopNode) {
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,229,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,230,  /* We only call markAsTopResultSet() for selects.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,231,   * Non-select DML marks the top NoPutResultSet in the constructor.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,232,   * Needed for closing down resultSet on an error.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,233,   */
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,234,  if (genMarkAsTopNode)
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,235,  {
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,236,   // dup the result set to leave one for the return and one for this call
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,237,   executeMethod.dup();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,238,   executeMethod.cast(ClassName.NoPutResultSet);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,239,"   executeMethod.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, ""markAsTopResultSet"", ""void"", 0);"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,240,  }
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,242,  /* return resultSet */
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,243,  executeMethod.methodReturn();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,244,  executeMethod.complete();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,400,  executeMethod.getField(lf);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,401,"  executeMethod.callMethod(VMOpcode.INVOKEVIRTUAL, (String) null, ""forget"", ""void"", 0);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,164,  * @param mb The execute() method to be built
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,168," protected void generateCodeForTemporaryTable(ActivationClassBuilder acb, MethodBuilder mb)"
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,534,  // fillResultSet() will only be called once.
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,535,"  generateCodeForTemporaryTable(acb, acb.getExecuteMethod());"
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,26,import org.apache.derby.iapi.services.compiler.MethodBuilder;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,29,import org.apache.derby.iapi.reference.ClassName;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,30,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,32,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,35,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,36,import org.apache.derby.iapi.sql.execute.ResultSetFactory;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,37,import org.apache.derby.iapi.sql.execute.ExecutionFactory;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,38,import org.apache.derby.iapi.sql.execute.ExecIndexRow;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,39,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,40,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,41,import org.apache.derby.iapi.sql.ParameterValueSet;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,42,import org.apache.derby.iapi.sql.Row;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,43,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,44,import org.apache.derby.iapi.sql.execute.ExecRow;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,45,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,46,import org.apache.derby.impl.sql.compile.OrderedColumnList;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,47,import org.apache.derby.impl.sql.compile.ResultColumnList;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,48,import org.apache.derby.impl.sql.execute.IndexColumnOrder;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,50,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,51,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,52,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,53,import org.apache.derby.iapi.types.DataValueFactory;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,55,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,56,import org.apache.derby.iapi.sql.compile.TypeCompiler;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,57,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,58,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,60,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,61,import org.apache.derby.iapi.services.loader.ClassFactory;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,62,import org.apache.derby.iapi.services.loader.GeneratedClass;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,63,import org.apache.derby.iapi.services.loader.GeneratedByteCode;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,64,import org.apache.derby.iapi.services.loader.GeneratedMethod;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,65,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,66,import java.lang.reflect.Modifier;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,67,import org.apache.derby.iapi.services.classfile.VMOpcode;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,68,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,69,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,70,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,71,import org.apache.derby.iapi.services.io.FormatableArrayHolder;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,72,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,73,import java.io.Serializable;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,214,     * Get the execute method in order to add code to it.
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,215,     * Added code will be executed for each execution
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,216,     * of the activation. StatementNode completes the
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,217,     * execute method so that code added by other nodes
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,218,     * will be executed before the ResultSet is created
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,219,     * using fillResultSet.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,911,  // fillResultSet() will only be called once.
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,912,"  generateCodeForTemporaryTable(acb, acb.getExecuteMethod());"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,302,        /*
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,303,         * Generate the code to execute this statement.
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,304,         * Two methods are generated here: doExecute() and
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,305,         * fillResultSet().
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,306,         * <BR>
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,307,         * doExecute() is called for every execution of the
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,308,         * Activation. Nodes may add code to this using
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,309,         * ActivationClassBuilder.getExecuteMethod().
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,310,         * This code will be executed every execution.
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,311,         * <BR>
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,312,         * fillResultSet is called by execute if the BaseActivation's
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,313,         * resultSet field is null and the returned ResultSet is
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,314,         * set into the the resultSet field.
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,315,         * <P>
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,316,         * The generated code is equivalent to:
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,317,         * <code>
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,318,         * protected ResultSet doExecute() {
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,319,         *
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,320,         *    [per-execution code added by nodes]
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,321,         *
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,322,         *    if (resultSet == null)
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,323,         *        resultSet = fillResultSet();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,324,         *
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,325,         *    return resultSet;
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,326,         * }
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,327,         * </code>
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,328,         */
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,329,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,330,        MethodBuilder executeMethod = generatingClass.getExecuteMethod();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,331,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,333,"                Modifier.PRIVATE,"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,335,"                ""fillResultSet"");"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,345,        // Get the value of the resultSet field.
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,346,  executeMethod.pushThis();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,347,"  executeMethod.getField(ClassName.BaseActivation, ""resultSet"","
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,348,                ClassName.ResultSet);
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,349,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,350,        // Keep a copy of the field value on the stack so we don't need
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,351,        // to look it up again if it's non-null.
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,352,        executeMethod.dup();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,353,  executeMethod.conditionalIfNull();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,354,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,355,"            // The field was null, so we won't use the value that's on the"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,356,            // stack. Forget about it.
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,357,            executeMethod.pop();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,358,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,359,            // Generate the result set tree and store the
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,360,            // resulting top-level result set into the resultSet
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,361,"            // field, as well as returning it from the execute method."
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,362,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,363,"            // Push this onto the stack twice, as both callMethod() and"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,364,            // putField() take the instance as first operand.
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,365,   executeMethod.pushThis();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,366,            executeMethod.dup();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,367,"   executeMethod.callMethod(VMOpcode.INVOKEVIRTUAL, (String) null,"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,368,"          ""fillResultSet"", ClassName.ResultSet, 0);"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,369,"            executeMethod.putField(ClassName.BaseActivation, ""resultSet"", ClassName.ResultSet);"
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,370,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,371,  executeMethod.startElseCode(); // this is here as the compiler only supports ? :
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,372,  executeMethod.completeConditional();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,373,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,383,  generatingClass.finishExecuteMethod(this instanceof CursorNode);
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,802,  // fillResultSet() will only be called once.
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,803,"  generateCodeForTemporaryTable(acb, acb.getExecuteMethod());"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,273,        return doExecute();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,277,"     * Abstract method overridden by generated classes, containing the"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,278,     * body of the {@link #execute()} method.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,280,    protected abstract ResultSet doExecute() throws StandardException;
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,25,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,28,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,29,
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,60, protected ResultSet doExecute() throws StandardException {
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,61,  if (resultSet == null)
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,62,   resultSet = getResultSetFactory().getDDLResultSet(this);
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,63,  return resultSet;
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,64, }
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,637,"  generateAuthorizeCheck(acb, mb,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,638,    org.apache.derby.iapi.sql.conn.Authorizer.SQL_SELECT_OP);
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,639,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,279,             resultSet = createResultSet();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,280,             if (isCursorActivation()) {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,281,                 ((NoPutResultSet) resultSet).markAsTopResultSet();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,282,             }
java/engine/org/apache/derby/impl/io/vfmem/VirtualFile.java,44," * exists or not, the assoicated data store is consulted."
java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java,28,
java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java,46,    private BlockedByteArrayInputStream bIn;
java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java,48,    private DataInputStream dIs;
java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java,53,    private BlockedByteArrayOutputStream bOut;
java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java,58,    private DataOutputStream dOs;
java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java,88,        dIs = null;
java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java,92,            dOs = null;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1321,            // Prevent attempt to (re)encrypt a read-only database.
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1322,            if (encryptDatabase) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1323,                if (isReadOnly()) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1324,                    if (reEncrypt) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1325,                        throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1326,                                 SQLState.CANNOT_REENCRYPT_READONLY_DATABASE);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1327,                    } else {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1328,                        throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1329,                                 SQLState.CANNOT_ENCRYPT_READONLY_DATABASE);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1330,                    }
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1331,                }
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1332,            }
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1333,            // Prevent attempt to decrypt a read-only database.
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1334,            if (decryptDatabase && isReadOnly()) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1336,"                        SQLState.DATABASE_DECRYPTION_DENIED,"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1337,"                        ""read-only"");"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1584,                                      (reEncrypt ? SQLState.DATABASE_REENCRYPTION_FAILED :
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1585,"                                      SQLState.DATABASE_ENCRYPTION_FAILED),"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1871,            String sqlState;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1872,            if (decryptDatabase) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1873,                sqlState = SQLState.DATABASE_DECRYPTION_FAILED;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1874,            } else if (reEncrypt) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1875,                sqlState = SQLState.DATABASE_REENCRYPTION_FAILED;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1876,            } else {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1877,                sqlState = SQLState.DATABASE_ENCRYPTION_FAILED;
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1878,            }
java/engine/org/apache/derby/impl/store/raw/RawStore.java,1879,"            throw StandardException.newException(sqlState, se, se.getMessage());"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2148,            if (decrypt) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2149,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2150,"                        SQLState.DATABASE_DECRYPTION_DENIED,"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2151,"                        ""prepared global transaction"");"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2152,            } else if (reEncrypt) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2153,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2154,                       SQLState.REENCRYPTION_PREPARED_XACT_EXIST);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2155,            } else {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2156,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2157,                       SQLState.ENCRYPTION_PREPARED_XACT_EXIST);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2158,            }
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2171,            if (decrypt) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2172,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2173,"                        SQLState.DATABASE_DECRYPTION_DENIED,"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2174,"                        ""log archived"");"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2175,            } else if (reEncrypt) {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2176,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2177,                       SQLState.CANNOT_REENCRYPT_LOG_ARCHIVED_DATABASE);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2178,            } else {
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2179,                throw StandardException.newException(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2180,                       SQLState.CANNOT_ENCRYPT_LOG_ARCHIVED_DATABASE);
java/engine/org/apache/derby/impl/store/raw/RawStore.java,2181,            }
java/shared/org/apache/derby/shared/common/reference/SQLState.java,244,"    String REENCRYPTION_PREPARED_XACT_EXIST           = ""XBCXP.S"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,246,"    String CANNOT_REENCRYPT_READONLY_DATABASE         = ""XBCXR.S"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,248,"    String CANNOT_REENCRYPT_LOG_ARCHIVED_DATABASE     = ""XBCXT.S"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,250,"    String DATABASE_REENCRYPTION_FAILED               = ""XBCXV.S"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,252,"    String DATABASE_DECRYPTION_FAILED                 = ""XBCXX.S"";"
java/shared/org/apache/derby/shared/common/reference/SQLState.java,253,"    String DATABASE_DECRYPTION_DENIED                 = ""XBCXY.S"";"
java/testing/org/apache/derbyTesting/functionTests/tests/store/AutomaticIndexStatisticsTest.java,78,"        return TestConfiguration.additionalDatabaseDecorator(suite, MASTERDB);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,33,import junit.extensions.TestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,378,        return suite;
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,148,                    if (Float.parseFloat(javaVersion) > 1.7f)
java/engine/org/apache/derby/iapi/services/info/JVMInfo.java,149,                        id = J2SE_17;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,179,"   // Collect window functions used in result columns, and check them"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,180,   // for any <in-line window specification>s.
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,183,    new CollectNodesVisitor(WindowFunctionNode.class);
java/engine/org/apache/derby/iapi/reference/ClassName.java,64,"    String RowCountStats = ""org.apache.derby.impl.sql.execute.BaseActivation$RowCountStats"";"
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,169,     * <p>
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,170,"     * If the modifiers include static, the returned method builder is for"
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,171,"     * a class or interface initialization method. Otherwise, the builder is"
java/engine/org/apache/derby/iapi/services/compiler/ClassBuilder.java,172,     * for an instance initialization method.
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,164,    /**
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,165,     * Push the contents of the static field onto the stack.
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,166,     * <pre>
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,167,     * Stack ... =>
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,168,"     *       ...,field_value"
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,169,     * </pre>
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,170,     *
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,171,     * @param field a static field
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,172,     */
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,173,    public void getStaticField(LocalField field);
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,174,
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,208,    /**
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,209,     * Pop the top stack value and store it in the static field.
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,210,     * <pre>
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,211,"     * Stack ...,value =>"
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,212,     *       ...
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,213,     * </pre>
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,214,     *
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,215,     * @param field a static field
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,216,     */
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,217,    public void setStaticField(LocalField field);
java/engine/org/apache/derby/iapi/services/compiler/MethodBuilder.java,218,
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,182,}
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,266,     * <p>
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,267,"     * If the modifiers include static, the returned method builder is for"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,268,"     * a class or interface initialization method. Otherwise, the builder is"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,269,     * for an instance initialization method.
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,280,"        String method = Modifier.isStatic(modifiers) ? ""<clinit>"" : ""<init>"";"
java/engine/org/apache/derby/impl/services/bytecode/BCClass.java,281,"        return new BCMethod(this, ""void"", method, modifiers, null, factory);"
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,888,    public void getStaticField(LocalField field) {
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,889,        BCLocalField lf = (BCLocalField) field;
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,890,"        myCode.addInstrU2(VMOpcode.GETSTATIC, lf.cpi);"
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,891,        growStack(lf.type);
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,892,    }
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,893,
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,929,    public void setStaticField(LocalField field) {
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,930,        BCLocalField lf = (BCLocalField) field;
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,931,"        myCode.addInstrU2(VMOpcode.PUTSTATIC, lf.cpi);"
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,932,        popStack();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,933,        overflowMethodCheck();
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,934,    }
java/engine/org/apache/derby/impl/services/bytecode/BCMethod.java,935,
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1005,  return;
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,191,        // Create and initialize a static field that holds row count statistics.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,192,        LocalField rowCountField = newFieldDeclaration(
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,193,"                Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,194,                ClassName.RowCountStats);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,195,        MethodBuilder init = getStaticInitializer();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,196,        init.pushNewStart(ClassName.RowCountStats);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,197,        init.pushNewComplete(0);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,198,        init.setStaticField(rowCountField);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,199,
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,200,        // Create a method that returns the row count statistics.
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,201,        MethodBuilder getRowCountStats = cb.newMethodBuilder(
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,202,"                Modifier.PROTECTED | Modifier.FINAL,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,203,"                ClassName.RowCountStats,"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,204,"                ""getRowCountStats"");"
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,205,        getRowCountStats.getStaticField(rowCountField);
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,206,        getRowCountStats.methodReturn();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,207,        getRowCountStats.complete();
java/engine/org/apache/derby/impl/sql/compile/ActivationClassBuilder.java,208,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,75,    protected MethodBuilder staticInitializer;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,172,    MethodBuilder getStaticInitializer() {
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,173,        if (staticInitializer == null) {
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,174,            staticInitializer = cb.newConstructorBuilder(Modifier.STATIC);
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,175,        }
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,176,        return staticInitializer;
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,177,    }
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,178,
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,251,    /**
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,252,"     * Finish the static initializer, if there is one, by putting a return"
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,253,     * at the end of it.
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,254,     */
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,255,    void finishStaticInitializer() throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,256,        if (staticInitializer != null) {
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,257,            staticInitializer.methodReturn();
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,258,            staticInitializer.complete();
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,259,        }
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,260,    }
java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java,261,
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,332,        // wrap up the static initializer by putting a return at the end of it
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,333,        generatingClass.finishStaticInitializer();
java/engine/org/apache/derby/impl/sql/compile/StatementNode.java,334,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,30,import java.util.List;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,923,    /**
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,924,     * This class holds row count statistics for a query.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,925,     */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,926,    protected static class RowCountStats {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,927,        /**
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,928,         * Stale plan check interval tells how often the row counts should be
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,929,         * checked. Cached here so that we don't need to query the database
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,930,         * properties on each execution.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,931,         */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,932,        private int stalePlanCheckInterval;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,933,        /** The number of times this query has been executed. */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,934,        private int executionCount;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,935,        /** List with row count estimates for each table in the query. */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,936,        private final List rowCounts;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,937,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,938,        public RowCountStats() {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,939,            rowCounts = new ArrayList();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,940,        }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,941,    }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,942,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,943,    /**
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,944,     * Get the object holding row count statistics for this activation.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,945,     *
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,946,     * It may return {@code null} if row count statistics are not maintained
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,947,"     * for the activation. In that case, {@link #shouldWeCheckRowCounts()}"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,948,     * must return {@code false}.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,949,     */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,950,    protected abstract RowCountStats getRowCountStats();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,951,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,971,                final RowCountStats stats = getRowCountStats();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,972,                synchronized (stats)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,973,    {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,974,                    final List rowCountCheckVector = stats.rowCounts;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,975,     Long firstRowCount = null;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,977,     /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,978,     ** Check whether this resultSet has been seen yet.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,979,     */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,980,     if (resultSetNumber < rowCountCheckVector.size())
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,981,     {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,982,      firstRowCount =
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,983,                            (Long) rowCountCheckVector.get(resultSetNumber);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,984,     }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,985,     else
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,986,     {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,987,                        int newSize = resultSetNumber + 1;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,988,                        while (rowCountCheckVector.size() < newSize) {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,989,                            rowCountCheckVector.add(null);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,991,     }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,992,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,993,     if (firstRowCount != null)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,994,     {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,995,      /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,996,      ** This ResultSet has been seen - has the row count
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,997,      ** changed significantly?
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,998,      */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,999,      long n1 = firstRowCount.longValue();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1000,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1001,      if (currentRowCount != n1)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1002,      {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1003,       if (n1 >= TEN_PERCENT_THRESHOLD)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1004,       {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1005,        /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1006,        ** For tables with more than
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1007,"        ** TEN_PERCENT_THRESHOLD rows, the"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1008,        ** threshold is 10% of the size of the table.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1009,        */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1010,        long changeFactor = n1 / (currentRowCount - n1);
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1011,        if (Math.abs(changeFactor) <= 10)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1012,         significantChange = true;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1013,       }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1014,       else
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1015,       {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1016,        /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1017,        ** For tables with less than
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1018,"        ** TEN_PERCENT_THRESHOLD rows, the threshold"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1019,        ** is non-linear.  This is because we want
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1020,        ** recompilation to happen sooner for small
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1021,        ** tables that change size.  This formula
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1022,        ** is for a second-order equation (a parabola).
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1023,        ** The derivation is:
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1024,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1025,        **   c * n1 = (difference in row counts) ** 2
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1026,        **    - or -
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1027,        **   c * n1 = (currentRowCount - n1) ** 2
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1028,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1029,"        ** Solving this for currentRowCount, we get:"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1030,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1031,        **   currentRowCount = n1 + sqrt(c * n1)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1032,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1033,        **    - or -
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1034,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1035,        **   difference in row counts = sqrt(c * n1)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1036,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1037,        **    - or -
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1038,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1039,        **   (difference in row counts) ** 2 =
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1040,        **     c * n1
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1041,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1042,        ** Which means that we should recompile when
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1043,        ** the current row count exceeds n1 (the first
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1044,"        ** row count) by sqrt(c * n1), or when the"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1045,        ** square of the difference exceeds c * n1.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1046,        ** A good value for c seems to be 4.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1047,        **
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1048,        ** We don't use this formula when c is greater
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1049,        ** than TEN_PERCENT_THRESHOLD because we never
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1050,        ** want to recompile unless the number of rows
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1051,"        ** changes by more than 10%, and this formula"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1052,        ** is more sensitive than that for values of
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1053,        ** n1 greater than TEN_PERCENT_THRESHOLD.
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1054,        */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1055,        long changediff = currentRowCount - n1;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1056,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1057,        /*
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1058,        ** Square changediff rather than take the square
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1059,"        ** root of (4 * n1), because multiplying is"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1060,"        ** faster than taking a square root.  Also,"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1061,        ** check to be sure that squaring changediff
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1062,        ** will not cause an overflow by comparing it
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1063,        ** with the square root of the maximum value
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1064,        ** for a long (this square root is taken only
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1065,"        ** once, when the class is loaded, or during"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1066,        ** compilation if the compiler is smart enough).
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1067,        */
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1068,        if (Math.abs(changediff) <= MAX_SQRT)
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1069,        {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1070,         if ((changediff * changediff) >
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1071,               Math.abs(4 * n1))
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1072,         {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1073,          significantChange = true;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1074,         }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1075,        }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1076,       }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1077,      }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1078,     }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1079,     else
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1080,     {
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1081,                        rowCountCheckVector.set(
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1082,"                            resultSetNumber, new Long(currentRowCount));"
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1083,
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1084,     }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1085,    }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1228,        final RowCountStats stats = getRowCountStats();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1236,        int executionCount = ++stats.executionCount;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1258,            int stalePlanCheckInterval = stats.stalePlanCheckInterval;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1276,                stats.stalePlanCheckInterval = stalePlanCheckInterval;
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,50,    /**
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,51,     * Always return null since constant actions never check row counts.
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,52,     */
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,53,    protected RowCountStats getRowCountStats() {
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,54,        return null;
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,55,    }
java/engine/org/apache/derby/impl/sql/execute/ConstantActionActivation.java,56,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,35,import org.apache.derbyTesting.junit.IndexStatsUtil;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,36,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,37,import junit.framework.Assert;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,49,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,50,        suite.addTestSuite(BasicSetup.class);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4475,   updCols = new int[] {SYSSTATEMENTSRowFactory.SYSSTATEMENTS_VALID} ;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,103,"            s.executeUpdate(""INSERT INTO Trigger_t1(max_size) ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,104,"      ""VALUES(20)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,105,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,107,            // DERBY-5105: The post soft upgrade phase may fail with
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,108,            // NoSuchMethodError if the old version suffers from DERBY-4835.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,109,            // Only execute this part of the test for versions that don't
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,110,            // have this problem.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,111,            if (!oldSuffersFromDerby4835()) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,112,"                s.executeUpdate(""INSERT INTO Trigger_t1(max_size) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,113,"                                ""VALUES(20)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,114,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,115,            break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,124,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,125,     * Check if the old version from which we upgrade suffers from DERBY-4835.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,126,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,127,    private boolean oldSuffersFromDerby4835() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,128,        // DERBY-4835 exists on 10.5 and 10.6 prior to 10.5.3.2 and 10.6.2.3.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,129,"        return (oldAtLeast(10, 5) && oldLessThan(10, 5, 3, 2)) ||"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,130,"                (oldAtLeast(10, 6) && oldLessThan(10, 6, 2, 3));"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,131,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,132,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,288,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1845,        if (getPhase() == PH_POST_SOFT_UPGRADE && oldSuffersFromDerby4835()) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1846,            // DERBY-5263: Executing the trigger will fail after soft upgrade
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1847,            // in all the versions that suffer from DERBY-4835. Skip the test.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1848,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1849,        }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1850,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1902,        // if the old version suffers from DERBY-4835 we
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1903,        // cannot run this test because the database won't boot
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1904,        // on soft upgrade and none of the fixtures will run.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1905,        if (oldSuffersFromDerby4835())
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1906,            return;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1927,"                s.executeUpdate(""insert into D5289TABLE1(COL1) values ('aaa')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1928,"                s.executeUpdate(""insert into D5289TABLE2(COL2) values ('aaa')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1929,"                s.executeUpdate(""UPDATE D5289TABLE1 SET COL1 = 'bbb'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1930,                assertDERBY5289ResultsAndDelete();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1931,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1933,"                // If old version suffers from DERBY-5289, we can't run this part of the"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1934,                // DERBY-5289 won't go in until 10.8.2.0
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1935,"                if (! oldLessThan(10,8,2,0)) {"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1936,"                    s.executeUpdate(""insert into D5289TABLE1(COL1) values ('aaa')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1937,"                    s.executeUpdate(""insert into D5289TABLE2(COL2) values ('aaa') "");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1938,"                    s.executeUpdate(""UPDATE D5289TABLE1 SET COL1 = 'bbb'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1939,                    assertDERBY5289ResultsAndDelete();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1940,                }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,1941,                break;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java,233,
java/drda/org/apache/derby/impl/drda/XADatabase.java,41,    private EmbeddedXADataSource xaDataSource;
java/engine/org/apache/derby/jdbc/Driver30.java,124,"        EmbeddedDataSource eds, String user, String password,"
java/engine/org/apache/derby/jdbc/Driver30.java,136,"        EmbeddedDataSource eds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/Driver40.java,171,"        EmbeddedDataSource eds, String user, String password,"
java/engine/org/apache/derby/jdbc/Driver40.java,180,     * of EmbeddedDataSource.
java/engine/org/apache/derby/jdbc/Driver40.java,183,"        EmbeddedDataSource eds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/Driver40.java,190,
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,91, final ReferenceableDataSource dataSource;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,109,"    EmbedPooledConnection(ReferenceableDataSource ds, String u, String p,"
java/engine/org/apache/derby/jdbc/EmbedPooledConnection40.java,52,"    EmbedPooledConnection40 (ReferenceableDataSource ds, String user,"
java/engine/org/apache/derby/jdbc/EmbedXAConnection.java,51," EmbedXAConnection(EmbeddedDataSource ds, ResourceAdapter ra, String u, String p, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbedXAConnection40.java,55,"     EmbedXAConnection40 (EmbeddedDataSource ds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbedXAConnection40.java,130,}
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,49,  implements javax.sql.ConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,97,"    protected PooledConnection createPooledConnection (String user,"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,25,import javax.sql.ConnectionPoolDataSource;
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,53,                                extends EmbeddedConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,54,                                implements ConnectionPoolDataSource {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,24,import java.io.PrintWriter;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,25,import java.sql.Connection;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,26,import java.sql.Driver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,27,import java.sql.DriverManager;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,28,import java.sql.SQLException;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,29,import java.util.Properties;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,30,import org.apache.derby.iapi.reference.Attribute;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,31,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,32,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,183,public class EmbeddedDataSource extends ReferenceableDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,184,    javax.sql.DataSource
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,189, /** instance variables that will be serialized */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,190,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,191, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,192,  * The database name.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,193,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,194,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,195, private String databaseName;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,196,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,197, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,198,  * The data source name.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,199,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,200,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,201, private String dataSourceName;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,202,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,203, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,204,  * Description of the database.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,205,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,206,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,207, private String description;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,208,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,209, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,210,"  * Set to ""create"" if the database should be created."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,211,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,212,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,213, private String createDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,214,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,215, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,216,"  * Set to ""shutdown"" if the database should be shutdown."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,217,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,218,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,219, private String shutdownDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,220,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,221, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,222,  * Derby specific connection attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,223,  * @serial
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,224,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,225, private String connectionAttributes;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,226,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,227, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,228,  Set password to be a set of connection attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,229, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,230, private boolean attributesAsPassword;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,231,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,232, /** instance variables that will not be serialized */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,233, transient private PrintWriter printer;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,234, transient private int loginTimeout;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,235,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,236," // Unlike a DataSource, LocalDriver is shared by all"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,237, // Derby databases in the same jvm.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,238, transient InternalDriver driver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,239,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,240, transient private String jdbcurl;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,241,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,254,  //Most of our customers would be using jndi to get the data
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,255,"  //sources. Since we don't have a jndi to test this, we are"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,256,  //adding this method to fake it. This is getting used in
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,257,  //xaJNDI test so we can compare the 2 data sources.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,258, public boolean equals(Object p0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,259,    if (p0 instanceof EmbeddedDataSource) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,260,      EmbeddedDataSource ds = (EmbeddedDataSource)p0;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,261,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,262,      boolean match = true;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,263,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,264,   if (databaseName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,265,        if  (!(databaseName.equals(ds.databaseName)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,266,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,267,   } else if (ds.databaseName != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,268,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,269,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,270,   if (dataSourceName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,271,        if  (!(dataSourceName.equals(ds.dataSourceName)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,272,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,273,   } else if (ds.dataSourceName != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,274,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,275,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,276,   if (description != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,277,        if  (!(description.equals(ds.description)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,278,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,279,   } else if (ds.description != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,280,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,281,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,282,   if (createDatabase != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,283,        if  (!(createDatabase.equals(ds.createDatabase)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,284,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,285,   } else if (ds.createDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,286,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,287,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,288,   if (shutdownDatabase != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,289,        if  (!(shutdownDatabase.equals(ds.shutdownDatabase)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,290,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,291,   } else if (ds.shutdownDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,292,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,293,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,294,   if (connectionAttributes != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,295,        if  (!(connectionAttributes.equals(ds.connectionAttributes)))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,296,     match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,297,   } else if (ds.connectionAttributes != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,298,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,299,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,300,      if (loginTimeout != ds.loginTimeout)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,301,        match = false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,302,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,303,      return match;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,304,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,305,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,306,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,307,    return false;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,308, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,309,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,310, /*
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,311,  * Properties to be seen by Bean - access thru reflection.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,312,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,313,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,314, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,315,  Set this property to create a new database.  If this
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,316,"  property is not set, the database (identified by databaseName) is"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,317,  assumed to be already existing.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,318,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,319,"  @param create if set to the string ""create"", this data source will try"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,320,"  to create a new database of databaseName, or boot the database if one"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,321,  by that name already exists.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,322,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,323, public final void setCreateDatabase(String create) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,324,"  if (create != null && create.toLowerCase(java.util.Locale.ENGLISH).equals(""create""))"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,325,   createDatabase = create;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,326,  else
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,327,   createDatabase = null;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,328, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,329," /** @return ""create"" if create is set, or null if not */"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,330, public final String getCreateDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,331,  return createDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,332, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,333,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,334,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,335, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,336,   Set this property if one wishes to shutdown the database identified by
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,337,  databaseName.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,338,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,339,"  @param shutdown if set to the string ""shutdown"", this data source will"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,340,  shutdown the database if it is running.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,341,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,342, public final void setShutdownDatabase(String shutdown) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,343,"  if (shutdown != null && shutdown.equalsIgnoreCase(""shutdown""))"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,344,   shutdownDatabase = shutdown;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,345,  else
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,346,   shutdownDatabase = null;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,347, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,348," /** @return ""shutdown"" if shutdown is set, or null if not */"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,349, public final String getShutdownDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,350,  return shutdownDatabase;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,351, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,352,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,353, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,354,   Set this property to pass in more Derby specific
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,355,  connection URL attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,356,  <BR>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,357,       Any attributes that can be set using a property of this DataSource implementation
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,358,"       (e.g user, password) should not be set in connectionAttributes. Conflicting"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,359,       settings in connectionAttributes and properties of the DataSource will lead to
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,360,       unexpected behaviour.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,361,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,362,  @param prop set to the list of Derby connection
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,363,"  attributes separated by semi-colons.   E.g., to specify an encryption"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,364,"  bootPassword of ""x8hhk2adf"", and set upgrade to true, do the following:"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,365,  <PRE>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,366,"   ds.setConnectionAttributes(""bootPassword=x8hhk2adf;upgrade=true"");"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,367,  </PRE>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,368,  See the Derby documentation for complete list.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,369,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,370, public final void setConnectionAttributes(String prop) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,371,   connectionAttributes = prop;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,372,   update();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,373, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,374, /** @return Derby specific connection URL attributes */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,375, public final String getConnectionAttributes() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,376,  return connectionAttributes;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,377, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,378,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,379,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,380, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,381,  Set attributeAsPassword property to enable passing connection request attributes in the password argument of getConnection.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,382,"  If the property is set to true then the password argument of the DataSource.getConnection(String user, String password)"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,383,  method call is taken to be a list of connection attributes with the same format as the connectionAttributes property.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,384,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,385,  @param attributesAsPassword true to encode password argument as a set of connection attributes in a connection request.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,386, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,387, public final void setAttributesAsPassword(boolean attributesAsPassword) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,388,  this.attributesAsPassword = attributesAsPassword;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,389,   update();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,390, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,391,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,392, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,393,  Return the value of the attributesAsPassword property.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,394, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,395, public final boolean getAttributesAsPassword() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,396,  return attributesAsPassword;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,397, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,398,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,399, /*
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,400,  * DataSource methods - keep these non-final so that others can
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,401,  * extend Derby's classes if they choose to.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,402,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,403,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,404,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,405, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,406,  * Attempt to establish a database connection.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,407,  *
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,408,  * @return  a Connection to the database
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,409,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,410,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,411, public Connection getConnection() throws SQLException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,412, {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,413,"  return this.getConnection(getUser(), getPassword(), false);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,414, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,415,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,416, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,417,  * Attempt to establish a database connection with the given username and password.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,418,    If the attributeAsPassword property is set to true then the password argument is taken to be a list of
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,419,    connection attributes with the same format as the connectionAttributes property.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,420,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,421,  *
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,422,  * @param username the database user on whose behalf the Connection is
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,423,  *  being made
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,424,  * @param password the user's password
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,425,  * @return  a Connection to the database
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,426,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,427,  */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,428," public Connection getConnection(String username, String password)"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,429,   throws SQLException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,430, {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,431,"  return this.getConnection(username, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,432, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,433,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,434, /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,435,  @param requestPassword true if the password came from the getConnection() call.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,436, */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,437," final Connection getConnection(String username, String password, boolean requestPassword)"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,438,  throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,439,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,440,  Properties info = new Properties();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,441,  if (username != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,442,"   info.put(Attribute.USERNAME_ATTR, username);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,443,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,444,  if (!requestPassword || !attributesAsPassword)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,445,  {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,446,   if (password != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,447,"    info.put(Attribute.PASSWORD_ATTR, password);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,448,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,449,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,450,  if (createDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,451,"   info.put(Attribute.CREATE_ATTR, ""true"");"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,452,  if (shutdownDatabase != null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,453,"   info.put(Attribute.SHUTDOWN_ATTR, ""true"");"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,454,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,455,  String url = jdbcurl;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,456,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,457,  if (attributesAsPassword && requestPassword && password != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,458,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,459,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,460,   StringBuffer sb = new StringBuffer(url.length() + password.length() + 1);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,461,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,462,   sb.append(url);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,463,   sb.append(';');
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,464,   sb.append(password); // these are now request attributes on the URL
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,466,   url = sb.toString();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,468,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,469,"  Connection conn =  findDriver().connect(url, info);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,470,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,471, // JDBC driver's getConnection method returns null if
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,472, // the driver does not handle the request's URL.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,473,        if (conn == null)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,474,"           throw Util.generateCsSQLException(SQLState.PROPERTY_INVALID_VALUE,Attribute.DBNAME_ATTR,getDatabaseName());"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,475,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,476,        return conn;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,477, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,478,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,479,    // JDBC 4.0 java.sql.Wrapper interface methods
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,482,     * Returns false unless {@code interfaces} is implemented.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,483,     *
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,484,     * @param iface a class defining an interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,485,     * @return true if this implements the interface or directly or indirectly
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,486,     * wraps an object that does
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,487,     * @throws SQLException if an error occurs while determining
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,488,     * whether this is a wrapper for an object with the given interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,490,    public boolean isWrapperFor(Class<?> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,491,        return iface.isInstance(this);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,492,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,495,     * Returns {@code this} if this class implements the specified interface.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,497,     * @param iface a class defining an interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,498,     * @return an object that implements the interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,499,     * @throws SQLException if no object is found that implements the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,500,     * interface
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,502,    public <T> T unwrap(Class<T> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,503,"        // Derby does not implement non-standard methods on JDBC objects,"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,504,"        // hence return this if this class implements the interface, or"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,505,        // throw an SQLException.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,506,        try {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,507,            return iface.cast(this);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,508,        } catch (ClassCastException cce) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,509,"            throw Util.generateCsSQLException(SQLState.UNABLE_TO_UNWRAP,"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,510,                    iface);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,511,        }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,512,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,513,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,514, InternalDriver findDriver() throws SQLException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,515, {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,516,  String url = jdbcurl;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,517,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,518,  synchronized(this)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,519,  {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,520,"   // The driver has either never been booted, or it has been"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,521,   // shutdown by a 'jdbc:derby:;shutdown=true'
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,522,   if (driver == null || !driver.acceptsURL(url))
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,523,   {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,524,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,525,    new org.apache.derby.jdbc.EmbeddedDriver();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,526,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,527,"    // If we know the driver, we loaded it.   Otherwise only"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,528,    // work if DriverManager has already loaded it.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,529,                // DriverManager will throw an exception if driver is not found
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,530,                Driver registerDriver = DriverManager.getDriver(url);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,531,                if (registerDriver instanceof AutoloadedDriver) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,532,                    driver = (InternalDriver) AutoloadedDriver.getDriverModule();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,533,                } else {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,534,                    driver = (InternalDriver) registerDriver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,535,                }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,536,   }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,537,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,538,  return driver;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,539,  // else driver != null and driver can accept url
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,540, }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,541,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,542, void update()
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,544,  StringBuffer sb = new StringBuffer(64);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,546,  sb.append(Attribute.PROTOCOL);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,547,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,548,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,549,  // Set the database name from the databaseName property
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,550,  String dbName = getDatabaseName();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,551,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,552,  if (dbName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,553,   dbName = dbName.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,554,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,555,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,556,  if (dbName == null || dbName.length() == 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,557,   // need to put something in so that we do not allow the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,558,   // database name to be set from the request or from the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,559,   // connection attributes.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,560,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,561,   // this space will selected as the database name (and trimmed to an empty string)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,562,   // See the getDatabaseName() code in InternalDriver. Since this is a non-null
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,563,"   // value, it will be selected over any databaseName connection attribute."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,564,"   dbName = "" "";"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,565,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,566,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,567,  sb.append(dbName);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,570,  String connAttrs = getConnectionAttributes();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,571,  if (connAttrs != null) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,572,   connAttrs = connAttrs.trim();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,573,   if (connAttrs.length() != 0) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,574,    sb.append(';');
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,575,    sb.append(connectionAttributes);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,576,   }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,577,  }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,579,  jdbcurl = sb.toString();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,580, }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,59,public class EmbeddedXADataSource extends EmbeddedDataSource implements
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,60,    javax.sql.XADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,91,"   setupResourceAdapter(null, null, false);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,109,"   setupResourceAdapter(user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,110,"                return createXAConnection (ra, user, password, true);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,117, void update() {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,122," private void setupResourceAdapter(String user, String password, boolean requestPassword) throws SQLException"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,123, {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,124,  synchronized(this)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,125,  {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,126,   if (ra == null || !ra.isActive())
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,127,   {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,128,"    // If it is inactive, it is useless."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,129,    ra = null;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,130,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,131,    // DERBY-4907 make sure the database name sent to find service
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,132,    // does not include attributes.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,133,    String dbName = getShortDatabaseName();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,134,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,135,    if (dbName != null) {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,136,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,137,"     // see if database already booted, if it is, then don't make a"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,138,     // connection.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,139,     Database database = null;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,140,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,141,"     // if monitor is never setup by any ModuleControl, getMonitor"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,142,     // returns null and no Derby database has been booted.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,143,     if (Monitor.getMonitor() != null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,144,      database = (Database)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,145,"       Monitor.findService(Property.DATABASE_MODULE, dbName);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,146,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,147,     if (database == null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,148,     {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,149,"      // If database is not found, try connecting to it.  This"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,150,      // boots and/or creates the database.  If database cannot
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,151,"      // be found, this throws SQLException."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,152,      if (requestPassword)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,153,"       getConnection(user, password).close();"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,154,      else
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,155,       getConnection().close();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,156,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,157,      // now try to find it again
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,158,      database = (Database)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,159,"       Monitor.findService(Property.DATABASE_MODULE, dbName);"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,160,     }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,161,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,162,     if (database != null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,163,      ra = (ResourceAdapter) database.getResourceAdapter();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,164,    }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,165,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,166,    if (ra == null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,167,"     throw new SQLException(MessageService.getTextMessage(MessageId.CORE_DATABASE_NOT_AVAILABLE),"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,168,"             ""08006"","
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,169,             ExceptionSeverity.DATABASE_SEVERITY);
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,170,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,171,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,172,"    // If database is already up, we need to set up driver"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,173,    // seperately.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,174,    findDriver();
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,175,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,176,    if (driver == null)
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,177,"     throw new SQLException(MessageService.getTextMessage(MessageId.CORE_DRIVER_NOT_AVAILABLE),"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,178,"             ""08006"","
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,179,             ExceptionSeverity.DATABASE_SEVERITY);
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,180,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,181,   }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,182,  }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,183, }
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,186,     * Intantiate and return an EmbedXAConnection from this instance
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,193,"    protected XAConnection createXAConnection (ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,55,public class EmbeddedXADataSource40 extends EmbeddedXADataSource {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,23,import java.sql.SQLException;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,25,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,26,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,27,import java.io.Serializable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,28,import java.io.PrintWriter;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,29,import java.util.Properties;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,30,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,31,/* -- JNDI -- */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,32,import javax.naming.NamingException;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,33,import javax.naming.Referenceable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,35,import javax.naming.StringRefAddr;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,37,import javax.naming.Context;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,38,import javax.naming.Name;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,39,import javax.naming.Reference;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,40,import javax.naming.RefAddr;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,41,import java.util.Hashtable;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,42,import java.util.Enumeration;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,43,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,44,/**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,45,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,46,        Derby DataSource implementation base class.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,47, ReferenceableDataSource provides support for JDBC standard DataSource attributes and acts
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,48, as the ObjectFactory to generate Derby DataSource implementations.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,49, <P>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,50, The standard attributes provided by this class are:
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,51, <UL>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,52, <LI>databaseName
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,53, <LI>dataSourceName
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,54, <LI>description
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,55, <LI>password
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,56, <LI>user
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,57, </UL>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,58, <BR>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,59, See the specific Derby DataSource implementation for details on their meaning.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,60, <BR>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,61, See the JDBC 3.0 specification for more details.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,62,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,63,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,64,*/
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,65,public class ReferenceableDataSource implements
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,66,"    javax.naming.Referenceable,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,67,"    java.io.Serializable,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,68,    ObjectFactory
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,69,{
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,70,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,71,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,72, private static final long serialVersionUID = 1872877359127597176L;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,73,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,74,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,75," private static final Class[] STRING_ARG = { """".getClass() };"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,76, private static final Class[] INT_ARG = { Integer.TYPE };
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,77, private static final Class[] BOOLEAN_ARG = { Boolean.TYPE };
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,78,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,79, private String description;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,80, private String dataSourceName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,81, private String databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,82, /** shortDatabaseName has attributes of databaseName stripped */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,83, private String shortDatabaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,84,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,85, private String password;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,86, private String user;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,87, private int loginTimeout;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,88,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,89,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,90, /** instance variables that will not be serialized */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,91, transient private PrintWriter printer;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,92,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,93, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,94,  No-arg constructor.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,95,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,96, public ReferenceableDataSource() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,97,  update();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,98, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,99,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,100,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,101, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,102,  * Properties to be seen by Bean - access thru reflection.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,103,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,104,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,105, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,106,  Set the database name.  Setting this property is mandatory.  If a
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,107,"  database named wombat at g:/db needs to be accessed, database name"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,108,"  should be set to ""g:/db/wombat"".  The database will be booted if it"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,109,  is not already running in the system.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,110,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,111,  @param databaseName the name of the database
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,112, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,113, public final synchronized void setDatabaseName(String databaseName) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,114,  this.databaseName = databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,115,"  if( databaseName!= null && (databaseName.indexOf("";"") >= 0)){"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,116,"   String[] dbShort = databaseName.split("";"");"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,117,   this.shortDatabaseName = dbShort[0];
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,118,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,119,  else {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,120,   this.shortDatabaseName = databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,121,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,122,  update();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,123, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,124, public String getDatabaseName() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,125,  return databaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,126, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,127,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,128, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,129,  * @return databaseName with attributes stripped.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,130,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,131, protected String getShortDatabaseName() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,132,  return shortDatabaseName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,133, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,134,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,135, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,136,  Set the data source name.  The property is not mandatory.  It is used
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,137,  for informational purposes only.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,138,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,139,  @param dsn the name of the data source
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,140, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,141, public final void setDataSourceName(String dsn) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,142,  dataSourceName = dsn;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,143, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,144, /** @return data source name */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,145, public final String getDataSourceName() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,146,  return dataSourceName;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,147, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,148,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,149, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,150,  Set the data source descripton. This property is not mandatory.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,151,  It is used for informational purposes only.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,152,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,153,  @param desc the description of the data source
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,154,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,155, public final void setDescription(String desc) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,156,  description = desc;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,157, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,158, /** @return description */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,159, public final String getDescription() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,160,  return description;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,161, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,162,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,163, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,164,  Set the <code>user</code> property for the data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,165,  This is user name for any data source getConnection() call
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,166,  that takes no arguments.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,167, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,168, public final void setUser(String user) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,169,  this.user = user;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,170, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,171, /** @return user */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,172, public final String getUser() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,173,  return user;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,174, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,175,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,176, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,177,  Set the <code>password</code> property for the data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,178,  This is user's password for any data source getConnection() call
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,179,  that takes no arguments.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,180, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,181, public final void setPassword(String password) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,182,  this.password = password;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,183, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,184, /** @return password */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,185, public final String getPassword() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,186,  return password;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,187, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,188,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,189, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,190,  * DataSource methods
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,191,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,192,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,193,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,194, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,195,  * Gets the maximum time in seconds that this data source can wait
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,196,  * while attempting to connect to a database.  A value of zero
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,197,  * means that the timeout is the default system timeout
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,198,  * if there is one; otherwise it means that there is no timeout.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,199,"  * When a data source object is created, the login timeout is"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,200,  * initially zero.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,201,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,202,  * @return the data source login time limit
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,203,  * @exception SQLException if a database access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,204,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,205, public int getLoginTimeout() throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,206, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,207,  return loginTimeout;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,208, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,209,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,210, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,211,  * Sets the maximum time in seconds that this data source will wait
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,212,  * while attempting to connect to a database.  A value of zero
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,213,  * specifies that the timeout is the default system timeout
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,214,  * if there is one; otherwise it specifies that there is no timeout.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,215,"  * When a data source object is created, the login timeout is"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,216,  * initially zero.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,217,  <P>
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,218,  Derby ignores this property.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,219,  * @param seconds the data source login time limit
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,220,  * @exception SQLException if a database access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,221,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,222, public void setLoginTimeout(int seconds) throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,223, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,224,  loginTimeout = seconds;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,225, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,226,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,227,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,228, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,229,  * Get the log writer for this data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,230,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,231,  * <p>The log writer is a character output stream to which all logging
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,232,  * and tracing messages for this data source object instance will be
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,233,  * printed.  This includes messages printed by the methods of this
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,234,"  * object, messages printed by methods of other objects manufactured"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,235,"  * by this object, and so on.  Messages printed to a data source"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,236,  * specific log writer are not printed to the log writer associated
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,237,  * with the java.sql.Drivermanager class.  When a data source object is
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,238,"  * created the log writer is initially null, in other words, logging"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,239,  * is disabled.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,240,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,241,"  * @return the log writer for this data source, null if disabled"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,242,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,243,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,244, public PrintWriter getLogWriter() throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,245, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,246,  return printer;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,247, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,249, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,250,  * Set the log writer for this data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,251,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,252,  * <p>The log writer is a character output stream to which all logging
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,253,  * and tracing messages for this data source object instance will be
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,254,  * printed.  This includes messages printed by the methods of this
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,255,"  * object, messages printed by methods of other objects manufactured"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,256,"  * by this object, and so on.  Messages printed to a data source"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,257,  * specific log writer are not printed to the log writer associated
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,258,  * with the java.sql.Drivermanager class. When a data source object is
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,259,"  * created the log writer is initially null, in other words, logging"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,260,  * is disabled.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,261,  *
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,262,"  * @param out the new log writer; to disable, set to null"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,263,  * @exception SQLException if a database-access error occurs.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,264,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,265, public void setLogWriter(PrintWriter out) throws SQLException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,266, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,267,  printer = out;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,268, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,269,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,270, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,271, ** Reference methods etc.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,272, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,273,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,274, /*
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,275,  * Object Factory method
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,276,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,277,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,278, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,279,  Re-Create Derby datasource given a reference.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,280,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,281,  @param obj The possibly null object containing location or reference
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,282,  information that can be used in creating an object.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,283,"  @param name The name of this object relative to nameCtx, or null if no"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,284,  name is specified.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,285,  @param nameCtx The context relative to which the name parameter is
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,286,"  specified, or null if name is relative to the default initial context."
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,287,  @param environment The possibly null environment that is used in
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,288,  creating the object.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,289,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,290,  @return One of the Derby datasource object created; null if an
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,291,  object cannot be created.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,292,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,293,  @exception Exception  if this object factory encountered an exception
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,294,"  while attempting to create an object, and no other object factories are"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,295,  to be tried.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,296,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,297," public Object getObjectInstance(Object obj,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,298,"         Name name,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,299,"         Context nameCtx,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,300,         Hashtable environment)
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,301,   throws Exception
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,302, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,303,  Reference ref = (Reference)obj;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,304,  String classname = ref.getClassName();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,305,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,306,  Object ds = Class.forName(classname).newInstance();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,307,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,308,  for (Enumeration e = ref.getAll(); e.hasMoreElements(); ) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,309,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,310,   RefAddr attribute = (RefAddr) e.nextElement();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,311,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,312,   String propertyName = attribute.getType();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,313,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,314,   String value = (String) attribute.getContent();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,315,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,316,"   String methodName = ""set"" + propertyName.substring(0,1).toUpperCase(java.util.Locale.ENGLISH) + propertyName.substring(1);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,317,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,318,   Method m;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,319,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,320,   Object argValue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,321,   try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,322,"    m = ds.getClass().getMethod(methodName, STRING_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,323,    argValue = value;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,324,   } catch (NoSuchMethodException nsme) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,325,    try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,326,"     m = ds.getClass().getMethod(methodName, INT_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,327,     argValue = Integer.valueOf(value);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,328,    } catch (NoSuchMethodException nsme2) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,329,"     m = ds.getClass().getMethod(methodName, BOOLEAN_ARG);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,330,     argValue = Boolean.valueOf(value);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,331,    }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,332,   }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,333,"   m.invoke(ds, new Object[] { argValue });"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,334,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,335,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,336,  return ds;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,337, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,338,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,339, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,340,  Referenceable method.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,341,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,342,  @exception NamingException cannot find named object
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,343,  */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,344, public final Reference getReference() throws NamingException
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,345, {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,346,  // These fields will be set by the JNDI server when it decides to
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,347,  // materialize a data source.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,348,"  Reference ref = new Reference(this.getClass().getName(),"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,349,"           ""org.apache.derby.jdbc.ReferenceableDataSource"","
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,350,           null);
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,351,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,352,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,353,  // Look for all the getXXX methods in the class that take no arguments.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,354,  Method[] methods = this.getClass().getMethods();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,355,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,356,  for (int i = 0; i < methods.length; i++) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,357,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,358,   Method m = methods[i];
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,359,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,360,   // only look for simple getter methods.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,361,   if (m.getParameterTypes().length != 0)
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,362,    continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,363,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,364,   // only non-static methods
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,365,   if (Modifier.isStatic(m.getModifiers()))
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,366,    continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,367,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,368,   // Only getXXX methods
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,369,   String methodName = m.getName();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,370,"   if ((methodName.length() < 5) || !methodName.startsWith(""get""))"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,371,    continue;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,372,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,373,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,374,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,375,   Class returnType = m.getReturnType();
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,376,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,377,   if (Integer.TYPE.equals(returnType) || STRING_ARG[0].equals(returnType) || Boolean.TYPE.equals(returnType)) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,378,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,379,    // setSomeProperty
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,380,    // 01234
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,381,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,382,"    String propertyName = methodName.substring(3,4).toLowerCase(java.util.Locale.ENGLISH).concat(methodName.substring(4));"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,383,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,384,    try {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,385,"     Object ov = m.invoke(this, null);"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,386,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,387,"     //Need to check for nullability for all the properties, otherwise"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,388,"     //rather than null, ""null"" string gets stored in jndi."
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,389,     if (ov != null) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,390,"      ref.add(new StringRefAddr(propertyName, ov.toString()));"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,391,     }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,392,    } catch (IllegalAccessException iae) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,393,    } catch (InvocationTargetException ite) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,394,    }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,395,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,396,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,397,   }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,398,  }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,399,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,400,  return ref;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,401, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,402,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,403,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,404, void update() {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,405, }
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,406,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,407, /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,408,  Return a connection for the Derby family of data source implementations.
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,409, */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,410," java.sql.Connection getConnection(String username, String password, boolean requestPassword) throws SQLException {"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,411,  return null;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,412, }
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,182,            Assert.fail(e.toString());
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,91,   final EmbeddedBaseDataSource dataSource;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,228,   public final Reference getReference() throws NamingException
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,230,       // These fields will be set by the JNDI server when it decides to
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,231,       // materialize a data source.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,232,       Reference ref = new Reference(
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,233,"               this.getClass().getName(),"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,234,"               ""org.apache.derby.jdbc.ReferenceableDataSource"","
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,235,               null);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,239,       return ref;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,251,      */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,179,public class EmbeddedDataSource40 extends EmbeddedDataSource {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,220,     * initially zero. {@see #setLoginTimeout}.
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,234,   if (ad == null && noSchema && !forCallStatement)
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,235,   {
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,236,    // Resolve to a built-in SYSFUN function but only
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,237,    // if this is a function call and the call
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,238,    // was not qualified. E.g. COS(angle). The
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,239,    // SYSFUN functions are not in SYSALIASES but
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,240,"    // an in-memory table, set up in DataDictioanryImpl."
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,241,"    sd = getSchemaDescriptor(""SYSFUN"", true);"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,242,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,243,"    resolveRoutine(fromList, subqueryList, aggregateVector, sd);"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,244,   }
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,245,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,33,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,36,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,44, * Test the syntax for creating procedures.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,60,        if (JDBC.vmSupportsJSR169())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,61,"            return new TestSuite(""Empty LangProcedureTest. JSR169 does not support jdbc:default:connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,62,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,63,            return TestConfiguration.defaultSuite(LangProcedureTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,87,"                ""42622"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,88,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,89,"                ""create procedure a234567890123456789012345678901234567890123"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,90,"                        + ""456789012345678901234567890123456789012345678901234567890123"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,91,"                        + ""45678901234567890123456789() language java external name """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,92,"                        + ""'asdf.asdf' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,96,"                ""42X01"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,97,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,98,"                ""CREATE PROCEDURE ASSEMBLY_PARTS (IN ASSEMBLY_NUM INTEGER, """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,99,"                        + ""OUT NUM_PARTS INTEGER, OUT COST DOUBLE) EXTERNAL NAME """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,100,"                        + ""'parts!assembly' DYNAMIC RESULT SETS 1 LANGUAGE C """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,101,"                        + ""PARAMETER STYLE GENERAL"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,105,"                ""42X62"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,106,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,107,"                ""create procedure sys.proc1() language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,108,"                        + ""external name 'java.lang.System.gc' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,112,"                ""42613"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,113,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,114,"                ""create procedure noclass() language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,115,"                        + ""external name 'asdf.asdf' parameter style java language java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,116,"        assertStatementError(""42613"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,117,"                ""create procedure noclass() parameter style java language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,118,"                        + ""external name 'asdf.asdf' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,120,"                ""42613"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,121,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,122,"                ""create procedure noclass() external name 'asdf.xxxx' """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,123,"                        + ""language java external name 'asdf.asdf' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,125,"                ""42X01"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,126,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,127,"                ""create procedure noclass() parameter style java language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,128,"                        + ""external name 'asdf.asdf' parameter style derby_rs_collection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,134,"        assertStatementError(""42X01"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,135,"                ""create procedure missing03() language java parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,153,"                ""42X01"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,154,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,155,"                ""create procedure nullinput2() returns null on null input """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,156,"                        + ""language java parameter style java external name 'foo.bar'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,157,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,158,"        // BLOB, CLOB, and long parameters aren't supported."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,159,"        assertStatementError(""42962"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,160,"                ""create procedure NO_BLOB(IN P1 BLOB(3k)) language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,161,"                        + ""parameter style java external name 'no.blob'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,162,"        assertStatementError(""42962"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,163,"                ""create procedure NO_CLOB(IN P1 CLOB(3k)) language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,164,"                        + ""parameter style java external name 'no.clob'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,165,"        assertStatementError(""42962"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,166,"                ""create procedure NO_LVC(IN P1 LONG VARCHAR) language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,167,"                        + ""parameter style java external name 'no.lvc'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,171,"                + ""(IN FRED INT, OUT RON CHAR(10), IN FRED INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,174,"                + ""(IN \""FreD\"" INT, OUT RON CHAR(10), IN \""FreD\"" INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,177,"                + ""(IN \""FRED\"" INT, OUT RON CHAR(10), IN fred INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,181,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,182,"                .execute(""create procedure DUP_POK"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,183,"                        + ""(IN \""FreD\"" INT, OUT RON CHAR(10), IN fred INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,184,"                        + ""language java parameter style java external name 'no.dupok'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,188,"        assertStatementError(""42Y03"", s, ""CALL APP.NSP(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,191,"        assertStatementError(""42X15"", s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,192,"                ""call syscs_util.syscs_set_database_property(\""foo\"", \""bar\"")"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,207,        // INT doesn't match String
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,208,"        s.execute(""CREATE PROCEDURE SIGNATURE_BUG_DERBY_258_A(IN A INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,209,"                + ""LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,210,"                + ""EXTERNAL NAME 'java.lang.System.load(java.lang.String)'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,212,"                ""CALL APP.SIGNATURE_BUG_DERBY_258_A(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,213,"        s.execute(""DROP PROCEDURE SIGNATURE_BUG_DERBY_258_A"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,216,"        s.execute(""CREATE FUNCTION SIGNATURE_BUG_DERBY_258_B(A INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,217,"                + ""RETURNS VARCHAR(128) LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,218,"                + ""EXTERNAL NAME 'java.lang.Integer.toString(int, int)'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,220,"                ""VALUES APP.SIGNATURE_BUG_DERBY_258_B(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,221,"        s.execute(""DROP FUNCTION SIGNATURE_BUG_DERBY_258_B"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,224,"        s.execute(""CREATE PROCEDURE SIGNATURE_BUG_DERBY_258_C(IN A INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,225,"                + ""LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,226,"                + ""EXTERNAL NAME 'java.lang.System.gc()'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,228,"                ""CALL APP.SIGNATURE_BUG_DERBY_258_C(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,229,"        s.execute(""DROP PROCEDURE SIGNATURE_BUG_DERBY_258_C"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,232,"        s.execute(""CREATE PROCEDURE SIGNATURE_BUG_DERBY_258_F(IN A INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,233,"                + ""LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,234,"                + ""EXTERNAL NAME 'java.lang.System.gc('"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,236,"                ""CALL APP.SIGNATURE_BUG_DERBY_258_F(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,237,"        s.execute(""DROP PROCEDURE SIGNATURE_BUG_DERBY_258_F"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,240,"        s.execute(""CREATE PROCEDURE SIGNATURE_BUG_DERBY_258_G(IN A INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,241,"                + ""LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,242,"                + ""EXTERNAL NAME 'java.lang.System.gc(,,)'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,244,"                ""CALL APP.SIGNATURE_BUG_DERBY_258_G(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,245,"        s.execute(""DROP PROCEDURE SIGNATURE_BUG_DERBY_258_G"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,248,"        s.execute(""CREATE PROCEDURE SIGNATURE_BUG_DERBY_258_H(IN A INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,249,"                + ""LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,250,"                + ""EXTERNAL NAME 'java.lang.System.gc(, ,)'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,252,"                ""CALL APP.SIGNATURE_BUG_DERBY_258_H(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,253,"        s.execute(""DROP PROCEDURE SIGNATURE_BUG_DERBY_258_H"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,256,"        s.execute(""CREATE PROCEDURE SIGNATURE_BUG_DERBY_258_I(IN A INT) """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,257,"                + ""LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,258,"                + ""EXTERNAL NAME 'java.lang.System.gc(int ,)'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,260,"                ""CALL APP.SIGNATURE_BUG_DERBY_258_I(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,261,"        s.execute(""DROP PROCEDURE SIGNATURE_BUG_DERBY_258_I"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,263,"        s.execute(""CREATE PROCEDURE DERBY_3304() """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,264,"                + "" DYNAMIC RESULT SETS 1 LANGUAGE JAVA PARAMETER STYLE JAVA """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,265,"                + "" EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.DERBY_3304'"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,266,"                + "" MODIFIES SQL DATA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,268,"        ResultSet rs = s.executeQuery(""CALL APP.DERBY_3304()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,270,"        s.execute(""DROP PROCEDURE DERBY_3304"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,285,        Connection conn = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,286,        Statement stm = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,287,"        conn = DriverManager.getConnection(""jdbc:default:connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,288,        stm = conn.createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,304,"        s.execute(""create procedure noclass() language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,305,"                + ""external name 'asdf.asdf' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,306,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,307,"                .execute(""create procedure nomethod() language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,308,"                        + ""external name 'java.lang.Integer.asdf' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,309,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,310,"                .execute(""create procedure notstatic() language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,311,"                        + ""external name 'java.lang.Integer.equals' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,312,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,313,"                .execute(""create procedure notvoid() language java """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,314,"                        + ""external name 'java.lang.Runtime.getRuntime' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,337,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,338,"                .execute(""create procedure PROCDUP() language java external name 'okAPP.ok0' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,339,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,340,"                .execute(""create procedure s1.PROCDUP() language java external name 'oks1.ok0' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,341,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,342,"                .execute(""create procedure s2.PROCDUP() language java external name 'oks2.ok0' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,345,"                ""X0Y68"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,346,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,347,"                ""create procedure PROCDUP() language java external name 'failAPP.fail0' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,349,"                ""X0Y68"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,350,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,351,"                ""create procedure s1.PROCDUP() language java external name 'fails1.fail0' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,353,"                ""X0Y68"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,354,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,355,"                ""create procedure s2.PROCDUP() language java external name 'fails2.fail0' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,357,"                ""APP.PROCDUP AS okAPP.ok0() LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,358,"                ""S1.PROCDUP AS oks1.ok0() LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,359,"                ""S2.PROCDUP AS oks2.ok0() LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,368,"                ""0A000"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,369,"                s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,370,"                ""create procedure S1.NOTYET() SPECIFIC fred language java external name 'failAPP.fail0' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,386,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,387,"                .execute(""create procedure ambiguous01(p1 INTEGER, p2 CHAR(20)) dynamic result sets 1 language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,392,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,393,"                .execute(""create procedure ambiguous02(p1 INTEGER, p2 INTEGER) dynamic result sets 1 language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous2'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,397,        // verify we can find it with a Java signature
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,398,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,399,"                .execute(""create procedure ambiguous03(p1 INTEGER, p2 INTEGER) dynamic result sets 1 language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous2(int,java.lang.Integer)'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,400,"        s.execute(""{call ambiguous03(1,NULL)}"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,402,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,403,"                .execute(""create procedure ambiguous04(p1 INTEGER, p2 INTEGER) dynamic result sets 1 language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous2(java.lang.Integer,int)'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,404,"        s.execute(""{call ambiguous04(NULL, 1)}"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,419,        PreparedStatement ps = conn
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,420,"                .prepareStatement(""select schemaname, alias, CAST (((javaclassname || '.' ) || CAST (aliasinfo AS VARCHAR(1000))) AS VARCHAR(2000)) AS SIGNATURE """
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,421,"                        + "" from sys.sysaliases A, sys.sysschemas S where alias like ? and A.schemaid = S.schemaid ORDER BY 1,2,3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,464,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,465,"                .execute(""create procedure za() language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.zeroArg' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,481,"            ps = prepareStatement(""call za(?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,496,"        String[] sysAliasDefinition = { ""APP.ZA AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.zeroArg() LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,497,"        String[] dbMetadataDefinition = { ""APP.ZA AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.zeroArg type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,512,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,513,"                .execute(""create procedure ir(p1 int) MODIFIES SQL DATA dynamic result sets 0 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertRow' parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,514,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,515,"                .execute(""create procedure ir2(p1 int, p2 char(10)) language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertRow' MODIFIES SQL DATA parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,516,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,517,"        String[] sysaliasDefinition = { ""APP.IR AS org.apache.derbyTesting.functionTeststs.tests.lang.LangProcedureTest.insertRow(IN P1 INTEGER) LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,518,"        String[] dbMetadataDefinition = { ""APP.IR AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertRow type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,520,"        checkMatchingProcedures(conn, ""IR1"", sysaliasDefinition,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,523,"        sysaliasDefinition = new String[] { ""APP.IR2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertRow(IN P1 INTEGER,IN P2 CHAR(10)) LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,524,"        dbMetadataDefinition = new String[] { ""APP.IR2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertRow type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,529,"        assertCallError(""42Y03"", ""CALL IR()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,531,"        CallableStatement ir1 = prepareCall(""CALL IR(?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,550,"        ir1 = conn.prepareCall(""CALL APP.IR(?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,554,"        CallableStatement ir2 = conn.prepareCall(""CALL IR2(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,565,"        ir2.setString(2, ""'012345678990'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,571,        if (!conn.getAutoCommit())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,580,        if (!conn.getAutoCommit())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,583,"        assertCallError(""38000"", ""CALL IR2(2, 'no way')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,584,"        assertCallError(""07000"", ""CALL IR2(?, 'no way')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,585,"        assertCallError(""07000"", ""CALL IR2(2, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,606,"                ""create procedure DRS(p1 int) parameter style JAVA READS SQL DATA dynamic result sets -1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,608,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,609,"                .execute(""create procedure DRS(p1 int) parameter style JAVA READS SQL DATA dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,611,"        String[] sysaliasDefinition = { ""APP.DRS AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows(IN P1 INTEGER) LANGUAGE JAVA PARAMETER STYLE JAVA READS SQL DATA DYNAMIC RESULT SETS 1"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,612,"        String[] dbMetadataDefinition = { ""APP.DRS AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,617,"        assertCallError(""42Y03"", ""CALL DRS()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,618,"        assertCallError(""42Y03"",""CALL DRS(?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,620,"        CallableStatement drs1 = prepareCall(""CALL DRS(?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,629,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,630,"                .execute(""create procedure DRS2(p1 int, p2 int) parameter style JAVA READS SQL DATA dynamic result sets 2 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,631,"        sysaliasDefinition = new String[] { ""APP.DRS2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows(IN P1 INTEGER,IN P2 INTEGER) LANGUAGE JAVA PARAMETER STYLE JAVA READS SQL DATA DYNAMIC RESULT SETS 2"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,632,"        dbMetadataDefinition = new String[] { ""APP.DRS2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,639,"        drs2 = conn.prepareCall(""CALL DRS2(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,698,            if ((pass == 1) || (pass == 2))
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,700,            else if (pass == 3)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,724,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,725,"                .execute(""create procedure irdrs(p1 int) dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.missingDynamicParameter' parameter style JAVA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,726,"        assertCallError(""42X50"", ""CALL IRDRS(?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,731,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,732,"                .execute(""create procedure rsi(p1 int) dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.badDynamicParameter' parameter style JAVA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,733,"        assertCallError(""42X50"", ""CALL rsi(?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,739,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,740,"                .execute(""create procedure zadrs() dynamic result sets 4 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.zeroArgDynamicResult' parameter style  JAVA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,741,"        CallableStatement zadrs = conn.prepareCall(""CALL ZADRS()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,744,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,746,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,753,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,754,"                .execute(""create procedure way.toomany(p1 int, p2 int) READS SQL DATA dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows' parameter style  JAVA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,755,"        CallableStatement toomany = conn.prepareCall(""CALL way.toomany(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,780,        //Run following test in embedded only until DERBY-3414 is fixed. As
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,781,"        //identified in DERBY-3414, the rollback inside the java procedure"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,782,        //is not closing all the resultsets when run in network server mode.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,785,"            s.execute(""create table dellater1(i int not null primary key, b char(15))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,786,"            s.executeUpdate(""INSERT INTO dellater1 VALUES(1,'a'),(2,'b'),(3,'c'),(4,'d')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,787,"            s.executeUpdate(""CREATE TABLE DELLATER2(c11 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,788,"            s.executeUpdate(""INSERT INTO DELLATER2 VALUES(1),(2),(3),(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,790,"            ResultSet rs1 = s.executeQuery(""SELECT * FROM dellater2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,797,"            ResultSet resultSet = s1.executeQuery(""VALUES (1, 2), (3, 4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,800,            s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,801,"            .execute(""create procedure procWithRollback(p1 int) parameter style JAVA READS SQL DATA dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.rollbackInsideProc'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,802,"            drs1 = prepareCall(""CALL procWithRollback(3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,804,            //Following shows that the rollback inside the java procedure will
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,805,            //cuase procedure to return no resultset (A procedure does
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,806,"            //not return closed resultsets). In 10.2 codeline though, java"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,807,            //procedure returns a closed resultset if there is a rollback
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,808,            //inside the java procedure.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,813,            //Following shows that the rollback inside the java procedure will
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,814,            //only close the resultset created before the rollback. The
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,815,            //resultset created after the rollback will remain open and if it
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,816,            //is a resultset returned through the procedure then it will be
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,817,            //available to the caller of the procedure. Notice that even though
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,818,"            //the procedure is defined to 2 return dynamic resultsets, only one"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,819,            //is returned because the other one was closed as a result of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,820,            //rollback.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,821,"            s.execute(""create procedure procWithRollbackAnd2Resulsets""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,822,"              ""(p1 int) parameter style JAVA READS SQL DATA dynamic ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,823,"              ""result sets 2 language java external name ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,824,"              ""'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.rollbackInsideProcWith2ResultSets'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,825,"            drs1 = prepareCall(""CALL procWithRollbackAnd2Resulsets(3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,831,            //Create a procedure which does an insert into a table. Then call
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,832,            //it with parameters such that insert will fail because of
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,833,            //duplicate key. The procedure also has couple select statements
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,834,            //The exception thrown for duplicate key should close the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,835,            //resultsets associated with select statement and we should be
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,836,            //able to drop the tables used in the select queries without
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,837,            //running into locking issues.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,838,            s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,839,"            .execute(""create procedure insertCausingRollback""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,840,"              ""(p1 int, p2 CHAR(20))  MODIFIES SQL DATA ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,841,"              ""dynamic result sets 1 language java external ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,842,"              ""name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertCausingRollback' ""+"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,843,"              ""parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,844,"            s.executeUpdate(""CREATE TABLE DELLATER3(c31 int)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,845,"            s.executeUpdate(""INSERT INTO DELLATER3 VALUES(1),(2),(3),(4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,847,"            drs1 = prepareCall(""CALL insertCausingRollback(3,'3')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,850,"            s.execute(""DROP TABLE DELLATER1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,851,"            s.execute(""DROP TABLE DELLATER2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,852,"            s.execute(""DROP TABLE DELLATER3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,863,            Connection conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,864,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,865,                // Create objects.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,866,                Statement s = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,867,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,868,                // Clob.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,869,"                s.execute(""create table lobCheckOne (c clob(30))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,870,"                s.execute(""insert into lobCheckOne values (cast "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,871,"                                  ""('yayorsomething' as clob(30)))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,872,"                s.execute(""insert into lobCheckOne values (cast "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,873,"                                          ""('yayorsomething2' as clob(30)))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,874,"                s.execute(""create procedure clobproc () parameter style java "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,875,"                        ""language java external name "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,876,"                                  ""'org.apache.derbyTesting.functionTests.util.ProcedureTest.clobselect' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,877,"                                  ""dynamic result sets 3 reads sql data"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,878,                // Blob.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,879,"                s.execute(""create table lobCheckTwo (b blob(30))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,880,"                s.execute(""insert into lobCheckTwo values (cast "" + ""("" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,881,"                                  TestUtil.stringToHexLiteral(""101010001101"") +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,882,"                                  "" as blob(30)))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,883,"                s.execute(""insert into lobCheckTwo values (cast "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,884,"                                  ""("" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,885,"                                  TestUtil.stringToHexLiteral(""101010001101"") +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,886,"                                  "" as blob(30)))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,887,"                s.execute(""create procedure blobproc () parameter style java "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,888,"                        ""language java external name "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,889,"                        ""'org.apache.derbyTesting.functionTests.util.ProcedureTest.blobselect' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,890,"                        ""dynamic result sets 1 reads sql data"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,893,                try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,895,                        // Clobs.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,896,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,897,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,898,"                        CallableStatement cs = conn.prepareCall(""CALL clobproc()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,899,                        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,900,                        ResultSet rs = cs.getResultSet();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,901,"                        JDBC.assertFullResultSet(rs, new String[][] {{""yayorsomething""},{""yayorsomething2""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,902,                        cs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,903,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,904,                        // Blobs.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,905,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,906,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,907,"                        cs = conn.prepareCall(""CALL blobproc()"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,908,                        cs.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,909,                        rs = cs.getResultSet();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,910,"                        String [][] expectedRows = {{""003100300031003000310030003000300031003100300031""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,911,"                                                    {""003100300031003000310030003000300031003100300031""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,912,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,913,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,914,"                        JDBC.assertFullResultSet(rs, expectedRows);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,915,                        cs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,916,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,917,                } catch (Exception e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,918,"                        System.out.println(""FAIL: Encountered exception:"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,919,                        e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,920,                }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,922,                try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,923,                // Clean up.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,924,"                        s.execute(""drop table lobCheckOne"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,925,"                        s.execute(""drop table lobCheckTwo"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,926,"                        s.execute(""drop procedure clobproc"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,927,"                        s.execute(""drop procedure blobproc"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,928,                        s.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,929,                } catch (Exception e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,930,"                        System.out.println(""FAIL: Cleanup for lob result sets test:"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,931,                        e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,932,                }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,934,                return;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,936,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,944,        if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,958,"        if (action.equals(""noautocommit""))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,960,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,964,"        if (action.equals(""noautocommit""))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,966,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,986,"        JDBC.assertFullResultSet(lrs, new String[][] { { ""3"" } });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,992,"            // executing statement to force auto commit on open CALL statement"")"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1002,"                if (action.equals(""autocommit""))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1003,"                    fail(""FAIL - result set open in auto commit mode after another statement execution"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1013,"        if (action.equals(""statement""))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1015,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1023,                if (expectClosed && !usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1024,"                    fail(""FAIL - result set open in auto commit mode after another statement execution"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1026,                if (expectClosed)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1028,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1029,                else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1036,"            if (action.equals(""statement""))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1038,            else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1046,"            if (action.equals(""autocommit"") || action.equals(""statement""))"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1048,            else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1062,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1064,        else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1222,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1223,        //The resultset created here is a dynamic resultset and will be
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1224,        //available to the caller of the java procedure (provided that there
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1225,        //is no SQL exception thrown inside of this procedure. An exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1226,        //will cause Derby to close this resultset).
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1231,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1232,        //The resultset created here has the lifetime of this procedure
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1233,        //and is not available to the caller of the procedure.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1238,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1239,"        //Depending on the value of p1, following may throw duplicate key"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1240,"        //exception. If that happens, both the dynamic resultset and local"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1241,        //resultset created above will get closed and locks held by them
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1242,        //and insert statement will be released
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1251,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1268,        if (p2 == 99)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1295,"        rs[0] = stmt.executeQuery(""SELECT * FROM "" + table);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1304,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1305,"                .execute(""create table PT1(A INTEGER not null primary key, B CHAR(10), C VARCHAR(20))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1306,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1307,"                .execute(""create procedure PT1(IN a int, IN b char(10), c varchar(20)) parameter style java dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter1' MODIFIES SQL DATA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1309,"        String[] sysaliasDefinition = { ""APP.PT1 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter1(IN A INTEGER,IN B CHAR(10),IN C VARCHAR(20)) LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA DYNAMIC RESULT SETS 1"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1310,"        String[] dbMetadataDefinition = { ""APP.PT1 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter1 type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1311,"        String[] columnDefinition = { ""procedureColumnIn A INTEGER"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1312,"                ""procedureColumnIn B CHAR"", ""procedureColumnIn C VARCHAR"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1317,"        CallableStatement pt1 = conn.prepareCall(""CALL PT1(?, ?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1334,        pt1
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1335,                .setString(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1336,"                        2,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1337,"                        ""abc                                                                           "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1338,        pt1
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1339,                .setString(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1340,"                        3,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1341,"                        ""efgh                                                                             "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1354,"        s.execute(""DROP procedure PT1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1356,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1357,"                .execute(""create procedure PT2(IN a int, IN b DECIMAL(4), c DECIMAL(7,3)) parameter style java dynamic result sets 1 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter2' MODIFIES SQL DATA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1359,"        sysaliasDefinition = new String[] { ""APP.PT2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter2(IN A INTEGER,IN B DECIMAL(4,0),IN C DECIMAL(7,3)) LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA DYNAMIC RESULT SETS 1"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1360,"        dbMetadataDefinition = new String[] { ""APP.PT2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter2 type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1367,"        CallableStatement pt2 = conn.prepareCall(""CALL PT2(?, ?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1404,"        s.execute(""DROP procedure PT2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1406,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1407,"                .execute(""create procedure PTSMALLINT2(IN p_in SMALLINT, INOUT p_inout SMALLINT, OUT p_out SMALLINT) parameter style java dynamic result sets 0 language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.pSMALLINT' NO SQL"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1408,"        sysaliasDefinition = new String[] { ""APP.PTSMALLINT2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.pSMALLINT(IN P_IN SMALLINT,INOUT P_INOUT SMALLINT,OUT P_OUT SMALLINT) LANGUAGE JAVA PARAMETER STYLE JAVA NO SQL"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1409,"        dbMetadataDefinition = new String[] { ""APP.PTSMALLINT2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.pSMALLINT type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1417,"        CallableStatement ptsi = conn.prepareCall(""CALL PTSMALLINT2(?, ?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1465,"        s.execute(""DROP procedure PTSMALLINT2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1466,"        s.execute(""DROP TABLE PT1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1475,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1476,"                .execute(""create procedure OP1(OUT a int, IN b int) parameter style java language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.outparams1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1477,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1478,"        String[] sysaliasDefinition = { ""APP.OP1 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.outparams1(OUT A INTEGER,IN B INTEGER) LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1479,"        String[] dbMetadataDefinition = { ""APP.OP1 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.outparams1 type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1486,        // check execute via a Statement fails for use of OUT parameter
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1489,"            s.execute(""CALL OP1(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1490,"            fail(""FAIL execute succeeded on OUT param with Statement"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1493,            if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1498,        // check execute via a PreparedStatement fails for use of OUT parameter
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1501,        if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1503,"                prepareStatement(""CALL OP1(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1504,"                fail(""FAIL prepare succeeded on OUT param with PreparedStatement"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1508,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1510,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1511,"        CallableStatement op = prepareCall(""CALL OP1(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1522,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1523,"                .execute(""create procedure OP2(INOUT a int, IN b int) parameter style java language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams2'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1524,"        sysaliasDefinition = new String[] { ""APP.OP2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams2(INOUT A INTEGER,IN B INTEGER) LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1525,"        dbMetadataDefinition = new String[] { ""APP.OP2 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams2 type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1533,"            s.execute(""CALL OP2(?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1534,"            fail(""FAIL execute succeeded on INOUT param with Statement"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1537,            if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1543,            // check execute via a PreparedStatement fails for use of INOUT
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1546,"                prepareStatement(""CALL OP2(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1547,"                fail(""FAIL prepare succeeded on INOUT param with PreparedStatement"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1555,"        op = prepareCall(""CALL OP2(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1565,        // INOUT & OUT procedures with variable length
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1566,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1567,"                .execute(""create procedure OP3(INOUT a CHAR(10), IN b int) parameter style java language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams3'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1569,"        op = prepareCall(""CALL OP3(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1579,        // INOUT & OUT DECIMAL procedures with variable length
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1580,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1581,"                .execute(""create procedure OP4(OUT a DECIMAL(4,2), IN b VARCHAR(255)) parameter style java language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams4'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1582,"        sysaliasDefinition = new String[] { ""APP.OP4 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams4(OUT A DECIMAL(4,2),IN B VARCHAR(255)) LANGUAGE JAVA PARAMETER STYLE JAVA MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1583,"        dbMetadataDefinition = new String[] { ""APP.OP4 AS org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams4 type procedureNoResult"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1590,"        op = prepareCall(""CALL OP4(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1629,        // DERBY-2513 Network client allows OUT parameter to be set
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1631,            // try to set an OUT param
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1634,"                fail(""FAIL - set OUT param to value"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1641,"                fail(""FAIL - set OUT param to null"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1647,"                fail(""FAIL - set OUT param to null"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1654,        // can we get an IN param?
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1665,            if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1667,            else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1674,"        op = conn.prepareCall(""CALL OP4(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1680,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1682,            else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1687,        s
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1688,"                .execute(""create procedure OP4INOUT(INOUT a DECIMAL(4,2), IN b VARCHAR(255)) parameter style java language java external name 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams4'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1690,"        op = conn.prepareCall(""CALL OP4INOUT(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1715,        if (usingEmbedded()) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1716,            // Not run for client due to DERBY-2515
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1717,            op.execute();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1718,"            assertEquals(""56.00"", op.getBigDecimal(1).toString());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1719,            assertFalse(op.wasNull());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1720,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1772,"        op = conn.prepareCall(""CALL OP4INOUT(?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1776,"            fail(""FAIL - execute succeeded without registration of INOUT parameter"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1778,            if (usingDerbyNetClient())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1780,            else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1785,"        s.execute(""DROP PROCEDURE OP1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1786,"        s.execute(""DROP PROCEDURE OP2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1787,"        s.execute(""DROP PROCEDURE OP3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1788,"        s.execute(""DROP PROCEDURE OP4"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1789,"        s.execute(""DROP PROCEDURE OP4INOUT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1798,"        s.execute(""CREATE SCHEMA SQLC"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1799,"        s.execute(""CREATE TABLE SQLC.SQLCONTROL_DML(I INT)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1800,"        s.execute(""INSERT INTO SQLC.SQLCONTROL_DML VALUES 4"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1802,"        String[] control = { """", ""NO SQL"", ""CONTAINS SQL"", ""READS SQL DATA"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1803,"                ""MODIFIES SQL DATA"" };"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1807,            StringBuffer cp = new StringBuffer(256);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1808,"            cp.append(""CREATE PROCEDURE SQLC.SQLCONTROL1_"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1810,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1811,"                    .append("" (OUT E1 VARCHAR(128), OUT E2 VARCHAR(128), OUT E3 VARCHAR(128), OUT E4 VARCHAR(128), OUT E5 VARCHAR(128), OUT E6 VARCHAR(128), OUT E7 VARCHAR(128)) "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1813,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1814,"                    .append("" PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1821,"            cp.append(""CREATE PROCEDURE SQLC.SQLCONTROL2_"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1823,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1824,"                    .append("" (OUT E1 VARCHAR(128), OUT E2 VARCHAR(128), OUT E3 VARCHAR(128), OUT E4 VARCHAR(128), OUT E5 VARCHAR(128), OUT E6 VARCHAR(128), OUT E7 VARCHAR(128)) "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1826,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1827,"                    .append("" PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl2'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1834,"            cp.append(""CREATE PROCEDURE SQLC.SQLCONTROL3_"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1836,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1837,"                    .append("" (OUT E1 VARCHAR(128), OUT E2 VARCHAR(128), OUT E3 VARCHAR(128), OUT E4 VARCHAR(128), OUT E5 VARCHAR(128), OUT E6 VARCHAR(128), OUT E7 VARCHAR(128)) "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1839,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1840,"                    .append("" PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl3'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1847,"            cp.append(""CREATE PROCEDURE SQLC.SQLCONTROL4_"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1849,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1850,"                    .append("" (IN SQLC INTEGER, OUT E1 VARCHAR(128), OUT E2 VARCHAR(128), OUT E3 VARCHAR(128), OUT E4 VARCHAR(128), OUT E5 VARCHAR(128), OUT E6 VARCHAR(128), OUT E7 VARCHAR(128), OUT E8 VARCHAR(128)) "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1852,            cp
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1853,"                    .append("" PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl4'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1860,        if (!conn.getAutoCommit())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1947,            String type = control[i];
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1948,            if (type.length() == 0)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1949,"                type = ""DEFAULT (MODIFIES SQL DATA)"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1950,"            // System.out.print(""/*sqlControl_"" + i + ""*/{"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1952,"                CallableStatement cs = conn.prepareCall(""CALL SQLC.SQLCONTROL"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1979,"        // SQL DATA procedure, a MODIFIES SQL DATA cannot be called."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1982,"                { ""CALL SQLC.SQLCONTROL2_0 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1990,"                { ""CALL SQLC.SQLCONTROL2_1 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,1995,"                { ""CALL SQLC.SQLCONTROL2_2 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2001,"                { ""CALL SQLC.SQLCONTROL2_3 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2007,"                { ""CALL SQLC.SQLCONTROL2_4 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2017,"                { ""CALL SQLC.SQLCONTROL2_0 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2020,"                { ""CALL SQLC.SQLCONTROL2_1 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2023,"                { ""CALL SQLC.SQLCONTROL2_2 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2026,"                { ""CALL SQLC.SQLCONTROL2_3 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2029,"                { ""CALL SQLC.SQLCONTROL2_4 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2036,"                { ""CALL SQLC.SQLCONTROL2_0 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2039,"                { ""CALL SQLC.SQLCONTROL2_1 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2044,"                { ""CALL SQLC.SQLCONTROL2_2 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2050,"                { ""CALL SQLC.SQLCONTROL2_3 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2053,"                { ""CALL SQLC.SQLCONTROL2_4 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2058,"                { ""CALL SQLC.SQLCONTROL2_0 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2061,"                { ""CALL SQLC.SQLCONTROL2_1 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2066,"                { ""CALL SQLC.SQLCONTROL2_2 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2072,"                { ""CALL SQLC.SQLCONTROL2_3 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2078,"                { ""CALL SQLC.SQLCONTROL2_4 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2083,"                { ""CALL SQLC.SQLCONTROL2_0 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2091,"                { ""CALL SQLC.SQLCONTROL2_1 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2096,"                { ""CALL SQLC.SQLCONTROL2_2 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2102,"                { ""CALL SQLC.SQLCONTROL2_3 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2108,"                { ""CALL SQLC.SQLCONTROL2_4 (?, ?, ?, ?, ?, ?, ?) "","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2120,"        s.execute(""CREATE TABLE SQLC.SQLCONTROL_DML(I INT)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2121,"        s.execute(""INSERT INTO SQLC.SQLCONTROL_DML VALUES 4"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2123,            String type = control[i];
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2124,            if (type.length() == 0)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2125,"                type = ""DEFAULT (MODIFIES SQL DATA)"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2126,"            // System.out.println(""/* dmlSqlControl_"" + i + ""*/{"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2127,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2129,                String ttype = control[t];
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2130,                if (ttype.length() == 0)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2131,"                    ttype = ""DEFAULT (MODIFIES SQL DATA)"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2132,"                // System.out.println(""{"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2134,"                        .prepareCall(""CALL SQLC.SQLCONTROL4_"" + i"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2149,                    if (so == null)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2164,"                ""CALL SQLCONTROL3_0 (?, ?, ?, ?, ?, ?, ?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2166,"        s.execute(""DROP TABLE SQLC.SQLCONTROL_DML"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2169,"            s.execute(""DROP PROCEDURE SQLCONTROL1_"" + i);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2170,"            s.execute(""DROP PROCEDURE SQLCONTROL2_"" + i);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2171,"            s.execute(""DROP PROCEDURE SQLCONTROL4_"" + i);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2173,"        s.execute(""DROP TABLE SQLC.SQLCONTROL_DDL"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2174,"        s.execute(""SET SCHEMA APP"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2175,"        s.execute(""DROP SCHEMA SQLC RESTRICT"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2199,        ps = conn
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2200,"                .prepareStatement(""select a,b, length(b), c, length(c) from PT1 where a = ?"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2236,        if (p2 == 8)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2238,        else if (p2 == 9)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2240,        else if (p2 == 10)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2245,        if (p2 == null)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2247,        else {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2248,            if (p1[0] == null)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2250,            else
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2311,        Connection conn = DriverManager
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2312,"                .getConnection(""jdbc:default:connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2337,"        String sql = ""CALL SQLC.SQLCONTROL2_"" + sqlc"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2357,            StringBuffer sb = new StringBuffer(128);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2362,                if (ss == null)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2379,        StringBuffer sb = new StringBuffer(128);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2382,        if (len > 15)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2389,                while (rs.next())
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2390,"                    sb.append(""- ROW("" + rs.getString(1) + "")"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2393,"                sb.append(""-UPDATE "" + s.getUpdateCount());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2403,                if (ss == null)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2408,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangProcedureTest.java,2426,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,79,   suite.addTest(LangScripts.suite());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,83,   suite.addTest(OuterJoinTest.suite());
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,464,  if(!expression.isConstantExpression()){
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,465,   return false;
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,466,  }
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,467,
java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java,468,  return expression.getConstantValueAsObject() instanceof Integer;
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-  lib-debug.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-10.6 .1.0-lib-debug.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/client/org/apache/derby/client/ClientPooledConnection.java,35,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection.java,95,"    public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,145,"    public ClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,468,"    protected NetXAConnection getNetXAConnection (ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,29,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/ClientPooledConnection40.java,50,"    public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientPooledConnection40.java,59,"    public ClientPooledConnection40(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,32,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection.java,38,    private ClientXADataSource derbyds_ = null;
java/client/org/apache/derby/client/ClientXAConnection.java,46,"    public ClientXAConnection(ClientXADataSource ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,51,        derbyds_ = ds;
java/client/org/apache/derby/client/ClientXAConnection.java,99,    public ClientXADataSource getDataSource() throws SqlException {
java/client/org/apache/derby/client/ClientXAConnection.java,100,        if (logWriter_ != null) {
java/client/org/apache/derby/client/ClientXAConnection.java,101,"            logWriter_.traceExit(this, ""getDataSource"", derbyds_);"
java/client/org/apache/derby/client/ClientXAConnection.java,102,        }
java/client/org/apache/derby/client/ClientXAConnection.java,104,        return derbyds_;
java/client/org/apache/derby/client/ClientXAConnection.java,105,    }
java/client/org/apache/derby/client/ClientXAConnection.java,107,"    public NetXAConnection createControlConnection(NetLogWriter logWriter,"
java/client/org/apache/derby/client/ClientXAConnection.java,108,"                                                   String user,"
java/client/org/apache/derby/client/ClientXAConnection.java,109,"                                                   String password,"
java/client/org/apache/derby/client/ClientXAConnection.java,110,"                                                   org.apache.derby.jdbc.ClientDataSource dataSource,"
java/client/org/apache/derby/client/ClientXAConnection.java,111,"                                                   int rmId,"
java/client/org/apache/derby/client/ClientXAConnection.java,112,                                                   boolean isXAConn) throws SQLException {
java/client/org/apache/derby/client/ClientXAConnection.java,113,        try
java/client/org/apache/derby/client/ClientXAConnection.java,114,        {
java/client/org/apache/derby/client/ClientXAConnection40.java,29,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/ClientXAConnection40.java,52,"    public ClientXAConnection40 (ClientXADataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,26,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,30,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,47,"    ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,48,"            LogWriter logWriter,String user,String password)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,49,            throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,56,"    ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,57,"            LogWriter logWriter,String user,String password,int rmId)"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,58,            throws SQLException;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,65,"    ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,226,"            org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,String user,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,247,"            String user,String password,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,248,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,258,"            LogWriter netLogWriter,String ipaddr,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,259,"            int portNumber,org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,286,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,int rmId,"
java/client/org/apache/derby/client/am/Configuration.java,38,    public static int traceLevel__ = org.apache.derby.jdbc.ClientBaseDataSource.TRACE_ALL;
java/client/org/apache/derby/client/am/Connection.java,32,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/Connection.java,33,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/Connection.java,173,    public org.apache.derby.jdbc.ClientBaseDataSource dataSource_;
java/client/org/apache/derby/client/am/Connection.java,176,    public int clientSSLMode_ = ClientBaseDataSource.SSL_OFF;
java/client/org/apache/derby/client/am/Connection.java,189,"    protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,190,"                         String user,"
java/client/org/apache/derby/client/am/Connection.java,191,"                         String password,"
java/client/org/apache/derby/client/am/Connection.java,192,                         org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,193,                                                           throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,198,"    protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,199,"                         String user,"
java/client/org/apache/derby/client/am/Connection.java,200,"                         String password,"
java/client/org/apache/derby/client/am/Connection.java,201,"                         boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,202,                         org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,203,                                                           throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,210,"    protected void initConnection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,211,                                  org.apache.derby.jdbc.ClientBaseDataSource
java/client/org/apache/derby/client/am/Connection.java,212,                                            dataSource) throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,250,            ClientBaseDataSource.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/Connection.java,260,"    protected Connection(org.apache.derby.client.am.LogWriter logWriter,"
java/client/org/apache/derby/client/am/Connection.java,261,"                         boolean isXAConn,"
java/client/org/apache/derby/client/am/Connection.java,262,                         org.apache.derby.jdbc.ClientBaseDataSource dataSource)
java/client/org/apache/derby/client/am/Connection.java,263,                                                            throws SqlException {
java/client/org/apache/derby/client/am/Connection.java,269,        user_ = ClientDataSource.propertyDefault_user;
java/client/org/apache/derby/client/am/Connection.java,282,            ClientBaseDataSource.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/Connection.java,326,        user_ = ClientDataSource.getUser(properties);
java/client/org/apache/derby/client/am/Connection.java,327,        retrieveMessageText_ = ClientDataSource.getRetrieveMessageText(properties);
java/client/org/apache/derby/client/am/Connection.java,332,        clientSSLMode_ = ClientDataSource.getClientSSLMode(properties);
java/client/org/apache/derby/client/am/LogWriter.java,29,import java.util.Enumeration;
java/client/org/apache/derby/client/am/LogWriter.java,31,import javax.naming.NamingException;
java/client/org/apache/derby/client/am/LogWriter.java,32,import javax.naming.RefAddr;
java/client/org/apache/derby/client/am/LogWriter.java,33,import javax.naming.Reference;
java/client/org/apache/derby/client/am/LogWriter.java,34,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,35,import org.apache.derby.jdbc.ClientDataSource;
java/client/org/apache/derby/client/am/LogWriter.java,215,        } else if (instance instanceof Connection && loggingEnabled(ClientDataSource.TRACE_CONNECTION_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,217,        } else if (instance instanceof ResultSet && loggingEnabled(ClientDataSource.TRACE_RESULT_SET_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,219,        } else if (instance instanceof CallableStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,221,        } else if (instance instanceof PreparedStatement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,223,        } else if (instance instanceof Statement && loggingEnabled(ClientDataSource.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,227,        else if (instance instanceof Blob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for lobs !!
java/client/org/apache/derby/client/am/LogWriter.java,232,        else if (instance instanceof Clob && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for bobs !!
java/client/org/apache/derby/client/am/LogWriter.java,237,        else if (instance instanceof DatabaseMetaData && loggingEnabled(ClientDataSource.TRACE_ALL)) // add a trace level for dbmd ??
java/client/org/apache/derby/client/am/LogWriter.java,242,        else if (loggingEnabled(ClientDataSource.TRACE_XA_CALLS) &&
java/client/org/apache/derby/client/am/LogWriter.java,245,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,248,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,251,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,254,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,257,        } else if (loggingEnabled(ClientDataSource.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,848,        if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,861,        if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,875,        if (!loggingEnabled(ClientDataSource.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,890,        if (!loggingEnabled(ClientDataSource.TRACE_PARAMETER_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,912,        if (!loggingEnabled(ClientDataSource.TRACE_RESULT_SET_META_DATA) || columnMetaData == null) {
java/client/org/apache/derby/client/am/LogWriter.java,993,    public void traceConnectEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,997,        if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,1000,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1013,        if (loggingEnabled(ClientDataSource.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,1016,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1021,"    public void traceConnectResetEntry(Object instance, LogWriter logWriter,"
java/client/org/apache/derby/client/am/LogWriter.java,1022,"                                        String user, ClientBaseDataSource ds) {"
java/client/org/apache/derby/client/am/LogWriter.java,1027,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1036,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1045,        if (loggingEnabled(ClientDataSource.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,1053,    private void traceConnectsResetEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1067,    private void traceConnectsEntry(ClientBaseDataSource dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,1248,     * Obtain a set of Properties for the ClientBaseDataSource
java/client/org/apache/derby/client/am/LogWriter.java,1250,    private Properties getProperties(ClientBaseDataSource cds)
java/client/org/apache/derby/client/am/LogWriter.java,1253,        Properties properties = new Properties();
java/client/org/apache/derby/client/am/LogWriter.java,1254,
java/client/org/apache/derby/client/am/LogWriter.java,1255,        try {
java/client/org/apache/derby/client/am/LogWriter.java,1256,            Reference ref = cds.getReference();
java/client/org/apache/derby/client/am/LogWriter.java,1257,
java/client/org/apache/derby/client/am/LogWriter.java,1258,            for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
java/client/org/apache/derby/client/am/LogWriter.java,1259,
java/client/org/apache/derby/client/am/LogWriter.java,1260,                RefAddr attribute = (RefAddr) e.nextElement();
java/client/org/apache/derby/client/am/LogWriter.java,1261,
java/client/org/apache/derby/client/am/LogWriter.java,1262,                String propertyKey = attribute.getType();
java/client/org/apache/derby/client/am/LogWriter.java,1263,                String value = (String) attribute.getContent();
java/client/org/apache/derby/client/am/LogWriter.java,1264,
java/client/org/apache/derby/client/am/LogWriter.java,1265,                // Don't display the password or even its length
java/client/org/apache/derby/client/am/LogWriter.java,1266,                if (Attribute.PASSWORD_ATTR.equals(propertyKey)) {
java/client/org/apache/derby/client/am/LogWriter.java,1267,"                    value = ""********"";"
java/client/org/apache/derby/client/am/LogWriter.java,1268,                }
java/client/org/apache/derby/client/am/LogWriter.java,1269,
java/client/org/apache/derby/client/am/LogWriter.java,1270,                if(value != null)
java/client/org/apache/derby/client/am/LogWriter.java,1271,"                    properties.setProperty(propertyKey, value);"
java/client/org/apache/derby/client/am/LogWriter.java,1272,            }
java/client/org/apache/derby/client/am/LogWriter.java,1273,        } catch (NamingException e) {
java/client/org/apache/derby/client/am/LogWriter.java,1274,"            throw new SqlException(this,"
java/client/org/apache/derby/client/am/LogWriter.java,1275,"                new ClientMessageId(SQLState.JAVA_EXCEPTION),"
java/client/org/apache/derby/client/am/LogWriter.java,1276,"                e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/am/LogWriter.java,1278,
java/client/org/apache/derby/client/am/LogWriter.java,1281,
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,24,import java.rmi.UnexpectedException;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,25,import java.sql.Connection;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,35,import org.apache.derby.client.am.Configuration;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,46,import org.apache.derby.client.net.NetLogWriter;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,47,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,48,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,63,"    public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,64,"            LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,71,"    public ClientPooledConnection newClientPooledConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,72,"            LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,73,"            String password,int rmId) throws SQLException {"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,79,"    public ClientXAConnection newClientXAConnection(ClientBaseDataSource ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,82,"        return new ClientXAConnection((ClientXADataSource)ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,256,"            org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,280,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,292,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,318,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,49,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,50,import org.apache.derby.jdbc.ClientXADataSource;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,70,"            ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,78,"            ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,86,"        ClientBaseDataSource ds, LogWriter logWriter,String user,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,89,"        return new ClientXAConnection40((ClientXADataSource)ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,247,"            org.apache.derby.jdbc.ClientBaseDataSource clientDataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,271,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,283,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl40.java,308,"            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,38,import org.apache.derby.jdbc.ClientBaseDataSource;
java/client/org/apache/derby/client/net/NetConnection.java,193,"    public NetConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetConnection.java,194,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,195,"                         String user,"
java/client/org/apache/derby/client/net/NetConnection.java,196,                         String password) throws SqlException {
java/client/org/apache/derby/client/net/NetConnection.java,218,        String password = ClientBaseDataSource.getPassword(properties);
java/client/org/apache/derby/client/net/NetConnection.java,219,        securityMechanism_ = ClientBaseDataSource.getSecurityMechanism(properties);
java/client/org/apache/derby/client/net/NetConnection.java,231,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,244,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,283,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,295,"                            org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,1405,        // (see ClientBaseDataSource.updateDataSourceValues().
java/client/org/apache/derby/client/net/NetConnection40.java,62,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,78,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,86,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetConnection40.java,117,"                         org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,66,"    public NetXAConnection(NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,67,"                           String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,68,"                           String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,69,"                           org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,70,"                           int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,71,"                           boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,72,                           ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/client/net/NetXAConnection.java,261,"    protected NetConnection createNetConnection (NetLogWriter netLogWriter,"
java/client/org/apache/derby/client/net/NetXAConnection.java,262,"                           String user,"
java/client/org/apache/derby/client/net/NetXAConnection.java,263,"                           String password,"
java/client/org/apache/derby/client/net/NetXAConnection.java,264,"                           org.apache.derby.jdbc.ClientBaseDataSource dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,265,"                           int rmId,"
java/client/org/apache/derby/client/net/NetXAConnection.java,266,"                           boolean isXAConn,"
java/client/org/apache/derby/client/net/NetXAConnection.java,267,                           ClientPooledConnection cpc) throws SqlException {
java/client/org/apache/derby/client/net/OpenSocketAction.java,54,        case org.apache.derby.jdbc.ClientBaseDataSource.SSL_BASIC:
java/client/org/apache/derby/client/net/OpenSocketAction.java,57,        case org.apache.derby.jdbc.ClientBaseDataSource.SSL_PEER_AUTHENTICATION:
java/client/org/apache/derby/client/net/OpenSocketAction.java,60,        case org.apache.derby.jdbc.ClientBaseDataSource.SSL_OFF:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,24,import java.io.File;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,25,import java.io.PrintWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,26,import java.io.Serializable;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,27,import java.lang.reflect.InvocationTargetException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,28,import java.lang.reflect.Method;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,29,import java.lang.reflect.Modifier;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,30,import java.security.AccessController;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,31,import java.security.PrivilegedAction;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,32,import java.sql.SQLException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,33,import java.util.NoSuchElementException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,35,import java.util.StringTokenizer;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,41,import org.apache.derby.client.am.ClientMessageId;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,42,import org.apache.derby.client.am.Configuration;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,43,import org.apache.derby.client.am.Connection;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,44,import org.apache.derby.client.am.LogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,45,import org.apache.derby.client.am.SqlException;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,46,import org.apache.derby.client.net.NetConfiguration;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,47,import org.apache.derby.client.net.NetLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,48,import org.apache.derby.shared.common.error.ExceptionUtil;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,49,import org.apache.derby.shared.common.reference.Attribute;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,50,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,55,"public abstract class ClientBaseDataSource implements Serializable, Referenceable {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,56,    private static final long serialVersionUID = -7660172643035173692L;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,57,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,58,    // Spec requires DH algorithm with 32bytes prime to be used
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,59,    // Not all JCE implementations have support for this. E.g.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,60,    // Sun JCE does not support DH(prime of 32bytes).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,61,    // store information if client JVM has JCE loaded that
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,62,    // can support the necessary algorithms required for EUSRIDPWD
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,63,    // (encrypted userid and password) security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,64,    // this information is needed to decide if security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,65,    // can be upgraded to EUSRIDPWD or not
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,66,    // See getUpgradedSecurityMechanism()
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,67,    static final boolean SUPPORTS_EUSRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,68,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,69,    static
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,70,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,71,        boolean supports_eusridpwd = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,72,        try
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,73,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,74,            // The EncryptionManager class will instantiate objects of the required
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,75,            // security algorithms that are needed for EUSRIDPWD
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,76,            // An exception will be thrown if support is not available
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,77,            // in the JCE implementation in the JVM in which the client
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,78,            // is loaded.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,79,            new org.apache.derby.client.am.EncryptionManager(null);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,80,            supports_eusridpwd = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,81,        }catch(Exception e)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,82,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,83,"            // if an exception is thrown, ignore exception."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,84,            // set SUPPORTS_EUSRIDPWD to false indicating that the client
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,85,            // does not support EUSRIDPWD security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,86,            supports_eusridpwd = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,87,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,88,        SUPPORTS_EUSRIDPWD = supports_eusridpwd;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,89,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,90,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,91,"    // The loginTimeout jdbc 2 data source property is not supported as a jdbc 1 connection property,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,92,    // because loginTimeout is set by the jdbc 1 api via java.sql.DriverManager.setLoginTimeout().
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,93,"    // The databaseName, serverName, and portNumber data source properties are also not supported as connection properties"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,94,    // because they are extracted from the jdbc 1 database url passed on the connection request.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,95,"    // However, all other data source properties should probably also be supported as connection properties."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,96,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,97,    //---------------------contructors/finalizers---------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,98,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,99,"    // This class is abstract, hide the default constructor"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,100,    ClientBaseDataSource() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,101,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,102,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,103,    // ---------------------------- loginTimeout -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,104,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,105,    // was serialized in 1.0 release
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,106,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,107,     * The time in seconds to wait for a connection request on this data source. The default value of zero indicates
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,108,     * that either the system time out be used or no timeout limit.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,109,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,110,     * @serial
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,111,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,112,    private int loginTimeout;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,113,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,114,    public synchronized void setLoginTimeout(int seconds) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,115,        this.loginTimeout = seconds;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,116,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,117,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,118,    public int getLoginTimeout() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,119,        return this.loginTimeout;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,120,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,121,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,122,    // ---------------------------- logWriter -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,123,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,124,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,125,"     * The log writer is declared transient, and is not serialized or stored under JNDI."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,126,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,127,     * @see #traceLevel
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,128,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,129,    private transient PrintWriter logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,130,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,131,    public synchronized void setLogWriter(PrintWriter logWriter) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,132,        this.logWriter = logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,133,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,134,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,135,    public PrintWriter getLogWriter() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,136,        return this.logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,137,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,138,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,139,    // ---------------------------- databaseName -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,140,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,141,"    // Stores the relational database name, RDBNAME."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,142,    // The length of the database name may be limited to 18 bytes
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,143,    // and therefore may throw an SQLException.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,144,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,145,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,146,    private String databaseName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,147,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,148,    // databaseName is not permitted in a properties object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,149,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,150,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,151,    // ---------------------------- description ------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,152,    // A description of this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,153,    private String description;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,154,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,155,    // ---------------------------- dataSourceName -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,156,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,157,    // A data source name;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,158,"    // used to name an underlying XADataSource,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,159,    // or ConnectionPoolDataSource when pooling of connections is done.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,160,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,161,    private String dataSourceName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,162,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,163,    // ---------------------------- portNumber -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,164,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,165,    private int portNumber = propertyDefault_portNumber;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,166,    public final static int propertyDefault_portNumber = 1527;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,167,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,168,    // ---------------------------- serverName -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,169,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,170,    // Derby-410 fix.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,171,    private String serverName = propertyDefault_serverName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,172,"    public final static String propertyDefault_serverName = ""localhost"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,173,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,174,    // serverName is not permitted in a properties object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,175,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,176,    //---------------------- client SSL ----------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,177,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,178,    /** The constant indicating that SSL encryption won't be used. */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,179,    public final static int SSL_OFF = 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,180,"    private final static String SSL_OFF_STR = ""off"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,181,    /** The constant indicating that SSL encryption will be used. */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,182,    public final static int SSL_BASIC = 1;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,183,"    private final static String SSL_BASIC_STR = ""basic"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,184,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,185,     * The constant indicating that SSL encryption with peer authentication
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,186,     * will be used.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,187,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,188,    public final static int SSL_PEER_AUTHENTICATION = 2;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,189,    private final static String SSL_PEER_AUTHENTICATION_STR =
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,190,"            ""peerAuthentication"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,191,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,192,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,193,     * Parses the string and returns the corresponding constant for the SSL
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,194,     * mode denoted.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,195,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,196,"     * Valid values are <tt>off</tt>, <tt>basic</tt> and"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,197,     * <tt>peerAuthentication</tt>.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,198,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,199,     * @param s string denoting the SSL mode
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,200,     * @return A constant indicating the SSL mode denoted by the string. If the
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,201,"     *      string is {@code null}, {@link #SSL_OFF} is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,202,     * @throws SqlException if the string has an invalid value
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,203,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,204,    public static final int getSSLModeFromString(String s)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,205,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,206,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,207,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,208,        if (s != null){
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,209,            if (s.equalsIgnoreCase(SSL_OFF_STR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,210,                return SSL_OFF;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,211,            } else if (s.equalsIgnoreCase(SSL_BASIC_STR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,212,                return SSL_BASIC;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,213,            } else if (s.equalsIgnoreCase(SSL_PEER_AUTHENTICATION_STR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,214,                return SSL_PEER_AUTHENTICATION;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,215,            } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,216,"                throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,217,"                        new ClientMessageId(SQLState.INVALID_ATTRIBUTE),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,218,"                        Attribute.SSL_ATTR, s, SSL_OFF_STR + "", "" +"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,219,"                        SSL_BASIC_STR + "", "" + SSL_PEER_AUTHENTICATION_STR);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,220,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,221,        } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,222,            // Default
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,223,            return SSL_OFF;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,224,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,225,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,226,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,227,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,228,     * Returns the SSL mode specified by the property object.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,229,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,230,     * @param properties data source properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,231,     * @return A constant indicating the SSL mode to use. Defaults to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,232,     *      {@link #SSL_OFF} if the SSL attribute isn't specified.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,233,     * @throws SqlException if an invalid value for the SSL mode is specified
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,234,     *      in the property object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,235,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,236,    public static final int getClientSSLMode(Properties properties)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,237,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,238,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,239,        return getSSLModeFromString(properties.getProperty(Attribute.SSL_ATTR));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,240,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,241,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,242,    // ---------------------------- user -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,243,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,244,    // This property can be overwritten by specifing the
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,245,    // username parameter on the DataSource.getConnection() method
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,246,"    // call.  If user is specified, then password must also be"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,247,"    // specified, either in the data source object or provided on"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,248,    // the DataSource.getConnection() call.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,249,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,250,    // Each data source implementation subclass will maintain it's own <code>password</code> property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,251,"    // This password property may or may not be declared transient, and therefore may be serialized"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,252,"    // to a file in clear-text, care must taken by the user to prevent security breaches."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,253,    // Derby-406 fix
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,254,    private String user = propertyDefault_user;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,255,"    public final static String propertyDefault_user = ""APP"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,256,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,257,    public static String getUser(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,258,        String userString = properties.getProperty(Attribute.USERNAME_ATTR);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,259,"        return parseString(userString, propertyDefault_user);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,260,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,261,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,262,    // ---------------------------- securityMechanism -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,263,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,264,    // The source security mechanism to use when connecting to this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,265,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,266,    // Security mechanism options are:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,267,    // <ul>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,268,    // <li> USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,269,    // <li> CLEAR_TEXT_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,270,    // <li> ENCRYPTED_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,271,    // <li> ENCRYPTED_USER_AND_PASSWORD_SECURITY - both password and user are encrypted
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,272,    // <li> STRONG_PASSWORD_SUBSTITUTE_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,273,    // </ul>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,274,    // The default security mechanism is USER_ONLY_SECURITY.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,275,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,276,    // If the application specifies a security
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,277,    // mechanism then it will be the only one attempted.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,278,    // If the specified security mechanism is not supported by the conversation
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,279,    // then an exception will be thrown and there will be no additional retries.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,280,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,281,    // This property is currently only available for the DNC driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,282,    // <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,283,    // Both user and password need to be set for all security mechanism except USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,284,"    // When using USER_ONLY_SECURITY, only the user property needs to be specified."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,285,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,286,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,287,    // constant to indicate that the security mechanism has not been
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,288,"    // explicitly set, either on connection request when using DriverManager"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,289,    // or on the Client DataSource object
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,290,    private final static short SECMEC_HAS_NOT_EXPLICITLY_SET = 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,291,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,292,    // Security Mechanism can be specified explicitly either when obtaining a
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,293,    // connection via a DriverManager or via Datasource.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,294,"    // Via DriverManager, securityMechanism can be set on the connection request using"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,295,    // the 'securityMechanism' attribute.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,296,"    // Via DataSource, securityMechanism can be set by calling setSecurityMechanism()"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,297,    // on the ClientDataSource
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,298,"    // If the security mechanism is not explicitly set as mentioned above, in that case"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,299,"    // the Client will try to upgrade the security mechanism to a more secure one, if possible."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,300,    // @see #getUpgradedSecurityMechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,301,"    // Therefore, need to keep track if the securityMechanism has been explicitly set"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,302,    protected short securityMechanism = SECMEC_HAS_NOT_EXPLICITLY_SET;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,303,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,304,    //  Default security mechanism is USER_ONLY_SECURITY.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,305,    public final static short propertyDefault_securityMechanism =
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,306,                                    (short) NetConfiguration.SECMEC_USRIDONL;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,307,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,308,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,309,    // We use the NET layer constants to avoid a mapping for the NET driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,310,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,311,"     * Return security mechanism if it is set, else upgrade the security mechanism"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,312,     * if possible and return the upgraded security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,313,     * @param properties Look in the properties if securityMechanism is set or not
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,314,"     * if set, return this security mechanism"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,315,     * @return security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,316,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,317,    public static short getSecurityMechanism(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,318,        short secmec;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,319,        String securityMechanismString =
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,320,            properties.getProperty(Attribute.CLIENT_SECURITY_MECHANISM);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,321,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,322,        if ( securityMechanismString != null )
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,323,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,324,"            // security mechanism has been set, do not override, but instead return"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,325,            // the security mechanism that has been set (DERBY-962)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,326,            secmec = Short.parseShort(securityMechanismString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,327,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,328,        else
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,329,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,330,"            // if securityMechanismString is null, this means that"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,331,            // security mechanism has not been set explicitly and not available in
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,332,"            // properties. Hence, do an upgrade of security mechanism if possible"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,333,            // The logic for upgrade of security mechanism uses information about
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,334,"            // if password is available or not, so pass this information also."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,335,            String passwordString = properties.getProperty(Attribute.PASSWORD_ATTR);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,336,            secmec = getUpgradedSecurityMechanism(passwordString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,337,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,338,        return secmec;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,339,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,340,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,341,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,342,     * This method has logic to upgrade security mechanism to a better (more secure)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,343,"     * one if it is possible. Currently derby server only has support for USRIDPWD,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,344,"     * USRIDONL, EUSRIDPWD and USRSSBPWD (10.2+) - this method only considers these"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,345,"     * possibilities. USRIDPWD, EUSRIDPWD and USRSSBPWD require a password, USRIDONL"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,346,     * is the only security mechanism which does not require password.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,347,"     * 1. if password is not available, then security mechanism possible is USRIDONL"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,348,"     * 2. if password is available,then USRIDPWD is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,349,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,350,     * @param password password argument
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,351,     * @return upgraded security mechanism if possible
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,352,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,353,    public static short getUpgradedSecurityMechanism(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,354,"        // if password is null, in that case the only acceptable security"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,355,"        // mechanism is USRIDONL, which is the default security mechanism."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,356,        if ( password == null )
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,357,            return propertyDefault_securityMechanism;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,358,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,359,        // when we have support for more security mechanisms on server
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,360,"        // and client, we should update this upgrade logic to pick"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,361,        // secure security mechanisms before trying out the USRIDPWD
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,362,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,363,        /*
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,364,        // -----------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,365,        // PLEASE NOTE:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,366,"        // When DERBY-1517, DERBY-1755 is fixed, there might be a way to use EUSRIDPWD"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,367,        // when both client and server vm's have support for it. Hence the below
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,368,        // if statement is commented out.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,369,        if (SUPPORTS_EUSRIDPWD)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,370,            return (short)NetConfiguration.SECMEC_EUSRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,371,        else
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,372,            // IMPORTANT NOTE:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,373,            // --------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,374,"            // If DERBY-1517 can be fixed, we should default to"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,375,            // SECMEC_USRSSBPWD (strong password substitute).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,376,"            // Until then, connecting with a 10.2+ client to"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,377,"            // a derby server < 10.2, and hence does not support"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,378,"            // SECMEC_USRSSBPWD as a SECMEC, will cause a DRDA protocol"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,379,"            // exception, as described in DERBY-926)."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,380,            //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,381,            // return (short)NetConfiguration.SECMEC_USRSSBPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,382,         // ----------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,383,         */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,384,         return (short)NetConfiguration.SECMEC_USRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,385,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,386,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,387,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,388,    // ---------------------------- getServerMessageTextOnGetMessage -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,389,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,390,    private boolean retrieveMessageText = propertyDefault_retrieveMessageText;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,391,    public final static boolean propertyDefault_retrieveMessageText = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,392,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,393,    public static boolean getRetrieveMessageText(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,394,        String retrieveMessageTextString = properties.getProperty(Attribute.CLIENT_RETIEVE_MESSAGE_TEXT);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,395,"        return parseBoolean(retrieveMessageTextString, propertyDefault_retrieveMessageText);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,396,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,397,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,398,    // ---------------------------- traceFile -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,399,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,400,    private String traceFile;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,401,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,402,    public static String getTraceFile(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,403,        return properties.getProperty(Attribute.CLIENT_TRACE_FILE);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,404,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,405,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,406,    // ---------------------------- traceDirectory -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,407,    // For the suffix of the trace file when traceDirectory is enabled.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,408,    private transient int traceFileSuffixIndex_ = 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,409,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,410,    private String traceDirectory;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,411,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,412,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,413,     * Check if derby.client.traceDirectory is provided as a JVM property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,414,"     * If yes, then we use that value. If not, then we look for traceDirectory"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,415,     * in the the properties parameter.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,416,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,417,     * @param properties jdbc url properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,418,     * @return value of traceDirectory property
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,419,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,420,    public static String getTraceDirectory(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,421,        String traceDirectoryString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,422,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,423,        traceDirectoryString  = readSystemProperty(Attribute.CLIENT_JVM_PROPERTY_PREFIX+Attribute.CLIENT_TRACE_DIRECTORY);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,424,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,425,        if (traceDirectoryString == null)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,426,            return properties.getProperty(Attribute.CLIENT_TRACE_DIRECTORY);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,427,        else
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,428,            return traceDirectoryString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,429,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,430,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,431,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,432,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,433,     * Read the value of the passed system property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,434,     * @param key name of the system property
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,435,"     * @return value of the system property, null if there is no permission to read the property"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,436,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,437,    private static String readSystemProperty(final String key) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,438,        //Using an anonymous class to read the system privilege because the
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,439,        //method java.security.AccessController.doPrivileged requires an
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,440,        //instance of a class(which implements java.security.PrivilegedAction).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,441,"        //Since readSystemProperty method is static, we can't simply pass ""this"""
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,442,        //to doPrivileged method and have ClientBaseDataSource implement
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,443,        //PrivilegedAction. To get around the static nature of method
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,444,"        //readSystemProperty, have an anonymous class implement PrivilegeAction."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,445,        //This class will read the system property in it's run method and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,446,        //return the value to the caller.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,447,        return AccessController.doPrivileged(new PrivilegedAction<String>() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,448,                public String run() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,449,                    try {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,450,                        return System.getProperty(key);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,451,                    } catch (SecurityException se) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,452,                        // We do not want the connection to fail if the user does not have permission to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,453,"                        // read the property, so if a security exception occurs, just return null and"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,454,                        // continue with the connection.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,455,                        return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,456,                    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,457,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,458,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,459,            );
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,460,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,461,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,462,    // ---------------------------- traceFileAppend -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,463,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,464,    private boolean traceFileAppend = propertyDefault_traceFileAppend;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,465,    public final static boolean propertyDefault_traceFileAppend = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,466,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,467,    public static boolean getTraceFileAppend(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,468,        String traceFileAppendString = properties.getProperty(Attribute.CLIENT_TRACE_APPEND);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,469,"        return parseBoolean(traceFileAppendString, propertyDefault_traceFileAppend);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,470,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,471,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,472,    // ---------------------------- password -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,473,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,474,"    // The password property is defined in subclasses, but the method"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,475,    // getPassword (java.util.Properties properties) is in this class to eliminate
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,476,    // dependencies on j2ee for connections that go thru the driver manager.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,478,    public static String getPassword(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,479,"        return properties.getProperty(""password"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,480,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,481,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,482,    private String password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,483,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,484,    synchronized public final void setPassword(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,485,        this.password = password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,486,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,487,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,488,    public final String getPassword() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,489,        return password;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,490,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,492,    //------------------------ interface methods ---------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,495,        // This method creates a new Reference object to represent this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,496,"        // The class name of the data source object is saved in the Reference,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,497,        // so that an object factory will know that it should create an instance
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,498,        // of that class when a lookup operation is performed. The class
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,499,"        // name of the object factory, org.apache.derby.client.ClientBaseDataSourceFactory,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,500,        // is also stored in the reference.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,501,"        // This is not required by JNDI, but is recommend in practice."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,502,        // JNDI will always use the object factory class specified in the reference when
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,503,"        // reconstructing an object, if a class name has been specified."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,504,        // See the JNDI SPI documentation
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,505,"        // for further details on this topic, and for a complete description of the Reference"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,506,        // and StringRefAddr classes.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,508,        // This ClientBaseDataSource class provides several standard JDBC properties.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,509,        // The names and values of the data source properties are also stored
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,510,        // in the reference using the StringRefAddr class.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,511,        // This is all the information needed to reconstruct a ClientBaseDataSource object.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,513,"        Reference ref = new Reference(this.getClass().getName(), ClientDataSourceFactory.class.getName(), null);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,518,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,527,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,529,    private void addBeanProperties(Reference ref)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,530,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,531,        // Look for all the getXXX methods in the class that take no arguments.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,532,        Method[] methods = this.getClass().getMethods();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,533,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,534,        for (int i = 0; i < methods.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,535,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,536,            Method m = methods[i];
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,537,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,538,            // only look for simple getter methods.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,539,            if (m.getParameterTypes().length != 0)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,540,                continue;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,541,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,542,            // only non-static methods
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,543,            if (Modifier.isStatic(m.getModifiers()))
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,544,                continue;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,545,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,546,            // Only getXXX methods
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,547,            String methodName = m.getName();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,548,"            if ((methodName.length() < 5) || !methodName.startsWith(""get""))"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,549,                continue;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,550,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,551,            Class returnType = m.getReturnType();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,552,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,553,            if (Integer.TYPE.equals(returnType)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,554,                    || Short.TYPE.equals(returnType)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,555,                    || String.class.equals(returnType)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,556,                    || Boolean.TYPE.equals(returnType)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,557,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,558,                // setSomeProperty
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,559,                // 01234
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,560,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,561,"                String propertyName = methodName.substring(3, 4).toLowerCase("
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,562,                        java.util.Locale.ENGLISH).concat(
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,563,                        methodName.substring(4));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,564,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,565,                try {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,566,"                    Object ov = m.invoke(this, null);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,567,"                    // Need to check if property value is null, otherwise"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,568,"                    // ""null"" string gets stored."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,569,                    if (ov != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,570,"                        ref.add(new StringRefAddr(propertyName, ov.toString()));"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,571,                    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,572,                } catch (IllegalAccessException iae) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,573,                } catch (InvocationTargetException ite) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,574,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,575,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,576,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,577,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,578,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,579,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,580,    // ----------------------supplemental methods---------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,581,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,582,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,583,    //---------------------- helper methods --------------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,584,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,585,    // The java.io.PrintWriter overrides the traceFile setting.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,586,"    // If neither traceFile nor jdbc logWriter are set, then null is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,587,    // logWriterInUseSuffix used only for trace directories to indicate whether
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,588,"    // log writer is use is from xads, cpds, sds, ds, driver, config, reset."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,589,    LogWriter computeDncLogWriterForNewConnection(String logWriterInUseSuffix) throws SqlException {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,590,"        return computeDncLogWriterForNewConnection(logWriter, traceDirectory, traceFile, traceFileAppend, traceLevel, logWriterInUseSuffix, traceFileSuffixIndex_++);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,591,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,592,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,593,    // Called on for connection requests.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,594,    // The java.io.PrintWriter overrides the traceFile setting.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,595,"    // If neither traceFile, nor logWriter, nor traceDirectory are set, then null is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,596,"    static LogWriter computeDncLogWriterForNewConnection(PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, int traceLevel, String logWriterInUseSuffix, int traceFileSuffixIndex) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,597,        int globaltraceFileSuffixIndex = Configuration.traceFileSuffixIndex__++;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,598,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,599,        // compute regular dnc log writer if there is any
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,600,"        LogWriter dncLogWriter = computeDncLogWriter(logWriter, traceDirectory, traceFile, traceFileAppend, logWriterInUseSuffix, traceFileSuffixIndex, traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,601,        if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,602,            return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,603,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,604,        // compute global default dnc log writer if there is any
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,605,"        dncLogWriter = computeDncLogWriter(null, Configuration.traceDirectory__, Configuration.traceFile__, Configuration.traceFileAppend__, ""_global"", globaltraceFileSuffixIndex, Configuration.traceLevel__);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,606,        return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,607,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,608,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,609,    // Compute a DNC log writer before a connection is created.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,610,"    static LogWriter computeDncLogWriter(PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, String logWriterInUseSuffix, int traceFileSuffixIndex, int traceLevel) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,611,"        // Otherwise, the trace file will still be created even TRACE_NONE."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,612,        if (traceLevel == TRACE_NONE) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,613,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,614,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,615,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,616,"        PrintWriter printWriter = computePrintWriter(logWriter, traceDirectory, traceFile, traceFileAppend, logWriterInUseSuffix, traceFileSuffixIndex);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,617,        if (printWriter == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,618,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,619,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,620,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,621,"        LogWriter dncLogWriter = new NetLogWriter(printWriter, traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,622,        if (printWriter != logWriter &&
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,623,                (traceDirectory != null || traceFile != null))
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,624,        // When printWriter is an internal trace file and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,625,"        // traceDirectory is not null, each connection has"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,626,"        // its own trace file and the trace file is not cached,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,627,        // so we can close it when DNC log writer is closed.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,628,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,629,            dncLogWriter.printWriterNeedsToBeClosed_ = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,630,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,631,        return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,632,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,633,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,634,    // Compute a DNC log writer after a connection is created.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,635,    // Declared public for use by am.Connection.  Not a public external.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,636,"    public static LogWriter computeDncLogWriter(Connection connection, PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, String logWriterInUseSuffix, int traceFileSuffixIndex, int traceLevel) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,637,"        // Otherwise, the trace file will still be created even TRACE_NONE."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,638,        if (traceLevel == TRACE_NONE) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,639,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,640,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,641,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,642,"        PrintWriter printWriter = computePrintWriter(logWriter, traceDirectory, traceFile, traceFileAppend, logWriterInUseSuffix, traceFileSuffixIndex);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,643,        if (printWriter == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,644,            return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,645,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,646,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,647,"        LogWriter dncLogWriter = connection.agent_.newLogWriter_(printWriter, traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,648,        if (printWriter != logWriter &&
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,649,                (traceDirectory != null || traceFile != null))
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,650,        // When printWriter is an internal trace file and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,651,"        // traceDirectory is not null, each connection has"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,652,"        // its own trace file and the trace file is not cached,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,653,        // so we can close it when DNC log writer is closed.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,654,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,655,            dncLogWriter.printWriterNeedsToBeClosed_ = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,656,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,657,        return dncLogWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,658,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,659,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,660,    // This method handles all the override semantics.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,661,"    // The logWriter overrides the traceFile, and traceDirectory settings."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,662,"    // If neither traceFile, nor logWriter, nor traceDirectory are set, then null is returned."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,663,"    static PrintWriter computePrintWriter(PrintWriter logWriter, String traceDirectory, String traceFile, boolean traceFileAppend, String logWriterInUseSuffix, int traceFileSuffixIndex) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,664,        if (logWriter != null)  // java.io.PrintWriter is specified
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,665,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,666,            return logWriter;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,667,        } else { // check trace file setting.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,668,            if (traceDirectory != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,669,                String fileName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,670,                if (traceFile == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,671,"                    fileName = traceDirectory + File.separator + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,672,                } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,673,"                    fileName = traceDirectory + File.separator + traceFile + logWriterInUseSuffix + ""_"" + traceFileSuffixIndex;"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,674,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,675,"                return LogWriter.getPrintWriter(fileName, true); // no file append and not enable caching."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,676,            } else if (traceFile != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,677,"                return LogWriter.getPrintWriter(traceFile, traceFileAppend);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,678,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,679,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,680,        return null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,681,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,682,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,683,"    private static boolean parseBoolean(String boolString, boolean defaultBool) {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,684,        if (boolString != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,685,"            return (boolString.equalsIgnoreCase(""true"") || boolString.equalsIgnoreCase(""yes""));"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,686,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,687,        return defaultBool;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,688,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,689,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,690,"    private static String parseString(String string, String defaultString) {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,691,        if (string != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,692,            return string;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,693,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,694,        return defaultString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,695,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,696,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,697,"    private static int parseInt(String intString, int defaultInt) {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,698,        if (intString != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,699,            return Integer.parseInt(intString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,700,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,701,        return defaultInt;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,702,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,703,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,704,"    // tokenize ""property=value;property=value..."" and returns new properties object"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,705,    //This method is used both by ClientDriver to parse the url and
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,706,    // ClientDataSource.setConnectionAttributes
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,707,"    static Properties tokenizeAttributes(String attributeString, Properties properties) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,708,        Properties augmentedProperties;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,709,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,710,        if (attributeString == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,711,            return properties;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,712,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,713,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,714,        if (properties != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,715,            augmentedProperties = (Properties) properties.clone();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,716,        } else {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,717,            augmentedProperties = new Properties();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,718,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,719,        try {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,720,"            StringTokenizer attrTokenizer = new StringTokenizer(attributeString, "";"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,721,            while (attrTokenizer.hasMoreTokens()) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,722,                String v = attrTokenizer.nextToken();
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,723,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,724,                int eqPos = v.indexOf('=');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,725,                if (eqPos == -1) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,726,"                    throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,727,"                        new ClientMessageId(SQLState.INVALID_ATTRIBUTE_SYNTAX),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,728,                        attributeString);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,729,                }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,730,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,731,"                augmentedProperties.setProperty((v.substring(0, eqPos)).trim(), (v.substring(eqPos + 1)).trim());"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,732,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,733,        } catch (NoSuchElementException e) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,734,"            // A null log writer is passed, because jdbc 1 sqlexceptions are automatically traced"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,735,"            throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,736,"                new ClientMessageId(SQLState.INVALID_ATTRIBUTE_SYNTAX),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,737,"                attributeString, e);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,738,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,739,"        checkBoolean(augmentedProperties, Attribute.CLIENT_RETIEVE_MESSAGE_TEXT);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,740,        return augmentedProperties;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,741,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,742,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,743,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,744,"    private static void checkBoolean(Properties set, String attribute) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,745,"        final String[] booleanChoices = {""true"", ""false""};"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,746,"        checkEnumeration(set, attribute, booleanChoices);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,747,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,750,"    private static void checkEnumeration(Properties set, String attribute, String[] choices) throws SqlException {"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,751,        String value = set.getProperty(attribute);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,752,        if (value == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,753,            return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,754,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,755,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,756,        for (int i = 0; i < choices.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,757,            if (value.toUpperCase(java.util.Locale.ENGLISH).equals(choices[i].toUpperCase(java.util.Locale.ENGLISH))) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,758,                return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,761,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,762,// The attribute value is invalid. Construct a string giving the choices for
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,763,// display in the error message.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,764,"        String choicesStr = ""{"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,765,        for (int i = 0; i < choices.length; i++) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,766,            if (i > 0) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,767,"                choicesStr += ""|"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,768,            }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,769,            choicesStr += choices[i];
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,770,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,771,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,772,"        throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,773,"            new ClientMessageId(SQLState.INVALID_ATTRIBUTE),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,774,"            attribute, value, choicesStr);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,775,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,776,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,777,    /*
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,778,     * Properties to be seen by Bean - access thru reflection.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,779,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,780,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,781,    // -- Stardard JDBC DataSource Properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,782,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,783,    public synchronized void setDatabaseName(String databaseName) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,784,        this.databaseName = databaseName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,785,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,786,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,787,    public String getDatabaseName() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,788,        return this.databaseName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,789,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,790,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,791,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,792,    public synchronized void setDataSourceName(String dataSourceName) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,793,        this.dataSourceName = dataSourceName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,794,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,795,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,796,    public String getDataSourceName() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,797,        return this.dataSourceName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,798,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,799,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,800,    public synchronized void setDescription(String description) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,801,        this.description = description;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,802,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,803,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,804,    public String getDescription() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,805,        return this.description;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,806,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,807,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,808,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,809,    public synchronized void setPortNumber(int portNumber) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,810,        this.portNumber = portNumber;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,811,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,812,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,813,    public int getPortNumber() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,814,        return this.portNumber;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,815,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,816,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,817,    public synchronized void setServerName(String serverName) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,818,        this.serverName = serverName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,819,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,820,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,821,    public String getServerName() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,822,        return this.serverName;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,823,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,824,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,825,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,826,    public synchronized void setUser(String user) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,827,        this.user = user;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,828,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,829,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,830,    public String getUser() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,831,        return this.user;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,832,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,833,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,834,    synchronized public void setRetrieveMessageText(boolean retrieveMessageText) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,835,        this.retrieveMessageText = retrieveMessageText;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,836,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,837,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,838,    public boolean getRetrieveMessageText() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,839,        return this.retrieveMessageText;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,840,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,841,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,842,    // ---------------------------- securityMechanism -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,843,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,844,     * The source security mechanism to use when connecting to this data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,845,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,846,     * Security mechanism options are: <ul>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,847,     * <li> USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,848,     * <li> CLEAR_TEXT_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,849,     * <li> ENCRYPTED_PASSWORD_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,850,     * <li> ENCRYPTED_USER_AND_PASSWORD_SECURITY - both password and user are encrypted
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,851,     * <li> STRONG_PASSWORD_SUBSTITUTE_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,852,     * </ul> The default security mechanism is USER_ONLY SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,853,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,854,     * If the application specifies a security mechanism then it will be the only one attempted. If the specified
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,855,     * security mechanism is not supported by the conversation then an exception will be thrown and there will be no
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,856,     * additional retries.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,857,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,858,     * This property is currently only available for the  DNC driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,859,     * <p/>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,860,     * Both user and password need to be set for all security mechanism except USER_ONLY_SECURITY
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,861,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,862,    // We use the NET layer constants to avoid a mapping for the NET driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,863,    public final static short USER_ONLY_SECURITY = (short) NetConfiguration.SECMEC_USRIDONL;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,864,    public final static short CLEAR_TEXT_PASSWORD_SECURITY = (short) NetConfiguration.SECMEC_USRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,865,    public final static short ENCRYPTED_PASSWORD_SECURITY = (short) NetConfiguration.SECMEC_USRENCPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,866,    public final static short ENCRYPTED_USER_AND_PASSWORD_SECURITY = (short) NetConfiguration.SECMEC_EUSRIDPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,867,    public final static short STRONG_PASSWORD_SUBSTITUTE_SECURITY = (short) NetConfiguration.SECMEC_USRSSBPWD;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,868,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,869,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,870,     * Sets the security mechanism.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,871,     * @param securityMechanism to set
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,872,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,873,    synchronized public void setSecurityMechanism(short securityMechanism) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,874,        this.securityMechanism = securityMechanism;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,875,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,876,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,877,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,878,     * Return the security mechanism.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,879,"     * If security mechanism has not been set explicitly on datasource,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,880,     * then upgrade the security mechanism to a more secure one if possible.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,881,     * @see #getUpgradedSecurityMechanism(String)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,882,     * @return the security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,883,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,884,    public short getSecurityMechanism() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,885,        return getSecurityMechanism(getPassword());
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,886,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,887,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,888,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,889,     * Return the security mechanism for this datasource object.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,890,"     * If security mechanism has not been set explicitly on datasource,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,891,     * then upgrade the security mechanism to a more secure one if possible.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,892,     * @param password  password of user
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,893,     * @see #getUpgradedSecurityMechanism(String)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,894,     * @return the security mechanism
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,895,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,896,    public short getSecurityMechanism(String password) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,897,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,898,        // if security mechanism has not been set explicitly on
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,899,"        // datasource, then upgrade the security mechanism if possible"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,900,        // DERBY-962
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,901,        if ( securityMechanism == SECMEC_HAS_NOT_EXPLICITLY_SET )
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,902,            return getUpgradedSecurityMechanism(password);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,903,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,904,        return securityMechanism;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,905,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,906,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,907,    // ----------------------- ssl
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,908,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,909,    private int sslMode;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,910,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,911,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,912,     * Specifices the SSL encryption mode to use.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,913,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,914,"     * Valid values are <tt>off</tt>, <tt>basic</tt> and"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,915,     * <tt>peerAuthentication</tt>.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,916,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,917,"     * @param mode the SSL mode to use (<tt>off</tt>, <tt>basic</tt> or"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,918,     *      <tt>peerAuthentication</tt>)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,919,     * @throws SqlException if the specified mode is invalid
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,920,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,921,    public void setSsl(String mode)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,922,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,923,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,924,        sslMode = getSSLModeFromString(mode);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,925,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,926,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,927,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,928,     * Returns the SSL encryption mode specified for the data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,929,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,930,"     * @return <tt>off</tt>, <tt>basic</tt> or <tt>peerAuthentication</tt>."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,931,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,932,    public String getSsl() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,933,        switch(sslMode) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,934,        case SSL_OFF:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,935,        default:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,936,            return SSL_OFF_STR;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,937,        case SSL_BASIC:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,938,            return SSL_BASIC_STR;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,939,        case SSL_PEER_AUTHENTICATION:
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,940,            return SSL_PEER_AUTHENTICATION_STR;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,941,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,942,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,943,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,944,    // ----------------------- set/getCreate/ShutdownDatabase ---------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,945,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,946,     * Set to true if the database should be created.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,947,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,948,    private boolean createDatabase;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,949,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,950,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,951,     * Set to true if the database should be shutdown.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,952,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,953,    private boolean shutdownDatabase;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,954,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,955,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,956,     * Set this property to create a new database.  If this property is not
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,957,"     * set, the database (identified by databaseName) is assumed to be already"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,958,     * existing.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,959,"     * @param create if set to the string ""create"", this data source will try"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,960,"     *               to create a new database of databaseName, or boot the"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,961,     *               database if one by that name already exists.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,962,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,963,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,964,    public final void setCreateDatabase(String create) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,965,"        if (create != null && create.equalsIgnoreCase(""create""))"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,966,            this.createDatabase = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,967,        else // reset
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,968,            this.createDatabase = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,969,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,970,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,971,"    /** @return ""create"" if create is set, or null if not"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,972,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,973,    public final String getCreateDatabase() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,974,        String createstr=null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,975,        if (createDatabase)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,976,"            createstr=""create"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,977,        return createstr;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,978,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,979,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,980,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,981,     * Set this property if one wishes to shutdown the database identified by
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,982,     * databaseName.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,983,"     * @param shutdown if set to the string ""shutdown"", this data source will"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,984,     *                 shutdown the database if it is running.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,985,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,986,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,987,    public final void setShutdownDatabase(String shutdown) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,988,"        if (shutdown != null && shutdown.equalsIgnoreCase(""shutdown""))"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,989,            this.shutdownDatabase = true;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,990,        else // reset
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,991,            this.shutdownDatabase = false;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,992,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,993,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,994,"    /** @return ""shutdown"" if shutdown is set, or null if not"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,995,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,996,    public final String getShutdownDatabase() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,997,        String shutdownstr=null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,998,        if (shutdownDatabase)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,999,        {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1000,"            shutdownstr = ""shutdown"";"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1001,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1002,        return shutdownstr;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1003,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1004,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1005,    protected String connectionAttributes = null;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1006,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1007,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1008,     * Set this property to pass in more Derby specific connection URL attributes.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1009,     * <BR>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1010,     * Any attributes that can be set using a property of this DataSource implementation
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1011,"     * (e.g user, password) should not be set in connectionAttributes. Conflicting"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1012,     * settings in connectionAttributes and properties of the DataSource will lead to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1013,     * unexpected behaviour.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1014,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1015,"     * @param prop set to the list of Derby connection attributes separated by semi-colons.   E.g., to specify an"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1016,"     *             encryption bootPassword of ""x8hhk2adf"", and set upgrade to true, do the following: <PRE>"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1017,"     *             ds.setConnectionAttributes(""bootPassword=x8hhk2adf;upgrade=true""); </PRE> See Derby documentation for"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1018,     *             complete list.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1019,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1020,    public final void setConnectionAttributes(String prop) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1021,        connectionAttributes = prop;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1022,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1023,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1024,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1025,     * @return Derby specific connection URL attributes
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1026,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1027,    public final String getConnectionAttributes() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1028,        return connectionAttributes;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1029,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1030,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1031,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1032,    // ---------------------------- traceLevel -----------------------------------
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1033,    //
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1034,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1035,    public final static int TRACE_NONE = 0x0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1036,    public final static int TRACE_CONNECTION_CALLS = 0x1;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1037,    public final static int TRACE_STATEMENT_CALLS = 0x2;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1038,    public final static int TRACE_RESULT_SET_CALLS = 0x4;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1039,    public final static int TRACE_DRIVER_CONFIGURATION = 0x10;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1040,    public final static int TRACE_CONNECTS = 0x20;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1041,    public final static int TRACE_PROTOCOL_FLOWS = 0x40;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1042,    public final static int TRACE_RESULT_SET_META_DATA = 0x80;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1043,    public final static int TRACE_PARAMETER_META_DATA = 0x100;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1044,    public final static int TRACE_DIAGNOSTICS = 0x200;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1045,    public final static int TRACE_XA_CALLS = 0x800;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1046,    public final static int TRACE_ALL = 0xFFFFFFFF;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1047,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1048,    public final static int propertyDefault_traceLevel = TRACE_ALL;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1049,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1050,    protected int traceLevel = propertyDefault_traceLevel;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1051,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1052,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1053,     * Check if derby.client.traceLevel is provided as a JVM property.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1054,"     * If yes, then we use that value. If not, then we look for traceLevel"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1055,     * in the the properties parameter.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1056,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1057,     * @param properties jdbc url properties
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1058,     * @return value of traceLevel property
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1059,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1060,    public static int getTraceLevel(Properties properties) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1061,        String traceLevelString;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1062,        traceLevelString  = readSystemProperty(Attribute.CLIENT_JVM_PROPERTY_PREFIX+Attribute.CLIENT_TRACE_LEVEL);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1063,        if (traceLevelString == null)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1064,            traceLevelString = properties.getProperty(Attribute.CLIENT_TRACE_LEVEL);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1065,"        return parseInt(traceLevelString, propertyDefault_traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1066,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1067,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1068,    synchronized public void setTraceLevel(int traceLevel) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1069,        this.traceLevel = traceLevel;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1070,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1071,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1072,    public int getTraceLevel() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1073,        return this.traceLevel;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1074,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1075,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1076,    public synchronized void setTraceFile(String traceFile) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1077,        this.traceFile = traceFile;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1078,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1079,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1080,    public String getTraceFile() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1081,        return this.traceFile;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1082,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1083,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1084,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1085,    public synchronized void setTraceDirectory(String traceDirectory) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1086,        this.traceDirectory = traceDirectory;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1087,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1088,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1089,    public String getTraceDirectory() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1090,        return this.traceDirectory;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1091,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1092,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1093,    synchronized public void setTraceFileAppend(boolean traceFileAppend) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1094,        this.traceFileAppend = traceFileAppend;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1095,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1096,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1097,    public boolean getTraceFileAppend() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1098,        return this.traceFileAppend;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1099,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1100,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1101,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1102,     * Returns the maximum number of JDBC prepared statements a connection is
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1103,     * allowed to cache.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1104,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1105,     * A basic data source will always return zero. If statement caching is
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1106,"     * required, use a {@link javax.sql.ConnectionPoolDataSource}."
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1107,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1108,     * This method is used internally by Derby to determine if statement
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1109,     * pooling is to be enabled or not.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1110,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1111,"     * @return Maximum number of statements to cache, or <code>0</code> if"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1112,     *      caching is disabled (default).
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1113,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1114,    public int maxStatementsToPool() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1115,        return 0;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1116,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1117,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1118,    // --- private helper methods
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1119,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1120,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1121,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1122,     * The dataSource keeps individual fields for the values that are relevant to the client. These need to be updated
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1123,     * when set connection attributes is called.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1124,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1125,    void updateDataSourceValues(Properties prop)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1126,        throws SqlException
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1127,    {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1128,        if (prop == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1129,            return;
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1130,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1131,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1132,        if (prop.containsKey(Attribute.USERNAME_ATTR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1133,            setUser(getUser(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1134,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1135,        if (prop.containsKey(Attribute.CLIENT_SECURITY_MECHANISM)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1136,            setSecurityMechanism(getSecurityMechanism(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1137,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1138,        if (prop.containsKey(Attribute.CLIENT_TRACE_FILE)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1139,            setTraceFile(getTraceFile(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1140,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1141,        if (prop.containsKey(Attribute.CLIENT_TRACE_DIRECTORY)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1142,            setTraceDirectory(getTraceDirectory(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1143,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1144,        if (prop.containsKey(Attribute.CLIENT_TRACE_APPEND)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1145,            setTraceFileAppend(getTraceFileAppend(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1146,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1147,        if (prop.containsKey(Attribute.CLIENT_RETIEVE_MESSAGE_TEXT)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1148,            setRetrieveMessageText(getRetrieveMessageText(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1149,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1150,        if (prop.containsKey(Attribute.SSL_ATTR)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1151,            sslMode = getClientSSLMode(prop);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1152,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1153,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1154,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1155,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1156,     * Handles common error situations that can happen when trying to
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1157,"     * obtain a physical connection to the server, and which require special"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1158,     * handling.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1159,     * <p>
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1160,"     * If this method returns normally, the exception wasn't handled and should"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1161,     * be handled elsewhere or be re-thrown.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1162,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1163,"     * @param logWriter log writer, may be {@code null}"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1164,     * @param sqle exception to handle
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1165,     * @throws SQLException handled exception (if any)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1166,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1167,"    protected final void handleConnectionException(LogWriter logWriter,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1168,                                                   SqlException sqle)
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1169,            throws SQLException {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1170,        // See DERBY-4070
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1171,        if (sqle.getSQLState().equals(
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1172,                ExceptionUtil.getSQLStateFromIdentifier(
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1173,                    SQLState.INVALID_ATTRIBUTE_SYNTAX))) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1174,            // Wrap this in SQLState.MALFORMED_URL exception to be
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1175,            // consistent with the embedded driver.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1176,"            throw new SqlException(logWriter,"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1177,"                    new ClientMessageId(SQLState.MALFORMED_URL),"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1178,"                    constructUrl(), sqle).getSQLException();"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1179,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1180,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1181,    }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1182,
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1183,    /**
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1184,     * Constructs the JDBC connection URL from the state of the data source.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1185,     *
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1186,     * @return The JDBC connection URL.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1187,     */
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1188,    private String constructUrl() {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1189,        StringBuffer sb = new StringBuffer(64);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1190,"        // To support subSubProtocols, the protocol addition below must be"
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1191,        // changed.
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1192,        sb.append(Attribute.DNC_PROTOCOL);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1193,        sb.append(serverName);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1194,        sb.append(':');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1195,        sb.append(portNumber);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1196,        sb.append('/');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1197,        sb.append(databaseName);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1198,        if (connectionAttributes != null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1199,            sb.append(';');
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1200,            sb.append(connectionAttributes);
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1201,        }
java/client/org/apache/derby/jdbc/ClientBaseDataSource.java,1202,        return sb.toString();
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,48,                                           implements ConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,74,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,75,        try
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,76,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,77,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,78,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,79,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_cpds"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,80,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,81,"                dncLogWriter.traceEntry(this, ""getPooledConnection"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,82,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,83,"            PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,84,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,85,"                dncLogWriter.traceExit(this, ""getPooledConnection"", pooledConnection);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,86,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,87,            return pooledConnection;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,88,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,89,        catch ( SqlException se )
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,90,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,91,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,92,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,93,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,94,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,95,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,100,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,101,        try
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,102,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,103,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,104,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,105,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_cpds"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,106,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,107,"                dncLogWriter.traceEntry(this, ""getPooledConnection"", user, ""<escaped>"");"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,108,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,109,"            PooledConnection pooledConnection = getPooledConnectionX(dncLogWriter, this, user, password);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,110,            if (dncLogWriter != null) {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,111,"                dncLogWriter.traceExit(this, ""getPooledConnection"", pooledConnection);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,112,            }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,113,            return pooledConnection;
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,114,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,115,        catch ( SqlException se )
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,116,        {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,117,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,118,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,119,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,120,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,121,        }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,124,    //  method that establishes the initial physical connection
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,125,    // using DS properties instead of CPDS properties.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,126,"    private PooledConnection getPooledConnectionX(LogWriter dncLogWriter,"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,127,"                        ClientBaseDataSource ds, String user,"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,128,                        String password) throws SQLException {
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,129,"            return ClientDriver.getFactory().newClientPooledConnection(ds,"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,130,"                    dncLogWriter, user, password);"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,131,    }
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,132,
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,45,        extends ClientConnectionPoolDataSource {
java/client/org/apache/derby/jdbc/ClientDataSource.java,24,import java.sql.Connection;
java/client/org/apache/derby/jdbc/ClientDataSource.java,25,import java.sql.SQLException;
java/client/org/apache/derby/jdbc/ClientDataSource.java,26,import javax.sql.DataSource;
java/client/org/apache/derby/jdbc/ClientDataSource.java,27,import org.apache.derby.client.am.ClientMessageId;
java/client/org/apache/derby/jdbc/ClientDataSource.java,28,import org.apache.derby.client.am.LogWriter;
java/client/org/apache/derby/jdbc/ClientDataSource.java,29,import org.apache.derby.client.am.SqlException;
java/client/org/apache/derby/jdbc/ClientDataSource.java,30,import org.apache.derby.client.net.NetLogWriter;
java/client/org/apache/derby/jdbc/ClientDataSource.java,31,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/jdbc/ClientDataSource.java,32,
java/client/org/apache/derby/jdbc/ClientDataSource.java,104,public class ClientDataSource extends ClientBaseDataSource implements DataSource {
java/client/org/apache/derby/jdbc/ClientDataSource.java,153,    // ---------------------------interface methods-------------------------------
java/client/org/apache/derby/jdbc/ClientDataSource.java,154,
java/client/org/apache/derby/jdbc/ClientDataSource.java,155,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,156,"     * Attempt to establish a database connection in a non-pooling, non-distributed environment."
java/client/org/apache/derby/jdbc/ClientDataSource.java,157,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,158,     * @return a Connection to the database
java/client/org/apache/derby/jdbc/ClientDataSource.java,159,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,160,     * @throws java.sql.SQLException if a database-access error occurs.
java/client/org/apache/derby/jdbc/ClientDataSource.java,161,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,162,    public Connection getConnection() throws SQLException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,163,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientDataSource.java,164,        try {
java/client/org/apache/derby/jdbc/ClientDataSource.java,165,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientDataSource.java,166,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientDataSource.java,167,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_sds"");"
java/client/org/apache/derby/jdbc/ClientDataSource.java,168,"            return getConnectionX(dncLogWriter, getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientDataSource.java,169,        } catch (SqlException se) {
java/client/org/apache/derby/jdbc/ClientDataSource.java,170,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientDataSource.java,171,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,172,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientDataSource.java,173,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientDataSource.java,174,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,175,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,176,
java/client/org/apache/derby/jdbc/ClientDataSource.java,177,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,178,"     * Attempt to establish a database connection in a non-pooling, non-distributed environment."
java/client/org/apache/derby/jdbc/ClientDataSource.java,179,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,180,     * @param user     the database user on whose behalf the Connection is being made
java/client/org/apache/derby/jdbc/ClientDataSource.java,181,     * @param password the user's password
java/client/org/apache/derby/jdbc/ClientDataSource.java,182,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,183,     * @return a Connection to the database
java/client/org/apache/derby/jdbc/ClientDataSource.java,184,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,185,     * @throws java.sql.SQLException if a database-access error occurs.
java/client/org/apache/derby/jdbc/ClientDataSource.java,186,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,187,"    public Connection getConnection(String user, String password) throws SQLException {"
java/client/org/apache/derby/jdbc/ClientDataSource.java,188,        // Jdbc 2 connections will write driver trace info on a
java/client/org/apache/derby/jdbc/ClientDataSource.java,189,        // datasource-wide basis using the jdbc 2 data source log writer.
java/client/org/apache/derby/jdbc/ClientDataSource.java,190,        // This log writer may be narrowed to the connection-level
java/client/org/apache/derby/jdbc/ClientDataSource.java,191,        // This log writer will be passed to the agent constructor.
java/client/org/apache/derby/jdbc/ClientDataSource.java,192,
java/client/org/apache/derby/jdbc/ClientDataSource.java,193,        LogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientDataSource.java,194,        try
java/client/org/apache/derby/jdbc/ClientDataSource.java,195,        {
java/client/org/apache/derby/jdbc/ClientDataSource.java,196,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientDataSource.java,197,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientDataSource.java,198,"            dncLogWriter = super.computeDncLogWriterForNewConnection(""_sds"");"
java/client/org/apache/derby/jdbc/ClientDataSource.java,199,"            return getConnectionX(dncLogWriter, user, password);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,200,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,201,        catch(SqlException se)
java/client/org/apache/derby/jdbc/ClientDataSource.java,202,        {
java/client/org/apache/derby/jdbc/ClientDataSource.java,203,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientDataSource.java,204,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,205,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientDataSource.java,206,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientDataSource.java,207,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,208,
java/client/org/apache/derby/jdbc/ClientDataSource.java,209,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,210,
java/client/org/apache/derby/jdbc/ClientDataSource.java,211,"    private Connection getConnectionX(LogWriter dncLogWriter,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,212,"                                      String user, String password)"
java/client/org/apache/derby/jdbc/ClientDataSource.java,213,            throws SqlException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,214,        return ClientDriver.getFactory().newNetConnection(
java/client/org/apache/derby/jdbc/ClientDataSource.java,215,"                (NetLogWriter)dncLogWriter, user, password, this, -1, false);"
java/client/org/apache/derby/jdbc/ClientDataSource.java,216,
java/client/org/apache/derby/jdbc/ClientDataSource.java,217,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,218,
java/client/org/apache/derby/jdbc/ClientDataSource.java,219,    // JDBC 4.0 java.sql.Wrapper interface methods
java/client/org/apache/derby/jdbc/ClientDataSource.java,220,
java/client/org/apache/derby/jdbc/ClientDataSource.java,221,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,222,     * Check whether this instance wraps an object that implements the interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,223,     * specified by {@code iface}.
java/client/org/apache/derby/jdbc/ClientDataSource.java,224,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,225,     * @param iface a class defining an interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,226,"     * @return {@code true} if this instance implements {@code iface}, or"
java/client/org/apache/derby/jdbc/ClientDataSource.java,227,     * {@code false} otherwise
java/client/org/apache/derby/jdbc/ClientDataSource.java,228,     * @throws SQLException if an error occurs while determining if this
java/client/org/apache/derby/jdbc/ClientDataSource.java,229,     * instance implements {@code iface}
java/client/org/apache/derby/jdbc/ClientDataSource.java,230,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,231,    public boolean isWrapperFor(Class<?> iface) throws SQLException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,232,        return iface.isInstance(this);
java/client/org/apache/derby/jdbc/ClientDataSource.java,233,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,234,
java/client/org/apache/derby/jdbc/ClientDataSource.java,235,    /**
java/client/org/apache/derby/jdbc/ClientDataSource.java,236,     * Returns {@code this} if this class implements the specified interface.
java/client/org/apache/derby/jdbc/ClientDataSource.java,237,     *
java/client/org/apache/derby/jdbc/ClientDataSource.java,238,     * @param  iface a class defining an interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,239,     * @return an object that implements the interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,240,     * @throws SQLException if no object is found that implements the
java/client/org/apache/derby/jdbc/ClientDataSource.java,241,     * interface
java/client/org/apache/derby/jdbc/ClientDataSource.java,242,     */
java/client/org/apache/derby/jdbc/ClientDataSource.java,243,    public <T> T unwrap(Class<T> iface) throws SQLException {
java/client/org/apache/derby/jdbc/ClientDataSource.java,244,        try {
java/client/org/apache/derby/jdbc/ClientDataSource.java,245,            return iface.cast(this);
java/client/org/apache/derby/jdbc/ClientDataSource.java,246,        } catch (ClassCastException cce) {
java/client/org/apache/derby/jdbc/ClientDataSource.java,247,"            throw new SqlException(null,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,248,"                    new ClientMessageId(SQLState.UNABLE_TO_UNWRAP),"
java/client/org/apache/derby/jdbc/ClientDataSource.java,249,                    iface).getSQLException();
java/client/org/apache/derby/jdbc/ClientDataSource.java,250,        }
java/client/org/apache/derby/jdbc/ClientDataSource.java,251,    }
java/client/org/apache/derby/jdbc/ClientDataSource.java,252,
java/client/org/apache/derby/jdbc/ClientDataSource40.java,103,public class ClientDataSource40 extends ClientDataSource {
java/client/org/apache/derby/jdbc/ClientDriver.java,125,                port = ClientDataSource.propertyDefault_portNumber;
java/client/org/apache/derby/jdbc/ClientDriver.java,136,                traceLevel = ClientDataSource.getTraceLevel(augmentedProperties);
java/client/org/apache/derby/jdbc/ClientDriver.java,148,"                    ClientDataSource.computeDncLogWriterForNewConnection(java.sql.DriverManager.getLogWriter(),"
java/client/org/apache/derby/jdbc/ClientDriver.java,149,"                            ClientDataSource.getTraceDirectory(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,150,"                            ClientDataSource.getTraceFile(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,151,"                            ClientDataSource.getTraceFileAppend(augmentedProperties),"
java/client/org/apache/derby/jdbc/ClientDriver.java,152,"                            traceLevel,"
java/client/org/apache/derby/jdbc/ClientDriver.java,153,"                            ""_driver"","
java/client/org/apache/derby/jdbc/ClientDriver.java,154,                            traceFileSuffixIndex_++);
java/client/org/apache/derby/jdbc/ClientDriver.java,227,"                new java.sql.DriverPropertyInfo(Attribute.USERNAME_ATTR,"
java/client/org/apache/derby/jdbc/ClientDriver.java,228,"                        properties.getProperty(Attribute.USERNAME_ATTR, ClientDataSource.propertyDefault_user));"
java/client/org/apache/derby/jdbc/ClientDriver.java,374,"        return ClientDataSource.tokenizeAttributes(attributeString, properties);"
java/client/org/apache/derby/jdbc/ClientDriver.java,390,        if(Configuration.supportsJDBC40()) {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,26,import javax.sql.XADataSource;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,50,public class ClientXADataSource extends ClientDataSource implements XADataSource {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,61,        NetLogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,62,        try {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,63,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientXADataSource.java,64,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,65,            dncLogWriter = (NetLogWriter)
java/client/org/apache/derby/jdbc/ClientXADataSource.java,66,"                    super.computeDncLogWriterForNewConnection(""_xads"");"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,67,            return getXAConnectionX(
java/client/org/apache/derby/jdbc/ClientXADataSource.java,68,"                    dncLogWriter, this, getUser(), getPassword());"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,69,        } catch (SqlException se) {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,70,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientXADataSource.java,71,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,72,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientXADataSource.java,73,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientXADataSource.java,74,        }
java/client/org/apache/derby/jdbc/ClientXADataSource.java,78,        NetLogWriter dncLogWriter = null;
java/client/org/apache/derby/jdbc/ClientXADataSource.java,79,        try
java/client/org/apache/derby/jdbc/ClientXADataSource.java,80,        {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,81,            updateDataSourceValues(
java/client/org/apache/derby/jdbc/ClientXADataSource.java,82,"                    tokenizeAttributes(getConnectionAttributes(), null));"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,83,            dncLogWriter = (NetLogWriter)
java/client/org/apache/derby/jdbc/ClientXADataSource.java,84,"                    super.computeDncLogWriterForNewConnection(""_xads"");"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,85,"            return getXAConnectionX(dncLogWriter, this, user, password);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,86,        }
java/client/org/apache/derby/jdbc/ClientXADataSource.java,87,        catch ( SqlException se )
java/client/org/apache/derby/jdbc/ClientXADataSource.java,88,        {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,89,            // The method below may throw an exception.
java/client/org/apache/derby/jdbc/ClientXADataSource.java,90,"            handleConnectionException(dncLogWriter, se);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,91,"            // If the exception wasn't handled so far, re-throw it."
java/client/org/apache/derby/jdbc/ClientXADataSource.java,92,            throw se.getSQLException();
java/client/org/apache/derby/jdbc/ClientXADataSource.java,93,        }
java/client/org/apache/derby/jdbc/ClientXADataSource.java,95,
java/client/org/apache/derby/jdbc/ClientXADataSource.java,96,    /**
java/client/org/apache/derby/jdbc/ClientXADataSource.java,97,     * Method that establishes the initial physical connection
java/client/org/apache/derby/jdbc/ClientXADataSource.java,98,     * using DS properties instead of CPDS properties.
java/client/org/apache/derby/jdbc/ClientXADataSource.java,99,     */
java/client/org/apache/derby/jdbc/ClientXADataSource.java,100,"    private XAConnection getXAConnectionX(LogWriter dncLogWriter,"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,101,"        ClientBaseDataSource ds, String user, String password)"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,102,        throws SQLException
java/client/org/apache/derby/jdbc/ClientXADataSource.java,103,    {
java/client/org/apache/derby/jdbc/ClientXADataSource.java,104,"        return ClientDriver.getFactory().newClientXAConnection(ds,"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,105,"                dncLogWriter, user, password);"
java/client/org/apache/derby/jdbc/ClientXADataSource.java,106,    }
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,50,public class ClientXADataSource40 extends ClientXADataSource {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,56,import org.apache.derby.jdbc.ClientBaseDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2359,                new Integer(ClientBaseDataSource.TRACE_ALL));
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,40,import org.apache.derby.jdbc.ClientBaseDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,41,import org.apache.derby.jdbc.EmbeddedDataSource;
java/testing/org/apache/derbyTesting/junit/J2EEDataSource.java,101,}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,26,import java.sql.DriverManager;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,31,import java.sql.Types;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,35,import javax.sql.DataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,45,import org.apache.derbyTesting.functionTests.tests.nist.NistScripts;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,47,//import org.apache.derby.iapi.types.XML;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,52,import org.apache.derbyTesting.junit.JDBCDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,53,import org.apache.derbyTesting.junit.TestConfiguration;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,73,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,81,      Connection conn = getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,82,      conn.setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,346,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,419,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,540,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1172,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1236,      getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1985,private void dropTable(Statement s) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1986,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1987,"    s.execute(""DROP TABLE APP.CUSTOMER"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1988,    s.getConnection().commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1989,}
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,1990,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2049,"        suite.addTest(collatedSuite(""en"", false, ""testEnglishCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2050,"        suite.addTest(collatedSuite(""en"", true, ""testUsingClauseAndNaturalJoin""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2051,"        suite.addTest(collatedSuite(""en"", false, ""testUsingClauseAndNaturalJoin""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2052,"        suite.addTest(collatedSuite(""en"", true, ""testNullColumnInInsert""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2053,"        suite.addTest(collatedSuite(""en"", false, ""testNullColumnInInsert""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2077,"            suite.addTest(collatedSuite(""no"", false, ""testNorwayCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2080,"            suite.addTest(collatedSuite(""pl"", false, ""testPolishCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2083,"            suite.addTest(collatedSuite(""fr"", false, ""testFrenchCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2086,"            suite.addTest(collatedSuite(""sv"", true, ""testSwedishCaseInsensitiveCollation""));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2108,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2109,  /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2110,     Load the appropriate driver for the current framework
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2111,   */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2112,  private static void loadDriver()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2113,  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2114,      String driverClass =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2115,          TestConfiguration.getCurrent().getJDBCClient().getJDBCDriverName();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2116,      try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2117,          Class.forName(driverClass).newInstance();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2118,      } catch (Exception e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2119,"          fail (""could not instantiate driver"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2120,      }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2121,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2125,   * a primary fixture from this test plus potentially other
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2126,   * fixtures.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2129,   * @param baseFixture Base fixture from this test.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2132,"  private static Test collatedSuite(String locale, boolean caseInsensitive, String baseFixture)"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2135,      suite.addTest(new CollationTest(baseFixture));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2136,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2163,        ResultSet rs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2172,"        rs = s.executeQuery(""select * from derby5591"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2173,"        JDBC.assertFullResultSet(rs,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2174,"                                 new String[][] {{""a""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java,2176,"        s.executeUpdate(""DROP TABLE derby5591"");"
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,55,    static final long serialVersionUID = -7660172643035173693L;
java/drda/org/apache/derby/impl/drda/XADatabase.java,65,        if (xaDataSource == null)
java/drda/org/apache/derby/impl/drda/XADatabase.java,66,        {
java/drda/org/apache/derby/impl/drda/XADatabase.java,67,            xaDataSource = new EmbeddedXADataSource();
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,33,import javax.naming.Reference;
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,34,import javax.naming.Referenceable;
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,66,"            ""org.apache.derby.jdbc.EmbeddedXADataSource"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,73,"            ""org.apache.derby.jdbc.ClientXADataSource"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,75,
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,95,"                   IllegalAccessException, IOException, NamingException {"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,96,"        String modifiedVersionString = versionString.replaceAll(""\\."", ""_"");"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,116,"            // Wrote version string, build number, the data source object and finally"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,117,            // a {@link javax.naming.Reference} for the data source.
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,121,            Reference dsRef = ((Referenceable)ds).getReference();
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,122,            oos.writeObject(dsRef);
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,160,            obj = ois.readObject();
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,161,"            System.out.println(""\tobject : "" + obj);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java,73,        // Only run this test if we have a JDBC 4 JVM.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/JDBC4FromJDBC3DataSourceTest.java,74,        if (JDBC.vmSupportsJDBC4())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,27,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,28,import org.apache.derby.jdbc.EmbeddedDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,29,import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,30,import org.apache.derby.jdbc.EmbeddedXADataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,31,import org.apache.derby.jdbc.ClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,49,    private ClientDataSource40      _netclient;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,55,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,64,        if ( wrapped instanceof EmbeddedDataSource40  ) { _embedded = (EmbeddedDataSource40 ) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,65,        else if ( wrapped instanceof EmbeddedConnectionPoolDataSource40 ) { _ecpds = (EmbeddedConnectionPoolDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,66,        else if ( wrapped instanceof EmbeddedXADataSource40 ) { _exads = (EmbeddedXADataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,67,        else if ( wrapped instanceof ClientDataSource40 ) { _netclient = (ClientDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,68,        else if ( wrapped instanceof ClientConnectionPoolDataSource40 ) { _ccpds = (ClientConnectionPoolDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,69,        else if ( wrapped instanceof ClientXADataSource40 ) { _cxads = (ClientXADataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,70,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,81,        if ( _embedded != null ) { return _embedded.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,82,        else if ( _netclient != null ) { return _netclient.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,83,        else if ( _ecpds != null ) { return _ecpds.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,84,        else if ( _exads != null ) { return _exads.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,85,        else if ( _ccpds != null ) { return _ccpds.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,86,        else if ( _cxads != null ) { return _cxads.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,87,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,98,        if ( _embedded != null ) { return _embedded; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,99,        else if ( _netclient != null ) { return _netclient; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,100,        else if ( _ecpds != null ) { return _ecpds; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,101,        else if ( _exads != null ) { return _exads; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,102,        else if ( _ccpds != null ) { return _ccpds; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,103,        else if ( _cxads != null ) { return _cxads; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,104,        else { throw nothingWrapped(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,34,import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,53,    public void testMaxStatementsProperty() {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,54,        ClientConnectionPoolDataSource cDs =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,55,                new ClientConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,82,        ClientConnectionPoolDataSource cDs = (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,83,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,98,        ClientConnectionPoolDataSource cDs = (ClientConnectionPoolDataSource)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,99,                J2EEDataSource.getConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,112,    private void verifyConnection(ClientConnectionPoolDataSource cDs)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,146,       if (JDBC.vmSupportsJSR169()) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,147,            // Referenceable is not supported with JSR169
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceReferenceTest.java,148,"            suite = new TestSuite(""DatasourceTest cannot run with JSR169"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,32,import javax.naming.Reference;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,33,import javax.naming.spi.ObjectFactory;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,43, * current version of the data souce.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,52, * made.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,81,"        final String EMBEDDED_CLASS = ""EmbeddedDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,82,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,83,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,84,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,85,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,95,"        final String EMBEDDED_CLASS = ""EmbeddedConnectionPoolDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,96,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,97,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,98,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,99,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,109,"        final String EMBEDDED_CLASS = ""EmbeddedXADataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,110,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_0_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,111,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,112,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,113,"        deSerializeDs(EMBEDDED_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,123,"        final String CLIENT_CLASS = ""ClientDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,124,        // No client driver for Derby 10.0
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,125,"        deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,126,"        deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,127,"        deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,137,"        final String CLIENT_CLASS = ""ClientConnectionPoolDataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,138,        // No client driver for Derby 10.0
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,139,"        deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,140,"        deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,141,"        deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,151,"        final String CLIENT_CLASS = ""ClientXADataSource"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,152,        // No client driver for Derby 10.0
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,153,"        deSerializeDs(CLIENT_CLASS, VERSION_10_1_3_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,154,"        deSerializeDs(CLIENT_CLASS, VERSION_10_2_2_0);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,155,"        deSerializeDs(CLIENT_CLASS, VERSION_10_3_2_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,175,"    private void deSerializeDs(String className, String version)"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,201,        Reference dsRef = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,223,            // Recreate the data source using reference.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,224,            dsRef = (Reference)ois.readObject();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,239,        String factoryClassName = dsRef.getFactoryClassName();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,240,        ObjectFactory factory =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,241,            (ObjectFactory)Class.forName(factoryClassName).newInstance();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,242,        Object recreatedDs =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,243,"            factory.getObjectInstance(dsRef, null, null, null);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,244,        ds = (DataSource)recreatedDs;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,245,"        assertTrue(""Unexpected class instantiated by Reference: "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,246,"                dsObj.getClass().getName(),"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,247,                dsObj.getClass().getName().indexOf(className) > 0);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,31,import java.util.HashMap;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,34,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,37,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,38,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,39,import org.apache.derby.jdbc.EmbeddedDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,270,    public void testClientDSConnectionAttributes() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,274,        ClientDataSource ds = new ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,436,    public void testClientMessageTextConnectionAttribute() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,446,        ClientDataSource ds = new ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,117,"            assertSQLState(""08004"", se);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,118,"            // with network server, the java.net.UnknownHostException will be in"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,119,"            // derby.log, the client only gets a 08004 and somewhat misleading"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,120,            // warning ('Reason: userid or password invalid')
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,121,"            println( ""Saw SQLException with message = "" + se.getMessage() );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,122,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,123,            {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,124,"                assertTrue(se.getMessage().indexOf(""java.net.UnknownHostException"")>1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,133,"            assertSQLState(""08004"", se);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,134,"            // with network server, the java.net.UnknownHostException will be in"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,135,"            // derby.log, the client only gets a 08004 and somewhat misleading"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,136,            // warning ('Reason: userid or password invalid')
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,137,            if (usingEmbedded())
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InvalidLDAPServerAuthenticationTest.java,138,"                assertTrue(se.getMessage().indexOf(""java.net.UnknownHostException"")>1);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,56,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,57,import org.apache.derby.jdbc.ClientConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,58,import org.apache.derby.jdbc.ClientXADataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2347,        final boolean isXA = ds instanceof ClientXADataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2348,        final boolean isCP = ds instanceof ClientConnectionPoolDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2359,                new Integer(ClientBaseDataSourceRoot.TRACE_ALL));
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2368,            physicalCon = ((ClientConnectionPoolDataSource)ds).
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2726,    public void testClientDSConnectionAttributes() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2731,        ClientConnectionPoolDataSource cpds =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2732,            new ClientConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2736,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2739,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2744,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2747,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2756,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2758,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2763,        ClientXADataSource xads = new ClientXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2768,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2771,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2775,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2778,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2786,        dsConnectionRequests(new String[]
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2788,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2875,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2878,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2883,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2886,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2891,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2894,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2904,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2907,            (ConnectionPoolDataSource)cpds);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2920,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2923,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2927,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2930,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2935,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2938,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2943,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2946,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2952,        dsConnectionRequests(new String[] {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2955,            (XADataSource) xads);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3042,    public void testClientMessageTextConnectionAttribute() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3047,        ClientConnectionPoolDataSource cpds = new ClientConnectionPoolDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3064,        ClientXADataSource xads = new ClientXADataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3852,    private static void dsConnectionRequests(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3888,    private static void dsConnectionRequests(
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,34,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,403,"            ClientDataSource ds = configureDataSource( fullDbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,428,"                ClientDataSource ds = configureDataSource( fullDbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,460,"                ClientDataSource ds = configureDataSource( fullDbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1006,                    ClientDataSource ds = configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1195,"                        ClientDataSource ds = configureDataSource( fDbPath, fSlaveHost, fSlaveServerPort, fConnAttrs );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1354,        ClientDataSource ds = configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,1384,        ClientDataSource ds = configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2773,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2777,"        ClientDataSource ds = configureDataSource( dbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2801,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,2804,"        ClientDataSource ds = configureDataSource( dbPath, serverHost, serverPort, useEncryption(false) );"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3022,    ClientDataSource    configureDataSource
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3028,         )
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3030,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,29,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,125,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,127,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,25,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,62,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,83,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,86,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,104,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,26,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,195,                ClientDataSource ds = new ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,27,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,175,            String dbPath) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,177,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,194,            String dbPath) {
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,196,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,31,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,223,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,225,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,27,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,221,        throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,224,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,32,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,83,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,126,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,138,            throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,140,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,31,import org.apache.derby.jdbc.ClientDataSource;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,78,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,83,"    throws SQLException, IOException, InterruptedException"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,95,            throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,97,        ClientDataSource ds = new org.apache.derby.jdbc.ClientDataSource();
java/testing/org/apache/derbyTesting/junit/Derby.java,98,"                ""org.apache.derby.jdbc.ClientDataSource"");"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,48,"            ""org.apache.derby.jdbc.EmbeddedDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,49,"            ""org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,50,"            ""org.apache.derby.jdbc.EmbeddedXADataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,88,"            ""org.apache.derby.jdbc.ClientDataSource"","
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,389,"      URL client = getURL(""org.apache.derby.jdbc.ClientDataSource"");"
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,392,  }
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,393,
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,524,                //running under jdk1.6 or higher
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,525,                // try instantiating EmbeddedXADataSource40
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,526,                try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,528,"                            ""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,529,"                    ""ClientXADataSource40"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,531,                catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,532,                    //probably it was not compiled with jdbc4.0
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,533,                    //support go ahead with ClientXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,534,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,535,                catch (UnsupportedClassVersionError ue) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,536,                    // ClientXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,537,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,538,                return (XADataSource) (Class.forName(
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,539,"                        ""org.apache.derby.jdbc.ClientXADataSource"""
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,540,                ).newInstance());
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,541,            }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,542,            else {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,543,                //running under jdk1.6 or higher
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,544,                // try instantiating EmbeddedXADataSource40
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,545,                try {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,547,"                            ""org.apache.derby.jdbc."" +"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,548,"                    ""EmbeddedXADataSource40"").newInstance());"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,549,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,550,                catch (ClassNotFoundException e) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,551,                    //probably it was not compiled with jdbc4.0
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,552,                    //support go ahead with EmbeddedXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,553,                }
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,554,                catch (UnsupportedClassVersionError ue) {
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,555,                    // not jdk 16 or higher. Go ahead with
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,556,                    // EmbeddedXADataSource
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,558,"                return (XADataSource)(Class.forName(""org.apache.derby.jdbc.EmbeddedXADataSource"").newInstance());"
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,32, * NonJNDIClientConnectionPoolDataSource40 is similar to
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,38,public class NonJNDIClientConnectionPoolDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,39,        extends NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,50,"            ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"";"
java/client/org/apache/derby/jdbc/NonJNDIClientConnectionPoolDataSource40.java,63,    public NonJNDIClientConnectionPoolDataSource40() {
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,32, * NonJNDIClientDataSource40 is similar to ClientDataSource40 except it
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,36,public class NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,41,"            ""org.apache.derby.jdbc.NonJNDIClientDataSource40"";"
java/client/org/apache/derby/jdbc/NonJNDIClientDataSource40.java,53,    public NonJNDIClientDataSource40() {
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIClientXADataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,32,public class NonJNDIClientXADataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,33,    extends NonJNDIClientDataSource40
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,38,"        ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"";"
java/client/org/apache/derby/jdbc/NonJNDIClientXADataSource40.java,44,    public NonJNDIClientXADataSource40() {
java/drda/org/apache/derby/impl/drda/XADatabase.java,75,"                        ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"")."
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,27, * NonJNDIEmbeddedConnectionPoolDataSource40 is similar to
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,33,public class NonJNDIEmbeddedConnectionPoolDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,34,    extends NonJNDIEmbeddedDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedConnectionPoolDataSource40.java,43,    public NonJNDIEmbeddedConnectionPoolDataSource40() {
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,30," * NonJNDIEmbeddedDataSource40 is similar to EmbeddedDataSource40, but does"
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,36, public class NonJNDIEmbeddedDataSource40 extends EmbeddedBaseDataSource
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedDataSource40.java,41,    public NonJNDIEmbeddedDataSource40() {}
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,3,   Derby - Class org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,30, * NonJNDIEmbeddedXADataSource40 is similar to
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,36,public class NonJNDIEmbeddedXADataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,37,    extends NonJNDIEmbeddedDataSource40
java/engine/org/apache/derby/jdbc/NonJNDIEmbeddedXADataSource40.java,48,    public NonJNDIEmbeddedXADataSource40() {
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,70,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,71,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,72,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,83,"            ""org.apache.derby.jdbc.NonJNDIClientDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,84,"            ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,85,"            ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"""
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,140,"            if (!(dsClassName.contains(""NonJNDI""))) {"
java/testing/org/apache/derbyTesting/functionTests/testData/serializedDataSources/SerializeDataSources.java,183,"            if (!(obj.getClass().getName().indexOf(""NonJNDI"") > 0)) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,33,import org.apache.derby.jdbc.NonJNDIClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,34,import org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,53,    private NonJNDIEmbeddedDataSource40    _nonJNDIembedded;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,58,    private NonJNDIClientDataSource40      _nonJNDInetclient;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,84,            if ( wrapped instanceof NonJNDIEmbeddedDataSource40  ) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,85,                _nonJNDIembedded = (NonJNDIEmbeddedDataSource40 ) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,86,            else if ( wrapped instanceof NonJNDIClientDataSource40 ) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,87,                _nonJNDInetclient = (NonJNDIClientDataSource40) wrapped; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,109,            if ( _nonJNDIembedded != null ) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,110,                return _nonJNDIembedded.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,111,            else if ( _nonJNDInetclient != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,112,                return _nonJNDInetclient.getParentLogger(); }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,134,            if ( _nonJNDIembedded != null ) { return _nonJNDIembedded; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java,135,            else if ( _nonJNDInetclient != null ) { return _nonJNDInetclient; }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClientConnectionPoolDataSourceTest.java,62,"                ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"")"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,94,"        final String EMBEDDED_CLASS = ""NonJNDIEmbeddedDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,117,"                ""NonJNDIEmbeddedConnectionPoolDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,138,"        final String EMBEDDED_CLASS = ""NonJNDIEmbeddedXADataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,159,"        final String CLIENT_CLASS = ""NonJNDIClientDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,180,"        final String CLIENT_CLASS = ""NonJNDIClientConnectionPoolDataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,201,"        final String CLIENT_CLASS = ""NonJNDIClientXADataSource40"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,396,"                filePrefix + ""NonJNDIEmbeddedDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,398,"                    ""NonJNDIEmbeddedConnectionPoolDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,399,"                filePrefix + ""NonJNDIEmbeddedXADataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,400,"                filePrefix + ""NonJNDIClientDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,402,"                    ""NonJNDIClientConnectionPoolDataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceSerializationTest.java,403,"                filePrefix + ""NonJNDIClientXADataSource40-10_10_1_0.ser"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,37,import org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,218,            NonJNDIEmbeddedDataSource40 nds = new NonJNDIEmbeddedDataSource40();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,221,"                    expectedValues, ""NonJNDIDataSource"", nds.getConnection());"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,278,"                    ""org.apache.derby.jdbc.NonJNDIClientDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java,461,"              ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2741,"               ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2783,"                ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3079,"               ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,3106,"                ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java,3054,"                ""org.apache.derby.jdbc.NonJNDIClientDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_1Indexing.java,135,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,71,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,104,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3.java,132,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p3.java,203,"                        ""org.apache.derby.jdbc.NonJNDIClientDataSource40"")."
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,185,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p4.java,213,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_3_p6.java,233,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_Encrypted_1.java,232,"               ""org.apache.derby.jdbc.NonJNDIClientDataSource40"").newInstance();"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,33,import org.apache.derby.jdbc.NonJNDIClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest.java,152,            ds = new NonJNDIClientDataSource40();
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,32,import org.apache.derby.jdbc.NonJNDIClientDataSource40;
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/SimplePerfTest_Verify.java,108,            ds = new NonJNDIClientDataSource40();
java/testing/org/apache/derbyTesting/junit/Derby.java,100,"                ""org.apache.derby.jdbc.NonJNDIClientDataSource40"");"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,51,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,55,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedConnectionPoolDataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,59,"            ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"","
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,100,"            ""org.apache.derby.jdbc.NonJNDIClientDataSource40"") :"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,106,"            ""org.apache.derby.jdbc.NonJNDIClientConnectionPoolDataSource40"") :"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,112,"            ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"") :"
java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java,392,"                    ""org.apache.derby.jdbc.NonJNDIClientDataSource40"");"
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,544,"                        ""org.apache.derby.jdbc.NonJNDIClientXADataSource40"")."
java/tools/org/apache/derby/impl/tools/ij/xaHelper.java,568,"                        ""org.apache.derby.jdbc.NonJNDIEmbeddedXADataSource40"")."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,38, * Java Naming and Directory Interface (JNDI). Use
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,39, * ClientConnectionPoolDataSource if your application runs under
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,40," * JDBC 3.0 or JDBC 4.0, that is, on the following Java Virtual Machines:"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,41, * <p/>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,42, * <UL>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,43, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,44, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,45, * </UL>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,34, * Java Naming and Directory Interface (JNDI). Use this factory
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,35, * if your application runs at JDBC level 4.1 (or higher). Use
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,36," * ClientConnectionPoolDataSource, instead, if your application runs under"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,37," * JDBC 4.0 or JDBC 3.0, that is, on the following Java Virtual Machines:"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,38, * <p/>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,39, * <UL>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,40, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,41, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,42, * </UL>
java/client/org/apache/derby/jdbc/ClientDataSource.java,30, * environment. Use these DataSources if your application runs under
java/client/org/apache/derby/jdbc/ClientDataSource.java,31," * JDBC 3.0 or JDBC 4.0, that is, on the following Java Virtual Machines:"
java/client/org/apache/derby/jdbc/ClientDataSource.java,32, * <p/>
java/client/org/apache/derby/jdbc/ClientDataSource.java,33, * <UL>
java/client/org/apache/derby/jdbc/ClientDataSource.java,34, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientDataSource.java,35, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientDataSource.java,36, * </UL>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,36, * environment. Use these DataSources if your application runs at
java/client/org/apache/derby/jdbc/ClientDataSource40.java,37," * JDBC level 4.1 (or higher). Use the corresponding ClientDataSource,"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,38," * ClientConnectionPoolDataSource, and ClientXADataSource classes if"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,39, * your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientDataSource40.java,40, * <p/>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,41, *  <UL>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,42, *  <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientDataSource40.java,43, *  <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientDataSource40.java,44, * </UL>
java/client/org/apache/derby/jdbc/ClientDriver.java,38,
java/client/org/apache/derby/jdbc/ClientXADataSource.java,31, * <p>
java/client/org/apache/derby/jdbc/ClientXADataSource.java,32, * This is Derby's network XADataSource for use with JDBC 3.0 and JDBC 4.0.
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,31, * <p>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,32, * This is Derby's network XADataSource for use with JDBC 4.1.
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,33, * </p>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,38, * Use ClientXADataSource40 if your application runs at JDBC level 4.1 (or
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,39, * higher). Use ClientXADataSource
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,40, * if your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,41, * <UL>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,42, * <LI> JDBC 4.0 - Java SE 6
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,43, * <LI> JDBC 3.0 - J2SE 5.0
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,44, * </UL>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,45, *
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,28, EmbeddedConnectionPoolDataSource is Derby's ConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,29, implementation for JDBC 3.0 and JDBC 4.0.
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,28, EmbeddedConnectionPoolDataSource40 is Derby's ConnectionPoolDataSource
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,29,    implementation for JDBC 4.1 (and higher) environments.
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,30,
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,35, <P>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,36,    Use EmbeddedConnectionPoolDataSource40 if your application runs at JDBC
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,37,    level 4.1 (or higher).
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,38, Use
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,39, EmbeddedConnectionPoolDataSource if your application runs in the
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,40, following environments:
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,41, <UL>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,42,    <LI> JDBC 3.0 - J2SE 5.0 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,43,    <LI> JDBC 4.0 - Java SE 6 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,44, </UL>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,33,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,34,    EmbeddedDataSource is Derby's DataSource implementation for JDBC 3.0
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,35,    and JDBC 4.0.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,30, EmbeddedDataSource40 is Derby's DataSource implementation for JDBC 4.1.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,36,    Use EmbeddedDataSource40 if your application runs at JDBC level 4.1
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,37,    (or higher).
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,38, Use EmbeddedDataSource
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,39, if your application is runs in one of the following older
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,40, environments:
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,41, <UL>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,42,    <LI> JDBC 3.0 - J2SE 5.0 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,43,    <LI> JDBC 4.0 - Java SE 6 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,44, </UL>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,45,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,46, <P>The following is a list of properties that can be set on a Derby
java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java,44, *
java/engine/org/apache/derby/jdbc/EmbeddedSimpleDataSource.java,48, *
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,36,    EmbeddedXADataSource is Derby's XADataSource implementation for JDBC 3.0
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,37,    and JDBC 4.0.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,30,    EmbeddedXADataSource40 is Derby's XADataSource implementation for
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,31,    JDBC 4.1 (and higher).
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,32,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,33, <P>An XADataSource is a factory for XAConnection objects.  It represents a
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,34, RM in a DTP environment.  An object that implements the XADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,35, interface is typically registered with a JNDI service provider.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,36, <P>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,37,    Use EmbeddedXADataSource40 if your application runs at JDBC level 4.1
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,38,    (or higher).
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,41, <UL>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,42,    <LI> JDBC 3.0 - J2SE 5.0 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,43,    <LI> JDBC 4.0 - Java SE 6 </LI>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,44, </UL>
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,46, <P>EmbeddedXADataSource40 object only works on a local database.  There is no
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,47, client/server support.  An EmbeddedXADataSource40 object must live in the same jvm as
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,48, the database.
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,37," * If running on Java SE 7 og higher, consider a more capable data source."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,32," * running on full Java SE 7, corresponding to JDBC 4.1."
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,33, * <p/>
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,34," * Use ClientConnectionPoolDataSource, instead, if your application"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,35," * runs under JDBC 4.0 or JDBC 3.0, that is, on the following Java"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,36, * Virtual Machines:
java/client/org/apache/derby/jdbc/ClientDataSource.java,27," * If running on Java SE 7 og higher, consider a more capable data source."
java/client/org/apache/derby/jdbc/ClientDataSource40.java,32," * running on full Java SE 7, corresponding to JDBC 4.1."
java/client/org/apache/derby/jdbc/ClientDataSource40.java,33, * <p/>
java/client/org/apache/derby/jdbc/ClientDataSource40.java,34," * Use the corresponding ClientDataSource,"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,35," * ClientConnectionPoolDataSource, and ClientXADataSource classes if"
java/client/org/apache/derby/jdbc/ClientDataSource40.java,36, * your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientXADataSource.java,33," * If running on Java SE 7 og higher, consider a more capable data source."
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,32," * running on full Java SE 7, corresponding to JDBC 4.1."
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,33, * <p/>
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,34, * Use ClientXADataSource if your application runs in the following
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,35, * environments:
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,40, *
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,30,"    If running on Java SE 7 og higher, consider a more capable data source."
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,29,"    running on full Java SE 7, corresponding to JDBC 4.1."
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,31,    Use EmbeddedConnectionPoolDataSource if your application runs in
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,32,    the following environments:
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,35,"    If running on Java SE 7 og higher, consider a more capable data source."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,31,"    running on full Java SE 7, corresponding to JDBC 4.1."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,32,    <p/>
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,33,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,34,    Use EmbeddedDataSource if your application is runs in one of the
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,35,    following older environments:
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,36,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,38,"    If running on Java SE 7 og higher, consider a more capable data source."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,31,"    running on full Java SE 7, corresponding to JDBC 4.1."
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,33, Use EmbeddedXADataSource
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,34, if your application runs in the following environments:
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,35, *   <li>JDBC 4.1 - Java SE 7
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java,36, *   <li>JDBC 4.2 - full Java SE 8
java/client/org/apache/derby/jdbc/ClientDataSource40.java,35, *   <li>JDBC 4.1 - Java SE 7
java/client/org/apache/derby/jdbc/ClientDataSource40.java,36, *   <li>JDBC 4.2 - full Java SE 8
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,35, *   <li>JDBC 4.1 - Java SE 7
java/client/org/apache/derby/jdbc/ClientXADataSource40.java,36, *   <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,32,      <li>JDBC 4.1 - Java SE 7
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,33,      <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,34,      <li>JDBC 4.1 - Java SE 7
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,35,      <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,34,      <li>JDBC 4.1 - Java SE 7
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java,35,      <li>JDBC 4.2 - full Java SE 8
java/engine/org/apache/derby/iapi/types/SQLDouble.java,445,  setValue(bigDecimal.doubleValue());
java/engine/org/apache/derby/iapi/types/SQLDouble.java,446,
java/engine/org/apache/derby/iapi/types/SQLReal.java,401,  // infinity values which should throw an exception in setValue(double).
java/engine/org/apache/derby/iapi/types/SQLReal.java,402,  setValue(bigDecimal.floatValue());
java/engine/org/apache/derby/iapi/types/SQLReal.java,403,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4761,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4762,        // Uncomment when DERBY-5546 is fixed:
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4763,"        // assertUpdateState(rs, ""F04"", bdSmallestPosDoubleValue, ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4764,"        // assertUpdateState(rs, ""F04"", bdSmallestNegDoubleValue, ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4765,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4805,            //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4806,            // Uncomment when DERBY-5546 is fixed
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4807,"            // assertUpdateState(rs, dfCols[i],"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4808,"            //     bdSmallestPosDoubleValue.divide(BigDecimal.TEN), ""22003"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4809,"            // assertUpdateState(rs, dfCols[i],"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java,4810,"            //     bdSmallestNegDoubleValue.divide(BigDecimal.TEN), ""22003"");"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,441,"        addHeadlinedItem(list, JDK14_HEADLINE,"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,442,                summary.getTextByTagName(SUM_JDK14));
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,443,
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,444,"        addHeadlinedItem(list, JAVA6_HEADLINE,"
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,445,                summary.getTextByTagName(SUM_JAVA6));
java/build/org/apache/derbyBuild/ReleaseNotesGenerator.java,446,
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,183,            ds.setLoginTimeout( TestConfiguration.getCurrent().getLoginTimeout() );
java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java,187,"            BaseTestCase.fail(""unexpected error"", e);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,535,"  softwareVersion = new DD_Version(this, DataDictionary.DD_VERSION_DERBY_10_10);"
java/engine/org/apache/derby/impl/sql/execute/HashTableResultSet.java,370,       if (! (columns[0] instanceof Storable))
java/client/org/apache/derby/client/am/LogWriter.java,30,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,1519,     if (! (inNode.getRightOperandList().isConstantExpression()))
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1313,      /* Clear out all the caches */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,1314,      clearCaches();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9129,        clearSequenceCaches();
java/engine/org/apache/derby/impl/sql/execute/DropSequenceConstantAction.java,104,
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,133,     * @throws StandardException if error occured during encryption/decryption
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,177,     * @throws StandardException if error occured during encryption/decryption
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,251,     * @throws StandardException if error occured during encryption/decryption
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,257,    /**
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,258,     * closes the file.
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,259,     * @throws IOException
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,260,     */
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,261,    void close() throws IOException {
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,262,        super.close();
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,263,    }
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,264,
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,269,     * @throws StandardException if error occured during encryption/decryption
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,292,     * @throws StandardException if error occured during encryption/decryption
java/engine/org/apache/derby/impl/jdbc/EncryptedLOBFile.java,340,     * @throws StandardException if error occured during encryption/decryption
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,58,class LOBStreamControl {
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,97,"                public Object run() throws IOException, StandardException {"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,98,                    Object monitor = Monitor.findService(
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,99,"                            Property.DATABASE_MODULE, conn.getDBName());"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,100,                    DataFactory df =  (DataFactory) Monitor.findServiceModule(
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,101,"                            monitor, DataFactory.MODULE);"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,107,                    }
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,108,                    else
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,110,                    conn.addLobFile(tmpFile);
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,116,            Exception e = pae.getException();
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,117,            if (e instanceof StandardException)
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,118,                throw (StandardException)e;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,119,            if (e instanceof IOException)
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,120,                throw (IOException) e;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,121,            throw Util.newIOException(e);
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,199,     * @return new postion
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,200,"     * @throws IOException, StandardException"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,260,     * @param pos postion from where to read
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,262,"     * @throws IOException, StandardException"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,297,     * @param pos initial postion before reading
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,298,     * @return number new postion
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,299,"     * @throws IOException, StandardException"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,343,     * @param size new size should be smaller than exisiting size
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,376,"     * @throws IOException, StandardException"
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,495,    private void deleteFile (StorageFile file) throws IOException {
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,496,        try {
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,497,            final StorageFile sf = file;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,498,            AccessController.doPrivileged(new PrivilegedExceptionAction() {
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,499,                public Object run() throws IOException {
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,500,                    sf.delete();
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,501,                    return null;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,502,                }
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,503,            });
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,504,        } catch (PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,505,            Exception e = pae.getException();
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,506,            if (e instanceof IOException)
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,507,                throw (IOException) e;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,508,            if (e instanceof RuntimeException)
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,509,                throw (RuntimeException) e;
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,510,            throw Util.newIOException(e);
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,511,        }
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,515,     * @throws IOexception
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,564,     * @throws IOExcepton if writing to temporary file fails
java/engine/org/apache/derby/impl/jdbc/LOBStreamControl.java,626,     * Returns the running secquence number to check if the lob is updated since
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,745,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,746, /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,747, * Clear the HashMap of all entries.
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,748, * Called when a commit or rollback of the transaction
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,749, * happens.
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,750, */
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,751, public void clearLOBMapping() throws SQLException {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,752,            //Forward the methods implementation to the implementation in the
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,753,            //underlying EmbedConnection object.
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,754,            getRealConnection().clearLOBMapping();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,755, }
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,88,    /**
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,89,    * Clear the HashTable of all entries.
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,90,    * Called when a commit or rollback of the transaction
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,91,    * happens.
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,92,    */
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,93,    public void clearLOBMapping() throws SQLException;
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,94,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3325, public void clearLOBMapping() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,25,import org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,26,import org.apache.derbyTesting.functionTests.tests.lang.SimpleTest;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,41,import java.security.Policy;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,46,import java.util.Enumeration;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,194,        /**
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,195,         * Wraps InitAddress.getByName in privilege block.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,196,         *
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,197,         * @param host  host to resolve
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,198,         * @return InetAddress of host
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,199,         * @throws UnknownHostException
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,200,         */
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,201,        private InetAddress privInetAddressGetByName(final String host) throws UnknownHostException
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,202,        {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,203,            InetAddress inetAddr = null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,204,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,205,                inetAddr = (InetAddress) AccessController
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,206,                    .doPrivileged(new PrivilegedExceptionAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,207,                        public Object run() throws UnknownHostException {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,208,                            return InetAddress.getByName(host);
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,209,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,210,                    });
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,211,            } catch (PrivilegedActionException pe) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,212,                Exception e = pe.getException();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,213,                if (e instanceof UnknownHostException)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,214,                    throw (UnknownHostException) e;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,215,                else
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,216,                    throw (SecurityException) e;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,217,            }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,218,        return inetAddr;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,219,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,220,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,221,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,222,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,223,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,224,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,225,    private boolean fileExists(String filename) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,226,        final File file = new File(filename);
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,228,            return ((Boolean)AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,229,                new PrivilegedExceptionAction() {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,230,                    public Object run() throws SecurityException {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,231,                        return new Boolean(file.exists());
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,232,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,233,                })).booleanValue();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,235,            throw (SecurityException)pae.getException();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,237,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java,49,        suite.addTest(NetworkServerControlApiTest.suite());
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10508,        return ((SequenceUpdater) sequenceGeneratorCache.find( uuid )).peekAtCurrentValue();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,32,import org.apache.derbyTesting.junit.SupportFilesSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,40,    private static String POLICY_FILE_NAME =
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,41,"        ""functionTests/tests/derbynet/GetCurrentPropertiesTest.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,42,"    private static String TARGET_POLICY_FILE_NAME = ""server.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,48,    protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,49,        super.tearDown();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,50,    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,51,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,64,        test = decorateWithPolicy(test);
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,69,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,70,     * Construct the name of the server policy file.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,71,     */
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,72,    private static String makeServerPolicyName()
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,73,    {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,74,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,75,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,76,"            String  userDir = getSystemProperty( ""user.dir"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,77,            String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,78,            File      file = new File( fileName );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,79,            String  urlString = file.toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,80,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,81,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,82,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,83,        catch (Exception e)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,84,        {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,85,"            fail(""Exception in REading Server policy file"",e);"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,86,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,87,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,88,    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,89,"    // grant ALL FILES execute, and getPolicy permissions,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,90,    // as well as write for the trace files.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,91,    private static Test decorateWithPolicy(Test test) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,92,        String serverPolicyName = makeServerPolicyName();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,93,        //
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,94,        // Install a security manager using the initial policy file.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,95,        //
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,96,"        test = new SecurityManagerSetup(test,serverPolicyName );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,97,        // Copy over the policy file we want to use.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,98,        //
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,99,        test = new SupportFilesSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,100,"                test, null, new String[] {POLICY_FILE_NAME},"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,101,"                null, new String[] {TARGET_POLICY_FILE_NAME}"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,102,        );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,103,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,104,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,105,    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,130,        for ( expectedProps = expectedValues.propertyNames(); expectedProps.hasMoreElements();) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,168,        for ( expectedProps = expectedValues.propertyNames(); expectedProps.hasMoreElements();) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.java,204,        for ( expectedProps = expectedValues.propertyNames(); expectedProps.hasMoreElements();) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,31,import org.apache.derbyTesting.junit.SupportFilesSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,51,"    private static String POLICY_FILE_NAME=""functionTests/tests/derbynet/NetworkServerControlApiTest.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,52,"    private static String TARGET_POLICY_FILE_NAME=""server.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,215,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,216,     * Construct the name of the server policy file.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,217,     */
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,218,    private String makeServerPolicyName()
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,219,    {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,220,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,221,"            String  userDir = getSystemProperty( ""user.dir"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,222,            String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,223,            File      file = new File( fileName );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,224,            String  urlString = file.toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,225,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,226,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,227,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,228,        catch (Exception e)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,229,        {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,230,"            System.out.println( ""Unexpected exception caught by makeServerPolicyName(): "" + e );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,231,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,232,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,233,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,234,    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,235,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,236,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,250,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,251,"        String serverPolicyName = new NetworkServerControlApiTest(""test"").makeServerPolicyName();"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,252,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,265,"        test = new SecurityManagerSetup( test,serverPolicyName );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,266,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,267,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,268,        //
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,269,        // Copy over the policy file we want to use.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,270,        //
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,271,        test = new SupportFilesSetup
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,272,            (
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,273,"             test,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,274,"             null,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,275,"             new String[] { POLICY_FILE_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,276,"             null,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,277,             new String[] { TARGET_POLICY_FILE_NAME}
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,278,             );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,279,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,280,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java,281,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,24,import java.io.File;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,39,import org.apache.derbyTesting.junit.SupportFilesSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,58, private static String POLICY_FILE_NAME=
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,59,"     ""functionTests/tests/derbynet/RuntimeInfoTest.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,60,"    private static String TARGET_POLICY_FILE_NAME=""runtimeinfo.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,62,"    private static Locale englishLocale = new Locale(""en"",""US"");"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,63," private static Locale germanLocale = new Locale(""de"",""DE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,64," private static String stdout_err_tags = ""<[^<>]*STD.*>"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,231,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,232,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,233,     * Construct the name of the server policy file.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,234,     */
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,235,    private String makePolicyName()
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,236,    {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,237,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,238,"            String  userDir = getSystemProperty( ""user.dir"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,239,            String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,240,            File      file = new File( fileName );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,241,            String  urlString = file.toURI().toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,243,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,244,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,245,        catch (Exception e)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,246,        {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,247,            fail(e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,248,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,249,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,250,    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,251,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,259,"        String policyName = new RuntimeInfoTest(""test"").makePolicyName();"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,260,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,271,"        test = new SecurityManagerSetup(test, policyName);"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,272,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,273,        // Copy over the policy file we want to use.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,274,        test = new SupportFilesSetup
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,275,            (
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,276,"             test,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,277,"             null,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,278,"             new String[] { POLICY_FILE_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,279,"             null,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,280,             new String[] { TARGET_POLICY_FILE_NAME}
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,281,             );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,282,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.java,283,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,28,import java.util.Enumeration;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,40,import org.apache.derbyTesting.junit.OsName;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,42,import org.apache.derbyTesting.junit.SupportFilesSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,62,    private static String POLICY_FILE_NAME =
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,63,"        ""functionTests/tests/derbynet/ServerPropertiesTest.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,64,"    private static String TARGET_POLICY_FILE_NAME = ""server.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,129,        POLICY_FILE_NAME = null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,130,        TARGET_POLICY_FILE_NAME = null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,181,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,182,     * Construct the name of the server policy file.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,183,     */
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,184,    private String makeServerPolicyName()
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,185,    {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,186,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,187,"            String  userDir = getSystemProperty( ""user.dir"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,188,            String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,189,            File      file = new File( fileName );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,190,            String  urlString = file.toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,191,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,192,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,193,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,194,        catch (Exception e)
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,195,        {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,196,"            System.out.println( ""Unexpected exception caught by makeServerPolicyName(): "" + e );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,197,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,198,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,199,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,200,    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,201,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,205,"        String serverPolicyName = new ServerPropertiesTest(""test"").makeServerPolicyName();"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,209,"        test = new SecurityManagerSetup(test,serverPolicyName );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,210,        // Copy over the policy file we want to use.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,211,        //
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,212,        test = new SupportFilesSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,213,"            test, null, new String[] {POLICY_FILE_NAME},"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,214,"            null, new String[] {TARGET_POLICY_FILE_NAME}"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,215,        );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java,216,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,24,import java.io.File;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,38,import org.apache.derbyTesting.junit.SupportFilesSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,49,"    private static String TARGET_POLICY_FILE_NAME=""sysinfo.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,146,    private String makePolicyName() {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,147,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,148,"            String  userDir = getSystemProperty( ""user.dir"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,149,            String  fileName = userDir + File.separator +
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,150,            SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,151,            File      file = new File( fileName );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,152,            String  urlString = file.toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,153,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,154,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,155,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,156,        catch (Exception e) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,157,"            fail(""Unexpected exception caught by "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,158,"                    ""makeServerPolicyName(): "" + e );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,159,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,160,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,161,    }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,162,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,170,"        String policyName = new SysinfoTest(""test"").makePolicyName();"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,174,        test = TestConfiguration.singleUseDatabaseDecorator(
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,175,"                new SecurityManagerSetup(test, policyName));"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,176,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,177,        // Copy over the policy file we want to use.
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,178,        String POLICY_FILE_NAME=
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,179,"            ""functionTests/tests/derbynet/SysinfoTest.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,180,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,181,        test = new SupportFilesSetup
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,182,        (
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,183,"                test,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,184,"                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,185,"                new String[] { POLICY_FILE_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,186,"                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,187,                new String[] { TARGET_POLICY_FILE_NAME}
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,188,        );
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,189,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java,255,        TARGET_POLICY_FILE_NAME = null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,25,import java.io.File;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,44,import org.apache.derbyTesting.junit.SupportFilesSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,45,import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,64,    private static String POLICY_FILE_NAME =
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,65,"        ""functionTests/tests/jdbcapi/LDAPTests.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,66,"    private static String TARGET_POLICY_FILE_NAME = ""derby_tests.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,116,        Test test = decorateWithPolicy(suite);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,117,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,142,"    // grant ALL FILES execute, and getPolicy permissions, as well"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,143,    // as resolve/connect for the ldap server identified with the property
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,144,    private static Test decorateWithPolicy(Test test) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,145,"        String ldapPolicyName = new LDAPAuthenticationTest(""test"").makeServerPolicyName();"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,146,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,147,        // Install a security manager using the initial policy file.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,148,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,149,"        test = new SecurityManagerSetup(test,ldapPolicyName );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,150,        // Copy over the policy file we want to use.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,151,        //
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,152,        test = new SupportFilesSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,153,"            test, null, new String[] {POLICY_FILE_NAME},"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,154,"            null, new String[] {TARGET_POLICY_FILE_NAME}"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,155,        );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,156,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,157,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,158,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,159,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,160,     * Construct the name of the server policy file.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,161,     */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,162,    private String makeServerPolicyName()
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,163,    {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,164,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,165,"            String  userDir = getSystemProperty( ""user.dir"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,166,            String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,167,            File      file = new File( fileName );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,168,            String  urlString = file.toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,169,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,170,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,171,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,172,        catch (Exception e)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,173,        {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,174,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,175,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,176,    }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LDAPAuthenticationTest.java,177,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,147,        SecurityPolicyReloadingTest undecoratedTest = new SecurityPolicyReloadingTest();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,148,        Test                                        test = undecoratedTest;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,153,"        test = new SecurityManagerSetup( test, undecoratedTest.makeServerPolicyName() );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,172,"             new String[] { undecoratedTest.getSourcePolicy() },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,174,             new String[] { undecoratedTest.makeTargetPolicyStub() }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,376,    private String makeServerPolicyName()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,382,            String  urlString = file.toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,383,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,384,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,397,    private String makeTargetPolicyStub()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.java,405,    private String getSourcePolicy()
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,33,import junit.framework.TestSuite;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,40,import org.apache.derbyTesting.junit.SupportFilesSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,52,    private LinkedList  listExceptions = new LinkedList();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,53,    private Object syncObject = new Object();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,55,"    private String fprefix = ""javacore"";"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,56,"    private static String TARGET_POLICY_FILE_NAME=""derby3980deadlock.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,91,"        String policyName = new Derby3980DeadlockTest(""test"").makePolicyName();"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,99,"        test = new SecurityManagerSetup(test, policyName);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,100,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,101,        // Copy over the policy file we want to use.
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,102,        String POLICY_FILE_NAME=
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,103,"            ""functionTests/tests/store/Derby3980DeadlockTest.policy"";"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,104,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,105,        test = new SupportFilesSetup
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,106,        (
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,107,"                test,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,108,"                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,109,"                new String[] { POLICY_FILE_NAME },"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,110,"                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,111,                new String[] { TARGET_POLICY_FILE_NAME}
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,112,        );
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,113,        return test;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,114,    }
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,115,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,116,     * Generate the name of the local policy file
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,117,     * @return the name of the local testing policy file
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,118,     **/
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,119,    private String makePolicyName() {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,120,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,121,"            String  userDir = getSystemProperty( ""user.dir"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,122,            String  fileName = userDir + File.separator +
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,123,            SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,124,            File      file = new File( fileName );
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,125,            String  urlString = file.toURL().toExternalForm();
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,126,
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,127,            return urlString;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,128,        }
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,129,        catch (Exception e) {
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,130,"            fail(""Unexpected exception caught by "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,131,"                    ""makePolicyName(): "" + e );"
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,132,            return null;
java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby3980DeadlockTest.java,133,        }
java/testing/org/apache/derbyTesting/unitTests/junit/SystemPrivilegesPermissionTest.java,56,    static private String POLICY_FILE_NAME
java/testing/org/apache/derbyTesting/unitTests/junit/SystemPrivilegesPermissionTest.java,62,    static private String POLICY_FILE_NAME1
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,24,import org.apache.derby.impl.store.raw.data.PhysicalPageOperation;
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,25,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,26,
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,27,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,32,import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,38,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/AllocPageOperation.java,53," public AllocPageOperation(AllocPage allocPage, long pageNumber, int doStatus, int undoStatus)"
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,24,import org.apache.derby.impl.store.raw.data.PhysicalPageOperation;
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,25,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,26,
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,27,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,33,import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,39,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/ChainAllocPageOperation.java,53," public ChainAllocPageOperation(AllocPage allocPage, long pageNumber, long pageOffset)"
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,24,import org.apache.derby.impl.store.raw.data.PhysicalPageOperation;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,25,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,26,
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,27,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,32,import org.apache.derby.iapi.store.raw.ContainerHandle;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,33,import org.apache.derby.iapi.store.raw.data.RawContainerHandle;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,39,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation.java,80, public CompressSpacePageOperation(
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,24,import org.apache.derby.impl.store.raw.data.CompressSpacePageOperation;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,25,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,26,
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,27,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,33,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,37,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,43, * This class ensures backword compatibility for Soft upgrades.
java/engine/org/apache/derby/impl/store/raw/data/CompressSpacePageOperation10_2.java,51, public CompressSpacePageOperation10_2(
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,26,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,27,
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,29,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,32,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,45,
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,46,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/CopyRowsOperation.java,81," public CopyRowsOperation(RawTransaction t, BasePage destPage, BasePage srcPage,"
java/engine/org/apache/derby/impl/store/raw/data/DeleteOperation.java,85," public DeleteOperation(RawTransaction t, BasePage page, int slot, int recordId,"
java/engine/org/apache/derby/impl/store/raw/data/InitPageOperation.java,76," public InitPageOperation(BasePage page, int flag, int formatid,"
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,25,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,26,import org.apache.derby.impl.store.raw.data.ReclaimSpace;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,29,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,35,import org.apache.derby.iapi.store.raw.Compensation;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,37,import org.apache.derby.iapi.store.raw.RecordHandle;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,45,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,46,
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,51,import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,53,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,91, public InsertOperation(
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,24,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,25,
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,27,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,32,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,37,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/InvalidatePageOperation.java,62, public InvalidatePageOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,24,import org.apache.derby.impl.store.raw.data.RecordId;
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,25,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,26,
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,35,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,46,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,47,
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,74,public abstract class LogicalPageOperation
java/engine/org/apache/derby/impl/store/raw/data/LogicalPageOperation.java,91," protected LogicalPageOperation(BasePage page, LogicalUndo undo, int recordId)"
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,24,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,25,
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,26,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,42,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,70,public class LogicalUndoOperation extends PageBasicOperation implements Compensation {
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,77, protected LogicalUndoOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/LogicalUndoOperation.java,83," public LogicalUndoOperation(BasePage page, int recordId, LogicalPageOperation op)"
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,26,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,27,
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,28,import org.apache.derby.iapi.store.raw.ContainerHandle;
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,44,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,45,
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,48,import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,51,import java.io.InputStream;
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,82,"public abstract class PageBasicOperation implements Loggable, RePreparable"
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,96, protected PageBasicOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/PageBasicOperation.java,114, public PageBasicOperation()
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,24,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,35,import java.io.InputStream;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,36,import java.io.ObjectInput;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,59,public abstract class PhysicalPageOperation extends PageBasicOperation implements Undoable
java/engine/org/apache/derby/impl/store/raw/data/PhysicalPageOperation.java,61, protected PhysicalPageOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,24,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,25,
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,26,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,32,import org.apache.derby.iapi.store.raw.Page;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,41,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,42,import java.io.ObjectInput;
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,56, @derby.purpose update a physiacl log operation
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,65,public class PhysicalUndoOperation extends PageBasicOperation implements Compensation {
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,70, protected PhysicalUndoOperation(BasePage page)
java/engine/org/apache/derby/impl/store/raw/data/PhysicalUndoOperation.java,76," public PhysicalUndoOperation(BasePage page, PhysicalPageOperation op)"
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,26,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,27,
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,28,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,30,import org.apache.derby.iapi.services.io.Storable;
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,47,
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,48,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/PurgeOperation.java,89," public PurgeOperation(RawTransaction t, BasePage page, int slot, int"
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,24,public class RawField {
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,26, private byte[] data;
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,28, public RawField(byte[] data) {
java/engine/org/apache/derby/impl/store/raw/data/RawField.java,32, public byte[] getData() {
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,24,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,25,
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,26,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,27,
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,28,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,35,import org.apache.derby.iapi.store.raw.xact.RawTransaction;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,41,import org.apache.derby.iapi.util.ByteArray;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,42,import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,43,import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,44,
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,45,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,55,public class SetReservedSpaceOperation extends PageBasicOperation {
java/engine/org/apache/derby/impl/store/raw/data/SetReservedSpaceOperation.java,62," public SetReservedSpaceOperation(BasePage page, int slot,"
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,26,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,27,
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,30,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,44,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,45,
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,51,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/UpdateFieldOperation.java,87, public UpdateFieldOperation(
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,26,import org.apache.derby.impl.store.raw.data.BasePage;
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,27,
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,30,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,42,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,43,
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,48,import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,50,import java.io.OutputStream;
java/engine/org/apache/derby/impl/store/raw/data/UpdateOperation.java,85, public UpdateOperation(
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,24,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,25,import org.apache.derby.iapi.services.info.JVMInfo;
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,26,
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,228,"        /* 173 */       ""org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,232,"        /* 177 */       ""org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,233,"        /* 178 */       ""org.apache.derby.impl.sql.execute.rts.RealSortStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,234,"        /* 179 */       ""org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,235,"        /* 180 */       ""org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,236,"        /* 181 */       ""org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,237,"        /* 182 */       ""org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,238,"        /* 183 */       ""org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,239,"        /* 184 */       ""org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,240,"        /* 185 */       ""org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,241,"        /* 186 */       ""org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,242,"        /* 187 */       ""org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,243,"        /* 188 */       ""org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,244,"        /* 189 */       ""org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,245,"        /* 190 */       ""org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,246,"        /* 191 */       ""org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,258,"        /* 203 */       ""org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,269,"        /* 214 */       ""org.apache.derby.impl.sql.execute.rts.RealVTIStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,338,"        /* 283 */       ""org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,339,"        /* 284 */       ""org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,340,"        /* 285 */       ""org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,359,"        /* 304 */       ""org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,360,"        /* 305 */       ""org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,361,"        /* 306 */       ""org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,363,"        /* 308 */       ""org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,382,"        /* 327 */       ""org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,385,"        /* 330 */       ""org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,389,"        /* 334 */       ""org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,434,"        /* 379 */       ""org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,435,"        /* 380 */       ""org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,493,"    /* 438 */   null,"
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,494,"        /* 439 */   ""org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics"","
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,40,  <LI>The format of the stored object. All implementaions which support
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,44,  <P>An object should implement the Formatable inteface to support a
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,50,  of interfaces an implementaion must support when it supports
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1027,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1028,        class org.apache.derby.impl.sql.execute.RunTimeStatisticsImpl
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1029,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1030,    static public final int RUN_TIME_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1031,            (MIN_ID_2 + 173);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1032,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1039,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1040,        class org.apache.derby.impl.sql.execute.RealProjectRestrictStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1041,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1042,    static public final int REAL_PROJECT_RESTRICT_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1043,            (MIN_ID_2 + 177);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1044,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1045,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1046,        class org.apache.derby.impl.sql.execute.RealDistinctScalarAggregateStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1047,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1048,    static public final int REAL_DISTINCT_SCALAR_AGGREGATE_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1049,            (MIN_ID_2 + 284);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1050,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1051,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1052,        class org.apache.derby.impl.sql.execute.RealScalarAggregateStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1053,    */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1054,    static public final int REAL_SCALAR_AGGREGATE_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1055,            (MIN_ID_2 + 283);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1056,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1057,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1058,        class org.apache.derby.impl.sql.execute.RealGroupedAggregateStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1059,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1060,    static public final int REAL_GROUPED_AGGREGATE_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1061,            (MIN_ID_2 + 285);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1062,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1063,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1064,        class org.apache.derby.impl.sql.execute.RealSortStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1065,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1066,    static public final int REAL_SORT_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1067,            (MIN_ID_2 + 178);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1068,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1069,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1070,        class org.apache.derby.impl.sql.execute.RealTableScanStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1071,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1072,    static public final int REAL_TABLE_SCAN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1073,            (MIN_ID_2 + 179);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1074,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1075,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1076,        class org.apache.derby.impl.sql.execute.RealHashJoinStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1077,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1078,    static public final int REAL_HASH_JOIN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1079,            (MIN_ID_2 + 304);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1080,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1081,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1082,        class org.apache.derby.impl.sql.execute.RealNestedLoopJoinStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1083,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1084,    static public final int REAL_NESTED_LOOP_JOIN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1085,            (MIN_ID_2 + 180);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1086,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1087,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1088,        class org.apache.derby.impl.sql.execute.RealIndexRowToBaseRowStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1089,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1090,    static public final int REAL_INDEX_ROW_TO_BASE_ROW_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1091,            (MIN_ID_2 + 181);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1092,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1093,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1094,        class org.apache.derby.impl.sql.execute.RealAnyResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1095,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1096,    static public final int REAL_ANY_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1097,            (MIN_ID_2 + 182);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1098,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1099,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1100,        class org.apache.derby.impl.sql.execute.RealOnceResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1101,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1102,    static public final int REAL_ONCE_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1103,            (MIN_ID_2 + 183);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1104,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1105,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1106,        class org.apache.derby.impl.sql.execute.RealCurrentOfStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1107,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1108,    static public final int REAL_CURRENT_OF_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1109,            (MIN_ID_2 + 184);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1110,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1111,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1112,        class org.apache.derby.impl.sql.execute.RealRowResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1113,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1114,    static public final int REAL_ROW_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1115,            (MIN_ID_2 + 185);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1116,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1117,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1118,        class org.apache.derby.impl.sql.execute.RealUnionResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1119,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1120,    static public final int REAL_UNION_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1121,            (MIN_ID_2 + 186);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1122,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1123,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1124,        class org.apache.derby.impl.sql.execute.RealHashLeftOuterJoinStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1125,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1126,    static public final int REAL_HASH_LEFT_OUTER_JOIN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1127,            (MIN_ID_2 + 305);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1128,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1129,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1130,        class org.apache.derby.impl.sql.execute.RealNestedLoopLeftOuterJoinStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1131,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1132,    static public final int REAL_NESTED_LOOP_LEFT_OUTER_JOIN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1133,            (MIN_ID_2 + 187);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1134,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1135,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1136,        class org.apache.derby.impl.sql.execute.RealNormalizeResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1137,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1138,    static public final int REAL_NORMALIZE_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1139,            (MIN_ID_2 + 188);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1140,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1141,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1142,        class org.apache.derby.impl.sql.execute.RealInsertResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1143,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1144,    static public final int REAL_INSERT_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1145,            (MIN_ID_2 + 189);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1146,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1147,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1148,        class org.apache.derby.impl.sql.execute.RealInsertVTIResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1149,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1150,    static public final int REAL_INSERT_VTI_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1151,            (MIN_ID_2 + 379);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1152,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1153,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1154,        class org.apache.derby.impl.sql.execute.RealUpdateResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1155,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1156,    static public final int REAL_UPDATE_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1157,            (MIN_ID_2 + 190);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1158,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1159,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1160,        class org.apache.derby.impl.sql.execute.RealDeleteResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1161,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1162,    static public final int REAL_DELETE_VTI_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1163,            (MIN_ID_2 + 380);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1164,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1165,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1166,        class org.apache.derby.impl.sql.execute.RealDeleteResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1167,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1168,    static public final int REAL_DELETE_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1169,            (MIN_ID_2 + 191);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1170,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1171,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1172,"       org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics"""
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1173,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1174,    static public final int REAL_DELETE_CASCADE_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1175,            (MIN_ID_2 + 439);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1176,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1177,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1178,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1179,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1180,        class org.apache.derby.impl.sql.execute.RealHashScanStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1181,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1182,    static public final int REAL_HASH_SCAN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1183,            (MIN_ID_2 + 203);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1184,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1185,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1186,        class org.apache.derby.impl.sql.execute.RealDistinctScanStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1187,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1188,    static public final int REAL_DISTINCT_SCAN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1189,            (MIN_ID_2 + 334);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1190,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1191,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1192,        class org.apache.derby.impl.sql.execute.RealHashTableStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1193,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1194,    static public final int REAL_HASH_TABLE_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1195,            (MIN_ID_2 + 306);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1196,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1197,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1198,        class org.apache.derby.impl.sql.execute.RealVTIStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1199,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1200,    static public final int REAL_VTI_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1201,            (MIN_ID_2 + 214);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1202,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1203,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1204,        class org.apache.derby.impl.sql.execute.RealMaterializedResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1205,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1206,    static public final int REAL_MATERIALIZED_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1207,            (MIN_ID_2 + 308);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1208,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1209,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1210,        class org.apache.derby.impl.sql.execute.RealScrollInsensitiveResultSetStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1211,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1212,    static public final int REAL_SCROLL_INSENSITIVE_RESULT_SET_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1213,            (MIN_ID_2 + 330);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1214,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1346,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1347,        class org.apache.derby.impl.sql.execute.RealLastIndexKeyScanStatistics
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1348,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1349,    static public final int REAL_LAST_INDEX_KEY_SCAN_STATISTICS_IMPL_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1350,            (MIN_ID_2 + 327);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1351,
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,28,import org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,88,import java.util.AbstractMap;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3382,            InternalTriggerExecutionContext itec =
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,3383,                (InternalTriggerExecutionContext)triggerExecutionContexts.get(i);
java/engine/org/apache/derby/impl/sql/execute/AggregateSortObserver.java,34,public class AggregateSortObserver extends BasicSortObserver
java/engine/org/apache/derby/impl/sql/execute/AggregateSortObserver.java,37, protected GenericAggregator[] aggsToProcess;
java/engine/org/apache/derby/impl/sql/execute/AggregateSortObserver.java,38, protected GenericAggregator[] aggsToInitialize;
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,25,
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,26,import org.apache.derby.iapi.services.io.Storable;
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,27,
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,29,
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,31,
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,33,
java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java,44,public class CardinalityCounter implements RowLocationRetRowSource
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,56,public class DeleteCascadeResultSet extends DeleteResultSet
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,59,
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,60, public ResultSet[] dependentResultSets;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,62, private CursorResultSet parentSource;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,63, private FKInfo parentFKInfo;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,64, private long fkIndexConglomNumber;
java/engine/org/apache/derby/impl/sql/execute/DeleteConstantAction.java,94, public DeleteConstantAction(
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,24,import java.io.IOException;
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,25,import java.io.ObjectInput;
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,26,import java.io.ObjectOutput;
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,27,
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,28,import org.apache.derby.iapi.services.io.StoredFormatIds;
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,33,
java/engine/org/apache/derby/impl/sql/execute/IndexRow.java,38,public class IndexRow extends ValueRow implements ExecIndexRow
java/engine/org/apache/derby/impl/sql/execute/IndexSetChanger.java,46,public class IndexSetChanger
java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java,123," public InsertConstantAction(TableDescriptor tableDescriptor,"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,60,"public class InternalTriggerExecutionContext implements TriggerExecutionContext, ExecutionStmtValidator"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,140, public InternalTriggerExecutionContext
java/engine/org/apache/derby/impl/sql/execute/UpdatableVTIConstantAction.java,64," public UpdatableVTIConstantAction( int statementType,"
java/engine/org/apache/derby/impl/sql/execute/UpdateConstantAction.java,101, public UpdateConstantAction(
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,27,import org.apache.derby.iapi.types.RowLocation;
java/engine/org/apache/derby/impl/sql/execute/ValueRow.java,33,public class ValueRow implements ExecRow
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,26,import org.apache.derby.iapi.types.TypeId;
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,32,import org.apache.derby.impl.sql.compile.ActivationClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,33,
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,36,import org.apache.derby.iapi.util.JBitSet;
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,62, int[]    checkColumnReferences;
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,469, /**
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,470,  * Get the array of 1-based column references for a check constraint.
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,471,  *
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,472,  * @return The array of 1-based column references for a check constraint.
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,473,  */
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,474, public int[] getCheckColumnReferences()
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,475, {
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,476,  return checkColumnReferences;
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,477, }
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,478,
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,479, /**
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,480,  * Set the array of 1-based column references for a check constraint.
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,481,  *
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,482,  * @param checkColumnReferences The array of 1-based column references
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,483,  *        for the check constraint.
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,484,  */
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,485, public void setCheckColumnReferences(int[] checkColumnReferences)
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,486, {
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,487,  this.checkColumnReferences = checkColumnReferences;
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,488, }
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,489,
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,28,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,37,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,51, boolean    unique;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,52, DataDictionary  dd = null;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,53, Properties   properties;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,54, String    indexType;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,55, TableName   indexName;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,56, TableName   tableName;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,57, List    columnNameList;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,58, String[]   columnNames = null;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,59, boolean[]   isAscending;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,60, int[]    boundColumnIDs;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,61,
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,62, TableDescriptor  td;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,124,
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,125, public boolean    getUniqueness() { return unique; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,126, public String    getIndexType() { return indexType; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,127, public TableName   getIndexName() { return indexName; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,128, public UUID    getBoundTableID() { return td.getUUID(); }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,129,    public Properties   getProperties() { return properties; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,130, public  TableName   getIndexTableName() {return tableName; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,131, public  String[]   getColumnNames() { return columnNames; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,132,
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,133, // get 1-based column ids
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,134, public int[]    getKeyColumnIDs() { return boundColumnIDs; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,135, public boolean[]   getIsAscending() { return isAscending; }
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,136,
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,250,  boolean index_has_long_column = false;
java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java,251,
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,170, public int    getCheckOption() { return checkOption; }
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,171,
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,174, public ColumnInfo[] getColumnInfo() { return colInfos; }
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,175,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1864," public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4803,  * required to peform a referential action on dependent table.
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4805," public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java,658,  * required to peform a referential action on dependent table.
java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java,660," public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/ParseException.java,33,public class ParseException extends Exception {
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1863,  * required to peform a referential action on dependent table.
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1865," public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1530,  * required to peform a referential action on dependent table.
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1532," public void setRefActionInfo(long fkIndexConglomId,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,4412,    public class ColumnMapping {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,4414,        public final int[] mapArray;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,4415,        public final boolean[] cloneMap;
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,4417,"        public ColumnMapping(int[] mapArray, boolean[] cloneMap) {"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,681,"   /* We have a valid check constraint, now build an array of"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,682,    * 1-based columnIds that the constraint references.
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,683,    */
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,684,   ResultColumnList rcl = table.getResultColumns();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,685,   int  numReferenced = rcl.countReferencedColumns();
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,686,   int[] checkColumnReferences = new int[numReferenced];
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,687,
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,688,"   rcl.recordColumnReferences(checkColumnReferences, 1);"
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,689,   cdn.setCheckColumnReferences(checkColumnReferences);
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,690,
java/engine/org/apache/derby/impl/sql/compile/TableElementList.java,691,   /* Now we build a list with only the referenced columns and
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,113, // Array to hold Objects that contain primitive
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,114, // args required by the operator method call.
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,115, private Object [] additionalArgs;
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,149,      ((methodNameOrAddedArgs == null) ||
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,150,"      (methodNameOrAddedArgs instanceof Object[]))),"
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,159,   this.additionalArgs = (Object[])methodNameOrAddedArgs;
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,404,"                ((additionalArgs != null) && (additionalArgs.length > 0)),"
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,408,        DataTypeDescriptor targetType =
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,409,            (DataTypeDescriptor)additionalArgs[0];
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,410,
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,742,            DataTypeDescriptor targetType =
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,743,                (DataTypeDescriptor)additionalArgs[0];
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,766,        mb.push(((Boolean)additionalArgs[0]).booleanValue());
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,347,  Object[] objArray = readObjectArray(in);
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,348,  int size = 0;
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,350,  if (objArray == null)
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,351,   return null;
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,352,
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,353,  String[] stringArray = new String[size = objArray.length];
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,354,
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,355,  for (int i = 0; i < size; i++)
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,356,  {
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,357,   stringArray[i] = (String)objArray[i];
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,358,  }
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,31,import org.apache.derby.iapi.sql.ResultColumnDescriptor;
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,152, /**
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,153,  * the target columns of the cursor; this is a superset of
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,154,"  * the updatable columns, describing the row available"
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,155,  *
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,156,  * @return target columns of the cursor as an array of column descriptors
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,157,  */
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,158, ResultColumnDescriptor[] getTargetColumns();
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,160, /**
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,161,  * the update columns of the cursor
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,162,  *
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,163,  * @return update columns of the cursor as a string of column names
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,164,  */
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,165, String[] getUpdateColumns();
java/engine/org/apache/derby/impl/sql/CursorInfo.java,24,import org.apache.derby.iapi.sql.ResultColumnDescriptor;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,30,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,60, ResultColumnDescriptor[] targetColumns;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,61, String[]      updateColumns;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,78,"  ResultColumnDescriptor[] targetColumns,"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,79,  String[]     updateColumns
java/engine/org/apache/derby/impl/sql/CursorInfo.java,84,  this.targetColumns = targetColumns;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,85,  this.updateColumns = updateColumns;
java/engine/org/apache/derby/impl/sql/CursorInfo.java,104,"  ArrayUtil.writeArray(out, targetColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,105,"  ArrayUtil.writeArray(out, updateColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,121,  int len = ArrayUtil.readArrayLength(in);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,122,  if (len != 0)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,123,  {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,124,   targetColumns = new ResultColumnDescriptor[len];
java/engine/org/apache/derby/impl/sql/CursorInfo.java,125,"   ArrayUtil.readArrayItems(in, targetColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,126,  }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,127,  len = ArrayUtil.readArrayLength(in);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,128,  if (len != 0)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,129,  {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,130,   updateColumns = new String[len];
java/engine/org/apache/derby/impl/sql/CursorInfo.java,131,"   ArrayUtil.readArrayItems(in, updateColumns);"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,132,  }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,146,   StringBuffer strbuf = new StringBuffer();
java/engine/org/apache/derby/impl/sql/CursorInfo.java,147,
java/engine/org/apache/derby/impl/sql/CursorInfo.java,148,"   strbuf.append(""CursorInfo""+"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,151,"    ""\n\tupdateColumns: "");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,152,
java/engine/org/apache/derby/impl/sql/CursorInfo.java,153,   if (updateColumns == null)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,154,   {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,155,"    strbuf.append(""NULL\n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,156,   }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,157,   else
java/engine/org/apache/derby/impl/sql/CursorInfo.java,158,   {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,159,"    strbuf.append(""{"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,160,    for (int i = 0; i < updateColumns.length; i++)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,161,    {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,162,     if (i > 0)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,163,"      strbuf.append("","");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,164,     strbuf.append(updateColumns[i]);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,165,    }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,166,"    strbuf.append("")\n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,167,   }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,168,
java/engine/org/apache/derby/impl/sql/CursorInfo.java,169,"   strbuf.append(""\tTargetColumnDescriptors: \n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,170,   if (targetColumns == null)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,171,   {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,172,"    strbuf.append(""NULL"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,173,   }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,174,   else
java/engine/org/apache/derby/impl/sql/CursorInfo.java,175,   {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,176,    for (int i = 0; i < targetColumns.length; i++)
java/engine/org/apache/derby/impl/sql/CursorInfo.java,177,    {
java/engine/org/apache/derby/impl/sql/CursorInfo.java,178,     strbuf.append(targetColumns[i]);
java/engine/org/apache/derby/impl/sql/CursorInfo.java,179,    }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,180,"    strbuf.append(""\n"");"
java/engine/org/apache/derby/impl/sql/CursorInfo.java,181,   }
java/engine/org/apache/derby/impl/sql/CursorInfo.java,182,   return strbuf.toString();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,50,import org.apache.derby.iapi.sql.ResultColumnDescriptor;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,129, protected ResultColumnDescriptor[] targetColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,130, protected String[]      updateColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,986,   targetColumns = null;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1003,   CursorInfo cursorInfo = (CursorInfo)qt.getCursorInfo();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1004,   if (cursorInfo != null)
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1005,   {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1006,    targetTable = cursorInfo.targetTable;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1007,    targetColumns = cursorInfo.targetColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1008,    updateColumns = cursorInfo.updateColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1009,    updateMode = cursorInfo.updateMode;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1010,   }
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1055, /**
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1056,  * the target columns of the cursor as a result column list
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1057,  *
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1058,  * @return target columns of the cursor as a result column list
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1059,  */
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1060, public ResultColumnDescriptor[] getTargetColumns() {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1061,  return targetColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1062, }
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1064, /**
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1065,  * the update columns of the cursor as a update column list
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1066,  *
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1067,  * @return update columns of the cursor as a array of strings
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1068,  */
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1069, public String[] getUpdateColumns()
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1070, {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1071,  return updateColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1072, }
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1083,"   targetColumns,"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1093,   targetColumns = cursorInfo.targetColumns;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,1197,  clone.targetColumns = targetColumns;
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,342,     !foundString(
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,343,"       preStmt.getUpdateColumns(),"
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,344,       columnReference.getColumnName()));
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,31,import org.apache.derby.iapi.sql.ResultColumnDescriptor;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,69, private ResultColumnDescriptor[] targetColumnDescriptors;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,553,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,554,   /* We must generate the target column list at bind time
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,555,    * because the optimizer may transform the FromBaseTable from
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,556,    * a table scan into an index scan.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,557,    */
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,558,   genTargetResultColList();
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,562,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,563,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,690, /**
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,691,  * Return String[] of names from the FOR UPDATE OF List
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,692,  *
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,693,  * @return String[] of names from the FOR UPDATE OF list.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,694,  */
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,695, private String[] getUpdatableColumns()
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,696, {
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,697,  return (updatableColumns == null) ?
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,698,    (String[])null :
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,699,    getUpdateColumnNames();
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,700, }
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,701,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,702, /**
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,703,  Positioned update needs to know what the target result set
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,704,  looks like. This is generated from the UpdateColumnList
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,705,"  available for the cursor, to describe the rows coming from"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,706,  the target result set under the cursor. This result set contains
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,707,  a superset of the updatable columns; the caller must verify that
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,708,  only those listed in the FOR UPDATE clause are used.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,709,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,710,  @return a result column list containing a description of
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,711,  the target table (this may contain non-updatable columns).
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,712,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,713,  */
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,714, private ResultColumnDescriptor[] genTargetResultColList()
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,715,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,716, {
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,717,  ResultColumnList newList;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,718,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,719,  /*
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,720,     updateTable holds the FromTable that is the target.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,721,"     copy its ResultColumnList, making BaseColumn references"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,722,"     for use in the CurrentOfNode, which behaves as if it had"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,723,     base columns for the statement it is in.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,724,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,725,   updateTable is null if the cursor is not updatable.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,726,   */
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,727,  if (updateTable == null) return null;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,728,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,729,  if (targetColumnDescriptors != null) return targetColumnDescriptors;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,730,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,731,  newList = (ResultColumnList) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,732,"          C_NodeTypes.RESULT_COLUMN_LIST,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,733,          getContextManager());
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,734,  ResultColumnList rcl = updateTable.getResultColumns();
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,735,  int rclSize = rcl.size();
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,736,  for (int index = 0; index < rclSize; index++)
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,737,  {
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,738,"   ResultColumn origCol, newCol;"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,739,   ValueNode newNode;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,740,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,741,   origCol = (ResultColumn) rcl.elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,742,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,743,   // Build a ResultColumn/BaseColumnNode pair for the column
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,744,   newNode = (ValueNode) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,745,"       C_NodeTypes.BASE_COLUMN_NODE,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,746,"       origCol.getName(),"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,747,"       makeTableName(origCol.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,748,"            origCol.getTableName()),"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,749,"       origCol.getTypeServices(),"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,750,       getContextManager());
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,751,   newCol = (ResultColumn) getNodeFactory().getNode(
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,752,"         C_NodeTypes.RESULT_COLUMN,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,753,"         origCol.columnDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,754,"         newNode,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,755,         getContextManager());
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,756,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,757,   /* Build the ResultColumnList to return */
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,758,   newList.addResultColumn(newCol);
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,759,  }
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,760,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,761,  // we save the result so we only do this once
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,762,  targetColumnDescriptors = newList.makeResultDescriptors();
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,763,  return targetColumnDescriptors;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,764, }
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,765,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,798,"        genTargetResultColList(),"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,799,        getUpdatableColumns());
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,846, /**
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,847,  * Get an array of strings for each updatable column
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,848,  * in this list.
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,849,  *
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,850,  * @return an array of strings
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,851,  */
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,852, private String[] getUpdateColumnNames()
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,853, {
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,854,  int size = updatableColumns.size();
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,855,  if (size == 0)
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,856,  {
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,857,   return (String[])null;
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,858,  }
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,859,
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,860,        return (String[]) updatableColumns.toArray(new String[size]);
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,861, }
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,862,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,806," public boolean foundString(String[] list, String search)"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,807, {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,808,  if (list == null)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,809,  {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,810,   return false;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,811,  }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,812,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,813,  for (int i = 0; i < list.length; i++)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,814,  {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,815,   if (list[i].equals(search))
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,816,   {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,817,    return true;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,818,   }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,819,  }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,820,  return false;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,821, }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,822,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1269, public Object getCursorInfo() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1270, {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1271,  return null;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1272, }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1273,
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1682, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1683,  * Is this column in this array of strings?
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1684,  *
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1685,  * @param list the array of column names to compare
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1686,  *
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1687,  * @return true/false
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1688,  */
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1689, public boolean foundInList(String[] list)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1690, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1691,"  return foundString(list, name);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1692, }
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1693,
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2270,  * @param ucl   The cursor's FOR UPDATE OF list.  (May be null.)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2275," public void checkColumnUpdateability(String[] ucl, String cursorName)"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2285,    ! resultColumn.foundInList(ucl))
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,393,   String[] ucl = cursorStmt.getUpdateColumns();
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,399,   if (ucl == null || (ucl.length == 0))
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,429,"    resultSet.getResultColumns().checkColumnUpdateability(ucl,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,430,        currentOfNode.getCursorName());
java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java,69, public static final String[] servicePropertyList = {
java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java,730,  for (int i = 0; i < PropertyUtil.servicePropertyList.length; i++) {
java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java,732,    serviceProperties.getProperty(PropertyUtil.servicePropertyList[i]);
java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java,733,"   if (value != null) set.put(PropertyUtil.servicePropertyList[i], value);"
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,24,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java,28,import java.lang.reflect.Array;
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,346, public void setSavedObjects(Object[] objs);
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,70,  * @return Object[] the saved objects
java/engine/org/apache/derby/iapi/sql/execute/ExecPreparedStatement.java,72, Object[] getSavedObjects();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,709, public final Object[] getSavedObjects()
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,711,  return savedObjects;
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,349, public void setSavedObjects(Object[] objs)
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,351,  if (objs == null)
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,352,  {
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,353,   return;
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,354,  }
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,355,
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,356,  for (int i = 0; i < objs.length; i++)
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,357,  {
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,358,   addSavedObject(objs[i]);
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,359,  }
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,94, private FormatableHashtable compileTimeConstants;
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1659,  // compileTimeConstants can be null
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1960,  if (compileTimeConstants == null)
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1961,   compileTimeConstants = new FormatableHashtable();
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1962,
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1967,  if ((key == null) || (compileTimeConstants == null))
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,106,  final Object[] saved = gp.getSavedObjects();
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,108,  scoci = (StaticCompiledOpenConglomInfo)saved[scociItem];
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,123,   this.accessedHeapCols = (FormatableBitSet)saved[heapColRefItem];
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,126,   this.accessedAllCols = (FormatableBitSet)saved[allColRefItem];
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,132,    saved[indexColMapItem]).getReferencedColumnPositions();
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,135,        ExecRow resultRow = ((ExecRowBuilder) saved[resultRowAllocator])
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,136,                                .build(a.getExecutionFactory());
java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java,157,    (FormatableBitSet)saved[heapOnlyColRefItem];
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,84, private FormatableHashtable compileTimeConstants;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,85, private int ctcNumber;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,164,  this.ctcNumber = ctcNumber;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,709,  if (compileTimeConstants == null) {
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,710,
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,711,   Object[] savedObjects = activation.getPreparedStatement().getSavedObjects();
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,712,
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,713,   synchronized (savedObjects) {
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,714,
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,715,    compileTimeConstants = (FormatableHashtable) savedObjects[ctcNumber];
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,716,    if (compileTimeConstants == null) {
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,717,     compileTimeConstants = new FormatableHashtable();
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,718,     savedObjects[ctcNumber] = compileTimeConstants;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,719,    }
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,720,   }
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,721,  }
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,722,
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,85, /**
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,86,  * Get the columns that have been modified by the statement
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,87,  * that caused this trigger to fire.  If all columns are
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,88,"  * modified, will return null (e.g. for INSERT or DELETE"
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,89,  * return null).
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,90,  *
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,91,  * @return an array of Strings
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,92,  */
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,93, public String[] getModifiedColumns();
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,94,
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,73," public  DDColumnDependableFinder(int formatId, byte[] columnBitMap)"
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,85, /**
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,86,  * Get the byte array encoding the bitmap of referenced columns in
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,87,  * a table.
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,88,  *
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,89,  * @return  byte array as in a FormatableBitSet encoding column bit map
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,90,  */
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,91, public  byte[] getColumnBitMap()
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,92, {
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,93,  return columnBitMap;
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,94, }
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,95,
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,96, /**
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,97,  * Set the byte array encoding the bitmap of referenced columns in
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,98,  * a table.
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,99,  *
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,100,  * @param columnBitMap byte array as in a FormatableBitSet encoding column bit map
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,101,  */
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,102, public void setColumnBitMap(byte[] columnBitMap)
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,103, {
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,104,  this.columnBitMap = columnBitMap;
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,105, }
java/engine/org/apache/derby/impl/sql/catalog/DDColumnDependableFinder.java,106,
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,398, /**
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,399,  * Get the columns that have been modified by the statement
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,400,  * that caused this trigger to fire.  If all columns are
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,401,"  * modified, will return null (e.g. for INSERT or DELETE will"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,402,  * return null).
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,403,  *
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,404,  * @return an array of Strings
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,405,  */
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,406, public String[] getModifiedColumns()
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,407, {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,408,  return changedColNames;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,409, }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,410,
java/engine/org/apache/derby/iapi/types/ClobStreamHeaderGenerator.java,205,"                System.arraycopy(DERBY_EOF_MARKER, 0,"
java/engine/org/apache/derby/iapi/types/ClobStreamHeaderGenerator.java,206,"                                 buffer, offset, DERBY_EOF_MARKER.length);"
java/engine/org/apache/derby/iapi/types/ClobStreamHeaderGenerator.java,207,                return DERBY_EOF_MARKER.length;
java/engine/org/apache/derby/iapi/types/ClobStreamHeaderGenerator.java,231,                out.write(DERBY_EOF_MARKER);
java/engine/org/apache/derby/iapi/types/ClobStreamHeaderGenerator.java,232,                return DERBY_EOF_MARKER.length;
java/engine/org/apache/derby/iapi/types/StreamHeaderGenerator.java,31,    /** The Derby-specific end-of-stream marker. */
java/engine/org/apache/derby/iapi/types/StreamHeaderGenerator.java,32,"    byte[] DERBY_EOF_MARKER = new byte[] {(byte)0xE0, 0x00, 0x00};"
java/engine/org/apache/derby/iapi/types/StreamHeaderGenerator.java,33,
java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java,39, /* Leave these fields public for object inspectors */
java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java,40, public  ResultSetStatistics[]  dependentTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RealDeleteCascadeResultSetStatistics.java,59,  this.dependentTrackingArray = dependentTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java,119,  this.hashKeyColumns = hashKeyColumns;
java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java,101,  this.hashKeyColumns = hashKeyColumns;
java/engine/org/apache/derby/impl/sql/execute/rts/RealHashTableStatistics.java,112,  this.subqueryTrackingArray = subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RealProjectRestrictStatistics.java,99,  this.subqueryTrackingArray = subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,100,  this.beginCompilationTimestamp = beginCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,101,  this.endCompilationTimestamp = endCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,102,  this.beginExecutionTimestamp = beginExecutionTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,103,  this.endExecutionTimestamp = endExecutionTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,104,  this.subqueryTrackingArray = subqueryTrackingArray;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,177,  return beginCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,187,  return endCompilationTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,197,  return beginExecutionTimestamp;
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,207,  return endExecutionTimestamp;
java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java,242,   this.indexColumnPositions = indexColumnPositions;
java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java,243,   this.indexUniqueness = indexUniqueness;
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,232,  this.columnNames = columnNames;
java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java,243,  return columnNames;
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,203,  return referencedColumns;
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,88,  return indexRowGenerators;
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,102,  return indexConglomerateNumbers;
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,115,  return indexNames;
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,130,  return distinctIndexRowGenerators;
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,145,  return distinctIndexConglomerateNumbers;
java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java,159,  return indexNames;
java/engine/org/apache/derby/iapi/sql/dictionary/PasswordHasher.java,110,        _salt = salt;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,221,  this.compileTime = compileTime;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,513,  return compileTime;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,596,  return params;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,606,  this.params = params;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,625,  return paramDefaults;
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,635,  this.paramDefaults = values;
java/engine/org/apache/derby/iapi/sql/dictionary/StatisticsDescriptor.java,75, public Timestamp getUpdateTimestamp() { return statUpdateTime; }
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,191,  this.referencedColsInTriggerAction = referencedColsInTriggerAction;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,192,  this.creationTimestamp = creationTimestamp;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,277,  return creationTimestamp;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,463,  return referencedCols;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,473,  return referencedColsInTriggerAction;
java/engine/org/apache/derby/iapi/sql/dictionary/UserDescriptor.java,68,        _lastModified = lastModified;
java/engine/org/apache/derby/iapi/sql/dictionary/UserDescriptor.java,73,    public  Timestamp   getLastModified()   { return _lastModified; }
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,101,  this.beginCompilationTimestamp =beginCompilationTimestamp == null ?
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,102,            null : (Timestamp) beginCompilationTimestamp.clone();
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,103,  this.endCompilationTimestamp = endCompilationTimestamp == null ?
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,104,            null : (Timestamp) endCompilationTimestamp.clone();
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,105,  this.beginExecutionTimestamp = beginExecutionTimestamp == null ?
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,106,            null : (Timestamp) beginExecutionTimestamp.clone();
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,107,  this.endExecutionTimestamp = endExecutionTimestamp == null ?
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,108,            null : (Timestamp) endExecutionTimestamp.clone();
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,182,  return beginCompilationTimestamp == null ?  null : (Timestamp) beginCompilationTimestamp.clone();
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,192,  return endCompilationTimestamp == null ? null : (Timestamp) endCompilationTimestamp.clone();
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,202,  return beginExecutionTimestamp == null ? null : (Timestamp) beginExecutionTimestamp.clone();
java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java,212,  return endExecutionTimestamp == null ? null : (Timestamp) endExecutionTimestamp.clone();
java/drda/org/apache/derby/drda/NetworkServerControl.java,601,        serverImpl.clientLocale = locale;
java/drda/org/apache/derby/impl/drda/DDMReader.java,1055,            e.printStackTrace(agent.getServer().logWriter);
java/drda/org/apache/derby/impl/drda/DDMReader.java,1408,            e.printStackTrace(agent.getServer().logWriter);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1793,                                 NetworkServerControlImpl.att_extnam);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1799,                                 NetworkServerControlImpl.att_srvclsnm);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1803,                                 NetworkServerControlImpl.att_srvrlslv);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,3672,                                 NetworkServerControlImpl.prdId);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6307,        if (SanityManager.DEBUG && server.debugOutput && sqlcode < 0) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6328,        writer.writeBytes(NetworkServerControlImpl.prdIdBytes_);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6381,        writer.writeBytes(NetworkServerControlImpl.prdIdBytes_);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8846,        if (SanityManager.DEBUG && server.debugOutput == true) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8866,        if (SanityManager.DEBUG && server.debugOutput == true) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,114,    public final static String [] DASHARGS =
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,174,    protected static String att_srvclsnm;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,177,    protected static String att_extnam;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,178,    protected static String att_srvrlslv;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,179,    protected static String prdId;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,180,    protected static byte[] prdIdBytes_;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,198,"    protected final static int [] MGR_LEVELS = { 7, // AGENT"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,215,    protected PrintWriter logWriter;                        // console
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,216,    protected PrintWriter cloudscapeLogWriter;              // derby.log
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,279,    protected boolean debugOutput = false;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,303,    public String clientLocale;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,4094,    protected void setClientLocale(String locale)
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,844,            return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
java/drda/org/apache/derby/impl/drda/DRDAStatement.java,846,            return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,846,  * ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,41, /* Constants for scan isolation levels. */
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,42, public static final int UNSPECIFIED_ISOLATION_LEVEL = 0;
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,43, public static final int READ_UNCOMMITTED_ISOLATION_LEVEL = 1;
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,44, public static final int READ_COMMITTED_ISOLATION_LEVEL = 2;
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,45, public static final int REPEATABLE_READ_ISOLATION_LEVEL = 3;
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,46, public static final int SERIALIZABLE_ISOLATION_LEVEL = 4;
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,47,
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,48,    /**
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,49,     * Map from Derby transaction isolation constants to
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,50,     * JDBC constants.
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,51,     */
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,52, public static final int[] CS_TO_JDBC_ISOLATION_LEVEL_MAP = {
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,53,"  java.sql.Connection.TRANSACTION_NONE,    // UNSPECIFIED_ISOLATION_LEVEL"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,54,"  java.sql.Connection.TRANSACTION_READ_UNCOMMITTED, // READ_UNCOMMITTED_ISOLATION_LEVEL"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,55,"  java.sql.Connection.TRANSACTION_READ_COMMITTED,  // READ_COMMITTED_ISOLATION_LEVEL"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,56,"  java.sql.Connection.TRANSACTION_REPEATABLE_READ, // REPEATABLE_READ_ISOLATION_LEVEL"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,57,  java.sql.Connection.TRANSACTION_SERIALIZABLE  // SERIALIZABLE_ISOLATION_LEVEL
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,58, };
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,59,
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,60,    /**
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,61,     * Map from Derby transaction isolation constants to
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,62,     * text values used in SQL. Note that the text
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,63,"     * ""REPEATABLE READ"" or ""RR"" maps to SERIALIZABLE_ISOLATION_LEVEL"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,64,     * as a hang over from DB2 compatibility and now to preserve
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,65,     * backwards compatability.
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,66,     */
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,67, public static final String[][] CS_TO_SQL_ISOLATION_MAP = {
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,68,"  { ""  ""},     // UNSPECIFIED_ISOLATION_LEVEL"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,69,"  { ""UR"", ""DIRTY READ"", ""READ UNCOMMITTED""},"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,70,"  { ""CS"", ""CURSOR STABILITY"", ""READ COMMITTED""},"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,71,"  { ""RS""},  // read stability"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,72,"  { ""RR"", ""REPEATABLE READ"", ""SERIALIZABLE""}"
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,73, };
java/engine/org/apache/derby/iapi/sql/execute/ExecutionContext.java,74,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2216,   iLevel = ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2220,   iLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2224,            iLevel = ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2228,   iLevel = ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2258,  return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getLanguageConnection().getCurrentIsolationLevel()];
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3139,"  *               level == ExecutionContext.UNSPECIFIED_ISOLATION,"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3151,   case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3152,   case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3153,   case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3154,   case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3155,   case ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/GenericStatement.java,313,    ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL)
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,149,  scanIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4263,  if ((isolationLevel != ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL) &&
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1959,  return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getCompilerContext().getScanIsolationLevel()];
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,233,    private int defaultIsolationLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,257,    protected int prepareIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2953,        return (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL) ? defaultIsolationLevel : isolationLevel;
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2961,        if( isolationLevel >= 0 && isolationLevel < ExecutionContext.CS_TO_SQL_ISOLATION_MAP.length)
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2962,            return ExecutionContext.CS_TO_SQL_ISOLATION_MAP[ isolationLevel][0];
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2963,        return ExecutionContext.CS_TO_SQL_ISOLATION_MAP[ ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL][0];
java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java,2982,            return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java,238,     * ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL isolation level. Otherwise
java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java,263,"        // returns ExecutionContext.*ISOLATION_LEVEL constants, not"
java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java,268,        if (isolationLevel == ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL) {
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,45,
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,304,   isolationLevel = ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,316,   case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,321,   case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,326,   case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/RowChangerImpl.java,331,   case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java,117,        if (isolationLevel == ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL) {
java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java,179,                     ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL)) {
java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java,195,        case ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java,197,        case ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java,208,        case ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java,210,        case ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL:
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,47,
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,104,"  not application, it will be set to ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL"
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,106, private int scanIsolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,707,  return ExecutionContext.CS_TO_JDBC_ISOLATION_LEVEL_MAP[getScanIsolationLevel()];
java/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementDescriptor.java,77,        this.xplain_time = xplain_time;
java/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementTimingsDescriptor.java,31,import java.sql.Types;
java/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementTimingsDescriptor.java,71,        this.begin_comp_time = begin_comp_time;
java/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementTimingsDescriptor.java,72,        this.end_comp_time   = end_comp_time;
java/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementTimingsDescriptor.java,73,        this.begin_exe_time  = begin_exe_time;
java/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementTimingsDescriptor.java,74,        this.end_exe_time    = end_exe_time;
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,41,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,42,
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,476, /**
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,477,  * Get the array of DataTypeDescriptor representing the types of
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,478,  * the ? parameters.
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,479,  *
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,480,  * @return The parameter descriptors
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,481,  */
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,482,
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,483, public DataTypeDescriptor[] getParameterTypes();
java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java,484,
java/engine/org/apache/derby/impl/sql/compile/CharStream.java,39,public interface CharStream {
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,603,  * @see CompilerContext#getParameterTypes
java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java,605, public DataTypeDescriptor[] getParameterTypes()
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1051,   getCompilerContext().getParameterTypes()[0] = dts;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,613,  return getCompilerContext().getParameterTypes();
java/engine/org/apache/derby/impl/sql/compile/Token.java,28,public class Token {
java/client/org/apache/derby/client/am/ClientStatement.java,39,    public  static  long    fetchedRowBase = 0L;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,99,    public  static  long    fetchedRowBase = 0L;
java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData.java,68,  this.columnInfo = columnInfo;
java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java,76,  return arguments;
java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java,116, public final long modifiedRowCount() { return rowCount + RowUtil.rowCountBase; }
java/engine/org/apache/derby/impl/sql/execute/RowUtil.java,40,    public  static  long    rowCountBase = 0L;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,543,            ClientStatement.fetchedRowBase = rowCountBase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,702,        EmbedResultSet.fetchedRowBase = newBase;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java,703,        RowUtil.rowCountBase = newBase;
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1554, /**
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1555,  Check the parameterINdex is in range and return the
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1556,  array of type descriptors.
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1557,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1558,  @exception SQLException parameter is out of range
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1559, */
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1560, protected final DataTypeDescriptor[] getTypes(int parameterIndex)
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1561,  throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1562,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1563,  DataTypeDescriptor[] types = preparedStatement.getParameterTypes();
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1564,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1565,  if (types == null) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1566,   throw newSQLException(SQLState.NO_INPUT_PARAMETERS);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1567,  }
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1568,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1569,  /* Check that the parameterIndex is in range. */
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1570,  if (parameterIndex < 1 ||
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1571,    parameterIndex > types.length) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1572,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1573,   /* This message matches the one used by the DBMS */
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1574,"   throw newSQLException(SQLState.LANG_INVALID_PARAM_POSITION,"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1575,"            new Integer(parameterIndex), new Integer(types.length));"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1576,  }
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1577,  return types;
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1578, }
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1579,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1582,  if the parameter index is out of range
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1587,  throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1588,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1589,  DataTypeDescriptor[] types = getTypes(parameterIndex);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1590,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1591,  int type = types[parameterIndex -1] == null ?
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1592,   Types.OTHER :
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1593,   types[parameterIndex - 1].getTypeId().getJDBCTypeId();
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1594,
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1595,  if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1596,   //int pmType = getEmbedParameterSetMetaData().getParameterType(parameterIndex);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1597,   //if (type != pmType) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1598,"    //SanityManager.THROWASSERT(""MISMATCH PARAMETER META DATA param "" + parameterIndex + "" types "" + type + "" != "" + pmType + ""\n"" + SQLText);"
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1599,   //}
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1600,  }
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1602,  return type;
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1613,            throws SQLException {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1614,        DataTypeDescriptor[] pTypes = getTypes(parameterIndex);
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,1615,        return pTypes[parameterIndex-1].getTypeName();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,491,  return paramTypeDescriptors;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,574,  return beginCompileTimestamp;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,584,  return endCompileTimestamp;
java/engine/org/apache/derby/impl/sql/GenericResultDescription.java,148,  return columns;
java/engine/org/apache/derby/impl/sql/execute/GenericAggregator.java,315,                     aggInfo.getResultDescription().getColumnInfo()[ 0 ].getType()
java/engine/org/apache/derby/impl/sql/GenericResultDescription.java,101,  this.columns = columns;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,24,import org.apache.derby.iapi.sql.compile.Visitable;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,28,
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,41,import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,45,import org.apache.derby.iapi.sql.depend.Dependent;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,65, ResultColumnList resultColumns;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,66, ResultSetNode  queryExpression;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,67, String    qeText;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,68, int     checkOption;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,69, ProviderInfo[]  providerInfos;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,70, ColumnInfo[]  colInfos;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,170, public ProviderInfo[] getProviderInfo() { return providerInfos; }
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,380,       ProviderInfo[] providerInfos = cvn.getProviderInfo();
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,384,       for (int i = 0; i < providerInfos.length; i++)
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,386,        Provider provider = null;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,387,         provider = (Provider) providerInfos[i].
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,390,             providerInfos[i].getObjectId());
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,58, public UUID      uuid;
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,59, public DependableFinder   dFinder;
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,60, public String      providerName;
java/engine/org/apache/derby/impl/sql/depend/BasicProviderInfo.java,77, public BasicProviderInfo(
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,85, /**
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,86,"  * Find out if a column was changed, by column name."
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,87,  *
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,88,  * @param columnName the column to check
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,89,   *
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,90,  * @return true if the column was modified by this statement.
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,91,  * Note that this will always return true for INSERT
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,92,  * and DELETE regardless of the column name passed in.
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,93,  */
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,94, public boolean wasColumnModified(String columnName);
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,95,
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,96, /**
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,97,"  * Find out if a column was changed, by column number"
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,98,  *
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,99,  * @param columnNumber the column to check
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,100,   *
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,101,  * @return true if the column was modified by this statement.
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,102,  * Note that this will always return true for INSERT
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,103,  * and DELETE regardless of the column name passed in.
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,104,  */
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,105, public boolean wasColumnModified(int columnNumber);
java/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java,106,
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,652,"   generateTriggerInfo(relevantTriggers, targetTableDescriptor, changedColumnIds);"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1065,  * @param td    The TableDescriptor
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1066,  * @param changedCols  The columns that are being modified
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1067,  *
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1068,  * @exception StandardException  Thrown on failure
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1070, private void generateTriggerInfo
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1071, (
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1072,"  GenericDescriptorList  triggerList,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1073,"  TableDescriptor    td,"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1074,  int[]      changedCols
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1075,    )
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1076,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1078,  if ((triggerList != null) && (triggerList.size() > 0))
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1080,"   triggerInfo = new TriggerInfo(td, changedCols, triggerList);"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,443,"                tc,"
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,25,import org.apache.derby.iapi.sql.Activation;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,32,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,34,import org.apache.derby.iapi.types.DataValueFactory;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,62,import org.apache.derby.iapi.services.io.FormatableArrayHolder;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,63,import org.apache.derby.iapi.services.io.FormatableHashtable;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,64,import org.apache.derby.iapi.services.io.FormatableIntHolder;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,65,import org.apache.derby.iapi.services.io.FormatableProperties;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,66,import org.apache.derby.catalog.TypeDescriptor;
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,324,"  int[]      changedColIds,"
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,325,"  String[]     changedColNames,"
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,333,"               changedColIds,"
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,334,"               changedColNames,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1135,"          tc,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1286,"          tc,"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,38,import org.apache.derby.iapi.services.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,66, protected int[]     changedColIds;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,67, protected String[]    changedColNames;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,129,  * @param changedColIds the list of columns that changed.  Null
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,130,  *  for all columns or INSERT/DELETE.
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,131,  * @param changedColNames the names that correspond to changedColIds
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,147,"  int[]      changedColIds,"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,148,"  String[]     changedColNames,"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,155,  this.changedColIds = changedColIds;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,156,  this.changedColNames = changedColNames;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,165,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,166,  {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,167,   if ((changedColIds == null) != (changedColNames == null))
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,168,   {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,169,"    SanityManager.THROWASSERT(""bad changed cols, ""+"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,170,"     ""(changedColsIds == null) = ""+(changedColIds == null)+"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,171,"     ""  (changedColsNames == null) = ""+(changedColNames == null));"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,172,   }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,173,   if (changedColIds != null)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,174,   {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,175,"    SanityManager.ASSERT(changedColIds.length == changedColNames.length,"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,176,"     ""different number of changed col ids vs names"");"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,177,   }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,178,  }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,179,
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,398, /**
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,399,"  * Find out of a column was changed, by column name"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,400,  *
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,401,  * @param columnName the column to check
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,402,   *
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,403,  * @return true if the column was modified by this statement.
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,404,  * Note that this will always return true for INSERT
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,405,  * and DELETE regardless of the column name passed in.
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,406,  */
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,407, public boolean wasColumnModified(String columnName)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,408, {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,409,  if (changedColNames == null)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,410,  {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,411,   return true;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,412,  }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,413,
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,414,  for (int i = 0; i < changedColNames.length; i++)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,415,  {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,416,   if (changedColNames[i].equals(columnName))
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,417,   {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,418,    return true;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,419,   }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,420,  }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,421,  return false;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,422, }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,423,
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,424, /**
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,425,"  * Find out of a column was changed, by column number"
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,426,  *
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,427,  * @param columnNumber the column to check
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,428,   *
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,429,  * @return true if the column was modified by this statement.
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,430,  * Note that this will always return true for INSERT
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,431,  * and DELETE regardless of the column name passed in.
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,432,  */
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,433, public boolean wasColumnModified(int columnNumber)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,434, {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,435,  if (changedColIds == null)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,436,  {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,437,   return true;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,438,  }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,439,
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,440,  for (int i = 0; i < changedColNames.length; i++)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,441,  {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,442,   if (changedColIds[i] == columnNumber)
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,443,   {
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,444,    return true;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,445,   }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,446,  }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,447,  return false;
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,448, }
java/engine/org/apache/derby/impl/sql/execute/InternalTriggerExecutionContext.java,449,
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,29,import org.apache.derby.iapi.sql.execute.ExecRow;
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,35,import org.apache.derby.iapi.store.access.TransactionController;
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,36,import org.apache.derby.impl.sql.execute.AutoincrementCounter;
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,37,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,42,import java.sql.SQLException;
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,51, private TransactionController    tc;
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,67,  * @param tc   the xact controller
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,78,"  TransactionController   tc,"
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,95,  this.tc = tc;
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,112,"        triggerInfo.columnIds,"
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,113,"        triggerInfo.columnNames,"
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,137,"        triggerInfo.columnIds,"
java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java,138,"        triggerInfo.columnNames,"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,24,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,25,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,26,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,28,import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,31,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,32,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,35,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,38,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,43,import java.util.Iterator;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,45,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,73, String[]    columnNames;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,74, int[]    columnIds;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,84,  * @param td the table upon which the trigger is declared
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,85,  * @param changedCols the columns that are changed in the dml that is
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,86,  *  causing the trigger to fire
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,92,"  TableDescriptor   td,"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,93,"  int[]     changedCols,"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,97,  this.columnIds = changedCols;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,98,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,99,  if (columnIds != null)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,100,  {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,101,   /*
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,102,   ** Find the names of all the columns that are
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,103,   ** being changd.
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,104,   */
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,105,   columnNames = new String[columnIds.length];
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,106,   for (int i = 0; i < columnIds.length; i++)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,107,   {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,108,    columnNames[i] = td.getColumnDescriptor(columnIds[i]).getColumnName();
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,109,   }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,110,  }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,111,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,121,        Iterator descIter = triggers.iterator();
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,122,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,123,  int size = triggers.size();
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,124,  triggerArray = new TriggerDescriptor[size];
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,125,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,126,  for (int i = 0; i < size; i++)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,127,  {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,128,            triggerArray[i] = (TriggerDescriptor) descIter.next();
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,129,  }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,130, }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,131,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,132, /*
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,133,  * private constructor for TriggerInfo
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,134,  */
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,135, private TriggerInfo
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,136, (
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,137,"  TriggerDescriptor[]  triggers,"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,138,"  int[]     changedColsIds,"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,139,  String[]    changedColsNames
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,140, )
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,141, {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,142,  this.columnIds = changedColsIds;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,143,  this.columnNames = changedColsNames;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,144,  this.triggerArray = triggers;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,160, {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,161,  if (triggerArray == null)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,162,  {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,163,   return false;
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,164,  }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,165,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,166,"  return hasTrigger(new Boolean(isBefore), new Boolean(isRow));"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,167, }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,168,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,169, /**
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,170,  * Do we have a trigger or triggers that meet
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,171,  * the criteria
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,172,  *
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,173,"  * @param isBefore true for a before trigger, false"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,174,"  *     for after trigger, null for either"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,175,"  * @param isRow  true for a row trigger, false"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,176,"  *     for statement trigger, null for either"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,177,  *
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,178,  * @return true if we have a trigger that meets the
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,179,  *   criteria
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,180,  */
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,181," private boolean hasTrigger(Boolean isBefore, Boolean isRow)"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,189,   if (((isBefore == null) ||
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,190,     (triggerArray[i].isBeforeTrigger() == isBefore.booleanValue())) &&
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,191,       ((isRow == null) ||
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,192,     (triggerArray[i].isRowTrigger() == isRow.booleanValue())))
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,219,"  ArrayUtil.writeIntArray(out, columnIds);"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,220,"  ArrayUtil.writeArray(out, columnNames);"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,237,  columnIds = ArrayUtil.readIntArray(in);
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,238,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,239,  int len = ArrayUtil.readArrayLength(in);
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,240,  if (len > 0)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,241,  {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,242,   columnNames = new String[len];
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,243,"   ArrayUtil.readArrayItems(in, columnNames);"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,244,  }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,264,"   str.append(""\nColumn names modified:\t\t("");"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,265,   for (int i = 0; i < columnNames.length; i++)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,266,   {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,267,    if (i > 0)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,268,"     str.append("","");"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,269,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,270,    str.append(columnNames[i]);
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,271,   }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,272,"   str.append("")"");"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,273,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,274,"   str.append(""\nColumn ids modified:\t\t("");"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,275,   for (int i = 0; i < columnIds.length; i++)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,276,   {
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,277,    if (i > 0)
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,278,"     str.append("","");"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,279,
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,280,    str.append(columnIds[i]);
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,281,   }
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,282,"   str.append("")"");"
java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java,283,
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,713,"           tc,"
java/engine/org/apache/derby/iapi/sql/Activation.java,570, public Hashtable getParentResultSets();
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,812, public Hashtable getParentResultSets()
java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java,814,  return ac.getParentResultSets();
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,646,  autoGeneratedKeysColumnIndexes = columnIndexes;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,647,  autoGeneratedKeysColumnNames = columnNames;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,659,  return autoGeneratedKeysColumnIndexes;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,665,  return autoGeneratedKeysColumnNames;
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1644, public Hashtable getParentResultSets()
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,1646,  return parentResultSets;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,433,  Hashtable parentResultSets = activation.getParentResultSets();
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,434,  for (Enumeration e = parentResultSets.keys() ; e.hasMoreElements() ;)
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,456,  Hashtable parentResultSets = activation.getParentResultSets();
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,457,  for (Enumeration e = parentResultSets.keys() ; e.hasMoreElements() ;)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,420,   if (activation.getAutoGeneratedKeysColumnIndexes() != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,421,    verifyAutoGeneratedColumnsIndexes(activation.getAutoGeneratedKeysColumnIndexes());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,422,   else  if (activation.getAutoGeneratedKeysColumnNames() != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,423,    verifyAutoGeneratedColumnsNames(activation.getAutoGeneratedKeysColumnNames());
java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java,521,   DataTypeDescriptor dts = colInfos[i].dataType;
java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java,35,import org.apache.derby.iapi.sql.depend.ProviderList;
java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java,36,import org.apache.derby.iapi.sql.conn.ConnectionUtil;
java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java,40,import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java,41,import org.apache.derby.iapi.sql.dictionary.TupleDescriptor;
java/engine/org/apache/derby/impl/sql/compile/TablePrivilegesNode.java,120, public PrivilegeInfo makePrivilegeInfo()
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,26,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,27,
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,28,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,40,import org.apache.derby.iapi.services.io.FormatableIntHolder;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,70, public  int       action;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,71, public String      name;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,72, public DataTypeDescriptor   dataType;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,73, public DefaultInfo     defaultInfo;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,74,    public    ProviderInfo[]            providers;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,75, public DataValueDescriptor   defaultValue;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,76, public UUID      newDefaultUUID;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,77, public UUID      oldDefaultUUID;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,79, public long       autoincStart;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,80, public long       autoincInc;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,84, public long       autoinc_create_or_modify_Start_Increment = -1;
java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java,138,        this.providers = providers;
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,33,import org.apache.derby.iapi.services.io.FormatIdUtil;
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,35,import org.apache.derby.iapi.services.io.Formatable;
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,96,  this.columnNames = columnNames;
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,241, public String[] getReferencedColumnNames()
java/engine/org/apache/derby/impl/sql/execute/ConstraintInfo.java,242, { return columnNames; }
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,78, public String    fkConstraintNames[];
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,79, public String    tableName;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,80, public int     type;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,81, public UUID     refUUID;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,82, public long     refConglomNumber;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,83, public UUID[]    fkUUIDs;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,84, public long[]    fkConglomNumbers;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,85, public boolean[]   fkIsSelfReferencing;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,86, public int[]    colArray;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,87, public int     stmtType;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,88, public RowLocation   rowLocation;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,89, public int[]              raRules;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,135,  this.fkConstraintNames = fkConstraintNames;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,141,  this.fkUUIDs = fkUUIDs;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,142,  this.fkConglomNumbers = fkConglomNumbers;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,143,  this.fkIsSelfReferencing = fkIsSelfReferencing;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,144,  this.colArray = colArray;
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,146,  this.raRules = raRules;
java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java,89, protected RowLocation[] autoincRowLocation;
java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java,265, public RowLocation[] getAutoincRowLocation()
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,62, private TableDescriptor td;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,63, private boolean[] actionAllowed;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,64, private FormatableBitSet[] columnBitSets;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,65, private List descriptorList;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,75,  this.actionAllowed = actionAllowed;
java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java,76,  this.columnBitSets = columnBitSets;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,24,import java.util.List;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,29,import org.apache.derby.iapi.services.io.ArrayUtil;
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,167, // accessors
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,168,
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,169,    public final List getProviderInfo() {
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,170,        return ArrayUtil.asReadOnlyList(colInfos);
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,171,    }
java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java,172,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,38,import org.apache.derby.iapi.sql.compile.CompilerContext;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,39,import org.apache.derby.iapi.sql.compile.Parser;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,50,import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,54,import org.apache.derby.impl.sql.compile.CreateViewNode;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,72, * occured.
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,366,       ViewDescriptor vd = (ViewDescriptor) dep;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,367,       SchemaDescriptor compSchema;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,368,"       compSchema = dd.getSchemaDescriptor(vd.getCompSchemaId(), null);"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,369,       CompilerContext newCC = lcc.pushCompilerContext(compSchema);
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,370,       Parser pa = newCC.getParser();
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,371,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,372,       // Since this is always nested inside another SQL
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,373,"       // statement, so topLevel flag should be false"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,374,       CreateViewNode cvn = (CreateViewNode)pa.parseStatement(
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,375,            vd.getViewText());
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,376,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,377,       // need a current dependent for bind
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,378,       newCC.setCurrentDependent(dep);
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,379,       cvn.bindStatement();
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,380,       lcc.popCompilerContext(newCC);
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,381,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,382,       boolean  interferent = false;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,383,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,384,                            Iterator it = cvn.getProviderInfo().iterator();
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,385,                            while (it.hasNext())
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,386,       {
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,387,                                ProviderInfo info = (ProviderInfo) it.next();
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,388,                                Provider provider = (Provider) info.
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,389,             getDependableFinder().
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,390,"             getDependable(dd,"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,391,                                                    info.getObjectId());
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,392,        if (provider instanceof TableDescriptor)
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,393,        {
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,394,         TableDescriptor tab = (TableDescriptor)provider;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,395,         FormatableBitSet colMap = tab.getReferencedColumnMap();
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,396,         if (colMap == null)
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,397,          continue;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,398,         // if later on an error is raised such as in
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,399,"         // case of interference, this dependency line"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,400,         // upgrade will not happen due to rollback
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,401,         tab.setReferencedColumnMap(null);
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,402,"         dropDependency(lcc, vd, tab);"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,403,         tab.setReferencedColumnMap(colMap);
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,404,"         addDependency(vd, tab, lcc.getContextManager());"
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,405,
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,406,         if (tab.getObjectID().equals(td.getObjectID()))
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,407,         {
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,408,                                        subsetCols.copyFrom( affectedCols );
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,409,          subsetCols.and(colMap);
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,410,          if (subsetCols.anySetBit() != -1)
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,411,          {
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,412,           interferent = true;
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,413,           ((TableDescriptor) p).setReferencedColumnMap(subsetCols);
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,414,          }
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,415,         }
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,416,        } // if provider instanceof TableDescriptor
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,417,       } // for providerInfos
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,418,       if (! interferent)
java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java,419,        continue;
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,670," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,671,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java,150," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java,151,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,280," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java,281,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java,120," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java,121,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,446," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java,447,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java,186," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CallStatementNode.java,187,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,867," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CastNode.java,868,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,195," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,196,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,998,"  public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java,999,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,700," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,701,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java,213, public void generateExpression
java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java,215,"  ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java,216,  MethodBuilder   mb
java/engine/org/apache/derby/impl/sql/compile/ConstantNode.java,217, ) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java,136," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CurrentDatetimeOperatorNode.java,137,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,433," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,434,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/CurrentRowLocationNode.java,110," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CurrentRowLocationNode.java,111,           MethodBuilder mbex)
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,618," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,619,        MethodBuilder mb) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java,111," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DB2LengthOperatorNode.java,112,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,176," public final void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,177,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,282," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DefaultNode.java,283,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,503," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,504,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,272," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,273,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2533," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3269," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3270,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3318," public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3319,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java,155," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,1338," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1575," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1576,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java,114," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java,115,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1014," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,1015,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,776," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,777,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,149," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,150,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,182," public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java,183,             MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,532," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,533,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java,154," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java,155,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,904," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,905,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,351," public void generate( ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,352,                          MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/IsNode.java,197," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/IsNode.java,198,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,102," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,103,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,251," protected final void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,252,          MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,706," public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,707,"     FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,708,"     ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,709,"     DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,710,     FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1548," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1549,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,805,    public void generateExpression(
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,806,"    ExpressionClassBuilder  acb,"
java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java,807,    MethodBuilder           mb)
java/engine/org/apache/derby/impl/sql/compile/MaterializeResultSetNode.java,77," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MaterializeResultSetNode.java,78,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/MaterializeSubqueryNode.java,47," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MaterializeSubqueryNode.java,48,       MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/MiscellaneousStatementNode.java,66," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MiscellaneousStatementNode.java,67,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java,123,    public void generateExpression
java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java,125,"         ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java,126,         MethodBuilder mb
java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java,127,         )
java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java,621," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java,622,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/NotNode.java,94," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NotNode.java,95,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/OrderByNode.java,120," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/OrderByNode.java,121,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ParameterNode.java,325," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ParameterNode.java,326,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1319," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1320,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1350," public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1351,             MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1776," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,592, protected void generate(
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,593,"        ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,594,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,815, public  ConstantNode getNullNode(DataTypeDescriptor type)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1053," public void generateExpression(ExpressionClassBuilder ecb,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1054,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1057,"  expression.generateExpression(ecb, mb);"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,1161," public void generate(ActivationClassBuilder acb, MethodBuilder mb)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,511," public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,512,"     FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,513,"     ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,514,"     DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,515,     FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1411, public void generateNormalizationResultSet(
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1631," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1699," public void generateResultSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1700,             MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1703,"  System.out.println(""I am a "" + getClass());"
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1705,   SanityManager.NOTREACHED();
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1706,  return;
java/engine/org/apache/derby/impl/sql/compile/RowCountNode.java,83,"    public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/RowCountNode.java,84,                         MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,872," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,873,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ScrollInsensitiveResultSetNode.java,64," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ScrollInsensitiveResultSetNode.java,65,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,834," public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,835,"     FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,836,"     ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,837,"     DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,838,     FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,937," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,624," public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,625,"     FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,626,"     ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,627,"     DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,628,     FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,1006," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/SetRoleNode.java,104,"    public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SetRoleNode.java,105,                         MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SetSchemaNode.java,110," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SetSchemaNode.java,111,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SetTransactionIsolationNode.java,93," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SetTransactionIsolationNode.java,94,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,457," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/SpecialFunctionNode.java,230," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SpecialFunctionNode.java,231,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,1928, public void generateExpression(
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,1929,"         ExpressionClassBuilder expressionBuilder,"
java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,1930,         MethodBuilder mbex)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,538," public void bindResultColumns(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,539,"     FromVTI targetVTI,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,540,"     ResultColumnList targetColumnList,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,541,"     DMLStatementNode statement,"
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,542,     FromList fromListParam)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,568," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,270," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java,271,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java,122," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/TestConstraintNode.java,123,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/TimestampOperatorNode.java,117," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/TimestampOperatorNode.java,118,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java,201," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java,202,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java,186," public void generateExpression( ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryDateTimestampOperatorNode.java,187,                                    MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,610," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,611,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,620," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,621,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,783," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java,784,        MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,234," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UserTypeConstantNode.java,235,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,974," protected final void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,975,          MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,981, /**
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,982,  * The only reason this routine exists is so that I don't have to change
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,983,  * the protection on generateExpression() and rototill all of QueryTree.
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,984,  *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,985,  * @param ecb The ExpressionClassBuilder for the class being built
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,986,  * @param mb The method the expression will go into
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,987,  *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,988,  *
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,989,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,990,  */
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,991," public void generateFilter(ExpressionClassBuilder ecb,"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,992,          MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,993,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,994, {
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,995,"  generateExpression( ecb, mb );"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,996, }
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,997,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,998,
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,1119," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ValueNode.java,1120,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/VirtualColumnNode.java,215," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/VirtualColumnNode.java,216,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java,347,"    public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java,348,                         MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java,157," protected void bind(DDLStatementNode ddlNode, DataDictionary dd) throws StandardException"
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,87, protected boolean    deferred;
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,88, protected FromTable    targetTable;
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,89, protected FKInfo    fkInfo;
java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java,90, protected FormatableBitSet readColsBitSet;
java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java,84," protected void bind(DDLStatementNode ddlNode, DataDictionary dd) throws StandardException"
java/engine/org/apache/derby/impl/sql/compile/FromList.java,145, public void addFromTable(FromTable fromTable) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/FromList.java,265," protected FromTable getFromTableByName(String name, String schemaName, boolean exactMatch)"
java/engine/org/apache/derby/impl/sql/compile/FromList.java,268,  boolean   found = false;
java/engine/org/apache/derby/impl/sql/compile/FromList.java,875, public FromTable getFromTableByResultColumn(ResultColumn rc)
java/engine/org/apache/derby/impl/sql/compile/FromTable.java,1385," public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)"
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,451, public MethodCallNode getMethodCall()
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,98," public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,130," public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,142, public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,167, protected int getOrderableVariantType()
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,180," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,181,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/GetCurrentConnectionNode.java,195, public void checkReliability(ValueNode sqlNode)
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,785, public FromTable getParent()
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,647," public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,805,"  protected int addOuterJoinArguments(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,806,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,827," protected void oneRowRightSide(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/HalfOuterJoinNode.java,828,            MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java,695," public void generateStartStopKey(boolean isAsc, boolean isStartKey,"
java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java,203, public JavaValueNode getJavaValueNode()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,77,    public DataTypeDescriptor getDataType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,82, public boolean isPrimitiveType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,90, public String getJavaTypeName() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,111, public void setJavaTypeName(String javaTypeName)
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,116, public String getPrimitiveTypeName()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,143, public void castToPrimitive(boolean booleanValue)
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,155, public boolean mustCastToPrimitive() { return mustCastToPrimitive; }
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,164, public JSQLType getJSQLType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,165, { return jsqlType; }
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,176, public static  TypeId mapToTypeID( JSQLType jsqlType )
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,190, public void markForCallStatement()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,200, abstract public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,208," abstract public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,225," abstract public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,279," protected boolean generateReceiver(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,298, protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,314,
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,315, protected abstract  void generateExpression(
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,352," protected final boolean generateReceiver(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,397," protected final void getReceiverExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,413, protected void returnValueToSQLDomain()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,419, protected boolean valueReturnedToSQLDomain()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,425, protected void markReturnValueDiscarded()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,431, protected boolean returnValueDiscarded()
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,443, public void checkReliability(ValueNode sqlNode) throws StandardException {
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,453,    public int getCollationType() {
java/engine/org/apache/derby/impl/sql/compile/JavaValueNode.java,465,    public void setCollationType(int type) {
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1511," public FromTable transformOuterJoins(ValueNode predicateTree, int numTables)"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1557," public void generateCore(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1576," protected void generateCore(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1757," protected void oneRowRightSide(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1758,            MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1785,"  protected int addOuterJoinArguments(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1786,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,420," public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,469," public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,511, public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,730," public void generateOneParameter(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1389, protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java,1429,    public DataTypeDescriptor getDataType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,342," public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,456,
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,457," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java,458,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java,151,    public void generateConstant
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,200," public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,236, protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,264, public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,310," public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,334,
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,335," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,336,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/NonStaticMethodCallNode.java,433," protected boolean generateReceiver(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,346," public void generate(ActivationClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ParameterNode.java,407," static public void generateParameterValueSet(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,58, protected Object cachedTokenManager;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,60, protected CharStream charStream;
java/engine/org/apache/derby/impl/sql/compile/ParserImpl.java,63,        protected final CompilerContext cc;
java/engine/org/apache/derby/impl/sql/compile/PredicateList.java,2955," protected void generateInListValues(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1094, /**
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1095,  Generate the code to create a column the same shape and
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1096,  size as this ResultColumn.
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1097,
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1098,  Used in ResultColumnList.generateHolder().
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1099,
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1100,  @exception StandardException  thrown on failure
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1101, */
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1102," public void generateHolder(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1103,         MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1104,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1105, {
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1106,  // generate expression of the form
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1107,  // (DataValueDescriptor) columnSpace
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1108,
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1109,"  acb.generateNull(mb, getTypeCompiler(), getTypeServices().getCollationType());"
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1110,  mb.upCast(ClassName.DataValueDescriptor);
java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java,1111, }
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,897," public FormatableBitSet bindResultColumnsByName(TableDescriptor targetTableDescriptor,"
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,948," public void bindResultColumnsByName(ResultColumnList fullRCL,"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,105, public String getJavaTypeName()
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,121, public String getPrimitiveTypeName()
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,147, public JSQLType getJSQLType () throws StandardException
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,201,    public DataTypeDescriptor getDataType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,214, public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,247," public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,266," public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,290, protected int getOrderableVariantType() throws StandardException
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,322,
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,323," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,324,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,135," public void preprocess(int numTables,"
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,167," public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,180, public JavaValueNode remapColumnReferencesToExpressions()
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,198, protected int getOrderableVariantType()
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,223," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/StaticClassFieldReferenceNode.java,224,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,892," public void generateOneParameter(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,1029," public boolean categorize(JBitSet referencedTabs, boolean simplePredsOnly)"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,1078,
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,1079," public void generateExpression(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java,1080,           MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java,726,"    protected int addXmlOpMethodParams(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java,415,    public FromTable getParent() {
java/engine/org/apache/derby/iapi/sql/compile/Optimizable.java,38,public interface Optimizable {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,31,import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,34,import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,35,import org.apache.derby.iapi.types.DataValueFactory;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,36,import org.apache.derby.iapi.types.RowLocation;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,38,import org.apache.derby.iapi.store.access.ConglomerateController;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,40,import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,41,import org.apache.derby.iapi.store.access.ScanController;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,42,import org.apache.derby.iapi.sql.execute.ExecRow;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,43,import org.apache.derby.iapi.sql.execute.ExecIndexRow;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,46,import org.apache.derby.iapi.services.io.FormatableBitSet;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,47,import org.apache.derby.iapi.services.info.ProductGenusNames;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,49,import org.apache.derby.iapi.reference.JDBC30Translation;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,50,import org.apache.derby.iapi.reference.Limits;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,53,import org.apache.derby.iapi.services.uuid.UUIDFactory;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,54,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,55,import org.apache.derby.catalog.types.RoutineAliasInfo;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,56,import org.apache.derby.catalog.AliasInfo;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,57,import org.apache.derby.catalog.TypeDescriptor;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,58,import org.apache.derby.iapi.types.DataTypeDescriptor;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,62,import java.sql.Types;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,63,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,599,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,600, /**
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,601,   * Make a catalog.
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,602,  * @param tc TransactionController
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,603,  * @exception StandardException  Standard Derby error policy.
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,604,  */
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,605," protected void makeSystemCatalog(TransactionController tc,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,606,          TabInfoImpl ti)
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,607,  throws StandardException
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,608, {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,609,  SchemaDescriptor sd = bootingDictionary.getSystemSchemaDescriptor();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,610,"  bootingDictionary.makeCatalog(ti,sd,tc);"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,611, }
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,658,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,659, /**
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,660,  * Populates a new system index from the base system table.
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,661,  *
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,662,  * @param tc      transaction controller
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,663,  * @param heapConglomerateNumber identifies system table to Store
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,664,  * @param tabInfo     describes base system table
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,665,  * @param indexNumber    index to populate
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,666,  *
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,667,  *
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,668,  * @exception StandardException  Thrown on failure
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,669,  */
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,670, protected void fillIndex
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,671, (
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,672,"  TransactionController tc,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,673,"  long     heapConglomerateNumber,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,674,"  TabInfoImpl     tabInfo,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,675,  int      indexNumber
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,676,    )
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,677,  throws StandardException
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,678, {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,679,  long      indexConglomerateNumber = tabInfo.getIndexConglomerate( indexNumber );
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,680,  IndexRowGenerator   indexRowGenerator = tabInfo.getIndexRowGenerator( indexNumber );
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,681,  CatalogRowFactory   rowFactory = tabInfo.getCatalogRowFactory();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,682,  ExecRow      heapRow = rowFactory.makeEmptyRow();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,683,  ExecIndexRow    indexableRow = indexRowGenerator.getIndexRowTemplate();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,684,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,685,  ScanController    heapScan =
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,686,   tc.openScan(
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,687,"    heapConglomerateNumber,       // conglomerate to open"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,688,"    false,                          // don't hold open across commit"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,689,"    0,                              // for read"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,690,"                TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,691,"                TransactionController.ISOLATION_REPEATABLE_READ,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,692,"    (FormatableBitSet) null,                 // all fields as objects"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,693,"    null,                           // start position - first row"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,694,"    ScanController.GE,              // startSearchOperation"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,695,"    null,                           //scanQualifier,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,696,"    null,                           //stop position-through last row"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,697,    ScanController.GT);             // stopSearchOperation
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,698,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,699,  RowLocation     heapLocation =
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,700,            heapScan.newRowLocationTemplate();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,701,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,702,  ConglomerateController  indexController =
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,703,   tc.openConglomerate(
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,704,"    indexConglomerateNumber,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,705,"                false,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,706,"    TransactionController.OPENMODE_FORUPDATE,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,707,"    TransactionController.MODE_TABLE,"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,708,    TransactionController.ISOLATION_REPEATABLE_READ);
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,709,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,710,  while ( heapScan.fetchNext(heapRow.getRowArray()) )
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,711,        {
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,712,    heapScan.fetchLocation( heapLocation );
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,713,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,714,"   indexRowGenerator.getIndexRow( heapRow, heapLocation, indexableRow, (FormatableBitSet) null );"
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,715,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,716,   indexController.insert(indexableRow.getRowArray());
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,717,  }
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,718,
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,719,  indexController.close();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,720,  heapScan.close();
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,721, }
java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java,722,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,188, * that stores the information in the system catlogs.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,841,"    loadDictionaryTables(bootingTC, ddg, startParams);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4137, public SPSDescriptor getUncachedSPSDescriptor(TableKey stmtKey)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7986,  * @param ddg  DataDescriptorGenerator
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7990," protected void loadDictionaryTables(TransactionController tc,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7991,"          DataDescriptorGenerator ddg,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,7996,"  loadCatalogs(ddg, coreInfo);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8038,  * @param ddg  DataDescriptorGenerator
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8039,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8040,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8043," public void loadCatalogs(DataDescriptorGenerator ddg, TabInfoImpl[] catalogArray)"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8061,   if (numIndexes > 0)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8062,   {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8063,    for (indexCtr = 0; indexCtr < numIndexes; indexCtr++)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8064,    {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8065,"     initSystemIndexVariables(ddg, catalog, indexCtr);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8066,    }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8067,   }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8419," public void makeCatalog( TabInfoImpl     ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8611,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8612, /**
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8613,   * Code to add an index to a catalog during upgrade.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8614,   *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8615,   * @param tc      transaction controller
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8616,   * @param ti      information on the catalog that's having a new index added
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8617,   * @param indexNumber    0-based index number
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8618,   * @param heapConglomerateNumber what it is
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8619,   *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8620,   * @return The conglomerate number of the new index.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8621,   *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8622,   * @exception StandardException  Thrown on failure
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8623,   */
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8624, public long upgrade_makeOneIndex
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8625, (
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8626,"  TransactionController tc,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8627,"  TabInfoImpl     ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8628,"  int      indexNumber,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8629,  long     heapConglomerateNumber
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8630,    )
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8631,  throws StandardException
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8632, {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8633,  SchemaDescriptor  sd = getSystemSchemaDescriptor( );
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8634,  DataDescriptorGenerator ddg = getDataDescriptorGenerator();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8635,  long     indexConglomerateNumber;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8636,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8637,  ConglomerateDescriptor conglomerateDescriptor = bootstrapOneIndex
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8638,"   ( sd, tc, ddg, ti, indexNumber, heapConglomerateNumber );"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8639,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8640,  indexConglomerateNumber = conglomerateDescriptor.getConglomerateNumber();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8641,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8642,"  addDescriptor(conglomerateDescriptor, sd,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8643,"       SYSCONGLOMERATES_CATALOG_NUM, false, tc);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8644,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8645,  return indexConglomerateNumber;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8646, }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8647,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8648,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,8987,"  initSystemIndexVariables(ddg, ti, indexNumber);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9060," public void initSystemIndexVariables(DataDescriptorGenerator ddg,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9061,"             TabInfoImpl ti,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9062,             int indexNumber)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9978,  if (numIndexes > 0)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9979,  {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9980,   DataDescriptorGenerator ddg = getDataDescriptorGenerator();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9981,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9982,   for (int indexCtr = 0; indexCtr < numIndexes; indexCtr++)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9983,   {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9984,"    initSystemIndexVariables(ddg, ti, indexCtr);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9985,   }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,9986,  }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10003, public void faultInTabInfo( TabInfoImpl ti )
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,28,import org.apache.derby.iapi.services.loader.GeneratedMethod;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,29,
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,41,import org.apache.derby.iapi.store.access.Qualifier;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,44,import org.apache.derby.iapi.types.DataValueDescriptor;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,50,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,51,
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,333,        FromTable ft)
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,490,"        ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,494,  ColumnReference cr;
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,785," public void generateQualMethod(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1737,"  FromTable optTable, boolean forPush, boolean walkOptTableSubtree)"
java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java,1825," private void buildTableNumList(FromTable ft, boolean forPush)"
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,34,import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,35,
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,41,public interface RelationalOperator
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,114,         FromTable ft);
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,131,"          ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/RelationalOperator.java,251," void generateQualMethod(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,271,            FromTable ft)
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,281," public void generateExpressionOperand(Optimizable optTable,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,282,"            int columnPosition,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,283,"            ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,284,            MethodBuilder mb)
java/engine/org/apache/derby/impl/sql/compile/UnaryComparisonOperatorNode.java,328," public void generateQualMethod(ExpressionClassBuilder acb,"
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,243, public CreateIndexConstantAction getCreateIndexConstantAction
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,568, public DropIndexConstantAction getDropIndexConstantAction
java/engine/org/apache/derby/impl/sql/execute/GenericExecutionFactory.java,310, public InternalTriggerExecutionContext getTriggerExecutionContext
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,41,public abstract class GenericTriggerExecutor
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,43, protected InternalTriggerExecutionContext tec;
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,44, protected TriggerDescriptor     triggerd;
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,45, protected Activation      activation;
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,46, protected LanguageConnectionContext   lcc;
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,53,  Perform Index maintenace associated with DML operations for a single index.
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,55,public class IndexChanger
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,87,   @param indexSCOCI the SCOCI for the idexes.
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,88,   @param indexDCOCI the DCOCI for the idexes.
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,98, public IndexChanger
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,151, public void setRowHolder(TemporaryRowHolderImpl rowHolder)
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,163, public void setBaseCC(ConglomerateController baseCC)
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,527, public void open()
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,539," public void delete(ExecRow baseRow,"
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,540,        RowLocation baseRowLocation)
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,557," public void update(ExecRow oldBaseRow,"
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,586," public void insert(ExecRow newRow, RowLocation baseRowLocation)"
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,628, public void finish()
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,629,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,675, public void close()
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,676,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,26,import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java,36,public class RowTriggerExecutor extends GenericTriggerExecutor
java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java,36,public class StatementTriggerExecutor extends GenericTriggerExecutor
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1264,
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1265,            writeCommandHeader(COMMAND_TESTCONNECTION);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1266,            writeLDString(database);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1267,            writeLDString(user);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1268,            writeLDString(password);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1269,            send();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1270,            readResult();
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3556,        if (msg.startsWith(DRDA_MSG_PREFIX))
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,319,        String      serverOutput = getServerOutput();
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,41, /**
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,42,"  * Tell whether sorting is required for this RequiredRowOrdering,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,43,  * given a RowOrdering.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,44,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,45,  * @param rowOrdering The order of rows in question
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,46,  * @param optimizableList The current join order being considered by
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,47,  *    the optimizer. We need to look into this to determine if the outer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,48,  *    optimizables are single row resultset if the order by column is
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,49,  *    on an inner optimizable and that inner optimizable is not a one
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,50,  *    row resultset. DERBY-3926
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,51,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,52,"  * @return SORT_REQUIRED if sorting is required,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,53,  *   ELIMINATE_DUPS if no sorting is required but duplicates
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,54,  *       must be eliminated (i.e. the rows are in
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,55,"  *       the right order but there may be duplicates),"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,56,  *   NOTHING_REQUIRED is no operation is required
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,57,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,58,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,59,  */
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,60," int sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList)"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,61, throws StandardException;
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,63, /**
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,64,"  * Tell whether sorting is required for this RequiredRowOrdering,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,65,"  * given a RowOrdering representing a partial join order, and"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,66,  * a bit map telling what tables are represented in the join order.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,67,  * This is useful for reducing the number of cases the optimizer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,68,  * has to consider.
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,69,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,70,  * @param rowOrdering The order of rows in the partial join order
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,71,  * @param tableMap  A bit map of the tables in the partial join order
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,72,  * @param optimizableList The current join order being considered by
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,73,  *    the optimizer. We need to look into this to determine if the outer
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,74,  *    optimizables are single row resultset if the order by column is
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,75,  *    on an inner optimizable and that inner optimizable is not a one
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,76,  *    row resultset. DERBY-3926
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,77,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,78,"  * @return SORT_REQUIRED if sorting is required,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,79,  *   ELIMINATE_DUPS if no sorting is required by duplicates
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,80,  *       must be eliminated (i.e. the rows are in
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,81,"  *       the right order but there may be duplicates),"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,82,  *   NOTHING_REQUIRED is no operation is required
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,83,  *
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,84,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,85,  */
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,86," int sortRequired(RowOrdering rowOrdering, JBitSet tableMap,"
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,87,   OptimizableList optimizableList)
java/engine/org/apache/derby/iapi/sql/compile/RequiredRowOrdering.java,88,   throws StandardException;
java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java,459,"    ""referencedColumns: "" + referencedColumns + ""\n"" +"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,85,  */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,142," // when we ""pull"" it.  If the latest complete join order was the"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1768,"       bestRowOrdering, optimizableList) =="
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1769,        RequiredRowOrdering.NOTHING_REQUIRED)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2211,"              assignedTableMap,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2212,              optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2340,"              assignedTableMap,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2341,              optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,428, /**
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,429,  * @see RequiredRowOrdering#sortRequired
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,430,  *
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,431,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,432,  */
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,433," public int sortRequired(RowOrdering rowOrdering,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,434,   OptimizableList optimizableList) throws StandardException
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,435, {
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,436,"  return sortRequired(rowOrdering, (JBitSet) null, optimizableList);"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,437, }
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,439, /**
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,440,  * @see RequiredRowOrdering#sortRequired
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,441,  *
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,442,  * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,443,  */
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,444," public int sortRequired(RowOrdering rowOrdering,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,445,"   JBitSet tableMap,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,446,   OptimizableList optimizableList)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,447,    throws StandardException
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,448, {
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,577,     for (int i=0; i < optimizableList.size(); i++)
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,579,      //Get one outer optimizable at a time from the join
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,580,      //order
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,581,      Optimizable considerOptimizable =
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,582,       optimizableList.getOptimizable(i);
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,583,      //If we have come across the optimizable for the order
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,584,"      //by column in the join order, then we do not need to"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,585,      //look at the inner optimizables in the join order. As
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,586,"      //long as the outer optimizables are one row resultset,"
java/engine/org/apache/derby/impl/sql/compile/OrderByList.java,587,      //we are fine to consider sort avoidance.
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,36, private static final Integer[] staticInts =
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,37,"  {new Integer(0), new Integer(1), new Integer(2), new Integer(3),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,38,"   new Integer(4), new Integer(5), new Integer(6), new Integer(7),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,39,"   new Integer(8), new Integer(9), new Integer(10), new Integer(11),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,40,"   new Integer(12), new Integer(13), new Integer(14), new Integer(15),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,41,"   new Integer(16), new Integer(17), new Integer(18)};"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,42, private static final Integer FIFTY_TWO = new Integer(52);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,43, private static final Integer TWENTY_THREE = new Integer(23);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,44, private static final Integer MAXINT = new Integer(Integer.MAX_VALUE);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,45, private static final Integer MINUS_ONE = new Integer(-1);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,46,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,49,  if (i >= 0 && i < staticInts.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,50,  {
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,51,   return staticInts[i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,52,  }
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,53,  else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,54,  {
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,55,   // Look for other common values
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,56,   switch (i)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,57,   {
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,58,     case 23:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,59,    return TWENTY_THREE; // precision of Int
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,60,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,61,     case 52:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,62,    return FIFTY_TWO; // precision of Double
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,63,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,64,     case Integer.MAX_VALUE:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,65,    return MAXINT;
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,66,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,67,     case -1:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,68,    return MINUS_ONE;
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,69,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,70,     default:
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,71,    return new Integer(i);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,72,   }
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,73,  }
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,76, private static final Short[] staticShorts =
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,77,"  {new Short((short) 0), new Short((short) 1), new Short((short) 2),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,78,"   new Short((short) 3), new Short((short) 4), new Short((short) 5),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,79,"   new Short((short) 6), new Short((short) 7), new Short((short) 8),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,80,"   new Short((short) 9), new Short((short) 10)};"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,81,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,84,  if (i >= 0 && i < staticShorts.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,85,   return staticShorts[i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,86,  else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,87,   return new Short(i);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,90, private static final Byte[] staticBytes =
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,91,"  {new Byte((byte) 0), new Byte((byte) 1), new Byte((byte) 2),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,92,"   new Byte((byte) 3), new Byte((byte) 4), new Byte((byte) 5),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,93,"   new Byte((byte) 6), new Byte((byte) 7), new Byte((byte) 8),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,94,"   new Byte((byte) 9), new Byte((byte) 10)};"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,95,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,98,  if (i >= 0 && i < staticBytes.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,99,   return staticBytes[i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,100,  else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,101,   return new Byte(i);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,104, private static final Long[] staticLongs =
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,105,"  {new Long(0), new Long(1), new Long(2),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,106,"   new Long(3), new Long(4), new Long(5),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,107,"   new Long(6), new Long(7), new Long(8),"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,108,"   new Long(9), new Long(10)};"
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,109,
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,112,  if (i >= 0 && i < staticLongs.length)
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,113,   return staticLongs[(int) i];
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,114,  else
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,115,   return new Long(i);
java/engine/org/apache/derby/iapi/util/ReuseFactory.java,120,        return b ? Boolean.TRUE : Boolean.FALSE;
java/client/org/apache/derby/client/am/ClientClob.java,31,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/am/ClientClob.java,72,"                String charsetName,"
java/client/org/apache/derby/client/am/ClientClob.java,78,        try {
java/client/org/apache/derby/client/am/ClientClob.java,79,            // check for null encoding is needed because the net layer
java/client/org/apache/derby/client/am/ClientClob.java,80,            // will no longer throw an exception if the server didn't specify
java/client/org/apache/derby/client/am/ClientClob.java,81,            // a mixed or double byte ccsid (ccsid = 0).  this check for null in the
java/client/org/apache/derby/client/am/ClientClob.java,82,            // cursor is only required for types which can have mixed or double
java/client/org/apache/derby/client/am/ClientClob.java,83,            // byte ccsids.
java/client/org/apache/derby/client/am/ClientClob.java,84,            if (charsetName == null) {
java/client/org/apache/derby/client/am/ClientClob.java,85,"                throw new SqlException(agent.logWriter_,"
java/client/org/apache/derby/client/am/ClientClob.java,86,                    new ClientMessageId(SQLState.CHARACTER_CONVERTER_NOT_AVAILABLE));
java/client/org/apache/derby/client/am/ClientClob.java,87,            }
java/client/org/apache/derby/client/am/ClientClob.java,88,
java/client/org/apache/derby/client/am/ClientClob.java,89,"            string_ = new String(unconvertedBytes,"
java/client/org/apache/derby/client/am/ClientClob.java,90,"                    dataOffset,"
java/client/org/apache/derby/client/am/ClientClob.java,91,"                    unconvertedBytes.length - dataOffset,"
java/client/org/apache/derby/client/am/ClientClob.java,92,                    charsetName);
java/client/org/apache/derby/client/am/ClientClob.java,93,            setSqlLength(string_.length());
java/client/org/apache/derby/client/am/ClientClob.java,94,            dataType_ |= STRING;
java/client/org/apache/derby/client/am/ClientClob.java,95,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/ClientClob.java,96,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/ClientClob.java,97,"                new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/ClientClob.java,98,"                ""byte[]"", charsetName + "" String"", e);"
java/client/org/apache/derby/client/am/ClientClob.java,99,
java/client/org/apache/derby/client/am/ClientClob.java,107,"                String encoding,"
java/client/org/apache/derby/client/am/ClientClob.java,108,                int length) throws SqlException {
java/client/org/apache/derby/client/am/ClientClob.java,115,"        if (encoding.equals(""ISO-8859-1"")) {"
java/client/org/apache/derby/client/am/ClientClob.java,118,"        } else if (encoding.equals(""UTF-8"")) { // ""UTF-8"""
java/client/org/apache/derby/client/am/ClientClob.java,121,"        } else if (encoding.equals(""UnicodeBigUnmarked"")) { // ""UnicodeBigUnmarked"""
java/client/org/apache/derby/client/am/ClientClob.java,122,            try {
java/client/org/apache/derby/client/am/ClientClob.java,123,                characterStream_ =
java/client/org/apache/derby/client/am/ClientClob.java,124,"                    new InputStreamReader(inputStream, ""UnicodeBigUnmarked"");"
java/client/org/apache/derby/client/am/ClientClob.java,125,            } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/ClientClob.java,126,"                throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/ClientClob.java,127,"                    new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/ClientClob.java,128,"                    ""UnicodeBigUnmarked"", ""InputStreamReader"", e);"
java/client/org/apache/derby/client/am/ClientClob.java,129,            }
java/client/org/apache/derby/client/am/ClientClob.java,148,"    ClientClob(Agent agent, InputStream inputStream, String encoding)"
java/client/org/apache/derby/client/am/ClientClob.java,154,"        if (encoding.equals(""ISO-8859-1"")) {"
java/client/org/apache/derby/client/am/ClientClob.java,978,    public int getUTF8Length() throws SqlException {
java/client/org/apache/derby/client/am/ClientClob.java,983,        try {
java/client/org/apache/derby/client/am/ClientClob.java,984,"            utf8String_ = string_.getBytes(""UTF-8"");"
java/client/org/apache/derby/client/am/ClientClob.java,985,            return utf8String_.length;
java/client/org/apache/derby/client/am/ClientClob.java,986,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/ClientClob.java,987,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/ClientClob.java,988,"                new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/ClientClob.java,989,"                ""String"", ""UTF8 byte[]"", e);"
java/client/org/apache/derby/client/am/ClientClob.java,990,        }
java/client/org/apache/derby/client/am/ClientPreparedStatement.java,1054,"                         new ClientClob(agent_, x, ""ISO-8859-1"", (int)length));"
java/client/org/apache/derby/client/am/ClientPreparedStatement.java,2514,"                         new ClientClob(agent_, x, ""ISO-8859-1""));"
java/client/org/apache/derby/client/am/ClientResultSet.java,3119,"                updateColumn(column, agent_.crossConverters_.setObjectFromCharacterStream(resultSetMetaData_.types_[column - 1], x, ""ISO-8859-1"", length));"
java/client/org/apache/derby/client/am/ClientResultSet.java,5664,"                            ""ISO-8859-1"","
java/client/org/apache/derby/client/am/CrossConverters.java,29,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/am/CrossConverters.java,810,"            String encoding,"
java/client/org/apache/derby/client/am/CrossConverters.java,838,"            String encoding,"
java/client/org/apache/derby/client/am/CrossConverters.java,841,        try {
java/client/org/apache/derby/client/am/CrossConverters.java,865,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/CrossConverters.java,866,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/CrossConverters.java,867,"                new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/CrossConverters.java,868,"                    ""java.io.InputStream"", ""String"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,869,        }
java/client/org/apache/derby/client/am/Cursor.java,35,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/am/Cursor.java,126,    public String[] charsetName_;
java/client/org/apache/derby/client/am/Cursor.java,149,        charsetName_ = new String[numberOfColumns];
java/client/org/apache/derby/client/am/Cursor.java,375,        try {
java/client/org/apache/derby/client/am/Cursor.java,376,"            return Decimal.getBigDecimal(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,377,"                    columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,378,"                    getColumnPrecision(column - 1),"
java/client/org/apache/derby/client/am/Cursor.java,379,                    getColumnScale(column - 1));
java/client/org/apache/derby/client/am/Cursor.java,380,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,381,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,382,"                new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,383,"                ""DECIMAL"", ""java.math.BigDecimal"", e);"
java/client/org/apache/derby/client/am/Cursor.java,384,        }
java/client/org/apache/derby/client/am/Cursor.java,399,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,400,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,401,"                new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,402,"                ""DECIMAL"", ""double"", e);"
java/client/org/apache/derby/client/am/Cursor.java,422,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,423,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,424,"                new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,425,"                ""DECIMAL"", targetType, e);"
java/client/org/apache/derby/client/am/Cursor.java,436,        try {
java/client/org/apache/derby/client/am/Cursor.java,437,            if (ccsid_[column - 1] == 1200) {
java/client/org/apache/derby/client/am/Cursor.java,438,"                return getStringWithoutConvert(columnDataPosition_[column - 1] + 2, columnDataComputedLength_[column - 1] - 2);"
java/client/org/apache/derby/client/am/Cursor.java,439,            }
java/client/org/apache/derby/client/am/Cursor.java,440,
java/client/org/apache/derby/client/am/Cursor.java,441,            // check for null encoding is needed because the net layer
java/client/org/apache/derby/client/am/Cursor.java,442,            // will no longer throw an exception if the server didn't specify
java/client/org/apache/derby/client/am/Cursor.java,443,            // a mixed or double byte ccsid (ccsid = 0).  this check for null in the
java/client/org/apache/derby/client/am/Cursor.java,444,            // cursor is only required for types which can have mixed or double
java/client/org/apache/derby/client/am/Cursor.java,445,            // byte ccsids.
java/client/org/apache/derby/client/am/Cursor.java,446,            if (charsetName_[column - 1] == null) {
java/client/org/apache/derby/client/am/Cursor.java,447,"                throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,448,                    new ClientMessageId(SQLState.CHARACTER_CONVERTER_NOT_AVAILABLE));
java/client/org/apache/derby/client/am/Cursor.java,449,            }
java/client/org/apache/derby/client/am/Cursor.java,451,"            String tempString = new String(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,452,"                    columnDataPosition_[column - 1] + 2,"
java/client/org/apache/derby/client/am/Cursor.java,453,"                    columnDataComputedLength_[column - 1] - 2,"
java/client/org/apache/derby/client/am/Cursor.java,454,                    charsetName_[column - 1]);
java/client/org/apache/derby/client/am/Cursor.java,455,            return (maxFieldSize_ == 0) ? tempString :
java/client/org/apache/derby/client/am/Cursor.java,456,"                    tempString.substring(0, Math.min(maxFieldSize_,"
java/client/org/apache/derby/client/am/Cursor.java,457,                                                     tempString.length()));
java/client/org/apache/derby/client/am/Cursor.java,458,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,459,"            throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,460,"                    new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,461,"                    ""VARCHAR"", ""String"", e);"
java/client/org/apache/derby/client/am/Cursor.java,471,        try {
java/client/org/apache/derby/client/am/Cursor.java,472,            // check for null encoding is needed because the net layer
java/client/org/apache/derby/client/am/Cursor.java,473,            // will no longer throw an exception if the server didn't specify
java/client/org/apache/derby/client/am/Cursor.java,474,            // a mixed or double byte ccsid (ccsid = 0).  this check for null in the
java/client/org/apache/derby/client/am/Cursor.java,475,            // cursor is only required for types which can have mixed or double
java/client/org/apache/derby/client/am/Cursor.java,476,            // byte ccsids.
java/client/org/apache/derby/client/am/Cursor.java,477,            if (charsetName_[column - 1] == null) {
java/client/org/apache/derby/client/am/Cursor.java,478,"                throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,479,                    new ClientMessageId(SQLState.CHARACTER_CONVERTER_NOT_AVAILABLE));
java/client/org/apache/derby/client/am/Cursor.java,480,            }
java/client/org/apache/derby/client/am/Cursor.java,481,
java/client/org/apache/derby/client/am/Cursor.java,482,"            String tempString = new String(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,483,"                    columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,484,"                    columnDataComputedLength_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,485,                    charsetName_[column - 1]);
java/client/org/apache/derby/client/am/Cursor.java,486,            return (maxFieldSize_ == 0) ? tempString :
java/client/org/apache/derby/client/am/Cursor.java,487,"                    tempString.substring(0, Math.min(maxFieldSize_,"
java/client/org/apache/derby/client/am/Cursor.java,488,                                                     tempString.length()));
java/client/org/apache/derby/client/am/Cursor.java,489,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,491,"                new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,492,"                ""CHAR"", ""String"", e);"
java/client/org/apache/derby/client/am/Cursor.java,498,        try {
java/client/org/apache/derby/client/am/Cursor.java,499,"            return DateTime.dateBytesToDate(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,500,"                columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,501,"                cal,"
java/client/org/apache/derby/client/am/Cursor.java,502,                charsetName_[column - 1]);
java/client/org/apache/derby/client/am/Cursor.java,503,        }catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,504,"             throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,505,"                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,506,"                 ""DATE"", ""java.sql.Date"", e);"
java/client/org/apache/derby/client/am/Cursor.java,507,        }
java/client/org/apache/derby/client/am/Cursor.java,508,
java/client/org/apache/derby/client/am/Cursor.java,509,
java/client/org/apache/derby/client/am/Cursor.java,514,        try {
java/client/org/apache/derby/client/am/Cursor.java,515,"            return DateTime.timeBytesToTime(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,516,"                    columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,517,"                    cal,"
java/client/org/apache/derby/client/am/Cursor.java,518,                    charsetName_[column - 1]);
java/client/org/apache/derby/client/am/Cursor.java,519,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,520,"             throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,521,"                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,522,"                 ""TIME"", ""java.sql.Time"", e);"
java/client/org/apache/derby/client/am/Cursor.java,523,        }
java/client/org/apache/derby/client/am/Cursor.java,529,
java/client/org/apache/derby/client/am/Cursor.java,530,        try {
java/client/org/apache/derby/client/am/Cursor.java,531,            return DateTime.timestampBytesToTimestamp(
java/client/org/apache/derby/client/am/Cursor.java,532,"                dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,533,"                columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,534,"                cal,"
java/client/org/apache/derby/client/am/Cursor.java,535,"                charsetName_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,536,                agent_.connection_.serverSupportsTimestampNanoseconds());
java/client/org/apache/derby/client/am/Cursor.java,537,    } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,538,"             throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,539,"                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,540,"                 ""TIMESTAMP"", ""java.sql.Timestamp"", e);"
java/client/org/apache/derby/client/am/Cursor.java,541,    }
java/client/org/apache/derby/client/am/Cursor.java,547,        try {
java/client/org/apache/derby/client/am/Cursor.java,548,"            return DateTime.dateBytesToTimestamp(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,549,"                    columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,550,"                    cal,"
java/client/org/apache/derby/client/am/Cursor.java,551,                    charsetName_[column -1]);
java/client/org/apache/derby/client/am/Cursor.java,552,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,553,"             throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,554,"                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,555,"                 ""DATE"", ""java.sql.Timestamp"", e);"
java/client/org/apache/derby/client/am/Cursor.java,556,        }
java/client/org/apache/derby/client/am/Cursor.java,562,        try {
java/client/org/apache/derby/client/am/Cursor.java,563,"            return DateTime.timeBytesToTimestamp(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,564,"                    columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,565,"                    cal,"
java/client/org/apache/derby/client/am/Cursor.java,566,                    charsetName_[column -1]);
java/client/org/apache/derby/client/am/Cursor.java,567,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,568,"             throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,569,"                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,570,"                 ""TIME"", ""java.sql.Timestamp"", e);"
java/client/org/apache/derby/client/am/Cursor.java,571,        }
java/client/org/apache/derby/client/am/Cursor.java,577,        try {
java/client/org/apache/derby/client/am/Cursor.java,578,"            return DateTime.timestampBytesToDate(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,579,"                    columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,580,"                    cal,"
java/client/org/apache/derby/client/am/Cursor.java,581,                    charsetName_[column -1]);
java/client/org/apache/derby/client/am/Cursor.java,582,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,583,"             throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,584,"                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,585,"                 ""TIMESTAMP"", ""java.sql.Date"", e);"
java/client/org/apache/derby/client/am/Cursor.java,586,        }
java/client/org/apache/derby/client/am/Cursor.java,592,        try {
java/client/org/apache/derby/client/am/Cursor.java,593,"            return DateTime.timestampBytesToTime(dataBuffer_,"
java/client/org/apache/derby/client/am/Cursor.java,594,"                    columnDataPosition_[column - 1],"
java/client/org/apache/derby/client/am/Cursor.java,595,"                    cal,"
java/client/org/apache/derby/client/am/Cursor.java,596,                    charsetName_[column -1]);
java/client/org/apache/derby/client/am/Cursor.java,597,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,598,"             throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,599,"                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,600,"                 ""TIMESTAMP"", ""java.sql.Time"", e);"
java/client/org/apache/derby/client/am/Cursor.java,601,        }
java/client/org/apache/derby/client/am/Cursor.java,1148,                try {
java/client/org/apache/derby/client/am/Cursor.java,1149,                    return new ByteArrayInputStream(
java/client/org/apache/derby/client/am/Cursor.java,1150,"                        getCHAR(column).getBytes(""ISO-8859-1""));"
java/client/org/apache/derby/client/am/Cursor.java,1151,                } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,1152,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,1153,"                            new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,1154,"                            ""CHAR"", ""java.io.InputStream"", e);"
java/client/org/apache/derby/client/am/Cursor.java,1155,                }
java/client/org/apache/derby/client/am/Cursor.java,1158,                try {
java/client/org/apache/derby/client/am/Cursor.java,1159,                    return new ByteArrayInputStream(
java/client/org/apache/derby/client/am/Cursor.java,1160,"                        getVARCHAR(column).getBytes(""ISO-8859-1""));"
java/client/org/apache/derby/client/am/Cursor.java,1161,                } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,1162,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,1163,"                            new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,1164,"                            ""VARCHAR/LONGVARCHAR"", ""java.io.InputStream"", e);"
java/client/org/apache/derby/client/am/Cursor.java,1165,                }
java/client/org/apache/derby/client/am/Cursor.java,1198,                try {
java/client/org/apache/derby/client/am/Cursor.java,1199,                    return new InputStreamReader(
java/client/org/apache/derby/client/am/Cursor.java,1200,                        new ByteArrayInputStream(
java/client/org/apache/derby/client/am/Cursor.java,1201,"                            get_CHAR_FOR_BIT_DATA(column)), ""UTF-16BE"");"
java/client/org/apache/derby/client/am/Cursor.java,1202,                } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,1203,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,1204,"                            new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,1205,"                            ""BINARY"", ""java.io.Reader"", e);"
java/client/org/apache/derby/client/am/Cursor.java,1206,                }
java/client/org/apache/derby/client/am/Cursor.java,1209,                try {
java/client/org/apache/derby/client/am/Cursor.java,1210,                    return new InputStreamReader(
java/client/org/apache/derby/client/am/Cursor.java,1211,                        new ByteArrayInputStream(
java/client/org/apache/derby/client/am/Cursor.java,1212,"                            get_VARCHAR_FOR_BIT_DATA(column)), ""UTF-16BE"");"
java/client/org/apache/derby/client/am/Cursor.java,1213,                } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,1214,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,1215,"                            new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,1216,"                            ""VARBINARY/LONGVARBINARY"", ""java.io.Reader"", e);"
java/client/org/apache/derby/client/am/Cursor.java,1217,                }
java/client/org/apache/derby/client/am/Cursor.java,1219,                try {
java/client/org/apache/derby/client/am/Cursor.java,1220,"                    return new InputStreamReader(getBinaryStream(column),"
java/client/org/apache/derby/client/am/Cursor.java,1221,"                                                         ""UTF-16BE"");"
java/client/org/apache/derby/client/am/Cursor.java,1222,                } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Cursor.java,1223,"                    throw new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/am/Cursor.java,1224,"                            new ClientMessageId (SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/am/Cursor.java,1225,"                            ""BLOB"", ""java.io.Reader"", e);"
java/client/org/apache/derby/client/am/Cursor.java,1226,                }
java/client/org/apache/derby/client/am/Cursor.java,1355,        charsetName_ = null;
java/client/org/apache/derby/client/am/DateTime.java,26,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/am/DateTime.java,67,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,72,            String encoding) throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,121,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,124,"                                                      int offset,"
java/client/org/apache/derby/client/am/DateTime.java,125,"                                                      Calendar recyclableCal,"
java/client/org/apache/derby/client/am/DateTime.java,126,                                                      String encoding)
java/client/org/apache/derby/client/am/DateTime.java,127,    throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,161,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,163,"    static final Timestamp timestampBytesToTimestamp(byte[] buffer,"
java/client/org/apache/derby/client/am/DateTime.java,164,"                                                                     int offset,"
java/client/org/apache/derby/client/am/DateTime.java,165,"                                                                     Calendar recyclableCal,"
java/client/org/apache/derby/client/am/DateTime.java,166,"                                                                     String encoding,"
java/client/org/apache/derby/client/am/DateTime.java,167,                                                                     boolean supportsTimestampNanoseconds)
java/client/org/apache/derby/client/am/DateTime.java,168,    throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,266,     * @throws UnsupportedEncodingException if UTF8 Encoding is not supported
java/client/org/apache/derby/client/am/DateTime.java,271,"    throws SqlException,UnsupportedEncodingException {"
java/client/org/apache/derby/client/am/DateTime.java,313,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,318,    throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,352,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,358,"    throws SqlException,UnsupportedEncodingException {"
java/client/org/apache/derby/client/am/DateTime.java,436,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,441,                                                                String encoding)
java/client/org/apache/derby/client/am/DateTime.java,442,    throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,487,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,491,"                                                                int offset,"
java/client/org/apache/derby/client/am/DateTime.java,492,"                                                                Calendar recyclableCal,"
java/client/org/apache/derby/client/am/DateTime.java,493,                                                                String encoding)
java/client/org/apache/derby/client/am/DateTime.java,494,    throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/DateTime.java,539,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,542,"                                                           int offset,"
java/client/org/apache/derby/client/am/DateTime.java,543,"                                                           Calendar recyclableCal,"
java/client/org/apache/derby/client/am/DateTime.java,544,                                                           String encoding)
java/client/org/apache/derby/client/am/DateTime.java,545,    throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,581,     * @throws UnsupportedEncodingException
java/client/org/apache/derby/client/am/DateTime.java,584,"                                                           int offset,"
java/client/org/apache/derby/client/am/DateTime.java,585,"                                                           Calendar recyclableCal,"
java/client/org/apache/derby/client/am/DateTime.java,586,                                                           String encoding)
java/client/org/apache/derby/client/am/DateTime.java,587,    throws  UnsupportedEncodingException
java/client/org/apache/derby/client/am/Decimal.java,23,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/am/Decimal.java,154,            int scale) throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/Decimal.java,250,            int scale) throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/Decimal.java,315,            int scale) throws UnsupportedEncodingException {
java/client/org/apache/derby/client/am/Sqlca.java,24,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/am/Sqlca.java,211,        try {
java/client/org/apache/derby/client/am/Sqlca.java,212,"            sqlErrp_ = bytes2String(sqlErrpBytes_,"
java/client/org/apache/derby/client/am/Sqlca.java,213,"                    0,"
java/client/org/apache/derby/client/am/Sqlca.java,214,                    sqlErrpBytes_.length);
java/client/org/apache/derby/client/am/Sqlca.java,215,            return sqlErrp_;
java/client/org/apache/derby/client/am/Sqlca.java,216,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Sqlca.java,217,            // leave sqlErrp as null.
java/client/org/apache/derby/client/am/Sqlca.java,218,            return null;
java/client/org/apache/derby/client/am/Sqlca.java,219,        }
java/client/org/apache/derby/client/am/Sqlca.java,240,                try {
java/client/org/apache/derby/client/am/Sqlca.java,241,                    sqlWarn_ =
java/client/org/apache/derby/client/am/Sqlca.java,242,"                        bytes2String(sqlWarnBytes_, 0, sqlWarnBytes_.length);"
java/client/org/apache/derby/client/am/Sqlca.java,243,                } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Sqlca.java,244,                    sqlWarn_ = elevenBlanks;
java/client/org/apache/derby/client/am/Sqlca.java,245,                }
java/client/org/apache/derby/client/am/Sqlca.java,448,        try {
java/client/org/apache/derby/client/am/Sqlca.java,449,            // tokenize and convert tokenBytes
java/client/org/apache/derby/client/am/Sqlca.java,450,"            String fullString = bytes2String(tokenBytes, 0, length);"
java/client/org/apache/derby/client/am/Sqlca.java,451,"            String[] tokens = fullString.split(""\\u0014{3}"");"
java/client/org/apache/derby/client/am/Sqlca.java,452,            String[] states = new String[tokens.length];
java/client/org/apache/derby/client/am/Sqlca.java,453,            states[0] = getSqlState();
java/client/org/apache/derby/client/am/Sqlca.java,454,            for (int i = 1; i < tokens.length; i++) {
java/client/org/apache/derby/client/am/Sqlca.java,455,                // All but the first message are preceded by the SQL state
java/client/org/apache/derby/client/am/Sqlca.java,456,                // (five characters) and a colon. Extract the SQL state and
java/client/org/apache/derby/client/am/Sqlca.java,457,                // clean up the token. See
java/client/org/apache/derby/client/am/Sqlca.java,458,                // DRDAConnThread.buildTokenizedSqlerrmc() for more details.
java/client/org/apache/derby/client/am/Sqlca.java,459,"                int colonpos = tokens[i].indexOf("":"");"
java/client/org/apache/derby/client/am/Sqlca.java,460,"                states[i] = tokens[i].substring(0, colonpos);"
java/client/org/apache/derby/client/am/Sqlca.java,461,                tokens[i] = tokens[i].substring(colonpos + 1);
java/client/org/apache/derby/client/am/Sqlca.java,462,            }
java/client/org/apache/derby/client/am/Sqlca.java,463,            sqlStates_ = states;
java/client/org/apache/derby/client/am/Sqlca.java,464,            sqlErrmcMessages_ = tokens;
java/client/org/apache/derby/client/am/Sqlca.java,465,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/am/Sqlca.java,466,"            /* do nothing, the arrays continue to be null */"
java/client/org/apache/derby/client/am/Sqlca.java,470,"    protected String bytes2String(byte[] bytes, int offset, int length)"
java/client/org/apache/derby/client/am/Sqlca.java,471,            throws UnsupportedEncodingException {
java/client/org/apache/derby/client/net/EncodedInputStream.java,29,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/net/EncodedInputStream.java,30,
java/client/org/apache/derby/client/net/EncodedInputStream.java,31,import org.apache.derby.shared.common.sanity.SanityManager;
java/client/org/apache/derby/client/net/EncodedInputStream.java,56,"                                      ""UTF8"","
java/client/org/apache/derby/client/net/EncodedInputStream.java,69,"                                      ""UTF-16BE"","
java/client/org/apache/derby/client/net/EncodedInputStream.java,96,"                               String encoding,"
java/client/org/apache/derby/client/net/EncodedInputStream.java,106,        try{
java/client/org/apache/derby/client/net/EncodedInputStream.java,107,"            encodedStreamWriter_ = new OutputStreamWriter(encodedOutputStream_,"
java/client/org/apache/derby/client/net/EncodedInputStream.java,108,                                                          encoding);
java/client/org/apache/derby/client/net/EncodedInputStream.java,109,
java/client/org/apache/derby/client/net/EncodedInputStream.java,110,        }catch(UnsupportedEncodingException e){
java/client/org/apache/derby/client/net/EncodedInputStream.java,111,            // Should never happen. It is up to the caller to ensure the
java/client/org/apache/derby/client/net/EncodedInputStream.java,112,            // specified encoding is available.
java/client/org/apache/derby/client/net/EncodedInputStream.java,113,            if (SanityManager.DEBUG) {
java/client/org/apache/derby/client/net/EncodedInputStream.java,114,"                SanityManager.THROWASSERT(""Unavailable encoding specified: "" +"
java/client/org/apache/derby/client/net/EncodedInputStream.java,115,"                        encoding, e);"
java/client/org/apache/derby/client/net/EncodedInputStream.java,116,            }
java/client/org/apache/derby/client/net/EncodedInputStream.java,117,        }
java/client/org/apache/derby/client/net/EncodedInputStream.java,118,
java/client/org/apache/derby/client/net/NetConnectionReply.java,3293,"                            (readString(getDdmLength(), ""UTF-8""));"
java/client/org/apache/derby/client/net/NetConnectionReply.java,3322,"                    (readString(getDdmLength(), ""UTF-8""));"
java/client/org/apache/derby/client/net/NetCursor.java,24,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/net/NetCursor.java,866,"    private String readFdocaString(int length, String encoding) throws DisconnectException, SqlException {"
java/client/org/apache/derby/client/net/NetCursor.java,873,        String s = null;
java/client/org/apache/derby/client/net/NetCursor.java,874,
java/client/org/apache/derby/client/net/NetCursor.java,875,        try {
java/client/org/apache/derby/client/net/NetCursor.java,876,"            s = new String(dataBuffer_, position_, length, encoding);"
java/client/org/apache/derby/client/net/NetCursor.java,877,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/NetCursor.java,878,            netAgent_.accumulateChainBreakingReadExceptionAndThrow(
java/client/org/apache/derby/client/net/NetCursor.java,879,                new DisconnectException(
java/client/org/apache/derby/client/net/NetCursor.java,880,"                    netAgent_,"
java/client/org/apache/derby/client/net/NetCursor.java,881,"                    new ClientMessageId(SQLState.NET_ENCODING_NOT_SUPPORTED),"
java/client/org/apache/derby/client/net/NetCursor.java,882,                    e));
java/client/org/apache/derby/client/net/NetCursor.java,883,        }
java/client/org/apache/derby/client/net/NetCursor.java,884,
java/client/org/apache/derby/client/net/NetCursor.java,1013,"            clob = new ClientClob(agent, data, charsetName_[index], dataOffset);"
java/client/org/apache/derby/client/net/NetPackageRequest.java,169,"    private byte[] getBytes(String string, String encoding) throws SqlException {"
java/client/org/apache/derby/client/net/NetPackageRequest.java,170,        try {
java/client/org/apache/derby/client/net/NetPackageRequest.java,171,            return string.getBytes(encoding);
java/client/org/apache/derby/client/net/NetPackageRequest.java,172,        } catch (Exception e) {
java/client/org/apache/derby/client/net/NetPackageRequest.java,173,"            throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/NetPackageRequest.java,174,"                new ClientMessageId(SQLState.JAVA_EXCEPTION),"
java/client/org/apache/derby/client/net/NetPackageRequest.java,175,"                e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetPackageRequest.java,176,        }
java/client/org/apache/derby/client/net/NetPackageRequest.java,177,    }
java/client/org/apache/derby/client/net/NetPackageRequest.java,178,
java/client/org/apache/derby/client/net/NetPackageRequest.java,183,            byte[] sqlBytes;
java/client/org/apache/derby/client/net/NetPackageRequest.java,184,
java/client/org/apache/derby/client/net/NetPackageRequest.java,186,"                sqlBytes = getBytes(string, netAgent_.typdef_.getCcsidMbcEncoding());"
java/client/org/apache/derby/client/net/NetPackageRequest.java,192,"                sqlBytes = getBytes(string, netAgent_.typdef_.getCcsidSbcEncoding());"
java/client/org/apache/derby/client/net/NetSqlca.java,25,import org.apache.derby.shared.common.reference.SQLState;
java/client/org/apache/derby/client/net/NetSqlca.java,26,import org.apache.derby.client.am.ClientMessageId;
java/client/org/apache/derby/client/net/NetSqlca.java,27,import org.apache.derby.client.am.SqlException;
java/client/org/apache/derby/client/net/NetSqlca.java,28,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/net/NetSqlca.java,48,            byte[] sqlErrpBytes) throws SqlException {
java/client/org/apache/derby/client/net/NetSqlca.java,51,       try
java/client/org/apache/derby/client/net/NetSqlca.java,52,       {
java/client/org/apache/derby/client/net/NetSqlca.java,53,"           sqlState_ = bytes2String(sqlState,0,sqlState.length);"
java/client/org/apache/derby/client/net/NetSqlca.java,54,       }catch(UnsupportedEncodingException uee)
java/client/org/apache/derby/client/net/NetSqlca.java,55,       {
java/client/org/apache/derby/client/net/NetSqlca.java,56,"            throw new SqlException(null,"
java/client/org/apache/derby/client/net/NetSqlca.java,57,"                  new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/NetSqlca.java,58,"                       ""sqlstate bytes"", ""SQLSTATE"",uee);"
java/client/org/apache/derby/client/net/NetSqlca.java,59,       }
java/client/org/apache/derby/client/net/NetStatementRequest.java,24,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1224,                        ByteArrayInputStream bais = null;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1225,                        byte[] ba = null;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1226,                        try {
java/client/org/apache/derby/client/net/NetStatementRequest.java,1227,"                            ba = s.getBytes(""UTF-8"");"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1228,                            bais = new ByteArrayInputStream(ba);
java/client/org/apache/derby/client/net/NetStatementRequest.java,1229,                            ClientClob c = new ClientClob(
java/client/org/apache/derby/client/net/NetStatementRequest.java,1230,"                                netAgent_, bais, ""UTF-8"", ba.length);"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1231,                            // inputRow[i] = c;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1232,                            // Place the new Lob in the promototedParameter_ collection for
java/client/org/apache/derby/client/net/NetStatementRequest.java,1233,                            // NetStatementRequest use
java/client/org/apache/derby/client/net/NetStatementRequest.java,1234,"                            promototedParameters_.put(i, c);"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1235,
java/client/org/apache/derby/client/net/NetStatementRequest.java,1236,                            lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NLOBCMIXED;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1238,                            if( c.willBeLayerBStreamed() ){
java/client/org/apache/derby/client/net/NetStatementRequest.java,1239,
java/client/org/apache/derby/client/net/NetStatementRequest.java,1240,                                //Correspond to totalLength 0 as default length for unknown
java/client/org/apache/derby/client/net/NetStatementRequest.java,1241,                                lidAndLengths[i][1] = 0x8002;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1242,
java/client/org/apache/derby/client/net/NetStatementRequest.java,1243,                            }else {
java/client/org/apache/derby/client/net/NetStatementRequest.java,1244,                                lidAndLengths[i][1] = buildPlaceholderLength(c.length());
java/client/org/apache/derby/client/net/NetStatementRequest.java,1245,
java/client/org/apache/derby/client/net/NetStatementRequest.java,1246,                            }
java/client/org/apache/derby/client/net/NetStatementRequest.java,1247,
java/client/org/apache/derby/client/net/NetStatementRequest.java,1248,                        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/NetStatementRequest.java,1249,"                            throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1250,"                                new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1251,"                                ""byte array"", ""Clob"", e);"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1372,                        ByteArrayInputStream bais = null;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1373,                        byte[] ba = null;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1374,                        try {
java/client/org/apache/derby/client/net/NetStatementRequest.java,1375,"                            ba = s.getBytes(""UTF-8"");"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1376,                            bais = new ByteArrayInputStream(ba);
java/client/org/apache/derby/client/net/NetStatementRequest.java,1377,                            ClientClob c = new ClientClob(
java/client/org/apache/derby/client/net/NetStatementRequest.java,1378,"                                netAgent_, bais, ""UTF-8"", ba.length);"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1380,                            // inputRow[i] = c;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1381,                            // Place the new Lob in the promototedParameter_ collection for
java/client/org/apache/derby/client/net/NetStatementRequest.java,1382,                            // NetStatementRequest use
java/client/org/apache/derby/client/net/NetStatementRequest.java,1383,"                            promototedParameters_.put(i, c);"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1385,                            lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NLOBCMIXED;
java/client/org/apache/derby/client/net/NetStatementRequest.java,1386,                            lidAndLengths[i][1] = buildPlaceholderLength(c.length());
java/client/org/apache/derby/client/net/NetStatementRequest.java,1387,                        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/NetStatementRequest.java,1388,"                            throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1389,"                                new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1390,"                                ""byte array"", ""Clob"");"
java/client/org/apache/derby/client/net/NetStatementRequest.java,1391,                        }
java/client/org/apache/derby/client/net/Reply.java,27,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/net/Reply.java,635,"    final String readString(int length, String encoding) throws DisconnectException {"
java/client/org/apache/derby/client/net/Reply.java,638,        String s = null;
java/client/org/apache/derby/client/net/Reply.java,639,
java/client/org/apache/derby/client/net/Reply.java,640,        try {
java/client/org/apache/derby/client/net/Reply.java,641,"            s = new String(buffer_, pos_, length, encoding);"
java/client/org/apache/derby/client/net/Reply.java,642,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Reply.java,643,            agent_.accumulateChainBreakingReadExceptionAndThrow(
java/client/org/apache/derby/client/net/Reply.java,644,"                new DisconnectException(agent_,"
java/client/org/apache/derby/client/net/Reply.java,645,"                    new ClientMessageId(SQLState.NET_ENCODING_NOT_SUPPORTED),"
java/client/org/apache/derby/client/net/Reply.java,646,                    e));
java/client/org/apache/derby/client/net/Reply.java,647,        }
java/client/org/apache/derby/client/net/Reply.java,648,
java/client/org/apache/derby/client/net/Reply.java,1219,"    final String readFastString(int length, String encoding) throws DisconnectException {"
java/client/org/apache/derby/client/net/Reply.java,1220,        String s = null;
java/client/org/apache/derby/client/net/Reply.java,1221,
java/client/org/apache/derby/client/net/Reply.java,1222,        try {
java/client/org/apache/derby/client/net/Reply.java,1223,"            s = new String(buffer_, pos_, length, encoding);"
java/client/org/apache/derby/client/net/Reply.java,1224,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Reply.java,1225,            agent_.accumulateChainBreakingReadExceptionAndThrow(
java/client/org/apache/derby/client/net/Reply.java,1226,"                new DisconnectException(agent_,"
java/client/org/apache/derby/client/net/Reply.java,1227,"                    new ClientMessageId(SQLState.NET_ENCODING_NOT_SUPPORTED),"
java/client/org/apache/derby/client/net/Reply.java,1228,                    e));
java/client/org/apache/derby/client/net/Reply.java,1229,        }
java/client/org/apache/derby/client/net/Request.java,39,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/net/Request.java,1300,        try
java/client/org/apache/derby/client/net/Request.java,1301,        {
java/client/org/apache/derby/client/net/Request.java,1302,            ensureLength(10);
java/client/org/apache/derby/client/net/Request.java,1303,"            DateTime.dateToDateBytes(buffer.array(), buffer.position(), date);"
java/client/org/apache/derby/client/net/Request.java,1304,            buffer.position(buffer.position() + 10);
java/client/org/apache/derby/client/net/Request.java,1305,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Request.java,1306,"            throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/Request.java,1307,"                    new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/Request.java,1308,"                    ""java.sql.Date"", ""DATE"", e);"
java/client/org/apache/derby/client/net/Request.java,1309,        }
java/client/org/apache/derby/client/net/Request.java,1312,    final void writeTime(DateTimeValue time) throws SqlException {
java/client/org/apache/derby/client/net/Request.java,1313,        try{
java/client/org/apache/derby/client/net/Request.java,1314,            ensureLength(8);
java/client/org/apache/derby/client/net/Request.java,1315,"            DateTime.timeToTimeBytes(buffer.array(), buffer.position(), time);"
java/client/org/apache/derby/client/net/Request.java,1316,            buffer.position(buffer.position() + 8);
java/client/org/apache/derby/client/net/Request.java,1317,        } catch(UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Request.java,1318,"            throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/Request.java,1319,"                    new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/Request.java,1320,"                    ""java.sql.Time"", ""TIME"", e);"
java/client/org/apache/derby/client/net/Request.java,1321,      }
java/client/org/apache/derby/client/net/Request.java,1325,        try{
java/client/org/apache/derby/client/net/Request.java,1326,            boolean supportsTimestampNanoseconds = netAgent_.netConnection_.serverSupportsTimestampNanoseconds();
java/client/org/apache/derby/client/net/Request.java,1327,            int length = DateTime.getTimestampLength( supportsTimestampNanoseconds );
java/client/org/apache/derby/client/net/Request.java,1328,            ensureLength(length);
java/client/org/apache/derby/client/net/Request.java,1329,            DateTime.timestampToTimestampBytes(
java/client/org/apache/derby/client/net/Request.java,1330,"                    buffer.array(), buffer.position(),"
java/client/org/apache/derby/client/net/Request.java,1331,"                    timestamp, supportsTimestampNanoseconds);"
java/client/org/apache/derby/client/net/Request.java,1332,            buffer.position(buffer.position() + length);
java/client/org/apache/derby/client/net/Request.java,1333,        }catch(UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Request.java,1334,"            throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/Request.java,1335,"                    new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/Request.java,1336,"                    ""java.sql.Timestamp"", ""TIMESTAMP"", e);"
java/client/org/apache/derby/client/net/Request.java,1337,        }
java/client/org/apache/derby/client/net/Request.java,1351,"    final void writeSingleorMixedCcsidLDString(String s, String encoding) throws SqlException {"
java/client/org/apache/derby/client/net/Request.java,1352,        byte[] b;
java/client/org/apache/derby/client/net/Request.java,1353,        try {
java/client/org/apache/derby/client/net/Request.java,1354,            b = s.getBytes(encoding);
java/client/org/apache/derby/client/net/Request.java,1355,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Request.java,1356,"            throw new SqlException(netAgent_.logWriter_,"
java/client/org/apache/derby/client/net/Request.java,1357,"                    new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),"
java/client/org/apache/derby/client/net/Request.java,1358,"                    ""String"", ""byte"", e);"
java/client/org/apache/derby/client/net/Request.java,1359,        }
java/client/org/apache/derby/client/net/Typdef.java,160,"    public static final String UTF8ENCODING = ""UTF8"";"
java/client/org/apache/derby/client/net/Typdef.java,905,    private String ccsidSbcEncoding_;
java/client/org/apache/derby/client/net/Typdef.java,909,    private String ccsidDbcEncoding_;
java/client/org/apache/derby/client/net/Typdef.java,914,    private String ccsidMbcEncoding_;
java/client/org/apache/derby/client/net/Typdef.java,986,    String getCcsidSbcEncoding() throws DisconnectException {
java/client/org/apache/derby/client/net/Typdef.java,1008,    private String getCcsidDbcEncoding() throws DisconnectException {
java/client/org/apache/derby/client/net/Typdef.java,1030,    String getCcsidMbcEncoding() throws DisconnectException {
java/client/org/apache/derby/client/net/Typdef.java,1071,            netCursor.charsetName_[columnIndex] = getCcsidSbcEncoding();
java/client/org/apache/derby/client/net/Typdef.java,1076,                netCursor.charsetName_[columnIndex] = getCcsidMbcEncoding();
java/client/org/apache/derby/client/net/Typdef.java,1081,                netCursor.charsetName_[columnIndex] = null;
java/client/org/apache/derby/client/net/Typdef.java,1087,                netCursor.charsetName_[columnIndex] = getCcsidDbcEncoding();
java/client/org/apache/derby/client/net/Typdef.java,1094,                netCursor.charsetName_[columnIndex] = null;
java/client/org/apache/derby/client/net/Typdef.java,1104,            netCursor.charsetName_[columnIndex] = UTF8ENCODING;
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,24,import java.io.UnsupportedEncodingException;
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,35,import org.apache.derby.shared.common.sanity.SanityManager;
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,96,        try {
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,97,            // Here we'd rather specify the encoding using a Charset object to
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,98,"            // avoid the need to handle UnsupportedEncodingException, but that"
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,99,            // constructor wasn't introduced until Java 6.
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,100,"            return new String(sourceBytes, offset, numToConvert, UTF8);"
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,101,        } catch (UnsupportedEncodingException e) {
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,102,            // We don't have an agent in this method
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,103,            if (SanityManager.DEBUG) {
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,104,"                SanityManager.THROWASSERT(""Could not convert byte[] to Java String using UTF-8 encoding with offset"",e);"
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,105,            }
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,106,        }
java/client/org/apache/derby/client/net/Utf8CcsidManager.java,107,        return null;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2797,  /* Generate the referenced table map */
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3270, {
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3271,        //
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3272,        // By now the map of referenced columns has been filled in.
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3273,        // We check to see if SYSUSERS.PASSWORD is referenced.
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3274,        // Even the DBO is not allowed to SELECT that column.
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3275,        // This is to prevent us from instantiating the password as a
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3276,"        // String. The char[] inside the String can hang around, unzeroed"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3277,        // and be read by a memory-sniffer. See DERBY-866.
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3278,        //
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3279,        if ( authorizeSYSUSERS )
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3280,        {
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3281,            int passwordColNum = SYSUSERSRowFactory.PASSWORD_COL_NUM;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3282,
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3283,            if (
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3284,                ( referencedCols == null ) || // select * from sys.sysusers results in a null referecedCols
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3285,                (
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3286,                 (referencedCols.getLength() >= passwordColNum ) && referencedCols.isSet( passwordColNum - 1 )
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3287,                )
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3288,               )
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3289,            {
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3290,                throw StandardException.newException
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3291,"                    ( SQLState.HIDDEN_COLUMN, SYSUSERSRowFactory.TABLE_NAME, SYSUSERSRowFactory.PASSWORD_COL_NAME );"
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3292,            }
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3293,        }
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,3294,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,24,import java.io.InputStreamReader;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,25,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,29,import java.sql.Statement;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,81,            suite.addTest(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,82,"                TestConfiguration.defaultSuite(XMLBindingTest.class, false));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,84,            XBindTestSetup wrapper = new XBindTestSetup(suite);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,89,"            return new SupportFilesSetup(wrapper,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,269,        public XBindTestSetup(TestSuite tSuite) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLBindingTest.java,270,            super(tSuite);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,928,"                        cloudscapeDriver.connect(""jdbc:derby:;shutdown=true"", p);"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,69,    private static Driver _autoloadedDriver;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,263,                DriverManager.deregisterDriver(_autoloadedDriver);
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,265,            } else {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,266,                DriverManager.deregisterDriver(_driverModule);
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,267,"                //DERBY 5085, need to restore the default value"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,268,                InternalDriver.setDeregister(true);
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,276,
java/engine/org/apache/derby/iapi/reference/Property.java,55,  service properties start with this prefix.
java/engine/org/apache/derby/iapi/reference/Property.java,492,     * <p>
java/engine/org/apache/derby/iapi/reference/Property.java,614,  * <p>
java/engine/org/apache/derby/iapi/reference/Property.java,615,  * Externally visible.
java/engine/org/apache/derby/iapi/reference/Property.java,624,  * Externally visible.
java/engine/org/apache/derby/iapi/reference/Property.java,646,   Externally visible.
java/engine/org/apache/derby/iapi/reference/Property.java,891,  */
java/engine/org/apache/derby/iapi/reference/Property.java,892," public static final String CHECKPOINT_INTERVAL = ""derby.storage.checkpointInterval"";"
java/engine/org/apache/derby/iapi/reference/Property.java,894, /**
java/engine/org/apache/derby/iapi/reference/Property.java,895,  Property name for specifying log archival location
java/engine/org/apache/derby/iapi/reference/Property.java,897," public static final String LOG_ARCHIVAL_DIRECTORY = ""derby.storage.logArchive"";"
java/engine/org/apache/derby/iapi/reference/Property.java,962,     *<BR>
java/engine/org/apache/derby/iapi/reference/Property.java,965,     *<BR>
java/engine/org/apache/derby/iapi/reference/Property.java,972,     *<BR>
java/engine/org/apache/derby/iapi/reference/Property.java,974,     *<BR>
java/engine/org/apache/derby/iapi/reference/Property.java,980,     *<BR>
java/engine/org/apache/derby/iapi/reference/Property.java,982,     *<BR>
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,24,import java.io.UnsupportedEncodingException;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,79,  Test basesuite = new TestSuite(GrantRevokeTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,80,  Test clean = new CleanDatabaseTestSetup(basesuite) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,183,  Test test = DatabasePropertyTestSetup.builtinAuthentication(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,184,"    clean, users, ""grantrevoke"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1067,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1068,            if (!hasPrivilege)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1069,"                fail(""expected no SELECT permission on table"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1070,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1075,       e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1076,"       fail(""Unexpected lack of select privilege."");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1099,            if (!hasPrivilege)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1100,"                fail(""expected no DELETE permission on table"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1106,"       fail(""Unexpected lack of delete privilege."");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1107,       e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1148,            if (!hasPrivilege)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1149,"               fail(""expected no INSERT permission on table"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1155,"       fail(""Unexpected lack of insert privilege on "" + schema + ""."" + table + "" by "" + user);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1213,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1214,                if (!hasPrivilege)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1215,"                  fail(""expected no UPDATE permission on table"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1221,           e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1222,"           fail(""Unexpected lack of privilege to update on "" + schema + ""."" + table + "" by "" + user);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1268,           e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1269,"           fail(""Unexpected lack of references privilege"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1302,            if (!hasPrivilege)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1303,"                fail(""expected no TRIGGER permission on table"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1309,       e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1310,"       fail(""Unexpected lack of trigger privilege on "" + schema + ""."" + table + "" by "" + user);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1342,            if (!hasPrivilege)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1343,"                fail(""expected no EXECUTE permission on function"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1352,    e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1353,"    fail(""Unexpected lack of function execute privilege"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1381,            if (!hasPrivilege)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1382,"                fail(""expected no EXECUTE permission on procedure"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1383,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1388,    e.printStackTrace();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeTest.java,1389,"    fail(""Unexpected lack of procedure execute privilege."");"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,38,import org.apache.derby.impl.store.raw.xact.TransactionTableEntry;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,43,import java.util.Iterator;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,44,import java.util.Map;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,84, <P><B> This class depends on Hashtable synchronization!! </B>
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,85,"    To allow thread-safe iteration over the values in the Hashtable, callers"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,86,    must synchronize on the Hashtable while iterating. The method {@link
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,87,    #visitEntries(EntryVisitor)} abstracts the synchronization and iteration
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,88,    so that the callers don't need to synchronize explicitly when they go
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,89,    through the contents of the table. Methods that are only called during
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,101,    private final TransactionMapFactory mapFactory;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,102," private final Map<TransactionId,TransactionTableEntry> trans;"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,111,        mapFactory = XactFactory.getMapFactory();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,112,        trans = mapFactory.newMap();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,180,"        mapFactory.visitEntries(trans, visitor);"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,383,        final ContextManager[] cm = new ContextManager[1];
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,384,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,385,        visitEntries(new EntryVisitor() {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,386,            public boolean visit(TransactionTableEntry entry) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,387,                GlobalTransactionId entry_gid = entry.getGid();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,388,                if (entry_gid != null && entry_gid.equals(global_id)) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,389,                    cm[0] = entry.getXact().getContextManager();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,390,                }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,391,                return cm[0] == null; // continue until context is found
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,393,        });
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,395,        return cm[0];
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,414,            UpdateTransactionCounter counter =
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,415,                    new UpdateTransactionCounter(true);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,416,            visitEntries(counter);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,417,            return counter.getCount() > 0;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,418,  }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,419, }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,420,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,421,    /**
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,422,     * Visitor class that counts update transactions. Note that update
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,423,     * transactions may be added or removed concurrently unless the caller
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,424,"     * synchronizes on ""this"" (the {@code TransactionTable} instance) while"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,425,     * applying the visitor.
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,426,     */
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,427,    private static class UpdateTransactionCounter implements EntryVisitor
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,428,    {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,429,        private final boolean stopOnFirst;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,430,        private int count;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,431,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,432,        /**
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,433,         * Create an instance of this visitor.
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,434,         *
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,435,"         * @param stopOnFirst if {@code true}, stop the scan as soon as we"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,436,         * have found one update transaction (useful if all we care about is
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,437,         * whether or not the transaction table contains an update transaction);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,438,"         * otherwise, scan the entire transaction table"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,439,         */
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,440,        UpdateTransactionCounter(boolean stopOnFirst) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,441,            this.stopOnFirst = stopOnFirst;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,442,        }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,443,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,444,        /**
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,445,"         * Check if the entry represents an update transaction, and update"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,446,         * the counter accordingly.
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,447,         */
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,448,        public boolean visit(TransactionTableEntry entry) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,449,            if (entry.isUpdate()) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,450,                count++;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,452,"            // Continue the scan if a full scan was requested, or if no update"
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,453,            // transactions have been found yet.
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,454,            return !stopOnFirst || (count == 0);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,457,        /**
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,458,         * Get the number of update transactions seen by this visitor
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,459,         * @return number of update transactions
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,460,         */
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,461,        int getCount() {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,462,            return count;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,463,        }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,493,            UpdateTransactionCounter counter =
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,494,                    new UpdateTransactionCounter(false);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,495,            visitEntries(counter);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,496,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,497,            int count = counter.getCount();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,505,                final int[] writeCount =
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,506,                        SanityManager.DEBUG ? new int[1] : null;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,507,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,508,                final IOException[] thrownException = new IOException[1];
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,509,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,510,                visitEntries(new EntryVisitor() {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,511,                    public boolean visit(TransactionTableEntry entry) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,512,                        try {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,513,                            if (entry.isUpdate()) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,514,                                // only write out update transactions
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,515,                                out.writeObject(entry);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,516,                                if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,517,                                    writeCount[0]++;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,518,                                }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,519,                            }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,520,                        } catch (IOException ioe) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,521,                            thrownException[0] = ioe;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,522,                            return false; // stop on error
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,524,                        return true; // go through entire table
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,526,                });
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,527,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,528,                if (thrownException[0] != null) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,529,                    throw thrownException[0];
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,534,                    SanityManager.ASSERT(count == writeCount[0]);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,600,  for (Iterator<TransactionTableEntry> it = trans.values().iterator(); it.hasNext(); )
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,602,   TransactionTableEntry ent = it.next();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,603,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,652,        for (Iterator<TransactionTableEntry> it = trans.values().iterator(); it.hasNext(); )
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,654,            TransactionTableEntry ent = it.next();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,655,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,694,  for (Iterator<TransactionTableEntry> it = trans.values().iterator(); it.hasNext(); )
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,696,   TransactionTableEntry ent = it.next();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,697,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,748,   for (Iterator<TransactionTableEntry> it = trans.values().iterator(); it.hasNext() ; )
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,750,    TransactionTableEntry ent = it.next();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,751,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,787,                    for (Iterator<TransactionTableEntry> it = trans.values().iterator(); it.hasNext();)
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,789,                        TransactionTableEntry ent =
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,790,                            it.next();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,843,            TransactionTableEntry   ent;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,845,   for (Iterator<TransactionTableEntry> it = trans.values().iterator(); it.hasNext(); )
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,847,    ent = it.next();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,848,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,870,                    for (Iterator<TransactionTableEntry> it = trans.values().iterator(); it.hasNext();)
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,872,                        ent = it.next();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,873,
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,924,  if (trans.isEmpty())
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,925,        {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,926,   return null;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,927,        }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,928,  else
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,929,  {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,930,            final LogInstant[] logInstant = new LogInstant[1];
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,931,            visitEntries(new EntryVisitor() {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,932,                public boolean visit(TransactionTableEntry entry) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,933,                    if (entry.isUpdate()) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,934,                        if ((logInstant[0] == null) ||
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,935,                                entry.getFirstLog().lessThan(logInstant[0])) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,936,                            logInstant[0] = entry.getFirstLog();
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,937,                        }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,938,                    }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,939,                    return true; // scan entire transaction table
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,941,            });
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,943,            return logInstant[0];
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,944,  }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1005,        visitEntries(new EntryVisitor() {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1006,            public boolean visit(TransactionTableEntry entry) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1007,                tinfo.add( (TransactionTableEntry) entry.clone());
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1008,                return true; // scan entire transaction table
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1009,            }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1010,        });
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1012,        return (TransactionTableEntry[])
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1013,                tinfo.toArray(new TransactionTableEntry[tinfo.size()]);
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1027,            final boolean[] hasReadOnlyTransaction = new boolean[1];
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1029,            visitEntries(new EntryVisitor() {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1030,                public boolean visit(TransactionTableEntry entry) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1031,                    if (entry.isUpdate()) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1032,                        str.append(entry.toString());
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1033,                    } else {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1034,                        hasReadOnlyTransaction[0] = true;
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1035,                    }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1036,                    return true; // scan the entire transaction table
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1038,            });
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1040,            if (hasReadOnlyTransaction[0])
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1044,                visitEntries(new EntryVisitor() {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1045,                    public boolean visit(TransactionTableEntry entry) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1046,                        if (!entry.isUpdate()) {
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1047,                            str.append(entry.toString());
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1048,                        }
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1049,                        return true; // scan the entire transaction table
java/engine/org/apache/derby/impl/store/raw/xact/TransactionTable.java,1051,                });
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,101,    /**
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,102,     * An instance of a helper class that provides maps with different
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,103,     * concurrency properties depending on the platform. Used by
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,104,     * {@code TransactionTable}.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,105,     */
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,106,    private static TransactionMapFactory mapFactory;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,107,
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,114,        setMapFactory();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,117,    /**
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,118,     * Create a {@code TransactionMapFactory} instance. This method can be
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,119,     * overridden by sub-classes in order to provide a factory that produces
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,120,"     * maps that give higher concurrency, if supported by the platform."
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,121,     *
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,122,     * @return a {@code TransactionMapFactory} suitable for this platform
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,123,     */
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,124,    TransactionMapFactory createMapFactory() {
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,125,        return new TransactionMapFactory();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,126,    }
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,127,
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,128,    /**
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,129,"     * Set the default map factory to use for this system, if it's not already"
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,130,     * set. The value will be stored in a static variable so that it will only
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,131,     * be set by the first {@code XactFactory} that's booted.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,132,     */
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,133,    private void setMapFactory() {
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,134,        synchronized (XactFactory.class) {
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,135,            if (mapFactory == null) {
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,136,                mapFactory = createMapFactory();
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,137,            }
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,138,        }
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,139,    }
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,140,
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,141,    /**
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,142,     * Get the map factory for this platform. This can be used by {@code
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,143,     * TransactionTable} in order to produce the sort of map that has the best
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,144,     * concurrency properties available on this platform.
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,145,     *
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,146,     * @return a map factory
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,147,     */
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,148,    static synchronized TransactionMapFactory getMapFactory() {
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,149,        return mapFactory;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,150,    }
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,151,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,504,     * the bounds on the type variables. This method raises an exception if the
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,505,     * JVM does not support generics. May return null if type resolution fails.
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,510,"  throw StandardException.newException( SQLState.VM_LEVEL_TOO_LOW, ""Java 5"" );"
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,512,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,518,        // Varargs were introduced by Java 5. So this 1.4 ClassInspector always
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,519,        // return false;
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,520,        return false;
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,522,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,525,     * the actual types of the interface type variables. This method raises an exception if the
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,526,     * JVM does not support generics. May return null or an array of nulls if type resolution fails.
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,531,"  throw StandardException.newException( SQLState.VM_LEVEL_TOO_LOW, ""Java 5"" );"
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,533,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,907,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,908, /**
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,909,  Is method/constructor T more or equally specific than method U.
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,910,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,911,  See the Java Language Specification section 15.11.2.2.
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,912, */
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,913," private boolean isMethodMoreSpecificOrEqual(Member T, Member U, boolean[] isParam) {"
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,914,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,915,  Class[] TC;
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,916,  Class[] UC;
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,917,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,918,  if (T instanceof Method) {
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,919,"   if (!classConvertableFromTo(T.getDeclaringClass(), U.getDeclaringClass(), true))"
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,920,    return false;
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,921,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,922,   TC = ((Method) T).getParameterTypes();
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,923,   UC = ((Method) U).getParameterTypes();
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,924,  } else {
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,925,   TC = ((Constructor) T).getParameterTypes();
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,926,   UC = ((Constructor) U).getParameterTypes();
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,927,  }
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,928,
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,929,"  return signatureConvertableFromTo(TC, null, UC, isParam, true);"
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,930, }
java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java,931,
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,120,"     * For creating the class inspector. On Java 5 and higher, we have a more"
java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java,121,     * capable class inspector.
java/shared/org/apache/derby/shared/common/reference/SQLState.java,221," String VM_LEVEL_TOO_LOW = ""XBCM5.S"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,28,import org.apache.derbyTesting.junit.JDBC;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,107,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,108,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,109,     * Test that we get a reasonable error when trying to invoke
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,110,     * a user-defined aggregate on a vm which doesn't support generics.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,111,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,112,    public  void    testUDAWithoutGenerics() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,113,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,114,        if (JDBC.vmSupportsJDBC3()) { return; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,115,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,116,        Statement st = createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,117,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,118,        st.execute
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,119,            (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,120,"             ""create derby aggregate bad_mode for int\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,121,"             ""external name 'org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate'"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,122,             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,123,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,124,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,125,            st.execute
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,126,                (
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,127,"                 ""select bad_mode( columnnumber ) from sys.syscolumns"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,128,                 );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,129,"            fail( ""Aggregate unexpectedly succeeded."" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,130,        } catch (SQLException se)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,131,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,132,            String  actualSQLState = se.getSQLState();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,133,"            if ( !""XBCM5"".equals( actualSQLState ) && !""XJ001"".equals( actualSQLState )  && !""42ZC8"".equals( actualSQLState ) )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,134,            {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,135,"                fail( ""Unexpected SQLState: "" + actualSQLState );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,136,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,137,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/UngroupedAggregatesNegativeTest.java,138,    }
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,166,"        /* 114 */       ""org.apache.derby.impl.store.raw.log.SaveLWMOperation"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,265,"        /* 213 */       ""org.apache.derby.impl.sql.execute.ReplaceJarConstantAction"","
java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java,271,"        /* 219 */       ""org.apache.derby.iapi.util.ByteArray"","
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1088,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1089,      class org.apache.derby.impl.sql.execute.AddJarConstantAction;
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1090,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1091,    static public final int ADD_JAR_CONSTANT_ACTION_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1092,            (MIN_ID_2 + 211);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1093,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1094,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1095,      class org.apache.derby.impl.sql.execute.DropJarConstantAction;
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1096,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1097,    static public final int DROP_JAR_CONSTANT_ACTION_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1098,            (MIN_ID_2 + 212);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1099,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1100,    /**
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1101,      class org.apache.derby.impl.sql.execute.ReplaceJarConstantAction;
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1102,     */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1103,    static public final int REPLACE_JAR_CONSTANT_ACTION_V01_ID =
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1104,            (MIN_ID_2 + 213);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1105,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1689,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1690,    /******************************************************************
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1691,    **
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1692,    **  LocalDriver Formatables.
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1693,    **
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1694,    ******************************************************************/
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1695,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1696,    /* NOT USED = org.apache.derby.impl.jdbc.ExternalizableConnection */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1697,    public static final int EXTERNALIZABLE_CONNECTION_ID = (MIN_ID_2 + 192);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1698,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1699,
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1700,    /******************************************************************
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1701,    **
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1702,    **      InternalUtils MODULE CLASSES
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1703,    **
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1704,    ******************************************************************/
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1705,    /* org.apache.derby.iapi.util.ByteArray */
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1706,    public static final int FORMATABLE_BYTE_ARRAY_V01_ID = (MIN_ID_2 + 219);
java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java,1707,
java/testing/org/apache/derbyTesting/junit/Decorator.java,216,    private static Test attributesDatabase(
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DriverTest.java,134,        for (String dbName : ADDITIONAL_DBS) {
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,71,        String url = TestConfiguration.getCurrent().
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,72,"                getJDBCUrl(SupportFilesSetup.getReadWrite(""swissdb"").getPath());"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,83,        url = TestConfiguration.getCurrent().getJDBCUrl(
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,84,"                SupportFilesSetup.getReadWrite(""hindi"").getPath());"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,94,        url = TestConfiguration.getCurrent().
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,95,"                getJDBCUrl(SupportFilesSetup.getReadWrite(""Israel"").getPath());"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,106,        url = TestConfiguration.getCurrent().
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,107,"                getJDBCUrl(SupportFilesSetup.getReadWrite(""bacon"").getPath());"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,154,     * @return
java/engine/org/apache/derby/iapi/error/StandardException.java,74," protected StandardException(String messageID, Object[] args)"
java/engine/org/apache/derby/iapi/error/StandardException.java,75, {
java/engine/org/apache/derby/iapi/error/StandardException.java,76,"  this(messageID, (Throwable) null, args);"
java/engine/org/apache/derby/iapi/error/StandardException.java,77, }
java/engine/org/apache/derby/iapi/error/StandardException.java,78,
java/engine/org/apache/derby/iapi/error/StandardException.java,263, /* 0 arguments */
java/engine/org/apache/derby/iapi/error/StandardException.java,264,
java/engine/org/apache/derby/iapi/error/StandardException.java,265, public static StandardException newException(String messageID) {
java/engine/org/apache/derby/iapi/error/StandardException.java,266,  return new StandardException(messageID);
java/engine/org/apache/derby/iapi/error/StandardException.java,267, }
java/engine/org/apache/derby/iapi/error/StandardException.java,268," public static StandardException newException(String messageID, Throwable t) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,269,"  return new StandardException(messageID, t, (Object[]) null);"
java/engine/org/apache/derby/iapi/error/StandardException.java,270, }
java/engine/org/apache/derby/iapi/error/StandardException.java,271,
java/engine/org/apache/derby/iapi/error/StandardException.java,272, /* 1 argument */
java/engine/org/apache/derby/iapi/error/StandardException.java,273,
java/engine/org/apache/derby/iapi/error/StandardException.java,274," public static StandardException newException(String messageID, Object a1) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,275,  Object[] oa = new Object[] {a1};
java/engine/org/apache/derby/iapi/error/StandardException.java,276,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,277, }
java/engine/org/apache/derby/iapi/error/StandardException.java,278,
java/engine/org/apache/derby/iapi/error/StandardException.java,279," public static StandardException newException(String messageID,"
java/engine/org/apache/derby/iapi/error/StandardException.java,280,             Object[] a1) {
java/engine/org/apache/derby/iapi/error/StandardException.java,281,"  return new StandardException(messageID, a1);"
java/engine/org/apache/derby/iapi/error/StandardException.java,282, }
java/engine/org/apache/derby/iapi/error/StandardException.java,284," public static StandardException newException(String messageID, Throwable t, Object a1) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,285,  Object[] oa = new Object[] {a1};
java/engine/org/apache/derby/iapi/error/StandardException.java,286,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,287, }
java/engine/org/apache/derby/iapi/error/StandardException.java,291," public static StandardException newException(String messageID, Object a1, Object a2) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,292,"  Object[] oa = new Object[] {a1, a2};"
java/engine/org/apache/derby/iapi/error/StandardException.java,293,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,294, }
java/engine/org/apache/derby/iapi/error/StandardException.java,295,
java/engine/org/apache/derby/iapi/error/StandardException.java,324," public static StandardException newException(String messageID, Throwable t, Object a1, Object a2) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,325,"  Object[] oa = new Object[] {a1, a2};"
java/engine/org/apache/derby/iapi/error/StandardException.java,326,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,327, }
java/engine/org/apache/derby/iapi/error/StandardException.java,328,
java/engine/org/apache/derby/iapi/error/StandardException.java,331," public static StandardException newException(String messageID, Object a1, Object a2, Object a3) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,332,"  Object[] oa = new Object[] {a1, a2, a3};"
java/engine/org/apache/derby/iapi/error/StandardException.java,333,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,334, }
java/engine/org/apache/derby/iapi/error/StandardException.java,335,
java/engine/org/apache/derby/iapi/error/StandardException.java,354," public static StandardException newException(String messageID, Throwable t, Object a1, Object a2, Object a3) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,355,"  Object[] oa = new Object[] {a1, a2, a3};"
java/engine/org/apache/derby/iapi/error/StandardException.java,356,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,357, }
java/engine/org/apache/derby/iapi/error/StandardException.java,358,
java/engine/org/apache/derby/iapi/error/StandardException.java,359, /* 4 arguments */
java/engine/org/apache/derby/iapi/error/StandardException.java,360,
java/engine/org/apache/derby/iapi/error/StandardException.java,361," public static StandardException newException(String messageID, Object a1, Object a2, Object a3, Object a4) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,362,"  Object[] oa = new Object[] {a1, a2, a3, a4};"
java/engine/org/apache/derby/iapi/error/StandardException.java,363,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,364, }
java/engine/org/apache/derby/iapi/error/StandardException.java,365," public static StandardException newException(String messageID, Throwable t, Object a1, Object a2, Object a3, Object a4) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,366,"  Object[] oa = new Object[] {a1, a2, a3, a4};"
java/engine/org/apache/derby/iapi/error/StandardException.java,367,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,368, }
java/engine/org/apache/derby/iapi/error/StandardException.java,369,
java/engine/org/apache/derby/iapi/error/StandardException.java,370, /* 5 arguments */
java/engine/org/apache/derby/iapi/error/StandardException.java,371," public static StandardException newException(String messageID, Object a1, Object a2, Object a3, Object a4, Object a5) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,372,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5};"
java/engine/org/apache/derby/iapi/error/StandardException.java,373,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,374, }
java/engine/org/apache/derby/iapi/error/StandardException.java,375," public static StandardException newException(String messageID, Throwable t, Object a1, Object a2, Object a3, Object a4, Object a5) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,376,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5};"
java/engine/org/apache/derby/iapi/error/StandardException.java,377,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,378, }
java/engine/org/apache/derby/iapi/error/StandardException.java,379,
java/engine/org/apache/derby/iapi/error/StandardException.java,380, /* 6 arguments */
java/engine/org/apache/derby/iapi/error/StandardException.java,381," public static StandardException newException(String messageID, Object a1, Object a2, Object a3, Object a4, Object a5, Object a6) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,382,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5, a6};"
java/engine/org/apache/derby/iapi/error/StandardException.java,383,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,384, }
java/engine/org/apache/derby/iapi/error/StandardException.java,385," public static StandardException newException(String messageID, Throwable t, Object a1, Object a2, Object a3, Object a4, Object a5, Object a6) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,386,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5, a6};"
java/engine/org/apache/derby/iapi/error/StandardException.java,387,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,388, }
java/engine/org/apache/derby/iapi/error/StandardException.java,389,
java/engine/org/apache/derby/iapi/error/StandardException.java,390, /* 7 arguments */
java/engine/org/apache/derby/iapi/error/StandardException.java,391," public static StandardException newException(String messageID, Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Object a7) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,392,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5, a6, a7};"
java/engine/org/apache/derby/iapi/error/StandardException.java,393,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,394, }
java/engine/org/apache/derby/iapi/error/StandardException.java,395," public static StandardException newException(String messageID, Throwable t, Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Object a7) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,396,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5, a6, a7};"
java/engine/org/apache/derby/iapi/error/StandardException.java,397,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,398, }
java/engine/org/apache/derby/iapi/error/StandardException.java,399,
java/engine/org/apache/derby/iapi/error/StandardException.java,400, /* 8 arguments */
java/engine/org/apache/derby/iapi/error/StandardException.java,401," public static StandardException newException(String messageID, Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Object a7, Object a8) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,402,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5, a6, a7, a8};"
java/engine/org/apache/derby/iapi/error/StandardException.java,403,"  return new StandardException(messageID, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,404, }
java/engine/org/apache/derby/iapi/error/StandardException.java,405," public static StandardException newException(String messageID, Throwable t, Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Object a7, Object a8) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,406,"  Object[] oa = new Object[] {a1, a2, a3, a4, a5, a6, a7, a8};"
java/engine/org/apache/derby/iapi/error/StandardException.java,407,"  return new StandardException(messageID, t, oa);"
java/engine/org/apache/derby/iapi/error/StandardException.java,408, }
java/engine/org/apache/derby/iapi/error/StandardException.java,409,
java/engine/org/apache/derby/iapi/error/StandardException.java,696, public static SQLWarning newWarning(String messageId) {
java/engine/org/apache/derby/iapi/error/StandardException.java,697,
java/engine/org/apache/derby/iapi/error/StandardException.java,698,"  return newWarningCommon( messageId, (Object[]) null );"
java/engine/org/apache/derby/iapi/error/StandardException.java,699,
java/engine/org/apache/derby/iapi/error/StandardException.java,700, }
java/engine/org/apache/derby/iapi/error/StandardException.java,701,
java/engine/org/apache/derby/iapi/error/StandardException.java,702," public static SQLWarning newWarning(String messageId, Object a1) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,703,
java/engine/org/apache/derby/iapi/error/StandardException.java,704,  Object[] oa = new Object[] {a1};
java/engine/org/apache/derby/iapi/error/StandardException.java,705,
java/engine/org/apache/derby/iapi/error/StandardException.java,706,"  return newWarningCommon( messageId, oa );"
java/engine/org/apache/derby/iapi/error/StandardException.java,707, }
java/engine/org/apache/derby/iapi/error/StandardException.java,708,
java/engine/org/apache/derby/iapi/error/StandardException.java,709," public static SQLWarning newWarning(String messageId, Object a1, Object a2) {"
java/engine/org/apache/derby/iapi/error/StandardException.java,710,
java/engine/org/apache/derby/iapi/error/StandardException.java,711,"  Object[] oa = new Object[] {a1, a2};"
java/engine/org/apache/derby/iapi/error/StandardException.java,712,
java/engine/org/apache/derby/iapi/error/StandardException.java,713,"  return newWarningCommon( messageId, oa );"
java/engine/org/apache/derby/iapi/error/StandardException.java,714, }
java/engine/org/apache/derby/iapi/error/StandardException.java,715,
java/engine/org/apache/derby/iapi/error/StandardException.java,716," private static SQLWarning newWarningCommon( String messageId, Object[] oa )"
java/engine/org/apache/derby/vti/XmlVTI.java,24,import java.io.*;
java/engine/org/apache/derby/vti/XmlVTI.java,25,import java.lang.reflect.*;
java/engine/org/apache/derby/vti/XmlVTI.java,27,import java.sql.*;
java/engine/org/apache/derby/vti/XmlVTI.java,30,import javax.xml.parsers.*;
java/engine/org/apache/derby/vti/XmlVTI.java,31,import org.w3c.dom.*;
java/engine/org/apache/derby/vti/XmlVTI.java,36, * This VTI takes the following arguments:
java/engine/org/apache/derby/vti/XmlVTI.java,46, * Here is a sample declaration:
java/engine/org/apache/derby/vti/XmlVTI.java,116,"    public  XmlVTI( String xmlResourceName, String rowTag, String... childTags )"
java/engine/org/apache/derby/vti/XmlVTI.java,118,        super( childTags );
java/engine/org/apache/derby/vti/XmlVTI.java,126,    // ENTRY POINT (SQL FUNCTION)
java/engine/org/apache/derby/vti/XmlVTI.java,130,    /** This is the static method bound to the function */
java/engine/org/apache/derby/vti/XmlVTI.java,133,"        return new XmlVTI( xmlResourceName, rowTag, childTags );"
java/engine/org/apache/derby/vti/XmlVTI.java,206,     private    void    readRows() throws Exception
java/engine/org/apache/derby/vti/XmlVTI.java,228,     private    void    parseRow( int rowNumber ) throws Exception
java/engine/org/apache/derby/vti/XmlVTI.java,237,            // first look for an attribute by the column name
java/engine/org/apache/derby/vti/XmlVTI.java,238,            String      columnName = getColumnName( i + 1 );
java/engine/org/apache/derby/vti/XmlVTI.java,239,            String      contents = rawRow.getAttribute( columnName );
java/engine/org/apache/derby/vti/XmlVTI.java,241,"            // if there is not attribute by that name, then look for descendent elements by"
java/engine/org/apache/derby/vti/XmlVTI.java,242,            // that name. concatenate them all.
java/engine/org/apache/derby/vti/XmlVTI.java,243,"            if ( (contents == null) ||  """".equals( contents ) )"
java/engine/org/apache/derby/vti/XmlVTI.java,245,                NodeList    children = rawRow.getElementsByTagName( columnName );
java/engine/org/apache/derby/vti/XmlVTI.java,247,                if ( (children != null) && (children.getLength() > 0) )
java/engine/org/apache/derby/vti/XmlVTI.java,249,                    int                 childCount = children.getLength();
java/engine/org/apache/derby/vti/XmlVTI.java,250,                    StringBuffer    buffer = new StringBuffer();
java/engine/org/apache/derby/vti/XmlVTI.java,251,
java/engine/org/apache/derby/vti/XmlVTI.java,252,                    for ( int j = 0; j < childCount; j++ )
java/engine/org/apache/derby/vti/XmlVTI.java,253,                    {
java/engine/org/apache/derby/vti/XmlVTI.java,254,                        Element     child = (Element) children.item( j );
java/engine/org/apache/derby/vti/XmlVTI.java,255,                        // separate values with spaces.
java/engine/org/apache/derby/vti/XmlVTI.java,256,                        if (j != 0)
java/engine/org/apache/derby/vti/XmlVTI.java,257,"                            buffer.append("" "");"
java/engine/org/apache/derby/vti/XmlVTI.java,258,                        buffer.append( squeezeText( child ) );
java/engine/org/apache/derby/vti/XmlVTI.java,259,                    }
java/engine/org/apache/derby/vti/XmlVTI.java,260,                    contents = buffer.toString();
java/engine/org/apache/derby/vti/XmlVTI.java,263,
java/engine/org/apache/derby/vti/XmlVTI.java,264,            _currentRow[ i ] = contents;
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,123,        testInvalidTerritoryFormat(url);
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,133,"        testInvalidTerritoryFormat(""en_"");"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,134,"        testInvalidTerritoryFormat(""en_d"");"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,135,"        testInvalidTerritoryFormat(""en-US"");"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,139,    private void testInvalidTerritoryFormat(String territory) {
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,176,
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,123,"        String url = TestConfiguration.getCurrent().getJDBCUrl(""../extinout/fail1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,127,"        url = TestConfiguration.getCurrent().getJDBCUrl(""../extinout/fail1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,129,            Connection locConn = DriverManager.getConnection(url);
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,263,"            String url = TestConfiguration.getCurrent().getJDBCUrl(""../extinout/fail3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,265,            Connection locConn = DriverManager.getConnection(url);
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,141,     * Test valid message resolution for Locale
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,143,     *
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,145,    public void testMessageLocale()  throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,146,        // Test with unknown Locale. Should have all English messages
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,147,        LocaleTestSetup.setDefaultLocale(
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,148,"            new java.util.Locale(""rr"", ""TT""));"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,182,
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,183,
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,184,       // Set default Locale to German
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,185,"        LocaleTestSetup.setDefaultLocale(new java.util.Locale(""de"",""DE""));"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,190,"        url =  getReadWriteJDBCURL(""qqPPdb"");"
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,192,        locConn = DriverManager.getConnection(url);
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,193,        s = locConn.createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/i18n/UrlLocaleTest.java,209,        sqlw = s.getWarnings();
java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java,24,import java.util.Timer;
java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java,33,     * Returns a Timer object that can be used for adding TimerTasks
java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java,34,     * that cancel executing statements.
java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java,36,     * @return a Timer object for cancelling statements.
java/engine/org/apache/derby/iapi/services/timer/TimerFactory.java,38,    public Timer getCancellationTimer();
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,122,     * Implements the TimerFactory interface.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,123,     *
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,125,     *
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,126,     * @see TimerFactory
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,128,    public Timer getCancellationTimer()
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,53,import java.util.Timer;
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,187,            cancel();
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,212,            TimerFactory factory = Monitor.getMonitor().getTimerFactory();
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,213,            Timer timer = factory.getCancellationTimer();
java/engine/org/apache/derby/impl/sql/conn/GenericStatementContext.java,215,"            timer.schedule(cancelTask, timeoutMillis);"
java/engine/org/apache/derby/jdbc/XATransactionState.java,26,import java.util.Timer;
java/engine/org/apache/derby/jdbc/XATransactionState.java,123,
java/engine/org/apache/derby/jdbc/XATransactionState.java,320,    * Schedule a timeout task wich will rollback the global transaction
java/engine/org/apache/derby/jdbc/XATransactionState.java,332,            TimerFactory timerFactory = Monitor.getMonitor().getTimerFactory();
java/engine/org/apache/derby/jdbc/XATransactionState.java,333,            Timer timer = timerFactory.getCancellationTimer();
java/engine/org/apache/derby/jdbc/XATransactionState.java,335,"            timer.schedule(timeoutTask, timeoutMillis);"
java/engine/org/apache/derby/jdbc/XATransactionState.java,380,            timeoutTask.cancel();
java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java,46,
java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java,47,        // DERBY-5394: Let this test run as the last test - it eats up memory.
java/engine/org/apache/derby/impl/io/DirFile4.java,114,"        return new FileOutputStream( (File) this, append);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,386,"        final File db = new File(home, dbName);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,774,"                                                ""unexpected uid has access: "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,775,                                                princName);
java/engine/org/apache/derby/impl/sql/compile/OptimizerFactoryImpl.java,184,  return false;
java/engine/org/apache/derby/impl/sql/compile/OptimizerFactoryImpl.java,213,       numTablesInQuery);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,56, * This will be the Level 1 Optimizer.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,57, * RESOLVE - it's a level 0 optimizer right now.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,58, * Current State:
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,59, * o  No costing services
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,60, * o  We can only cost a derived table with a join once.
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,61, *
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,213,      int numTablesInQuery)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2616,  return 1;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,156,"        searchStrings.addElement(""Level2CostEstimateImpl: .*"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,227,"        subStrings.addElement(""Level2CostEstimateImpl: xxXXxxFILTERED-INFORMATIONxxXXxx"");"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,67,public class OptimizerImpl implements Optimizer
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,69, protected LanguageConnectionContext lcc;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,71, DataDictionary    dDictionary;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,73, int       numTablesInQuery;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,75, int       numOptimizables;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,82, protected JBitSet   assignedTableMap;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,83, protected OptimizableList optimizableList;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,84, OptimizablePredicateList predicateList;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,85, JBitSet      nonCorrelatedTableMap;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,87, protected int[]    proposedJoinOrder;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,88, protected int[]      bestJoinOrder;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,89, protected int    joinPosition;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,90, boolean      desiredJoinOrderFound;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,110, protected CostEstimateImpl currentCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,111, protected CostEstimateImpl currentSortAvoidanceCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,112, protected CostEstimateImpl bestCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,114, protected long    timeOptimizationStarted;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,115, protected long    currentTime;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,116, protected boolean   timeExceeded;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,123, protected RequiredRowOrdering requiredRowOrdering;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,127, protected CostEstimate sortCost;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,135, protected int maxMemoryPerTable;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,173, protected double timeLimit;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,177, CostEstimate finalCostEstimate;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,197," protected  OptimizerImpl(OptimizableList optimizableList,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2643," protected void updateBestPlanMaps(short action,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,2730, protected void addScopedPredicatesToList(PredicateList pList)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,129,     ((OptimizerImpl)leftOptimizer)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,130,      .optimizableList.getOptimizable(0);
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,156,     ((OptimizerImpl)rightOptimizer)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,157,      .optimizableList.getOptimizable(0);
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,750,     ((OptimizerImpl)leftOptimizer)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,751,      .optimizableList.getOptimizable(0);
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,781,     ((OptimizerImpl)rightOptimizer)
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,782,      .optimizableList.getOptimizable(0);
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,31,import java.io.PrintStream;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,39,import org.apache.derby.iapi.reference.Attribute;
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,43,import org.apache.derby.iapi.jdbc.JDBCBoot;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1383,        SQLException se = Util.getExceptionFactory().
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,1384,            getArgumentFerry(sqlException);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6449,        se = Util.getExceptionFactory().getArgumentFerry( se );
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,50,    /** Exception factory for the underlying connection. */
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,51,    private final ExceptionFactory exceptionFactory;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,52,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,71,        this.exceptionFactory =
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,72,                control.getRealConnection().getExceptionFactory();
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,508,        return exceptionFactory.getSQLException(
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,776,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,777,     * Return the exception factory for the underlying connection.
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,778,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,779,    public final ExceptionFactory getExceptionFactory() {
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,780,        return exceptionFactory;
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,781,    }
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java,782,
java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java,323,                throw getExceptionFactory().getSQLException(
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,585,            throw control.getExceptionFactory().getSQLException(
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java,599,        return control.getExceptionFactory().getSQLException(
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java,83,
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java,84,    /**
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java,85,     * Return the exception factory for the underlying connection.
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java,86,     * @return an exception factory instance
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java,87,     */
java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java,88,    public ExceptionFactory getExceptionFactory();
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,24,import java.sql.PreparedStatement;
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,113,    /**
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,114,     * Return an exception factory that could be used to generate
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,115,     * {@code SQLException}s raised by this connection.
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,116,     *
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,117,     * @return an exception factory instance
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,118,     */
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,119,    public ExceptionFactory getExceptionFactory();
java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java,120,
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,29,public interface ExceptionFactory {
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,32,"     * Unpack a SQL exception, looking for an EmbedSQLException which carries"
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,33,     * the Derby messageID and args which we will serialize across DRDA so
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,34,     * that the client can reconstitute a SQLException with appropriate text.
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,35,"     * If we are running JDBC 3, then we hope that the passed-in"
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,36,"     * exception is already an EmbedSQLException, which carries all the"
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,37,     * information we need.
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,38,     *
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,39,     * @param se the exception to unpack
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,40,     * @return the argument ferry for the exception
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,42,    SQLException getArgumentFerry(SQLException se);
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,56,"    SQLException getSQLException(String message, String messageId,"
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,57,"            SQLException next, int severity, Throwable cause, Object[] args);"
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,69,"    SQLException getSQLException(String messageId, SQLException next,"
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,70,"            Throwable cause, Object[] args);"
java/engine/org/apache/derby/iapi/jdbc/ExceptionFactory.java,71,
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,91,import org.apache.derby.iapi.jdbc.ExceptionFactory;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3187,    /** Get the exception factory for this connection. */
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3188,    public ExceptionFactory getExceptionFactory() {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3189,        return Util.getExceptionFactory();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3190,    }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3191,
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,27,
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,28,import java.sql.SQLException;
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,34,public class SQLExceptionFactory implements ExceptionFactory {
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,41,"            SQLException next, int severity, Throwable t, Object[] args) {"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,42,"        return new EmbedSQLException(message, messageId, next, severity,"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,43,"                t, args);"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,51,"            SQLException next, Throwable cause, Object[] args) {"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,58,"  * Unpack a SQL exception, looking for an EmbedSQLException which carries"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,59,  * the Derby messageID and args which we will serialize across DRDA so
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,60,  * that the client can reconstitute a SQLException with appropriate text.
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,61,"  * If we are running JDBC3 or JDBC2, then we hope that the passed-in"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,62,"  * exception is already an EmbedSQLException, which carries all the"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,63,  * information we need.
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,65, public SQLException getArgumentFerry(SQLException se)
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,66, {
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,67,  return StandardException.getArgumentFerry(se);
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,68, }
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,69,
java/engine/org/apache/derby/impl/jdbc/Util.java,73,
java/engine/org/apache/derby/impl/jdbc/Util.java,74,    private static SQLExceptionFactory exceptionFactory =
java/engine/org/apache/derby/impl/jdbc/Util.java,75,                                    new SQLExceptionFactory ();
java/engine/org/apache/derby/impl/jdbc/Util.java,76,
java/engine/org/apache/derby/impl/jdbc/Util.java,77,
java/engine/org/apache/derby/impl/jdbc/Util.java,146,        return exceptionFactory.getSQLException (
java/engine/org/apache/derby/impl/jdbc/Util.java,282, /* 3 arguments */
java/engine/org/apache/derby/impl/jdbc/Util.java,283," static SQLException newException(String messageID, Object a1,"
java/engine/org/apache/derby/impl/jdbc/Util.java,284,"   Object a2, Object a3) {"
java/engine/org/apache/derby/impl/jdbc/Util.java,285,"  return newEmbedSQLException(messageID, new Object[] {a1, a2, a3},"
java/engine/org/apache/derby/impl/jdbc/Util.java,286,          StandardException.getSeverityFromIdentifier(messageID));
java/engine/org/apache/derby/impl/jdbc/Util.java,287, }
java/engine/org/apache/derby/impl/jdbc/Util.java,288,
java/engine/org/apache/derby/impl/jdbc/Util.java,289,
java/engine/org/apache/derby/impl/jdbc/Util.java,290, public static SQLException generateCsSQLException(String error) {
java/engine/org/apache/derby/impl/jdbc/Util.java,295," public static SQLException generateCsSQLException(String error, Object arg1)     {"
java/engine/org/apache/derby/impl/jdbc/Util.java,296,"  return newEmbedSQLException(error,"
java/engine/org/apache/derby/impl/jdbc/Util.java,297,"   new Object[] {arg1},"
java/engine/org/apache/derby/impl/jdbc/Util.java,298,                StandardException.getSeverityFromIdentifier(error));
java/engine/org/apache/derby/impl/jdbc/Util.java,299, }
java/engine/org/apache/derby/impl/jdbc/Util.java,300,
java/engine/org/apache/derby/impl/jdbc/Util.java,301, public static SQLException generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/Util.java,302,"                             String error, Object arg1, Object arg2){"
java/engine/org/apache/derby/impl/jdbc/Util.java,303,"  return newEmbedSQLException(error,"
java/engine/org/apache/derby/impl/jdbc/Util.java,304,"   new Object[] {arg1, arg2},"
java/engine/org/apache/derby/impl/jdbc/Util.java,305,                StandardException.getSeverityFromIdentifier(error));
java/engine/org/apache/derby/impl/jdbc/Util.java,306, }
java/engine/org/apache/derby/impl/jdbc/Util.java,307,
java/engine/org/apache/derby/impl/jdbc/Util.java,308, public static SQLException generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/Util.java,309,"  String error, Object arg1, Object arg2, Object arg3) {"
java/engine/org/apache/derby/impl/jdbc/Util.java,310,
java/engine/org/apache/derby/impl/jdbc/Util.java,311,"  return newEmbedSQLException(error,"
java/engine/org/apache/derby/impl/jdbc/Util.java,312,"   new Object[] {arg1, arg2, arg3},"
java/engine/org/apache/derby/impl/jdbc/Util.java,313,                StandardException.getSeverityFromIdentifier(error));
java/engine/org/apache/derby/impl/jdbc/Util.java,314, }
java/engine/org/apache/derby/impl/jdbc/Util.java,315,
java/engine/org/apache/derby/impl/jdbc/Util.java,316,
java/engine/org/apache/derby/impl/jdbc/Util.java,325,        return exceptionFactory.getSQLException(
java/engine/org/apache/derby/impl/jdbc/Util.java,456,        IOException ioe = new IOException(cause.getMessage());
java/engine/org/apache/derby/impl/jdbc/Util.java,457,        ioe.initCause(cause);
java/engine/org/apache/derby/impl/jdbc/Util.java,458,        return ioe;
java/engine/org/apache/derby/impl/jdbc/Util.java,461,    /**
java/engine/org/apache/derby/impl/jdbc/Util.java,462,     * this method is called to replace the exception factory to be
java/engine/org/apache/derby/impl/jdbc/Util.java,463,     * used to generate the SQLException or the subclass
java/engine/org/apache/derby/impl/jdbc/Util.java,464,     */
java/engine/org/apache/derby/impl/jdbc/Util.java,465,
java/engine/org/apache/derby/impl/jdbc/Util.java,466,    public static void setExceptionFactory (SQLExceptionFactory factory) {
java/engine/org/apache/derby/impl/jdbc/Util.java,467,        exceptionFactory = factory;
java/engine/org/apache/derby/impl/jdbc/Util.java,468,    }
java/engine/org/apache/derby/impl/jdbc/Util.java,469,
java/engine/org/apache/derby/impl/jdbc/Util.java,470,    /**
java/engine/org/apache/derby/impl/jdbc/Util.java,471,     * Get the exception factory specific to the version of JDBC which
java/engine/org/apache/derby/impl/jdbc/Util.java,472,  * we are running.
java/engine/org/apache/derby/impl/jdbc/Util.java,473,     */
java/engine/org/apache/derby/impl/jdbc/Util.java,474, public static SQLExceptionFactory getExceptionFactory() { return exceptionFactory; }
java/engine/org/apache/derby/impl/jdbc/Util.java,475,
java/engine/org/apache/derby/jdbc/AutoloadedDriver40.java,27,import org.apache.derby.impl.jdbc.SQLExceptionFactory40;
java/engine/org/apache/derby/jdbc/AutoloadedDriver40.java,38,        Util.setExceptionFactory (new SQLExceptionFactory40 ());
java/engine/org/apache/derby/jdbc/Driver40.java,29,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/jdbc/Driver40.java,38,import org.apache.derby.impl.jdbc.SQLExceptionFactory40;
java/engine/org/apache/derby/jdbc/Driver40.java,137,    /**
java/engine/org/apache/derby/jdbc/Driver40.java,138,     * Overwriting the super class boot method to set exception factory
java/engine/org/apache/derby/jdbc/Driver40.java,139,     * @see InternalDriver#boot
java/engine/org/apache/derby/jdbc/Driver40.java,140,     */
java/engine/org/apache/derby/jdbc/Driver40.java,141,
java/engine/org/apache/derby/jdbc/Driver40.java,142," public void boot(boolean create, Properties properties)"
java/engine/org/apache/derby/jdbc/Driver40.java,143,          throws StandardException {
java/engine/org/apache/derby/jdbc/Driver40.java,144,        Util.setExceptionFactory (new SQLExceptionFactory40 ());
java/engine/org/apache/derby/jdbc/Driver40.java,145,"        super.boot (create, properties);"
java/engine/org/apache/derby/jdbc/Driver40.java,146,    }
java/engine/org/apache/derby/jdbc/Driver40.java,147,
java/engine/org/apache/derby/jdbc/XAStatementControl.java,29,import org.apache.derby.iapi.jdbc.ExceptionFactory;
java/engine/org/apache/derby/jdbc/XAStatementControl.java,244,
java/engine/org/apache/derby/jdbc/XAStatementControl.java,245,    /**
java/engine/org/apache/derby/jdbc/XAStatementControl.java,246,     * Return the exception factory for the underlying connection.
java/engine/org/apache/derby/jdbc/XAStatementControl.java,247,     */
java/engine/org/apache/derby/jdbc/XAStatementControl.java,248,    public ExceptionFactory getExceptionFactory() {
java/engine/org/apache/derby/jdbc/XAStatementControl.java,249,        return applicationConnection.getExceptionFactory();
java/engine/org/apache/derby/jdbc/XAStatementControl.java,250,    }
java/engine/org/apache/derby/iapi/error/StandardException.java,343,  * @see org.apache.derby.impl.jdbc.SQLExceptionFactory40
java/client/org/apache/derby/client/am/SqlException.java,161,"     *      using initCause().  On JDK 1.3, since initCause() does not exist,"
java/client/org/apache/derby/client/am/SqlException.java,162,"     *      a non-SQL exception can not be chained.  Instead, the exception class"
java/client/org/apache/derby/client/am/SqlException.java,163,     *      and message text is appended to the message for this exception.
java/client/org/apache/derby/client/am/SqlException.java,214,"    private SqlException(LogWriter logwriter,"
java/client/org/apache/derby/client/am/SqlException.java,215,"                         ClientMessageId msgid,"
java/client/org/apache/derby/client/am/SqlException.java,216,                         Object[] args)
java/client/org/apache/derby/client/am/SqlException.java,220,
java/client/org/apache/derby/client/am/SqlException.java,221,"    public SqlException (LogWriter logwriter, ClientMessageId msgid)"
java/client/org/apache/derby/client/am/SqlException.java,222,    {
java/client/org/apache/derby/client/am/SqlException.java,223,"        this(logwriter, msgid, (Object[])null);"
java/client/org/apache/derby/client/am/SqlException.java,224,    }
java/client/org/apache/derby/client/am/SqlException.java,225,
java/client/org/apache/derby/client/am/SqlException.java,226,"    public SqlException(LogWriter logwriter, ClientMessageId msgid, Object arg1)"
java/client/org/apache/derby/client/am/SqlException.java,227,    {
java/client/org/apache/derby/client/am/SqlException.java,228,"        this(logwriter, msgid, new Object[] { arg1 });"
java/client/org/apache/derby/client/am/SqlException.java,229,    }
java/client/org/apache/derby/client/am/SqlException.java,230,
java/client/org/apache/derby/client/am/SqlException.java,243,"    public SqlException(LogWriter logwriter,"
java/client/org/apache/derby/client/am/SqlException.java,244,"        ClientMessageId msgid, Object arg1, Object arg2)"
java/client/org/apache/derby/client/am/SqlException.java,245,    {
java/client/org/apache/derby/client/am/SqlException.java,246,"        this(logwriter, msgid, new Object[] { arg1, arg2 });"
java/client/org/apache/derby/client/am/SqlException.java,247,    }
java/client/org/apache/derby/client/am/SqlException.java,248,
java/client/org/apache/derby/client/am/SqlException.java,249,"    public SqlException(LogWriter logwriter,"
java/client/org/apache/derby/client/am/SqlException.java,250,"        ClientMessageId msgid, Object arg1, Object arg2, Object arg3)"
java/client/org/apache/derby/client/am/SqlException.java,251,    {
java/client/org/apache/derby/client/am/SqlException.java,252,"        this(logwriter, msgid, new Object[] { arg1, arg2, arg3 });"
java/client/org/apache/derby/client/am/SqlException.java,253,    }
java/client/org/apache/derby/client/am/SqlException.java,254,
java/client/org/apache/derby/client/am/SqlWarning.java,37,"    SqlWarning (LogWriter logwriter, ClientMessageId msgid)"
java/client/org/apache/derby/client/am/SqlWarning.java,39,"        super(logwriter, msgid);"
java/client/org/apache/derby/client/am/SqlWarning.java,40,    }
java/client/org/apache/derby/client/am/SqlWarning.java,41,
java/client/org/apache/derby/client/am/SqlWarning.java,42,"    SqlWarning(LogWriter logwriter, ClientMessageId msgid, Object arg1)"
java/client/org/apache/derby/client/am/SqlWarning.java,43,    {
java/client/org/apache/derby/client/am/SqlWarning.java,44,"        super(logwriter, msgid, arg1);"
java/client/org/apache/derby/client/am/SqlWarning.java,45,    }
java/client/org/apache/derby/client/am/SqlWarning.java,46,
java/client/org/apache/derby/client/am/SqlWarning.java,47,"    SqlWarning(LogWriter logwriter,"
java/client/org/apache/derby/client/am/SqlWarning.java,48,"        ClientMessageId msgid, Object arg1, Object arg2)"
java/client/org/apache/derby/client/am/SqlWarning.java,49,    {
java/client/org/apache/derby/client/am/SqlWarning.java,50,"        super(logwriter, msgid, arg1, arg2);"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,39, /**
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,40,  * Generates a SQLWarning instance based on the supplied messageId. It looks
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,41,"  * up the messageId to generate a localised warning message. Also, SQLState"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,42,  * is set correctly based on the messageId.
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,43,  *
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,44,  * @param messageId A Derby messageId as defined in{@link SQLState org.apache.derby.shared.common.reference.SQLState}.
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,45,  * @return Properly initialized SQLWarning instance.
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,46,  * @see org.apache.derby.shared.common.reference.SQLState
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,47,  */
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,48, public static SQLWarning newSQLWarning( String messageId )
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,49,    {
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,50,"  return newSQLWarning(messageId, new Object[] {} );"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,51, }
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,52,
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,53, /**
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,54,  * Generates a SQLWarning instance based on the supplied messageId and
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,55,  * argument. It looks up the messageId to generate a localised warning
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,56,"  * message. Also, SQLState is set correctly based on the messageId."
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,57,  *
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,58,  * @param messageId A Derby messageId as defined in {@link SQLState org.apache.derby.shared.common.reference.SQLState}.
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,59,  * @param arg1 An argument for the warning message
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,60,  * @return Properly initialized SQLWarning instance.
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,61,  * @see org.apache.derby.shared.common.reference.SQLState
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,62,  */
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,63," public static SQLWarning newSQLWarning( String messageId, Object arg1 )"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,64,    {
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,65,"        return newSQLWarning( messageId, new Object[] { arg1 } );"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,66, }
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,67,
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,68, /**
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,69,  * Generates a SQLWarning instance based on the supplied messageId and
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,70,  * arguments. It looks up the messageId to generate a localised warning
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,71,"  * message. Also, SQLState is set correctly based on the messageId."
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,72,  *
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,73,  * @param messageId
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,74,  *            A Derby messageId as defined in {@link SQLState org.apache.derby.shared.common.reference.SQLState}.
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,75,  * @param arg1 First argument for the warning message
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,76,  * @param arg2 Second argument for the warning message
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,77,  * @return Properly initialized SQLWarning instance.
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,78,  * @see org.apache.derby.shared.common.reference.SQLState
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,79,  */
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,80," public static SQLWarning newSQLWarning( String messageId, Object arg1, Object arg2 )"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,81,    {
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,82,"        return newSQLWarning( messageId, new Object[] { arg1, arg2 } );"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,83, }
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,84,
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,95," public static SQLWarning newSQLWarning( String messageId, Object[] args )"
java/engine/org/apache/derby/iapi/error/SQLWarningFactory.java,99,"             MessageService.getCompleteMessage( messageId, args ),"
java/engine/org/apache/derby/iapi/error/StandardException.java,554,  if (textMessage == null)
java/engine/org/apache/derby/iapi/error/StandardException.java,555,"   textMessage = MessageService.getCompleteMessage(getMessageId(), getArguments());"
java/engine/org/apache/derby/iapi/error/StandardException.java,605,"  String  message = MessageService.getCompleteMessage(messageId, oa);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,64, public static String getTextMessage(String messageID) {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,65,"  return getCompleteMessage(messageID, (Object[]) null);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,66, }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,67," public static String getTextMessage(String messageID, Object a1) {"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,68,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,69,"  return getCompleteMessage(messageID, new Object[]{a1});"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,70, }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,71," public static String getTextMessage(String messageID, Object a1, Object a2) {"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,72,"  return getCompleteMessage(messageID, new Object[]{a1, a2});"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,73, }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,74," public static String getTextMessage(String messageID, Object a1, Object a2, Object a3) {"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,75,"  return getCompleteMessage(messageID, new Object[]{a1, a2, a3});"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,76, }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,77," public static String getTextMessage(String messageID, Object a1, Object a2, Object a3, Object a4) {"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,78,"  return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4});"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,79, }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,80,"    public static String getTextMessage(String messageID, Object a1, Object a2, Object a3, Object a4, Object a5) {"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,81,"        return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4, a5});"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,82,    }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,83,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,94," public static String getCompleteMessage(String messageId, Object[] arguments) {"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,95,
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,688, public static void logTextMessage(String messageID) {
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,689,  getStream().println(MessageService.getTextMessage(messageID));
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,690, }
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,691," public static void logTextMessage(String messageID, Object a1) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,692,"  getStream().println(MessageService.getTextMessage(messageID, a1));"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,693, }
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,694," public static void logTextMessage(String messageID, Object a1, Object a2) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,695,"  getStream().println(MessageService.getTextMessage(messageID, a1, a2));"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,696, }
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,697," public static void logTextMessage(String messageID, Object a1, Object a2, Object a3) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,698,"  getStream().println(MessageService.getTextMessage(messageID, a1, a2, a3));"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,699, }
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,700," public static void logTextMessage(String messageID, Object a1, Object a2, Object a3, Object a4) {"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,701,"  getStream().println(MessageService.getTextMessage(messageID, a1, a2, a3, a4));"
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,218,"                        SQLState.BLOB_POSITION_TOO_LARGE, new Long(pos), eofe);"
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,404,"                                        SQLState.BLOB_POSITION_TOO_LARGE, eofe);"
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java,680,"                        new Long(len), eofe);"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,119,"        String message = MessageService.getCompleteMessage(messageId, args);"
java/engine/org/apache/derby/impl/jdbc/Util.java,140,        String message = MessageService.getCompleteMessage
java/engine/org/apache/derby/impl/jdbc/Util.java,141,"                                        (messageId, args);"
java/engine/org/apache/derby/impl/jdbc/Util.java,285, static SQLException generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/Util.java,286,"                    String error, Object arg1, Throwable t) {"
java/engine/org/apache/derby/impl/jdbc/Util.java,288,"   new Object[] {arg1},"
java/engine/org/apache/derby/impl/jdbc/Util.java,365,"        return generateCsSQLException(SQLState.SET_STREAM_FAILURE, msg, e);"
java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java,360,                Monitor.getStream().println(MessageService.getCompleteMessage(
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1946,                      MessageService.getCompleteMessage(
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,57,    /** Get a message with default locale - no arguments */
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,58,       public String getTextMessage(String messageID)
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,59,    {
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,60,"        return getCompleteMessage(messageID, (Object[]) null);"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,61,    }
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,62,
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,63,    /** Get a message with default locale - one argument */
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,64,"    public String getTextMessage(String messageID, Object a1)"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,65,    {
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,66,"        return getCompleteMessage(messageID, new Object[]{a1});"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,67,    }
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,68,
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,69,    /** Get a message with default locale - two arguments */
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,70,"    public String getTextMessage(String messageID, Object a1, Object a2)"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,71,    {
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,72,"        return getCompleteMessage(messageID, new Object[]{a1, a2});"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,73,    }
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,74,
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,75,    /** Get a message with default locale - three arguments */
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,76,"    public String getTextMessage(String messageID, Object a1, Object a2,"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,77,        Object a3)
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,78,    {
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,79,"        return getCompleteMessage(messageID, new Object[]{a1, a2, a3});"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,80,    }
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,81,
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,82,    /** Get a message with default locale - four arguments */
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,83,"    public String getTextMessage(String messageID, Object a1, Object a2,"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,84,"        Object a3, Object a4)"
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,85,    {
java/shared/org/apache/derby/shared/common/i18n/MessageUtil.java,86,"        return getCompleteMessage(messageID, new Object[]{a1, a2, a3, a4});"
java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java,97, public String tableName;
java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java,99, public String indexName;
java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java,85, public String tableName;
java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java,87, public String indexName;
java/engine/org/apache/derby/impl/sql/execute/LastIndexKeyResultSet.java,46, public String tableName;
java/engine/org/apache/derby/impl/sql/execute/LastIndexKeyResultSet.java,48, public String indexName;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,75, public String tableName;
java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java,77, public String indexName;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,342,            if (orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,343,                for (int i = 0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,344,"                    printLabel(depth, ""orderByLists["" + i + ""]:"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,345,                    orderByLists[i].treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2555,            if (orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2556,                for (int i = 0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2557,                    orderByLists[i] = (OrderByList) orderByLists[ i ].accept( v );
java/client/org/apache/derby/client/am/ClientResultSet.java,5518,"                        ""java.io.IOException"", ioe.getMessage(), ioe);"
java/client/org/apache/derby/client/am/ClientResultSet.java,5529,"                        ""java.io.IOException"", ioe.getMessage(), ioe);"
java/client/org/apache/derby/client/am/CrossConverters.java,709,"                    ClientTypes.getTypeString(targetDriverType),"
java/client/org/apache/derby/client/am/CrossConverters.java,710,                    e);
java/client/org/apache/derby/client/am/CrossConverters.java,854,"                    e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1112,"                    (SQLState.LANG_FORMAT_EXCEPTION), ""byte"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1169,"                    ""short"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1215,"                    ""int"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1251,"                    ""long"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1277,"                    ""float"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1293,"                    ""double"", e);"
java/client/org/apache/derby/client/am/CrossConverters.java,1308,"                    ""java.math.BigDecimal"", e);"
java/client/org/apache/derby/client/am/Cursor.java,397,"                ""double"", e);"
java/client/org/apache/derby/client/am/Cursor.java,412,"                targetType, e);"
java/client/org/apache/derby/client/am/Cursor.java,416,"                targetType, e);"
java/client/org/apache/derby/client/am/Cursor.java,602,"                 e.getMessage(),"
java/client/org/apache/derby/client/am/Cursor.java,603,                 e
java/client/org/apache/derby/client/am/Decimal.java,375,"                ""packed decimal"", new SqlCode(-405));"
java/client/org/apache/derby/client/am/Decimal.java,386,"                    b.toString(), ""packed decimal"", new SqlCode(-413));"
java/client/org/apache/derby/client/am/DisconnectException.java,37,
java/client/org/apache/derby/client/am/DisconnectException.java,38,"    private DisconnectException(Agent agent, ClientMessageId msgid,"
java/client/org/apache/derby/client/am/DisconnectException.java,39,"        Object[] args, SqlCode sqlcode) {"
java/client/org/apache/derby/client/am/DisconnectException.java,40,"        this(agent, msgid, args, sqlcode, (Throwable)null);"
java/client/org/apache/derby/client/am/DisconnectException.java,41,    }
java/client/org/apache/derby/client/am/DisconnectException.java,43,"    private DisconnectException(Agent agent, ClientMessageId msgid,"
java/client/org/apache/derby/client/am/DisconnectException.java,44,        Object[] args) {
java/client/org/apache/derby/client/am/DisconnectException.java,45,"        this(agent, msgid, args, SqlCode.disconnectError);"
java/client/org/apache/derby/client/am/DisconnectException.java,46,    }
java/client/org/apache/derby/client/am/DisconnectException.java,47,
java/client/org/apache/derby/client/am/DisconnectException.java,49,"        Object[] args, Throwable t) {"
java/client/org/apache/derby/client/am/DisconnectException.java,52,
java/client/org/apache/derby/client/am/DisconnectException.java,53,"    public DisconnectException(Agent agent, ClientMessageId msgid,"
java/client/org/apache/derby/client/am/DisconnectException.java,54,"        Object arg1, Throwable t) {"
java/client/org/apache/derby/client/am/DisconnectException.java,55,"        this(agent, msgid, new Object[] { arg1 }, t);"
java/client/org/apache/derby/client/am/DisconnectException.java,56,    }
java/client/org/apache/derby/client/am/DisconnectException.java,58,"    public DisconnectException(Agent agent, ClientMessageId msgid) {"
java/client/org/apache/derby/client/am/DisconnectException.java,59,"        this(agent, msgid, (Object[])null);"
java/client/org/apache/derby/client/am/DisconnectException.java,60,    }
java/client/org/apache/derby/client/am/DisconnectException.java,61,
java/client/org/apache/derby/client/am/DisconnectException.java,62,"    public DisconnectException(Agent agent, ClientMessageId msgid, Object arg1) {"
java/client/org/apache/derby/client/am/DisconnectException.java,63,"        this(agent, msgid, new Object[] { arg1 });"
java/client/org/apache/derby/client/am/DisconnectException.java,64,    }
java/client/org/apache/derby/client/am/DisconnectException.java,65,
java/client/org/apache/derby/client/am/DisconnectException.java,66,"    public DisconnectException(Agent agent, ClientMessageId msgid, Object arg1,"
java/client/org/apache/derby/client/am/DisconnectException.java,67,        Object arg2) {
java/client/org/apache/derby/client/am/DisconnectException.java,68,"        this(agent, msgid, new Object[] { arg1, arg2 });"
java/client/org/apache/derby/client/am/DisconnectException.java,74,"            e.getMessage(), e);"
java/client/org/apache/derby/client/am/Lob.java,253,"                            typeDesc,"
java/client/org/apache/derby/client/am/Lob.java,254,                            ioe
java/client/org/apache/derby/client/am/SqlException.java,184,    private SqlException(
java/client/org/apache/derby/client/am/SqlException.java,185,"        LogWriter logWriter,"
java/client/org/apache/derby/client/am/SqlException.java,186,"        ClientMessageId msgid,"
java/client/org/apache/derby/client/am/SqlException.java,187,"        Object[] args,"
java/client/org/apache/derby/client/am/SqlException.java,188,        SqlCode sqlcode) {
java/client/org/apache/derby/client/am/SqlException.java,189,
java/client/org/apache/derby/client/am/SqlException.java,192,
java/client/org/apache/derby/client/am/SqlException.java,193,"    SqlException(LogWriter logWriter, ClientMessageId msgid, Object arg1,"
java/client/org/apache/derby/client/am/SqlException.java,194,        SqlCode sqlcode) {
java/client/org/apache/derby/client/am/SqlException.java,195,"        this(logWriter, msgid, new Object[] {arg1}, sqlcode);"
java/client/org/apache/derby/client/am/SqlException.java,196,    }
java/client/org/apache/derby/client/am/SqlException.java,197,
java/client/org/apache/derby/client/am/SqlException.java,198,"    public SqlException(LogWriter logWriter, ClientMessageId msgid, Object arg1,"
java/client/org/apache/derby/client/am/SqlException.java,199,"        Object arg2, SqlCode sqlcode) {"
java/client/org/apache/derby/client/am/SqlException.java,200,"        this(logWriter, msgid, new Object[] {arg1, arg2}, sqlcode);"
java/client/org/apache/derby/client/am/SqlException.java,201,    }
java/client/org/apache/derby/client/am/SqlException.java,202,
java/client/org/apache/derby/client/am/SqlException.java,207,"    public SqlException (LogWriter logwriter,"
java/client/org/apache/derby/client/am/SqlException.java,208,"            ClientMessageId msgid, Throwable cause) {"
java/client/org/apache/derby/client/am/SqlException.java,209,"        this (logwriter, msgid, (Object[])null, cause);"
java/client/org/apache/derby/client/am/SqlException.java,219,"    public SqlException(LogWriter logwriter, ClientMessageId msgid,"
java/client/org/apache/derby/client/am/SqlException.java,220,"            Object arg1, Throwable cause)"
java/client/org/apache/derby/client/am/SqlException.java,221,    {
java/client/org/apache/derby/client/am/SqlException.java,222,"        this(logwriter, msgid, new Object[] { arg1 }, cause);"
java/client/org/apache/derby/client/am/SqlException.java,223,    }
java/client/org/apache/derby/client/am/SqlException.java,224,
java/client/org/apache/derby/client/am/SqlException.java,225,"    public SqlException(LogWriter logwriter, ClientMessageId msgid,"
java/client/org/apache/derby/client/am/SqlException.java,226,"        Object arg1, Object arg2, Throwable cause)"
java/client/org/apache/derby/client/am/SqlException.java,227,    {
java/client/org/apache/derby/client/am/SqlException.java,228,"        this(logwriter, msgid, new Object[] { arg1, arg2 }, cause);"
java/client/org/apache/derby/client/am/SqlException.java,229,    }
java/client/org/apache/derby/client/am/SqlException.java,230,
java/client/org/apache/derby/client/net/NetAgent.java,145,"                new Object[] { e.getException().getClass().getName(), server,"
java/client/org/apache/derby/client/net/NetAgent.java,146,"                    Integer.toString(port), e.getException().getMessage() },"
java/client/org/apache/derby/client/net/NetAgent.java,147,                e.getException());
java/client/org/apache/derby/client/net/NetAgent.java,164,"                e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,179,"                e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,260,"                e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,298,"                    e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,314,"                    e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,331,"                        e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetAgent.java,435,"                cause.getMessage(), cause));"
java/client/org/apache/derby/client/net/NetConnection.java,428,"                    e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetConnection.java,477,"                    e.getClass().getName(), e.getMessage(), e);"
java/client/org/apache/derby/client/net/NetConnectionReply.java,855,                msgutil_.getTextMessage(
java/client/org/apache/derby/client/net/NetConnectionReply.java,856,"                    MessageId.CONN_DRDA_CMDCHKRM),"
java/client/org/apache/derby/client/net/NetConnectionReply.java,857,"                new SqlException(agent_.logWriter_,"
java/client/org/apache/derby/client/net/NetConnectionReply.java,858,                                 netSqlca)));
java/client/org/apache/derby/client/net/NetStatementReply.java,1555,"                new ClientMessageId(SQLState.NET_LOB_DATA_TOO_LARGE_FOR_JVM), null, e));"
java/client/org/apache/derby/client/net/NetXAResource.java,882,"                getXAExceptionText(rc),"
java/client/org/apache/derby/client/net/NetXAResource.java,883,                SqlCode.queuedXAError);
java/client/org/apache/derby/client/net/Request.java,327,"                            parameterIndex, e.getMessage(), e));"
java/client/org/apache/derby/client/net/Request.java,368,"                    parameterIndex, e.getMessage(), e));"
java/client/org/apache/derby/client/net/Request.java,470,"                                 parameterIndex, e.getMessage(), e);"
java/client/org/apache/derby/client/net/Request.java,1385,"                 e.getMessage(),"
java/client/org/apache/derby/client/net/Request.java,1386,                 e
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,688,"                attributeString, e);"
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,1113,"                    constructUrl(), sqle).getSQLException();"
java/client/org/apache/derby/jdbc/ClientDriver.java,125,"                        url, e);"
java/client/org/apache/derby/jdbc/ClientDriver.java,395,"                new ClientMessageId(SQLState.MALFORMED_URL), url, e);"
java/client/org/apache/derby/jdbc/ClientDriver.java,409,"                new ClientMessageId(SQLState.MALFORMED_URL), url, e);"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3499,        String locMsg = null;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3503,            String [] argMsg = new String[args.length];
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3511,            switch (args.length)
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3512,            {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3513,                case 1:
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3514,"                    locMsg = localLangUtil.getTextMessage(msgProp, argMsg[0]);"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3515,                    break;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3516,                case 2:
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3517,"                    locMsg = localLangUtil.getTextMessage(msgProp, argMsg[0], argMsg[1]);"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3518,                    break;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3519,                case 3:
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3520,"                    locMsg = localLangUtil.getTextMessage(msgProp, argMsg[0], argMsg[1], argMsg[2]);"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3521,                    break;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3522,                case 4:
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3523,"                    locMsg = localLangUtil.getTextMessage(msgProp, argMsg[0], argMsg[1], argMsg[2], argMsg[3]);"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3524,                    break;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3525,                default:
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3526,                    //shouldn't get here
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3527,            }
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3529,        else
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3530,            locMsg = localLangUtil.getTextMessage(msgProp);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,3531,        return locMsg;
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,272, public String getTextMessage(String key ) {
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,273,"        return getTextMessage(key, new Object[0]);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,274, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,275," public String getTextMessage(String key, Object o){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,276,   Object [] att=new Object[] {o};
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,277,"   return getTextMessage(key,att);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,278, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,279," public String getTextMessage(String key, Object o1, Object o2){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,280,"   Object [] att=new Object[] {o1,o2};"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,281,"   return getTextMessage(key,att);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,282, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,283," public String getTextMessage(String key, Object o1, Object o2, Object o3){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,284,"   Object [] att=new Object[] {o1,o2,o3};"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,285,"   return getTextMessage(key,att);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,286, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,287," public String getTextMessage(String key, Object o1, Object o2, Object o3, Object o4){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,288,"   Object [] att=new Object[] {o1,o2,o3,o4};"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,289,"   return getTextMessage(key,att);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,290, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,309," public String getTextMessage(String key, Object [] objectArr) {"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,482, public static String getMessage(String key){
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,483,  return getInstance().getTextMessage(key);
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,484, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,485," public static String getMessage(String key, Object o1){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,486,"  return getInstance().getTextMessage(key,o1);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,487, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,488," public static String getMessage(String key, Object o1, Object o2){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,489,"  return getInstance().getTextMessage(key,o1,o2);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,490, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,491," public static String getMessage(String key, Object o1, Object o2, Object o3){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,492,"  return getInstance().getTextMessage(key,o1,o2,o3);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,493, }
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,494," public static String getMessage(String key, Object o1, Object o2, Object o3, Object o4){"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,495,"  return getInstance().getTextMessage(key,o1,o2,o3,o4);"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,496, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1082, public static String getTextMessage(String msgId) {
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1083,"  return getCompleteMessage(msgId, new Object[0]);"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1084, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1085," public static String getTextMessage(String msgId, Object a1) {"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1086,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1087,"  return getCompleteMessage(msgId, new Object[] {a1});"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1088, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1089," public static String getTextMessage(String msgId, Object a1, Object a2) {"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1090,"  return getCompleteMessage(msgId, new Object[] {a1, a2});"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1091, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1092," public static String getTextMessage(String msgId, Object a1, Object a2, Object a3) {"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1093,"  return getCompleteMessage(msgId, new Object[] {a1, a2, a3});"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1094, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1095," public static String getTextMessage(String msgId, Object a1, Object a2, Object a3, Object a4) {"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1096,"  return getCompleteMessage(msgId, new Object[] {a1, a2, a3, a4});"
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1097, }
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1098,
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1099, /**
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1100,  */
java/tools/org/apache/derby/impl/tools/sysinfo/Main.java,1101," public static String getCompleteMessage(String msgId, Object[] arguments) {"
java/tools/org/apache/derby/tools/SignatureChecker.java,525,     * Format a localizable message with 0 args.
java/tools/org/apache/derby/tools/SignatureChecker.java,527,    private static  String  formatMessage( String key )
java/tools/org/apache/derby/tools/SignatureChecker.java,529,        return getMessageFormatter().getTextMessage( key );
java/tools/org/apache/derby/tools/SignatureChecker.java,530,    }
java/tools/org/apache/derby/tools/SignatureChecker.java,531,
java/tools/org/apache/derby/tools/SignatureChecker.java,532,    /**
java/tools/org/apache/derby/tools/SignatureChecker.java,533,     * Format a localizable message with 1 arg.
java/tools/org/apache/derby/tools/SignatureChecker.java,534,     */
java/tools/org/apache/derby/tools/SignatureChecker.java,535,"    private static  String  formatMessage( String key, String arg0 )"
java/tools/org/apache/derby/tools/SignatureChecker.java,536,    {
java/tools/org/apache/derby/tools/SignatureChecker.java,537,"        return getMessageFormatter().getTextMessage( key, arg0 );"
java/tools/org/apache/derby/tools/SignatureChecker.java,538,    }
java/tools/org/apache/derby/tools/SignatureChecker.java,539,
java/tools/org/apache/derby/tools/SignatureChecker.java,540,    /**
java/tools/org/apache/derby/tools/SignatureChecker.java,541,     * Format a localizable message with 2 args.
java/tools/org/apache/derby/tools/SignatureChecker.java,542,     */
java/tools/org/apache/derby/tools/SignatureChecker.java,543,"    private static  String  formatMessage( String key, String arg0, String arg1 )"
java/tools/org/apache/derby/tools/SignatureChecker.java,544,    {
java/tools/org/apache/derby/tools/SignatureChecker.java,545,"        return getMessageFormatter().getTextMessage( key, arg0, arg1 );"
java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java,359,   isOpen = false;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,41,import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,222,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,223,"        Test    clientServer = new TestSuite( LoginTimeoutTest.class, ""client/server LoginTimeoutTest"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,224,        clientServer = TestConfiguration.singleUseDatabaseDecorator( clientServer );
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,225,"        clientServer = new JDBCClientSetup( clientServer, JDBCClient.DERBYNETCLIENT );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,226,"        clientServer = new NetworkServerTestSetup( clientServer, systemPropertiesArray(), new String[]{}, true );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,227,        suite.addTest( clientServer );
java/client/org/apache/derby/client/am/LogWriter.java,304,"    public void traceExit(Object instance, String methodName, int returnValue) {"
java/client/org/apache/derby/client/am/LogWriter.java,305,"        traceExit(instance, methodName, String.valueOf(returnValue));"
java/client/org/apache/derby/client/am/LogWriter.java,306,    }
java/client/org/apache/derby/client/am/LogWriter.java,307,
java/client/org/apache/derby/client/am/LogWriter.java,308,"    public void traceExit(Object instance, String methodName, boolean returnValue) {"
java/client/org/apache/derby/client/am/LogWriter.java,309,"        traceExit(instance, methodName, String.valueOf(returnValue));"
java/client/org/apache/derby/client/am/LogWriter.java,310,    }
java/client/org/apache/derby/client/am/LogWriter.java,311,
java/client/org/apache/derby/client/am/LogWriter.java,312,"    void traceExit(Object instance, String methodName, long returnValue) {"
java/client/org/apache/derby/client/am/LogWriter.java,313,"        traceExit(instance, methodName, String.valueOf(returnValue));"
java/client/org/apache/derby/client/am/LogWriter.java,314,    }
java/client/org/apache/derby/client/am/LogWriter.java,316,"    void traceExit(Object instance, String methodName, float returnValue) {"
java/client/org/apache/derby/client/am/LogWriter.java,317,"        traceExit(instance, methodName, String.valueOf(returnValue));"
java/client/org/apache/derby/client/am/LogWriter.java,320,"    void traceExit(Object instance, String methodName, double returnValue) {"
java/client/org/apache/derby/client/am/LogWriter.java,321,"        traceExit(instance, methodName, String.valueOf(returnValue));"
java/client/org/apache/derby/client/am/LogWriter.java,324,    // --------------------------- method entry tracing --------------------------
java/client/org/apache/derby/client/am/LogWriter.java,325,
java/client/org/apache/derby/client/am/LogWriter.java,326,"    private void traceEntryAllArgs(Object instance, String methodName, String argList) {"
java/client/org/apache/derby/client/am/LogWriter.java,332,"            traceExternalMethod(instance, className, methodName);"
java/client/org/apache/derby/client/am/LogWriter.java,333,"            printWriter_.println("" "" + argList + "" called"");"
java/client/org/apache/derby/client/am/LogWriter.java,338,"    private void traceDeprecatedEntryAllArgs(Object instance, String methodName, String argList) {"
java/client/org/apache/derby/client/am/LogWriter.java,339,        String className = getClassNameOfInstanceIfTraced(instance);
java/client/org/apache/derby/client/am/LogWriter.java,340,        if (className == null) {
java/client/org/apache/derby/client/am/LogWriter.java,341,            return;
java/client/org/apache/derby/client/am/LogWriter.java,342,        }
java/client/org/apache/derby/client/am/LogWriter.java,343,        synchronized (printWriter_) {
java/client/org/apache/derby/client/am/LogWriter.java,344,"            traceExternalDeprecatedMethod(instance, className, methodName);"
java/client/org/apache/derby/client/am/LogWriter.java,345,"            printWriter_.println("" "" + argList + "" called"");"
java/client/org/apache/derby/client/am/LogWriter.java,346,            printWriter_.flush();
java/client/org/apache/derby/client/am/LogWriter.java,348,    }
java/client/org/apache/derby/client/am/LogWriter.java,349,
java/client/org/apache/derby/client/am/LogWriter.java,350,    // ---------------------- trace entry of methods w/ no args ------------------
java/client/org/apache/derby/client/am/LogWriter.java,351,
java/client/org/apache/derby/client/am/LogWriter.java,352,"    public void traceEntry(Object instance, String methodName) {"
java/client/org/apache/derby/client/am/LogWriter.java,353,"        traceEntryAllArgs(instance, methodName, ""()"");"
java/client/org/apache/derby/client/am/LogWriter.java,354,    }
java/client/org/apache/derby/client/am/LogWriter.java,355,
java/client/org/apache/derby/client/am/LogWriter.java,356,    // ---------------------- trace entry of methods w/ 1 arg --------------------
java/client/org/apache/derby/client/am/LogWriter.java,357,
java/client/org/apache/derby/client/am/LogWriter.java,358,"    public void traceEntry(Object instance, String methodName, Object argument) {"
java/client/org/apache/derby/client/am/LogWriter.java,359,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,360,"                ""("" + argument + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,361,    }
java/client/org/apache/derby/client/am/LogWriter.java,362,
java/client/org/apache/derby/client/am/LogWriter.java,363,"    void traceEntry(Object instance, String methodName, boolean argument) {"
java/client/org/apache/derby/client/am/LogWriter.java,364,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,365,"                ""("" + argument + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,366,    }
java/client/org/apache/derby/client/am/LogWriter.java,367,
java/client/org/apache/derby/client/am/LogWriter.java,368,"    public void traceEntry(Object instance, String methodName, int argument) {"
java/client/org/apache/derby/client/am/LogWriter.java,369,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,370,"                ""("" + argument + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,371,    }
java/client/org/apache/derby/client/am/LogWriter.java,372,
java/client/org/apache/derby/client/am/LogWriter.java,373,    void traceDeprecatedEntry(
java/client/org/apache/derby/client/am/LogWriter.java,374,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,375,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,376,            int argument) {
java/client/org/apache/derby/client/am/LogWriter.java,377,
java/client/org/apache/derby/client/am/LogWriter.java,378,"        traceDeprecatedEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,379,"                ""("" + argument + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,380,    }
java/client/org/apache/derby/client/am/LogWriter.java,381,
java/client/org/apache/derby/client/am/LogWriter.java,382,    void traceDeprecatedEntry(
java/client/org/apache/derby/client/am/LogWriter.java,383,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,384,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,385,            Object argument) {
java/client/org/apache/derby/client/am/LogWriter.java,386,
java/client/org/apache/derby/client/am/LogWriter.java,387,"        traceDeprecatedEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,388,"                ""("" + argument + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,389,    }
java/client/org/apache/derby/client/am/LogWriter.java,390,
java/client/org/apache/derby/client/am/LogWriter.java,391,    // ---------------------- trace entry of methods w/ 2 args -------------------
java/client/org/apache/derby/client/am/LogWriter.java,392,
java/client/org/apache/derby/client/am/LogWriter.java,393,"    public void traceEntry(Object instance, String methodName, Object arg1, Object arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,394,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,395,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,396,    }
java/client/org/apache/derby/client/am/LogWriter.java,397,
java/client/org/apache/derby/client/am/LogWriter.java,398,"    void traceEntry(Object instance, String methodName, int arg1, Object arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,399,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,400,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,401,    }
java/client/org/apache/derby/client/am/LogWriter.java,402,
java/client/org/apache/derby/client/am/LogWriter.java,403,"    void traceEntry(Object instance, String methodName, int arg1, byte[] arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,404,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,405,"                ""("" + arg1 + "", "" + Utils.getStringFromBytes(arg2) + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,406,    }
java/client/org/apache/derby/client/am/LogWriter.java,407,
java/client/org/apache/derby/client/am/LogWriter.java,408,    void traceDeprecatedEntry(
java/client/org/apache/derby/client/am/LogWriter.java,409,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,410,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,411,"            int arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,412,            int arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,413,
java/client/org/apache/derby/client/am/LogWriter.java,414,"        traceDeprecatedEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,415,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,416,    }
java/client/org/apache/derby/client/am/LogWriter.java,417,
java/client/org/apache/derby/client/am/LogWriter.java,418,    void traceDeprecatedEntry(
java/client/org/apache/derby/client/am/LogWriter.java,419,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,420,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,421,"            Object arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,422,            int arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,423,
java/client/org/apache/derby/client/am/LogWriter.java,424,"        traceDeprecatedEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,425,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,426,    }
java/client/org/apache/derby/client/am/LogWriter.java,427,
java/client/org/apache/derby/client/am/LogWriter.java,428,    void traceEntry(
java/client/org/apache/derby/client/am/LogWriter.java,429,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,430,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,431,"            int arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,432,            boolean arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,433,
java/client/org/apache/derby/client/am/LogWriter.java,434,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,435,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,436,    }
java/client/org/apache/derby/client/am/LogWriter.java,437,
java/client/org/apache/derby/client/am/LogWriter.java,438,"    void traceEntry(Object instance, String methodName, int arg1, byte arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,439,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,440,"                ""("" + arg1 + "", 0x"" + Integer.toHexString(arg2 & 0xff) + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,441,    }
java/client/org/apache/derby/client/am/LogWriter.java,442,
java/client/org/apache/derby/client/am/LogWriter.java,443,"    void traceEntry(Object instance, String methodName, int arg1, short arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,444,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,445,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,446,    }
java/client/org/apache/derby/client/am/LogWriter.java,447,
java/client/org/apache/derby/client/am/LogWriter.java,448,"    void traceEntry(Object instance, String methodName, int arg1, int arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,449,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,450,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,451,    }
java/client/org/apache/derby/client/am/LogWriter.java,452,
java/client/org/apache/derby/client/am/LogWriter.java,453,"    void traceEntry(Object instance, String methodName, int arg1, long arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,454,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,455,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,456,    }
java/client/org/apache/derby/client/am/LogWriter.java,457,
java/client/org/apache/derby/client/am/LogWriter.java,458,"    void traceEntry(Object instance, String methodName, int arg1, float arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,459,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,460,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,461,    }
java/client/org/apache/derby/client/am/LogWriter.java,462,
java/client/org/apache/derby/client/am/LogWriter.java,463,"    void traceEntry(Object instance, String methodName, int arg1, double arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,464,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,465,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,466,    }
java/client/org/apache/derby/client/am/LogWriter.java,467,
java/client/org/apache/derby/client/am/LogWriter.java,468,    public void traceEntry(
java/client/org/apache/derby/client/am/LogWriter.java,469,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,470,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,471,"            Object arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,472,            boolean arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,473,
java/client/org/apache/derby/client/am/LogWriter.java,474,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,475,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,476,    }
java/client/org/apache/derby/client/am/LogWriter.java,477,
java/client/org/apache/derby/client/am/LogWriter.java,478,    void traceEntry(
java/client/org/apache/derby/client/am/LogWriter.java,479,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,480,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,481,"            Object arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,482,            byte arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,483,
java/client/org/apache/derby/client/am/LogWriter.java,484,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,485,"                ""("" + arg1 + "", 0x"" + Integer.toHexString(arg2 & 0xff) + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,486,    }
java/client/org/apache/derby/client/am/LogWriter.java,487,
java/client/org/apache/derby/client/am/LogWriter.java,488,    void traceEntry(
java/client/org/apache/derby/client/am/LogWriter.java,489,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,490,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,491,"            Object arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,492,            short arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,493,
java/client/org/apache/derby/client/am/LogWriter.java,494,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,495,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,496,    }
java/client/org/apache/derby/client/am/LogWriter.java,497,
java/client/org/apache/derby/client/am/LogWriter.java,498,"    public void traceEntry(Object instance, String methodName, Object arg1, int arg2) {"
java/client/org/apache/derby/client/am/LogWriter.java,499,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,500,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,501,    }
java/client/org/apache/derby/client/am/LogWriter.java,502,
java/client/org/apache/derby/client/am/LogWriter.java,503,    void traceEntry(
java/client/org/apache/derby/client/am/LogWriter.java,504,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,505,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,506,"            Object arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,507,            long arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,508,
java/client/org/apache/derby/client/am/LogWriter.java,509,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,510,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,511,    }
java/client/org/apache/derby/client/am/LogWriter.java,512,
java/client/org/apache/derby/client/am/LogWriter.java,513,    void traceEntry(
java/client/org/apache/derby/client/am/LogWriter.java,514,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,515,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,516,"            Object arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,517,            float arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,518,
java/client/org/apache/derby/client/am/LogWriter.java,519,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,520,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,521,    }
java/client/org/apache/derby/client/am/LogWriter.java,522,
java/client/org/apache/derby/client/am/LogWriter.java,523,    void traceEntry(
java/client/org/apache/derby/client/am/LogWriter.java,524,"            Object instance,"
java/client/org/apache/derby/client/am/LogWriter.java,525,"            String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,526,"            Object arg1,"
java/client/org/apache/derby/client/am/LogWriter.java,527,            double arg2) {
java/client/org/apache/derby/client/am/LogWriter.java,528,
java/client/org/apache/derby/client/am/LogWriter.java,529,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,530,"                ""("" + arg1 + "", "" + arg2 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,531,    }
java/client/org/apache/derby/client/am/LogWriter.java,532,
java/client/org/apache/derby/client/am/LogWriter.java,533,    // ---------------------- trace entry of methods w/ 3 args -------------------
java/client/org/apache/derby/client/am/LogWriter.java,534,
java/client/org/apache/derby/client/am/LogWriter.java,535,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,536,"                           Object arg1, Object arg2, Object arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,537,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,538,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,539,    }
java/client/org/apache/derby/client/am/LogWriter.java,540,
java/client/org/apache/derby/client/am/LogWriter.java,541,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,542,"                           int arg1, Object arg2, Object arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,543,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,544,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,545,    }
java/client/org/apache/derby/client/am/LogWriter.java,546,
java/client/org/apache/derby/client/am/LogWriter.java,547,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,548,"                           Object arg1, Object arg2, int arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,549,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,550,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,551,    }
java/client/org/apache/derby/client/am/LogWriter.java,552,
java/client/org/apache/derby/client/am/LogWriter.java,553,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,554,"                           int arg1, Object arg2, int arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,555,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,556,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,557,    }
java/client/org/apache/derby/client/am/LogWriter.java,558,
java/client/org/apache/derby/client/am/LogWriter.java,559,"    void traceDeprecatedEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,560,"                                     int arg1, Object arg2, int arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,561,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,562,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,563,    }
java/client/org/apache/derby/client/am/LogWriter.java,564,
java/client/org/apache/derby/client/am/LogWriter.java,565,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,566,"                           int arg1, int arg2, Object arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,567,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,568,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,569,    }
java/client/org/apache/derby/client/am/LogWriter.java,570,
java/client/org/apache/derby/client/am/LogWriter.java,571,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,572,"                           int arg1, int arg2, int arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,573,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,574,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,575,    }
java/client/org/apache/derby/client/am/LogWriter.java,576,
java/client/org/apache/derby/client/am/LogWriter.java,577,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,578,"                           Object arg1, int arg2, int arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,579,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,580,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,581,    }
java/client/org/apache/derby/client/am/LogWriter.java,582,
java/client/org/apache/derby/client/am/LogWriter.java,583,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,584,"                           Object arg1, int arg2, Object arg3) {"
java/client/org/apache/derby/client/am/LogWriter.java,585,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,586,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,587,    }
java/client/org/apache/derby/client/am/LogWriter.java,588,
java/client/org/apache/derby/client/am/LogWriter.java,589,    // ---------------------- trace entry of methods w/ 4 args -------------------
java/client/org/apache/derby/client/am/LogWriter.java,590,
java/client/org/apache/derby/client/am/LogWriter.java,591,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,592,"                           Object arg1, Object arg2, Object arg3, Object arg4) {"
java/client/org/apache/derby/client/am/LogWriter.java,593,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,594,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "", "" + arg4 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,595,    }
java/client/org/apache/derby/client/am/LogWriter.java,596,
java/client/org/apache/derby/client/am/LogWriter.java,597,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,598,"                           int arg1, Object arg2, int arg3, int arg4) {"
java/client/org/apache/derby/client/am/LogWriter.java,599,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,600,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "", "" + arg4 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,601,    }
java/client/org/apache/derby/client/am/LogWriter.java,602,
java/client/org/apache/derby/client/am/LogWriter.java,603,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,604,"                           Object arg1, int arg2, int arg3, int arg4) {"
java/client/org/apache/derby/client/am/LogWriter.java,605,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,606,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "", "" + arg4 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,607,    }
java/client/org/apache/derby/client/am/LogWriter.java,608,
java/client/org/apache/derby/client/am/LogWriter.java,609,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,610,"                           Object arg1, Object arg2, int arg3, int arg4) {"
java/client/org/apache/derby/client/am/LogWriter.java,611,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,612,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "", "" + arg4 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,613,    }
java/client/org/apache/derby/client/am/LogWriter.java,614,
java/client/org/apache/derby/client/am/LogWriter.java,615,    // ---------------------- trace entry of methods w/ 5 args -------------------
java/client/org/apache/derby/client/am/LogWriter.java,616,
java/client/org/apache/derby/client/am/LogWriter.java,617,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,618,"                           Object arg1, Object arg2, Object arg3, int arg4, boolean arg5) {"
java/client/org/apache/derby/client/am/LogWriter.java,619,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,620,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "", "" + arg4 + "", "" + arg5 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,621,    }
java/client/org/apache/derby/client/am/LogWriter.java,622,
java/client/org/apache/derby/client/am/LogWriter.java,623,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,624,"                           Object arg1, Object arg2, Object arg3, boolean arg4, boolean arg5) {"
java/client/org/apache/derby/client/am/LogWriter.java,625,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,626,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "", "" + arg4 + "", "" + arg5 + "")"");"
java/client/org/apache/derby/client/am/LogWriter.java,627,    }
java/client/org/apache/derby/client/am/LogWriter.java,628,
java/client/org/apache/derby/client/am/LogWriter.java,629,    // ---------------------- trace entry of methods w/ 6 args -------------------
java/client/org/apache/derby/client/am/LogWriter.java,631,"    void traceEntry(Object instance, String methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,632,"                           Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6) {"
java/client/org/apache/derby/client/am/LogWriter.java,633,"        traceEntryAllArgs(instance, methodName,"
java/client/org/apache/derby/client/am/LogWriter.java,634,"                ""("" + arg1 + "", "" + arg2 + "", "" + arg3 + "", "" + arg4 + "", "" + arg5 + "", "" + arg6 + "")"");"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,148, SQLException newSQLException(String messageId) {
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,149,  return localConn.newSQLException(messageId);
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,150, }
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,151," SQLException newSQLException(String messageId, Object arg1) {"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,152,"  return localConn.newSQLException(messageId, arg1);"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,153, }
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,154," SQLException newSQLException(String messageId, Object arg1, Object arg2) {"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,155,"  return localConn.newSQLException(messageId, arg1, arg2);"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,156, }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,140,"        Util.generateCsSQLException(SQLState.LOGIN_FAILED, ""java.lang.OutOfMemoryError"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2314,"            throw Util.generateCsSQLException(SQLState.INVALID_API_PARAMETER,map,""map"","
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2315,"                                              ""java.sql.Connection.setTypeMap"");"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2707,            throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2711,            throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2715,            throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3153,    throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3154,"                  SQLState.UNIMPLEMENTED_ISOLATION_LEVEL, new Integer(level));"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3186, protected static SQLException newSQLException(String messageId) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3187,  return Util.generateCsSQLException(messageId);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3188, }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3189," protected static SQLException newSQLException(String messageId, Object arg1) {"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3190,"  return Util.generateCsSQLException(messageId, arg1);"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3191, }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3192," protected static SQLException newSQLException(String messageId, Object arg1, Object arg2) {"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3193,"  return Util.generateCsSQLException(messageId, arg1, arg2);"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3194, }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3195," protected static SQLException newSQLException(String messageId, Object arg1, Object arg2, Object arg3) {"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3196,"  return Util.generateCsSQLException(messageId, arg1, arg2, arg3);"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3197, }
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3619,            throw Util.generateCsSQLException(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3743,"            throw Util.generateCsSQLException(SQLState.INVALID_API_PARAMETER,"
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3744,"                                              new Integer(timeout), ""timeout"","
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3745,"                                              ""java.sql.Connection.isValid"");"
java/engine/org/apache/derby/impl/sql/compile/CoalesceFunctionNode.java,182,    break;
java/demo/workingwithderby/WwdEmbedded.java,146,            errorPrint(e);
java/demo/workingwithderby/WwdEmbedded.java,150,     //   ## DERBY EXCEPTION REPORTING CLASSES  ##
java/demo/workingwithderby/WwdEmbedded.java,151,    /***     Exception reporting methods
java/demo/workingwithderby/WwdEmbedded.java,152,    **      with special handling of SQLExceptions
java/demo/workingwithderby/WwdEmbedded.java,153,    ***/
java/demo/workingwithderby/WwdEmbedded.java,154,      static void errorPrint(Throwable e) {
java/demo/workingwithderby/WwdEmbedded.java,155,         if (e instanceof SQLException)
java/demo/workingwithderby/WwdEmbedded.java,156,            SQLExceptionPrint((SQLException)e);
java/demo/workingwithderby/WwdEmbedded.java,157,         else {
java/demo/workingwithderby/WwdEmbedded.java,158,"            System.out.println(""A non SQL error occured."");"
java/demo/workingwithderby/WwdEmbedded.java,159,            e.printStackTrace();
java/demo/workingwithderby/WwdEmbedded.java,160,         }
java/demo/workingwithderby/WwdEmbedded.java,161,      }  // END errorPrint
java/demo/workingwithderby/WwdEmbedded.java,162,
java/demo/workingwithderby/WwdEmbedded.java,163,    //  Iterates through a stack of SQLExceptions
java/demo/workingwithderby/WwdEmbedded.java,164,      static void SQLExceptionPrint(SQLException sqle) {
java/demo/workingwithderby/WwdEmbedded.java,165,         while (sqle != null) {
java/demo/workingwithderby/WwdEmbedded.java,166,"            System.out.println(""\n---SQLException Caught---\n"");"
java/demo/workingwithderby/WwdEmbedded.java,167,"            System.out.println(""SQLState:   "" + (sqle).getSQLState());"
java/demo/workingwithderby/WwdEmbedded.java,168,"            System.out.println(""Severity: "" + (sqle).getErrorCode());"
java/demo/workingwithderby/WwdEmbedded.java,169,"            System.out.println(""Message:  "" + (sqle).getMessage());"
java/demo/workingwithderby/WwdEmbedded.java,170,            sqle.printStackTrace();
java/demo/workingwithderby/WwdEmbedded.java,171,            sqle = sqle.getNextException();
java/demo/workingwithderby/WwdEmbedded.java,172,         }
java/demo/workingwithderby/WwdEmbedded.java,173,   }  //  END SQLExceptionPrint
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,24,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,32,import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,33,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,34,import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,35,import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,36,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,37,import org.apache.derby.iapi.store.access.ConglomerateController;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,39,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,40,import org.apache.derby.iapi.services.property.PropertyUtil;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,41,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,42,import java.util.Properties;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,46,  * PropertyInfo is a class with static methods that retrieve the properties
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,47,  * associated with a table or index and set and retrieve properties associated
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,48,  * with a database.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,57,    /**
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,58,     * Get the Properties associated with a given table.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,59,     *
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,60,  * @param schemaName    The name of the schema that the table is in.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,61,  * @param tableName     The name of the table.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,62,  *
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,63,  * @return Properties   The Properties associated with the specified table.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,64,     *                      (An empty Properties is returned if the table does not exist.)
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,65,     * @exception SQLException on error
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,66,     */
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,67,"    public static Properties getTableProperties(String schemaName, String tableName)"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,68,        throws SQLException
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,69, {
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,70,"  return PropertyInfo.getConglomerateProperties( schemaName, tableName, false );"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,71, }
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,72,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,73,    /**
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,74,     * Get the Properties associated with a given index.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,75,     *
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,76,  * @param schemaName    The name of the schema that the index is in.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,77,  * @param indexName     The name of the index.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,78,  *
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,79,  * @return Properties   The Properties associated with the specified index.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,80,     *                      (An empty Properties is returned if the index does not exist.)
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,81,     * @exception SQLException on error
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,82,     */
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,83,"    public static Properties getIndexProperties(String schemaName, String indexName)"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,84,        throws SQLException
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,85, {
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,86,"  return PropertyInfo.getConglomerateProperties( schemaName, indexName, true );"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,87, }
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,114, /**
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,115,   Internal use only.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,116,   */
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,118,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,119,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,120, //////////////////////////////////////////////////////////////////////////////
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,121, //
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,122, // PRIVATE METHODS
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,123, //
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,124, /////////////////////////////////////////////////////////////////////////////
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,125,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,126,    /**
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,127,     * Get the Properties associated with a given conglomerate
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,128,     *
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,129,  * @param schemaName     The name of the schema that the conglomerate is in.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,130,  * @param conglomerateName  The name of the conglomerate.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,131,  *
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,132,  * @return Properties   The Properties associated with the specified conglomerate.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,133,     *                      (An empty Properties is returned if the conglomerate does not exist.)
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,134,     * @exception SQLException on error
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,135,     */
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,136," private static Properties getConglomerateProperties( String schemaName, String conglomerateName, boolean isIndex )"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,137,        throws SQLException
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,138, {
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,139,  long       conglomerateNumber;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,140,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,141,        // find the language context.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,142,        LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,143,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,144,        // Get the current transaction controller
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,145,        TransactionController tc = lcc.getTransactionExecute();
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,146,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,147,  try {
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,148,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,149,  // find the DataDictionary
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,150,  DataDictionary dd = lcc.getDataDictionary();
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,151,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,152,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,153,  // get the SchemaDescriptor
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,154,"  SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, tc, true);"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,155,  if ( !isIndex)
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,156,  {
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,157,   // get the TableDescriptor for the table
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,158,"   TableDescriptor td = dd.getTableDescriptor(conglomerateName, sd, tc);"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,159,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,160,   // Return an empty Properties if table does not exist or if it is for a view.
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,161,   if ((td == null) || td.getTableType() == TableDescriptor.VIEW_TYPE) { return new Properties(); }
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,162,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,163,   conglomerateNumber = td.getHeapConglomerateId();
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,164,  }
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,165,  else
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,166,  {
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,167,   // get the ConglomerateDescriptor for the index
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,168,"   ConglomerateDescriptor cd = dd.getConglomerateDescriptor(conglomerateName, sd, false);"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,169,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,170,   // Return an empty Properties if index does not exist
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,171,   if (cd == null) { return new Properties(); }
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,172,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,173,   conglomerateNumber = cd.getConglomerateNumber();
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,174,  }
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,175,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,176,  ConglomerateController cc = tc.openConglomerate(
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,177,"                conglomerateNumber,"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,178,"                false,"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,179,"                0,"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,180,"                TransactionController.MODE_RECORD,"
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,181,                TransactionController.ISOLATION_SERIALIZABLE);
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,182,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,183,  Properties properties = tc.getUserCreateConglomPropList();
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,184,  cc.getTableProperties( properties );
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,185,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,186,  cc.close();
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,187,        return properties;
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,188,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,189,  } catch (StandardException se) {
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,190,   throw PublicAPI.wrapStandardException(se);
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,191,  }
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,192,
java/engine/org/apache/derby/iapi/db/PropertyInfo.java,193, }
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,403,                         (RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java,224,      (RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java,946,            (RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1543,  /* Returns true until all access paths are exhausted */
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1544,"  retval =  curOpt.nextAccessPath(this,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1545,"          (OptimizablePredicateList) null,"
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,1546,          currentRowOrdering);
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1221,            (RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1065,  /*
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1066,  ** Check for a compilation context.  Sometimes
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1067,  ** there is a special compilation context in
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1068,   ** place to recompile something that may have
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1069,  ** been compiled against a different schema than
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1070,  ** the current schema (e.g views):
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1071,   **
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1072,   **  CREATE SCHEMA x
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1073,   **  CREATE TABLE t
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1074,  **  CREATE VIEW vt as SEELCT * FROM t
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1075,  **  SET SCHEMA app
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1076,  **  SELECT * FROM X.vt
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1077,  **
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1078,  ** In the above view vt must be compiled against
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1079,  ** the X schema.
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1080,  */
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1081,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1082,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1083,  SchemaDescriptor sd = null;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1084,  boolean isCurrent = false;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1085,  boolean isCompilation = false;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1086,  if (schemaName == null) {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1087,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1088,   CompilerContext cc = getCompilerContext();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1089,   sd = cc.getCompilationSchema();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1090,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1091,   if (sd == null) {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1092,"    // Set the compilation schema to be the default,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1093,    // notes that this query has schema dependencies.
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1094,    sd = getLanguageConnectionContext().getDefaultSchema();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1095,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1096,    isCurrent = true;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1097,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1098,    cc.setCompilationSchema(sd);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1099,   }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1100,   else
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1101,   {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1102,    isCompilation = true;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1103,   }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1104,   schemaName = sd.getSchemaName();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1105,  }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1106,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1107,  DataDictionary dataDictionary = getDataDictionary();
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1108,"  SchemaDescriptor sdCatalog = dataDictionary.getSchemaDescriptor(schemaName,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1109,"   getLanguageConnectionContext().getTransactionCompile(), raiseError);"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1110,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1111,  if (isCurrent || isCompilation) {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1112,   //if we are dealing with a SESSION schema and it is not physically
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1113,"   //created yet, then it's uuid is going to be null. DERBY-1706"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1114,"   //Without the getUUID null check below, following will give NPE"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1115,   //set schema session; -- session schema has not been created yet
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1116,   //create table t1(c11 int);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1117,   if (sdCatalog != null && sdCatalog.getUUID() != null)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1118,   {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1119,"    // different UUID for default (current) schema than in catalog,"
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1120,    // so reset default schema.
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1121,    if (!sdCatalog.getUUID().equals(sd.getUUID()))
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1122,    {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1123,     if (isCurrent)
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1124,      getLanguageConnectionContext().setDefaultSchema(sdCatalog);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1125,     getCompilerContext().setCompilationSchema(sdCatalog);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1126,    }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1127,   }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1128,   else
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1129,   {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1130,"    // this schema does not exist, so ensure its UUID is null."
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1131,    sd.setUUID(null);
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1132,    sdCatalog = sd;
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1133,   }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1134,  }
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1135,  return sdCatalog;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1486,       RequiredRowOrdering requiredRowOrdering)
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,633,                (RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1979,                                orderByLists[0]); // use first one
java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java,410,                (RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java,697,                (RequiredRowOrdering) null);
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,502,            else if ( isTableFunction( optimizable ) )
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,549,    /** Return true if the optimizable is a table function */
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,550,    private boolean isTableFunction( Optimizable optimizable )
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,551,    {
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,552,        if ( !( optimizable instanceof ProjectRestrictNode ) ) { return false; }
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,553,
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,554,        ResultSetNode   rsn = ((ProjectRestrictNode) optimizable).getChildResult();
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,555,        if ( !( rsn instanceof FromVTI ) ) { return false; }
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,556,
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,557,        return ( ((FromVTI) rsn).getMethodCall() instanceof StaticMethodCallNode );
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,558,    }
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,559,
java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java,746,        boolean isTableFunction = isTableFunction( optimizable );
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1110,"    private static  void    findResultSetFields( ArrayList<Field> fieldList, Class<?> klass )"
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1115,        Field[] fields = klass.getDeclaredFields();
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,65,
java/shared/org/apache/derby/shared/common/reference/SQLState.java,1142,
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,69,        ClassLoader savecl = null;
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,70,        boolean hasGetClassLoaderPerms = false;
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,71,        try {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,72,            savecl = AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,73,            new PrivilegedAction<ClassLoader>() {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,74,                public ClassLoader run()  {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,75,                    return Thread.currentThread().getContextClassLoader();
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,76,                }
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,77,            });
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,78,            hasGetClassLoaderPerms = true;
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,79,        } catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,80,            // Ignore security exception. Versions of Derby before
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,81,            // the DERBY-3745 fix did not require getClassLoader
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,82,            // privs.  We may leak class loaders if we are not
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,83,            // able to do this but we can't just fail.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,85,        if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,86,            try {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,87,                AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,88,                new PrivilegedAction<Object>() {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,89,                    public Object run()  {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,90,                        Thread.currentThread().setContextClassLoader(null);
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,91,                        return null;
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,92,                    }
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,93,                });
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,94,            } catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,95,"                // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,96,                // DERBY-3745 fix did not require setContextClassloader permissions.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,97,"                // We may leak class loaders if we are not able to set this, but"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,98,                // cannot just fail.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,99,            }
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,101,        if (hasGetClassLoaderPerms)
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,102,            try {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,103,                final ClassLoader tmpsavecl = savecl;
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,104,                AccessController.doPrivileged(
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,105,                new PrivilegedAction<Object>() {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,106,                    public Object run()  {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,107,                        Thread.currentThread().setContextClassLoader(tmpsavecl);
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,108,                        return null;
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,109,                    }
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,110,                });
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,111,            } catch (SecurityException se) {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,112,"                // ignore security exception.  Earlier versions of Derby, before the"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,113,                // DERBY-3745 fix did not require setContextClassloader permissions.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,114,"                // We may leak class loaders if we are not able to set this, but"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,115,                // cannot just fail.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,116,            }
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,117,    }
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,119,    /**
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,120,     * Returns a Timer object that can be used for adding TimerTasks
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,121,     * that cancel executing statements.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,122,     *
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,123,     * @return a Timer object for cancelling statements.
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,124,     */
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,125,    Timer getCancellationTimer()
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,126,    {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,127,        return singletonTimer;
java/engine/org/apache/derby/vti/XmlVTI.java,24,import java.io.InputStream;
java/engine/org/apache/derby/vti/XmlVTI.java,25,import java.net.URL;
java/engine/org/apache/derby/vti/XmlVTI.java,46, * <li>xmlResourceName - An URL identifying an xml resource.</li>
java/engine/org/apache/derby/vti/XmlVTI.java,77," *          'file:///Users/me/static-analysis/findbugs.xml',"
java/engine/org/apache/derby/vti/XmlVTI.java,93, * <li>xmlResourceName - An URL identifying an xml resource.</li>
java/engine/org/apache/derby/vti/XmlVTI.java,138," *                 'file:///Users/me/derby/mainline/z.xml',"
java/engine/org/apache/derby/vti/XmlVTI.java,311,        URL                 url = new URL( _xmlResourceName );
java/engine/org/apache/derby/vti/XmlVTI.java,312,        InputStream     is = url.openStream();
java/engine/org/apache/derby/jdbc/InternalDriver.java,308,    EmbedConnection timeLogin(
java/engine/org/apache/derby/jdbc/InternalDriver.java,315,            long startTime = System.currentTimeMillis();
java/engine/org/apache/derby/jdbc/InternalDriver.java,316,            long interruptedTime = startTime;
java/engine/org/apache/derby/jdbc/InternalDriver.java,318,            while ((startTime - interruptedTime) / 1000.0
java/engine/org/apache/derby/jdbc/InternalDriver.java,319,                        < loginTimeoutSeconds) {
java/engine/org/apache/derby/jdbc/InternalDriver.java,321,"                    return task.get(loginTimeoutSeconds, TimeUnit.SECONDS);"
java/engine/org/apache/derby/jdbc/InternalDriver.java,323,                    interruptedTime = System.currentTimeMillis();
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,144,            AccessController.doPrivileged
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,145,                (
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,146,                 new PrivilegedAction<Object>()
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,147,                 {
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,148,                     public Object run()
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,150,                         try {
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,151,                             boolean     needsClosing = false;
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,152,
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,153,                             PrintWriter pw;
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,154,                             if (
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,155,                                 (configurationParameters != null) &&
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,156,                                 (configurationParameters.length > 0)
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,157,                                 )
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,158,                             {
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,159,                                 pw = new PrintWriter( configurationParameters[ 0 ] );
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,160,                                 needsClosing = true;
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,161,                             }
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,162,                             else { pw = new PrintWriter( System.out ); }
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,164,                             if ( tracer != null )
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,165,                             {
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,166,                                 tracer.printToWriter( pw );
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,167,                                 pw.flush();
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,168,                             }
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,169,
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,170,                             if ( needsClosing ) { pw.close(); }
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,171,
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,172,                             return null;
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,173,"                         } catch (IOException ioe) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }"
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,174,                     }
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,175,                 }
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,176,                 );
java/engine/org/apache/derby/vti/XmlVTI.java,169,    private String      _xmlResourceName;
java/engine/org/apache/derby/vti/XmlVTI.java,193,"     * Build a XmlVTI given the name of an xml resource, the  tag of the row"
java/engine/org/apache/derby/vti/XmlVTI.java,197,"    public  XmlVTI( String xmlResourceName, String rowTag, int firstChildTagIdx, String... columnTags )"
java/engine/org/apache/derby/vti/XmlVTI.java,201,        _xmlResourceName = xmlResourceName;
java/engine/org/apache/derby/vti/XmlVTI.java,212,    /** This is the static method for creating functions with only child tags */
java/engine/org/apache/derby/vti/XmlVTI.java,213,"    public  static  XmlVTI  xmlVTI( String xmlResourceName, String rowTag, String... childTags )"
java/engine/org/apache/derby/vti/XmlVTI.java,215,"        return new XmlVTI( xmlResourceName, rowTag, 0, childTags );"
java/engine/org/apache/derby/vti/XmlVTI.java,218,    /** This is the static method for creating functions with both parent and child tags */
java/engine/org/apache/derby/vti/XmlVTI.java,220,"        ( String xmlResourceName, String rowTag, ArrayList<String> parentTags, ArrayList<String> childTags )"
java/engine/org/apache/derby/vti/XmlVTI.java,227,"        return new XmlVTI( xmlResourceName, rowTag, parentTags.size(), allTags );"
java/engine/org/apache/derby/vti/XmlVTI.java,315,        AccessController.doPrivileged
java/engine/org/apache/derby/vti/XmlVTI.java,316,            (
java/engine/org/apache/derby/vti/XmlVTI.java,317,             new PrivilegedAction<Object>()
java/engine/org/apache/derby/vti/XmlVTI.java,318,             {
java/engine/org/apache/derby/vti/XmlVTI.java,319,                 public Object run()
java/engine/org/apache/derby/vti/XmlVTI.java,320,                 {
java/engine/org/apache/derby/vti/XmlVTI.java,321,                     try {
java/engine/org/apache/derby/vti/XmlVTI.java,322,                         File                file = new File( _xmlResourceName );
java/engine/org/apache/derby/vti/XmlVTI.java,323,                         FileInputStream     is = new FileInputStream( file );
java/engine/org/apache/derby/vti/XmlVTI.java,324,                         Document        doc = _builder.parse( is );
java/engine/org/apache/derby/vti/XmlVTI.java,325,                         Element             root = doc.getDocumentElement();
java/engine/org/apache/derby/vti/XmlVTI.java,326,
java/engine/org/apache/derby/vti/XmlVTI.java,327,                         _rawRows = root.getElementsByTagName( _rowTag );
java/engine/org/apache/derby/vti/XmlVTI.java,328,                         _rowCount = _rawRows.getLength();
java/engine/org/apache/derby/vti/XmlVTI.java,330,                         is.close();
java/engine/org/apache/derby/vti/XmlVTI.java,332,                         return null;
java/engine/org/apache/derby/vti/XmlVTI.java,333,                     }
java/engine/org/apache/derby/vti/XmlVTI.java,334,"                     catch (IOException ioe) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }"
java/engine/org/apache/derby/vti/XmlVTI.java,335,"                     catch (SAXException ioe) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }"
java/engine/org/apache/derby/vti/XmlVTI.java,336,                 }
java/engine/org/apache/derby/vti/XmlVTI.java,337,             }
java/engine/org/apache/derby/vti/XmlVTI.java,338,           );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLOptimizerTraceTest.java,89,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLOptimizerTraceTest.java,90,        return new SupportFilesSetup( TestConfiguration.singleUseDatabaseDecorator( suite ) );
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,97,"         CompilerContext cc,"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,98,         int fromListSize
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,160,"             CompilerContext cc,"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,161,             int fromListSize
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,165,            if ( fromListSize > 0 )
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,166,            {
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,167,                int     leafNodeCount = countLeafNodes();
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,168,                if ( fromListSize != leafNodeCount )
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,169,                {
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,170,                    throw StandardException.newException
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,171,"                        ( SQLState.LANG_BAD_ROW_SOURCE_COUNT, leafNodeCount, fromListSize );"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,172,                }
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,173,            }
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,174,
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,181,"            leftChild.bind( dataDictionary, lcc, cc, (leftChild instanceof RowSource) ? 1 : -1 );"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,182,"            rightChild.bind( dataDictionary, lcc, cc, (rightChild instanceof RowSource) ? 1 : -1 );"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,255,"             CompilerContext cc,"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,256,             int fromListSize
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,260,            if ( fromListSize != 1 )
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,261,            {
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,262,                throw StandardException.newException
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,263,"                    ( SQLState.LANG_BAD_ROW_SOURCE_COUNT, 1, fromListSize );"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,264,            }
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,265,
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,320,"             CompilerContext cc,"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,321,             int fromListSize
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,325,"            super.bind( dataDictionary, lcc, cc, fromListSize );"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,354,"             CompilerContext cc,"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,355,             int fromListSize
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,359,"            super.bind( dataDictionary, lcc, cc, fromListSize );"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,530,"            overridingPlan.bind( dataDictionary, getLanguageConnectionContext(), getCompilerContext(), fromList.size() );"
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1067,        String  childClassName = rs.getClass().getName();
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1068,"        String  typeAttribute = childClassName.substring( childClassName.lastIndexOf( ""."" ) + 1 );"
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1070,"        result.setAttribute( ""type"", typeAttribute );"
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1099,            ResultSet   innerRS = (ResultSet) field.get( outerRS );
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1100,
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1101,"            if ( innerRS != null) { innerRS.toXML( outerNode, field.getName() ); }"
java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java,1102,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java,196,"              ""--derbyplan A\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java,202,"              ""--derbyplan A.B\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java,208,"              ""--derbyplan ( ( A.B # C.D ) * E )\n"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java,421,"        String      actualPlanShape = summarize( getLastQueryPlan( conn, rs ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java,431,"    static  Document    getLastQueryPlan( Connection conn, ResultSet rs ) throws Exception"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java,462,"        else if ( ""ProjectRestrictResultSet"".equals( type ) ) { summarize( buffer, getFirstElement( element, ""source"" ) ); }"
java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java,91,"     * @param   fromListSize    If > 0, then this is the top node in the plan and fromListSize should be the number of leaf nodes"
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,90, private long tranId;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,695,  XactId xid;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,701,  synchronized(this)
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,702,  {
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,703,   xid = new XactId(tranId++);
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,704,  }
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,728,  if (xid != null)
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,729,   tranId = xid.getId() + 1;
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,730,  else
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,731,   tranId = 1;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java,190,"          {""XBM0X"",""Supplied territory description '{0}' is invalid, expecting ln[_CO[_variant]]\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale."",""45000""},"
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,428,        if (traceDirectoryString == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,992,        if (traceLevelString == null) {
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,996,
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,997,"        return parseInt(traceLevelString, propertyDefault_traceLevel);"
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,1076,        if (prop.containsKey(Attribute.CLIENT_TRACE_DIRECTORY)) {
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,1077,            setTraceDirectory(getTraceDirectory(prop));
java/client/org/apache/derby/jdbc/ClientBaseDataSourceRoot.java,1078,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ClientSideSystemPropertiesTest.java,41,        getConnection().setAutoCommit(false);
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ClientSideSystemPropertiesTest.java,77,           tempFile.delete();
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,25,import java.util.Iterator;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1803,  SchemaDescriptor compSchema;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1804,"  compSchema = dd.getSchemaDescriptor(trd.getSchemaDescriptor().getUUID(), null);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1862,"   compSchema = dd.getSchemaDescriptor(trd.getSchemaDescriptor().getUUID(), null);"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,377,   SchemaDescriptor compSchema;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,378,"   compSchema = getDataDictionary().getSchemaDescriptor(triggerSchemaId, null);"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,379,   CompilerContext newCC = lcc.pushCompilerContext(compSchema);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,384,"   actionSPS.setText(getDataDictionary().getTriggerActionString(stmtnode,"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,336,  if (actionSPS == null)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,337,  {
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,344,   actionSPS = getDataDictionary().getSPSDescriptor(actionSPSId);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,347,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,366,  DataDictionary dd = getDataDictionary();
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,372,  if((!actionSPS.isValid() ||
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,373,     (actionSPS.getPreparedStatement() == null)) &&
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,378,"                    dd.getSchemaDescriptor(actionSPS.getCompSchemaId(), null));"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,380,   Visitable stmtnode = pa.parseStatement(triggerDefinition);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,382,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,383,"            actionSPS.setText(dd.getTriggerActionString(stmtnode,"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,386,"     triggerDefinition,"
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,392,     false
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,393,     ));
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,397,
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,398,  return actionSPS;
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,427, public SPSDescriptor getWhenClauseSPS()
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,430,        if (whenSPSId != null && whenSPS == null)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,431,  {
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,432,   whenSPS = getDataDictionary().getSPSDescriptor(whenSPSId);
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,433,  }
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,434,  return whenSPS;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1867,            SPSDescriptor sps = isWhenClause ? trd.getWhenClauseSPS()
java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java,110,   whenClause = triggerd.getWhenClauseSPS();
java/client/org/apache/derby/client/net/Request.java,44,import org.apache.derby.iapi.error.ExceptionUtil;
java/client/org/apache/derby/client/net/Request.java,45,
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,226,  if (numTablesInQuery > 6)
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,227,  {
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,228,   permuteState = READY_TO_JUMP;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,229,   firstLookOrder = new int[numOptimizables];
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,230,  }
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,231,  else
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,232,   permuteState = NO_JUMP;
java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java,388, }
java/client/org/apache/derby/client/am/SqlWarning.java,74,            // The exception chain gets constructed automatically through
java/client/org/apache/derby/client/am/SqlWarning.java,76,            //
java/client/org/apache/derby/client/am/SqlWarning.java,77,            // We have to use the right method to convert the next exception
java/client/org/apache/derby/client/am/SqlWarning.java,78,            // depending upon its type.  Luckily with all the other subclasses
java/client/org/apache/derby/client/am/SqlWarning.java,79,            // of SQLException we don't have to make our own matching
java/client/org/apache/derby/client/am/SqlWarning.java,80,            // subclasses because
java/client/org/apache/derby/client/am/SqlWarning.java,81,            sqlw.setNextException(
java/client/org/apache/derby/client/am/SqlWarning.java,82,                nextException_ instanceof SqlWarning ?
java/client/org/apache/derby/client/am/SqlWarning.java,83,                    ((SqlWarning)nextException_).getSQLWarning() :
java/client/org/apache/derby/client/am/SqlWarning.java,84,                    nextException_.getSQLException());
java/engine/org/apache/derby/impl/sql/compile/CursorNode.java,595,"        resultSet.pushOffsetFetchFirst( offset, fetchFirst, hasJDBClimitClause );"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,139,        /* If there is an order by on the result of the intersect then use that because we know that doing so
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,140,         * will avoid a sort.  If the output of the intersect/except is small relative to its inputs then in some
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,141,"         * cases it would be better to sort the inputs on a different sequence of columns, but it is hard to analyze"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,142,         * the input query expressions to see if a sort can be avoided.
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,144,        if( orderByLists[0] != null)
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,147,            int orderByListSize = orderByLists[0].size();
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,154,                    orderByLists[0].getOrderByColumn(i);
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,172,            orderByLists[0] = null; // It will be pushed down.
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,324,        if( orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,325,            // Generate an order by node on top of the intersect/except
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,326,            treeTop = new OrderByNode(
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,327,"                treeTop,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,328,"                orderByLists[0],"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,329,"                tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,330,                getContextManager());
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,331,        }
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,333,        if (offset != null || fetchFirst != null) {
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,334,            ResultColumnList newRcl =
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,335,                treeTop.getResultColumns().copyListAndObjects();
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,336,"            newRcl.genVirtualColumnNodes(treeTop, treeTop.getResultColumns());"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,337,
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,338,            treeTop = new RowCountNode(
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,339,"                treeTop,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,340,"                newRcl,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,341,"                offset,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,342,"                fetchFirst,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,343,"                hasJDBClimitClause,"
java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java,344,                getContextManager());
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1088,            if ((childSelect.hasWindows() ||
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1089,                 childSelect.fetchFirst != null ||
java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java,1090,                 childSelect.offset != null)){
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,32,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,37,import org.apache.derby.iapi.sql.compile.OptimizableList;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,38,import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,41,import org.apache.derby.iapi.sql.compile.OptimizerPlan;
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1591,  * consider sort avoidance.
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1607,     * should be overridden by the result sets that need this.
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,57, OrderByList  orderByList;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,58,    ValueNode    offset; // OFFSET n ROWS
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,59,    ValueNode    fetchFirst; // FETCH FIRST n ROWS ONLY
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,60,    boolean   hasJDBClimitClause; //  were OFFSET/FETCH FIRST specified by a JDBC LIMIT clause?
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,80, /**
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,81,  * Convert this object to a String.  See comments in QueryTreeNode.java
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,82,  * for how this should be done for tree printing.
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,83,  *
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,84,  * @return This object as a String
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,85,  */
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,86,    @Override
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,87, public String toString()
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,88, {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,89,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,90,  {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,91,"   return  ""orderByList: "" +"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,92,"    (orderByList != null ? orderByList.toString() : ""null"") + ""\n"" +"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,93,    super.toString();
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,94,  }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,95,  else
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,96,  {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,97,"   return """";"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,98,  }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,99, }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,100,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,125,            if (orderByList != null) {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,126,"                printLabel(depth, ""orderByList:"");"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,127,                orderByList.treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,128,            }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,129,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,130,            if (offset != null) {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,131,"                printLabel(depth, ""offset:"");"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,132,                offset.treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,133,            }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,134,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,135,            if (fetchFirst != null) {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,136,"                printLabel(depth, ""fetch first/next:"");"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,137,                fetchFirst.treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,138,            }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,139,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,276,        if (orderByList != null) {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,277,            orderByList.pullUpOrderByColumns(this);
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,278,            orderByList.bindOrderByColumns(this);
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,279,        }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,281,"        bindOffsetFetch(offset, fetchFirst);"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,402,  this.orderByList = orderByList;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,415,        this.offset = offset;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,416,        this.fetchFirst = fetchFirst;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,417,        this.hasJDBClimitClause = hasJDBClimitClause;
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,472,        if (orderByList != null && orderByList.size() > 1) {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,473,            orderByList.removeDupColumns();
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,667,  if (orderByList != null)
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,668,  {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,669,"            treeTop = new OrderByNode(treeTop,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,670,"                                      orderByList,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,671,"                                      tableProperties,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,672,                                      getContextManager());
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,673,  }
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,675,        if (offset != null || fetchFirst != null) {
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,676,            ResultColumnList newRcl =
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,677,                treeTop.getResultColumns().copyListAndObjects();
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,678,"            newRcl.genVirtualColumnNodes(treeTop, treeTop.getResultColumns());"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,679,
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,680,            treeTop = new RowCountNode(
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,681,"                treeTop,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,682,"                newRcl,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,683,"                offset,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,684,"                fetchFirst,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,685,"                hasJDBClimitClause,"
java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java,686,                getContextManager());
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,32,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,107,    /**
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,108,"     * List of columns in ORDER BY list. Usually size 1, if size 2, we"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,109,     * are a VALUES top node UNION node and element 2 has been passed
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,110,     * from InterceptOrExceptNode to prepare for merge implementation
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,111,     * of intersect or except.
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,112,     */
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,113,    OrderByList[] orderByLists = new OrderByList[1];
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,114,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,117,"    ValueNode   offset;  // OFFSET n ROWS, if given"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,118,"    ValueNode   fetchFirst; // FETCH FIRST n ROWS ONLY, if given"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,119,    boolean   hasJDBClimitClause; //  were OFFSET/FETCH FIRST specified by a JDBC LIMIT clause?
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,120,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,349,            if (orderByLists != null)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,350,            {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,351,                for (int i = 0; i < orderByLists.length; i++)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,352,                {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,353,                    if ( orderByLists[i] != null )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,354,                    {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,355,"                        printLabel(depth, ""orderByLists["" + i + ""]:"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,356,                        orderByLists[i].treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,357,                    }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,358,                }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,359,   }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,360,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,361,            if (offset != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,362,"                printLabel(depth, ""offset:"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,363,                offset.treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,364,            }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,365,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,366,            if (fetchFirst != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,367,"                printLabel(depth, ""fetch first/next:"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,368,                fetchFirst.treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,369,            }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,555,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,556,"  SanityManager.ASSERT(fromList != null && resultColumns != null,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,557,"   ""Both fromList and resultColumns are expected to be non-null"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,559,        if (orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,560,            orderByLists[0].pullUpOrderByColumns(this);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,730,        if (orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,731,            orderByLists[0].bindOrderByColumns(this);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,732,        }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,734,"        bindOffsetFetch(offset, fetchFirst);"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,978,        if (orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,979,            // A push down of an internal ordering from IntersectOrExceptNode
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,980,            // on a SELECT that already has an ORDER BY. The following sanity
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,981,            // check helps verify that this is indeed the case.
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,982,            if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,983,                SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,984,                    orderByList.size() == resultColumns.visibleSize());
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,985,                OrderByColumn obc = orderByList.elementAt(0);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,986,                SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,987,                    obc.getExpression() instanceof NumericConstantNode);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,988,                try {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,989,                    SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,990,                            ((NumericConstantNode)obc.getExpression()).
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,991,                            value.getInt() == 1);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,992,                } catch (Exception e) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,993,                    SanityManager.THROWASSERT(e);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,994,                }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,995,            }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,996,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,997,            // Possible optimization: check to see if this extra ordering can
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,998,"            // be eliminated, i.e. the two orderings are the same."
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,999,            OrderByList[] newOrderByLists = {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1000,"                orderByLists[0],"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1001,                orderByList};
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1002,            orderByLists = newOrderByLists;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1003,        } else {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1004,            orderByLists[0] = orderByList;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1005,        }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1020,        this.offset = offset;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1021,        this.fetchFirst = fetchFirst;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1022,        this.hasJDBClimitClause = hasJDBClimitClause;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1180,            for (int i = 0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1181,                if (orderByLists[i] != null)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1186,                    orderByLists[i].removeConstantColumns(wherePredicates);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1192,                    if (orderByLists[i].size() == 0)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1194,                        orderByLists[i] = null;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1250,            for (int i = 0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1266,                if (isDistinct && orderByLists[i] != null &&
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1267,                    orderByLists[i].allAscending())
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1272,                    if (orderByLists[i].isInOrderPrefix(resultColumns))
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1274,                        orderByLists[i] = null;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1285,                        orderByLists[i].resetToSourceRCs();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1286,                        resultColumns =
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1287,                            orderByLists[i].reorderRCL(resultColumns);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1289,                        orderByLists[i] = null;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1324,        if (orderByLists[0] != null) { // only relevant for first one
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1332,            orderByLists[0].accept(cnvw);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1505,  /* Don't flatten if selectNode now has an order by */
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1506,        if ((orderByLists[0] != null) &&
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1507,             (orderByLists[0].size() > 0))
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1508,  {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1509,   return false;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1510,  }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1512,        /* Don't flatten if selectNode has OFFSET or FETCH */
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1513,        if ((offset     != null) ||
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1514,            (fetchFirst != null))
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1515,        {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1516,            return false;
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1536,        boolean[] eliminateSort = new boolean[orderByLists.length];
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1680,        for (int i=0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1681,            if (orderByLists[i] != null)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1682,            {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1683,                if (orderByLists[i].getSortNeeded())
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1686,"                                             orderByLists[i],"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1726,            if (i == 0 && (offset != null || fetchFirst != null)) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1738,"                        hasJDBClimitClause,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1782,        for (int i=0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1783,            if (!(orderByLists[i] != null && orderByLists[i].getSortNeeded()) &&
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1784,                orderByQuery)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1797,                prnRSN.adjustForSortElimination(orderByLists[i]);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1903,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1904,"  SanityManager.ASSERT(selectSubquerys != null,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1905,"   ""selectSubquerys is expected to be non-null"");"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1909,        for (int i=0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1910,            if (orderByLists[i] != null && orderByLists[i].size() > 1) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1911,                orderByLists[i].removeDupColumns();
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1993,"        wherePredicates,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1994,"        dataDictionary,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1995,"                                orderByLists[0], // use first one"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1996,                                overridingPlan);
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2598,            if (orderByLists != null)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2599,            {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2600,                for (int i = 0; i < orderByLists.length; i++)
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2601,                {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2602,                    if ( orderByLists[ i ] != null )
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2603,                    {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2604,                        orderByLists[i] = (OrderByList) orderByLists[ i ].accept( v );
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2605,                    }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2607,            }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2609,            if (offset != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2610,                offset = (ValueNode) offset.accept( v );
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2611,            }
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2612,
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2613,            if (fetchFirst != null) {
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2614,                fetchFirst = (ValueNode) fetchFirst.accept( v );
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,2616,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,55,    /**
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,56,"     * List of columns in ORDER BY list. Usually size 1, if size 2, we"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,57,     * are a VALUES top node UNION node and element 2 has been passed
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,58,     * from InterceptOrExceptNode to prepare for merge implementation
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,59,     * of intersect or except.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,60,     */
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,61,    OrderByList[] orderByLists = new OrderByList[1];
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,63,    ValueNode   offset; // OFFSET n ROWS
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,64,    ValueNode   fetchFirst; // FETCH FIRST n ROWS ONLY
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,65,    boolean   hasJDBClimitClause; // were OFFSET/FETCH FIRST specified by a JDBC LIMIT clause?
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,550,            if (orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,551,                for (int i = 0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,552,"                    printLabel(depth, ""orderByLists["" + i + ""]:"");"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,553,                    orderByLists[i].treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,554,                }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,555,   }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,556,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,557,            if (offset != null) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,558,"                printLabel(depth, ""offset:"");"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,559,                offset.treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,560,            }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,561,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,562,            if (fetchFirst != null) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,563,"                printLabel(depth, ""fetch first/next:"");"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,564,                fetchFirst.treePrint(depth + 1);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,565,            }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,785,        if (orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,786,            orderByLists[0].bindOrderByColumns(this);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,787,            orderByLists[0].pullUpOrderByColumns(this);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,790,"        bindOffsetFetch(offset, fetchFirst);"
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,822,        if (this.orderByLists[0] != null) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,823,            // Presumably a push down order by from IntersectOrExceptNode
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,824,            // on a VALUES clause that already has an ORDER BY.
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,825,            if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,826,                SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,827,                    orderByList.size() == resultColumns.visibleSize());
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,828,                OrderByColumn obc = orderByList.elementAt(0);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,829,                SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,830,                    obc.getExpression() instanceof NumericConstantNode);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,831,                try {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,832,                    SanityManager.ASSERT(
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,833,                            ((NumericConstantNode)obc.getExpression())
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,834,                            .value.getInt() == 1);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,835,                } catch (Exception e) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,836,                    SanityManager.THROWASSERT(e);
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,837,                }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,838,            }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,839,
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,840,            // FIXME: Check to see if this extra ordering can be eliminated
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,841,            OrderByList[] newOrderByLists = new OrderByList[2];
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,842,            newOrderByLists[0] = orderByLists[0];
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,843,            newOrderByLists[1] = orderByList;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,844,            this.orderByLists = newOrderByLists;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,845,        } else {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,846,            this.orderByLists[0] = orderByList;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,847,        }
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,860,        this.offset = offset;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,861,        this.fetchFirst = fetchFirst;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,862,        this.hasJDBClimitClause = hasJDBClimitClause;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,921,        for (int i = 0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,922,            if ((! all) && orderByLists[i] != null &&
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,923,                orderByLists[i].allAscending())
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,928,                if (orderByLists[i].isInOrderPrefix(resultColumns))
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,930,                    orderByLists[i] = null;
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,949,            if (orderByLists[i] != null && orderByLists[i].size() > 1) {
java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java,950,                orderByLists[i].removeDupColumns();
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,466,        for (int i=0; i < orderByLists.length; i++) {
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,467,            if (orderByLists[i] != null)
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,470,"                                          orderByLists[i],"
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,476,            // IntersectOrExceptNode should sit on top of us.
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,477,            if (i == 0 && (offset != null || fetchFirst != null)) {
java/engine/org/apache/derby/impl/sql/compile/UnionNode.java,488,"                        hasJDBClimitClause,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,29,import java.sql.PreparedStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,30,import java.sql.ParameterMetaData ;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,31,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,34,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,41, * Test <result offset clause> and <fetch first clause>.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,97,    private static void createSchemaObjects(Statement st)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,98,            throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,120,    public void testErrors()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,121,            throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,151,     * reserved so we don't risk breaking existing apps.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,153,    public void testNewKeywordNonReserved()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,154,            throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,198,    public void testOffsetFetchFirstReadOnlyForwardOnlyRS()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,199,            throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,416,    public void testOffsetFetchFirstUpdatableForwardOnlyRS()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,417,            throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,430,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,432,            rs = stm.executeQuery( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,452,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,454,            rs = stm.executeQuery( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,477,    public void testOffsetFetchFirstReadOnlyScrollableRS()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,478,            throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,489,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,491,            rs = stm.executeQuery( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,502,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,504,            rs = stm.executeQuery( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,531,    public void testOffsetFetchFirstUpdatableScrollableRS()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,532,            throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,546,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,548,            rs = stm.executeQuery( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,568,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,570,            rs = stm.executeQuery( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,618,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,620,            rs = stm.executeQuery( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,640,    public void testValues() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,662,    public void testMetadata() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,669,        for ( int j = 0; j < variants.length; j++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,671,            rs = stm.executeQuery( variants[ j ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,696,    public void testRunTimeStatistics() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,703,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,709,"                          variants[ i ],"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,735,    public void testBigTable() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,776,    public void testRepeatedExecution() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,779,        ResultSet   rs;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,783,        for ( int j = 0; j < variants.length; j++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,785,            ps = prepareStatement( variants[ j ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,796,    public void testDynamicArgs() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,804,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,806,            ps = prepareStatement( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,872,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,874,            ps = prepareStatement( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,880,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,882,            ps = prepareStatement( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,889,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,891,            ps = prepareStatement( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,898,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,900,            ps = prepareStatement( variants[ i ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,931,    public void testDynamicArgsMetaData() throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,942,        for ( int j = 0; j < variants.length; j++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,944,            ps = prepareStatement( variants[ j ] );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,964,    public  void    testJDBCLimitOffset()   throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1008,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1012,        for ( int i = 0; i < variants.length; i++ )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1014,            String  text = variants[ i ];
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1015,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1033,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1048,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1072,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1096,"    private String  substitute( String stub, String token, int replacement )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1097,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1098,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1099,"        return substitute( stub, token, Integer.toString( replacement ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1100,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java,1102,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java,24,import java.sql.SQLException;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java,25,import java.sql.Statement;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java,30,import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java,33,import org.apache.derbyTesting.junit.TestConfiguration;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java,133,        ResultSet rs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java,346,        ResultSet rs = null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java,368,"        rs = s.executeQuery(""select * from temp2b"");"
java/engine/org/apache/derby/impl/io/DirFile.java,405,        if( !exists())
java/engine/org/apache/derby/impl/io/DirFile.java,407,        if( isDirectory())
java/engine/org/apache/derby/impl/io/DirFile.java,409,            String[] childList = super.list();
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,196,     * @throws IOException
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1970,     * See Javadoc for {@link #QueryExpressionClauses}.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,541,   //then it means that the trigger is defined at the row level
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,542,   //and a set of trigger columns are specified in the CREATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,543,   //TRIGGER statement. This can only happen for an UPDATE
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,544,   //trigger.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,743,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,744,"            // If we are dealing with statement trigger, then we will read"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,745,            // all the columns from the trigger table since trigger will be
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,746,            // fired for any of the columns in the trigger table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,747,            int numberOfColsInTriggerTable =
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,748,                    triggerTableDescriptor.getNumberOfColumns();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,749,            referencedColInts = new int[numberOfColsInTriggerTable];
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,750,            for (int j = 0; j < numberOfColsInTriggerTable; j++) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,751,                referencedColInts[j] = j + 1;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,752,            }
java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java,1970,     * See Javadoc for {@link QueryExpressionClauses}.
java/client/org/apache/derby/client/am/ClientResultSet.java,381,
java/client/org/apache/derby/client/am/ClientResultSet.java,3805,
java/client/org/apache/derby/client/am/ClientResultSet.java,3850,            isValidCursorPosition_ = true;
java/client/org/apache/derby/client/am/ClientResultSet.java,5453,            warnings_ = null;    // clear any previous warnings
java/client/org/apache/derby/client/am/LOBStateTracker.java,107,        if (this.doRelease) {
java/client/org/apache/derby/client/am/Sqlca.java,273,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java,424,"            ps2 = con2.prepareStatement(""insert into t1 values(?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java,508,"            ps2 = con2.prepareStatement(""insert into t1 values(?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java,476,"            prepareStatement(""insert into t1 values (?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/HoldabilityTest.java,547,"            prepareStatement(""insert into t1 values (?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURBaseTest.java,69,"                rs.getString(4) + ""')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURBaseTest.java,70,"        assertEquals(""Expecting b==id+a+17"", b, sum);"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java,82,"            prepareStatement(""insert into t1 values (?,?,?,?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java,207,"                ? ""create table t1 (id int primary key, a int, b int, c varchar(5000))"""
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java,208,"                : ""create table t1 (id int, a int, b int, c varchar(5000))"";"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,614,  for (int i=0; i<size; i++) {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,615,   generatedColumnPositionsArray[i] = -1;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,616,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,994,  int[] columnIndexes = null;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,999,   columnIndexes = activation.getAutoGeneratedKeysColumnIndexes();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1004,   if ( columnIndexes != null) {//use user provided column positions array
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1005,    columnIndexes = uniqueColumnPositionArray(columnIndexes);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1006,   } else { //prepare array of auto-generated keys for the table since user didn't provide any
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1007,    columnIndexes = generatedColumnPositionsArray();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1008,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1010,"   rd = lcc.getLanguageFactory().getResultDescription(resultDescription,columnIndexes);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1018,   if (activation.getAutoGeneratedKeysResultsetMode())
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1019,"    autoGeneratedKeysRowsHolder.insert(getCompactRow(row, columnIndexes));"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,33,import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,136,    public void testDerby6383StatementTriggerBug() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,157,"            ""INSERT INTO DERBY_6368_TAB2 values(old_row.x, old_row.y)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,169,        //drop statement trigger
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,172,        //Following should not fire any trigger since following UPDATE is on
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,173,"        // column ""Y"" whereas trigger is defined on column ""X"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,175,"        assertTableRowCount(""DERBY_6368_TAB2"", 2);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,177,        //Following should fire trigger since following UPDATE is on
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java,180,"        assertTableRowCount(""DERBY_6368_TAB2"", 3);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,115,        deleteStreamFiles();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,583,"        assertTrue(""File "" + derby0log + "" could not be deleted"", deleted);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,605,"        methodStreamFile = new File(systemHome, makeStreamFilename(""method""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,606,"        fileStreamFile = new File(systemHome, makeStreamFilename(""file""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,607,"        fieldStreamFile = new File(systemHome, makeStreamFilename(""field""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,608,"        errStreamFile = new File(systemHome, makeStreamFilename(""err""));"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,42,import org.apache.derbyTesting.junit.Utilities;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,390,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,474,        // This will generate enough output to roll through all 10 log files
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,501,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,817,                String failPath = PrivilegedFileOpsForTests.getAbsolutePath(getFailureFolder());
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,818,                // Copy the logfiles dir
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,819,"                File origLogFilesDir = new File(DEFAULT_DB_DIR, LOGFILESDIR);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,820,"                File newLogFilesDir = new File (failPath, LOGFILESDIR);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,821,"                PrivilegedFileOpsForTests.copy(origLogFilesDir,newLogFilesDir);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/ErrorStreamTest.java,823,                removeDirectory(origLogFilesDir);
java/engine/org/apache/derby/vti/XmlVTI.java,154, * order by estimatedCost * </pre>
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,65, private long beginFreeMemory;
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,66, private long beginTotalMemory;
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,67, private long estimatedMemoryUsed;
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,131,          estimatedMemoryUsed = (currentTotalMemory-currentFreeMemory) -
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,132,        (beginTotalMemory-beginFreeMemory);
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,270,  beginFreeMemory = jvm.freeMemory();
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,271,  beginTotalMemory = jvm.totalMemory();
java/engine/org/apache/derby/impl/store/access/sort/MergeInserter.java,272,  estimatedMemoryUsed = 0;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,159, (pre-v15)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,160,  int format id
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,161,  int log file version
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,162,  long the log instant (LogCounter) of the last completed checkpoint
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,163, (v15 onward)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,167,  int JBMS version
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,168,  int checkpoint interval
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,169,  long spare (value set to 0)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,170,  long spare (value set to 0)
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,2400,        the condrol data written at last check point.
java/tools/org/apache/derby/impl/tools/dblook/DB_Trigger.java,62,"                ""SELECT * FROM SYS.SYSTRIGGERS WHERE STATE != 'D'"");"
java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java,690,                                     int vtiRestrictionNumber
java/engine/org/apache/derby/impl/sql/compile/FromVTI.java,1734,  return 18;
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,466,                                     int vtiRestrictionNumber
java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java,484,                                vtiRestrictionNumber
java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java,125,                 int vtiRestrictionNumber
java/engine/org/apache/derby/vti/VTITemplate.java,71,public abstract class VTITemplate   implements ResultSet
java/engine/org/apache/derby/vti/StringColumnVTI.java,104,        _columnNames = ArrayUtil.copy( columnNames );
java/engine/org/apache/derby/vti/ForeignTableVTI.java,123,public class   ForeignTableVTI extends VTITemplate implements  RestrictedVTI
java/engine/org/apache/derby/vti/ForeignTableVTI.java,150,    private ResultSet           _foreignResultSet;
java/engine/org/apache/derby/vti/ForeignTableVTI.java,240,            if ( _foreignResultSet != null ) { _foreignResultSet.close(); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,243,            _foreignResultSet = null;
java/engine/org/apache/derby/vti/ForeignTableVTI.java,250,        if ( !isClosed() && (_foreignResultSet == null) )
java/engine/org/apache/derby/vti/ForeignTableVTI.java,253,"                ( getForeignConnection( _connectionURL ), makeQuery() );"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,254,            _foreignResultSet = _foreignPreparedStatement.executeQuery();
java/engine/org/apache/derby/vti/ForeignTableVTI.java,257,        return _foreignResultSet.next();
java/engine/org/apache/derby/vti/ForeignTableVTI.java,260,    public boolean isClosed() { return (_connectionURL == null); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,261,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,262,    public  boolean wasNull()   throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,263,    { return _foreignResultSet.wasNull(); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,264,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,265,    public  ResultSetMetaData   getMetaData()   throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,266,    { return _foreignResultSet.getMetaData(); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,267,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,268,    public  InputStream  getAsciiStream(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,269,    { return _foreignResultSet.getAsciiStream( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,270,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,271,    public  BigDecimal  getBigDecimal(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,272,    { return _foreignResultSet.getBigDecimal( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,273,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,274,    @Deprecated
java/engine/org/apache/derby/vti/ForeignTableVTI.java,275,"    public  BigDecimal  getBigDecimal(int i, int scale) throws SQLException"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,276,"    { return _foreignResultSet.getBigDecimal( mapColumnNumber( i ), scale ); }"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,277,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,278,    public  InputStream  getBinaryStream(int i)  throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,279,    { return _foreignResultSet.getBinaryStream( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,280,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,281,    public  Blob  getBlob(int i)  throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,282,    { return _foreignResultSet.getBlob( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,283,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,284,    public  boolean  getBoolean(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,285,    { return _foreignResultSet.getBoolean( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,286,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,287,    public  byte  getByte(int i)    throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,288,    { return _foreignResultSet.getByte( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,289,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,290,    public  byte[]  getBytes(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,291,    { return _foreignResultSet.getBytes( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,292,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,293,    public  Reader  getCharacterStream(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,294,    { return _foreignResultSet.getCharacterStream( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,295,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,296,    public  Clob  getClob(int i)  throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,297,    { return _foreignResultSet.getClob( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,298,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,299,    public  Date  getDate(int i)  throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,300,    { return _foreignResultSet.getDate( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,301,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,302,"    public  Date  getDate(int i, Calendar cal)    throws SQLException"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,303,"    { return _foreignResultSet.getDate( mapColumnNumber( i ), cal ); }"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,304,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,305,    public  double  getDouble(int i)    throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,306,    { return _foreignResultSet.getDouble( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,307,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,308,    public  float  getFloat(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,309,    { return _foreignResultSet.getFloat( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,310,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,311,    public  int  getInt(int i)   throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,312,    { return _foreignResultSet.getInt( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,313,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,314,    public  long  getLong(int i)  throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,315,    { return _foreignResultSet.getLong( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,316,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,317,    public  Object  getObject(int i)    throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,318,    { return _foreignResultSet.getObject( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,319,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,320,    public  short  getShort(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,321,    { return _foreignResultSet.getShort( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,322,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,323,    public  String  getString(int i)    throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,324,    { return _foreignResultSet.getString( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,325,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,326,    public  Time  getTime(int i)  throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,327,    { return _foreignResultSet.getTime( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,328,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,329,"    public  Time  getTime(int i, Calendar cal)    throws SQLException"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,330,"    { return _foreignResultSet.getTime( mapColumnNumber( i ), cal ); }"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,331,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,332,    public  Timestamp  getTimestamp(int i) throws SQLException
java/engine/org/apache/derby/vti/ForeignTableVTI.java,333,    { return _foreignResultSet.getTimestamp( mapColumnNumber( i ) ); }
java/engine/org/apache/derby/vti/ForeignTableVTI.java,334,
java/engine/org/apache/derby/vti/ForeignTableVTI.java,335,"    public  Timestamp  getTimestamp(int i, Calendar cal)   throws SQLException"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,336,"    { return _foreignResultSet.getTimestamp( mapColumnNumber( i ), cal ); }"
java/engine/org/apache/derby/vti/ForeignTableVTI.java,368,        ( String connectionURL )
java/engine/org/apache/derby/vti/ForeignTableVTI.java,456,    private int mapColumnNumber( int derbyNumber )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ArchiveVTI.java,100,     *
java/client/org/apache/derby/client/net/NetConnectionReply.java,2668,    //   SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,2691,            // SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3070,    // SQLCNRDB; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3159,    // SQLDCXRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3163,    // SQLDCXRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3168,    // SQLDCXCRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3171,    // SQLDCXCRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3175,    // SQLDCXRRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3178,    // SQLDCXRRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3182,    // SQLDCXTRDB_m ; PROTOCOL TYPE NVCM; ENVLID 0x3F; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionReply.java,3185,    // SQLDCXTRDB_s ; PROTOCOL TYPE NVCS; ENVLID 0x33; Length Override 255
java/client/org/apache/derby/client/net/NetConnectionRequest.java,498,"                NetConfiguration.PKG_IDENTIFIER_MAX_LEN,   //maximum RDBNAM length in bytes"
java/client/org/apache/derby/client/net/NetCursor.java,667,    //   SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetCursor.java,687,        // SQLRDBNAME; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetCursor.java,784,    // SQLDCRDB; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetPackageRequest.java,65,"                maxIdentifierLength,"
java/client/org/apache/derby/client/net/NetStatementReply.java,1603,        } else if ((ddmLength >= 71) && (ddmLength <= 781)) {
java/client/org/apache/derby/client/net/NetStatementReply.java,1611,            if (scldtaLen < 18 || scldtaLen > 255) {
java/client/org/apache/derby/client/net/NetStatementReply.java,2113,    //   SQLXRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2141,        //   SQLXRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2209,    //   SQLDRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/client/org/apache/derby/client/net/NetStatementReply.java,2236,        //   SQLDRDBNAM; PROTOCOL TYPE VCS; ENVLID 0x32; Length Override 255
java/drda/org/apache/derby/impl/drda/CodePoint.java,755,"    static final int RDBNAM_LEN = 18; //dbname fixed length for SQLAM level 6, for level 7,"
java/drda/org/apache/derby/impl/drda/CodePoint.java,756,                                      //limit is MAX_NAME (255)
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,3015,                rdbName.length > CodePoint.MAX_NAME) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,5735,            if (length < CodePoint.RDBNAM_LEN || length > CodePoint.MAX_NAME) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6607,     *   SQLRDBNAME; DRDA TYPE VCS; ENVLID 0x32; Length Override 255
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,8228,        //   SQLXRDBNAM; DRDA TYPE VCS; ENVLID 0x32; Length Override 255
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,72,        // ensuring that we get a connection.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,73,        getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,74,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,76,         * Sun's 1.4.2 JVM and IBM's JVM (any version) fail on Windows for this test
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,77,"         * Thus, we skip it."
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,78,         *
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,79,         * Read JIRA's DERBY-4836 for more information.
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,81,"        if (getSystemProperty(""os.name"").startsWith(""Windows"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,82,            /* Skip with 1.4.2 jvms */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,83,"            if (getSystemProperty(""java.version"").startsWith(""1.4.2"")) return;"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,84,        }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,85,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,86,        // Maximum length in bytes is 255. We subtract 14 to account for
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,87,        // ;create=true and ;shutdown=true
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,88,        int maxNameLength = 255 - 14;
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,89,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,90,        /**
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,91,         * \u0041 is the letter 'A' (1 byte)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,92,         * \u00e7 is the letter 'c' with a cedilla (2 bytes)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,93,         * \u4310 is a Chinese character (3 bytes)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,94,         * \u1f030 is a domino tile (4 bytes)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,95,         */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,96,"        String[] testCharacters = {""\u0041"", ""\u00e7"", ""\u4e10"", ""\u1f030""};"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,97,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,98,        for (int ch=0; ch<testCharacters.length; ch++) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,99,            StringBuffer dbName = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,100,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,101,            /* max length in bytes divided by length of 1 chinese char */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,102,"            int maxChars = maxNameLength / testCharacters[ch].getBytes(""UTF-8"").length;"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,103,            for(int i=0; i<maxChars; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,104,                dbName.append(testCharacters[ch]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,105,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,106,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,107,            /* This time it should work as we're right at the limit */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,108,            String url = TestConfiguration
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,109,"                    .getCurrent().getJDBCUrl(dbName.toString()+ "";create=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,110,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,111,            Connection conn = DriverManager.getConnection(url);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,112,            conn.close();
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,114,            /* Add the database name for cleanup on tearDown() */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,115,            databasesForCleanup.add(dbName.toString());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,116,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,117,            /* Append three more characters to make it fail */
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,118,            for (int i = 0; i < 3; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,119,                dbName.append(testCharacters[ch]);
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,120,            }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,122,            url = TestConfiguration
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,123,"                    .getCurrent().getJDBCUrl(dbName.toString()+ "";create=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,125,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,129,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,130,"                assertSQLState(""08001"", e); /* Check if it failed */"
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,138, boolean compilingStatement;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,838,   compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,873,   synchronized (this) {
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,874,    compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,875,    notifyAll();
java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java,876,   }
java/engine/org/apache/derby/impl/sql/GenericStatement.java,269,    if (!preparedStmt.compilingStatement) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,280,   preparedStmt.compilingStatement = true;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,281,   preparedStmt.setActivationClass(null);
java/engine/org/apache/derby/impl/sql/GenericStatement.java,636,   synchronized (preparedStmt) {
java/engine/org/apache/derby/impl/sql/GenericStatement.java,637,    preparedStmt.compilingStatement = false;
java/engine/org/apache/derby/impl/sql/GenericStatement.java,638,    preparedStmt.notifyAll();
java/engine/org/apache/derby/impl/sql/GenericStatement.java,639,   }
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,90,"        String dbUrl1024bytes = ""memory:dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;create=true"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/InternationalConnectTest.java,93,"        String dbUrl1025bytes = ""memory:dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/dir1234567890/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;create=true"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LikeTest.java,29,import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,64,"    public  ApacheServerLogVTI( String xmlResourceName, String rowTag, String[] childTags )"
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java,66,"        super( xmlResourceName, rowTag, childTags );"
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/DerbyJiraReportVTI.java,63,"    public  DerbyJiraReportVTI( String xmlResourceName, String rowTag, String[] childTags )"
java/demo/vtis/java/org/apache/derbyDemo/vtis/example/DerbyJiraReportVTI.java,65,"        super( xmlResourceName, rowTag, childTags );"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java,318,"            if ( !shouldSucceed )   { fail( ""Should not have been able to connect!"" ); }"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,216,  if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,217,  {
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,218,"   SanityManager.ASSERT(dummySubqueryList.size() == 0,"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,219,"    ""dummySubqueryList.size() is expected to be 0"");"
java/engine/org/apache/derby/impl/sql/compile/GroupByList.java,220,  }
java/shared/org/apache/derby/shared/common/reference/SQLState.java,985,"     String LANG_AGGREGATE_IN_GROUPBY_LIST                              = ""42Y26"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java,373,  st.close();
java/demo/workingwithderby/WwdClientExample.java,124,         //  Beginning of the primary catch block: uses errorPrint method
java/demo/workingwithderby/WwdClientExample.java,127,            **       the exception reporting method             */
java/demo/workingwithderby/WwdClientExample.java,129,            errorPrint(e);
java/demo/workingwithderby/WwdClientExample.java,133,     //   ## DERBY EXCEPTION REPORTING CLASSES  ##
java/demo/workingwithderby/WwdClientExample.java,134,    /***     Exception reporting methods
java/demo/workingwithderby/WwdClientExample.java,135,    **      with special handling of SQLExceptions
java/demo/workingwithderby/WwdClientExample.java,136,    ***/
java/demo/workingwithderby/WwdClientExample.java,137,      static void errorPrint(Throwable e) {
java/demo/workingwithderby/WwdClientExample.java,138,         if (e instanceof SQLException)
java/demo/workingwithderby/WwdClientExample.java,139,            SQLExceptionPrint((SQLException)e);
java/demo/workingwithderby/WwdClientExample.java,140,         else {
java/demo/workingwithderby/WwdClientExample.java,141,"            System.out.println(""A non SQL error occured."");"
java/demo/workingwithderby/WwdClientExample.java,142,            e.printStackTrace();
java/demo/workingwithderby/WwdClientExample.java,143,         }
java/demo/workingwithderby/WwdClientExample.java,144,      }  // END errorPrint
java/demo/workingwithderby/WwdClientExample.java,145,
java/demo/workingwithderby/WwdClientExample.java,146,    //  Iterates through a stack of SQLExceptions
java/demo/workingwithderby/WwdClientExample.java,147,      static void SQLExceptionPrint(SQLException sqle) {
java/demo/workingwithderby/WwdClientExample.java,148,         while (sqle != null) {
java/demo/workingwithderby/WwdClientExample.java,149,"            System.out.println(""\n---SQLException Caught---\n"");"
java/demo/workingwithderby/WwdClientExample.java,150,"            System.out.println(""SQLState:   "" + (sqle).getSQLState());"
java/demo/workingwithderby/WwdClientExample.java,151,"            System.out.println(""Severity: "" + (sqle).getErrorCode());"
java/demo/workingwithderby/WwdClientExample.java,152,"            System.out.println(""Message:  "" + (sqle).getMessage());"
java/demo/workingwithderby/WwdClientExample.java,153,            sqle.printStackTrace();
java/demo/workingwithderby/WwdClientExample.java,154,            sqle = sqle.getNextException();
java/demo/workingwithderby/WwdClientExample.java,155,         }
java/demo/workingwithderby/WwdClientExample.java,156,   }  //  END SQLExceptionPrint
java/demo/workingwithderby/WwdEmbedded.java,128,         //  Beginning of the primary catch block: uses errorPrint method
java/demo/workingwithderby/WwdEmbedded.java,131,            **       the exception reporting method             */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LangScripts.java,65,"        ""aggbuiltin"","
java/testing/org/apache/derbyTesting/junit/JDBC.java,1019,     * assertFullResultSet() using trimmed string comparisions.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,78, /* ****
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,79,  * Derby-388: When a set of inserts & updates is performed on a table
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,80,"  * and each update fires a trigger that in turn performs other updates,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,81,  * Derby will sometimes try to recompile the trigger in the middle
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,82,  * of the update process and will throw an NPE when doing so.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,83,  */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,84, public static void derby388() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,85, {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,86,"  System.out.println(""Running DERBY-388 Test."");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,87,"  Connection conn = DriverManager.getConnection(""jdbc:default:connection"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,88,  boolean needCommit = !conn.getAutoCommit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,89,  Statement s = conn.createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,91,  // Create our objects.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,92,"  s.execute(""CREATE TABLE D388_T1 (ID INT)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,93,"  s.execute(""CREATE TABLE D388_T2 (ID_2 INT)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,94,  s.execute(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,95,"   ""CREATE TRIGGER D388_TRIG1 AFTER UPDATE OF ID ON D388_T1"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,96,"   "" REFERENCING NEW AS N_ROW FOR EACH ROW"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,97,"   "" UPDATE D388_T2"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,98,"   "" SET ID_2 = "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,99,"   ""   CASE WHEN (N_ROW.ID <= 0) THEN N_ROW.ID"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,100,"   ""   ELSE 6 END "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,101,"   ""   WHERE N_ROW.ID < ID_2"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,102,  );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,103,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,104,  if (needCommit)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,105,   conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,106,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,107,  // Statement to insert into D388_T1.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,108,  PreparedStatement ps1 = conn.prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,109,"   ""INSERT INTO D388_T1 VALUES (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,110,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,111,  // Statement to insert into D388_T2.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,112,  PreparedStatement ps2 = conn.prepareStatement(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,113,"   ""INSERT INTO D388_T2(ID_2) VALUES (?)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,114,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,115,  // Statement that will cause the trigger to fire.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,116,  Statement st = conn.createStatement();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,117,  for (int i = 0; i < 20; i++) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,118,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,119,   for (int id = 0; id < 10; id++) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,120,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,121,"    ps2.setInt(1, id);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,122,    ps2.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,123,"    ps1.setInt(1, 2*id);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,124,    ps1.executeUpdate();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,125,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,126,    if (needCommit)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,127,     conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,128,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,129,   }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,130,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,131,"   // Execute an update, which will fire the trigger."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,132,   // Note that having the update here is important
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,133,   // for the reproduction.  If we try to remove the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,134,   // outer loop and just insert lots of rows followed
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,135,"   // by a single UPDATE, the problem won't reproduce."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,136,"   st.execute(""UPDATE D388_T1 SET ID=5"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,137,   if (needCommit)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,138,    conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,139,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,140,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,141,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,142,  // Clean up.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,143,"  s.execute(""DROP TABLE D388_T1"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,144,"  s.execute(""DROP TABLE D388_T2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,145,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,146,  if (needCommit)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,147,   conn.commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,148,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,149,  st.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,150,  ps1.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,151,  ps2.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,152,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,153,"  System.out.println(""DERBY-388 Test Passed."");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,154, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/userDefMethods.java,155,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,38, public static String triggerFiresMinimal(String string) throws Throwable
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,39, {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,40,"  System.out.println(""TRIGGER: "" + ""<""+string+"">"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,41,"  return """";"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,42, }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,43,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,44, public static String triggerFires(String string) throws Throwable
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,45, {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,46,  TriggerExecutionContext tec = Factory.getTriggerExecutionContext();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,47,"  System.out.println(""TRIGGER: "" + ""<""+string+""> on statement ""+tec.getEventStatementText());"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,48,  printTriggerChanges();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,49,"  return """";"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,50, }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,132, private static void printTriggerChanges() throws Throwable
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,133, {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,134,  TriggerExecutionContext tec = Factory.getTriggerExecutionContext();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,135,"  System.out.println(""BEFORE RESULT SET"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,136,  dumpRS(tec.getOldRowSet());
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,137,"  System.out.println(""\nAFTER RESULT SET"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,138,  dumpRS(tec.getNewRowSet());
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,139, }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,140,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,141, // lifted from the metadata test
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,142, private static void dumpRS(ResultSet s) throws SQLException
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,143, {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,144,  if (s == null)
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,145,  {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,146,"   System.out.println(""<NULL>"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,147,   return;
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,148,  }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,149,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,150,  ResultSetMetaData rsmd = s.getMetaData();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,151,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,152,  // Get the number of columns in the result set
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,153,  int numCols = rsmd.getColumnCount();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,154,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,155,  if (numCols <= 0)
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,156,  {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,157,"   System.out.println(""(no columns!)"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,158,   return;
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,159,  }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,160,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,161,"  StringBuffer heading = new StringBuffer(""\t "");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,162,"  StringBuffer underline = new StringBuffer(""\t "");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,163,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,164,  int len;
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,165,  // Display column headings
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,166,  for (int i=1; i<=numCols; i++)
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,167,  {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,168,   if (i > 1)
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,169,   {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,170,"    heading.append("","");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,171,"    underline.append("" "");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,172,   }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,173,   len = heading.length();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,174,   heading.append(rsmd.getColumnLabel(i));
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,175,   len = heading.length() - len;
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,176,   for (int j = len; j > 0; j--)
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,177,   {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,178,"    underline.append(""-"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,179,   }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,180,  }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,181,  System.out.println(heading.toString());
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,182,  System.out.println(underline.toString());
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,183,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,184,
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,185,  StringBuffer row = new StringBuffer();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,186,"  // Display data, fetching until end of the result set"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,187,  while (s.next())
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,188,  {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,189,"   row.append(""\t{"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,190,"   // Loop through each column, getting the"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,191,   // column data and displaying
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,192,   for (int i=1; i<=numCols; i++)
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,193,   {
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,194,"    if (i > 1) row.append("","");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,195,    row.append(s.getString(i));
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,196,   }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,197,"   row.append(""}\n"");"
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,198,  }
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,199,  System.out.println(row.toString());
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,200,  s.close();
java/testing/org/apache/derbyTesting/functionTests/util/Triggers.java,201, }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,32,import java.net.URLClassLoader;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,75,    public static Test suite()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,120,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,121,"                   new DatabaseClassLoadingTest(""testDatabaseInClasspath"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,641,"    public void testDatabaseInClasspath() throws SQLException, MalformedURLException"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,645,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,646,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,647,            ds.getConnection();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,648,"            fail(""opened database before it was on classpath"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,649,        } catch (SQLException e)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,650,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,651,"           assertSQLState(""XJ004"", e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,652,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,653,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,654,"        URL jarURL = SupportFilesSetup.getReadOnlyURL(""dclt.jar"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,655,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,656,        // DERBY-2179 - temp disable using the class loader
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,657,        // (since due to DERBY-2162) it's not working anyway)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,658,        // need to re-write code not to assume there is no
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,659,        // existing thread context loader.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,660,        //setContextClassLoader(jarURL);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,661,        try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,662,"            // Disabled due to DERBY-2162, running this opens"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,663,            // the database thus accessing resources and means the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,664,            // jar file cannot be cleaned up.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,665,            // readOnlyTest(ds);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,666,        } finally {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,667,            //setContextClassLoader(null);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,668,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1334,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1335,    private static void setContextClassLoader(final URL url)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1336,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1337,        AccessController.doPrivileged
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1338,        (new java.security.PrivilegedAction<Void>() {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1339,            public Void run()  {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1340,                URLClassLoader cl =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1341,                    url == null ? null : new URLClassLoader(new URL[] {url});
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1342,                java.lang.Thread.currentThread().setContextClassLoader(cl);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1343,              return null;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1344,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1345,        });
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1346,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,30,public class FullCollationTests extends CollationTest {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,31,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,32,    public FullCollationTests(String name) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,33,        super(name);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,34,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,35,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,37,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java,42,    public static Test suite()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,354,    public static Test suite()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,360,        // Not run on windows until DERBY-5618 is addressed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,361,        // Also not run on small devices because encryption is not supported there
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,362,        // by default.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,364,        if ( !onWindows() && !JDBC.vmSupportsJSR169() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,383,    private static  boolean onWindows()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,384,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,385,"        return getSystemProperty(""os.name"").startsWith(""Windows"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,393,    private static  Test   allConfigurations( boolean clientServer )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,445,        // For testing subprotocols. Cleanup of support files is blocked by DERBY-5618.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,447,        if ( !onWindows() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,484,        }   // end if !onWindows()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,496,    private Test    decorate( boolean clientServer )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,537,        // For testing subprotocols. Cleanup of support files is blocked by DERBY-5618.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,539,        if ( !onWindows() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,541,            // Add the jar files needed for testing jar and classpath subprotocols.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,542,"            result = new SupportFilesSetup( result, SUPPORT_FILES_SOURCE, null, SUPPORT_FILES_TARGET, null );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,543,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,544,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,546,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,547,            File        currentDirectory = currentDirectory();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,548,"            File        readOnlyDirectory = new File( currentDirectory, SupportFilesSetup.EXTIN );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,549,"            File        nast2Jar = new File( readOnlyDirectory, NAST2_JAR_FILE );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,551,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,552,"                result = new ClasspathSetup( result, nast2Jar.toURI().toURL() );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,553,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,554,            catch (Exception e) { printStackTrace( e ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,869,        // Vet databases accessed via subprotocols. Not run on Windows machines
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,870,        // because of DERBY-5618.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,874,        if ( !onWindows() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,52, public static Test suite() {
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,64,"    public  ClasspathSetup( Test test, URL resource )  throws Exception"
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,87,"                     URLClassLoader newClassLoader = new URLClassLoader( new URL[] { _resource }, _originalClassLoader );"
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,89,                     Thread.currentThread().setContextClassLoader( newClassLoader );
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,97,    protected void tearDown()
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,101,             new PrivilegedAction<Void>()
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,103,                 public Void run()
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,106,
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,111,    }
java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java,113,}
java/engine/org/apache/derby/impl/io/CPFile.java,93,"     //System.out.println(""HERE FOR "" + toString());"
java/engine/org/apache/derby/impl/io/CPFile.java,94,     InputStream is = null;
java/engine/org/apache/derby/impl/io/CPFile.java,95,     ClassLoader cl = Thread.currentThread().getContextClassLoader();
java/engine/org/apache/derby/impl/io/CPFile.java,96,     if (cl != null)
java/engine/org/apache/derby/impl/io/CPFile.java,97,      is = cl.getResourceAsStream(path);
java/engine/org/apache/derby/impl/io/CPFile.java,98,
java/engine/org/apache/derby/impl/io/CPFile.java,99,        // don't assume the context class loader is tied
java/engine/org/apache/derby/impl/io/CPFile.java,100,     // into the class loader that loaded this class.
java/engine/org/apache/derby/impl/io/CPFile.java,101,     if (is == null)
java/engine/org/apache/derby/impl/io/CPFile.java,102,     {
java/engine/org/apache/derby/impl/io/CPFile.java,103,      cl = getClass().getClassLoader();
java/engine/org/apache/derby/impl/io/CPFile.java,104,      // Javadoc indicates implementations can use
java/engine/org/apache/derby/impl/io/CPFile.java,105,      // null as a return from Class.getClassLoader()
java/engine/org/apache/derby/impl/io/CPFile.java,106,      // to indicate the system/bootstrap classloader.
java/engine/org/apache/derby/impl/io/CPFile.java,107,      if (cl != null)
java/engine/org/apache/derby/impl/io/CPFile.java,108,       is = cl.getResourceAsStream(path);
java/engine/org/apache/derby/impl/io/CPFile.java,109,      else
java/engine/org/apache/derby/impl/io/CPFile.java,110,       is = ClassLoader.getSystemResourceAsStream(path);
java/engine/org/apache/derby/impl/io/CPFile.java,111,     }
java/engine/org/apache/derby/impl/io/CPFile.java,112,
java/engine/org/apache/derby/impl/io/CPFile.java,113,     if (is == null)
java/engine/org/apache/derby/impl/io/CPFile.java,114,      throw new FileNotFoundException(toString());
java/engine/org/apache/derby/impl/io/CPFile.java,115,     return is;
java/engine/org/apache/derby/impl/io/CPFile.java,116,
java/engine/org/apache/derby/impl/io/CPFile.java,126,        ClassLoader cl = Thread.currentThread().getContextClassLoader();
java/engine/org/apache/derby/impl/io/CPFile.java,129,            myURL = cl.getResource(path);
java/engine/org/apache/derby/impl/io/CPFile.java,141,            return cl.getResource(path);
java/engine/org/apache/derby/impl/io/CPFile.java,143,            return ClassLoader.getSystemResource(path);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,117,           suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,118,"                   new DatabaseClassLoadingTest(""testDatabaseInJar"")));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,124,                suite.addTest(SecurityManagerSetup.noSecurityManager(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,125,                    new ClasspathSetup(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,127,"                        SupportFilesSetup.getReadOnlyURL(""dclt.jar""))));"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,641,"        String dbName = ""jar:("" + jarFile.getAbsolutePath() + "")dbro"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,40,import org.apache.derbyTesting.junit.SecurityManagerSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,76,    private static  final   boolean DISABLE_JAVA_SECURITY = true;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,77,    private static  final   boolean ENABLE_JAVA_SECURITY = false;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,78,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,161,    private final   boolean _disableSecurityManager;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,187,"         boolean    turnOffAuthenticationAndAuthorization,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,188,         boolean    disableSecurityManager
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,197,        _disableSecurityManager = disableSecurityManager;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,332,        String  securityManager = _disableSecurityManager ?
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,333,"            ""SecurityManager OFF, "" :"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,334,"            ""SecurityManager ON, "";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,339,"        return ""[ "" + dbLocation + authType + local + authOverrides + securityManager + embedded + "" ]"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,370,"                  ( JAR_ENCRYPTED, NATIVE, LOCAL, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,416,"              ( NONE, NO_AUTH, SYSTEM_WIDE, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,427,"              ( FILE, NATIVE, LOCAL, DISABLE_AUTHORIZATION, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,434,"              ( FILE, NATIVE, LOCAL, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,445,"              ( FILE, NATIVE, SYSTEM_WIDE, DISABLE_AUTHORIZATION, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,452,"              ( FILE, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,469,"                  ( JAR, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,476,"                  ( JAR, NATIVE, LOCAL, DONT_DISABLE_AUTH, ENABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,487,"                  ( CLASSPATH, NATIVE, SYSTEM_WIDE, DONT_DISABLE_AUTH, DISABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,494,"                  ( CLASSPATH, NATIVE, LOCAL, DONT_DISABLE_AUTH, DISABLE_JAVA_SECURITY )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,515,        if ( _disableSecurityManager ) { result = SecurityManagerSetup.noSecurityManager( result ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,516,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,884,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,885,            // We only use the classpath subprotocol if we are not running under a security manager.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,886,            // We may be able to remove that restriction after DERBY-5615 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,887,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java,888,            if ( _disableSecurityManager ) { vetProtocol( classpathDBName() ); }
java/engine/org/apache/derby/impl/io/CPFile.java,29,import java.io.IOException;
java/engine/org/apache/derby/impl/io/CPFile.java,33,import java.security.PrivilegedActionException;
java/engine/org/apache/derby/impl/io/CPFile.java,34,import java.security.PrivilegedExceptionAction;
java/engine/org/apache/derby/impl/io/CPFile.java,98,        URL url = getURL();
java/engine/org/apache/derby/impl/io/CPFile.java,100,        if (url == null) {
java/engine/org/apache/derby/impl/io/CPFile.java,101,            throw new FileNotFoundException(toString());
java/engine/org/apache/derby/impl/io/CPFile.java,104,        try {
java/engine/org/apache/derby/impl/io/CPFile.java,105,            return openStream(url);
java/engine/org/apache/derby/impl/io/CPFile.java,106,        } catch (FileNotFoundException fnf) {
java/engine/org/apache/derby/impl/io/CPFile.java,107,            throw fnf;
java/engine/org/apache/derby/impl/io/CPFile.java,108,        } catch (IOException ioe) {
java/engine/org/apache/derby/impl/io/CPFile.java,109,            FileNotFoundException fnf = new FileNotFoundException(toString());
java/engine/org/apache/derby/impl/io/CPFile.java,110,            fnf.initCause(ioe);
java/engine/org/apache/derby/impl/io/CPFile.java,111,            throw fnf;
java/engine/org/apache/derby/impl/io/CPFile.java,172,    /** Privileged wrapper for {@code URL.openStream()}. */
java/engine/org/apache/derby/impl/io/CPFile.java,173,    private static InputStream openStream(final URL url) throws IOException {
java/engine/org/apache/derby/impl/io/CPFile.java,174,        try {
java/engine/org/apache/derby/impl/io/CPFile.java,175,            return AccessController.doPrivileged(
java/engine/org/apache/derby/impl/io/CPFile.java,176,                    new PrivilegedExceptionAction<InputStream>() {
java/engine/org/apache/derby/impl/io/CPFile.java,177,                public InputStream run() throws IOException {
java/engine/org/apache/derby/impl/io/CPFile.java,178,                    return url.openStream();
java/engine/org/apache/derby/impl/io/CPFile.java,179,                }
java/engine/org/apache/derby/impl/io/CPFile.java,180,            });
java/engine/org/apache/derby/impl/io/CPFile.java,181,        } catch (PrivilegedActionException pae) {
java/engine/org/apache/derby/impl/io/CPFile.java,182,            throw (IOException) pae.getCause();
java/engine/org/apache/derby/impl/io/CPFile.java,183,        }
java/engine/org/apache/derby/jdbc/InternalDriver.java,42,import java.util.concurrent.Executors;
java/engine/org/apache/derby/jdbc/InternalDriver.java,98,            Executors.newCachedThreadPool(new DaemonThreadFactory());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,134,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,188,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1190,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1191,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java,1192,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerGeneralTest.java,2357,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerGeneralTest.java,2361,        // reset the print stream and compare.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerGeneralTest.java,2362,"        assertEquals(expected, outs.toString());"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4882,    if ((tableName == null) ||
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4883,     ((oldReferencingName == null || !oldReferencingName.equals(tableName.getTableName())) &&
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4884,     (newReferencingName == null || !newReferencingName.equals(tableName.getTableName()))))
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4973,   if ((tableName == null) ||
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4974,    ((oldReferencingName == null || !oldReferencingName.equals(tableName.getTableName())) &&
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4975,    (newReferencingName == null || !newReferencingName.equals(tableName.getTableName()))))
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,24,import java.sql.Timestamp;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,727,            if (baseTableName == null
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,728,                    || (!baseTableName.equals(oldTableName)
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,729,                            && !baseTableName.equals(newTableName))) {
java/engine/org/apache/derby/impl/sql/compile/TableName.java,105,
java/engine/org/apache/derby/impl/sql/compile/TableName.java,106,    boolean hasSchema(){
java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java,375,            if ( cd.hasGenerationClause() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,140,"  st.execute(""alter table d4006_a alter column z default 99"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,141,"  st.execute(""alter table d4006_a alter column z default null"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java,74,"    private static  final   String      INDEX_POEMS = ""call LuceneSupport.createIndex( 'ruth', 'poems', 'poemText', null )"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java,122,        return coarseTest;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java,204,"                { ""RUTH"", ""POEMS"", ""POEMTEXT"", ""org.apache.derby.optional.api.LuceneUtils.defaultAnalyzer"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,155,        Test        authorizedTest = TestConfiguration.sqlAuthorizationDecorator( authenticatedTest );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java,56,"        Test        localizedTest = new LocaleTestSetup( baseTest, new Locale( ""en"", ""US"" ) );"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,961,        setSQLAuthMode = new DatabaseChangeSetup(
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,962,"            new DropDatabaseSetup(setSQLAuthMode, DEFAULT_DBNAME_SQL) {"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,963,                protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,964,                    // test responsible for shutdown
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,965,                    removeDatabase();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,966,                }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,967,"            },"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,968,"            DEFAULT_DBNAME_SQL, DEFAULT_DBNAME_SQL, true);"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4979,   int tokEndOffset = tableName.getEndOffset();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4986,   int columnLength = ref.getEndOffset() - ref.getBeginOffset() + 1;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5042,   start = tokEndOffset- actionOffset + columnLength + 2;
java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java,94,
java/engine/org/apache/derby/iapi/types/TypeId.java,244,        private static final TypeId BIGINT_ID = create(
java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java,95,"                throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND, ""SEQUENCE"", sequenceName.getFullTableName());"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2195,  }
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,275,   columnDescriptor = new ColumnDescriptor(
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,276,"                       columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,277,"           index++,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,278,"           columnInfo[ix].dataType,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,279,"           columnInfo[ix].defaultValue,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,280,"           columnInfo[ix].defaultInfo,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,281,"           td,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,282,"           defaultUUID,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,283,"           columnInfo[ix].autoincStart,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,284,"           columnInfo[ix].autoincInc,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,285,           columnInfo[ix].autoinc_create_or_modify_Start_Increment
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,286,          );
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,287,   else
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,288,    columnDescriptor = new ColumnDescriptor(
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,289,"                     columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,290,"         index++,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,291,"         columnInfo[ix].dataType,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,292,"         columnInfo[ix].defaultValue,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,293,"         columnInfo[ix].defaultInfo,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,294,"         td,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,295,"         defaultUUID,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,296,"         columnInfo[ix].autoincStart,"
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,297,         columnInfo[ix].autoincInc
java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java,298,        );
java/engine/org/apache/derby/impl/sql/execute/DropTableConstantAction.java,155,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java,602,"        assertSysRoutinePermsRowCount(9, // 9 pre-existing grants to PUBLIC"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java,603,"                                      10,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java,604,                                      10);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java,632,"        assertSysRoutinePermsRowCount(9, 9,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java,637,                                      10);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java,659,"        assertSysRoutinePermsRowCount(9,9,9);"
java/tools/org/apache/derby/impl/tools/dblook/DB_Sequence.java,67,"             ""FROM SYS.SYSSEQUENCES"""
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,36, * Class that limits file permissions using an {@code AclFileAttributeView}.
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,43,"        // If we have a posix view, just return and fall back on"
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,44,        // the JDK 6 approach.
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,48,            return false;
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,53,        if (aclView == null) {
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,54,            return false;
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,55,        }
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,57,        // Since we have an AclFileAttributeView which is not a
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,58,"        // PosixFileAttributeView, we probably have an NTFS file"
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,59,        // system.
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,61,"        // Remove existing ACEs, build a new one which simply"
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,62,        // gives all possible permissions to current owner.
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,63,        AclEntry ace = AclEntry.newBuilder()
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,64,                .setPrincipal(Files.getOwner(fileP))
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,65,                .setType(AclEntryType.ALLOW)
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,66,                .setPermissions(AclEntryPermission.values())
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,67,                .build();
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,69,        aclView.setAcl(Collections.singletonList(ace));
java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java,71,        return true;
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,39,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,489,     * <p/>
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,492,     * <p/>
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,494,     * <p/>
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,497,     * <p/>
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,528,        if (limitAccessToOwnerViaACLs(file)) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,532,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,534,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,535,"        assertTrue(file.setWritable(false, false));"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,537,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,539,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,540,"        assertTrue(file.setWritable(true, true));"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,542,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,544,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,545,"        assertTrue(file.setReadable(false, false));"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,547,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,549,        //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,550,"        assertTrue(file.setReadable(true, true));"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,553,            //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,555,            //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,556,"            assertTrue(file.setExecutable(false, false));"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,558,            //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,560,            //
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,561,"            assertTrue(file.setExecutable(true, true));"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,563,    }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,565,    private static void assertTrue(boolean b) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,566,        // We should always have the permission to modify the access since have
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,567,"        // just created the file. On some file systems, some operations will"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,568,"        // not work, though, notably FAT/FAT32, as well as NTFS on java < 7, so"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,569,        // we ignore it the failure.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,570,        if (SanityManager.DEBUG) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,571,            if (!b) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,572,                String os =
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,573,"                    PropertyUtil.getSystemProperty(""os.name"").toLowerCase();"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,574,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,575,"                if (os.indexOf(""windows"") >= 0) {"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,576,"                    // expect this to fail, Java 6 on Windows doesn't cut it,"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,577,                    // known not to work.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,578,                } else {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,579,                    SanityManager.THROWASSERT(
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,580,"                        ""File.set{RWX} failed on this file system"");"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,581,                }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,582,            }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,583,        }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,586,    private static boolean limitAccessToOwnerViaACLs(File file)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,158,"        Test        authorizedTest = TestConfiguration.sqlAuthorizationDecoratorSingleUse( authenticatedTest, DB_NAME, false );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,164,    protected void tearDown()
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,165,        throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,166,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,167,        TestConfiguration.getCurrent().shutdownEngine();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,168,        super.tearDown();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,169,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,170,
java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java,35,    final String logicalDBName;
java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java,39,     }
java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java,45,
java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java,75,
java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java,76,        removeDatabase();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,762,"            new DropDatabaseSetup(test, dbName)"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,763,            {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,764,                protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,765,                    // test responsible for shutdown
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,766,                    removeDatabase();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,767,                }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,768,"            },"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,836,"            new DropDatabaseSetup(test, logicalDbName)"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,837,            {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,838,                protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,839,                    // the test is responsible for shutdown
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,840,                    removeDatabase();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,841,                }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,842,"            },"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,866,"            new DropDatabaseSetup(test, logicalDbName)"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,867,            {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,868,                protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,869,                    // the test is responsible for shutdown
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,870,                    removeDatabase();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,871,                }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,872,"            },"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,953,"        return sqlAuthorizationDecoratorSingleUse( test, DEFAULT_DBNAME_SQL, true );"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,957,"     * Same as sqlAuthorizationDecoratorSingleUse, except that you can name the database yourself."
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,964,"    public static Test sqlAuthorizationDecoratorSingleUse(Test test, String dbName, boolean removeDatabase)"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,974,        if ( removeDatabase )
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,975,        {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,976,            setSQLAuthMode =
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,977,"                new DropDatabaseSetup(setSQLAuthMode, dbName)"
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,978,                {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,979,                    protected void tearDown() throws Exception {
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,980,                        // test responsible for shutdown
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,981,                        removeDatabase();
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,982,                    }
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,983,                };
java/testing/org/apache/derbyTesting/junit/TestConfiguration.java,984,        }
java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java,1326,   boolean createTriggerTime)
java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java,413,                    false);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,156,import org.apache.derby.impl.sql.compile.OffsetOrderVisitor;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4745,   boolean createTriggerTime
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4754,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4755,  StringBuffer newText = new StringBuffer();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4817,        OffsetOrderVisitor<ColumnReference> visitor =
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4818,"                new OffsetOrderVisitor<ColumnReference>(ColumnReference.class,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4819,"                        actionOffset,"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4820,                        actionOffset + triggerDefinition.length());
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4821,        actionStmt.accept(visitor);
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4822,        SortedSet<ColumnReference> refs = visitor.getNodes();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4823,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4883,                if (!isTransitionVariable(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4884,"                        tableName, oldReferencingName, newReferencingName))"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4885,    {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4886,     continue;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4887,    }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4888,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4889,    if (tableName.getBeginOffset() == -1)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4890,    {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4891,     continue;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4892,    }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4973,            if (!isTransitionVariable(
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4974,"                    tableName, oldReferencingName, newReferencingName))"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4975,   {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4976,    continue;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4977,   }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4978,
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4979,   int tokBeginOffset = tableName.getBeginOffset();
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4980,   if (tokBeginOffset == -1)
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4981,   {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4982,    continue;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4983,   }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,4987,"   newText.append(triggerDefinition.substring(start, tokBeginOffset-actionOffset));"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5046,  if (start < triggerDefinition.length())
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5047,  {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5048,   newText.append(triggerDefinition.substring(start));
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,5049,  }
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,86,"        super(operand, cm);"
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,87,        this.aggregateName = aggregateName;
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,89,        this.distinct = distinct;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,25,import java.util.Collections;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,71,    private final String        originalWhenText;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,72,    private final String        originalActionText;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,607,     true
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,608,     );
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,617,"                            triggerTableDescriptor, triggerEventMask, true);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,632,"                    actionNode, originalActionText, actionOffset);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,635,"                        whenClause, originalWhenText, whenOffset);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,710,"            Visitable node, String originalText, int offset)"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,719,        CollectNodesVisitor<FromBaseTable> visitor =
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,720,                new CollectNodesVisitor<FromBaseTable>(FromBaseTable.class);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,721,        node.accept(visitor);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,722,        List<FromBaseTable> tabs = visitor.getList();
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,723,"        Collections.sort(tabs, OFFSET_COMPARATOR);"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,724,        for (FromBaseTable fromTable : tabs) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,726,            if (!isTransitionTable(fromTable)) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,727,"                // baseTableName is not the NEW or OLD table, so no need"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,728,                // to do anything. Skip this table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,729,                continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,730,            }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,731,
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,734,            if (tokBeginOffset == -1) {
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,735,                // Unknown offset. Skip this table.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,736,                continue;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,737,            }
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,742,            // Replace the transition table name with a VTI.
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,755,            start = tokEndOffset - offset + 1;
java/engine/org/apache/derby/impl/sql/compile/OffsetOrderVisitor.java,40,public class OffsetOrderVisitor<T extends QueryTreeNode> implements Visitor {
java/engine/org/apache/derby/impl/sql/compile/OffsetOrderVisitor.java,64,"    public OffsetOrderVisitor(Class<T> nodeClass, int low, int high) {"
java/engine/org/apache/derby/impl/sql/compile/OffsetOrderVisitor.java,106,    public SortedSet<T> getNodes() {
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1572,}
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1573,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1574,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1575,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1576,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1577,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1578,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1579,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1580,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1581,
java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java,1582,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1919,                true);
java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java,520,   boolean createTriggerTime)
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerGeneralTest.java,656,"            ""insert into trighistory (\""cOlUmN1\"", \""cOlUmN2  \"", "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerGeneralTest.java,697,"        assertEquals(""insert into trighistory (\""cOlUmN1\"", \""cOlUmN2 """
java/engine/org/apache/derby/iapi/reference/Property.java,719,  * Externally visible but undocumented.
java/engine/org/apache/derby/iapi/reference/Property.java,722, int  LANG_SEQGEN_CACHE_SIZE_DEFAULT =32;
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10256,            if (SanityManager.DEBUG) {
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10257,                // We're not prepared for a non-existing base row.
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10258,"                SanityManager.ASSERT(baseRowExists, ""base row not found"");"
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10259,            }
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,107,    // This is the key used to lookup this generator in the cache.
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,110,    // This is the object which allocates ranges of sequence values
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,191,        if ( _sequenceGenerator != null )
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,192,        {
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,193,"            boolean gapClosed = updateCurrentValueOnDisk( null, peekAtCurrentValue() );"
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,207,        }
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,209,        _uuidString = null;
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,210,        _sequenceGenerator = null;
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,426,"                return updateCurrentValueOnDisk( nestedTransaction, oldValue, newValue, false );"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,74,    private final int           whenOffset;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,75,    private final int           actionOffset;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,265,     * @param whenOffset            offset of start of WHEN clause
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,268,  * @param actionOffset   offset of start of action clause
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,285,"        int             whenOffset,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,288,"        int             actionOffset,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,305,        this.whenOffset = whenOffset;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,309,        this.actionOffset = actionOffset;
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,646,"     actionOffset,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,658,"                            referencedColsInTriggerAction, whenOffset,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,675,"                    actionNode, originalActionText, actionOffset,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,676,                    actionTransformations);
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,679,"                        whenClause, originalWhenText, whenOffset,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,887,     * @param offset the offset of the WHEN clause or the triggered SQL
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,888,     *   statement within the CREATE TRIGGER statement
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,901,"            Visitable node, String originalText, int offset,"
java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java,902,            List<int[]> replacements)
java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java,295,            userAggregateName.bind( dd );
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,298,        if(columnsTableName != null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,299,            if(columnsTableName.getSchemaName() == null && correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,300,                columnsTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,321,        if(baseTableName != null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,322,            if(baseTableName.getSchemaName() == null && correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java,323,                baseTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,421, /**
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,422,   * Bind the  object Name. This means filling in the schema name if it
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,423,   * wasn't specified.
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,424,   *
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,425,   * @param dataDictionary Data dictionary to bind against.
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,426,   *
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,427,   * @exception StandardException  Thrown on error
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,428,   */
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,429, void bindName( DataDictionary dataDictionary )
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,430,                         throws StandardException
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,431, {
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,432,        if (tableName != null)
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,433,            tableName.bind( dataDictionary );
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,434, }
java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java,435,
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2338,        tableName.bind(dataDictionary);
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2796,                columnsTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2805,        if(exposedTableName.getSchemaName() == null && correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,2806,            exposedTableName.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4061,  TableName tn;
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4062,
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4063,  tn = super.getTableName();
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4065,        if(tn != null) {
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4066,            if(tn.getSchemaName() == null &&
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4067,               correlationName == null)
java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java,4068,                   tn.bind(this.getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/MergeNode.java,41,import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
java/engine/org/apache/derby/impl/sql/compile/MergeNode.java,363,        forbidSynonyms( dd );
java/engine/org/apache/derby/impl/sql/compile/MergeNode.java,431,    private void    forbidSynonyms( DataDictionary dd )    throws StandardException
java/engine/org/apache/derby/impl/sql/compile/MergeNode.java,433,"        forbidSynonyms( dd, _targetTable.getTableNameField().cloneMe() );"
java/engine/org/apache/derby/impl/sql/compile/MergeNode.java,436,"            forbidSynonyms( dd, ((FromBaseTable)_sourceTable).getTableNameField().cloneMe() );"
java/engine/org/apache/derby/impl/sql/compile/MergeNode.java,439,"    private void    forbidSynonyms( DataDictionary dd, TableName tableName ) throws StandardException"
java/engine/org/apache/derby/impl/sql/compile/MergeNode.java,441,        tableName.bind( dd );
java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java,90,        sequenceName.bind(getDataDictionary());
java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java,28,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java,124,        final DataDictionary dd = getDataDictionary();
java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java,125,
java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java,128,                c.bind(dd);
java/engine/org/apache/derby/impl/sql/compile/TableName.java,25,import org.apache.derby.iapi.reference.Property;
java/engine/org/apache/derby/impl/sql/compile/TableName.java,26,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/compile/TableName.java,28,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/TableName.java,29,import org.apache.derby.iapi.sql.dictionary.DataDictionary;
java/engine/org/apache/derby/impl/sql/compile/TableName.java,245,   * @param dataDictionary Data dictionary to bind against.
java/engine/org/apache/derby/impl/sql/compile/TableName.java,246,   *
java/engine/org/apache/derby/impl/sql/compile/TableName.java,249,    void    bind( DataDictionary    dataDictionary )
java/engine/org/apache/derby/impl/sql/compile/TableName.java,250,                         throws StandardException
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,36,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,53,import org.apache.derby.iapi.sql.dictionary.TriggerDescriptorList;
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1014,   TableDescriptor pktd = refcd.getTableDescriptor();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1015,   UUID pkuuid = refcd.getIndexId();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1016,   ConglomerateDescriptor pkIndexConglom = pktd.getConglomerateDescriptor(pkuuid);
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1018,   TableDescriptor refTd = cd.getTableDescriptor();
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1027,"                    pkuuid,                 // referenced backing index uuid"
java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java,1034,                                            // column referened by key
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,102,  * @param refUUID UUID of the referenced constraint
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,59,    private final int numColumns;
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,31,import org.apache.derby.iapi.sql.execute.ExecIndexRow;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,29,import static org.apache.derbyTesting.junit.BaseJDBCTestCase.usingDerbyNetClient;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,30,import static org.apache.derbyTesting.junit.BaseJDBCTestCase.usingEmbedded;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,524,"        // Delete of child row is trivial, parent no affected."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,616,"        // Delete of child row is trivial, parent no affected."
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,713,"     * Insert using bulk import code path, i.e. IMPORT. Since IMPORT"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,717,"     * IMPORT. This behavior can no be observed externally, but we include"
java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java,753,                    if (nestedTC != null && se.isLockTimeout())
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,358,"   if (AbstractPool.noLockWait(timeout, compatibilitySpace)) {"
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,359,
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,363,                if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/services/locks/ConcurrentLockSet.java,394,    return null;
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,459,                if ( !se.isLockTimeout() ) { throw se; }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,823,    if (se.getMessageId().equals(SQLState.LOCK_TIMEOUT))
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,1434,        findExistingConglomerate(conglomId).purgeConglomerate(
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,1435,"            this,"
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,1436,            rawtran);
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,552,        return(
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,553,            open_conglom.getContainer().getLockingPolicy().
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,554,                lockRecordForWrite(
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,555,"                    open_conglom.getRawTran(), rh, false, false));"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,444,            xactFactory.startNestedReadOnlyUserTransaction(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,445,"                this, compatibilitySpace, contextMgr, transName));"
java/engine/org/apache/derby/impl/store/raw/RawStore.java,455,            xactFactory.startNestedUpdateUserTransaction(
java/engine/org/apache/derby/impl/store/raw/RawStore.java,456,"                this, contextMgr, transName, flush_log_on_xact_end));"
java/engine/org/apache/derby/impl/store/raw/xact/InternalXact.java,59,"            xactFactory, logFactory, dataFactory, dataValueFactory,"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,275, protected Xact(
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,287,"                this, logFactory, dataFactory, dataValueFactory,"
java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java,429,"                this, logFactory, dataFactory, dataValueFactory,"
java/engine/org/apache/derby/impl/sql/compile/ValueNodeList.java,549,  ValueNode valueNode;
java/engine/org/apache/derby/impl/sql/compile/ValueNodeList.java,553,            valueNode = elementAt(index);
java/engine/org/apache/derby/impl/sql/compile/ValueNodeList.java,554,"   valueNode.preprocess(numTables,"
java/engine/org/apache/derby/impl/sql/compile/JoinNode.java,1076,    joinClause.preprocess(
java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java,267,"  value.preprocess(numTables,"
java/engine/org/apache/derby/impl/sql/compile/SelectNode.java,1088,"   whereClause.preprocess(numTables,"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,129,   runFkChecker(true); //check for only RESTRICT referential action rule violations
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,134,   runFkChecker(false); //check for all constraint violations
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,294, void runFkChecker(boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,302,    ((UpdateResultSet) dependentResultSets[i]).runChecker(restrictCheckOnly);
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,305,    ((DeleteCascadeResultSet)dependentResultSets[i]).runFkChecker(restrictCheckOnly);
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,312,   super.runFkChecker(restrictCheckOnly);
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,151,   runFkChecker(true); //check for only RESTRICT referential action rule violations
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,154,   runFkChecker(false); //check for all constraint violations
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,392,"                    fkChecker.doPKCheck(activation, row, false);"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,540,    void runFkChecker(boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,560,"                        activation, defRLRow, restrictCheckOnly);"
java/engine/org/apache/derby/impl/sql/execute/ForeignKeyRIChecker.java,84,                 boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,94,     * @param a     the activation
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,95,  * @param row the row to check
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,96,"     * @param restrictCheckOnly If {@code true}, only perform check if the"
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,97,     *              constraint action is RESTRICT.
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,103,                          boolean restrictCheckOnly) throws StandardException;
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,104,
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,105,"    public void doCheck(Activation a, ExecRow row) throws StandardException"
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,106, {
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,107,"        doCheck(a, row, false); //Check all the referential Actions"
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,108, }
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,89,  * @param row the row to check
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,96,                          boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,101,  for (int i = 0; i < checkers.length; i++)
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,102,  {
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,103,   if (checkers[i] instanceof ReferencedKeyRIChecker)
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,104,   {
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,105,"                checkers[i].doCheck(a, row,restrictCheckOnly);"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,106,   }
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,107,  }
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,110, /**
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,130,"                checkers[i].doCheck(a, row);"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,140,  * @param row  the row to check
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,148,                          boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,164,"        checkers[index].doCheck(a, row, restrictCheckOnly);"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,49,    private DataValueDescriptor[] refKey = new DataValueDescriptor[numColumns];
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,84,  *
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,91,                 boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,109,"                // It *is* deferred, go see if we have more than one row"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,110,                if (isDuplicated(row)) {
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,111,                    return;
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,173,    private boolean isDuplicated(ExecRow row)
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,191,"                    refKey,                 // startKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,194,"                    refKey,                 // stopKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,198,"                      refKey,             // startKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,201,"                      refKey,             // stopKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,205,        if (refKeyIndexScan.next()) {
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,206,            if (refKeyIndexScan.next()) {
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,207,"                // two matching rows found, all ok"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,208,                return true;
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,209,            } // else exactly one row contains key
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,210,        } else {
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,211,            // No rows contain key
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,214,        return false;
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,218,     * Clean up all scan controllers
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,270,   runChecker(true); //check for only RESTRICT referential action rule violations
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,275,   runChecker(false); //check for all  violations
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,929, void runChecker(boolean restrictCheckOnly) throws StandardException
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,964,      {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,965,                            riChecker.doRICheck(
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,966,"                                activation, i, deletedRow, restrictCheckOnly);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,1011,"                                activation, i, insertedRow, restrictCheckOnly);"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,1013,     }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,808,     * of them is deleted.  The foreign key constraint itself could be deferred
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,809,"     * or not. If this is also deferred, we'd have no issue, cf. the"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,810,"     * explanation in DERBY-6559, as all checking happens later, typically at"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,811,"     * commit.  But it is is <em>not</em> deferred, we needed to adjust FK"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,812,     * checking at delete/update time to <b>not</b> throw foreign key violation
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,813,     * exception if a duplicate exists; otherwise we'd throw a foreign key
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,814,     * violation where none exists. The remaining row(s) will fulfill the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,815,     * requirement. We will only check if the last such row is deleted or its
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,816,     * key modified.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,822,"                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,842,"            ResultSet rs = s.executeQuery(""select * from ref_t"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,501,         // the dependency between trigger action sps and trigger table
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,507,"            s.execute(""update ATDC_TAB1 set c12=11"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,512,"                s.execute(""update ATDC_TAB1 set c12=11"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java,514,"                assertStatementError(""42802"", s, "" update ATDC_TAB1 set c12=11"");"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,1,/*
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,2,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,3,   Derby - Class org.apache.derby.iapi.db.ConnectionInfo
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,4,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,5,   Licensed to the Apache Software Foundation (ASF) under one or more
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,6,   contributor license agreements.  See the NOTICE file distributed with
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,7,   this work for additional information regarding copyright ownership.
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,8,"   The ASF licenses this file to you under the Apache License, Version 2.0"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,9,"   (the ""License""); you may not use this file except in compliance with"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,10,   the License.  You may obtain a copy of the License at
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,11,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,12,      http://www.apache.org/licenses/LICENSE-2.0
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,13,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,14,"   Unless required by applicable law or agreed to in writing, software"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,15,"   distributed under the License is distributed on an ""AS IS"" BASIS,"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,16,"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,17,   See the License for the specific language governing permissions and
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,18,   limitations under the License.
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,19,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,20, */
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,21,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,22,package org.apache.derby.iapi.db;
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,23,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,24,import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,25,import org.apache.derby.iapi.sql.conn.ConnectionUtil;
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,26,import org.apache.derby.iapi.error.StandardException;
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,27,import org.apache.derby.iapi.error.PublicAPI;
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,28,import java.sql.SQLException;
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,29,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,30,/**
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,31, *
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,32, * ConnectionInfo class provides static methods for getting information
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,33, * related to a JDBC connection.
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,34, *
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,35," * When called from within the query language,"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,36, * each method returns information about the connection from which it was called.
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,37, * <p>
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,38, * Use the methods of this class only within an SQL-J statement; do not call
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,39, * them directly.
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,40, */
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,41,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,42,public abstract class ConnectionInfo
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,43,{
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,44,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,45, /** no requirement for a constructor */
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,46, private ConnectionInfo() {}
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,47,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,48,
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,49, /**
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,50,  * <B>INTERNAL USE ONLY</B>
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,51,  * (<B>THIS METHOD MAY BE REMOVED IN A FUTURE RELEASE</B>.)
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,52,  * @throws SQLException on error
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,53,  **/
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,54," public static long nextAutoincrementValue(String schemaName,"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,55,"             String tableName,"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,56,             String columnName
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,57,             )
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,58,      throws SQLException
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,59, {
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,60,  LanguageConnectionContext lcc = ConnectionUtil.getCurrentLCC();
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,61,  try
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,62,  {
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,63,   return
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,64,"    lcc.nextAutoincrementValue(schemaName, tableName, columnName);"
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,65,  }
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,66,  catch (StandardException se)
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,67,  {
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,68,   throw PublicAPI.wrapStandardException(se);
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,69,  }
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,70, }
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,71,}
java/engine/org/apache/derby/iapi/db/ConnectionInfo.java,72,
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,954,  * @see org.apache.derby.impl.sql.execute.AlterTableConstantAction#updateNewAutoincrementColumn
java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java,955,  *
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10181, void computeSequenceRowLocation
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,10225,    boolean updateCurrentSequenceValue
java/engine/org/apache/derby/impl/sql/compile/InsertNode.java,814,      inMatchingClause()
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1238,  if (columnDescriptor.isAutoincrement())
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1240,"            updateNewAutoincrementColumn(columnInfo[ix].name,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1241,"           columnInfo[ix].autoincStart,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,1242,           columnInfo[ix].autoincInc);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,2206,"                    ( columnInfo[ix], TableDescriptor.makeSequenceName( td.getUUID() ) );"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3474, /**
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3475,  * Update values in a new autoincrement column being added to a table.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3476,  * This is similar to updateNewColumnToDefault whereby we issue an
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3477,  * update statement using a nested connection. The UPDATE statement
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3478,  * uses a static method in ConnectionInfo (which is not documented)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3479,  * which returns the next value to be inserted into the autoincrement
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3480,  * column.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3481,  *
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3482,  * @param columnName autoincrement column name that is being added.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3483,  * @param initial    initial value of the autoincrement column.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3484,  * @param increment  increment value of the autoincrement column.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3485,  *
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3486,  * @see #updateNewColumnToDefault
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3487,  */
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3488,"    private void updateNewAutoincrementColumn(String columnName, long initial,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3489,            long increment)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3490,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3491, {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3492,  // Don't throw an error in bind when we try to update the
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3493,  // autoincrement column.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3494,  lcc.setAutoincrementUpdate(true);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3495,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3496,"  lcc.autoincrementCreateCounter(td.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3497,"            td.getName(),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3498,"                                       columnName, Long.valueOf(initial),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3499,"            increment, 0);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3500,  // the sql query is.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3501,  // UPDATE table
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3502,  //  set ai_column = ConnectionInfo.nextAutoincrementValue(
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3503,"  //       schemaName, tableName,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3504,  //       columnName)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3505,"        String updateStmt = ""UPDATE "" +"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3506,"            IdUtil.mkQualifiedName(td.getSchemaName(), td.getName()) +"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3507,"            "" SET "" + IdUtil.normalToDelimited(columnName) + ""="" +"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3508,"   ""org.apache.derby.iapi.db.ConnectionInfo::"" +"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3509,"   ""nextAutoincrementValue("" +"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3510,"            StringUtil.quoteStringLiteral(td.getSchemaName()) + "","" +"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3511,"            StringUtil.quoteStringLiteral(td.getName()) + "","" +"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3512,"            StringUtil.quoteStringLiteral(columnName) + "")"";"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3513,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3514,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3515,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3516,  try
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3517,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3518,"   AlterTableConstantAction.executeUpdate(lcc, updateStmt);"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3519,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3520,  catch (StandardException se)
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3521,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3522,   if (se.getMessageId().equals(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE))
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3523,   {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3524,"    // If overflow, override with more meaningful message."
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3525,"    throw StandardException.newException(SQLState.LANG_AI_OVERFLOW,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3526,"              se,"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3527,"              td.getName(),"
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3528,              columnName);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3529,   }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3530,   throw se;
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3531,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3532,  finally
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3533,  {
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3534,   // and now update the autoincrement value.
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3535,   lcc.autoincrementFlushCache(td.getUUID());
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3536,   lcc.setAutoincrementUpdate(false);
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3537,  }
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3538,
java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java,3539, }
java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java,757, protected NumberDataValue getCurrentValueAndAdvance
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,814,        boolean  underMerge
java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java,836,          underMerge
java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java,152,        boolean  underMerge)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,167, private NumberDataValue    aiCache[];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,375,   aiCache =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,376,    new NumberDataValue[rla.length];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,383,    aiCache[i] = (NumberDataValue)rcd.getType().getNull();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,728,        NumberDataValue dvd;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,744,   ColumnDescriptor cd = td.getColumnDescriptor(columnPosition);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,745,   long ret;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,746,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,747,   // for bulk insert we have the table descriptor
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,748,"   //   System.out.println(""in bulk insert"");"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,749,   if (aiCache[index].isNull())
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,750,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,751,                long startValue;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,752,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,753,    if (bulkInsertReplace)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,754,    {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,755,     startValue = cd.getAutoincStart();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,756,    }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,757,    else
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,758,    {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,759,     dvd = dd.getSetAutoincrementValue(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,760,"          constants.autoincRowLocation[index],"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,761,"       tc, false, aiCache[index], true);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,762,     startValue = dvd.getLong();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,763,    }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,764,"    lcc.autoincrementCreateCounter(td.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,765,"              td.getName(),"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,766,"              cd.getColumnName(),"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,767,"                                               Long.valueOf(startValue),"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,768,"              increment,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,769,              columnPosition);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,770,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,771,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,772,"   ret = lcc.nextAutoincrementValue(td.getSchemaName(),"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,773,"            td.getName(),"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,774,            cd.getColumnName());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,775,   aiCache[columnPosition - 1].setValue(ret);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,780,            TransactionController nestedTC = null;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,781,            TransactionController tcToUse;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,782,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,783,   try
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,784,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,785,"                // DERBY-5780, defaulting log syncing to false, which improves"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,786,                // performance of identity value generation.  If system
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,787,                // crashes may reuse an identity value because commit did not
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,788,"                // sync, but only if no subsequent user transaction has"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,789,                // committed or aborted and thus no row can exist that used
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,790,                // the previous value.  Without this identity values pay
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,791,                // a synchronous I/O to the log file for each new value no
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,792,                // matter how many are inserted in a single transaction.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,793,"    nestedTC = tc.startNestedUserTransaction(false, false);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,794,    tcToUse = nestedTC;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,795,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,796,   catch (StandardException se)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,797,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,798,    // If I cannot start a Nested User Transaction use the parent
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,799,    // transaction to do all the work.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,800,    tcToUse = tc;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,801,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,802,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,803,   try
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,804,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,805,"    /* If tcToUse == tc, then we are using parent xaction-- this"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,806,       can happen if for some reason we couldn't start a nested
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,807,       transaction
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,808,    */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,809,    newValue = dd.getSetAutoincrementValue(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,810,"         constants.autoincRowLocation[index],"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,811,"         tcToUse, true, aiCache[index], (tcToUse == tc));"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,812,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,813,   catch (StandardException se)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,814,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,815,    if (tcToUse == tc)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,816,    {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,817,     /* we've using the parent xaction and we've timed out; just
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,818,        throw an error and exit.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,819,     */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,820,     throw se;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,821,    }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,823,    if (
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,824,                    se.getMessageId().equals(SQLState.LOCK_TIMEOUT) ||
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,825,                    se.getMessageId().equals(SQLState.SELF_DEADLOCK)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,826,                    )
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,827,    {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,828,"     // if we couldn't do this with a nested xaction, retry with"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,829,     // parent-- we need to wait this time!
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,830,     newValue = dd.getSetAutoincrementValue(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,831,"         constants.autoincRowLocation[index],"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,832,"         tc, true, aiCache[index], true);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,833,    }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,834,    else if (se.getMessageId().equals(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE))
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,835,    {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,836,"     // if we got an overflow error, throw a more meaningful"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,837,     // error message
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,838,     throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,839,"             SQLState.LANG_AI_OVERFLOW,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,840,"             se,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,841,"             constants.getTableName(),"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,842,             constants.getColumnName(index));
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,843,    }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,844,    else throw se;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,845,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,846,   finally
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,847,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,848,"    // no matter what, commit the nested transaction; if something"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,849,    // bad happened in the child xaction lets not abort the parent
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,850,    // here.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,851,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,852,    if (nestedTC != null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,853,    {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,854,                    // DERBY-5493 - prior to fix all nested user update
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,855,                    // transactions did a nosync commit when commit() was
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,856,"                    // called, this default has been changed to do synced"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,857,                    // commit.  Changed this commit to be commitNoSync to
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,858,                    // not introduce performce degredation for autoincrement
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,859,"                    // keys.  As before, if server crashes the changes"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,860,                    // made in the nested transaction may be lost.  If any
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,861,"                    // subsequent user transaction is commited, including any"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,862,                    // inserts that would depend on the autoincrement value
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,863,                    // change then the nested tranaction is guaranteed on
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,864,                    // system crash.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,865,     nestedTC.commitNoSync(TransactionController.RELEASE_LOCKS);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,866,     nestedTC.destroy();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,867,    }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,868,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,874,  return aiCache[index];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,875,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1467,  lcc.autoincrementFlushCache(constants.targetUUID);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1150,        JDBC.assertFullResultSet(st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1151,"                ""select columnname,columnnumber,columndatatype,"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1152,"  ""       autoincrementvalue,"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1153,"  ""       autoincrementstart,"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1154,"  ""       autoincrementinc"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1155,"  "" from sys.syscolumns where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1156,"  ""      columnname = 'A' and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1157,"  ""      referenceid in (select tableid "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1158,"                ""             from sys.systables where tablename = 'D4693')""),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1159,"                new String[][]{ {""A"",""1"",""INTEGER NOT NULL"",""1"",""1"",""1""} });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1162,        JDBC.assertFullResultSet(st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1163,"                ""select columnname,columnnumber,columndatatype,"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1164,"  ""       autoincrementvalue,"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1165,"  ""       autoincrementstart,"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1166,"  ""       autoincrementinc"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1167,"  "" from sys.syscolumns where "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1168,"  ""      columnname = 'A2' and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1169,"  ""      referenceid in (select tableid "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1170,"                ""             from sys.systables where tablename = 'D4693')""),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1171,"                new String[][]{ {""A2"",""1"",""INTEGER NOT NULL"",""2"",""1"",""1""} });"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,1174,"                ""select a2, b from d4693""),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3192,        rs =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3193,                st.executeQuery(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3194,"                "" select COLUMNNAME, COLUMNNUMBER, COLUMNDATATYPE, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3195,"                "" COLUMNDEFAULT, AUTOINCREMENTVALUE, AUTOINCREMENTSTART, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3196,"                "" AUTOINCREMENTINC,  TABLENAME, TABLETYPE, LOCKGRANULARITY "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3197,"                "" from sys.syscolumns c,sys.systables t "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3198,"                ""where c.referenceid = t.tableid and t.tablename='D3175'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3199,"        JDBC.assertUnorderedResultSet(rs, new String[][]{"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3200,"                    {""X"", ""1"", ""VARCHAR(12)"", null, null, null, null, ""D3175"", ""T"", ""R""},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3201,"                    {""ID"", ""2"", ""INTEGER NOT NULL"", ""GENERATED_BY_DEFAULT"", ""3"", ""1"", ""1"", ""D3175"", ""T"", ""R""}"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,3202,                });
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,226,"  rs = s.executeQuery(""select COLUMNNAME, AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME = 'AIS'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,227,"  expectedRows=new String[][]{{""AIS"",""8"",""0"",""2""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,228,"  JDBC.assertFullResultSet(rs,expectedRows);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,229,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,383,"  rs=s.executeQuery(""select b.tablename, a.autoincrementvalue, a.autoincrementstart, a.autoincrementinc from sys.syscolumns a, sys.systables b where a.referenceid=b.tableid and a.columnname ='S1' and b.tablename = 'TAB1'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,384,"  expectedRows=new String[][]{{""TAB1"",""4"",""1"",""1""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,385,"  JDBC.assertFullResultSet(rs,expectedRows);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,392,"  rs=s.executeQuery(""select b.tablename, a.autoincrementvalue, a.autoincrementstart, a.autoincrementinc from sys.syscolumns a, sys.systables b where a.referenceid=b.tableid and a.columnname ='S1' and b.tablename = 'TAB2'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,393,"  expectedRows=new String[][]{{""TAB2"",""4"",""1"",""1""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,394,"  JDBC.assertFullResultSet(rs,expectedRows);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,495,"  expectedRows=new String[][]{{""APP     "",""UserTran"",""TABLE   "",""1   "",""S   "",""SYSCOLUMNS  "",""GRANT"",""ACTIVE""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,497,"  expectedRows=new String[][]{{""APP     "",""UserTran"",""TABLE   "",""1  "",""S"",""SYSCOLUMNS  "",""GRANT"",""ACTIVE""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,501,"  expectedRows=new String[][]{{""APP     "",""UserTran"",""TABLE   "",""1  "",""IX"",""LOCKT1      "",""GRANT"",""ACTIVE""},{""APP     "",""UserTran"",""ROW     "",""1  "",""X"",""LOCKT1      "",""GRANT"",""ACTIVE""},{""APP     "",""UserTran"",""TABLE   "",""1  "",""IX"",""SYSCOLUMNS  "",""GRANT"",""ACTIVE""},{""APP     "",""UserTran"",""TABLE   "",""1  "",""S"",""SYSCOLUMNS  "",""GRANT"",""ACTIVE""},{""APP     "",""UserTran"",""ROW     "",""2  "",""X"",""SYSCOLUMNS  "",""GRANT"",""ACTIVE""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,607,"  assertStatementError(""22003"", pst,""insert into ai_over1 (x) values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,608,"  assertStatementError(""22003"", pst,""insert into ai_over1 (x) values (1)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,610,"  assertStatementError(""22003"", pst,""insert into ai_over2 (x) values (9),(10)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,619,"  assertStatementError(""22003"", pst,""insert into ai_over3 (x) select x from ai_over3"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,621,"  s.executeUpdate(""insert into ai_over4 (x) values (1),(2)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,622,"  assertStatementError(""22003"", pst,""insert into ai_over4 (x) values (3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,624,"  expectedRows=new String[][]{{""1"",""9223372036854775805""},{""2"",""9223372036854775806""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,968,"  rs=s.executeQuery(""select COLUMNNAME, AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME = 'REC11'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,969,"  expectedRows=new String[][]{{""REC11"",""4"",""2"",""2""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,970,"  JDBC.assertFullResultSet(rs,expectedRows);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,1002,"  rs=s.executeQuery(""select COLUMNNAME, AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME = 'LOCKC11'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,1003,  //Utilities.showResultSet(rs);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,1004,"  expectedRows=new String[][]{{""LOCKC11"",""2"",""1"",""1""}};"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,1005,"  JDBC.assertFullResultSet(rs,expectedRows);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,1039,"  s.execute(""INSERT INTO derby_1645 (TESTTableId, TESTStringValue) VALUES (1, 'test1')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,1040,"  s.execute(""INSERT INTO derby_1645 (TESTTableId, TESTStringValue) VALUES (2, 'test2')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java,1041,"  s.execute(""INSERT INTO derby_1645 (TESTTableId, TESTStringValue) VALUES (3, 'test3')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,119,"             ""create table t1_01\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,125,"        String  sequenceName = getIdentitySequenceName( conn, ""t1_01"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,129,        String  sequenceStats =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,130,"            ""select\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,131,"            ""    c.schemaName, s.sequenceName, s.currentValue, s.startValue,\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,132,"            ""    s.minimumValue, s.maximumValue, s.increment, s.cycleoption\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,133,"            ""from sys.syssequences s, sys.sysschemas c\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,134,"            ""where s.schemaID = c.schemaID\n"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,139,"             sequenceStats,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,150,"             ""values syscs_util.syscs_peek_at_identity( 'APP', 'T1_01' )"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,163,"        goodStatement( conn, ""alter table t1_01 alter column a set increment by 15"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,167,"             sequenceStats,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,174,"        goodStatement( conn, ""alter table t1_01 alter column a restart with 500"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,178,"             sequenceStats,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,187,"        goodStatement( conn, ""drop table t1_01"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,191,"             sequenceStats,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,197,"        goodStatement( conn, ""create table t2_01( b int )"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,200,"              ""alter table t2_01 add column a int generated always as identity ( start with 10, increment by 20 )"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,206,"             ""create table t1_03\n"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,212,"        sequenceName = getIdentitySequenceName( conn, ""t1_03"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,216,"             sequenceStats,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,226,"             ""values syscs_util.syscs_peek_at_identity( 'APP', 'T1_03' )"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,233,"        goodStatement( conn, ""alter table t1_03 drop column a"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,237,"             sequenceStats,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,243,"             ""values syscs_util.syscs_peek_at_identity( 'APP', 'T1_03' )"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,253,"    private String  getIdentitySequenceName( Connection conn, String tableName )"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,256,        PreparedStatement   ps = chattyPrepare
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,257,"            ( conn, ""select tableID from sys.systables where tablename = ?"" );"
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,179,    protected   StandardException   tooMuchContentionException()
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,181,        return StandardException.newException
java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java,182,"            ( SQLState.LANG_TOO_MUCH_CONTENTION_ON_SEQUENCE, _sequenceGenerator.getName() );"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,24,import java.sql.Types;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,112, /**
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,113,     * Find a type to which we can cast the untyped NULLs generated by
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,114,     * the parser (for clauses such as ELSE NULL). This does not have to
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,115,     * be the type that the CASE expression ends up returning. It is
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,116,     * enough that it is a type that can be converted into the type of the
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,117,     * CASE expression in order to keep the type checking in the compiler
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,118,     * happy.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,119,  *
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,120,  * @param fromList        The fromList (required for Column References).
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,121,  *
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,122,  * @exception             StandardException Thrown on error.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,123,  */
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,124,    private DataTypeDescriptor findType(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,125,"        FromList fromList, SubqueryList subqueryList, List<AggregateNode> aggregates)"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,126,  throws StandardException
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,127, {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,128,"  /* We need to ""prebind"" because we want the Types.  Provide"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,129,   * dummy SubqueryList and AggreateList (we don't care)
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,130,   */
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,131,"        thenElseList.bindExpression(fromList, subqueryList, aggregates);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,132,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,133,        // Find the first typed expression.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,134,        DataTypeDescriptor dtd = thenElseList.getTypeServices();
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,135,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,136,        if (dtd == null) {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,137,"            // If none of the expressions have a type, we should probably have"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,138,"            // raised an error (DERBY-2002). However, Derby has always used the"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,139,"            // type CHAR(1) in this case, so return that for now."
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,140,            dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,141,"                                                            Types.CHAR, 1);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,142,        }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,143,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,144,        return dtd;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,145, }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,146,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,162,  // Don't do anything if we couldn't find a castType.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,163,  if (castType == null) return;
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,164,
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,234,"        // Following call to ""findType()""  and ""recastNullNodes"" will"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,235,"        // indirectly bind the expressions in the thenElseList, so no need"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,236,"        // to call ""thenElseList.bindExpression(...)"" after we do this."
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,237,        // DERBY-2986.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,238,"        recastNullNodes(findType(fromList, subqueryList, aggregates),"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,239,"                        fromList, subqueryList, aggregates);"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,260,  /* We can't determine the type for the result expression if
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,261,   * all result expressions are ?s.
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,262,   */
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,263,  if (thenElseList.containsAllParameterNodes())
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,264,  {
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,265,"   throw StandardException.newException(SQLState.LANG_ALL_RESULT_EXPRESSIONS_PARAMS, ""conditional"");"
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,266,  }
java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java,267,
java/shared/org/apache/derby/shared/common/reference/SQLState.java,924," String LANG_ALL_RESULT_EXPRESSIONS_PARAMS                          = ""42X87"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,521,"        // When all branches specify NULL, then Derby currently returns NULL"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,522,        // with type CHAR(1). It should have raised an error according to the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,523,        // SQL standard. See DERBY-2002.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,524,        String[] allNull = {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,527,"            ""values case when true then null when false then null else null end"""
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,529,        for (String sql : allNull) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/CaseExpressionTest.java,530,"            JDBC.assertSingleValueResultSet(s.executeQuery(sql), null);"
java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java,67,
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,25,import org.apache.derby.iapi.sql.execute.ConstantAction;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,26,import org.apache.derby.iapi.sql.execute.CursorResultSet;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,27,import org.apache.derby.iapi.sql.execute.NoPutResultSet;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,32,
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,33,import org.apache.derby.iapi.reference.SQLState;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,34,
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,35,import java.util.Vector;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,36,import java.util.Hashtable;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,37,import java.util.Enumeration;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,55, private String resultSetId;
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,129,"            runFkChecker(true, true); // check for only RESTRICT referential"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,131,"   Hashtable<String,String> mntHashTable = new Hashtable<String,String>(); //Hash Table to identify  mutiple node for same table cases."
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,134,   deleteDeferredRows();
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,135,"            runFkChecker(false, false); // check for all constraint violations"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,211,"    @SuppressWarnings(""UseOfObsoleteCollectionType"")"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,212," void fireBeforeTriggers(Hashtable<String,String> msht) throws StandardException"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,295,"    void runFkChecker(boolean restrictCheckOnly, boolean postCheck)"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,305,"                    restrictCheckOnly, postCheck);"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,309,"                    restrictCheckOnly, postCheck);"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,316,"            super.runFkChecker(restrictCheckOnly, postCheck);"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,360,"    @SuppressWarnings(""UseOfObsoleteCollectionType"")"
java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java,361," private void mergeRowHolders(Hashtable<String,String> msht) throws StandardException"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,25,
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,30,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,32,import org.apache.derby.iapi.sql.ResultDescription;
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,151,"            runFkChecker(true, true); // check for only RESTRICT referential"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,154,   deleteDeferredRows();
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,155,"            runFkChecker(false, false); //check for all constraint violations"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,397,"                    fkChecker.doPKCheck(activation, row, false, false, 2);"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,544, // make sure foreign key constraints are not violated
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,545,"    void runFkChecker(boolean restrictCheckOnly, boolean postCheck)"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,576,"                            postCheck,"
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,580,                if (postCheck) {
java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java,651,        close( constants.underMerge() );
java/engine/org/apache/derby/impl/sql/execute/FKInfo.java,365,"   str.append(""\nReferenced Key UUID:\t\t""+refUUID);"
java/engine/org/apache/derby/impl/sql/execute/ForeignKeyRIChecker.java,80,     * @param postCheck
java/engine/org/apache/derby/impl/sql/execute/ForeignKeyRIChecker.java,81,     *              dummy (interface obligation only)
java/engine/org/apache/derby/impl/sql/execute/ForeignKeyRIChecker.java,91,"                 boolean postCheck,"
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,101,     * @param postCheck
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,102,"     *              For referenced keys: if {@code true}, rows are not yet"
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,103,"     *              deleted, so do the check in the case of deferred PK later"
java/engine/org/apache/derby/impl/sql/execute/GenericRIChecker.java,113,"                          boolean postCheck,"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,94,     * @param postCheck
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,95,"     *              For referenced keys: if {@code true}, rows are not yet"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,96,"     *              deleted, so do the check in the case of deferred PK later."
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,107,"                          boolean postCheck,"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,118,"                                postCheck,"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,166,"                checkers[i].doCheck(a, row, false, false, 0);"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,180,     * @param postCheck
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,181,"     *              For referenced keys: if {@code true}, rows are not yet"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,182,"     *              deleted, so do the check in the case of deferred PK later"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,194,"                          boolean postCheck,"
java/engine/org/apache/derby/impl/sql/execute/RISetChecker.java,212,"            a, row, restrictCheckOnly, postCheck, deferredRowReq);"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,103,     * @param postCheck
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,104,"     *              For referenced keys: if {@code true}, rows are not yet"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,105,"     *              deleted, so do the check in the case of deferred PK later."
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,117,"                 boolean postCheck,"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,136,                if (postCheck) {
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,255,     * table table containing a key than the number of seen deletes of that key.
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,256,     * Only used when the referenced constraint id deferred.
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,292,"                            fkInfo.fkConstraintNames[0],"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,136,  * @param constantActionItem  id of the update constant action saved objec
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,211,   for (int i = 0; i < fkInfoArray.length; i++)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,212,   {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,213,    if (fkInfoArray[i].type == FKInfo.REFERENCED_KEY)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,214,    {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,215,     updatingReferencedKey = true;
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,216,     if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,217,     {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,218,"      SanityManager.ASSERT(constants.deferred, ""updating referenced key but update not deferred, wuzzup?"");"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,219,     }
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,220,    }
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,221,    else
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,222,    {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,223,     updatingForeignKey = true;
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,224,    }
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,225,   }
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,270,"            runChecker(true, true); // check for only RESTRICT referential"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,273,   updateDeferredRows();
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,276,"            runChecker(false, false); // check for all  violations"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,650,  ExecRow row = super.getNextRowCore( source );
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,652,"        if ( (row != null) && constants.underMerge() ) { row = processMergeRow( source, row ); }"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,654,        return row;
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,757,    double rowCount = tableScan.getEstimatedRowCount();
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,759,    if (rowCount > 0.0)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,761,     rowCount = rowCount / 0.75 + 1.0; // load factor
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,762,     if (rowCount < initCapacity)
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,763,      initCapacity = (int) rowCount;
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,841,"                    tc.OPENMODE_FORUPDATE|tc.OPENMODE_SECONDARY_LOCKED,"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,930,"    void runChecker(boolean restrictCheckOnly, boolean postCheck)"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,980,"                                    postCheck,"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,985,                    if (postCheck) {
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,1034,"                                postCheck, // N/A, not referenced key"
java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java,1154,        close( constants.underMerge() );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,837,            s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,838,"                ""create table ref_t(i int, j int, constraint ct "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,839,"                ""    primary key(i) deferrable initially deferred)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,840,            s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,841,"                ""create table t(i int unique not null, c char(1),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,842,"                ""    constraint c foreign key (i) references ref_t(i))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,843,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,844,"            s.executeUpdate(""insert into ref_t values (1,2),(1,3),(1,4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,845,"            s.executeUpdate(""insert into t values (1, 'c')"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,846,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,847,"            // Now, the child (referencing table) is referencing one of the the"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,848,"            // rows in the primary table whose value is 1, so the reference is"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,849,            // ok.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,850,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,851,            // What happens when we delete one copy before commit?
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,852,"            // Even though we have ON DELETE restrict action, there is another"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,853,            // row that would satisfy the constraint.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,854,"            rs = s.executeQuery(""select * from ref_t"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,855,            rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,856,            rs.deleteRow();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,857,            rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,858,            rs.deleteRow();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,859,"            // Now there should be only one left, so the referenced table is"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,860,            // OK.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,861,            commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,863,"            // Try again, but this time with normal delete, not using cursors"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,864,"            s.executeUpdate(""insert into ref_t values (1,5),(1,6)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,865,"            s.executeUpdate(""delete from ref_t where j > 4 "");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,866,            commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,868,"            // Try again, but this time delete both duplicate rows. The second"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,869,            // delete should fail.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,870,"            s.executeUpdate(""insert into ref_t values (1,3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,871,"            rs = s.executeQuery(""select * from ref_t"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,872,            rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,873,            rs.deleteRow();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,874,            rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,876,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,877,                rs.deleteRow();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,878,                fail();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,879,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,880,"                assertSQLState(LANG_FK_VIOLATION, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,883,"            s.executeUpdate(""insert into ref_t values (1,4), (1,5)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,885,            // direct delete code path
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,886,"            assertStatementError(LANG_FK_VIOLATION, s, ""delete from ref_t"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,888,            // deferred delete code path: not ok
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,889,"            assertStatementError(LANG_FK_VIOLATION, s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,890,"                    ""delete from ref_t where i = 1 and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,891,"                    ""    i in (select i from ref_t)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,893,            // deferred code path: OK
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,894,"            s.executeUpdate(""delete from ref_t where i = 1 and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,895,"                    ""    i in (select i from ref_t) and j >= 4"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,897,"            s.executeUpdate(""insert into ref_t values (1,4), (1,5)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,898,"            s.executeUpdate(""delete from ref_t where j >= 4"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,899,            JDBC.assertFullResultSet(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,900,"                    s.executeQuery(""select * from ref_t""),"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,901,"                    new String[][]{{""1"", ""3""}});"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,903,            commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,905,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,906,            // Try similar with update rather than delete. In this
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,907,"            // case there is only ever a deferred code path, so separate"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,908,            // teste cases as for delete (above) are not relevant.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,909,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,910,"            s.executeUpdate(""insert into ref_t values (1,4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,911,"            s.executeUpdate(""update ref_t set i = 2 where j = 4"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,912,"            s.executeUpdate(""insert into ref_t values (1,4)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,913,"            assertStatementError(LANG_FK_VIOLATION,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,914,"                                 s,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,915,"                                 ""update ref_t set i = 2"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,916,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,917,"            rs = s.executeQuery(""select * from ref_t"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,918,            rs.next();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,919,"            rs.updateInt(1, 3);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,920,            rs.updateRow();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,921,            rs.close();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,922,            commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,924,"            dropTable(""t"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,925,"            dropTable(""ref_t"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,926,            commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,928,            // Delete (deferred processing code path) with more complex FKs and
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,929,"            // more dups with different keys, so we can execise the postCheck"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,930,            // mechanism in ReferencedKeyRIChecker including row/key mappings
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,933,"                ""    constraint c primary key (k, i) initially deferred)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,936,"                ""    constraint c2 foreign key(i,k) references ref_t(k, i))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,938,"            // key (1, 100) has 3 dups, key (3,100) has two dups"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,940,"                            ""('a', 100, -1, 1),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,941,"                            ""('a', 100, -2, 1),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,942,"                            ""('a', 100, -3, 1),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,943,"                            ""('a', 100, -1, 2),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,944,"                            ""('a', 100, -2, 3),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,946,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,948,"                            ""(-11, 1, -4, 100),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,949,"                            ""(-12, 2, -5, 100),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,950,"                            ""(-13, 3, -6, 100)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,951,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,952,            // This should throw using the postCheck mechanism.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,953,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,954,                s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,955,"                    ""delete from ref_t where j < -1 and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,956,"                    ""    k in (select k from ref_t)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,957,                fail();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,958,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,959,"                assertSQLState(LANG_FK_VIOLATION, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,960,                String expected =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,961,"                    ""DELETE on table 'REF_T' caused a violation"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,962,"                    "" of foreign key constraint 'C2' for key (3,100).  "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,963,"                    ""The statement has been rolled back."";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,964,"                assertEquals(expected, e.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,965,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,966,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,967,"            // These should be ok (using the postCheck mechanism), since they"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,968,            // both leave one row in ref_t to satisfy the constraint.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,971,"                ""    k in (select k from ref_t where k < 3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,972,            s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,973,"                ""delete from ref_t where j < -2 and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,974,"                ""    k in (select k from ref_t where k >= 3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,976,            commit();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,978,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,979,            // Do the same exercise but now with update instead of delete
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,980,            //
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,990,"                ""    constraint c2 foreign key(i,k) references ref_t(k, i))"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,992,"            // key (1, 100) has 3 dups, key (3,100) has two dups"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,994,"                            ""('a', 100, -1, 1),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,995,"                            ""('a', 100, -2, 1),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,996,"                            ""('a', 100, -3, 1),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,997,"                            ""('a', 100, -1, 2),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,998,"                            ""('a', 100, -2, 3),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1000,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1002,"                            ""(-11, 1, -4, 100),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1003,"                            ""(-12, 2, -5, 100),"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1004,"                            ""(-13, 3, -6, 100)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1006,            // This should throw using the postCheck mechanism.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1007,            try {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1008,                s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1009,"                    ""update ref_t set k=k*100 where j < -1 and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1010,"                    ""    k in (select k from ref_t)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1011,                fail();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1012,            } catch (SQLException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1013,"                assertSQLState(LANG_FK_VIOLATION, e);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1014,                String expected =
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1015,"                    ""UPDATE on table 'REF_T' caused a violation"" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1016,"                    "" of foreign key constraint 'C2' for key (3,100).  "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1017,"                    ""The statement has been rolled back."";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1018,"                assertEquals(expected, e.getMessage());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1019,            }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1021,"            // These should be ok (using the postCheck mechanism), since they"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1022,            // both leave one row in ref_t to satisfy the constraint.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1023,            s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1024,"                ""update ref_t set k=k*100 where j < -1 and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1025,"                ""    k in (select k from ref_t where k < 3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1027,"                ""update ref_t set k=k*100 where j < -2 and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1028,"                ""    k in (select k from ref_t where k >= 3)"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1030,            commit();
java/testing/org/apache/derbyTesting/functionTests/tests/store/OSReadOnlyTest.java,175,
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,92,
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,93,
java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java,94,
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,343,"                    TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK,"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,345,"                    key,                 // startKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,348,"                    key,                 // stopKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,352,"                      key,             // startKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,353,"                      ScanController.GE,  // startSearchOp"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,354,"                      null,               // qualifier"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,355,"                      key,             // stopKeyValue"
java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java,356,                      ScanController.GT); // stopSearchOp
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,529,        throws PrivilegedActionException
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,536,"                     throws ClassNotFoundException, IllegalAccessException, InvocationTargetException, NoSuchMethodException"
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,539,"                     Class<? extends Object>  klass = Class.forName( queryParserMaker.substring( 0, lastDotIdx ) );"
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,598,        throws PrivilegedActionException
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,605,"                     throws ClassNotFoundException, IllegalAccessException, InvocationTargetException, NoSuchMethodException"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1681,        throws PrivilegedActionException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1688,"                     throws ClassNotFoundException, IllegalAccessException, InvocationTargetException, NoSuchMethodException"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1702,               NoSuchMethodException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1705,"        Class<? extends Object>  klass = Class.forName( analyzerMaker.substring( 0, lastDotIdx ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,931,    private void    loadTestTable( Connection conn ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,933,        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,935,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,937,             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,938,        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,940,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,962,             );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,964,    private void    unloadTestTable( Connection conn ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,966,        goodStatement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,968,"             conn,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java,970,             );
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,296,        if ( field == null ) { return null; }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,368,
java/engine/org/apache/derby/impl/io/JarStorageFactory.java,95,"                rightParen = dataDirectory.indexOf( ')', leftParen + 1);"
java/engine/org/apache/derby/impl/io/JarStorageFactory.java,28,import org.apache.derby.iapi.services.info.JVMInfo;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,107,     * with a param in the name. DERBY-4381 describes the problem when
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,108,"     * the param is in the path, but the cause is the same"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,110,    public void testConnectParamDBInJar() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,113,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,114,"        Connection beforejarconn = DriverManager.getConnection(""jdbc:derby:testparjardb;create=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,132,"       shutdownDB(""jdbc:derby:jar:(test)jardb.jar)testparjardb;shutdown=true"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,133,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,134,       // cleanup databases
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,135,"      File jarredpardb = new File(System.getProperty(""derby.system.home"")"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,136,"              + ""/test)jardb.jar"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,137,"      assertTrue(""failed deleting "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,138,"              jarredpardb.getPath(),jarredpardb.delete());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,139,"      removeDirectory(new File(System.getProperty(""derby.system.home"")"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBInJarTest.java,140,"              + ""/testparjardb"" ));"
java/client/org/apache/derby/client/ClientPooledConnection.java,42,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/ClientPooledConnection.java,110,"    public ClientPooledConnection(ClientBaseDataSourceRoot ds,"
java/client/org/apache/derby/client/ClientPooledConnection.java,159,"    public ClientPooledConnection(ClientBaseDataSourceRoot ds,"
java/client/org/apache/derby/client/ClientXAConnection.java,33,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/ClientXAConnection.java,49,"    public ClientXAConnection(ClientBaseDataSourceRoot ds,"
java/client/org/apache/derby/client/am/ClientConnection.java,46,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/am/ClientConnection.java,189,    public ClientBaseDataSourceRoot dataSource_;
java/client/org/apache/derby/client/am/ClientConnection.java,192,    private int clientSSLMode_ = ClientBaseDataSourceRoot.SSL_OFF;
java/client/org/apache/derby/client/am/ClientConnection.java,209,            ClientBaseDataSourceRoot dataSource)
java/client/org/apache/derby/client/am/ClientConnection.java,221,            ClientBaseDataSourceRoot dataSource)
java/client/org/apache/derby/client/am/ClientConnection.java,232,            ClientBaseDataSourceRoot dataSource)
java/client/org/apache/derby/client/am/ClientConnection.java,272,            ClientBaseDataSourceRoot.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/ClientConnection.java,285,            ClientBaseDataSourceRoot dataSource)
java/client/org/apache/derby/client/am/ClientConnection.java,294,        user_ = ClientBaseDataSourceRoot.propertyDefault_user;
java/client/org/apache/derby/client/am/ClientConnection.java,307,            ClientBaseDataSourceRoot.getSSLModeFromString(dataSource.getSsl());
java/client/org/apache/derby/client/am/ClientConnection.java,351,        user_ = ClientBaseDataSourceRoot.getUser(properties);
java/client/org/apache/derby/client/am/ClientConnection.java,353,            ClientBaseDataSourceRoot.getRetrieveMessageText(properties);
java/client/org/apache/derby/client/am/ClientConnection.java,358,        clientSSLMode_ = ClientBaseDataSourceRoot.getClientSSLMode(properties);
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,33,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,51,"            ClientBaseDataSourceRoot ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,61,"    ClientXAConnection newClientXAConnection(ClientBaseDataSourceRoot ds,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,229,"            ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java,257,"            ClientBaseDataSourceRoot dataSource,int rmId,"
java/client/org/apache/derby/client/am/LogWriter.java,37,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/am/LogWriter.java,38,import org.apache.derby.jdbc.ClientDataSourceInterface;
java/client/org/apache/derby/client/am/LogWriter.java,155,                ClientDataSourceInterface.TRACE_CONNECTION_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,158,                ClientDataSourceInterface.TRACE_RESULT_SET_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,162,                       ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,166,                       ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,169,                ClientDataSourceInterface.TRACE_STATEMENT_CALLS)) {
java/client/org/apache/derby/client/am/LogWriter.java,174,                ClientDataSourceInterface.TRACE_ALL)) // add a trace level for
java/client/org/apache/derby/client/am/LogWriter.java,181,                ClientDataSourceInterface.TRACE_ALL)) // add a trace level for
java/client/org/apache/derby/client/am/LogWriter.java,188,                ClientDataSourceInterface.TRACE_ALL)) // add a trace level for
java/client/org/apache/derby/client/am/LogWriter.java,194,        else if (loggingEnabled(ClientDataSourceInterface.TRACE_XA_CALLS) &&
java/client/org/apache/derby/client/am/LogWriter.java,197,        } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,200,        } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,203,        } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,206,        } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,209,        } else if (loggingEnabled(ClientDataSourceInterface.TRACE_ALL) &&
java/client/org/apache/derby/client/am/LogWriter.java,352,        if (!loggingEnabled(ClientDataSourceInterface.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,362,        if (!loggingEnabled(ClientDataSourceInterface.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,373,        if (!loggingEnabled(ClientDataSourceInterface.TRACE_DIAGNOSTICS)) {
java/client/org/apache/derby/client/am/LogWriter.java,389,                ClientDataSourceInterface.TRACE_PARAMETER_META_DATA) ||
java/client/org/apache/derby/client/am/LogWriter.java,413,                ClientDataSourceInterface.TRACE_RESULT_SET_META_DATA) ||
java/client/org/apache/derby/client/am/LogWriter.java,492,    void traceConnectEntry(ClientBaseDataSourceRoot dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,494,                ClientDataSourceInterface.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,497,        if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,508,                ClientDataSourceInterface.TRACE_DRIVER_CONFIGURATION)) {
java/client/org/apache/derby/client/am/LogWriter.java,511,        if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,518,"            String user, ClientBaseDataSourceRoot ds) {"
java/client/org/apache/derby/client/am/LogWriter.java,521,        if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,527,        if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,533,        if (loggingEnabled(ClientDataSourceInterface.TRACE_CONNECTS)) {
java/client/org/apache/derby/client/am/LogWriter.java,541,    private void traceConnectsResetEntry(ClientBaseDataSourceRoot dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,552,    private void traceConnectsEntry(ClientBaseDataSourceRoot dataSource) {
java/client/org/apache/derby/client/am/LogWriter.java,718,    private Properties getProperties(ClientBaseDataSourceRoot cds)
java/client/org/apache/derby/client/am/LogWriter.java,721,        Properties properties = ClientBaseDataSourceRoot.getProperties(cds);
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,48,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,80,"            ClientBaseDataSourceRoot ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,90,"    public ClientXAConnection newClientXAConnection(ClientBaseDataSourceRoot ds,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,291,"            ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java,323,"            ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,51,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/net/NetConnection.java,207,        String password = ClientBaseDataSourceRoot.getPassword(properties);
java/client/org/apache/derby/client/net/NetConnection.java,209,                ClientBaseDataSourceRoot.getSecurityMechanism(properties);
java/client/org/apache/derby/client/net/NetConnection.java,221,"                         ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,254,"                         ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,266,"                            ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/net/NetConnection.java,1383,        // (see ClientBaseDataSourceRoot.updateDataSourceValues().
java/client/org/apache/derby/client/net/NetXAConnection.java,32,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/net/NetXAConnection.java,68,"            ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/net/NetXAConnection.java,232,"            ClientBaseDataSourceRoot dataSource,"
java/client/org/apache/derby/client/net/OpenSocketAction.java,36,import org.apache.derby.jdbc.ClientBaseDataSourceRoot;
java/client/org/apache/derby/client/net/OpenSocketAction.java,63,        case ClientBaseDataSourceRoot.SSL_BASIC:
java/client/org/apache/derby/client/net/OpenSocketAction.java,66,        case ClientBaseDataSourceRoot.
java/client/org/apache/derby/client/net/OpenSocketAction.java,70,        case ClientBaseDataSourceRoot.SSL_OFF:
java/client/org/apache/derby/jdbc/BasicClientConnectionPoolDataSource40.java,123,     * @see ClientBaseDataSourceRoot#maxStatementsToPool
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,27," * This datasource is suitable for client/server use of Derby,"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,34,public class BasicClientDataSource40
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,35,    extends ClientBaseDataSourceRoot implements DataSource {
java/client/org/apache/derby/jdbc/BasicClientXADataSource40.java,29," * This datasource is suitable for client/server use of Derby,"
java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java,107,     * @see ClientBaseDataSource#maxStatementsToPool
java/client/org/apache/derby/jdbc/ClientDataSource.java,25," * This datasource is suitable for a client/server use of Derby,"
java/client/org/apache/derby/jdbc/ClientDataSource.java,78, * This simple data source subclass of ClientBaseDataSource maintains
java/client/org/apache/derby/jdbc/ClientDataSource.java,92,public class ClientDataSource extends ClientBaseDataSource {
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,137,    // ---------------------------- traceLevel -------------------------------
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,138,    //
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,139,
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,140,    public final static int TRACE_NONE = 0x0;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,141,    public final static int TRACE_CONNECTION_CALLS = 0x1;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,142,    public final static int TRACE_STATEMENT_CALLS = 0x2;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,143,    public final static int TRACE_RESULT_SET_CALLS = 0x4;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,144,    public final static int TRACE_DRIVER_CONFIGURATION = 0x10;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,145,    public final static int TRACE_CONNECTS = 0x20;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,146,    public final static int TRACE_PROTOCOL_FLOWS = 0x40;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,147,    public final static int TRACE_RESULT_SET_META_DATA = 0x80;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,148,    public final static int TRACE_PARAMETER_META_DATA = 0x100;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,149,    public final static int TRACE_DIAGNOSTICS = 0x200;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,150,    public final static int TRACE_XA_CALLS = 0x800;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,151,    public final static int TRACE_ALL = 0xFFFFFFFF;
java/client/org/apache/derby/jdbc/ClientDataSourceInterface.java,152,    public final static int propertyDefault_traceLevel = TRACE_ALL;
java/client/org/apache/derby/jdbc/ClientDriver.java,130,                port = ClientBaseDataSourceRoot.propertyDefault_portNumber;
java/client/org/apache/derby/jdbc/ClientDriver.java,143,                    ClientBaseDataSourceRoot.getTraceLevel(augmentedProperties);
java/client/org/apache/derby/jdbc/ClientDriver.java,155,                ClientBaseDataSourceRoot.computeDncLogWriterForNewConnection(
java/client/org/apache/derby/jdbc/ClientDriver.java,157,                    ClientBaseDataSourceRoot.getTraceDirectory(
java/client/org/apache/derby/jdbc/ClientDriver.java,159,                    ClientBaseDataSourceRoot.getTraceFile(
java/client/org/apache/derby/jdbc/ClientDriver.java,161,                    ClientBaseDataSourceRoot.getTraceFileAppend(
java/client/org/apache/derby/jdbc/ClientDriver.java,257,                    ClientBaseDataSourceRoot.propertyDefault_user));
java/client/org/apache/derby/jdbc/ClientDriver.java,423,        return ClientBaseDataSourceRoot.tokenizeAttributes(
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,30," * This datasource is suitable for an application using embedded Derby,"
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,39, public class BasicEmbeddedDataSource40 extends EmbeddedBaseDataSource
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,42,   private static final long serialVersionUID = -4945135214995641182L;
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,30," * This datasource is suitable for an application using embedded Derby,"
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,118,    public final synchronized void setDatabaseName(String databaseName) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,141,    protected String getShortDatabaseName() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,151,    public final void setDataSourceName(String dsn) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,158,    public final String getDataSourceName() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,168,    public final void setDescription(String desc) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,175,    public final String getDescription() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,185,    public final void setUser(String user) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,192,    public final String getUser() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,202,    public final void setPassword(String password) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,209,    public final String getPassword() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,344,    public final void setCreateDatabase(String create) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,357,    public final String getCreateDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,409,    public final void setConnectionAttributes(String prop) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,419,    public final String getConnectionAttributes() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,430,    public final void setShutdownDatabase(String shutdown) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,442,    public final String getShutdownDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,459,    public final void setAttributesAsPassword(boolean attributesAsPassword) {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,468,    public final boolean getAttributesAsPassword() {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,634,     * Returns false unless {@code interfaces} is implemented.
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,636,     * @param iface a class defining an interface
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,642,    public boolean isWrapperFor(Class<?> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedBaseDataSource.java,643,        return iface.isInstance(this);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,34,"    This datasource is suitable for an application using embedded Derby,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,93,                                    java.util.Hashtable environment)
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java,2341,                new Integer(ClientDataSourceInterface.TRACE_ALL));
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,27," * This datasource is suitable for an application using embedded Derby,"
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,54,    /**
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,55,     * @see javax.sql.ConnectionPoolDataSource#getPooledConnection()
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,56,     */
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,61,    /**
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,62,     * @see javax.sql.ConnectionPoolDataSource#getPooledConnection(
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,63,"     *      String, String)"
java/engine/org/apache/derby/jdbc/BasicEmbeddedConnectionPoolDataSource40.java,64,     */
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,36," * BasicEmbeddedDataSource40 is similar to EmbeddedDataSource40, but does"
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,40, * @see EmbeddedDataSource40
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,42,public class BasicEmbeddedDataSource40 extends EmbeddedBaseDataSource
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,43,    implements javax.sql.DataSource {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,47,    public BasicEmbeddedDataSource40() {}
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,50,    public void setLoginTimeout(int seconds) throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,51,        super.setLoginTimeout(seconds);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,55,    public int getLoginTimeout() throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,56,        return super.getLoginTimeout();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,60,    public void setLogWriter(PrintWriter logWriter)
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,61,            throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,62,        super.setLogWriter(logWriter);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,66,    public PrintWriter getLogWriter() throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,67,        return super.getLogWriter();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,71,    public final void setPassword(String password) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,72,        super.setPassword(password);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,76,    public final String getPassword() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,77,        return super.getPassword();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,81,    public void setDatabaseName(String databaseName) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,82,        super.setDatabaseName(databaseName);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,86,    public String getDatabaseName() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,87,        return super.getDatabaseName();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,91,    public void setDataSourceName(String dataSourceName) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,92,        super.setDataSourceName(dataSourceName);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,96,    public String getDataSourceName() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,97,        return super.getDataSourceName();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,101,    public void setDescription(String description) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,102,        super.setDescription(description);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,106,    public String getDescription() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,107,        return super.getDescription();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,111,    public void setUser(String user) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,112,        super.setUser(user);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,116,    public String getUser() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,117,        return super.getUser();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,121,    public final void setCreateDatabase(String create) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,122,        super.setCreateDatabase(create);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,126,    public final String getCreateDatabase() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,127,        return super.getCreateDatabase();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,131,    public final void setShutdownDatabase(String shutdown) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,132,        super.setShutdownDatabase(shutdown);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,136,    public final String getShutdownDatabase() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,137,        return super.getShutdownDatabase();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,141,    public final void setConnectionAttributes(String prop) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,142,        super.setConnectionAttributes(prop);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,146,    public final String getConnectionAttributes() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,147,        return super.getConnectionAttributes();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,152,    public Connection getConnection() throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,153,        return super.getConnection();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,157,"    public Connection getConnection(String user, String password)"
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,158,            throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,159,"        return super.getConnection(user, password);"
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,163,    public final Logger getParentLogger() throws SQLFeatureNotSupportedException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,164,        return super.getParentLogger();
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,168,    public boolean isWrapperFor(Class<?> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,169,        return super.isWrapperFor(iface);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,173,    public <T> T unwrap(Class<T> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,174,        return super.unwrap(iface);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,178,    public final void setAttributesAsPassword(boolean attributesAsPassword) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,179,        super.setAttributesAsPassword(attributesAsPassword);
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,183,    public final boolean getAttributesAsPassword() {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,184,        return super.getAttributesAsPassword();
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,59,    /**
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,60,     * @see javax.sql.XADataSource#getXAConnection()
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,61,     */
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,71,    /**
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,72,"     * @see javax.sql.XADataSource#getXAConnection(String, String)"
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,73,     */
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,91,    /**
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,92,     * Instantiate and return an EmbedXAConnection from this instance
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,93,     * of EmbeddedXADataSource.
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,94,     *
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,95,     * @param user
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,96,     * @param password
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,97,     * @return XAConnection
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,98,     * @throws SQLException if a connection can't be created
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,99,     */
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,103,    final EmbeddedBaseDataSource dataSource;
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,121,"    EmbedPooledConnection(EmbeddedBaseDataSource ds, String u, String p,"
java/engine/org/apache/derby/jdbc/EmbedXAConnection.java,48,"   EmbedXAConnection(EmbeddedBaseDataSource ds,"
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,25,import java.sql.SQLFeatureNotSupportedException;
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,26,import java.util.logging.Logger;
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,29,import org.apache.derby.impl.jdbc.Util;
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,108,    /**
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,109,     * Create and return an EmbedPooledConnection from this instance
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,110,     * of EmbeddedConnectionPoolDataSource.
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,111,     */
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java,26,   separate datasources for Java 5 and Java 6.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,24,import java.io.PrintWriter;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,28,import java.sql.Connection;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,29,import java.sql.SQLException;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,30,import java.sql.SQLFeatureNotSupportedException;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,31,import java.util.logging.Logger;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,256,    /**
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,257,     * Add Java Bean properties to the reference using
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,258,     * StringRefAddr for each property. List of bean properties
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,259,     * is defined from the public getXXX() methods on this object
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,260,"     * that take no arguments and return short, int, boolean or String."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,261,"     * The StringRefAddr has a key of the Java bean property name,"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,262,     * converted from the method name. E.g. traceDirectory for
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,263,     * traceDirectory.
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,264,     *
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,265,     */
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,271,        for (int i = 0; i < methods.length; i++) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,272,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,273,            Method m = methods[i];
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,274,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,288,            Class returnType = m.getReturnType();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,300,                        methodName.substring(4));
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,303,"                    Object ov = m.invoke(ths, null);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,317,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,318,    public void setLoginTimeout(int seconds) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,319,        super.setLoginTimeout(seconds);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,320,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,321,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,322,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,323,    public int getLoginTimeout() throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,324,        return super.getLoginTimeout();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,325,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,326,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,327,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,328,    public void setLogWriter(PrintWriter logWriter)
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,329,            throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,330,        super.setLogWriter(logWriter);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,331,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,332,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,333,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,334,    public PrintWriter getLogWriter() throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,335,        return super.getLogWriter();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,336,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,337,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,338,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,339,    public final void setPassword(String password) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,340,        super.setPassword(password);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,341,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,342,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,343,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,344,    public final String getPassword() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,345,        return super.getPassword();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,346,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,347,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,348,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,349,    public void setDatabaseName(String databaseName) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,350,        super.setDatabaseName(databaseName);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,351,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,352,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,353,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,354,    public String getDatabaseName() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,355,        return super.getDatabaseName();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,356,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,357,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,358,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,359,    public void setDataSourceName(String dataSourceName) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,360,        super.setDataSourceName(dataSourceName);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,361,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,362,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,363,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,364,    public String getDataSourceName() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,365,        return super.getDataSourceName();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,366,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,367,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,368,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,369,    public void setDescription(String description) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,370,        super.setDescription(description);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,371,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,372,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,373,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,374,    public String getDescription() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,375,        return super.getDescription();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,376,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,377,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,378,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,379,    public void setUser(String user) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,380,        super.setUser(user);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,381,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,382,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,383,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,384,    public String getUser() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,385,        return super.getUser();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,386,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,387,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,388,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,389,    public final void setCreateDatabase(String create) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,390,        super.setCreateDatabase(create);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,391,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,392,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,393,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,394,    public final String getCreateDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,395,        return super.getCreateDatabase();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,396,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,397,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,398,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,399,    public final void setShutdownDatabase(String shutdown) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,400,        super.setShutdownDatabase(shutdown);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,401,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,402,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,403,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,404,    public final String getShutdownDatabase() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,405,        return super.getShutdownDatabase();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,406,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,407,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,408,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,409,    public final void setConnectionAttributes(String prop) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,410,        super.setConnectionAttributes(prop);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,411,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,412,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,413,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,414,    public final String getConnectionAttributes() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,415,        return super.getConnectionAttributes();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,416,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,417,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,418,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,419,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,420,    public Connection getConnection() throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,421,        return super.getConnection();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,422,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,423,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,424,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,425,"    public Connection getConnection(String user, String password)"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,426,            throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,427,"        return super.getConnection(user, password);"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,428,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,429,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,430,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,431,    public final Logger getParentLogger() throws SQLFeatureNotSupportedException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,432,        return super.getParentLogger();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,433,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,434,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,435,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,436,    public boolean isWrapperFor(Class<?> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,437,        return super.isWrapperFor(iface);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,438,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,439,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,440,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,441,    public <T> T unwrap(Class<T> iface) throws SQLException {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,442,        return super.unwrap(iface);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,443,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,444,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,445,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,446,    public final void setAttributesAsPassword(boolean attributesAsPassword) {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,447,        super.setAttributesAsPassword(attributesAsPassword);
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,448,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,449,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,450,    @Override
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,451,    public final boolean getAttributesAsPassword() {
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,452,        return super.getAttributesAsPassword();
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,453,    }
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,454,
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java,27,   separate datasources for Java 5 and Java 6.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,26,import org.apache.derby.iapi.db.Database;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,27,import org.apache.derby.iapi.error.ExceptionSeverity;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,29,import org.apache.derby.iapi.reference.MessageId;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,30,import org.apache.derby.iapi.reference.Property;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,31,import org.apache.derby.iapi.services.i18n.MessageService;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,32,import org.apache.derby.iapi.services.monitor.Monitor;
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,37,"    This datasource is suitable for an application using embedded Derby,"
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,73,public class EmbeddedXADataSource extends EmbeddedDataSource implements EmbeddedXADataSourceInterface
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,131,   protected void update() {
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,137,    /**
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,138,     * Instantiate and return an EmbedXAConnection from this instance
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,139,     * of EmbeddedXADataSource.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,140,     *
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,141,     * @param user
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,142,     * @param password
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,143,     * @return XAConnection
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,144,     */
java/engine/org/apache/derby/jdbc/InternalDriver.java,798,"            EmbeddedBaseDataSource eds, String user, String password,"
java/engine/org/apache/derby/jdbc/InternalDriver.java,805,     * EmbeddedBaseDataSource.
java/engine/org/apache/derby/jdbc/InternalDriver.java,808,"            EmbeddedBaseDataSource eds, ResourceAdapter ra,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,23,import java.lang.reflect.*;
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,50, * @see org.apache.derby.jdbc.EmbeddedDataSource40
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,52, * @see org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,54, * @see org.apache.derby.jdbc.EmbeddedXADataSource40
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,57,public class ReferenceableDataSource extends EmbeddedBaseDataSource
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,115,    /** Reflect lookup for Java bean method taking a single String arg */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,116,"    private static final Class[] STRING_ARG = { """".getClass() };"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,117,    /** Reflect lookup for Java bean method taking a single int arg */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,118,    private static final Class[] INT_ARG = { Integer.TYPE };
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,119,    /** Reflect lookup for Java bean method taking a single boolean arg */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,120,    private static final Class[] BOOLEAN_ARG = { Boolean.TYPE };
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,121,    /** Reflect lookup for Java bean method taking a single short arg */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,122,    private static final Class[] SHORT_ARG = { Short.TYPE };
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,123,
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,124,    /**
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,125,     * Set the Java bean properties for an object from its Reference. The
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,126,     * Reference contains a set of StringRefAddr values with the key being the
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,127,     * bean name and the value a String representation of the bean's value. This
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,128,     * code looks for setXXX() method where the set method corresponds to the
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,129,"     * standard bean naming scheme and has a single parameter of type String,"
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,130,"     * int, boolean or short."
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,131,     */
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,135,        for (Enumeration e = ref.getAll(); e.hasMoreElements();) {
java/engine/org/apache/derby/jdbc/ReferenceableDataSource.java,137,            RefAddr attribute = (RefAddr) e.nextElement();
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,50,"            ""org.apache.derby.jdbc.EmbeddedDataSource40"":"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,54,"            ""org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40"":"
java/testing/org/apache/derbyTesting/junit/JDBCClient.java,58,"            ""org.apache.derby.jdbc.EmbeddedXADataSource40"":"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,233,        // ---------------------------- loginTimeout ------------------------------
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,273,"    // Stores the relational database name, RDBNAME."
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,274,    // The length of the database name may be limited to 18 bytes
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,275,    // and therefore may throw an SQLException.
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,276,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,277,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,284,    // A description of this data source.
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,289,    // A data source name;
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,290,"    // used to name an underlying XADataSource,"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,291,    // or ConnectionPoolDataSource when pooling of connections is done.
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,292,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,296,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,300,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,301,    // Derby-410 fix.
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,302,    private String serverName = propertyDefault_serverName;
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,375,    // This property can be overwritten by specifing the
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,376,    // username parameter on the DataSource.getConnection() method
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,377,"    // call.  If user is specified, then password must also be"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,378,"    // specified, either in the data source object or provided on"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,379,    // the DataSource.getConnection() call.
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,380,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,381,    // Each data source implementation subclass will maintain it's own
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,382,    // <code>password</code> property.  This password property may or may not
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,383,"    // be declared transient, and therefore may be serialized to a file in"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,384,"    // clear-text, care must taken by the user to prevent security breaches."
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,385,    // Derby-406 fix
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,427,    // Security Mechanism can be specified explicitly either when obtaining a
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,428,    // connection via a DriverManager or via Datasource.
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,429,"    // Via DriverManager, securityMechanism can be set on the connection"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,430,    // request using the 'securityMechanism' attribute.
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,431,"    // Via DataSource, securityMechanism can be set by calling"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,432,    // setSecurityMechanism() on the ClientDataSource
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,433,"    // If the security mechanism is not explicitly set as mentioned above, in"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,434,    // that case the Client will try to upgrade the security mechanism to a
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,435,"    // more secure one, if possible."
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,436,    // @see #getUpgradedSecurityMechanism
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,437,"    // Therefore, need to keep track if the securityMechanism has been"
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,438,    // explicitly set
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,529,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,540,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,550,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,601,    //
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,871,    // -- Stardard JDBC DataSource Properties
java/client/org/apache/derby/jdbc/BasicClientDataSource40.java,1107,
java/drda/org/apache/derby/impl/drda/XADatabase.java,61,     **/
java/drda/org/apache/derby/impl/drda/XADatabase.java,62,    synchronized void makeConnection(Properties p) throws
java/drda/org/apache/derby/impl/drda/XADatabase.java,63, SQLException
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,65,     * Derby specific connection attributes.
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,77,"     * Set to ""shutdown"" if the database should be shutdown."
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,87,    // shortDatabaseName has attributes of databaseName stripped off
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,94,    // instance variables that will not be serialized
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,98,"    // Unlike a DataSource, LocalDriver is shared by all"
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,99,    // Derby databases in the same jvm.
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,140,    //
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,141,    // Return database name with ant attributes stripped off.
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,142,    //
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,497,    // Most of our customers would be using JNDI to get the data
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,498,"    // sources. Since we don't have a jndi in the test setup to test this, we"
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,499,    // are adding this method to fake it. This is getting used in XAJNDITest
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,500,    // so we can compare the two data sources.
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,502,    public boolean equals(Object p0) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,504,        if (p0 instanceof EmbeddedDataSource) {
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,505,            EmbeddedDataSource ds = (EmbeddedDataSource)p0;
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,630,    // requestPassword Use {@code true} if the password came from the
java/engine/org/apache/derby/jdbc/BasicEmbeddedDataSource40.java,631,    // getConnection() call.
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,48,    // link to the database
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,80,    // implementation methods
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,88,    // Instantiate and return an EmbedXAConnection from this instance
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,89,    // of EmbeddedXADataSource.
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,107,    //
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,108,    // Create and return an EmbedPooledConnection from this instance
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,109,    // of EmbeddedConnectionPoolDataSource.
java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource.java,110,    //
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,252,    //
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,253,    // Add Java Bean properties to the reference using
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,254,    // StringRefAddr for each property. List of bean properties
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,255,    // is defined from the public getXXX() methods on this object
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,256,"    // that take no arguments and return short, int, boolean or String."
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,257,"    // The StringRefAddr has a key of the Java bean property name,"
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,258,    // converted from the method name. E.g. traceDirectory for
java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java,259,    // traceDirectory.
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,27, * <p>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,28, * EmbeddedDataSourceInterface provides support for JDBC standard DataSource
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,29, * attributes
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,30, * <p>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,31," * The standard attributes provided by implementations are, cf. e.g. table"
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,32, * 9.1 in the JDBC 4.1 specification.
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,33, * <ul>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,34, *   <li>databaseName</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,35, *   <li>dataSourceName</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,36, *   <li>description</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,37, *   <li>password</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,38, *   <li>user</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,39, * </ul>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,40, * The embedded Derby driver also supports these attributes:
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,41, * <ul>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,42, *   <li>loginTimeout</li> @see javax.sql.CommonDataSource set/get
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,43, *   <li>logWriter</li> @see javax.sql.CommonDataSource set/get
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,44, *   <li>createDatabase</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,45, *   <li>connectionAttributes</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,46, *   <li>shutdownDatabase</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,47, *   <li>attributesAsPassword</li>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,48, * </ul>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,49, * <br>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,50, * See the specific Derby DataSource implementation for details on their
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,51, * meaning.
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,52, * <br>
java/engine/org/apache/derby/jdbc/EmbeddedDataSourceInterface.java,53, * See the JDBC specifications for more details.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,73, // link to the database
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,124, /*
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,125,  * private method
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,126,  */
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,127,
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,135,    //
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,136,    // Instantiate and return an EmbedXAConnection from this instance
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,137,    // of EmbeddedXADataSource.
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,175,     *
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,176,     * @return The ResourceAdapter instance for
java/engine/org/apache/derby/jdbc/EmbeddedXADataSource.java,177,     *         the underlying database
java/testing/org/apache/derbyTesting/junit/EnvTest.java,43,"  setName(JDBC.vmSupportsJSR169() + ""_vmSupportsJSR169()"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,46,"  setName(JDBC.vmSupportsJDBC3() + ""_vmSupportsJDBC3()"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,47, }
java/testing/org/apache/derbyTesting/junit/EnvTest.java,48, public void testJDBC4() {
java/testing/org/apache/derbyTesting/junit/EnvTest.java,49,"  setName(JDBC.vmSupportsJDBC4() + ""_vmSupportsJDBC4()"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,56,"  setName(Derby.hasServer() + ""_hasServer"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,59,"  setName(Derby.hasClient() + ""_hasClient"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,62,"  setName(Derby.hasEmbedded() + ""_hasEmbedded"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,65,"  setName(Derby.hasTools() + ""_hasTools"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,71,"        setName(XML.classpathHasJAXP() + ""_classpathHasJAXP"");"
java/testing/org/apache/derbyTesting/junit/EnvTest.java,74,"        setName(XML.classpathMeetsXMLReqs() + ""_classpathMeetsXMLReqs"");"
java/engine/org/apache/derby/jdbc/BasicEmbeddedXADataSource40.java,88,     * Also clears {@link ra}.
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,124,    private List<List<Set<String>>> distinctValues;
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,242,                distinctValues =
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,243,                        new ArrayList<List<Set<String>>>(resultRows.length);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,252,                    distinctValues.add(
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,253,                            new ArrayList<Set<String>>(aggregates.length));
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,769,                String str = newValue.getString();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,770,                if (str != null && !distinctValues.get(level).get(i).add(str))
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,795,                        new HashSet<String>() : null);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,800,                Set<String> set = distinctValues.get(r).get(a);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,804,                set.add(newValue.getString());
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,809,        private void dumpAllRows(int cR)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,810,            throws StandardException
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,811,        {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,812,"            System.out.println(""dumpAllRows(""+cR+""/""+resultRows.length+""):"");"
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,813,            for (int r = 0; r < resultRows.length; r++)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,814,                System.out.println(dumpRow(resultRows[r]));
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,815,        }
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,816, private String dumpRow(ExecRow r)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,817,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,818, {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,819,            if (r == null)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,820,"                return ""<NULL ROW>"";"
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,821,        StringBuilder buf = new StringBuilder();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,822,     int nCols = r.nColumns();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,823,     for (int d = 0; d < nCols; d++)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,824,     {
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,825,"  if (d > 0) buf.append("","");"
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,826,                DataValueDescriptor o = r.getColumn(d+1);
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,827,                buf.append(o.getString());
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,828,                if (o instanceof ExecAggregator)
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,829,"                    buf.append(""["")."
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,830,                        append(((ExecAggregator)o).getResult().getString()).
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,831,"                        append(""]"");"
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,832,     }
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,833,     return buf.toString();
java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java,834, }
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,131,    // Used to recompile the XPath expression when this formatable
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,132,    // object is reconstructed.  e.g.:  SPS
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,133,    private String queryExpr;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,134,    private String opName;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,135,    private boolean recompileQuery;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,136,
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,269,            this.queryExpr = queryExpr;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,270,            this.opName = opName;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,271,            this.recompileQuery = false;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,272,
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,555,"        // if this object is in an SPS, we need to recompile the query"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,556,        if (recompileQuery)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,557,        {
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,558,"         compileXQExpr(queryExpr, opName);"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,559,        }
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,560,
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,281,"                SQLState.LANG_XML_QUERY_ERROR, opName, te.getMessage());"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,643,        } catch (XPathExpressionException xpee) {
java/tools/org/apache/derby/tools/SignatureChecker.java,24,import java.lang.reflect.Method;
java/tools/org/apache/derby/tools/SignatureChecker.java,31,
java/tools/org/apache/derby/tools/SignatureChecker.java,82,    private ParsedArgs _parsedArgs;
java/tools/org/apache/derby/tools/SignatureChecker.java,84,    private ArrayList<SQLRoutine>   _procedures = new ArrayList<SQLRoutine>();
java/tools/org/apache/derby/tools/SignatureChecker.java,85,    private ArrayList<SQLRoutine>   _functions = new ArrayList<SQLRoutine>();
java/tools/org/apache/derby/tools/SignatureChecker.java,87,    private boolean     _debugging = false;
java/tools/org/apache/derby/tools/SignatureChecker.java,145,                return;
java/tools/org/apache/derby/tools/SignatureChecker.java,154,        } catch (Throwable t) { printThrowable( t ); }
java/tools/org/apache/derby/tools/SignatureChecker.java,193,            StringBuffer buffer = new StringBuffer();
java/tools/org/apache/derby/tools/SignatureChecker.java,206,"            checkSignature( conn, procedure, buffer.toString(), makeReadableSignature( procedure ) );"
java/tools/org/apache/derby/tools/SignatureChecker.java,234,            StringBuffer query = new StringBuffer();
java/tools/org/apache/derby/tools/SignatureChecker.java,250,"            checkSignature( conn, function, query.toString(), makeReadableSignature( function ) );"
java/tools/org/apache/derby/tools/SignatureChecker.java,262,        StringBuffer signature = new StringBuffer();
java/tools/org/apache/derby/tools/SignatureChecker.java,270,"            signature.append( "" "" + routine.getArgType( k ) + "" "" );"
java/tools/org/apache/derby/tools/SignatureChecker.java,301,     * Count up the arguments to the user-coded procedures.
java/tools/org/apache/derby/tools/SignatureChecker.java,326,     * the JSR169 api for DatabaseMetaData.
java/tools/org/apache/derby/tools/SignatureChecker.java,333,            Method      getFunctionsMethod = dbmd.getClass().getMethod
java/tools/org/apache/derby/tools/SignatureChecker.java,334,"                ( ""getFunctions"", new Class[] { String.class, String.class, String.class } );"
java/tools/org/apache/derby/tools/SignatureChecker.java,335,            ResultSet   rs = (ResultSet) getFunctionsMethod.invoke
java/tools/org/apache/derby/tools/SignatureChecker.java,336,"                ( dbmd, new Object[] { null, null, WILDCARD } );"
java/tools/org/apache/derby/tools/SignatureChecker.java,346,                boolean isTableFunction;
java/tools/org/apache/derby/tools/SignatureChecker.java,347,                if ( functionType == DatabaseMetaData.functionReturnsTable ) { isTableFunction = true; }
java/tools/org/apache/derby/tools/SignatureChecker.java,348,                else { isTableFunction = false; }
java/tools/org/apache/derby/tools/SignatureChecker.java,355,        } catch (Exception e) { throw new SQLException( e.getMessage() ); }
java/tools/org/apache/derby/tools/SignatureChecker.java,368,        try {
java/tools/org/apache/derby/tools/SignatureChecker.java,369,            Method      getFunctionColumnsMethod = dbmd.getClass().getMethod
java/tools/org/apache/derby/tools/SignatureChecker.java,370,"                ( ""getFunctionColumns"", new Class[] { String.class, String.class, String.class, String.class } );"
java/tools/org/apache/derby/tools/SignatureChecker.java,372,            int     count = _functions.size();
java/tools/org/apache/derby/tools/SignatureChecker.java,373,            for ( int i = 0; i < count; i++ )
java/tools/org/apache/derby/tools/SignatureChecker.java,375,                SQLRoutine  function = getFunction( i );
java/tools/org/apache/derby/tools/SignatureChecker.java,376,
java/tools/org/apache/derby/tools/SignatureChecker.java,377,                ResultSet   rs = (ResultSet) getFunctionColumnsMethod.invoke
java/tools/org/apache/derby/tools/SignatureChecker.java,378,"                    ( dbmd, new Object[] { null, function.getSchema(), function.getName(), WILDCARD } );"
java/tools/org/apache/derby/tools/SignatureChecker.java,379,
java/tools/org/apache/derby/tools/SignatureChecker.java,380,                while( rs.next() )
java/tools/org/apache/derby/tools/SignatureChecker.java,381,                {
java/tools/org/apache/derby/tools/SignatureChecker.java,382,                    short   columnType = rs.getShort( 5 );
java/tools/org/apache/derby/tools/SignatureChecker.java,383,
java/tools/org/apache/derby/tools/SignatureChecker.java,384,                    //
java/tools/org/apache/derby/tools/SignatureChecker.java,385,                    // Skip the return value if this is a table function.
java/tools/org/apache/derby/tools/SignatureChecker.java,386,                    // Skip all columns in the returned result set if this is a
java/tools/org/apache/derby/tools/SignatureChecker.java,387,                    // table function.
java/tools/org/apache/derby/tools/SignatureChecker.java,388,                    //
java/tools/org/apache/derby/tools/SignatureChecker.java,389,                    if ( columnType == DatabaseMetaData.functionReturn ) { continue; }
java/tools/org/apache/derby/tools/SignatureChecker.java,390,                    if ( columnType == DatabaseMetaData.functionColumnResult ) { continue; }
java/tools/org/apache/derby/tools/SignatureChecker.java,391,
java/tools/org/apache/derby/tools/SignatureChecker.java,392,                    function.addArg( rs.getString( 7 ) );
java/tools/org/apache/derby/tools/SignatureChecker.java,393,                }
java/tools/org/apache/derby/tools/SignatureChecker.java,394,                rs.close();
java/tools/org/apache/derby/tools/SignatureChecker.java,396,        } catch (Exception e) { throw new SQLException( e.getMessage() ); }
java/tools/org/apache/derby/tools/SignatureChecker.java,397,
java/tools/org/apache/derby/tools/SignatureChecker.java,405,"    private void    checkSignature( Connection conn, SQLRoutine routine, String query, String readableSignature )"
java/tools/org/apache/derby/tools/SignatureChecker.java,437,        } catch (Throwable t) {}
java/tools/org/apache/derby/tools/SignatureChecker.java,440,"            Class<?>   driverManagerClass = Class.forName( ""java.sql.DriverManager"" );"
java/tools/org/apache/derby/tools/SignatureChecker.java,441,            Method  getConnectionMethod = driverManagerClass.getDeclaredMethod
java/tools/org/apache/derby/tools/SignatureChecker.java,442,"                ( ""getConnection"", String.class );"
java/tools/org/apache/derby/tools/SignatureChecker.java,444,            return (Connection) getConnectionMethod.invoke
java/tools/org/apache/derby/tools/SignatureChecker.java,445,"                ( null, new Object[] { _parsedArgs.getJ2seConnectionUrl() } );"
java/tools/org/apache/derby/tools/SignatureChecker.java,447,        } catch (Throwable t)
java/tools/org/apache/derby/tools/SignatureChecker.java,493,     * Store a procedure descriptor.
java/tools/org/apache/derby/tools/SignatureChecker.java,501,     * Get a procedure descriptor.
java/tools/org/apache/derby/tools/SignatureChecker.java,509,     * Store a function descriptor.
java/tools/org/apache/derby/tools/SignatureChecker.java,517,     * Get a functon descriptor.
java/tools/org/apache/derby/tools/SignatureChecker.java,579,        private String _schema;
java/tools/org/apache/derby/tools/SignatureChecker.java,580,        private String _name;
java/tools/org/apache/derby/tools/SignatureChecker.java,581,        private boolean _isTableFunction;
java/tools/org/apache/derby/tools/SignatureChecker.java,582,        private ArrayList<String>   _argList = new ArrayList<String>();
java/tools/org/apache/derby/tools/SignatureChecker.java,601,            StringBuffer    buffer = new StringBuffer();
java/tools/org/apache/derby/tools/SignatureChecker.java,604,"            buffer.append( _schema + "", "" );"
java/tools/org/apache/derby/tools/SignatureChecker.java,605,"            buffer.append( _name + "", "" );"
java/tools/org/apache/derby/tools/SignatureChecker.java,606,"            buffer.append(  ""isTableFunction = "" + _isTableFunction + "", "" );"
java/tools/org/apache/derby/tools/SignatureChecker.java,607,"            buffer.append( "" argCount = "" + getArgCount() );"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,301,        ArrayList<Document> aList = new ArrayList<Document>();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,314,            aList.add(java.security.AccessController.doPrivileged(
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,321,                }));
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,345,"        return serializeToString(aList, null);"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,363,     * @param items List of items to serialize
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,375,        if ((items == null) || items.isEmpty()) {
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,376,        // nothing to do; return empty sequence.
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,380,        java.io.StringWriter sWriter = new java.io.StringWriter();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,389,        /* Step 1: Empty sequence.  If we have an empty sequence then we
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,390,         * won't ever enter the for loop and the call to sWriter.toString()
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,391,"         * at the end of this method will return an empty string, as"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,392,"         * required.  Otherwise, for a non-empty sequence our ""items"""
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,393,"         * list already corresponds to ""S1""."
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,394,         */
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,395,
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,397,        boolean lastItemWasString = false;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,400,"            // if it's a string, then this corresponds to some atomic"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,401,"            // value, so just echo the string as it is."
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,402,            if (obj instanceof String)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,403,            {
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,404,"                /* Step 2: Atomic values.  If ""obj"" is a string then it"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,405,"                 * corresponds to some atomic value whose ""lexical"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,406,"                 * representation"" is obj.  So we just take that."
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,407,                 */
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,408,
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,409,                if (lastItemWasString)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,410,                {
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,411,                    /* Step 3: Adjacent strings.  If we have multiple adjacent
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,412,                     * strings then concatenate them with a single space
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,413,                     * between them.
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,414,                     */
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,415,"                    sWriter.write("" "");"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,416,                }
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,417,
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,418,                /* Step 4: Create a Text node from the adjacent strings.
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,419,                 * Since we're just going to serialize the Text node back
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,420,"                 * into a string, we short-cut this step by skipping the"
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,421,                 * creation of the Text node and just writing the string
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,422,                 * out directly to our serialized stream.
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,423,                 */
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,424,                sWriter.write((String)obj);
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,425,                lastItemWasString = true;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,426,            }
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,427,            else if (obj instanceof Attr)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,456,                if (xmlVal != null)
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,457,                    xmlVal.markAsHavingTopLevelAttr();
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,460,                lastItemWasString = false;
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,496,
java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java,497,                lastItemWasString = false;
java/engine/org/apache/derby/vti/XmlVTI.java,196,"     * Build a XmlVTI given an xml resource stream, the  tag of the row"
java/engine/org/apache/derby/vti/XmlVTI.java,197,"     * element, and an array of attribute-names/element-tags underneath the row element"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,284,
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,285,"  new org.apache.derby.impl.services.monitor.FileMonitor(bootProperties, logging);"
java/engine/org/apache/derby/iapi/services/monitor/Monitor.java,288,"  Initialise this class, must only be called by an implementation"
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,367,  }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,88,    private static ThreadGroup createDaemonGroup() {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,94,"            // In case of a lacking privilege, silently return null and let"
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,95,            // the daemon threads be created in the default thread group.
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,541,"     * automaticaly closed on tearDown, the test fixture must"
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,113,        if (!TestConfiguration.loadingFromJars()) {
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,114,            // This test only works with jar files.
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,118,        suite.addTest(
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,119,                new SupportFilesSetup(
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,120,"                        makeTest(""testMissingFilePermission"","
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,121,"                                POLICY_MINUS_FILEPERMISSION_T),"
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,122,                        new String[] {
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,123,                            POLICY_MINUS_FILEPERMISSION_R}));
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,125,"        suite.addTest(makeTest(""testPresentPropertiesPermission"","
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,126,                OK_POLICY_T));
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,128,"        suite.addTest(makeTest(""testMissingPropertiesPermission"","
java/testing/org/apache/derbyTesting/unitTests/junit/MissingPermissionsTest.java,129,                POLICY_MINUS_PROPERTYPERMISSION_T));
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,168,                    return Thread.currentThread().getContextClassLoader();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,24,import java.io.BufferedReader;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,26,import java.io.FileInputStream;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,28,import java.io.InputStreamReader;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,184,"        suite.addTest( decorateTest( true,  false, null, null, RUNNING_SECURITY_NOT_BOOTED ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,185,"        suite.addTest( decorateTest( true,  true, null, null, RUNNING_SECURITY_NOT_BOOTED ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,186,
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,328,        if (!_unsecureSet) {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,329,            assertWarningDerby6619();
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,330,        }
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,510,    private void assertWarningDerby6619() throws IOException {
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,512,"                getSystemProperty(""user.dir"") + File.separator + ""derby.log"";"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,513,"        if (!DerbyNetAutoStartTest.checkLog(logFileName, expected6619)) {"
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java,514,"            fail(""Expected warning on derby.log cf DERBY-6619"");"
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java,90,            UpgradeClassLoader.setThreadLoader(loader);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java,157,            UpgradeClassLoader.setThreadLoader(previousLoader);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,94,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,95,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,96,     * Force this thread to use a specific class loader.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,97,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,98,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,99,    public static void setThreadLoader(final ClassLoader which) {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,100,        AccessController.doPrivileged(new PrivilegedAction<Void>() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,101,            public Void run() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,102,                java.lang.Thread.currentThread().setContextClassLoader(which);
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,103,              return null;
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,104,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,105,        });
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,106,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,107,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,108,    /**
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,109,     * <p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,110,     * Retrieve the class loader currently being used by this thread.
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,111,     * </p>
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,112,     */
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,113,    public static ClassLoader getThreadLoader() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,114,        return AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,115,                new PrivilegedAction<ClassLoader>() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,116,            public ClassLoader run() {
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,117,                return Thread.currentThread().getContextClassLoader();
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,118,            }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,119,        });
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,120,    }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeClassLoader.java,121,
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,525,        UpgradeClassLoader.setThreadLoader( version.getClassLoader() );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,814,        UpgradeClassLoader.setThreadLoader( version.getClassLoader() );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,833,        UpgradeClassLoader.setThreadLoader( softwareVersion.getClassLoader() );
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,974,        if ( _originalClassLoader.get() == null ) { _originalClassLoader.set( UpgradeClassLoader.getThreadLoader() ); }
java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTrajectoryTest.java,978,        UpgradeClassLoader.setThreadLoader( (ClassLoader) _originalClassLoader.get() );
java/testing/org/apache/derbyTesting/junit/BaseTestSetup.java,45,    public final void run(TestResult result)
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,178,                    if (cl == ClassLoader.getSystemClassLoader()) {
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,179,                        // If the context class loader is the same as the
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,180,"                        // system class loader, we are not worried that the"
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,181,                        // timer thread will lead a class loader. (The
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,182,                        // system class loader will stay in memory for the
java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java,184,                        // that the timer thread keeps a reference to it.)
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,292, /**
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,293,  Set the priority of the current thread.
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,294,  If the current thread was not returned by getDaemonThread() then no action is taken.
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,295, */
java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java,296, public void setThreadPriority(int priority);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,730,   if (mf != null)
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,731,    mf.setThreadPriority(Thread.MIN_PRIORITY);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,733,   if (mf != null)
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,734,    mf.setThreadPriority(oldPriority);
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,737,}
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,738,
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,739,
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,740,
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,741,
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,742,
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,743,
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,744,
java/engine/org/apache/derby/impl/services/daemon/BasicDaemon.java,745,
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2078, public void setThreadPriority(int priority) {
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2079,
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2080,  Thread t = Thread.currentThread();
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2081,
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2082,  if (t.getThreadGroup() == daemonGroup) {
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2083,   t.setPriority(priority);
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2084,  }
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,2085, }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,41,import org.apache.derby.shared.common.sanity.SanityManager;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,301, public final void setThreadPriority(final int priority) {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,302,        AccessController.doPrivileged(new PrivilegedAction<Object>() {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,303,            public Object run() {
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,304,                FileMonitor.super.setThreadPriority(priority);
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,305,                return null;
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,306,            }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,307,        });
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,308, }
java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java,309,
java/drda/org/apache/derby/impl/drda/ClientThread.java,165,                            } catch (IOException acceptE) {
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,63,public final class JCECipherFactory implements CipherFactory
java/engine/org/apache/derby/impl/services/jce/JCECipherFactory.java,119,"    public JCECipherFactory(boolean create,"
java/engine/org/apache/derby/impl/services/jce/JCECipherFactoryBuilder.java,3,   Derby - Class org.apache.derby.iapi.services.crypto.JCECipherFactoryBuilder
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,26,
java/client/org/apache/derby/client/am/ClientPreparedStatement.java,2047,                boolean chainOpenQueryForAutoGeneratedKeys = (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS);
java/client/org/apache/derby/client/am/ClientPreparedStatement.java,2131,                    if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
java/client/org/apache/derby/client/am/ClientStatement.java,2328,                    if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
java/client/org/apache/derby/client/am/ClientStatement.java,2402,                if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java,146,   //information in lcc will not work work as it can be tampered by a nested trasaction
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,247,     * statement is not an INSERT statement. For use with
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,288,     * statement is not an INSERT statement. For use with
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,717,     * this signal if the SQL statement is not an INSERT statement.
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,742,     * INSERT statement.
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,746,     * inserted row that should be made available for retrieval by a call to
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,747,     * the method getGeneratedKeys
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,771,     * INSERT statement.
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,775,     * inserted row that should be made available for retrieval by a call to
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,776,     * the method getGeneratedKeys
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1368,"     // Only applipable for an insert statement, which does not return rows."
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,1369,     //the auto-generated keys resultset will be null if used for non-insert statement
java/engine/org/apache/derby/impl/sql/execute/DMLWriteGeneratedColumnsResultSet.java,25,
java/engine/org/apache/derby/impl/sql/execute/DMLWriteGeneratedColumnsResultSet.java,26,
java/engine/org/apache/derby/impl/sql/execute/DMLWriteGeneratedColumnsResultSet.java,27,import org.apache.derby.catalog.UUID;
java/engine/org/apache/derby/impl/sql/execute/DMLWriteGeneratedColumnsResultSet.java,30,import org.apache.derby.iapi.sql.ResultColumnDescriptor;
java/engine/org/apache/derby/impl/sql/execute/DMLWriteGeneratedColumnsResultSet.java,35,import org.apache.derby.iapi.types.RowLocation;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,27,import java.util.HashMap;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,44,import org.apache.derby.iapi.sql.ResultDescription;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,53,import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,56,import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,94, // RESOLVE. Embarassingly large public state. If we could move the Replication
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,95," // code into the same package, then these variables could be protected."
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,96,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,105, //following is for jdbc3.0 feature auto generated keys resultset
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,106, private  ResultSet   autoGeneratedKeysResultSet;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,107, private TemporaryRowHolderImpl autoGeneratedKeysRowsHolder;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,108,    private int[]                   autoGeneratedKeysColumnIndexes;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,109,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,168, /**
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,169,"  * If set to true, implies that this (rep)insertresultset has generated"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,170,"  * autoincrement values. During refresh for example, the autoincrement"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,171,  * values are not generated but sent from the source to target or
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,172,  * vice-versa.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,173,  */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,174, protected boolean     autoincrementGenerated;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,175, private long     identityVal;  //support of IDENTITY_LOCAL_VAL function
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,176, private boolean     setIdentity;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,413,  /*
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,414,  ** verify the auto-generated key columns list(ie there are no invalid column
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,415,  ** names or positions). This is done at at execution time because for a precompiled
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,416,"  ** insert statement, user can specify different column selections for"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,417,  ** auto-generated keys.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,418,  */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,419,  if(activation.getAutoGeneratedKeysResultsetMode())
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,420,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,421,            int[]   agi = activation.getAutoGeneratedKeysColumnIndexes();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,422,            if ( agi != null ) { verifyAutoGeneratedColumnsIndexes( agi ); }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,423,            else
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,424,            {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,425,                String[]    agc = activation.getAutoGeneratedKeysColumnNames();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,426,                if ( agc != null ) { verifyAutoGeneratedColumnsNames( agc ); }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,427,            }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,428,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,494,  /* autoGeneratedResultset for JDBC3. Nulled after statement execution is over
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,495,  (ie after it is saved off in LocalSatement object) */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,496,  if (activation.getAutoGeneratedKeysResultsetMode())
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,497,   autoGeneratedKeysResultSet = autoGeneratedKeysRowsHolder.getResultSet();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,498,  else
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,499,   autoGeneratedKeysResultSet = null;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,500,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,519, /**
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,520,  * Verify that the auto-generated columns list (by position) has valid
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,521,  * column positions for the table.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,522,  */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,523, private void verifyAutoGeneratedColumnsIndexes(int[] columnIndexes)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,524,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,525, {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,526,  int size = columnIndexes.length;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,527,        TableDescriptor tabDesc = dd.getTableDescriptor(constants.targetUUID);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,528,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,529,  // all 1-based column ids.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,530,  for (int i = 0; i < size; i++)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,531,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,532,            ColumnDescriptor cd = tabDesc.getColumnDescriptor(columnIndexes[i]);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,533,   if (!verifyAutoGenColumn(cd))
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,534,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,535,    throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,536,"     SQLState.LANG_INVALID_AUTOGEN_COLUMN_POSITION,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,537,"                    new Integer(columnIndexes[i]), tabDesc.getName());"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,538,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,539,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,540, }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,541,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,578, /**
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,579,  * Remove duplicate columns from the array. Then use this array to generate a sub-set
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,580,  * of insert resultset to be returned for JDBC3.0 getGeneratedKeys() call.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,581,  */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,582, private int[] uniqueColumnPositionArray(int[] columnIndexes)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,583,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,584, {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,585,  int size = columnIndexes.length;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,586,        TableDescriptor tabDesc = dd.getTableDescriptor(constants.targetUUID);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,587,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,588,  //create an array of integer (the array size = number of columns in table)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,589,  // valid column positions are 1...getMaxColumnID()
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,590,        int[] uniqueColumnIndexes = new int[tabDesc.getMaxColumnID()];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,591,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,592,  int uniqueColumnNumbers = 0;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,593,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,594,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,595,"  //At the end of following loop, the uniqueColumnIndexes elements will not be 0 for user"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,596,  //selected auto-generated columns.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,597,  for (int i=0; i<size; i++) {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,598,   if (uniqueColumnIndexes[columnIndexes[i] - 1] == 0) {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,599,    uniqueColumnNumbers++;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,600,    uniqueColumnIndexes[columnIndexes[i] - 1] = columnIndexes[i];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,601,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,602,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,603,  int[] returnUniqueColumnIndexes = new int[uniqueColumnNumbers];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,604,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,605,  //return just the column positions which are not marked 0 in the uniqueColumnIndexes array
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,606,"  for (int i=0, j=0; i<uniqueColumnIndexes.length; i++) {"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,607,   if (uniqueColumnIndexes[i] != 0)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,608,    returnUniqueColumnIndexes[j++] = uniqueColumnIndexes[i];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,609,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,610,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,611,  return returnUniqueColumnIndexes;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,612, }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,613,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,614, /**
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,615,  * Verify that the auto-generated columns list (by name) has valid
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,616,"  * column names for the table. If all the column names are valid,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,617,  * convert column names array to corresponding column positions array
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,618,  * Save that column positions array in activation. We do this to simplify the
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,619,  * rest of the logic(it only has to deal with column positions here after).
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,620,  *
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,621,  * @exception StandardException  Thrown on error if invalid column
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,622,   * name in the list.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,623,  */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,624, private void verifyAutoGeneratedColumnsNames(String[] columnNames)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,625,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,626, {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,627,  int size = columnNames.length;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,628,  int columnPositions[] = new int[size];
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,629,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,630,        TableDescriptor tabDesc = dd.getTableDescriptor(constants.targetUUID);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,631,  ColumnDescriptor cd;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,632,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,633,  for (int i = 0; i < size; i++)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,634,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,635,   if (columnNames[i] == null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,636,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,637,    throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,638,"     SQLState.LANG_INVALID_AUTOGEN_COLUMN_NAME,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,639,"                    columnNames[i], tabDesc.getName());"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,640,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,641,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,642,            cd = tabDesc.getColumnDescriptor(columnNames[i]);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,643,   if (!verifyAutoGenColumn(cd))
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,644,   {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,645,    throw StandardException.newException(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,646,"     SQLState.LANG_INVALID_AUTOGEN_COLUMN_NAME,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,647,"                    columnNames[i], tabDesc.getName());"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,648,   }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,649,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,650,   columnPositions[i] = cd.getPosition();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,651,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,652,"  activation.setAutoGeneratedKeysResultsetInfo(columnPositions, null);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,653, }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,654,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,655, /**
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,656,  * Check that the received ColumnDescriptor corresponds to a column
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,657,  * for which it is possible to fetch auto-generated keys.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,658,  */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,659, private boolean verifyAutoGenColumn(ColumnDescriptor cd)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,660, {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,661,  /* Derby currently gets generated keys by calling the
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,662,"   * IDENTITY_VAL_LOCAL() function (see ""getGeneratedKeys()"""
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,663,   * as defined on EmbedStatement).  That function only
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,664,   * considers autoincrement columns.  So if the column
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,665,"   * specified by the user is not autoincrement, we return"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,666,   * false.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,667,   */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,668,  return ((cd != null) && cd.isAutoincrement());
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,669, }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,670,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,671,    @Override
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,672, public ResultSet getAutoGeneratedKeysResultset()
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,673, {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,674,  return autoGeneratedKeysResultSet;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,675, }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,676,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,677,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,987,  if (firstExecute && activation.getAutoGeneratedKeysResultsetMode())
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,988,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,989,   ResultDescription rd;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,990,   Properties properties = new Properties();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,991,            autoGeneratedKeysColumnIndexes =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,992,                    activation.getAutoGeneratedKeysColumnIndexes();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,993,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,994,   // Get the properties on the old heap
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,995,   rowChanger.getHeapConglomerateController().getInternalTablePropertySet(properties);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,996,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,997,            if (autoGeneratedKeysColumnIndexes != null) {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,998,                // Use user-provided column positions array.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,999,                autoGeneratedKeysColumnIndexes =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1000,                    uniqueColumnPositionArray(autoGeneratedKeysColumnIndexes);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1001,            } else {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1002,                // Prepare array of auto-generated keys for the table since
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1003,                // user didn't provide any.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1004,                autoGeneratedKeysColumnIndexes =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1005,                        generatedColumnPositionsArray();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1006,            }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1007,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1008,            rd = lcc.getLanguageFactory().getResultDescription(
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1009,"                    resultDescription, autoGeneratedKeysColumnIndexes);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1010,   autoGeneratedKeysRowsHolder =
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1011,"    new TemporaryRowHolderImpl(activation, properties, rd);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1012,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1013,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1322,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1323, /**
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1324,  * Take the input row and return a new compact ExecRow
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1325,  * using the column positions provided in columnIndexes.
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1326,"  * Copies references, no cloning."
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1327,  */
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1328, private ExecRow getCompactRow
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1329, (
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1330,"  ExecRow      inputRow,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1331,  int[]       columnIndexes
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1332, )
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1333,  throws StandardException
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1334, {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1335,  ExecRow outRow;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1336,  int numInputCols = inputRow.nColumns();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1337,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1338,  if (columnIndexes == null)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1339,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1340,   outRow = new ValueRow(numInputCols);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1341,   Object[] src = inputRow.getRowArray();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1342,   Object[] dst = outRow.getRowArray();
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1343,"   System.arraycopy(src, 0, dst, 0, src.length);"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1344,   return outRow;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1345,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1346,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1347,  int numOutputCols = columnIndexes.length;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1348,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1349,  outRow = new ValueRow(numOutputCols);
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1350,  for (int i = 0; i < numOutputCols; i++)
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1351,  {
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1352,"   outRow.setColumn(i+1,"
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1353,    inputRow.getColumn(columnIndexes[i]));
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1354,  }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1355,
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1356,  return outRow;
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1357, }
java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java,1358,
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,514,    public void testUpdate() throws SQLException
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,519,"        String sqlStmt=""update t11_AutoGen set c11=1"";"
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,521,"        assertNull(""Expected NULL ResultSet after s.execute()"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,522,            s.getGeneratedKeys());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,525,"        assertNull(""Expected NULL ResultSet after s.executeUpdate()"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,526,            s.getGeneratedKeys());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,533,"        assertNull(""Expected NULL ResultSet after ps.execute()"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,534,            ps.getGeneratedKeys());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,537,"        assertNull(""Expected NULL ResultSet after ps.executeUpdate()"","
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,538,            ps.getGeneratedKeys());
java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoGenJDBC30Test.java,1483,    {
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,156,            InterruptStatus.restoreIntrFlagIfSeen(ec.getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,476,                    getLanguageConnection().usesSqlAuthorization()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,501,      getLanguageConnection().usesSqlAuthorization()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,593,      getLanguageConnection().usesSqlAuthorization()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,604,                        getLanguageConnection().usesSqlAuthorization()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,635,   if (usingNoneAuth && getLanguageConnection().usesSqlAuthorization())
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,637,            InterruptStatus.restoreIntrFlagIfSeen(getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,937,            getLanguageConnection().usesSqlAuthorization()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,981,            getLanguageConnection().usesSqlAuthorization()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1106,            getLanguageConnection().usesSqlAuthorization()) {
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1423,  final LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1928,                InterruptStatus.restoreIntrFlagIfSeen(getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,1965,                InterruptStatus.restoreIntrFlagIfSeen(getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2157,                LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2177,  return getLanguageConnection().isReadOnly();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2253,                LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2273,  return TransactionControl.jdbcIsolationLevel( getLanguageConnection().getCurrentIsolationLevel() );
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2367,  return getTR().getLcc();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2528,                InterruptStatus.restoreIntrFlagIfSeen(getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2561,                InterruptStatus.restoreIntrFlagIfSeen(getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2881,                    restoreIntrFlagIfSeen(getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2968,  getLanguageConnection().setDrdaID(drdaID);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,2989,                LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3031,                LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3083,                LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3109,                LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3179,   getLanguageConnection().setPrepareIsolationLevel(level);
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3188,  return getLanguageConnection().getPrepareIsolationLevel();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3235,            LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3418,        getLanguageConnection().getStatementContext().cancel();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3429,        return getLanguageConnection().getCurrentSchemaName();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3568,                getLanguageConnection().internalRollbackToSavepoint(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3599,                getLanguageConnection().releaseSavePoint(
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3618,            getLanguageConnection().getStatementContext();
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java,3659,                LanguageConnectionContext lcc = getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedConnectionContext.java,111,   StatementContext sc = conn.getLanguageConnection().getStatementContext();
java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java,3817,  return getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,276,            final ExecutionFactory factory = conn.getLanguageConnection().
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,421,    LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,591,                    getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3846,            LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,3966,        LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4069,            LanguageConnectionContext lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4224,                InterruptStatus.restoreIntrFlagIfSeen(
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4225,                    getEmbedConnection().getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4358,                LanguageConnectionContext lcc = ec.getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java,4809,                getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,68,    //Generating a unique internal name for unnamed savepoints
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,69,"    savepointName = ""i."" + conn.getLanguageConnection().getUniqueSavepointName();"
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,70,    savepointID = conn.getLanguageConnection().getUniqueSavepointID();
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,76,"     conn.getLanguageConnection().languageSetSavePoint(savepointName, this);"
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,118,     return (getEmbedConnection().getLanguageConnection() == con.getLanguageConnection());
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,120,}
java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java,126,  lcc = getEmbedConnection().getLanguageConnection();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,405,   return realConnection.getLanguageConnection().isIsolationLevelSetUsingSQLorJDBC();
java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java,417,  realConnection.getLanguageConnection().resetIsolationLevelFlagUsedForSQLandJDBC();
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,548,            LanguageConnectionContext lcc = con.getLanguageConnection();
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,661,                    con.realConnection.getLanguageConnection().
java/engine/org/apache/derby/jdbc/InternalDriver.java,648,"    EmbedConnection getNewEmbedConnection(String url, Properties info)"
java/engine/org/apache/derby/jdbc/InternalDriver.java,649,            throws SQLException {
java/engine/org/apache/derby/jdbc/InternalDriver.java,650,"        return new EmbedConnection(this, url, info);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/NoDBInternalsPermissionTest.java,169,    public  void    test_004_BasDataFileFactory()
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1567, if (! (conn instanceof EmbedConnection))
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1568,     return;
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1570, EmbedConnection econn = (EmbedConnection) conn;
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1571, RunTimeStatistics rts = econn.getLanguageConnection().getRunTimeStatisticsObject();
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1572," assertNotNull("" RuntimeStatistics is null. Did you call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)?"",rts);"
java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java,1573," assertEquals((long) expectedCount, (long) rts.getEstimatedRowCount());"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,83,        Test suite = TestConfiguration.embeddedSuite(UpdateLocksTest.class);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,89,"            new SystemPropertyTestSetup(suite, p, false)) {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,91,            /**
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,92,             * Creates the views and procedures used by the test cases.
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,93,             */
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,94,            protected void decorateSQL(Statement s) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,95,                s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,96,"                    ""create function PADSTRING (data varchar(32000), "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,97,"                    ""                           length integer) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,98,"                    ""    returns varchar(32000) "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,99,"                    ""    external name "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,100,"                    ""    'org.apache.derbyTesting.functionTests."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,101,"                    ""util.Formatters.padString' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,102,"                    ""    language java parameter style java"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,103,
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,104,                s.executeUpdate(
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,105,"                    ""create view LOCK_TABLE as "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,106,"                    ""select  "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,107,"                    ""    cast(username as char(8)) as username, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,108,"                    ""    cast(t.type as char(8)) as trantype, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,109,"                    ""    cast(l.type as char(8)) as type, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,110,"                    ""    cast(lockcount as char(3)) as cnt, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,111,"                    ""    mode, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,112,"                    ""    cast(tablename as char(12)) as tabname, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,113,"                    ""    cast(lockname as char(10)) as lockname, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,114,"                    ""    state, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,115,"                    ""    status "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,116,"                    ""from  "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,117,"                    ""    syscs_diag.lock_table l  right outer join "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,118,"                    ""    syscs_diag.transaction_table t "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,119,"                    ""on l.xid = t.xid "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,120,"                    ""where l.tableType <> 'S' and "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,121,"                    ""      t.type='UserTransaction'"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,122,
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,123,                // Create a procedure to be called before checking on contents
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,124,                // to ensure that the background worker thread has completed
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,125,                // all the post-commit work.
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,126,                s.execute(
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,127,"                    ""CREATE PROCEDURE WAIT_FOR_POST_COMMIT() "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,128,"                    ""LANGUAGE JAVA EXTERNAL NAME "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,129,"                    ""'org.apache.derbyTesting.functionTests.util."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,130,"                    ""T_Access.waitForPostCommitToFinish' "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,131,"                    ""PARAMETER STYLE JAVA"");"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,132,            }
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,133,        };
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,158,        doRunTests(Connection.TRANSACTION_REPEATABLE_READ);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,162,        doRunTests(Connection.TRANSACTION_READ_COMMITTED);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,166,        doRunTests(Connection.TRANSACTION_SERIALIZABLE);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,170,        doRunTests(Connection.TRANSACTION_READ_UNCOMMITTED);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,183,    private void doRunTests (int isolation) throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,201,"        updatecursorlocks(getConnection(), isolation, 0, NO_IDX_1);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,224,"                                true, 0, 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,228,"                                true, 0, 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,240,"                                true, 0, 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,243,"                                true, 0, 0);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,290,"        updatecursorlocks(getConnection(), isolation, 1900, NO_IDX_2);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,338,"                                UNIQUE_INDEX, false, 1900, 600);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,340,"                                UNIQUE_INDEX, false, 1900, 600);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,369,"                                NON_UNIQUE_INDEX, false, 1900, 700);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,371,"                                NON_UNIQUE_INDEX, false, 1900, 700);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,436,"        Connection c, int isolation, int pad, int mode) throws SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,437,
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,438,"        Statement s = c.createStatement(ResultSet.TYPE_FORWARD_ONLY,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,439,                                        ResultSet.CONCUR_UPDATABLE);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,3041,        int idxPad) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,3044,"        Statement s = c.createStatement(ResultSet.TYPE_FORWARD_ONLY,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,3045,                                        ResultSet.CONCUR_UPDATABLE);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,4809,        int idxPad) throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,4810,
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,4811,"        Statement s = c.createStatement(ResultSet.TYPE_FORWARD_ONLY,"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,4812,                                        ResultSet.CONCUR_UPDATABLE);
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,4998,                 new String[][]{
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,4999,"                    {_app, _ut, _t, ""2"", _IX, _A, _tl, _g, _a},"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,5000,"                    {_app, _ut, _r, ""1"", _U, _A, ""(1,9)"", _g, _a},"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,5001,"                    {_app, _ut, _r, ""1"", _X, _A, ""(1,9)"", _g, _a}}"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,5943,                      new String[][]{
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,5944,"                         {_app, _ut, _t, ""3"", _IX, _A, _tl, _g, _a},"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,5945,"                         {_app, _ut, _r, ""1"", _U, _A, ""(1,7)"", _g, _a},"
java/testing/org/apache/derbyTesting/functionTests/tests/store/UpdateLocksTest.java,5946,"                         {_app, _ut, _r, ""2"", _X, _A, ""(1,7)"", _g, _a}}"
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,155,                     new PrivilegedAction<PrintWriter>()
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,157,                         public PrintWriter run()
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,160,                                 return new PrintWriter( configurationParameters[ 0 ] );
java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java,178,        catch (Exception e) { throw wrap( e ); }
java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java,301,        File f = new File(fileName);
java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java,302,        if (PrivilegedFileOpsForTests.exists(f)) {
java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java,303,            assertTrue(PrivilegedFileOpsForTests.delete(f));
java/testing/org/apache/derbyTesting/functionTests/tests/lang/MathTrigFunctionsTest.java,679,        // number: expected result.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/MathTrigFunctionsTest.java,686,"            {PRE_DERBY_3398_SMALLEST_POS_DERBY_DOUBLE, 3.88335758568738E-309},"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/MathTrigFunctionsTest.java,687,"            {PRE_DERBY_3398_LARGEST_NEG_DERBY_DOUBLE, -3.88335758568738E-309},"
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,159,            InterruptStatus.restoreIntrFlagIfSeen( getLanguageConnectionContext( ec ) );
java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java,169, static LanguageConnectionContext getLanguageConnectionContext( final EmbedConnection conn )
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,123,             getLanguageConnectionContext( getEmbedConnection() ) ==
java/engine/org/apache/derby/impl/jdbc/EmbedSavepoint.java,124,             getLanguageConnectionContext( con )
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1000,        try {
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1001,            return AccessController.doPrivileged
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1002,                (
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1003,                 new PrivilegedExceptionAction<LanguageConnectionContext>()
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1004,                 {
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1005,                     public LanguageConnectionContext run()
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1006,                         throws SQLException
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1008,                         return conn.getLanguageConnection();
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1010,                 }
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1011,                 );
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1012,        } catch (PrivilegedActionException pae)
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1013,        {
java/engine/org/apache/derby/jdbc/EmbedXAResource.java,1014,            throw Util.javaException( pae );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLOptimizerTraceTest.java,334,"             FILE_EXISTS,"
java/client/org/apache/derby/client/net/NaiveTrustManager.java,76,"        SSLContext ctx = SSLContext.getInstance(""SSL"");"
java/client/org/apache/derby/client/net/OpenSocketAction.java,78,"        return sf.createSocket(server_, port_);"
java/drda/org/apache/derby/impl/drda/NaiveTrustManager.java,71,"        SSLContext ctx = SSLContext.getInstance(""SSL"");"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,727,"            return (SSLServerSocket)ssf.createServerSocket(portNumber,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,728,"                                                           0,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,729,                                                           hostAddress);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2679,
java/client/org/apache/derby/client/net/OpenSocketAction.java,93,            String[] removeTwoProtocols = new String[enabledProtocols.length];
java/client/org/apache/derby/client/net/OpenSocketAction.java,94,            int removedProtocolsCount  = 0;
java/client/org/apache/derby/client/net/OpenSocketAction.java,95,            boolean foundProtocolToRemove=false;
java/client/org/apache/derby/client/net/OpenSocketAction.java,98,"                if (enabledProtocols[i].toUpperCase().contains(""SSLV3"") ||"
java/client/org/apache/derby/client/net/OpenSocketAction.java,99,"                    enabledProtocols[i].toUpperCase().contains(""SSLV2HELLO"")) {"
java/client/org/apache/derby/client/net/OpenSocketAction.java,100,                 foundProtocolToRemove=true;
java/client/org/apache/derby/client/net/OpenSocketAction.java,101,                } else {
java/client/org/apache/derby/client/net/OpenSocketAction.java,102,                 removeTwoProtocols[removedProtocolsCount] =
java/client/org/apache/derby/client/net/OpenSocketAction.java,104,                 removedProtocolsCount++;
java/client/org/apache/derby/client/net/OpenSocketAction.java,107,            if(foundProtocolToRemove) {
java/client/org/apache/derby/client/net/OpenSocketAction.java,113,               new String[(removeTwoProtocols.length)-1];
java/client/org/apache/derby/client/net/OpenSocketAction.java,114,"             System.arraycopy(removeTwoProtocols, 0,"
java/client/org/apache/derby/client/net/OpenSocketAction.java,116,               removedProtocolsCount);
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2712,        String[] removeTwoProtocols = new String[enabledProtocols.length];
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2713,        int removedProtocolsCount  = 0;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2714,        boolean foundProtocolToRemove=false;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2717,"            if (enabledProtocols[i].toUpperCase().contains(""SSLV3"") ||"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2718,"             enabledProtocols[i].toUpperCase().contains(""SSLV2HELLO"")) {"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2719,             foundProtocolToRemove=true;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2720,            } else {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2721,             removeTwoProtocols[removedProtocolsCount] = enabledProtocols[i];
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2722,             removedProtocolsCount++;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2725,        String[] newEnabledProtocolsList = null;
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2726,        if(foundProtocolToRemove) {
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2731,                new String[(removeTwoProtocols.length)-1];
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2732,"            System.arraycopy(removeTwoProtocols, 0,"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2734,                removedProtocolsCount);
java/build/org/apache/derbyBuild/JarDriftTest.java,103,"            throw new Exception(""jar drift check failed. \n"" +"
java/build/org/apache/derbyBuild/JarDriftTest.java,105,"                ""If the new class is expected run ant refreshjardriftcheck.\n"");"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,825,"                {Integer.toString(portNumber), att_srvclsnm, versionString});"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,1005,
java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java,467,    /* package */ Conglomerate conglomCacheFind(
java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java,468,"    TransactionManager  xact_mgr,"
java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java,469,    long                conglomid)
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,67,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,70,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,71,
java/engine/org/apache/derby/impl/store/access/RAMTransaction.java,404,"            conglom = accessmanager.conglomCacheFind(this, conglomId);"
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,104,"                (Heap) open_conglom.getConglomerate(),"
java/engine/org/apache/derby/impl/store/access/heap/HeapController.java,105,                pos.current_page.getPageNumber()));
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,77,    private Heap          heap            = null;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,78,    private long          page_number     = ContainerHandle.INVALID_PAGE_NUMBER;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,79,
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,87,"    Heap            heap,"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,88,    long            input_page_number)
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,91,        this.heap           = heap;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,92,        this.page_number    = input_page_number;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,101,     * Reclaim space taken up by committed deleted rows.
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,105,"     * lock.  It will attempt obtain exclusive row locks on deleted rows, where"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,106,"     * successful those rows can be reclaimed as they must be ""committed"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,107,"     * deleted"" rows."
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,216,"                                ""Calling Heap removePage().; pagenumber=""+pageno+""\n"");"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,349,"            purgeCommittedDeletes(heapcontroller, this.page_number);"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,355,            // dropper or the lock was not granted.
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,361,"   // If this expcetion is because lock could not be obtained,"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,391,"                        ""requeueing on page num = "" + page_number);"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,398,
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,103,"                (Heap) open_conglom.getConglomerate(),"
java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java,104,                pos.current_page.getPageNumber()));
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1499,        if (internalNonDeletedRecordCount() <= num_non_deleted_rows)
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1500,        {
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1501,            ret_val = true;
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1502,        }
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1503,        else
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,1505,            if (!entireRecordOnPage(slot_just_deleted))
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,214,   RawTransaction rxact = (RawTransaction)xact;
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,224,"     new ReclaimSpace(ReclaimSpace.PAGE, (PageKey)undoPage.getIdentity(),"
java/engine/org/apache/derby/impl/store/raw/data/InsertOperation.java,225,"          rxact.getDataFactory(), true /* service ASAP */);"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2602,"                SanityManager.ASSERT(recordHeader.getFirstField() == 0,"
java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java,2603,"                     ""Head row piece should start at field 0 but is not"");"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,224, protected List<Serviceable>     postCommitWorks; // a list of post commit work
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,225, protected List<Serviceable>      postTerminationWorks; // work to be done after
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,226,"              // transaction terminates,"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,227,              // commit or abort
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2048,
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2049, private final void postTermination() throws StandardException
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2050, {
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2051,  // move all the postTermination work to the postCommit queue
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2052,  int count = (postTerminationWorks == null) ?
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2053,   0 : postTerminationWorks.size();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2054,
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2055,  for (int i = 0; i < count; i++)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2056,   addPostCommitWork(postTerminationWorks.get(i));
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2057,
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2058,  if (count > 0)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2059,   postTerminationWorks.clear();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2060,
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2065,  if (postCommitWorks != null && !postCommitWorks.isEmpty())
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2067,   int pcsize = postCommitWorks.size();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2076,"     // to avoid confusion, copy the post commit work to an array if this"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2077,     // is going to do some work now
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2079,     work = (Serviceable[])postCommitWorks.toArray(work);
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2081,     // clear this for post commit processing to queue its own post
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2082,"     // commit works - when it commits, it will send all its post"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2083,     // commit request to the daemon instead of dealing with it here.
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2084,     postCommitWorks.clear();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2086,     //All the post commit work that is part  of the database creation
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2087,     //should be done on this thread immediately.
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2088,     boolean doWorkInThisThread = xactFactory.inDatabaseCreation();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2095,      //All the other work should be submitted
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2096,      //to the post commit thread to be processed asynchronously
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2102,"        // added.  when that transaction commits, those"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2104,        if (work[i].performWork(xc.getContextManager()) == Serviceable.DONE)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2115,"        // try to handle it here.  If we fail, then let the error percolate."
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2124,"      // Servicable is well mannered, it can change itself from"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2125,      // serviceASAP to not serviceASAP if it returns REQUEUE.
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2128,       boolean needHelp = xactFactory.submitPostCommitWork(work[i]);
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2140,     if (postCommitWorks != null)
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2141,      postCommitWorks.clear();
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2152,"     // SanityManager.DEBUG_PRINT(""PostTermination"",postCommitWorks.elementAt((i)).toString());"
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2153,     xactFactory.submitPostCommitWork((Serviceable)postCommitWorks.get((i)));
java/engine/org/apache/derby/impl/store/raw/xact/Xact.java,2157,   postCommitWorks.clear();
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,202,    public void xtestReclamationOnRollback() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,246,        // 1 head page per container.
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,247,"        checkNumAllocatedPages(""CLOBTAB3"", (numrows * 2) + 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,255,
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,256,        // (clob length / page size ) +
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,258,"        checkNumFreePages(""CLOBTAB3"", (clob_length / 32000) + 1 - 1);"
java/engine/org/apache/derby/iapi/store/raw/data/DataFactory.java,429,        @param undo_handler client code supplied undo_handle.
java/engine/org/apache/derby/impl/store/raw/RawStore.java,424,     * @param undo_handle Class to use to notify callers of an undo of an
java/engine/org/apache/derby/impl/store/raw/RawStore.java,425,     *                    insert.
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1389,     * @param undo_handle Class to use to notify callers of an undo of an
java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java,1390,     *                    insert.
java/engine/org/apache/derby/impl/store/raw/data/BasePage.java,356, /** @see Page#getPageIdentity */
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,304,        // declaring correct run if only max if free pages from 5 pages worth
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,308,"        checkNumFreePagesMax(""CLOBTAB3"", ((clob_length / 32000) * 5) + 1 - 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,317,        // declaring correct run if only max if free pages from 10 pages worth
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,319,        // ((clob length / page size ) * 5) +
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,321,"        checkNumFreePagesMax(""CLOBTAB3"", ((clob_length / 32000) * 10) + 1 - 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,283,    public void testAddIdentityColumn() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,98,"        checkNumAllocatedPages(""CLOBTAB"",expectedNumAllocated);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,108,"    private void checkNumAllocatedPages(String table, int expectedAlloc) throws SQLException {"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,115,"        ps.setString(1,table);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,117,        ResultSet rs = ps.executeQuery();
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,118,"        JDBC.assertFullResultSet(rs, new String[][] { { """""
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,119,                + expectedAlloc } });
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,256,"        checkNumAllocatedPages(""CLOBTAB2"",1);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,297,"        checkNumAllocatedPages(""CLOBTAB3"", 1);"
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,347,"        checkNumAllocatedPages(""CLOBTAB3"", 1);"
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,435,            /*
java/engine/org/apache/derby/impl/store/access/heap/Heap.java,450,            */
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,327,   //page reclaimation is done asynchronosly by raswstore daemon
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,329,   //If we can not get the lock this reclamation request will
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,336,            Conglomerate conglom =
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,337,                internal_xact.findExistingConglomerateFromKey(
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,338,                    page_key.getContainerId());
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,339,
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,340,            if (SanityManager.DEBUG)
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,341,            {
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,342,                // This code can only handle Heap conglomerates.
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,343,"                SanityManager.ASSERT(conglom instanceof Heap,"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,344,"                        ""Code expecting PageKey/ContainerKey of a Heap"");"
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,345,            }
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,346,
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,347,            Heap heap = (Heap) conglom;
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,350,                heap.open(
java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java,360,"                    heap,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,283,"    /* DERBY-6774, renaming to xtestAddIdentityColumn to stop test from"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,284,     * being run in nightly's while I work on fixing the bug.  I now have
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,285,     * a test that is reproducing the problems so do not need nightly
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,286,     * failures to diagnose the problem for now.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,287,     *
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,288,     * TODO (mikem) - renenable test after DERBY-6774 is fixed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,289,     */
java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java,290,    public void xtestAddIdentityColumn() throws SQLException {
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,139,            int num_retries = 0;
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,155,                    // try sleeping again.
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,158,                        Thread.sleep(5000);
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,157,                    // commit work.
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,160,                        Thread.sleep(10000 * num_retries);
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,179,                previous_alloc_count = num_allocated_pages;
java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java,194,"                    ""Fail -- num_allocated_pages:"" + num_allocated_pages +"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,200,"        waitForConnect(100L, 10,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,201,"                slaveDatabasePath + FS + slaveDbSubPath + FS + replicatedDb,"
java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java,202,"                slaveServerHost, slaveServerPort);"
java/engine/org/apache/derby/vti/XmlVTI.java,348,            t.printStackTrace( System.out );
java/engine/org/apache/derby/vti/XmlVTI.java,349,            throw new SQLException( t.getMessage() );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,75,        suite.addTest(TestConfiguration.defaultSuite(XMLXXETest.class));
java/engine/org/apache/derby/iapi/services/context/ContextManager.java,29,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/iapi/services/context/ContextService.java,29,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/iapi/services/context/SystemContext.java,27,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,24,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/iapi/util/InterruptStatus.java,28,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java,35,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java,52,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java,45,import org.apache.derby.iapi.error.ShutdownException;
java/engine/org/apache/derby/iapi/error/ShutdownException.java,3,   Derby - Class org.apache.derby.iapi.error.ShutdownException
java/engine/org/apache/derby/iapi/error/ShutdownException.java,22,package org.apache.derby.iapi.error;
java/testing/org/apache/derbyTesting/functionTests/tests/memorydb/DropWhileConnectingTest.java,377,                if (t instanceof org.apache.derby.iapi.error.ShutdownException){
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,214, // This next line will need to change once DERBY-6807 is fixed:
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,215," assertEquals( ""SECRET DATA SHOULD NOT HAVE BEEN EXPOSED"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,216,   rs.getString( 4 ).trim() );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,122, // XXX: The next result is wrong. The expected behavior is that the
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,123, // query should be rejected as a security violation. See DERBY-6807
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,124," // for more details; when that issue is resolved, this test will need"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,125, // to be changed.
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,126,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,130,"             ""<yolo>HelloWorld</yolo>"");"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java,248,        suite.addTest(XMLOptimizerTraceTest.suite());
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,41, * OptionalTool which adds a function for turning a query result
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,42, * into a JSON array. Each cell in the array is a row. Each row
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,43, * has key/value pairs for all columns returned by the query.
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,44, * This tool binds a user-defined type to the simple-json JSONArray
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,45, * class.
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,94,        createFunction( derbyConn );
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,113,        dropFunction( derbyConn );
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,195,    private void    createFunction
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,201,        String  createString =
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,202,"            ""create function toJSON"" +"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,203,"            ""\n("" +"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,204,"            ""\n\tqueryString varchar( 32672 ),"" +"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,205,"            ""\n\tqueryArgs varchar( 32672 ) ..."" +"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,206,"            ""\n)\nreturns JSONArray\n"" +"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,207,"            ""\nlanguage java parameter style derby reads sql data"" +"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,208,"            ""\nexternal name 'org.apache.derby.optional.json.SimpleJsonTool.toJSON'"";"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,209,
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,210,"        executeDDL( derbyConn, createString );"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,213,    private void    dropFunction
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,219,        String  createString =
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,220,"            ""drop function toJSON"";"
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,221,
java/optional/org/apache/derby/optional/json/SimpleJsonTool.java,222,"        executeDDL( derbyConn, createString );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/SimpleJsonTest.java,74,        return suite;
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,170,     * Read a JSONArray from an InputStream.
java/optional/org/apache/derby/optional/api/LuceneUtils.java,160,        catch (IllegalAccessException iae) { throw wrap( iae ); }
java/optional/org/apache/derby/optional/api/LuceneUtils.java,161,        catch (InstantiationException ie)   { throw wrap( ie ); }
java/optional/org/apache/derby/optional/api/LuceneUtils.java,162,        catch (InvocationTargetException ite)   { throw wrap( ite ); }
java/optional/org/apache/derby/optional/api/LuceneUtils.java,163,        catch (NoSuchMethodException nsme)  { throw wrap( nsme ); }
java/optional/org/apache/derby/optional/api/LuceneUtils.java,229,    /** Wrap an external exception */
java/optional/org/apache/derby/optional/api/LuceneUtils.java,230,    private  static  SQLException    wrap( Throwable t )
java/optional/org/apache/derby/optional/api/LuceneUtils.java,231,    {
java/optional/org/apache/derby/optional/api/LuceneUtils.java,232,        return sqlException( StandardException.plainWrapException( t ) );
java/optional/org/apache/derby/optional/api/LuceneUtils.java,233,    }
java/optional/org/apache/derby/optional/api/LuceneUtils.java,234,
java/optional/org/apache/derby/optional/api/LuceneUtils.java,235,    /** Turn a StandardException into a SQLException */
java/optional/org/apache/derby/optional/api/LuceneUtils.java,236,    private  static  SQLException    sqlException( StandardException se )
java/optional/org/apache/derby/optional/api/LuceneUtils.java,237,    {
java/optional/org/apache/derby/optional/api/LuceneUtils.java,238,        return PublicAPI.wrapStandardException( se );
java/optional/org/apache/derby/optional/api/LuceneUtils.java,239,    }
java/optional/org/apache/derby/optional/api/LuceneUtils.java,240,
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,145,        catch( Throwable t) { throw wrap( t ); }
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,180,        catch (UnsupportedEncodingException uee) { throw wrap( uee ); }
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,186,            catch (IOException ioe) { throw wrap( ioe ); }
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,212,        catch (PrivilegedActionException pae) { throw wrap( pae ); }
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,240,        catch (PrivilegedActionException pae) { throw wrap( pae ); }
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,311,    /**
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,312,     * <p>
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,313,     * Wrap an exception in a SQLException.
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,314,     * </p>
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,315,     */
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,316,    static SQLException wrap( Throwable t )
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,317,    {
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,318,        String  message = t.getMessage();
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,319,        if ( (message == null) || (message.length() == 0) )
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,320,        {
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,321,            message = t.toString();
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,322,        }
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,323,
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,324,"        return new SQLException( message, t );"
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,325,    }
java/optional/org/apache/derby/optional/api/SimpleJsonUtils.java,326,
java/optional/org/apache/derby/optional/api/SimpleJsonVTI.java,305,        catch (Throwable t) { throw SimpleJsonUtils.wrap( t ); }
java/optional/org/apache/derby/optional/lucene/DerbyLuceneDir.java,346,"        return new IOException( LuceneSupport.newSQLException( sqlState, args ).getMessage() );"
java/optional/org/apache/derby/optional/lucene/DerbyLuceneDir.java,386,                     String         normalizedName = LuceneSupport.derbyIdentifier( fileName );
java/optional/org/apache/derby/optional/lucene/DerbyLuceneDir.java,394,"                         throw LuceneSupport.newSQLException( SQLState.SERVICE_DIRECTORY_CREATE_ERROR, normalizedName );"
java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java,149,            throw LuceneSupport.newSQLException
java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java,163,            throw LuceneSupport.newSQLException
java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java,176,        catch (NumberFormatException nfe) { throw LuceneSupport.wrap( nfe ); }
java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java,212,            catch (IOException ioe) { throw LuceneSupport.wrap( ioe ); }
java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java,213,            catch (PrivilegedActionException pae) { throw LuceneSupport.wrap( pae ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,157,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,190,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,206,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,236,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,254,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,272,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,290,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,311,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,355,        catch (IOException e)   { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,360,        return LuceneSupport.newSQLException
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,422,        catch (IOException e) { throw LuceneSupport.wrap( e ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,482,        catch (IOException ioe) { throw LuceneSupport.wrap( ioe ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,483,        catch (ParseException pe) { throw LuceneSupport.wrap( pe ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,484,        catch (PrivilegedActionException pae) { throw LuceneSupport.wrap( pae ); }
java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java,506,            throw LuceneSupport.newSQLException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,53,import org.apache.derby.iapi.error.PublicAPI;
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,149,        catch (StandardException se)    { throw sqlException( se ); }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,152,        mustBeDBO( conn );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,160,            throw newSQLException( SQLState.LUCENE_ENCRYPTED_DB );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,165,            throw newSQLException( SQLState.LUCENE_ALREADY_LOADED );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,168,        boolean sqlAuthorizationEnabled = sqlAuthorizationEnabled( conn );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,251,        mustBeDBO( conn );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,255,            throw newSQLException( SQLState.LUCENE_ALREADY_UNLOADED );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,374,"        mustBeOwner( conn, schema );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,378,            throw newSQLException( SQLState.LUCENE_INDEX_DOES_NOT_EXIST );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,461,            throw newSQLException( SQLState.LUCENE_NO_PRIMARY_KEY );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,465,        vetColumnName( derbyIdentifier( textcol ) );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,543,            query.append( delimitID( derbyIdentifier( textcol ) ) );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,611,"                throw newSQLException( SQLState.LUCENE_DUPLICATE_FIELD_NAME, fieldName );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,624,"                throw newSQLException( SQLState.LUCENE_DUPLICATE_FIELD_NAME, fieldName );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,630,"                throw newSQLException( SQLState.LUCENE_FIELD_KEY_CONFLICT, fieldName );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,687,    /////////////////////////////////////////////////////////////////////
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,688,    //
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,689,    //  ERROR HANDLING
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,690,    //
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,691,    /////////////////////////////////////////////////////////////////////
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,692,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,693,    /** Make a SQLException from a SQLState and optional args */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,694,"    public  static  SQLException    newSQLException( String sqlState, Object... args )"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,695,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,696,"        StandardException   se = StandardException.newException( sqlState, args );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,697,        return sqlException( se );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,698,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,699,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,700,    /** Turn a StandardException into a SQLException */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,701,    public  static  SQLException    sqlException( StandardException se )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,702,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,703,        return PublicAPI.wrapStandardException( se );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,704,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,705,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,706,    /** Wrap an external exception */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,707,    public  static  SQLException    wrap( Throwable t )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,708,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,709,        return sqlException( StandardException.plainWrapException( t ) );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,710,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,711,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,765,"        default:                throw newSQLException( SQLState.LUCENE_UNSUPPORTED_TYPE, typeName );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,865,"            throw newSQLException( SQLState.LUCENE_UNSUPPORTED_TYPE, keyDescriptor.typeName );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1052,        schema = derbyIdentifier( schema );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1053,        table = derbyIdentifier( table );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1054,        textcol = derbyIdentifier( textcol );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1071,            throw sqlException( StandardException.newException( SQLState.LUCENE_NOT_A_STRING_TYPE ) );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1100,"            throw newSQLException( SQLState.LUCENE_BAD_COLUMN_NAME, derbyColumnName );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1110,        schema = derbyIdentifier( schema );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1111,        table = derbyIdentifier( table );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1126,        schema = derbyIdentifier( schema );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1136,        return derbyIdentifier( table ) + SEPARATOR + derbyIdentifier( textcol );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1143,        schema = derbyIdentifier( schema );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1250,            throw newSQLException( SQLState.AUTH_WRITE_WITH_READ_ONLY_CONNECTION );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1266,    /**
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1267,     * <p>
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1268,     * Raise an exception if SQL authorization is enabled and the current user
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1269,     * isn't the DBO or the owner of the indicated schema or if the indicated schema
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1270,     * doesn't exist.
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1271,     * </p>
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1272,     */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1273,"    private static  void    mustBeOwner( Connection conn, String schema )"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1274,        throws SQLException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1275,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1276,        if ( !sqlAuthorizationEnabled( conn ) ) { return; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1277,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1278,"        String  dbo = getOwner( conn, ""SYS"" );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1279,"        String  schemaOwner = getOwner( conn, schema );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1280,        String  currentUser = getCurrentUser( conn );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1281,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1282,        if (
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1283,            (schemaOwner != null) &&
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1284,            (
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1285,             schemaOwner.equals( currentUser ) ||
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1286,             dbo.equals( currentUser )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1287,             )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1288,            )   { return; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1289,        else
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1290,        {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1291,            throw newSQLException( SQLState.LUCENE_MUST_OWN_SCHEMA );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1292,        }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1293,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1294,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1295,    /**
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1296,     * <p>
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1297,     * Raise an exception if SQL authorization is enabled and the current user
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1298,     * isn't the DBO.
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1299,     * </p>
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1300,     */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1301,    private static  void    mustBeDBO( Connection conn )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1302,        throws SQLException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1303,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1304,        if ( !sqlAuthorizationEnabled( conn ) ) { return; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1305,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1306,"        String  dbo = getOwner( conn, ""SYS"" );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1307,        String  currentUser = getCurrentUser( conn );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1308,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1309,        if ( dbo.equals( currentUser ) )   { return; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1310,        else
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1311,        {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1312,            throw newSQLException( SQLState.DBO_ONLY );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1313,        }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1314,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1315,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1316,    /** Get the current user */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1317,    private static  String  getCurrentUser( Connection conn )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1318,        throws SQLException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1319,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1320,"        ResultSet   rs = conn.prepareStatement( ""values current_user"" ).executeQuery();"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1321,        try {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1322,            rs.next();
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1323,            return rs.getString( 1 );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1324,        } finally { rs.close(); }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1325,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1326,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1327,    /**
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1328,     * <p>
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1329,     * Get the owner of the indicated schema. Returns null if the schema doesn't exist.
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1330,     * </p>
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1331,     */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1332,"    private static  String  getOwner( Connection conn, String schema )"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1333,        throws SQLException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1334,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1335,        PreparedStatement   ps = conn.prepareStatement
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1336,"            ( ""select authorizationID from sys.sysschemas where schemaName = ?"" );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1337,"        ps.setString( 1, derbyIdentifier( schema ) );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1338,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1339,        ResultSet   rs = ps.executeQuery();
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1340,        try {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1341,            if ( rs.next() ) { return rs.getString( 1 ); }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1342,            else { return null; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1343,        } finally { rs.close(); }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1344,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1345,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1365,    /**
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1366,     * Returns true if SQL authorization is enabled in the connected database.
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1367,     */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1368,    public  static  boolean sqlAuthorizationEnabled( Connection conn )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1369,        throws SQLException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1370,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1371,        try {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1372,            ResultSet   rs;
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1373,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1374,            // first check to see if NATIVE authentication is on
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1375,"            rs = conn.prepareStatement( ""select count(*) from sys.sysusers"" ).executeQuery();"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1376,            rs.next();
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1377,            try {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1378,                if ( rs.getInt( 1 ) > 0 ) { return true; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1379,            }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1380,            finally { rs.close(); }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1381,        }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1382,        catch (SQLException se)
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1383,        {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1384,            if ( SQLState.DBO_ONLY.equals( se.getSQLState() ) ) { return true; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1385,        }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1386,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1387,        ResultSet   rs = conn.prepareStatement
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1388,            (
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1389,"             ""values syscs_util.syscs_get_database_property( 'derby.database.sqlAuthorization' )"""
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1390,             ).executeQuery();
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1391,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1392,        try {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1393,            if ( !( rs.next() ) ) { return false; }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1394,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1395,"            return ( ""true"".equals( rs.getString( 1 ) ) );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1396,        }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1397,        finally { rs.close(); }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1398,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1399,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1413,    /** Convert a raw string into a properly cased and escaped Derby identifier */
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1414,    static  String  derbyIdentifier( String rawString )
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1415,        throws SQLException
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1416,    {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1417,        try {
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1418,            return IdUtil.parseSQLIdentifier( rawString );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1419,        }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1420,        catch (StandardException se)  { throw sqlException( se ); }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1421,    }
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1422,
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1435,"            throw newSQLException( SQLState.ARGUMENT_MAY_NOT_BE_NULL, argumentName );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1450,"        ResultSet   keysRS = conn.getMetaData().getPrimaryKeys( null, derbyIdentifier( schema ), derbyIdentifier( table ) );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1498,        schema = derbyIdentifier( schema );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1561,            buffer.append( delimitID( derbyIdentifier( key ) ) );
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1649,"            throw newSQLException(SQLState.UNABLE_TO_DELETE_FILE,"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1650,                                  file.getPath());
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1662,"            throw newSQLException( SQLState.LUCENE_INVALID_CHARACTER, invalidCharacter );"
java/optional/org/apache/derby/optional/lucene/LuceneSupport.java,1867,        catch (StandardException se) { throw wrap( se ); }
java/drda/org/apache/derby/impl/drda/AppRequester.java,24,import org.apache.derby.iapi.reference.Limits;
java/drda/org/apache/derby/impl/drda/AppRequester.java,254,        return Limits.DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6521,                String messageId = ferry.getMessageId();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6522,                // arguments are variable part of a message
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6523,                Object[] args = ferry.getArguments();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6524,                for (int i = 0; args != null &&  i < args.length; i++) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6525,                    sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6526,                }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6527,                sqlerrmc += messageId;
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6534,                StringBuilder sb = new StringBuilder();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6535,                sb.append(se.getLocalizedMessage());
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6537,                if (se != null) {
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6538,                    sb.append(SQLERRMC_TOKEN_DELIMITER);
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6539,"                    sb.append(""SQLSTATE: "").append(se.getSQLState());"
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6540,                }
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6541,                sqlerrmc += sb.toString();
java/drda/org/apache/derby/impl/drda/DRDAConnThread.java,6545,"                sqlerrmc += SystemProcedures.SQLERRMC_MESSAGE_DELIMITER + se.getSQLState() + "":"";"
java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java,2149,                    MessageService.getLocalizedMessage(
java/engine/org/apache/derby/catalog/SystemProcedures.java,99,    // This token delimiter value is used to separate the tokens for multiple
java/engine/org/apache/derby/catalog/SystemProcedures.java,100,    // error messages.  This is used in DRDAConnThread
java/engine/org/apache/derby/catalog/SystemProcedures.java,101,    /**
java/engine/org/apache/derby/catalog/SystemProcedures.java,102,"     * <code>SQLERRMC_MESSAGE_DELIMITER</code> When message argument tokes are sent,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,103,     * this value separates the tokens for mulitiple error messages
java/engine/org/apache/derby/catalog/SystemProcedures.java,104,     */
java/engine/org/apache/derby/catalog/SystemProcedures.java,105,"    public static final String SQLERRMC_MESSAGE_DELIMITER = new String(new char[] {(char)20,(char)20,(char)20});"
java/engine/org/apache/derby/catalog/SystemProcedures.java,106,
java/engine/org/apache/derby/catalog/SystemProcedures.java,142,"   if (sqlerrmc.indexOf(SQLERRMC_MESSAGE_DELIMITER, index) == -1)"
java/engine/org/apache/derby/catalog/SystemProcedures.java,144,"   index = sqlerrmc.indexOf(SQLERRMC_MESSAGE_DELIMITER, index) +"
java/engine/org/apache/derby/catalog/SystemProcedures.java,145,                        SQLERRMC_MESSAGE_DELIMITER.length();
java/engine/org/apache/derby/catalog/SystemProcedures.java,151,"   MessageService.getLocalizedMessage(sqlcode, errmcLen, sqlerrmc, sqlerrp, errd0, errd1,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,161,"    endIdx = sqlerrmc.indexOf(SQLERRMC_MESSAGE_DELIMITER, startIdx);"
java/engine/org/apache/derby/catalog/SystemProcedures.java,174,"    MessageService.getLocalizedMessage(sqlcode, (short)sqlError.length(), sqlError,"
java/engine/org/apache/derby/catalog/SystemProcedures.java,184,    startIdx = endIdx + SQLERRMC_MESSAGE_DELIMITER.length();
java/engine/org/apache/derby/iapi/reference/Limits.java,48,
java/engine/org/apache/derby/iapi/reference/Limits.java,49, // Warning. Changing this value will affect upgrade and the creation of the
java/engine/org/apache/derby/iapi/reference/Limits.java,50, // SQLCAMESSAGE procedure. See org.apache.derby.impl.sql.catalog.
java/engine/org/apache/derby/iapi/reference/Limits.java,51, public static final int DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH = 2400;
java/engine/org/apache/derby/iapi/reference/Limits.java,52,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,85, /**
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,86,   Method used by Derby Network Server to get localized message
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,87,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,88,"   @param sqlcode sqlcode, not used."
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,89,   @param errmcLen sqlerrmc length
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,90,"   @param sqlerrmc sql error message tokens, variable part of error message (ie.,"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,91,"      arguments) plus messageId, separated by separator."
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,92,   @param sqlerrp not used
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,93,   @param errd0  not used
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,94,   @param warn  not used
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,95,   @param sqlState 5-char sql state
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,96,   @param file  not used
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,97,   @param localeStr client locale in string
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,98,"   @param msg  OUTPUT parameter, localized error message"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,99,"   @param rc   OUTPUT parameter, return code -- 0 for success"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,100,  */
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,101," public static void getLocalizedMessage(int sqlcode, short errmcLen, String sqlerrmc,"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,102,"          String sqlerrp, int errd0, int errd1, int errd2,"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,103,"          int errd3, int errd4, int errd5, String warn,"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,104,"          String sqlState, String file, String localeStr,"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,105,"          String[] msg, int[] rc)"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,106, {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,107,  //figure out client locale from input locale string
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,108,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,109,"  int _pos1 = localeStr.indexOf(""_"");  // ""_"" position"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,110,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,111,  Locale locale = EN;  //default locale
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,112,  if (_pos1 != -1)
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,113,  {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,114,"      int _pos2 = localeStr.lastIndexOf(""_"");"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,115,"   String language = localeStr.substring(0, _pos1);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,116,   if (_pos2 == _pos1)
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,117,   {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,118,    String country = localeStr.substring(_pos1 + 1);
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,119,"    locale = new Locale(language, country);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,120,   }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,121,   else
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,122,   {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,123,"    String country = localeStr.substring(_pos1 + 1, _pos2);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,124,    String variant = localeStr.substring(_pos2 + 1);
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,125,"    locale = new Locale(language, country, variant);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,126,   }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,127,  }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,129,"  // get messageId and arguments, messageId is necessary for us to look up"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,130,  // localized message from property file.  messageId was sent as the last
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,131,  // token in the sqlerrmc.
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,132,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,133,  String messageId = sqlState;  //use sqlState if we don't have messageId
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,134,  Object[] arguments = null;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,135,  if (sqlerrmc != null && sqlerrmc.length() > 0)
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,136,  {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,137,   char [] sqlerrmc_chars = sqlerrmc.toCharArray();
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,138,"   int numArgs = 0, lastSepIdx = -1; // last separator index"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,139,   for (int i = 0; i < sqlerrmc_chars.length; i++)
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,140,   {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,141,    if (sqlerrmc_chars[i] == 20) // separator
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,142,    {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,143,     numArgs++;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,144,     lastSepIdx = i;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,145,    }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,146,   }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,147,   if (numArgs == 0)
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,148,"    messageId = new String(sqlerrmc_chars); //no args, only messageId then"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,149,   else
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,150,   {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,151,"    messageId = new String(sqlerrmc_chars, lastSepIdx+1, sqlerrmc_chars.length-lastSepIdx-1);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,152,    arguments = new Object[numArgs];
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,153,"    for (int start = 0, arg = 0, i = 0; i < lastSepIdx + 1; i++)"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,154,    {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,155,     if (i == lastSepIdx || sqlerrmc_chars[i] == 20) // delimiter
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,156,     {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,157,"      arguments[arg++] = new String(sqlerrmc_chars, start, i - start);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,158,      start = i + 1;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,159,     }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,160,    }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,161,   }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,162,  }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,163,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,164,  try {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,165,"   msg[0] = formatMessage(getBundleForLocale(locale, messageId), messageId, arguments, true);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,166,   rc[0] = 0;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,167,   return;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,168,  } catch (MissingResourceException mre) {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,169,   // message does not exist in the requested locale
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,170,"   // most likely it does exist in our fake base class _en, so try that."
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,171,  } catch (ShutdownException se) {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,172,  }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,173,"  msg[0] = formatMessage(getBundleForLocale(EN, messageId), messageId, arguments, false);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,174,  rc[0] = 0;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,175, }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,176,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,177, /**
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,178,   Method used by Derby Network Server to get localized message
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,179,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,180,   @param locale  locale
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,181,   @param messageId message id
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,182,   @param args  message arguments
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,183,  */
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,184," public static String getLocalizedMessage(Locale locale, String messageId, Object [] args)"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,185, {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,186,  String locMsg = null;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,187,
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,188,  try {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,189,"   locMsg = formatMessage(getBundleForLocale(locale, messageId), messageId, args, true);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,190,   return locMsg;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,191,  } catch (MissingResourceException mre) {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,192,   // message does not exist in the requested locale
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,193,"   // most likely it does exist in our fake base class _en, so try that."
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,194,  } catch (ShutdownException se) {
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,195,  }
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,196,"  locMsg = formatMessage(getBundleForLocale(EN, messageId), messageId, args, false);"
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,197,  return locMsg;
java/engine/org/apache/derby/iapi/services/i18n/MessageService.java,198, }
java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java,11552,"      Types.VARCHAR, Limits.DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH),"
java/client/org/apache/derby/client/am/SQLExceptionFactory.java,63,                                                            int errCode) {
java/client/org/apache/derby/client/am/SQLExceptionFactory.java,74,"            ex = new SQLIntegrityConstraintViolationException(message, sqlState,"
java/client/org/apache/derby/client/am/SQLExceptionFactory.java,75,                    errCode);
java/client/org/apache/derby/client/am/SqlException.java,322,            getErrorCode());
java/client/org/apache/derby/client/am/Sqlca.java,67,     * @see org.apache.derby.catalog.SystemProcedures#SQLERRMC_MESSAGE_DELIMITER
java/client/org/apache/derby/client/am/Sqlca.java,71,    /** Token delimiter for SQLERRMC. */
java/client/org/apache/derby/client/am/Sqlca.java,72,"    private final static String SQLERRMC_TOKEN_DELIMITER = ""\u0014"";"
java/client/org/apache/derby/client/am/Sqlca.java,415,        String[] tokens = getSqlErrmc().split(SQLERRMC_TOKEN_DELIMITER);
java/client/org/apache/derby/client/am/SQLExceptionFactory.java,75,"            ex = new DerbySQLIntegrityConstraintViolationException(message, sqlState,"
java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java,85,"            ex = new SQLIntegrityConstraintViolationException(message, sqlState,"
java/shared/org/apache/derby/shared/common/error/DerbySQLIntegrityConstraintViolationException.java,34,  tableName = argsOne.toString();
java/shared/org/apache/derby/shared/common/error/DerbySQLIntegrityConstraintViolationException.java,35,  constraintName = argsTwo.toString();
java/shared/org/apache/derby/shared/common/error/DerbySQLIntegrityConstraintViolationException.java,46,  tableName = argsOne.toString();
java/shared/org/apache/derby/shared/common/error/DerbySQLIntegrityConstraintViolationException.java,47,  constraintName = argsTwo.toString();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConstraintCharacteristicsTest.java,902,"                    assertCommitError(LANG_DEFERRED_CHECK_VIOLATION_T,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ConstraintCharacteristicsTest.java,903,                                      getConnection());
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,273,"        assertCommitError(LANG_DEFERRED_FK_CONSTRAINT_T, getConnection());"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1308,"        assertCommitError(LANG_DEFERRED_DUPLICATE_KEY_CONSTRAINT_T,"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java,1309,                          getConnection());
java/client/org/apache/derby/client/am/Sqlca.java,66,    /**
java/client/org/apache/derby/client/am/Sqlca.java,67,     * Character sequence that separates the different messages in the errmc.
java/client/org/apache/derby/client/am/Sqlca.java,68,     * @see org.apache.derby.shared.common.error.MessageUtils#SQLERRMC_MESSAGE_DELIMITER
java/client/org/apache/derby/client/am/Sqlca.java,69,     */
java/client/org/apache/derby/client/am/Sqlca.java,70,"    private static final String sqlErrmcDelimiter__ = ""\u0014\u0014\u0014"";"
java/client/org/apache/derby/client/am/Sqlca.java,71,
java/client/org/apache/derby/client/am/Sqlca.java,72,
java/client/org/apache/derby/client/am/Sqlca.java,73,
java/client/org/apache/derby/client/am/Sqlca.java,175,            buffer.append(sqlErrmcDelimiter__);
java/optional/org/apache/derby/optional/dump/RawDBReader.java,45, * in the seg0 subdirectory of a database.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,79,     * Creates the following:
java/optional/org/apache/derby/optional/dump/RawDBReader.java,84,     * and SYSCOLUMNS in the raw database.</li>
java/optional/org/apache/derby/optional/dump/RawDBReader.java,85,     * <li>A schema for every user schema in the raw database.</li>
java/optional/org/apache/derby/optional/dump/RawDBReader.java,86,     * <li>Table functions and views on every user table in the raw database..</li>
java/optional/org/apache/derby/optional/dump/RawDBReader.java,90,"     * In addition, the tool creates a script for siphoning data out of the raw"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,102,"     * created. These include the views on the raw database's SYSSCHEMAS, SYSCONGLOMERATES,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,105,     * to the names of the local Derby schemas which are created. May not be null or empty.</li>
java/optional/org/apache/derby/optional/dump/RawDBReader.java,106,     * <li>rawDBLocation (required) - Absolute path to the raw database directory.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,108,     * <li>encryptionAttributes (required) - Encryption attributes. May be null
java/optional/org/apache/derby/optional/dump/RawDBReader.java,110,     * <li>dbo (required) - User name of the owner of the raw database. May be null
java/optional/org/apache/derby/optional/dump/RawDBReader.java,112,     * <li>dboPassword (required) - Password for the owner of the raw database. May be null
java/optional/org/apache/derby/optional/dump/RawDBReader.java,126,        String  rawDBLocation = configurationParameters[ idx++ ];
java/optional/org/apache/derby/optional/dump/RawDBReader.java,131,"        if ( nullOrEmpty( recoveryScript) )  { throw badArgs( ""Null or empty recovery script argument."" ); }"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,132,"        if ( nullOrEmpty( controlSchema) )  { throw badArgs( ""Null or empty control schema argument."" ); }"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,133,"        if ( nullOrEmpty( schemaPrefix ) )  { throw badArgs( ""Null or empty schema prefix argument."" ); }"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,134,"        if ( nullOrEmpty( rawDBLocation ) )  { throw badArgs( ""Null or empty database location argument."" ); }"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,135,"        if ( nullOrEmpty( dbo)  )   { throw badArgs( ""Null or empty database owner argument."" ); }"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,139,"        createControlSchema( conn, controlSchema, rawDBLocation, encryptionAttributes, dbo, dboPassword );"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,140,"        createUserSchemas( conn, controlSchema, schemaPrefix, rawDBLocation, encryptionAttributes, dbo, dboPassword );"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,141,"        createViews( conn, recoveryScript, controlSchema, schemaPrefix, rawDBLocation, encryptionAttributes, dbo, dboPassword );"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,157,     * <li>controlSchema (required) - Name of the schema in which control objects were created
java/optional/org/apache/derby/optional/dump/RawDBReader.java,158,     * by loadTool(). May not be null or an empty string.</li>
java/optional/org/apache/derby/optional/dump/RawDBReader.java,160,     * to the names of the local Derby schemas which loadTool() created. May not be null or empty.</li>
java/optional/org/apache/derby/optional/dump/RawDBReader.java,173,"        if ( nullOrEmpty( controlSchema) )  { throw badArgs( ""Null or empty control schema argument."" ); }"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,174,"        if ( nullOrEmpty( schemaPrefix ) )  { throw badArgs( ""Null or empty schema prefix argument."" ); }"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,202,"         String rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,224,"             rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,236,"             rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,248,"             rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,260,"             rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,268,     * Create a table function and view for a raw database table.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,277,"         String rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,313,"             ""        '"" + rawDBLocation + ""',\n"" +"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,332,"         String rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,358,    /** Make the name of a local schema from a prefix and a raw name */
java/optional/org/apache/derby/optional/dump/RawDBReader.java,359,"    private String  makeSchemaName( String schemaPrefix, String rawName )"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,361,        return IdUtil.normalToDelimited( schemaPrefix + rawName );
java/optional/org/apache/derby/optional/dump/RawDBReader.java,365,     * Create table functions and views on user tables. Write the recovery
java/optional/org/apache/derby/optional/dump/RawDBReader.java,374,"         String rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,409,        String  rawSchemaName = null;
java/optional/org/apache/derby/optional/dump/RawDBReader.java,410,        String  rawTableName = null;
java/optional/org/apache/derby/optional/dump/RawDBReader.java,417,            String  currentRawSchemaName = rs.getString( col++ );
java/optional/org/apache/derby/optional/dump/RawDBReader.java,418,            String  currentRawTableName = rs.getString( col++ );
java/optional/org/apache/derby/optional/dump/RawDBReader.java,420,            if ( !currentRawSchemaName.equals( rawSchemaName ) )
java/optional/org/apache/derby/optional/dump/RawDBReader.java,423,"                    ( ""create schema "" + IdUtil.normalToDelimited( currentRawSchemaName ) + "";\n"" );"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,426,"            String  newSchemaName = makeSchemaName( schemaPrefix, currentRawSchemaName );"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,427,            String  newTableName = IdUtil.normalToDelimited( currentRawTableName );
java/optional/org/apache/derby/optional/dump/RawDBReader.java,438,"                         rawSchemaName,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,439,"                         rawTableName,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,445,"                         rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,455,            rawSchemaName = currentRawSchemaName;
java/optional/org/apache/derby/optional/dump/RawDBReader.java,456,            rawTableName = currentRawTableName;
java/optional/org/apache/derby/optional/dump/RawDBReader.java,473,"                 rawSchemaName,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,474,"                 rawTableName,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,480,"                 rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,493,    private String  normalizeColumnName( String raw )
java/optional/org/apache/derby/optional/dump/RawDBReader.java,501,               dblook.addQuotes( raw )
java/optional/org/apache/derby/optional/dump/RawDBReader.java,508,     * Create the table function and view for a single raw table.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,510,     * of the raw database into the current database.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,517,"         String rawSchemaName,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,518,"         String rawTableName,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,524,"         String rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,534,"            IdUtil.normalToDelimited( rawSchemaName ) + ""."" +"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,535,            IdUtil.normalToDelimited( rawTableName );
java/optional/org/apache/derby/optional/dump/RawDBReader.java,553,"             rawDBLocation,"
java/optional/org/apache/derby/optional/dump/RawDBReader.java,595,     * Drop the table functions and views on user tables.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,630,     * Drop the table function and view for a raw database catalog.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,648,     * on raw conglomerates.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,679,     * raw external core conglomerates.
java/optional/org/apache/derby/optional/dump/RawDBReader.java,738,"        String  sqlState = org.apache.derby.shared.common.reference.SQLState.JAVA_EXCEPTION.substring( 0, 5 );"
java/tools/org/apache/derby/tools/PlanExporter.java,182,                  System.out.println(
java/tools/org/apache/derby/tools/PlanExporter.java,183,"                    ""====================================================\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,184,"                    ""--- An Error Occured: No Statistics has Captured ---\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,185,"                    ""-- Possible reasons:                              --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,186,"                    ""-- 1) The statement executed is a DDL statement.  --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,187,"                    ""-- Statistics will not capture for DDL statements --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,188,"                    ""-- by the Derby.                                  --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,189,"                    ""-- 2) The statement ID entered is incorrect.      --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,190,"                    ""-- 3) Schema specified does not exist.            --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,191,"                    ""====================================================\n"""
java/tools/org/apache/derby/tools/PlanExporter.java,192,                  );
java/tools/org/apache/derby/tools/PlanExporter.java,196,                 System.out.println(
java/tools/org/apache/derby/tools/PlanExporter.java,197,"                ""====================================================\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,198,"                ""---              An Error Occured:               ---\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,199,"                ""-------   Specified Schema does not exist.   -------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,200,"                ""======================================================"");"
java/tools/org/apache/derby/tools/PlanExporter.java,286,        System.out.println
java/tools/org/apache/derby/tools/PlanExporter.java,287,        (
java/tools/org/apache/derby/tools/PlanExporter.java,288,"                ""================================================\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,289,"                ""-------------- PlanExporter Tool ---------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,290,"                ""--   You can pass 5 arguments (minimum), or   --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,291,"                ""--       7 arguments or 8 arguments or        --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,292,"                ""-----------  9 arguments (maximum)  ------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,293,"                ""--         separated by a space.              --\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,294,"                ""---------------Mandatory Arguments--------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,295,"                ""1) database URL --------------------------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,296,"                ""2) database schema -----------------------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,297,"                ""3) statement ID (36 characters) ----------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,298,"                ""---------------Optional Arguments---------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,299,"                ""-----------Choose at least one option-----------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,300,"                ""a) -xml {pathToXML} or -html {pathToHTML} ------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,301,"                ""b) -xml {pathToXML} -html {pathToHTML} ---------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,302,"                ""c) -xsl {pathToXSL} -html {pathToHTML} ---------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,303,"                ""d) -xml {pathToXML} -xsl {pathToXSL} -----------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,304,"                ""      -html {pathToHTML} -----------------------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,305,"                ""e) -adv -xml {pathToXML} -xsl {pathToXSL} ------\n"" +"
java/tools/org/apache/derby/tools/PlanExporter.java,306,"                ""================================================\n"""
java/tools/org/apache/derby/tools/PlanExporter.java,307,        );
java/tools/org/apache/derby/iapi/tools/run.java,29,import org.apache.derby.tools.SignatureChecker;
java/tools/org/apache/derby/iapi/tools/run.java,30,import org.apache.derby.iapi.tools.i18n.LocalizedResource;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,26,import java.io.LineNumberReader;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,286,        File                script = new File( RECOVERY_SCRIPT );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,287,        LineNumberReader    reader = new LineNumberReader( new FileReader( script ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,288,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,289,        while ( true )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,291,            String  line = reader.readLine();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,292,            if ( line == null ) { break; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,293,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,294,            // skip the initial connection statement
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,295,            // as well as comments and blank lines
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,296,            if ( line.length() == 0 ) { continue; }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,297,"            if ( line.startsWith( ""connect"" ) ) { continue; }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,298,"            if ( line.startsWith( ""--"" ) ) { continue; }"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,299,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,300,            // strip off the trailing semi-colon
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,301,"            line = line.substring( 0, line.indexOf( ';' ) );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,302,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,303,"            goodStatement( conn, line );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,150,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,156,            assertTrue( deleteFile( _dbDir ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,377,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,378,    private  boolean deleteFile( File file ) throws Exception
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,379,    {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,380,        boolean retval = true;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,381,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,382,        if ( file.isDirectory() )
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,383,        {
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,384,            for ( File child : file.listFiles() ) { retval = retval && deleteFile( child ); }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,385,        }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,386,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,387,        return retval && file.delete();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,388,    }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,389,
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,32,import java.io.ObjectInput;
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,33,import java.io.ObjectInputStream;
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,34,import java.io.ObjectOutputStream;
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,35,import java.io.OutputStream;
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,36,import java.io.PrintStream;
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,42,import java.security.PrivilegedAction;
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,61,import org.apache.derby.iapi.jdbc.AuthenticationService;
java/optional/org/apache/derby/optional/dump/DataFileVTI.java,900,            properties.load( new FileInputStream( serviceProperties ) );
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,31,import org.apache.derbyTesting.junit.BaseTestSuite;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,56,"    private static  final   String      CORRUPT_DATABASE = ""rrtCorruptDatabase"";"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,122,        BaseTestSuite baseTest = (BaseTestSuite)TestConfiguration.embeddedSuite(
java/testing/org/apache/derbyTesting/functionTests/tests/lang/RawDBReaderTest.java,123,            RawDBReaderTest.class );
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,24,import java.lang.reflect.Array;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,25,import java.lang.reflect.Field;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,26,import java.lang.reflect.InvocationTargetException;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,27,import java.lang.reflect.Method;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,37,import java.util.Iterator;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,38,import java.util.List;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,44,import org.apache.derby.iapi.services.info.JVMInfo;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,45,import org.apache.derby.shared.common.sanity.SanityManager;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,83,        // We can not test file permissions before Java 1.7
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,84,        if (JVMInfo.JDK_ID < JVMInfo.J2SE_17) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,85,"            println(""warning: testing of strict permissions in "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,86,"                    ""RestrictiveFilePermissionsTest can not take place, "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,87,"                    ""need Java 7"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,88,            return new BaseTestSuite();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,89,        }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,90,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,504,    private static boolean initialized = false;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,505,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,506,    // Reflection helper objects for calling into Java >= 7
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,507,    private static Class<?> filesClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,508,    private static Class<?> pathClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,509,    private static Class<?> pathsClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,510,    private static Class<?> aclEntryClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,511,    private static Class<?> aclFileAttributeViewClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,512,    private static Class<?> posixFileAttributeViewClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,513,    private static Class<?> posixFileAttributesClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,514,    private static Class<?> posixFilePermissionClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,515,    private static Class<?> userPrincipalClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,516,    private static Class<?> linkOptionArrayClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,517,    private static Class<?> linkOptionClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,518,    private static Class<?> stringArrayClz;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,519,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,520,    private static Method get;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,521,    private static Method getFileAttributeView;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,522,    private static Method getOwner;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,523,    private static Method getAcl;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,524,    private static Method principal;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,525,    private static Method getName;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,526,    private static Method permissionsAcl;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,527,    private static Method permissionsPosix;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,528,    private static Method readAttributes;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,529,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,530,    private static Field GROUP_EXECUTE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,531,    private static Field GROUP_READ;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,532,    private static Field GROUP_WRITE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,533,    private static Field OTHERS_EXECUTE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,534,    private static Field OTHERS_READ;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,535,    private static Field OTHERS_WRITE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,536,    private static Set<Object> unwantedPermissions;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,540,     * <p/>
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,541,     * We need Java 7 to ascertain whether we managed to restrict file
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,542,     * permissions: The Java 6 {@code java.io.File} API only lets us check if
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,543,     * this process has access.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,544,     * <p/>
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,545,     * In this sense this testing code is asymmetric to the implementation in
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,546,"     * Derby: Java 6 can be used to restrict accesses in Java 6 on Unix, but"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,547,"     * we have no way in Java of checking the results in a portable way. So, if"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,548,"     * we do not have at least Java 7, this method will be a no-op."
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,583,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,584,            AccessController.doPrivileged(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,585,                    new PrivilegedExceptionAction<Void>() {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,586,                public Void run() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,587,                    File [] files = file.listFiles();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,588,                    for (int i = 0; i < files.length; i++){
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,589,                        checkAccessToOwner(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,590,"                            files[i], false, expectedOutcome);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,591,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,592,                    return null;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,593,                }});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,597,            doPrivileged(new PrivilegedExceptionAction<Boolean>() {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,598,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,599,                public Boolean run() throws Exception {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,600,                    // lazy initialization
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,601,                    if (!initialized) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,602,                        initialized = true;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,603,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,604,"                        // If found, we have >= Java 7."
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,605,                        filesClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,606,"                            ""java.nio.file.Files"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,607,                        pathClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,608,"                            ""java.nio.file.Path"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,609,                        pathsClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,610,"                            ""java.nio.file.Paths"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,611,                        aclEntryClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,612,"                            ""java.nio.file.attribute.AclEntry"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,613,                        aclFileAttributeViewClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,614,"                            ""java.nio.file.attribute."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,615,"                            ""AclFileAttributeView"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,616,                        posixFileAttributeViewClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,617,"                            ""java.nio.file.attribute."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,618,"                            ""PosixFileAttributeView"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,619,                        posixFileAttributesClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,620,"                            ""java.nio.file.attribute."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,621,"                            ""PosixFileAttributes"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,622,                        posixFilePermissionClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,623,"                            ""java.nio.file.attribute."" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,624,"                            ""PosixFilePermission"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,625,                        userPrincipalClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,626,"                            ""java.nio.file.attribute.UserPrincipal"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,627,                        linkOptionArrayClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,628,"                            ""[Ljava.nio.file.LinkOption;"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,629,                        linkOptionClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,630,"                            ""java.nio.file.LinkOption"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,631,                        stringArrayClz = Class.forName(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,632,"                            ""[Ljava.lang.String;"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,633,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,634,                        get = pathsClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,635,"                            getMethod(""get"","
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,636,"                                      new Class[]{String.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,637,                                                  stringArrayClz});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,638,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,639,                        getFileAttributeView = filesClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,640,"                            getMethod(""getFileAttributeView"","
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,641,"                                      new Class[]{pathClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,642,"                                                  Class.class,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,643,                                                  linkOptionArrayClz});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,644,                        getOwner = filesClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,645,                            getMethod(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,646,"                                ""getOwner"","
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,647,"                                new Class[]{pathClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,648,                                            linkOptionArrayClz});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,649,                        getAcl = aclFileAttributeViewClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,650,"                            getMethod(""getAcl"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,651,                        principal = aclEntryClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,652,"                            getMethod(""principal"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,653,                        getName = userPrincipalClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,654,"                            getMethod(""getName"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,655,                        permissionsAcl = aclEntryClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,656,"                            getMethod(""permissions"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,657,                        permissionsPosix = posixFileAttributesClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,658,"                            getMethod(""permissions"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,659,                        readAttributes = posixFileAttributeViewClz.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,660,"                            getMethod(""readAttributes"", new Class[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,661,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,662,                        GROUP_EXECUTE =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,663,"                            posixFilePermissionClz.getField(""GROUP_EXECUTE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,664,                        GROUP_READ =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,665,"                            posixFilePermissionClz.getField(""GROUP_READ"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,666,                        GROUP_WRITE =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,667,"                            posixFilePermissionClz.getField(""GROUP_WRITE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,668,                        OTHERS_EXECUTE =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,669,"                            posixFilePermissionClz.getField(""OTHERS_EXECUTE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,670,                        OTHERS_READ =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,671,"                            posixFilePermissionClz.getField(""OTHERS_READ"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,672,                        OTHERS_WRITE =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,673,"                            posixFilePermissionClz.getField(""OTHERS_WRITE"");"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,674,                        unwantedPermissions = new HashSet<Object>();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,675,                        unwantedPermissions.add(GROUP_EXECUTE.get(null));
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,676,                        unwantedPermissions.add(GROUP_READ.get(null));
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,677,                        unwantedPermissions.add(GROUP_WRITE.get(null));
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,678,                        unwantedPermissions.add(OTHERS_EXECUTE.get(null));
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,679,                        unwantedPermissions.add(OTHERS_READ.get(null));
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,680,                        unwantedPermissions.add(OTHERS_WRITE.get(null));
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,681,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,682,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,683,"                    // Only used with expectedOutcome == UNKNOWN, otherwise"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,684,                    // we throw:
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,685,                    boolean someThingBeyondOwnerFound = false;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,686,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,687,"                    // We have Java 7. We need to call reflectively, since"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,688,                    // the source level isn't yet at Java 7.
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,689,                    try {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,690,                        Object fileP = get.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,691,"                            null, new Object[]{file.getPath(),"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,692,                                               new String[]{}});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,693,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,694,                        // ACLs supported on this platform? Check the current
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,695,                        // file system:
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,696,                        Object aclView = getFileAttributeView.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,697,"                            null,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,698,                            new Object[]{
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,699,"                                fileP,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,700,"                                aclFileAttributeViewClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,701,"                                Array.newInstance(linkOptionClz, 0)});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,702,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,703,                        Object posixView = getFileAttributeView.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,704,"                            null,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,705,                            new Object[]{
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,706,"                                fileP,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,707,"                                posixFileAttributeViewClz,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,708,"                                Array.newInstance(linkOptionClz, 0)});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,709,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,710,                        if (aclView != null && posixView == null) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,711,                            // Windows
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,712,                            Object owner = getOwner.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,713,"                                null,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,714,                                new Object[]{
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,715,"                                    fileP,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,716,"                                    Array.newInstance(linkOptionClz, 0)});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,717,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,718,                            List oldAcl =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,719,"                                (List)getAcl.invoke(aclView, (Object[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,720,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,721,                            for (Iterator i = oldAcl.iterator(); i.hasNext();) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,722,                                Object ace = i.next();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,723,                                Object princ =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,724,"                                    principal.invoke(ace, (Object[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,725,                                String princName =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,726,                                    (String)getName.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,727,"                                        princ, (Object[])null);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,728,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,729,                                if (posixView != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,730,"                                    if (princName.equals(""OWNER@"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,731,"                                        // OK, permission for owner"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,732,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,733,                                    } else if (
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,734,"                                        princName.equals(""GROUP@"") ||"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,735,"                                        princName.equals(""EVERYONE@"")) {"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,736,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,737,                                        Set s = (Set)permissionsAcl.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,738,"                                            ace,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,739,                                            (Object[])null);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,740,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,741,                                        if (expectedOutcome == POSITIVE) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,742,                                            assertTrue(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,743,"                                                ""Non-empty set of  "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,744,"                                                ""permissions for uid: "" +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,745,"                                                princName + "" for file "" + file,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,746,                                                s.isEmpty());
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,747,                                        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,748,                                            someThingBeyondOwnerFound =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,749,                                                !s.isEmpty();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,750,                                        }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,751,                                    }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,752,                                } else {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,753,"                                    // NTFS, hopefully"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,754,                                    if (princ.equals(owner)) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,755,                                        // OK
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,756,                                    } else {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,757,                                        if (expectedOutcome == POSITIVE) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,758,                                            fail(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,759,"                                                ""unexpected uid "" + princName +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,760,"                                                "" can access file "" + file);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,761,                                        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,762,                                            someThingBeyondOwnerFound = true;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,763,                                        }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,764,                                    }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,765,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,766,                                }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,767,                            }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,768,                        } else if (posixView != null) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,769,                            // Unixen
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,770,                            Object posixFileAttributes =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,771,"                                readAttributes.invoke(posixView,"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,772,                                                      new Object[]{});
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,773,                            Set permissionsSet =
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,774,                                (Set)permissionsPosix.invoke(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,775,"                                    posixFileAttributes, new Object[]{});"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,776,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,777,                            for (Iterator i = permissionsSet.iterator();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,778,                                 i.hasNext();) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,779,                                Object perm = i.next();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,780,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,781,                                if (unwantedPermissions.contains(perm)) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,782,                                    if (expectedOutcome == POSITIVE) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,783,"                                        fail(""unwanted permission "" + perm +"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,784,"                                             "" for file "" + file);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,785,                                    }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,786,                                    someThingBeyondOwnerFound = true;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,787,                                    break;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,788,                                }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,790,                        } else {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,791,                            fail();
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,793,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,794,                        if (expectedOutcome == NEGATIVE &&
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,795,                                !someThingBeyondOwnerFound) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,796,                            fail(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,797,"                                ""unexpected restrictive access: "" + file);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,798,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,799,
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,800,                    } catch (IllegalAccessException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,801,                        // coding error
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,802,                        if (SanityManager.DEBUG) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,803,                            SanityManager.THROWASSERT(e);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,804,                        }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,805,                    } catch (IllegalArgumentException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,806,                        // coding error
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,807,                        if (SanityManager.DEBUG) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,808,                            SanityManager.THROWASSERT(e);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,810,                    } catch (InvocationTargetException e) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,811,                        throw e;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,814,                    if (expectedOutcome != UNKNOWN) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,815,"                        println(""checked perms on: "" + file);"
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,816,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,818,                    if (expectedOutcome == UNKNOWN &&
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,819,                            someThingBeyondOwnerFound) {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,820,                        return Boolean.TRUE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,821,                    } else {
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,822,                        return Boolean.FALSE;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,823,                    }
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,824,                }});
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,37,import org.apache.derby.iapi.services.info.JVMInfo;
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,462,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,463,    // Members used by limitAccessToOwner
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,464,    private final static FilePermissionService filePermissionService =
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,465,            loadFilePermissionService();
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,466,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,467,    private static FilePermissionService loadFilePermissionService() {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,468,        try {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,469,            Class cl = Class.forName(
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,470,"                    FilePermissionService.class.getName() + ""Impl"");"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,471,            return (FilePermissionService) cl.newInstance();
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,472,        } catch (ClassNotFoundException ex) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,473,        } catch (InstantiationException ex) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,474,        } catch (IllegalAccessException ex) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,475,        } catch (LinkageError e) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,476,        }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,477,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,478,        // Could not create an instance. This most likely means we are
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,479,"        // not on Java 7 or higher. Just return null, and let"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,480,        // limitAccessToOwner() choose another strategy on older platforms.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,481,        return null;
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,482,    }
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,483,
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,506,"     * On Windows, with NTFS with ACLs, if running with Java 7 or higher, we"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,507,     * limit access also for Windows using the new {@code
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,508,     * java.nio.file.attribute} package.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,533,            if (Boolean.valueOf(value.trim()).booleanValue()) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,538,            // running with the network server started from the command line
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,539,            // *and* at Java 7 or above
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,540,            if (JVMInfo.JDK_ID >= JVMInfo.J2SE_17 &&
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,541,                    (PropertyUtil.getSystemBoolean(
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,542,"                        Property.SERVER_STARTED_FROM_CMD_LINE, false)) ) {"
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,612,        // See if we are running on JDK 7 so we can deny access
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,613,        // using the new java.nio.file.attribute package.
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,615,        if (filePermissionService == null) {
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,616,            // nope
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,617,            return false;
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,620,"        // We have Java 7, so call."
java/engine/org/apache/derby/iapi/services/io/FileUtil.java,621,        return filePermissionService.limitAccessToOwner(file);
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,40,import java.util.Arrays;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,42,import java.util.HashSet;
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,499,            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(
java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java,505,                    PosixFilePermission.OTHERS_WRITE)));
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,28, * written using the OROMatcher Perl5 regular expression classes.
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,35,import org.apache.oro.text.regex.*;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,36,import java.util.Enumeration;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,151,"        searchStrings.addElement(""^  Waiting XID : {.*}"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,316,
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,317,        boolean lineDeleted = false;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,318,        PatternMatcher matcher;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,319,        Perl5Compiler pcompiler;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,320,        PatternMatcherInput input;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,323,"        String result = """";"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,324,        String regex;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,325,        Vector<Pattern> delPatternVector = new Vector<Pattern>();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,326,        Vector<Pattern> subPatternVector = new Vector<Pattern>();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,335,            for (Enumeration e = sedp.propertyNames(); e.hasMoreElements(); )
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,337,                String key = (String)e.nextElement();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,377,        //Create Perl5Compiler and Perl5Matcher
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,378,        pcompiler = new Perl5Compiler();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,379,        matcher = new Perl5Matcher();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,380,
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,396,        for (int i = 0; i < deleteLines.size(); i++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,397,        {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,398,            try
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,399,            {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,400,                regex = (String)deleteLines.elementAt(i);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,401,"                //System.out.println(""The pattern: "" + regex);"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,402,                Pattern pattern = pcompiler.compile(regex);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,403,                if (pattern == null)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,404,"                    System.out.println(""pattern is null"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,405,                delPatternVector.addElement(pattern);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,406,            }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,407,            catch(MalformedPatternException e)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,408,            {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,409,"                System.out.println(""Bad pattern."");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,410,                System.out.println(e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,411,            }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,412,        }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,415,        for (int i = 0; i < searchStrings.size(); i++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,416,        {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,417,            try
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,418,            {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,419,                regex = (String)searchStrings.elementAt(i);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,420,"                //System.out.println(""The pattern: "" + regex);"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,421,                Pattern pattern = pcompiler.compile(regex);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,422,                if (pattern == null)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,423,"                    System.out.println(""pattern is null"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,424,                subPatternVector.addElement(pattern);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,425,            }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,426,            catch(MalformedPatternException e)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,427,            {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,428,"                System.out.println(""Bad pattern."");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,429,                System.out.println(e.getMessage());
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,430,            }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,431,        }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,443,            lineDeleted = false;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,498,                for (j = 0; j < delPatternVector.size(); j++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,499,                {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,500,"                    if ( matcher.contains( str, (Pattern)delPatternVector.elementAt(j) ) )"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,501,                    {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,502,"                        //System.out.println(""***Match found to delete line***"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,503,                        String tmpp = ((Pattern)delPatternVector.elementAt(j)).getPattern();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,504,"                        //System.out.println(""***Pattern is: "" + tmpp);"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,505,
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,506,"                        // In this case we are removing the line, so don't write it out"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,507,                        lineDeleted = true;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,508,                        break;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,509,                    }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,510,                }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,516,                Substitution substitution;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,517,"                StringSubstitution strsub = new StringSubstitution("""");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,518,"                Perl5Substitution perlsub = new Perl5Substitution("""");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,519,                boolean subDone = false;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,520,                for (j = 0; j < subPatternVector.size(); j++)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,522,                    input = new PatternMatcherInput(str);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,523,                    Pattern patt = (Pattern)subPatternVector.elementAt(j);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,524,                    String pstr = patt.getPattern();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,525,"                    //System.out.println(""Pattern string is "" + pstr);"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,526,                    String sub = (String)subStrings.elementAt(j);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,527,"                    if (sub.indexOf(""$"") > 0)"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,528,                    {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,529,                        perlsub.setSubstitution(sub);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,530,                        substitution = (Substitution)perlsub;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,531,                    } else {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,532,                        strsub.setSubstitution(sub);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,533,                        substitution = (Substitution)strsub;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,534,                    }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,536,"                    if ( matcher.contains( input, patt ) )"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,537,                    {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,538,                        MatchResult mr = matcher.getMatch();
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,539,"                        //System.out.println(""***Match found for substitute***"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,540,                        // In this case we do a substitute
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,541,"                        result = Util.substitute(matcher, patt, substitution, str,"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,542,                        Util.SUBSTITUTE_ALL);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,543,"                        //System.out.println(""New string: "" + result);"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,544,                        //outFile.println(result);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,545,                        str = result;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,546,                        subDone = true;
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,547,                    }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,548,                }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,549,                if (subDone)
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,550,                {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,551,"                    //System.out.println(""write the subbed line"");"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,552,                    outFile.println(result);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,553,                }
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,554,                else
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,555,                {
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,556,"                    //System.out.println(""Write the str: "" + str);"
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,557,                    outFile.println(str);
java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java,558,                    outFile.flush();
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,26,import java.sql.CallableStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,27,import java.sql.Connection;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,28,import java.sql.PreparedStatement;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,30,import java.sql.ResultSetMetaData;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,32,import java.sql.SQLWarning;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,34,import java.sql.Types;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,39,import org.apache.derbyTesting.junit.BaseJDBCTestSetup;
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,87,
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,88,        return SecurityManagerSetup.noSecurityManager(suite);
java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLXXETest.java,253,"  assertTrue( e.getMessage().indexOf( ""entity expansions"" ) > 0 );"
java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java,293,     for (int i=0; i<objectArr.length; i++)
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2695,   //determine if the column is a base column and not a derived column
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2696,            if (rc.getSourceTableName() != null) {
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2697,                rc.markUpdatableByCursor();
java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java,2698,            }
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,462,    insertFirst
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,463,      .setString(
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,464,"        5,"
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,465,"        ""This column is used only to by pass the space problem. If the problem still exists, then we are going to """
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/DbTasks.java,466,"          + ""have a serious issue here.*****************************************************************************************************"");"
java/testing/org/apache/derbyTesting/system/mailjdbc/utils/Statements.java,26," public static String insertStr = ""insert into REFRESH.INBOX(from_name,to_name,date,Message,size_problem) values (?,?,?,?,?)"";"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,81,        try {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,82,            //
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,83,            // We'd rather load this slightly more capable driver.
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,84,"            // But if the vm level doesn't support it, then we fall"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,85,            // back on the JDBC3 level driver.
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,86,            //
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,87,"            Class.forName( ""org.apache.derby.jdbc.AutoloadedDriver40"" );"
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,88,        }
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,89,        catch (Throwable e)
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,90,        {
java/engine/org/apache/derby/jdbc/AutoloadedDriver.java,92,        }
java/engine/org/apache/derby/impl/sql/compile/NumericTypeCompiler.java,258,"  scale = higherTC.getScale(operator, leftType, rightType);"
java/engine/org/apache/derby/impl/sql/compile/NumericTypeCompiler.java,469,  if (getStoredFormatIdFromTypeId() != StoredFormatIds.DECIMAL_TYPE_ID)
java/engine/org/apache/derby/impl/sql/compile/NumericTypeCompiler.java,470,  {
java/engine/org/apache/derby/impl/sql/compile/NumericTypeCompiler.java,471,   return leftType.getScale();
java/engine/org/apache/derby/impl/sql/compile/NumericTypeCompiler.java,472,  }
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,714," goodStatement( conn, ""create table t( A_6852 int generated always as identity(start with 7 increment by 2 cycle))"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,719,"             ""select AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME ='A_6852'"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,722,"                 { ""7"", ""7"", ""2"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,729," goodStatement( conn, ""create table T_6852( A_6852 int generated always as identity(start with 7 increment by 2))"" );"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,734,"             ""select AUTOINCREMENTVALUE, AUTOINCREMENTSTART, AUTOINCREMENTINC from sys.syscolumns where COLUMNNAME ='A_6852'"","
java/testing/org/apache/derbyTesting/functionTests/tests/lang/IdentitySequenceTest.java,737,"                 { ""7"", ""7"", ""2"" },"
java/testing/org/apache/derbyTesting/functionTests/tests/lang/VetJigsawTest.java,185,"             ""  where name like '%.class'"""
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,115,"        ""    <p> <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\"">db-derby-{0}-bin.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,116,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\"">db-derby-{0}-bin.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,118,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\"">db-derby-{0}-lib.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,119,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\"">db-derby-{0}-lib.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.md5\"">MD5</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,124,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\"">db-derby-{0}-src.zip</a>  [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.md5\"">MD5</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,125,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\"">db-derby-{0}-src.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.md5\"">MD5</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n"";"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,115,"        ""    <p> <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.zip\"">db-derby-{0}-bin.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,116,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz\"">db-derby-{0}-bin.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-bin.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,118,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.zip\"">db-derby-{0}-lib.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,119,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz\"">db-derby-{0}-lib.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,121,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip\"">db-derby-{0}-lib-debug.zip</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,122,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz\"">db-derby-{0}-lib-debug.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-lib-debug.tar.gz.sha-512\"">SHA-512</a>]</p>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,124,"        ""    <p><a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.zip\"">db-derby-{0}-src.zip</a>  [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.zip.sha-512\"">SHA-512</a>]<br/>\n"" +"
java/build/org/apache/derbyBuild/ReleaseNotesTransformer.java,125,"        ""    <a href=\""[preferred]/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz\"">db-derby-{0}-src.tar.gz</a> [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.asc\"">PGP</a>] [<a href=\""http://www.apache.org/dist/db/derby/db-derby-{0}/db-derby-{0}-src.tar.gz.sha-512\"">SHA-512</a>] (Note that, due to long filenames, you will need gnu tar to unravel this tarball.)</p>\n"";"
java/org.apache.derby.engine/org/apache/derby/impl/sql/compile/AggregateNode.java,401,            // priv if needed
java/org.apache.derby.engine/org/apache/derby/impl/sql/compile/AggregateNode.java,402,            getCompilerContext().createDependency( ad );
